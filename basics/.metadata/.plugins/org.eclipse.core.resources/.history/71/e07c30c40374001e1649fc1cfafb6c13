#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include "stm32f4xx.h"
#include "usart_driver.h"
#include "gpio_driver.h"
#include "dma_driver.h"

#define UART_TX_PIN						GPIO_PIN_2
#define UART_RX_PIN						GPIO_PIN_3
#define BUTTON_PIN						GPIO_PIN_0
#define SLEEP_COUNT						500000
#define BUTTON_IRQ_NO					6
#define SYSCFG_EXTI_CR_ADDR				(0x40013800UL + 0x08UL)
#define EXTI_IMR_ADDR					0x40013C00UL
#define EXTI_PR_ADDR					(0x40013C00UL + 0x14UL)
#define EXTI_RTSR_ADDR					(0x40013C00UL + 0x08UL)
#define EXTI_INTERRUPT_PIN_NUM			0
#define DMA1_STREAM6_IRQ_NO				17

struct USART_Handle_t Test_USART;
struct DMA_Handle_t Test_DMA;

char message[]="Message through DMA\r\n";

void configure_uart(void);
void configure_button(void);
void configure_dma(void);
void send_using_dma(void);
void UART_SendChar(uint8_t ch);
void delay(void);

void EXTI0_IRQHandler(void)
{
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;

	//printf("Printf() function redirected to UART!\r\n");


	//Trigger DMA transfer from memory to UART by setting configuration in UART CR register
	Test_USART.pUSART->USART_CR3 |= (1 << USART_CR3_DMAT);

	delay(); // For de-bouncing the input button

	// Clearing the EXTI_PR Register
	*pEXTI_PR |= (1 << EXTI_INTERRUPT_PIN_NUM);
}

void DMA1_Stream6_IRQHandler(void)
{
	//Clear the configuration in UART CR register
	Test_USART.pUSART->USART_CR3 &= ~(1 << USART_CR3_DMAT);

	//Clear DMA TCIE Interrupt Flag
	Test_DMA.pDMA_Cont->DMA_HIFCR |= (1 << 21);

	//Configure the number of bytes to be transferred
	Test_DMA.pDMA_Stream->DMA_NDTR = Test_DMA.DMA_Config.DMA_Num_Bytes;

	//Enable DMA
	DMA_PeripheralEnable(&Test_DMA);
}

int main(void)
{
	configure_uart();
	configure_button();
	configure_dma();


	while(1)
	{
		send_using_dma();
		delay();
	}

	return 0;
}

void configure_uart(void)
{
	//GPIO Pin Configuration
	EnablePeriClk(GPIOA);
	GPIOSetMode(GPIOA,UART_TX_PIN,GPIO_MODE_ALTFN);
	GPIOSetMode(GPIOA,UART_RX_PIN,GPIO_MODE_ALTFN);
	GPIOSetAltFn(GPIOA,UART_TX_PIN,GPIO_ALTFN_7);
	GPIOSetAltFn(GPIOA,UART_RX_PIN,GPIO_ALTFN_7);
	GPIOSetOutputType(GPIOA,UART_TX_PIN,GPIO_OPTYPE_PP);
	GPIOSetOutputType(GPIOA,UART_RX_PIN,GPIO_OPTYPE_PP);
	GPIOSetOutputSpeed(GPIOA,UART_TX_PIN,GPIO_OPSPEED_HIGH);
	GPIOSetOutputSpeed(GPIOA,UART_RX_PIN,GPIO_OPSPEED_HIGH);
	GPIOSetPullUpDownConfig(GPIOA,UART_TX_PIN,GPIO_PULL_UP);
	GPIOSetPullUpDownConfig(GPIOA,UART_RX_PIN,GPIO_PULL_UP);

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;

	EnablePeriClk(USART2);
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_button(void)
{

	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_ADDR;

	//GPIO Pin Configuration
	EnablePeriClk(GPIOA);
	GPIOSetMode(GPIOA,BUTTON_PIN,GPIO_MODE_INPUT);

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << EXTI_INTERRUPT_PIN_NUM);  	// Setting the Interrupt Mask Register
	*pEXTI_RTSR |= (1 << EXTI_INTERRUPT_PIN_NUM); 	// Setting the Rising Trigger Set Register

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
	*pSYSCFG_EXTI_CR_ADDR &= ~(0x000F);       		// Enabling GPIOA Port O input on EXTI0 line

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(BUTTON_IRQ_NO);					// Enabling the interrupt
}

void configure_dma(void)
{
	Test_DMA.pDMA_Cont = (struct DMA_Controller_RegDef_t *) DMA1;
	Test_DMA.pDMA_Stream = (struct DMA_Stream_RegDef_t *) DMA1_STREAM_6;
	Test_DMA.DMA_Config.DMA_Channel = DMA_CHANNEL_4;
	Test_DMA.DMA_Config.DMA_Peripheral_Address = (uint32_t) &(Test_USART.pUSART->USART_DR);
	Test_DMA.DMA_Config.DMA_M0_Address = (uint32_t) &message;
	Test_DMA.DMA_Config.DMA_Memory_Data_Size = DMA_DATA_SIZE_BYTE;
	Test_DMA.DMA_Config.DMA_Peripheral_Data_Size = DMA_DATA_SIZE_BYTE;
	Test_DMA.DMA_Config.DMA_Memory_Address_Increment = DMA_ADDR_INCREMENT;
	Test_DMA.DMA_Config.DMA_Peripheral_Address_Increment = DMA_ADDR_FIXED;
	Test_DMA.DMA_Config.DMA_Data_Transfer_Direction = DMA_DIRECTION_M2P;
	Test_DMA.DMA_Config.DMA_Stream_Priority_Level = DMA_PRIORITY_LEVEL_LOW;
	Test_DMA.DMA_Config.DMA_Num_Bytes = sizeof(message);
	Test_DMA.DMA_Config.DMA_TCIE_Status = DMA_TCIE_DISABLE;
	Test_DMA.DMA_Config.DMA_HTIE_Status = DMA_HTIE_DISABLE;

	EnablePeriClk(DMA1);
	DMA_Config(&Test_DMA);
	DMA_PeripheralEnable(&Test_DMA);

	// Enable the DMA TC Interrupt
	NVIC_EnableIRQ(DMA1_STREAM6_IRQ_NO);		// Enabling the interrupt
}

void send_using_dma(void)
{

	Test_USART.pUSART->USART_CR3 &= ~(1 << USART_CR3_DMAT);

	//Configure the number of bytes to be transferred
	Test_DMA.pDMA_Stream->DMA_NDTR = Test_DMA.DMA_Config.DMA_Num_Bytes;

	//Enable DMA
	DMA_PeripheralEnable(&Test_DMA);

	Test_USART.pUSART->USART_CR3 |= (1 << USART_CR3_DMAT);
}

void UART_SendChar(uint8_t ch)
{
	USART_SendData(&Test_USART, &ch, 1);
}

void delay(void)
{
	uint32_t j;
	for(j=0;j<SLEEP_COUNT;j++);
}
