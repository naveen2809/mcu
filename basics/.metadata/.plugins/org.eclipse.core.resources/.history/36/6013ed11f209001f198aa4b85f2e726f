/*
 * w5500_driver.c
 *
 *  Created on: 04-May-2024
 *      Author: naveen
 */

#include <stdint.h>
#include "stm32f4xx.h"
#include "gpio_driver.h"
#include "spi_driver.h"
#include "common_utils.h"
#include "w5500_driver.h"

void w5500_configure_pins(void)
{
	//Configure the GPIO Pin for Slave Select Pin of FLASH Module
	EnablePeriClk(W5500_PORT);
	GPIOSetMode(W5500_PORT,SS_PIN,GPIO_MODE_OUTPUT);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

uint8_t w5500_get_chip_version(void)
{
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x39;
	tx_buf[2] = 0x00;
	tx_buf[3] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return rx_buf[3];
}

uint8_t w5500_read_phy_cfgr(void)
{
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x2E;
	tx_buf[2] = 0x00;
	tx_buf[3] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return rx_buf[3];
}

void w5500_configure_phy(void)
{
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x2E;
	tx_buf[2] = 0x04;
	tx_buf[3] = 0xF8;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

uint8_t w5500_read_common_mode_reg(void)
{
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x00;
	tx_buf[2] = 0x00;
	tx_buf[3] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return rx_buf[3];
}

void w5500_configure_gw_ip_address(uint8_t *addr)
{
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x01;
	tx_buf[2] = 0x04;

	tx_buf[3] = addr[0];
	tx_buf[4] = addr[1];
	tx_buf[5] = addr[2];
	tx_buf[6] = addr[3];

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_get_gw_ip_address(uint8_t *addr)
{
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x01;
	tx_buf[2] = 0x00;

	tx_buf[3] = 0x00;
	tx_buf[4] = 0x00;
	tx_buf[5] = 0x00;
	tx_buf[6] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	for(i=0;i<4;i++)
	{
		addr[i] = rx_buf[i+3];
	}

	return;
}

void w5500_configure_subnet_mask(uint8_t *subnet_mask)
{
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x05;
	tx_buf[2] = 0x04;

	tx_buf[3] = subnet_mask[0];
	tx_buf[4] = subnet_mask[1];
	tx_buf[5] = subnet_mask[2];
	tx_buf[6] = subnet_mask[3];

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_get_subnet_mask(uint8_t *subnet_mask)
{
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x05;
	tx_buf[2] = 0x00;

	tx_buf[3] = 0x00;
	tx_buf[4] = 0x00;
	tx_buf[5] = 0x00;
	tx_buf[6] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	for(i=0;i<4;i++)
	{
		subnet_mask[i] = rx_buf[i+3];
	}

	return;
}

void w5500_configure_ip_address(uint8_t *addr)
{
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x0F;
	tx_buf[2] = 0x04;

	tx_buf[3] = addr[0];
	tx_buf[4] = addr[1];
	tx_buf[5] = addr[2];
	tx_buf[6] = addr[3];

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_get_ip_address(uint8_t *addr)
{
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x0F;
	tx_buf[2] = 0x00;

	tx_buf[3] = 0x00;
	tx_buf[4] = 0x00;
	tx_buf[5] = 0x00;
	tx_buf[6] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	for(i=0;i<4;i++)
	{
		addr[i] = rx_buf[i+3];
	}

	return;
}

void w5500_configure_mac_address(uint8_t *addr)
{
	uint8_t tx_buf[9];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x09;
	tx_buf[2] = 0x04;

	tx_buf[3] = addr[0];
	tx_buf[4] = addr[1];
	tx_buf[5] = addr[2];
	tx_buf[6] = addr[3];
	tx_buf[7] = addr[4];
	tx_buf[8] = addr[5];

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,9);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_get_mac_address(uint8_t *addr)
{
	uint8_t tx_buf[9];
	uint8_t rx_buf[9];
	uint8_t i;

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x09;
	tx_buf[2] = 0x00;

	tx_buf[3] = 0x00;
	tx_buf[4] = 0x00;
	tx_buf[5] = 0x00;
	tx_buf[6] = 0x00;
	tx_buf[7] = 0x00;
	tx_buf[8] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,9);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	for(i=0;i<6;i++)
	{
		addr[i] = rx_buf[i+3];
	}

	return;
}

void w5500_set_common_interrupt_register(uint8_t value)
{
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x15;
	tx_buf[2] = 0x04;
	tx_buf[3] = value;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

uint8_t w5500_read_common_interrupt_register(void)
{
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x15;
	tx_buf[2] = 0x00;
	tx_buf[3] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return rx_buf[3];
}

uint8_t w5500_read_socket_interrupt_register(void)
{
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x17;
	tx_buf[2] = 0x00;
	tx_buf[3] = 0x00;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return rx_buf[3];
}

void w5500_set_socket_interrupt_register(uint8_t value)
{
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x17;
	tx_buf[2] = 0x04;
	tx_buf[3] = value;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_set_socket_control_register(uint8_t value)
{
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x17;
	tx_buf[2] = 0x04;
	tx_buf[3] = value;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void w5500_set_socket_status_register(uint8_t value)
{
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
	tx_buf[1] = 0x17;
	tx_buf[2] = 0x04;
	tx_buf[3] = value;

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buf,4);
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);

	return;
}
