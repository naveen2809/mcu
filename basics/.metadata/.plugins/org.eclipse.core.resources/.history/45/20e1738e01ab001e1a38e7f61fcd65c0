/*
 * nRFL01_driver.c
 *
 *  Created on: 24-Dec-2023
 *      Author: naveen
 */

#include "nRFL01_driver.h"
#include "common_utils.h"

char rx_buffer[NRF_RADIO_MAX_PKT_LENGTH];
char cmd_buffer[NRF_RADIO_MAX_PKT_LENGTH + 1];
uint8_t rx_packet_length;
uint8_t cmd_packet_length;
uint8_t nrf_packet_tx_state;

void configure_nrf_radio(struct NRF_RADIO_CONFIG_t * radio_config)
{
	uint8_t i;

	//1. Configure the GPIO pins for CE and IRQ pins
	EnablePeriClk(RADIO_PORT);
	GPIOSetMode(RADIO_PORT,CE_PIN,GPIO_MODE_OUTPUT);
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
	GPIOSetMode(RADIO_PORT,IRQ_PIN,GPIO_MODE_INPUT);
	GPIOSetPullUpDownConfig(RADIO_PORT,IRQ_PIN,GPIO_PULL_UP);
	GPIOSetMode(RADIO_PORT,SS_PIN,GPIO_MODE_OUTPUT);
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);

	//2. Configure the Radio Mode

	//3. Configure the RF Channel, Data Rate and PA Level
	//3.1 Configure the RF Channel
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_CH;
	cmd_buffer[1] = radio_config->radio_channel;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//3.2 Configure the Data Rate and PA Level
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_SETUP;

	cmd_buffer[1] &= 0x00;
	cmd_buffer[1] |= (radio_config->radio_pa_level << NRF_RADIO_RF_PWR_POS);

	if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_250K)
	{
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_LOW_POS);
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_1M)
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_2M)
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_HIGH_POS);
	}

	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//4. Configure Data Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_RXADDR;
	cmd_buffer[1] = radio_config->radio_enable_data_pipes;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//5. Configure Auto-Acknowledgements
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_AA;
	cmd_buffer[1] = radio_config->radio_enable_auto_acknowledgements;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//6. Configure Address Width
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_AW;
	cmd_buffer[1] = radio_config->radio_address_width;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//7. Configure Retransmission Parameters
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_RETR;
	cmd_buffer[1] = (radio_config->radio_auto_retransmit_count | radio_config->radio_auto_retransmit_delay);
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//8. Configure Own Address (RX_ADDR_P0)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RX_ADDR_P0;
	for(i=1;i<=radio_config->radio_address_width;i++)
	{
		cmd_buffer[i] = radio_config->radio_addr_p0[i];
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//9. Configure Peer Address (TX_ADDR)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_TX_ADDR;
	for(i=1;i<=radio_config->radio_address_width;i++)
	{
		cmd_buffer[i] = radio_config->radio_addr_peer[i];
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//10. Configure Dynamic Pay-load Length Feature for Individual Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_DYNPD;
	cmd_buffer[1] = radio_config->radio_dynamic_payload_enable_pipes;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//11. Configure Feature Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_FEATURE;
	cmd_buffer[1] &= 0x00;
	cmd_buffer[1] |= (radio_config->radio_dynamic_payload_length_feature << NRF_RADIO_DPL_FEATURE_BITPOS);
	cmd_buffer[1] |= (radio_config->radio_ack_payload_feature << NRF_RADIO_ACK_PAYLOAD_FEATURE_BITPOS);
	cmd_buffer[1] |= (radio_config->radio_dynamic_ack_feature << NRF_RADIO_DYNAMIC_ACK_FEATURE_BITPOS);
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	//12. Configure CONFIG Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_CONFIG;
	cmd_buffer[1] &= 0x00;
	if(radio_config->radio_mode == NRF_RADIO_MODE_TX)
	{
		cmd_buffer[1] = 0x0A;
	}
	else if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
	{
		cmd_buffer[1] = 0x0B;
	}
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
	{
		delay_us(50);
		GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
	}

	return;
}

uint8_t nrf_radio_transmit_packet(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{

	nrf_packet_tx_state = NRF_RADIO_PKT_TX_START;

	//1. Send packet to radio using SPI interface
	nrf_radio_send_packet_to_fifo(buffer,length,ack_policy);

	//2. Pulse the PTX CE line for more than 10us
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
	delay_us(10);
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);

	//3. Wait for confirmation of packet transmission from NRF24L01 radio
	while(nrf_packet_tx_state == NRF_RADIO_PKT_TX_START);              //Packet TX state is updated in the ISR

	return nrf_packet_tx_state;
}

uint8_t nrf_radio_transmit_packet_polling(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{

	nrf_packet_tx_state = NRF_RADIO_PKT_TX_START;

	//1. Send packet to radio using SPI interface
	nrf_radio_send_packet_to_fifo(buffer,length,ack_policy);

	//2. Pulse the PTX CE line for more than 10us
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
	delay_us(10);
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);

	//3. Wait for packet to be transmitted by NRF24L01 radio
	delay_us(1000000);
	nrf_radio_interrupt_callback();

	while(nrf_packet_tx_state == NRF_RADIO_PKT_TX_START);              //Packet TX state is updated in the ISR

	return nrf_packet_tx_state;
}

void nrf_radio_receive_packet_callback(uint8_t *buffer, uint8_t length)
{
	//Print message
	printf("Packet Received from Peer Radio\r\n");

	//Print packet length
	//The actual length of the message is one less than the value of length
	printf("Packet Length: %d\r\n",length-1);

	//Print packet contents
	//The actual Rx packet contents are stored from buffer[1] onwards as buffer[0] contains the value of STATUS Register
	printf("Packet Contents: %s\r\n",(char *)(buffer+1));

	return;
}

__attribute__((weak)) void nrf_radio_packet_received_application_callback(uint8_t *buffer, uint8_t length)
{
	return;
}

void nrf_radio_interrupt_callback(void)
{
	uint8_t interrupt_source, status;

	//1. Get the STATUS Register
	//status = nrf_radio_get_status_register();

	//printf("Callback Status: %d\r\n", status);			//Debug Prints

	//2. Identify interrupt source
	interrupt_source = nrf_radio_get_interrupt_source();

	//printf("Callback Interrupt Source: %d\r\n", interrupt_source); //Debug Prints

	//3. Handle the interrupt source
	if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
	{
		nrf_radio_retreive_packet_from_fifo();
		nrf_radio_receive_packet_callback((uint8_t *)rx_buffer,rx_packet_length);
		//status |= NRF_RADIO_INT_SRC_RX_DR_BITPOS;
		status = NRF_RADIO_INT_SRC_RX_DR_BITPOS;
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_TX_DS)
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_COMPLETE;
		//status |= NRF_RADIO_INT_SRC_TX_DS_BITPOS;
		status = NRF_RADIO_INT_SRC_TX_DS_BITPOS;
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_MAX_RT)
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_FAIL;
		//status |= NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
		status = NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
	}
	else
	{
		while(1);
	}

	//4. Clear the interrupt by writing to STATUS Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
	cmd_buffer[1] = status;
	cmd_packet_length = 2;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	return;
}

void nrf_radio_rx_polling(void)
{

	uint8_t status, interrupt_source;

	while(1)
	{
		interrupt_source = nrf_radio_get_interrupt_source();

		//printf("Interrupt Source: %d\r\n",interrupt_source);

		//Handle the interrupt source
		if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
		{
			nrf_radio_retreive_packet_from_fifo();
			nrf_radio_packet_received_application_callback((uint8_t *)(rx_buffer+1),(rx_packet_length-1));
			status = NRF_RADIO_INT_SRC_RX_DR_BITPOS;

			printf("Status Before Clearing = %d\r\n",nrf_radio_get_status_register());

			//4. Clear the interrupt by writing to STATUS Register
			cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
			cmd_buffer[1] = status;
			cmd_packet_length = 2;
			nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

			delay_us(5000);

			printf("Status After Clearing = %d\r\n",nrf_radio_get_status_register());
		}
	}
}

uint8_t nrf_radio_get_status_register(void)
{
	uint8_t status;

	//1. Read the STATUS register (using NOP command)
	cmd_buffer[0] = NRF_RADIO_CMD_NOP;
	cmd_packet_length = 1;

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);

	status = (uint8_t) rx_buffer[0];

	return status;
}

uint8_t nrf_radio_get_interrupt_source(void)
{
	uint8_t status, interrupt_source;

	//1. Read the STATUS register
	status = nrf_radio_get_status_register();

	//printf("%d\r\n",status);

	if(status & NRF_RADIO_INT_SRC_TX_DS_BITPOS)
	{
		interrupt_source = NRF_RADIO_INT_SRC_TX_DS;
	}
	else if(status & NRF_RADIO_INT_SRC_RX_DR_BITPOS)
	{
		interrupt_source = NRF_RADIO_INT_SRC_RX_DR;
	}
	else if(status & NRF_RADIO_INT_SRC_MAX_RT_BITPOS)
	{
		interrupt_source = NRF_RADIO_INT_SRC_MAX_RT;
	}
	else
	{
		interrupt_source = NRF_RADIO_INT_SRC_NONE;
	}

	return interrupt_source;
}

void nrf_radio_retreive_packet_from_fifo(void)
{
	uint8_t packet_length, i;

	//1. Get the length of the RX Pay-load (from Data Pipe P0)
	packet_length = nrf_radio_get_rx_packet_length();

	//2. Read the RX Pay-load
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PAYLOAD;
	for(i=1;i<=packet_length;i++)
		cmd_buffer[i] = 0x00;
	cmd_packet_length = packet_length + 1;

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);

	//3. Update the global variable rx_packet_length
	rx_packet_length = packet_length;
}

uint8_t nrf_radio_get_rx_packet_length(void)
{

	uint8_t length;
	//1. Read the RX_PW_P0 Register
	cmd_buffer[0] = NRF_RADIO_CMD_R_REGISTER_RX_PW_P0;
	cmd_buffer[1] = 0x00;
	cmd_packet_length = 2;

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);

	length = (uint8_t) rx_buffer[1];

	return length;
}

void nrf_radio_send_packet_to_fifo(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{
	uint8_t i;

	if(ack_policy == NRF_RADIO_ACK)
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD;
	}
	else if(ack_policy == NRF_RADIO_NO_ACK)
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD_NOACK;
	}

	for(i=1;i<=length;i++)
	{
		cmd_buffer[i] = buffer[i-1];
	}

	cmd_packet_length = length + 1;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);

	return;
}

void nrf_radio_cmd_write(uint8_t *buffer,uint8_t length)
{
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,buffer,length);
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
}

void nrf_radio_flush_tx(void)
{
	cmd_buffer[0] = NRF_RADIO_CMD_FLUSH_TX;
	cmd_packet_length = 1;
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
}
