/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define AHB1_ENR_ADDR					(0x40023800UL + 0x30UL)
#define GPIOA_MODER_ADDR				0x40020000UL
#define GPIOA_IDR_ADDR					0x40020010UL
#define GPIOD_MODER_ADDR				0x40020C00UL
#define GPIOD_ODR_ADDR					0x40020C14UL
#define GPIO_PORT_INPUT					0
#define GPIO_PIN_NUM_INPUT				0
#define GPIO_PORT_OUTPUT				3
#define GPIO_PIN_NUM_OUTPUT				12
#define SLEEP_COUNT						500000
#define ENABLE							1

void delay(void)
{
	uint32_t j;
	for(j=0;j<SLEEP_COUNT;j++);
}

int main(void)
{

	uint32_t *pAHB1ENR = (uint32_t *) AHB1_ENR_ADDR;
	uint32_t *pGPIOA_MODER = (uint32_t *) GPIOA_MODER_ADDR;
	uint32_t *pGPIOA_IDR = (uint32_t *) GPIOA_IDR_ADDR;
	uint32_t *pGPIOD_MODER = (uint32_t *) GPIOD_MODER_ADDR;
	uint32_t *pGPIOD_ODR = (uint32_t *) GPIOD_ODR_ADDR;

	uint32_t input_value;
	uint32_t current_value;



	// Enable the peripheral clock for GPIO Port A

	*pAHB1ENR |= (1 << GPIO_PORT_INPUT);

	// Configuring the GPIO Setting for GPIO Port A, Pin A0

	*pGPIOA_MODER &= ~(0x03 << 2*GPIO_PIN_NUM_INPUT);
	*pGPIOA_MODER |= (0x00 << 2*GPIO_PIN_NUM_INPUT);


	//1. Enable peripheral clock for GPIOD peripheral by writing to AHB1ENR

	*pAHB1ENR |= (1 << GPIO_PORT_OUTPUT);

		//2. Set of the mode of GPIOD, Pin 12 as output by writing to GPIOD_MODER

	*pGPIOD_MODER |= (1 << 2*GPIO_PIN_NUM_OUTPUT);

	for(;;)
	{
		input_value = ((*pGPIOA_IDR >> GPIO_PIN_NUM_INPUT) & 0x1);


		if(input_value == ENABLE)
		{
			current_value = ((*pGPIOD_ODR >> GPIO_PIN_NUM_OUTPUT) & 0x1);
			current_value ^= 0x1;
			*pGPIOD_ODR |= (current_value << GPIO_PIN_NUM_OUTPUT);
			delay();
		}

	}

}
