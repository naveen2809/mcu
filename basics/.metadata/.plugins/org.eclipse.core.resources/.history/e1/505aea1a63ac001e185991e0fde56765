/*
 * rtc_driver.c
 *
 *  Created on: 05-Jan-2024
 *      Author: naveen
 */

#include "rtc_driver.h"
#include "common_utils.h"

uint32_t *pRCC_CR = (uint32_t *) RCC_CR_REG_ADDR;
uint32_t *pRCC_CFGR = (uint32_t *) RCC_CFGR_REG_ADDR;
uint32_t *pRCC_BDCR = (uint32_t *) RCC_BDCR_REG_ADDR;
uint32_t *pPWR_CR = (uint32_t *) PWR_CR_REG_ADDR;
uint32_t *pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;

struct RTC_RegDef_t * stm32_rtc = (struct RTC_RegDef_t *) RTC_BASE_ADDR;

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_Config_Calendar(struct RTC_Config_t *pRTCConfig)
{
	uint32_t time_value = 0;
	uint32_t date_value = 0;

	//1. Configure and Enable the RTC Clock
	//1.a Enable Write Access to the RTC Registers by enabling DBP bit in PWR_CR Register
	*pRCCPeriClkReg |= (1 << RCC_APB1ENR_PWR);
	*pPWR_CR |= (1 << PWR_CR_DBP);

	stm32_rtc->RTC_WPR = 0xCA;
	stm32_rtc->RTC_WPR = 0x53;

	//1.a Configure the RTC Clock Source in in RCC_BDCR

	*pRCC_BDCR &= ~(3 << RCC_BDCR_RTCSEL);
	*pRCC_BDCR |= (pRTCConfig->RTCClockSource << RCC_BDCR_RTCSEL);

	//1.b If the RTC Clock Source is HSE, Turn On the HSE Oscillator
	//Also, configure the HSE PreScaler to generate 1 MHz RTCCLK
	if(pRTCConfig->RTCClockSource == RTC_CLK_SRC_HSE)
	{
		//Turning on the HSE Oscillator
		*pRCC_CR |= (1 << HSE_ON_BITPOS);					//Turning on the HSE Oscillator
		while(!(*pRCC_CR & (1 << HSE_CHECK_BITPOS)));		//Checking whether HSE Oscillator is turned on and is stable

		//Configure the HSE PreScaler to generate 1 MHz RTCCLK
		*pRCC_CFGR &= ~(31 << RCC_CFGR_RTCPRE);
		*pRCC_CFGR |= (pRTCConfig->RTCClockHSEPrescaler << RCC_CFGR_RTCPRE);
	}

	//1.c Enable the RTC Clock in RCC_BDCR
	*pRCC_BDCR |= (1 << RCC_BDCR_RTCEN);

	//2. Configure the RTC Calendar Parameters

	//2.b Enable the Initialization Mode
	stm32_rtc->RTC_ISR |= (1 << RTC_ISR_INIT);
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_INITF) & 0x1));

	//2.c Configure the PreScaler Values in RTC_PRER Register
	stm32_rtc->RTC_PRER &= ~(0x7FFF << RTC_PRER_PREDIV_S);
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerS << RTC_PRER_PREDIV_S);

	stm32_rtc->RTC_PRER &= ~(0x7F << RTC_PRER_PREDIV_A);
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerA << RTC_PRER_PREDIV_A);

	//2.d Configure the Time Parameters in RTC_TR Register
	time_value = (pRTCConfig->RTCClockSecondsUnits << RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << RTC_TR_ST) | (pRTCConfig->RTCClockMinutesUnits << RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << RTC_TR_MNT) | (pRTCConfig->RTCClockHoursUnits << RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << RTC_TR_PM);
	stm32_rtc->RTC_TR = time_value;

	//2.e Configure the Date Parameters in RTC_DR Register
	date_value = (pRTCConfig->RTCClockDateUnits << RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << RTC_DR_DT) | (pRTCConfig->RTCClockMonthUnits << RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << RTC_DR_MT) | (pRTCConfig->RTCClockYearUnits << RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << RTC_DR_YT) | (pRTCConfig->RTCClockDayOfWeek << RTC_DR_WDU);
	stm32_rtc->RTC_DR = date_value;

	//2.f Exit the Initialization Mode
	stm32_rtc->RTC_ISR &= ~(1 << RTC_ISR_INIT);

	return;
}

void RTC_Read_Calendar(struct Date *date, struct Time *time)
{
	uint32_t time_value, date_value;

	//1. Wait for the RSF bit to be set in RTC_ISR register
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_RSF) & 0x1));

	//2. Read the current time value
	time_value = stm32_rtc->RTC_TR;

	//3. Read the current date value
	date_value = stm32_rtc->RTC_DR;

	//4. Format the time and date values
	//4.a Format the time values
	time->seconds = ((time_value >> RTC_TR_ST) & 0x7)*10 + ((time_value >> RTC_TR_SU) & 0xF);
	time->minutes = ((time_value >> RTC_TR_MNT) & 0x7)*10 + ((time_value >> RTC_TR_MNU) & 0xF);
	time->hours = ((time_value >> RTC_TR_HT) & 0x3)*10 + ((time_value >> RTC_TR_HU) & 0xF);
	time->timeformat = ((time_value >> RTC_TR_PM) & 0x1);

	//4.b Format the date values
	date->date = ((date_value >> RTC_DR_DT) & 0x3)*10 + ((date_value >> RTC_DR_DU) & 0xF);
	date->month = ((date_value >> RTC_DR_MT) & 0x1)*10 + ((date_value >> RTC_DR_MU) & 0xF);
	date->year = ((date_value >> RTC_DR_YT) & 0xF)*10 + ((date_value >> RTC_DR_YU) & 0xF);
	date->dayofweek = ((date_value >> RTC_DR_WDU) & 0x7);

	return;
}

void RTC_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
	static uint32_t count = 0;
	struct Date saved_date;
	struct Time saved_time;
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(count == 0)
	{
		//Print the Time Information
		lcd_pcf8574_clear_screen();
		delay_us(3000);
		lcd_pcf8574_return_home();
		delay_us(3000);
		printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);

		//Saving the time information
		saved_time.seconds = time->seconds;
		saved_time.minutes = time->minutes;
		saved_time.hours = time->hours;

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
		delay_us(3000);
		format_dow(date,dow);
		format_mon(date,mon);
		printf(" %s %02d-%s-%02d",dow,date->date,mon,date->year);

		//Saving the date information
		saved_date.date = date->date;
		saved_date.month = date->month;
		saved_date.year = date->year;
		saved_date.dayofweek = date->dayofweek;
	}

	return;
}

void format_dow(struct Date *date,char *dow)
{
	switch(date->dayofweek)
	{
		case 1:
			strcpy(dow,"Mon");
			break;
		case 2:
			strcpy(dow,"Tue");
			break;
		case 3:
			strcpy(dow,"Wed");
			break;
		case 4:
			strcpy(dow,"Thu");
			break;
		case 5:
			strcpy(dow,"Fri");
			break;
		case 6:
			strcpy(dow,"Sat");
			break;
		case 7:
			strcpy(dow,"Sun");
			break;
		default:
			break;
	}

	return;
}

void format_mon(struct Date *date,char *mon)
{
	switch(date->month)
	{
		case 1:
			strcpy(mon,"Jan");
			break;
		case 2:
			strcpy(mon,"Feb");
			break;
		case 3:
			strcpy(mon,"Mar");
			break;
		case 4:
			strcpy(mon,"Apr");
			break;
		case 5:
			strcpy(mon,"May");
			break;
		case 6:
			strcpy(mon,"Jun");
			break;
		case 7:
			strcpy(mon,"Jul");
			break;
		case 8:
			strcpy(mon,"Aug");
			break;
		case 9:
			strcpy(mon,"Sep");
			break;
		case 10:
			strcpy(mon,"Oct");
			break;
		case 11:
			strcpy(mon,"Nov");
			break;
		case 12:
			strcpy(mon,"Dec");
			break;
		default:
			break;
	}

	return;
}
