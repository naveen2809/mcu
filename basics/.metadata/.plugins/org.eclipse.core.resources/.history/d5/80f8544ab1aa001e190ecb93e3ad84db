/*
 * at45dbxx_flash_memory_driver.c
 * Driver code for the AT45DB041E SPI Flash Memory Module
 * Reference: https://www.waveshare.com/w/upload/b/b4/AT45DB041E.pdf
 *  Created on: 29-Dec-2023
 *      Author: naveen
 */

#include "at45dbxx_flash_memory_driver.h"
#include "common_utils.h"

uint8_t at45dbxx_continuous_array_read(uint8_t ContinuousArrayReadMode, uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer,*receive_buffer;

	if(ContinuousArrayReadMode == AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LEGACY)
	{
		CommandLength = 8;						// Opcode Byte + 3 Address Bytes + 4 Dummy Bytes
		TotalLength = Len + CommandLength;

		tx_buffer = (uint8_t *) malloc(TotalLength);
		receive_buffer = (uint8_t *) malloc(TotalLength);

		if((tx_buffer == NULL) || (receive_buffer == NULL))
		{
			return AT45DBXX_FAIL;
		}

		tx_buffer[0] = 0xE8;							//Opcode
		tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
		tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
		tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
		tx_buffer[4] = 0x0;								//Dummy Bytes
		tx_buffer[5] = 0x0;								//Dummy Bytes
		tx_buffer[6] = 0x0;								//Dummy Bytes
		tx_buffer[7] = 0x0;								//Dummy Bytes
	}
	else if(ContinuousArrayReadMode == AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_HIGH_FREQ1)
	{
		CommandLength = 6;						// Opcode Byte + 3 Address Bytes + 2 Dummy Bytes
		TotalLength = Len + CommandLength;

		tx_buffer = (uint8_t *) malloc(TotalLength);
		receive_buffer = (uint8_t *) malloc(TotalLength);

		if((tx_buffer == NULL) || (receive_buffer == NULL))
		{
			return AT45DBXX_FAIL;
		}

		tx_buffer[0] = 0x1B;							//Opcode
		tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
		tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
		tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
		tx_buffer[4] = 0x0;								//Dummy Bytes
		tx_buffer[5] = 0x0;								//Dummy Bytes
	}
	else if(ContinuousArrayReadMode == AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_HIGH_FREQ2)
	{
		CommandLength = 5;						// Opcode Byte + 3 Address Bytes + 1 Dummy Bytes
		TotalLength = Len + CommandLength;

		tx_buffer = (uint8_t *) malloc(TotalLength);
		receive_buffer = (uint8_t *) malloc(TotalLength);

		if((tx_buffer == NULL) || (receive_buffer == NULL))
		{
			return AT45DBXX_FAIL;
		}

		tx_buffer[0] = 0x0B;							//Opcode
		tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
		tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
		tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
		tx_buffer[4] = 0x0;								//Dummy Bytes
	}
	else if(ContinuousArrayReadMode == AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LOW_FREQ)
	{
		CommandLength = 4;						// Opcode Byte + 3 Address Bytes
		TotalLength = Len + CommandLength;

		tx_buffer = (uint8_t *) malloc(TotalLength);
		receive_buffer = (uint8_t *) malloc(TotalLength);

		if((tx_buffer == NULL) || (receive_buffer == NULL))
		{
			return AT45DBXX_FAIL;
		}

		tx_buffer[0] = 0x03;							//Opcode
		tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
		tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
		tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
	}
	else if(ContinuousArrayReadMode == AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LOW_POWER)
	{
		CommandLength = 4;						// Opcode Byte + 3 Address Bytes
		TotalLength = Len + CommandLength;

		tx_buffer = (uint8_t *) malloc(TotalLength);
		receive_buffer = (uint8_t *) malloc(TotalLength);

		if((tx_buffer == NULL) || (receive_buffer == NULL))
		{
			return AT45DBXX_FAIL;
		}

		tx_buffer[0] = 0x01;							//Opcode
		tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
		tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
		tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
	}

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_page_read(uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer,*receive_buffer;

	CommandLength = 8;						// Opcode Byte + 3 Address Bytes + 4 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xD2;							//Opcode
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
	tx_buffer[4] = 0x0;								//Dummy Bytes
	tx_buffer[5] = 0x0;								//Dummy Bytes
	tx_buffer[6] = 0x0;								//Dummy Bytes
	tx_buffer[7] = 0x0;								//Dummy Bytes

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_buffer_read(uint8_t Buffer, uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer,*receive_buffer;

	CommandLength = 5;						// Opcode Byte + 3 Address Bytes + 1 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0xD4;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0xD6;							//Opcode
	}
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array
	tx_buffer[4] = 0x0;								//Dummy Bytes

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_buffer_write(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x84;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x87;							//Opcode
	}
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_buffer_to_page_program_with_erase(uint8_t Buffer, uint8_t *PageAddress)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x83;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x86;							//Opcode
	}
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_buffer_to_page_program_without_erase(uint8_t Buffer, uint8_t *PageAddress)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x88;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x89;							//Opcode
	}
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_page_program_through_buffer_with_erase(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x82;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x85;							//Opcode
	}
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_byte_page_program_through_buffer1_without_erase(uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x02;
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_modify_write(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len)
{
	uint32_t TotalLength,i,CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x58;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x59;							//Opcode
	}
	tx_buffer[1] = MemAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = MemAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = MemAddress[0];					//Byte Address in Flash Memory Array

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_page_erase(uint8_t *PageAddress)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;
	uint8_t status[2];

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x81;							//Opcode for Page Erase
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Free the dynamically allocated memory
	free(tx_buffer);

	//Check status of Page Erase operation
	//Step (a): Wait for the operation to complete
	do
	{
		at45dbxx_read_status_register(status);
	}
	while((status[0] & AT45DBXX_STATUS_READY_BITMASK) == 0);

	//Step (b): Check the status of the operation
	at45dbxx_read_status_register(status);

	if((status[1] & AT45DBXX_STATUS_EPE_BITMASK) == 0)
	{
		return AT45DBXX_SUCCESS;
	}
	else
	{
		return AT45DBXX_EPE_ERROR;
	}
}

uint8_t at45dbxx_block_erase(uint8_t *PageAddress)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x50;							//Opcode for Block Erase
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_sector_erase(uint8_t *PageAddress)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						// Opcode Byte + 3 Address Bytes

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x7C;							//Opcode for Sector Erase
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_chip_erase(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xC7;					//Opcode-1 for Chip Erase
	tx_buffer[1] = 0x94;					//Opcode-2 for Chip Erase
	tx_buffer[2] = 0x80;					//Opcode-3 for Chip Erase
	tx_buffer[3] = 0x9A;					//Opcode-4 for Chip Erase

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_program_erase_suspend(void)
{
	uint8_t tx_buffer = 0xB0;

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,&tx_buffer,1);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_program_erase_resume(void)
{
	uint8_t tx_buffer = 0xD0;

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,&tx_buffer,1);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_enable_sector_protection(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x3D;					//Opcode-1 for Chip Erase
	tx_buffer[1] = 0x2A;					//Opcode-2 for Chip Erase
	tx_buffer[2] = 0x7F;					//Opcode-3 for Chip Erase
	tx_buffer[3] = 0xA9;					//Opcode-4 for Chip Erase

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_disable_sector_protection(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x3D;					//Opcode-1 for Chip Erase
	tx_buffer[1] = 0x2A;					//Opcode-2 for Chip Erase
	tx_buffer[2] = 0x7F;					//Opcode-3 for Chip Erase
	tx_buffer[3] = 0x9A;					//Opcode-4 for Chip Erase

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_erase_sector_protection_register(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x3D;					//Opcode-1 for Chip Erase
	tx_buffer[1] = 0x2A;					//Opcode-2 for Chip Erase
	tx_buffer[2] = 0x7F;					//Opcode-3 for Chip Erase
	tx_buffer[3] = 0xCF;					//Opcode-4 for Chip Erase

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_program_sector_protection_register(uint8_t *TxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer;

	Len = 8;								//Eight Bytes for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x3D;					//Opcode-1 for Chip Erase
	tx_buffer[1] = 0x2A;					//Opcode-2 for Chip Erase
	tx_buffer[2] = 0x7F;					//Opcode-3 for Chip Erase
	tx_buffer[3] = 0xFC;					//Opcode-4 for Chip Erase

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_sector_protection_register(uint8_t *RxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 8;								//Eight Bytes for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x32;							//Opcode
	tx_buffer[1] = 0x0;								//Dummy Bytes
	tx_buffer[2] = 0x0;								//Dummy Bytes
	tx_buffer[3] = 0x0;								//Dummy Bytes

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_sector_lockdown_command(uint8_t *TxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer;

	Len = 8;								//Eight Bytes representing lock down status for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x3D;					//Opcode-1 for Sector Lock Down
	tx_buffer[1] = 0x2A;					//Opcode-2 for Sector Lock Down
	tx_buffer[2] = 0x7F;					//Opcode-3 for Sector Lock Down
	tx_buffer[3] = 0x30;					//Opcode-4 for Sector Lock Down

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_sector_lockdown_register(uint8_t *RxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 8;								//Eight Bytes for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x35;							//Opcode
	tx_buffer[1] = 0x0;								//Dummy Bytes
	tx_buffer[2] = 0x0;								//Dummy Bytes
	tx_buffer[3] = 0x0;								//Dummy Bytes

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_freeze_sector_lockdown(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x34;					//Opcode-1 for Freeze Sector Lock Down
	tx_buffer[1] = 0x55;					//Opcode-2 for Freeze Sector Lock Down
	tx_buffer[2] = 0xAA;					//Opcode-3 for Freeze Sector Lock Down
	tx_buffer[3] = 0x40;					//Opcode-4 for Freeze Sector Lock Down

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_program_security_register(uint8_t *TxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer;

	Len = 64;								//Eight Bytes representing lock down status for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Address Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x9B;					//Opcode-1 for Sector Lock Down
	tx_buffer[1] = 0x00;					//Opcode-2 for Sector Lock Down
	tx_buffer[2] = 0x00;					//Opcode-3 for Sector Lock Down
	tx_buffer[3] = 0x00;					//Opcode-4 for Sector Lock Down

	//Update the Transmit Buffer
	for(i=0;i<Len;i++)
	{
		tx_buffer[i+CommandLength] = TxBuf[i];
	}

	//Send Command and Data to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_security_register(uint8_t *RxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 128;								//Eight Bytes for Sectors 0 to 7
	CommandLength = 4;						// Opcode Byte + 3 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x77;							//Opcode
	tx_buffer[1] = 0x0;								//Dummy Bytes
	tx_buffer[2] = 0x0;								//Dummy Bytes
	tx_buffer[3] = 0x0;								//Dummy Bytes

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_page_to_buffer_transfer(uint8_t *PageAddress, uint8_t Buffer)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x53;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x55;							//Opcode
	}
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_page_to_buffer_compare(uint8_t *PageAddress, uint8_t Buffer)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x60;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x61;							//Opcode
	}
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_auto_page_rewrite(uint8_t *PageAddress, uint8_t Buffer)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(Buffer == AT45DBXX_SRAM_BUFFER_1)
	{
		tx_buffer[0] = 0x58;							//Opcode
	}
	else if(Buffer == AT45DBXX_SRAM_BUFFER_2)
	{
		tx_buffer[0] = 0x59;							//Opcode
	}
	tx_buffer[1] = PageAddress[2];					//Byte Address in Flash Memory Array
	tx_buffer[2] = PageAddress[1];					//Byte Address in Flash Memory Array
	tx_buffer[3] = PageAddress[0];					//Byte Address in Flash Memory Array

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_status_register(uint8_t *RxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 2;								//Eight Bytes for Sectors 0 to 7
	CommandLength = 1;						// Opcode Byte + 3 Dummy Bytes
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xD7;							//Opcode

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_configure_page_size(uint8_t PageSize)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	if(PageSize == AT45DBXX_PAGE_SIZE_256)
	{
		tx_buffer[0] = 0x3D;					//Opcode-1 for Page Size 256
		tx_buffer[1] = 0x2A;					//Opcode-2 for Page Size 256
		tx_buffer[2] = 0x80;					//Opcode-3 for Page Size 256
		tx_buffer[3] = 0xA6;					//Opcode-4 for Page Size 256
	}
	else if(PageSize == AT45DBXX_PAGE_SIZE_264)
	{
		tx_buffer[0] = 0x3D;					//Opcode-1 for Page Size 264
		tx_buffer[1] = 0x2A;					//Opcode-2 for Page Size 264
		tx_buffer[2] = 0x80;					//Opcode-3 for Page Size 264
		tx_buffer[3] = 0xA7;					//Opcode-4 for Page Size 264
	}

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_manufacturer_and_device_info(uint8_t *RxBuf)
{
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 5;								//One byte for Manufacturer ID, two bytes for Device ID and two bytes for Manufacturer Extended Information
	CommandLength = 1;						//Opcode Byte
	TotalLength = Len + CommandLength;

	tx_buffer = (uint8_t *) malloc(TotalLength);
	receive_buffer = (uint8_t *) malloc(TotalLength);

	if((tx_buffer == NULL) || (receive_buffer == NULL))
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x9F;							//Opcode

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
	}

	free(tx_buffer);
	free(receive_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_software_reset_command(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xF0;					//Opcode-1 for Software Reset Command
	tx_buffer[1] = 0x00;					//Opcode-2 for Software Reset Command
	tx_buffer[2] = 0x00;					//Opcode-3 for Software Reset Command
	tx_buffer[3] = 0x00;					//Opcode-4 for Software Reset Command

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_deep_power_down_command(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 1;						//Only 1 Opcode byte for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xB9;					//Opcode-1 for Deep Power Down Command

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_resume_from_deep_power_down_command(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 1;						//Only 1 Opcode byte for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0xAB;					//Opcode-1 for Deep Power Down Command

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_ultra_deep_power_down_command(void)
{
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 1;						//Only 1 Opcode byte for this operation

	tx_buffer = (uint8_t *) malloc(CommandLength);

	if(tx_buffer == NULL)
	{
		return AT45DBXX_FAIL;
	}

	tx_buffer[0] = 0x79;					//Opcode-1 for Deep Power Down Command

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	free(tx_buffer);

	return AT45DBXX_SUCCESS;
}

void at45dbxx_exit_ultra_deep_power_down_command(void)
{
	//To exit the UDPD mode, pulse the SS pin for a minimum of AT45DBXX_EXIT_UDPD_DURATION time
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
	delay_us(AT45DBXX_EXIT_UDPD_DURATION);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	return;
}

void at45dbxx_configure_flash(void)
{
	uint8_t rx_buffer[2];

	//Configure the GPIO Pin for Slave Select Pin of FLASH Module
	EnablePeriClk(FLASH_PORT);
	GPIOSetMode(FLASH_PORT,SS_PIN,GPIO_MODE_OUTPUT);
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);

	//Logic to set the Page Size to 256 bytes if it is not already set to it
	//Read Status Register
	at45dbxx_read_status_register(rx_buffer);

	if((rx_buffer[0] & AT45DBXX_STATUS_PAGESIZE_BITMASK) == 0)
	{
		at45dbxx_configure_page_size(AT45DBXX_PAGE_SIZE_256);
		delay_us(5000000);
	}

	return;
}
