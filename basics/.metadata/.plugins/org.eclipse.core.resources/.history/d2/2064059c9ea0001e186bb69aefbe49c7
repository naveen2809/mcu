/*
 * spi_driver.c
 *
 *  Created on: 28-Jun-2023
 *      Author: naveen
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);


}

void SPIEnable(uint32_t *SPIAddress)
{

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
}

void SPIDisable(uint32_t *SPIAddress)
{

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	return ((pSPI->SPI_SR >> Flag) & 0x1);

}

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t len)
{
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));

		pSPI->SPI_DR = *TxBuf;
		TxBuf++;
		len--;
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
}

void SPIRecvData(uint32_t *SPIAddress, uint8_t *RxBuf, uint8_t len)
{
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));

		*RxBuf = pSPI->SPI_DR;
		RxBuf++;
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;

	uint8_t count, data_len;

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
		*RxBuf = pSPI->SPI_DR;


	data_len = len;
	count = 0;
	while(len > 0) {


			// Waiting for TX Buffer to be empty
			while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));

			pSPI->SPI_DR = *TxBuf;
			TxBuf++;

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));

		*RxBuf = pSPI->SPI_DR;
		RxBuf++;

		len--;

		//delay_us(1);
	}



}

void SPIMasterSendDataIT(struct SPI_Handle_t *pSPI_Handle, uint8_t *TxBuf, uint8_t len)
{
	//1. Wait until SPI Peripheral is ready
	while(pSPI_Handle->SPI_Peripheral_Status!=SPI_PERIPHERAL_READY);

	//2. Configure the members of the handle structure
	pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_BUSY;
	pSPI_Handle->TxBuf = TxBuf;
	pSPI_Handle->Txlen = len;

	//3. Enable the TXE Interrupt
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);
}

void SPIMasterRecvDataIT(struct SPI_Handle_t *pSPI_Handle, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
	//1. Wait until SPI Peripheral is ready
	while(pSPI_Handle->SPI_Peripheral_Status!=SPI_PERIPHERAL_READY);

	//2. Configure the members of the handle structure
	pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_BUSY;
	pSPI_Handle->TxBuf = TxBuf;
	pSPI_Handle->Txlen = len;
	pSPI_Handle->RxBuf = RxBuf;
	pSPI_Handle->Rxlen = len;

	//3. Enable the TXE and RXNE Interrupts
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);
}

void SPISlaveSendDataIT(struct SPI_Handle_t *pSPI_Handle, uint8_t *TxBuf, uint8_t len)
{
	//1. Wait until SPI Peripheral is ready
	while(pSPI_Handle->SPI_Peripheral_Status!=SPI_PERIPHERAL_READY);

	//2. Configure the members of the handle structure
	pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_BUSY;
	pSPI_Handle->TxBuf = TxBuf;
	pSPI_Handle->Txlen = len;

	//3. Enable the TXE and RXNE Interrupts
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);
}

void SPISlaveRecvDataIT(struct SPI_Handle_t *pSPI_Handle, uint8_t *RxBuf, uint8_t len)
{
	uint8_t data;

	//1. Wait until SPI Peripheral is ready
	while(pSPI_Handle->SPI_Peripheral_Status!=SPI_PERIPHERAL_READY);

	//2. Configure the members of the handle structure
	pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_BUSY;
	pSPI_Handle->RxBuf = RxBuf;
	pSPI_Handle->Rxlen = len;

	//3. Clear RXNE Flag

	while(SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_RXNE))
	{
		data=pSPI_Handle->pSPI->SPI_DR;
	}
	(void)data;

	//4. Enable the RXNE Interrupt
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);
}

void SPI_IRQ_Handler(struct SPI_Handle_t *pSPI_Handle)
{
	uint16_t txe_status;
	uint16_t txeie_status;
	uint16_t rxne_status;
	uint16_t rxneie_status;

	//1. Handling TXE Event
	txe_status=SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_TXE);
	txeie_status=pSPI_Handle->pSPI->SPI_CR2 & (1 << SPI_CR2_TXEIE);

	if(txe_status && txeie_status)
	{
		if(pSPI_Handle->Txlen > 0)
		{
			if(pSPI_Handle->Txlen==1)
			{
				pSPI_Handle->pSPI->SPI_CR2 &= ~(1 << SPI_CR2_TXEIE);
				pSPI_Handle->pSPI->SPI_DR = *(pSPI_Handle->TxBuf);
				pSPI_Handle->TxBuf++;
				pSPI_Handle->Txlen--;

				while(!SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_TXE));

				pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_READY;

			}
			else
			{
				pSPI_Handle->pSPI->SPI_DR = *(pSPI_Handle->TxBuf);
				pSPI_Handle->TxBuf++;
				pSPI_Handle->Txlen--;
			}
		}
	}

	//2. Handling RXNE Event

	rxne_status=SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_RXNE);
	rxneie_status=pSPI_Handle->pSPI->SPI_CR2 & (1 << SPI_CR2_RXNEIE);

	if(rxne_status && rxneie_status)
	{
		if(pSPI_Handle->Rxlen > 0)
		{
			if(pSPI_Handle->Rxlen==1)
			{
				pSPI_Handle->pSPI->SPI_CR2 &= ~(1 << SPI_CR2_RXNEIE);
				*(pSPI_Handle->RxBuf)=pSPI_Handle->pSPI->SPI_DR;
				pSPI_Handle->RxBuf++;
				pSPI_Handle->Rxlen--;
				pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_READY;
				SPI_ApplicationCallback(APP_EVENT_RX_CMPLT);
			}
			else
			{
				*(pSPI_Handle->RxBuf)=pSPI_Handle->pSPI->SPI_DR;
				pSPI_Handle->RxBuf++;
				pSPI_Handle->Rxlen--;
			}
		}
	}

	//3. Handling Error Events

}
