/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#define AHB1_ENR_ADDR					(0x40023800UL + 0x30UL)
#define GPIOA_MODER_ADDR				0x40020000UL
#define GPIOA_IDR_ADDR					0x40020010UL
#define GPIOD_MODER_ADDR				0x40020C00UL
#define GPIOD_ODR_ADDR					0x40020C14UL
#define GPIO_PORT_NUM_INPUT				0
#define GPIO_PIN_NUM_INPUT				0
#define GPIO_INPUT_PIN_MODE				0x2
#define GPIO_PORT_NUM_OUTPUT			3
#define GPIO_PIN_NUM_OUTPUT				12
#define GPIO_OUTPUT_PIN_MODE			0x1
#define NVIC_ISER_ADDR					0xE000E100UL
#define BUTTON_IRQ_NO					6
#define SYSCFG_EXTI_CR_ADDR				(40013800UL + 0x08UL)
#define EXTI_IMR_ADDR					0x40013C00UL
#define EXTI_RTSR_ADDR					(0x40013C00UL + 0x08UL)
#define EXTI_FTSR_ADDR					(0x40013C00UL + 0x0CUL)
#define EXTI_INTERRUPT_PIN_NUM			0
#define EXTI_PERI_BIT_NUM				0
#define SLEEP_COUNT						500000
#define ENABLE							1

void delay(void)
{
	uint32_t j;
	for(j=0;j<SLEEP_COUNT;j++);
}

void isr(void)
{
	uint32_t *pGPIOA_IDR = (uint32_t *) GPIOA_IDR_ADDR;
	uint32_t *pGPIOD_ODR = (uint32_t *) GPIOD_ODR_ADDR;
	uint32_t input_value;
	uint32_t current_value;

	input_value = ((*pGPIOA_IDR >> GPIO_PIN_NUM_INPUT) & 0x1);


	if(input_value == ENABLE)
	{
		current_value = ((*pGPIOD_ODR >> GPIO_PIN_NUM_OUTPUT) & 0x1);
		current_value ^= 0x1;
		*pGPIOD_ODR &= ~(1 << GPIO_PIN_NUM_OUTPUT);
		*pGPIOD_ODR |= (current_value << GPIO_PIN_NUM_OUTPUT);
		delay();
	}
}

int main(void)
{

	uint32_t *pAHB1ENR = (uint32_t *) AHB1_ENR_ADDR;
	uint32_t *pGPIOA_MODER = (uint32_t *) GPIOA_MODER_ADDR;
	uint32_t *pGPIOD_MODER = (uint32_t *) GPIOD_MODER_ADDR;
	uint32_t *pNVIC_ISER = (uint32_t *) NVIC_ISER_ADDR;
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_ADDR;


	// 1. Configuring the GPIO port settings for input button (GPIO Port A, Pin 0)

	*pAHB1ENR |= (1 << GPIO_PORT_NUM_INPUT);  // Enabling the peripheral clock for GPIOA

	*pGPIOA_MODER &= ~(0x03 << 2*GPIO_PIN_NUM_INPUT); // Clearing GPIO Mode Bits
	*pGPIOA_MODER |= (GPIO_INPUT_PIN_MODE << 2*GPIO_PIN_NUM_INPUT);  // Setting the GPIO Mode as Input


	//2. Configuring the GPIO port settings for output LED (GPIO Port D, Pin 12)

	*pAHB1ENR |= (1 << GPIO_PORT_NUM_OUTPUT); // Enabling the peripheral clock for GPIOD

	*pGPIOD_MODER &= ~(0x03 << 2*GPIO_PIN_NUM_OUTPUT); // Clearing GPIO Mode Bits
	*pGPIOD_MODER |= (GPIO_OUTPUT_PIN_MODE << 2*GPIO_PIN_NUM_OUTPUT);     // Setting the GPIO Mode as Output


	// 3. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << EXTI_INTERRUPT_PIN_NUM);
	*pEXTI_RTSR |= (1 << EXTI_INTERRUPT_PIN_NUM);
	*pSYSCFG_EXTI_CR_ADDR &= ~(0x0000000F);

	// 4. Configuring the NVIC Registers

	*pNVIC_ISER |= (1 << BUTTON_IRQ_NO); // Enabling the interrupt


	for(;;)
	{


	}

}
