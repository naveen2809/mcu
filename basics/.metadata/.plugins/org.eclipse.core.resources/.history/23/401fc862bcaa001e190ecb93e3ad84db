/*
 * at45dbxx_flash_memory_driver.h
 * Driver code for the AT45DB041E SPI Flash Memory Module
 * Reference: https://www.waveshare.com/w/upload/b/b4/AT45DB041E.pdf
 *  Created on: 29-Dec-2023
 *      Author: naveen
 */

#ifndef INC_AT45DBXX_FLASH_MEMORY_DRIVER_H_
#define INC_AT45DBXX_FLASH_MEMORY_DRIVER_H_

#include <stdint.h>
#include "stm32f4xx.h"
#include "gpio_driver.h"

#define FLASH_PORT		GPIOA
#define SS_PIN			4

#define AT45DBXX_SUCCESS									0
#define AT45DBXX_FAIL										1
#define AT45DBXX_EPE_ERROR									2
#define AT45DBXX_BUFFER_AND_PAGE_EQUAL						3
#define AT45DBXX_BUFFER_AND_PAGE_NOT_EQUAL					4
#define AT45DBXX_SRAM_BUFFER_1								0
#define AT45DBXX_SRAM_BUFFER_2								1
#define AT45DBXX_PAGE_SIZE_256								0
#define AT45DBXX_PAGE_SIZE_264								1
#define AT45DBXX_EXIT_UDPD_DURATION							1000000
#define AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LEGACY			0
#define AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_HIGH_FREQ1		1
#define AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_HIGH_FREQ2		2
#define AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LOW_FREQ		3
#define AT45DBXX_CONTINUOUS_ARRAY_READ_MODE_LOW_POWER		4
#define AT45DBXX_MANUFACTURER_AND_DEVICE_INFO_LEN			5
#define AT45DBXX_STATUS_REGISTER_LEN						2
#define AT45DBXX_STATUS_PAGESIZE_BITMASK					0x1
#define AT45DBXX_STATUS_READY_BITMASK						0x80
#define AT45DBXX_STATUS_EPE_BITMASK							0x20
#define AT45DBXX_STATUS_COMPARE_BITMASK						0x20

uint8_t at45dbxx_continuous_array_read(uint8_t ContinuousArrayReadMode, uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len);
uint8_t at45dbxx_page_read(uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len);
uint8_t at45dbxx_buffer_read(uint8_t Buffer, uint8_t *MemAddress, uint8_t *RxBuf, uint32_t Len);
uint8_t at45dbxx_buffer_write(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len);
uint8_t at45dbxx_buffer_to_page_program_with_erase(uint8_t Buffer, uint8_t *PageAddress);
uint8_t at45dbxx_buffer_to_page_program_without_erase(uint8_t Buffer, uint8_t *PageAddress);
uint8_t at45dbxx_page_program_through_buffer_with_erase(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len);
uint8_t at45dbxx_byte_page_program_through_buffer1_without_erase(uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len);
uint8_t at45dbxx_read_modify_write(uint8_t Buffer, uint8_t *MemAddress, uint8_t *TxBuf, uint32_t Len);
uint8_t at45dbxx_page_erase(uint8_t *PageAddress);
uint8_t at45dbxx_block_erase(uint8_t *PageAddress);
uint8_t at45dbxx_sector_erase(uint8_t *PageAddress);
uint8_t at45dbxx_chip_erase(void);
uint8_t at45dbxx_program_erase_suspend(void);
uint8_t at45dbxx_program_erase_resume(void);
uint8_t at45dbxx_enable_sector_protection(void);
uint8_t at45dbxx_disable_sector_protection(void);
uint8_t at45dbxx_erase_sector_protection_register(void);
uint8_t at45dbxx_program_sector_protection_register(uint8_t *TxBuf);
uint8_t at45dbxx_read_sector_protection_register(uint8_t *RxBuf);
uint8_t at45dbxx_sector_lockdown_command(uint8_t *TxBuf);
uint8_t at45dbxx_read_sector_lockdown_register(uint8_t *RxBuf);
uint8_t at45dbxx_freeze_sector_lockdown_status(void);
uint8_t at45dbxx_program_security_register(uint8_t *TxBuf);
uint8_t at45dbxx_read_security_register(uint8_t *RxBuf);
uint8_t at45dbxx_page_to_buffer_transfer(uint8_t *PageAddress, uint8_t Buffer);
uint8_t at45dbxx_page_to_buffer_compare(uint8_t *PageAddress, uint8_t Buffer);
uint8_t at45dbxx_auto_page_rewrite(uint8_t *PageAddress, uint8_t Buffer);
uint8_t at45dbxx_read_status_register(uint8_t *RxBuf);
uint8_t at45dbxx_configure_page_size(uint8_t PageSize);
uint8_t at45dbxx_read_manufacturer_and_device_info(uint8_t *RxBuf);
uint8_t at45dbxx_software_reset_command(void);
uint8_t at45dbxx_deep_power_down_command(void);
uint8_t at45dbxx_resume_from_deep_power_down_command(void);
uint8_t at45dbxx_ultra_deep_power_down_command(void);
void at45dbxx_exit_ultra_deep_power_down_command(void);
void at45dbxx_configure_flash(void);
void error_handler(uint8_t status);

#endif /* INC_AT45DBXX_FLASH_MEMORY_DRIVER_H_ */
