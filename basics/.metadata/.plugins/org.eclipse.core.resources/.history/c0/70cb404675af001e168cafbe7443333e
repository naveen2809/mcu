/*
 * 	ds3231_rtc_driver.c
 *	Driver Code for the DS3231 RTC Module from Maxim
 *	Reference: https://www.analog.com/media/en/technical-documentation/data-sheets/ds3231.pdf
 *  Created on: 08-Jan-2024
 *      Author: naveen
 */

#include "ds3231_rtc_driver.h"
#include "rtc_driver.h"
#include "common_utils.h"
#include "external_interrupt_config.h"

extern uint32_t *I2C_DEVICE;
extern uint8_t SlaveAddress;

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
	}

	Tx_Buf[0] = 0x00;
	Tx_Buf[1] = ds3231_time.seconds;
	Tx_Buf[2] = ds3231_time.minutes;
	Tx_Buf[3] = ds3231_time.hours;
	I2CMasterSendData(I2C_DEVICE,Tx_Buf,4,SlaveAddress);
	delay_us(2000);

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
	Tx_Buf[0] = 0x03;
	Tx_Buf[1] = ds3231_date.dayofweek;
	Tx_Buf[2] = ds3231_date.date;
	Tx_Buf[3] = ds3231_date.month;
	Tx_Buf[4] = ds3231_date.year;
	I2CMasterSendData(I2C_DEVICE,Tx_Buf,5,SlaveAddress);

	return;
}

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE,RxBuf,7,0, SlaveAddress);

	time->seconds = RxBuf[0];
	time->minutes = RxBuf[1];
	time->hours = RxBuf[2];

	date->dayofweek = RxBuf[3];
	date->date = RxBuf[4];
	date->month = RxBuf[5];
	date->year = RxBuf[6];

	return;
}

void RTC_DS3231_Config_Alarm(struct RTC_DS3231_AlarmConfig_t *pRTCAlarmConfig)
{
	uint8_t Tx_Buf[5];
	uint8_t seconds, minutes, hours, date;

	seconds = (pRTCAlarmConfig->RTCAlarmSecondsUnits << DS3231_RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << DS3231_RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << DS3231_RTC_ALRMR_MSK1);
	minutes = (pRTCAlarmConfig->RTCAlarmMinutesUnits << DS3231_RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << DS3231_RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << DS3231_RTC_ALRMR_MSK2);

	if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_24)
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
	}
	else if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_12)
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << DS3231_RTC_ALRMR_AMPM) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
	}

	if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_NO)
	{
		//Configure the Date
		date = (pRTCAlarmConfig->RTCAlarmDateUnits << DS3231_RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << DS3231_RTC_ALRMR_DT) | (0 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
	}
	else if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_YES)
	{
		//Configure the WeekDay
		date = (pRTCAlarmConfig->RTCAlarmDayOfWeek << DS3231_RTC_ALRMR_DU) | (1 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
	}

	//Configure the ALARM Parameters in the Device
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
	{
		Tx_Buf[0] = 0x07;
		Tx_Buf[1] = seconds;
		Tx_Buf[2] = minutes;
		Tx_Buf[3] = hours;
		Tx_Buf[4] = date;
		I2CMasterSendData(I2C_DEVICE,Tx_Buf,5,SlaveAddress);
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
	{
		Tx_Buf[0] = 0x0B;
		Tx_Buf[2] = minutes;
		Tx_Buf[3] = hours;
		Tx_Buf[4] = date;
		I2CMasterSendData(I2C_DEVICE,Tx_Buf,4,SlaveAddress);
	}

	return;
}
