/*
 * task_scheduler.c
 *
 *  Created on: 11-Sep-2023
 *      Author: naveen
 */

#include <stdint.h>
#include <string.h>
#include "stm32f4xx.h"
#include "usart_driver.h"
#include "gpio_driver.h"
#include <stdio.h>
#include "common_utils.h"
#include "os_kernel.h"
#include "os_utilities.h"

uint32_t volatile glo_val = 0;
Semaphore w;
Semaphore r;
Mutex m;
os_queue Queue *q;

uint8_t volatile producer_count = 0;
uint8_t volatile consumer_count = 0;
uint32_t sleep_count_producer[2] = {2000,3000};
uint32_t sleep_count_consumer[3] = {6000,4000,3000};

static void producer(void);
static void consumer(void);
static void delay(uint32_t count);

int main(void)
{
	configure_uart();

	os_sem_init(&w,1,1);
	os_sem_init(&r,0,1);
	os_mutex_init(&m);
	os_queue_init(q);

	os_create_task(producer,0,1024);
	os_create_task(consumer,0,1024);
	os_start();

	while(1);

	return 0;
}

static void producer(void)
{
	uint32_t volatile producer_id;

	os_mutex_wait(&m);
	producer_id = ++producer_count;
	os_mutex_signal(&m);

	while(1)
	{
		os_sem_wait(&w);
		os_mutex_wait(&m);
		glo_val++;
		os_enqueue(struct Queue *q,uint32_t value)
		printf("Global Value From Producer: %ld\r\n",glo_val);
		os_sem_signal(&r);
		os_mutex_wait(&m);

		delay(sleep_count_producer[producer_id]);
	}
}

static void consumer(void)
{
	uint32_t volatile consumer_id;

	os_mutex_wait(&m);
	consumer_id = ++consumer_count;
	os_mutex_signal(&m);

	while(1)
	{
		os_sem_wait(&r);
		printf("Global Value From Consumer: %ld\r\n",glo_val);
		os_sem_signal(&w);
		delay(sleep_count_consumer[consumer_id]);
	}
}

static void delay(uint32_t count)
{
	uint32_t j;
	for(j=0;j<count;j++);
}
