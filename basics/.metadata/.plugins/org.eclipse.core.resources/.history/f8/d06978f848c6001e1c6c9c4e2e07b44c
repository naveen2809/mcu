/*
 * task_scheduler.c
 *
 *  Created on: 11-Sep-2023
 *      Author: naveen
 */

#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include "common_utils.h"
#include "os_kernel.h"

uint32_t tick_count = 0;
struct TCB *current_task = NULL;
struct TCB *next_task = NULL;

void idletask(void)
{
	while(1)
	{
		printf("From Idle Task...\r\n");
	}
}

void configure_systick_timer(void)
{
	uint32_t *pSYT_RVR = (uint32_t *) 0xE000E014U;
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;

	*pSYT_RVR = SYT_RELOAD_VALUE;
	*pSYT_CFGR |= SYT_CONTROL_VALUE;
}

void enable_systick_timer(void)
{
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;

	*pSYT_CFGR |= 0x1;
}

void initialize_task_stacks(void)
{
	uint32_t *p;
	uint32_t i;

	current_sp[0] = ((uint32_t) &tcbs[0].task_stack + 4*TASK_STACK_SIZE);

	current_sp[1] = ((uint32_t) &tcbs[1].task_stack + 4*TASK_STACK_SIZE - 4*16);
	p = (uint32_t*) ((uint32_t)current_sp[1]+14*4);
	*p = (uint32_t) task1;
	p = (uint32_t*) ((uint32_t)current_sp[1]+15*4);
	*p = (uint32_t) 0x01000000U;

	current_sp[2] = ((uint32_t) &tcbs[2].task_stack + 4*TASK_STACK_SIZE - 4*16);
	p = (uint32_t*) ((uint32_t)current_sp[2]+14*4);
	*p = (uint32_t) task2;
	p = (uint32_t*) ((uint32_t)current_sp[2]+15*4);
	*p = (uint32_t) 0x01000000U;

	current_sp[3] = ((uint32_t) &tcbs[3].task_stack + 4*TASK_STACK_SIZE - 4*16);
	p = (uint32_t*) ((uint32_t)current_sp[3]+14*4);
	*p = (uint32_t) task3;
	p = (uint32_t*) ((uint32_t)current_sp[3]+15*4);
	*p = (uint32_t) 0x01000000U;

	current_sp[4] = ((uint32_t) &tcbs[4].task_stack + 4*TASK_STACK_SIZE - 4*16);
	p = (uint32_t*) ((uint32_t)current_sp[4]+14*4);
	*p = (uint32_t) task4;
	p = (uint32_t*) ((uint32_t)current_sp[4]+15*4);
	*p = (uint32_t) 0x01000000U;

	//Initializing the Sleep Count to 0
	for(i=0;i<MAX_TASKS;i++)
		tcbs[0].sleep_count = 0;

}

void SysTick_Handler(void)
{
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;

	tick_count++;
	update_sleep_status();

	update_next_task();

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
}

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
	__asm volatile ("STMDB R0!, {R4-R11}");

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
	__asm volatile ("LDR R2, [R1]");
	__asm volatile ("LDR R1, =current_sp");
	__asm volatile ("MOV R3, #4");
	__asm volatile ("MUL R2, R2, R3");
	__asm volatile ("ADD R1, R1, R2");
	__asm volatile ("STR R0, [R1]");

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
	__asm volatile ("LDR R2, [R1]");
	__asm volatile ("LDR R1, =current_sp");
	__asm volatile ("MOV R3, #4");
	__asm volatile ("MUL R2, R2, R3");
	__asm volatile ("ADD R1, R1, R2");
	__asm volatile ("LDR R0, [R1]");

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
	__asm volatile ("MSR PSP, R0");

	/* Update Current Task */
	current_task = next_task;

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
}

void os_create_task(void (*task)(void),uint8_t task_priority,uint32_t task_stack_size)
{

	return;
}

void task_sleep(uint32_t count)
{
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;

	tcbs[current_task].sleep_count = count;

	//Pending the SysTick Exception
	*pICSR |= 0x4000000U;

	return;
}

void update_sleep_status(void)
{
	uint32_t i;

	for(i=0;i<MAX_TASKS;i++)
	{
		if(tcbs[i].sleep_count > 0)
		{
			tcbs[i].sleep_count--;
		}
	}

	return;
}

void update_next_task(void)
{
	uint8_t max_priority = 255;
	uint32_t best_task;

	next_task = current_task;

	do
	{
		next_task = (next_task+1)%(MAX_TASKS);

		if(tcbs[next_task].priority < max_priority && tcbs[next_task].sleep_count==0)
		{
			max_priority = tcbs[next_task].priority;
			best_task = next_task;
		}
	}
	while(next_task != current_task);

	next_task = best_task;

	return;
}

void set_task_priority(uint32_t task, uint8_t priority)
{
	tcbs[task].priority = priority;

	return;
}
