
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800099c  0800099c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800099c  0800099c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  0800099c  0800099c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800099c  0800099c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800099c  0800099c  0001099c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080009a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000030  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00020038  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d30  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003de  00000000  00000000  00020d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00021170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  000212c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000416  00000000  00000000  000213d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001790  00000000  00000000  000217ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000563c  00000000  00000000  00022f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000285ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000045c  00000000  00000000  0002860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000984 	.word	0x08000984

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	08000984 	.word	0x08000984

080001e8 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
 80001f4:	4613      	mov	r3, r2
 80001f6:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	78fa      	ldrb	r2, [r7, #3]
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	2103      	movs	r1, #3
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	43d2      	mvns	r2, r2
 800020c:	401a      	ands	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	78b9      	ldrb	r1, [r7, #2]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	0052      	lsls	r2, r2, #1
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	431a      	orrs	r2, r3
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]

}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	401a      	ands	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	78b9      	ldrb	r1, [r7, #2]
 800025e:	78fa      	ldrb	r2, [r7, #3]
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	431a      	orrs	r2, r3
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	615a      	str	r2, [r3, #20]
}
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <GPIOWritePort>:

	pGPIO->ODR ^= (1 << GPIOPinNum);
}

void GPIOWritePort(uint32_t *GPIOAddress, uint32_t GPIOPortValue)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR = GPIOPortValue;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	683a      	ldr	r2, [r7, #0]
 8000286:	615a      	str	r2, [r3, #20]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a88      	ldr	r2, [pc, #544]	; (80004c0 <EnablePeriClk+0x22c>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d108      	bne.n	80002b6 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002a4:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <EnablePeriClk+0x230>)
 80002a6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f043 0201 	orr.w	r2, r3, #1
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80002b4:	e19b      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a83      	ldr	r2, [pc, #524]	; (80004c8 <EnablePeriClk+0x234>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d108      	bne.n	80002d0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002be:	4b81      	ldr	r3, [pc, #516]	; (80004c4 <EnablePeriClk+0x230>)
 80002c0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0202 	orr.w	r2, r3, #2
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	e18e      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a7e      	ldr	r2, [pc, #504]	; (80004cc <EnablePeriClk+0x238>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d108      	bne.n	80002ea <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002d8:	4b7a      	ldr	r3, [pc, #488]	; (80004c4 <EnablePeriClk+0x230>)
 80002da:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f043 0204 	orr.w	r2, r3, #4
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	e181      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a78      	ldr	r2, [pc, #480]	; (80004d0 <EnablePeriClk+0x23c>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d108      	bne.n	8000304 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002f2:	4b74      	ldr	r3, [pc, #464]	; (80004c4 <EnablePeriClk+0x230>)
 80002f4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 0208 	orr.w	r2, r3, #8
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	e174      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a73      	ldr	r2, [pc, #460]	; (80004d4 <EnablePeriClk+0x240>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d108      	bne.n	800031e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800030c:	4b6d      	ldr	r3, [pc, #436]	; (80004c4 <EnablePeriClk+0x230>)
 800030e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f043 0210 	orr.w	r2, r3, #16
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	e167      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a6d      	ldr	r2, [pc, #436]	; (80004d8 <EnablePeriClk+0x244>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d108      	bne.n	8000338 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000326:	4b67      	ldr	r3, [pc, #412]	; (80004c4 <EnablePeriClk+0x230>)
 8000328:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 0220 	orr.w	r2, r3, #32
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	e15a      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a68      	ldr	r2, [pc, #416]	; (80004dc <EnablePeriClk+0x248>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d108      	bne.n	8000352 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000340:	4b60      	ldr	r3, [pc, #384]	; (80004c4 <EnablePeriClk+0x230>)
 8000342:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	e14d      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a62      	ldr	r2, [pc, #392]	; (80004e0 <EnablePeriClk+0x24c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d108      	bne.n	800036c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800035a:	4b5a      	ldr	r3, [pc, #360]	; (80004c4 <EnablePeriClk+0x230>)
 800035c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	e140      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a5d      	ldr	r2, [pc, #372]	; (80004e4 <EnablePeriClk+0x250>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d108      	bne.n	8000386 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000374:	4b53      	ldr	r3, [pc, #332]	; (80004c4 <EnablePeriClk+0x230>)
 8000376:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	e133      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a57      	ldr	r2, [pc, #348]	; (80004e8 <EnablePeriClk+0x254>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d108      	bne.n	80003a0 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800038e:	4b57      	ldr	r3, [pc, #348]	; (80004ec <EnablePeriClk+0x258>)
 8000390:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	e126      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a53      	ldr	r2, [pc, #332]	; (80004f0 <EnablePeriClk+0x25c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d108      	bne.n	80003ba <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003a8:	4b52      	ldr	r3, [pc, #328]	; (80004f4 <EnablePeriClk+0x260>)
 80003aa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	601a      	str	r2, [r3, #0]
}
 80003b8:	e119      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a4e      	ldr	r2, [pc, #312]	; (80004f8 <EnablePeriClk+0x264>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d108      	bne.n	80003d4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003c2:	4b4c      	ldr	r3, [pc, #304]	; (80004f4 <EnablePeriClk+0x260>)
 80003c4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	e10c      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a49      	ldr	r2, [pc, #292]	; (80004fc <EnablePeriClk+0x268>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d108      	bne.n	80003ee <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003dc:	4b45      	ldr	r3, [pc, #276]	; (80004f4 <EnablePeriClk+0x260>)
 80003de:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	e0ff      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a43      	ldr	r2, [pc, #268]	; (8000500 <EnablePeriClk+0x26c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d108      	bne.n	8000408 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <EnablePeriClk+0x260>)
 80003f8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	e0f2      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a3e      	ldr	r2, [pc, #248]	; (8000504 <EnablePeriClk+0x270>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d108      	bne.n	8000422 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000410:	4b38      	ldr	r3, [pc, #224]	; (80004f4 <EnablePeriClk+0x260>)
 8000412:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	601a      	str	r2, [r3, #0]
}
 8000420:	e0e5      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a38      	ldr	r2, [pc, #224]	; (8000508 <EnablePeriClk+0x274>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d108      	bne.n	800043c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800042a:	4b30      	ldr	r3, [pc, #192]	; (80004ec <EnablePeriClk+0x258>)
 800042c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f043 0210 	orr.w	r2, r3, #16
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	e0d8      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a33      	ldr	r2, [pc, #204]	; (800050c <EnablePeriClk+0x278>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d108      	bne.n	8000456 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <EnablePeriClk+0x260>)
 8000446:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	e0cb      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <EnablePeriClk+0x27c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d108      	bne.n	8000470 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <EnablePeriClk+0x260>)
 8000460:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	e0be      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a28      	ldr	r2, [pc, #160]	; (8000514 <EnablePeriClk+0x280>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d108      	bne.n	800048a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EnablePeriClk+0x260>)
 800047a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	601a      	str	r2, [r3, #0]
}
 8000488:	e0b1      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a22      	ldr	r2, [pc, #136]	; (8000518 <EnablePeriClk+0x284>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d108      	bne.n	80004a4 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <EnablePeriClk+0x260>)
 8000494:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	e0a4      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a1d      	ldr	r2, [pc, #116]	; (800051c <EnablePeriClk+0x288>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d139      	bne.n	8000520 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <EnablePeriClk+0x258>)
 80004ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f043 0220 	orr.w	r2, r3, #32
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	e097      	b.n	80005ee <EnablePeriClk+0x35a>
 80004be:	bf00      	nop
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40023830 	.word	0x40023830
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021400 	.word	0x40021400
 80004dc:	40021800 	.word	0x40021800
 80004e0:	40021c00 	.word	0x40021c00
 80004e4:	40022000 	.word	0x40022000
 80004e8:	40013000 	.word	0x40013000
 80004ec:	40023844 	.word	0x40023844
 80004f0:	40003800 	.word	0x40003800
 80004f4:	40023840 	.word	0x40023840
 80004f8:	40003c00 	.word	0x40003c00
 80004fc:	40005400 	.word	0x40005400
 8000500:	40005800 	.word	0x40005800
 8000504:	40005c00 	.word	0x40005c00
 8000508:	40011000 	.word	0x40011000
 800050c:	40004400 	.word	0x40004400
 8000510:	40004800 	.word	0x40004800
 8000514:	40004c00 	.word	0x40004c00
 8000518:	40005000 	.word	0x40005000
 800051c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <EnablePeriClk+0x364>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d108      	bne.n	800053a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <EnablePeriClk+0x368>)
 800052a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 0210 	orr.w	r2, r3, #16
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	e059      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <EnablePeriClk+0x36c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d108      	bne.n	8000554 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <EnablePeriClk+0x368>)
 8000544:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f043 0220 	orr.w	r2, r3, #32
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	e04c      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <EnablePeriClk+0x370>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d108      	bne.n	800056e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <EnablePeriClk+0x374>)
 800055e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	e03f      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a26      	ldr	r2, [pc, #152]	; (800060c <EnablePeriClk+0x378>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d108      	bne.n	8000588 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <EnablePeriClk+0x374>)
 8000578:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	e032      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800058e:	d108      	bne.n	80005a2 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <EnablePeriClk+0x368>)
 8000592:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f043 0201 	orr.w	r2, r3, #1
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	e025      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <EnablePeriClk+0x37c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d108      	bne.n	80005bc <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <EnablePeriClk+0x368>)
 80005ac:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f043 0202 	orr.w	r2, r3, #2
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	e018      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <EnablePeriClk+0x380>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d108      	bne.n	80005d6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <EnablePeriClk+0x368>)
 80005c6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f043 0204 	orr.w	r2, r3, #4
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	e00b      	b.n	80005ee <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <EnablePeriClk+0x384>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d107      	bne.n	80005ee <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <EnablePeriClk+0x368>)
 80005e0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f043 0208 	orr.w	r2, r3, #8
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40001000 	.word	0x40001000
 80005fc:	40023840 	.word	0x40023840
 8000600:	40001400 	.word	0x40001400
 8000604:	40026000 	.word	0x40026000
 8000608:	40023830 	.word	0x40023830
 800060c:	40026400 	.word	0x40026400
 8000610:	40000400 	.word	0x40000400
 8000614:	40000800 	.word	0x40000800
 8000618:	40000c00 	.word	0x40000c00

0800061c <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	095b      	lsrs	r3, r3, #5
 800062a:	b2db      	uxtb	r3, r3
 800062c:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800063e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000642:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	431a      	orrs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Basic_Timer_Init>:
#include "timer_driver.h"

extern void Basic_Timer_Interrupt_Callback(struct Basic_Timer_Handle_t *pBasic_Timer_Handle);

void Basic_Timer_Init(struct Basic_Timer_Handle_t *pBasic_Timer_Handle)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pBasic_Timer_Handle->pBasic_Timer->TIMx_PSC = pBasic_Timer_Handle->Basic_Timer_Config.Timer_PreScalerValue;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889a      	ldrh	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pBasic_Timer_Handle->pBasic_Timer->TIMx_ARR = pBasic_Timer_Handle->Basic_Timer_Config.Timer_AutoReloadValue;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	88da      	ldrh	r2, [r3, #6]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c

	//3. Enable One Pulse Mode

	if(pBasic_Timer_Handle->Basic_Timer_Config.Timer_OnePulseModeConfig == TIMER_ONE_PULSE_MODE_ENABLE)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	891b      	ldrh	r3, [r3, #8]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d107      	bne.n	8000694 <Basic_Timer_Init+0x34>
	{
			pBasic_Timer_Handle->pBasic_Timer->TIMx_CR1 |= (1 << TIMx_CR1_OPM);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f042 0208 	orr.w	r2, r2, #8
 8000692:	601a      	str	r2, [r3, #0]
	}

	//4. Enable/Disable the Update Event Interrupt

	if(pBasic_Timer_Handle->Basic_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	895b      	ldrh	r3, [r3, #10]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d108      	bne.n	80006ae <Basic_Timer_Init+0x4e>
	{
		pBasic_Timer_Handle->pBasic_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
	else if(pBasic_Timer_Handle->Basic_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pBasic_Timer_Handle->pBasic_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 80006ac:	e00b      	b.n	80006c6 <Basic_Timer_Init+0x66>
	else if(pBasic_Timer_Handle->Basic_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	895b      	ldrh	r3, [r3, #10]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <Basic_Timer_Init+0x66>
		pBasic_Timer_Handle->pBasic_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f022 0201 	bic.w	r2, r2, #1
 80006c4:	60da      	str	r2, [r3, #12]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Basic_Timer_PeripheralEnable>:

void Basic_Timer_PeripheralEnable(struct Basic_Timer_Handle_t *pBasic_Timer_Handle)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	pBasic_Timer_Handle->pBasic_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0201 	orr.w	r2, r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <Basic_Timer_ClearUpdateEventFlag>:
{
	pBasic_Timer_Handle->pBasic_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
}

void Basic_Timer_ClearUpdateEventFlag(struct Basic_Timer_Handle_t *pBasic_Timer_Handle)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	pBasic_Timer_Handle->pBasic_Timer->TIMx_SR &= ~(1 << TIMx_SR_UIF);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0201 	bic.w	r2, r2, #1
 8000708:	611a      	str	r2, [r3, #16]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Basic_Timer_IRQHandling>:
{
	pBasic_Timer_Handle->pBasic_Timer->TIMx_CR1 |= (1 << TIMx_CR1_ARPE);
}

void Basic_Timer_IRQHandling(struct Basic_Timer_Handle_t *pBasic_Timer_Handle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	Basic_Timer_Interrupt_Callback(pBasic_Timer_Handle);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f887 	bl	8000830 <Basic_Timer_Interrupt_Callback>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <main>:

void TIM6_DAC_IRQHandler(void);
void Basic_Timer_Interrupt_Callback(struct Basic_Timer_Handle_t *pBasic_Timer_Handle);

int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	//GPIO Configuration for Seven Segment LEDs (Cathodes)
	EnablePeriClk(GPIOA);
 8000730:	4834      	ldr	r0, [pc, #208]	; (8000804 <main+0xd8>)
 8000732:	f7ff fdaf 	bl	8000294 <EnablePeriClk>
	GPIOSetMode(GPIOA, GPIO_1, GPIO_MODE_OUTPUT);
 8000736:	2201      	movs	r2, #1
 8000738:	2100      	movs	r1, #0
 800073a:	4832      	ldr	r0, [pc, #200]	; (8000804 <main+0xd8>)
 800073c:	f7ff fd54 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_2, GPIO_MODE_OUTPUT);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	482f      	ldr	r0, [pc, #188]	; (8000804 <main+0xd8>)
 8000746:	f7ff fd4f 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_3, GPIO_MODE_OUTPUT);
 800074a:	2201      	movs	r2, #1
 800074c:	2102      	movs	r1, #2
 800074e:	482d      	ldr	r0, [pc, #180]	; (8000804 <main+0xd8>)
 8000750:	f7ff fd4a 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_4, GPIO_MODE_OUTPUT);
 8000754:	2201      	movs	r2, #1
 8000756:	2103      	movs	r1, #3
 8000758:	482a      	ldr	r0, [pc, #168]	; (8000804 <main+0xd8>)
 800075a:	f7ff fd45 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_5, GPIO_MODE_OUTPUT);
 800075e:	2201      	movs	r2, #1
 8000760:	2104      	movs	r1, #4
 8000762:	4828      	ldr	r0, [pc, #160]	; (8000804 <main+0xd8>)
 8000764:	f7ff fd40 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_6, GPIO_MODE_OUTPUT);
 8000768:	2201      	movs	r2, #1
 800076a:	2105      	movs	r1, #5
 800076c:	4825      	ldr	r0, [pc, #148]	; (8000804 <main+0xd8>)
 800076e:	f7ff fd3b 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOA, GPIO_7, GPIO_MODE_OUTPUT);
 8000772:	2201      	movs	r2, #1
 8000774:	2106      	movs	r1, #6
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <main+0xd8>)
 8000778:	f7ff fd36 	bl	80001e8 <GPIOSetMode>

	//Initialize Seven Segment LED GPIOs to HIGH (Cathodes)
	GPIOWritePort(GPIOA, default_digit);
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <main+0xdc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	4820      	ldr	r0, [pc, #128]	; (8000804 <main+0xd8>)
 8000784:	f7ff fd76 	bl	8000274 <GPIOWritePort>

	//GPIO Configuration for Decimal Point LED (Cathode)
	EnablePeriClk(GPIOD);
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <main+0xe0>)
 800078a:	f7ff fd83 	bl	8000294 <EnablePeriClk>
	GPIOSetMode(GPIOD, GPIO_DECIMAL, GPIO_MODE_OUTPUT);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0xe0>)
 8000794:	f7ff fd28 	bl	80001e8 <GPIOSetMode>
	GPIOWritePin(GPIOD, GPIO_DECIMAL,GPIO_HIGH);
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	481b      	ldr	r0, [pc, #108]	; (800080c <main+0xe0>)
 800079e:	f7ff fd47 	bl	8000230 <GPIOWritePin>

	//GPIO Configuration for the Digit Enable Pins (Anodes)
	EnablePeriClk(GPIOC);
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <main+0xe4>)
 80007a4:	f7ff fd76 	bl	8000294 <EnablePeriClk>
	GPIOSetMode(GPIOC, GPIO_DIGIT_UNITS, GPIO_MODE_OUTPUT);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2109      	movs	r1, #9
 80007ac:	4818      	ldr	r0, [pc, #96]	; (8000810 <main+0xe4>)
 80007ae:	f7ff fd1b 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOC, GPIO_DIGIT_TENS, GPIO_MODE_OUTPUT);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2108      	movs	r1, #8
 80007b6:	4816      	ldr	r0, [pc, #88]	; (8000810 <main+0xe4>)
 80007b8:	f7ff fd16 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOC, GPIO_DIGIT_HUNDREDS, GPIO_MODE_OUTPUT);
 80007bc:	2201      	movs	r2, #1
 80007be:	2107      	movs	r1, #7
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <main+0xe4>)
 80007c2:	f7ff fd11 	bl	80001e8 <GPIOSetMode>
	GPIOSetMode(GPIOC, GPIO_DIGIT_THOUSANDS, GPIO_MODE_OUTPUT);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2106      	movs	r1, #6
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <main+0xe4>)
 80007cc:	f7ff fd0c 	bl	80001e8 <GPIOSetMode>

	//Enabling the Interrupt for TIM6 Peripheral in NVIC
	NVIC_EnableIRQ(TIM6_IRQ_NUM);
 80007d0:	2036      	movs	r0, #54	; 0x36
 80007d2:	f7ff ff23 	bl	800061c <NVIC_EnableIRQ>

	//TIM6 Configuration
	TIM6_Handle.pBasic_Timer = (struct Basic_Timer_RegDef_t *)TIM6;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <main+0xe8>)
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <main+0xec>)
 80007da:	601a      	str	r2, [r3, #0]
	TIM6_Handle.Basic_Timer_Config.Timer_PreScalerValue = 0xff;            //Refresh rate configuration
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <main+0xe8>)
 80007de:	22ff      	movs	r2, #255	; 0xff
 80007e0:	809a      	strh	r2, [r3, #4]
	TIM6_Handle.Basic_Timer_Config.Timer_AutoReloadValue = 0xf;			   //Refresh rate configuration
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <main+0xe8>)
 80007e4:	220f      	movs	r2, #15
 80007e6:	80da      	strh	r2, [r3, #6]
	TIM6_Handle.Basic_Timer_Config.Timer_UpdateInterruptConfig = TIMER_UPDATE_INTERRUPT_ENABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <main+0xe8>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	815a      	strh	r2, [r3, #10]

	EnablePeriClk(TIM6);
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <main+0xec>)
 80007f0:	f7ff fd50 	bl	8000294 <EnablePeriClk>
	Basic_Timer_Init(&TIM6_Handle);
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <main+0xe8>)
 80007f6:	f7ff ff33 	bl	8000660 <Basic_Timer_Init>
	Basic_Timer_PeripheralEnable(&TIM6_Handle);
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <main+0xe8>)
 80007fc:	f7ff ff68 	bl	80006d0 <Basic_Timer_PeripheralEnable>

	while(1);
 8000800:	e7fe      	b.n	8000800 <main+0xd4>
 8000802:	bf00      	nop
 8000804:	40020000 	.word	0x40020000
 8000808:	20000028 	.word	0x20000028
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40020800 	.word	0x40020800
 8000814:	20000054 	.word	0x20000054
 8000818:	40001000 	.word	0x40001000

0800081c <TIM6_DAC_IRQHandler>:

	return 0;
}

void TIM6_DAC_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	Basic_Timer_IRQHandling(&TIM6_Handle);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM6_DAC_IRQHandler+0x10>)
 8000822:	f7ff ff77 	bl	8000714 <Basic_Timer_IRQHandling>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000054 	.word	0x20000054

08000830 <Basic_Timer_Interrupt_Callback>:

void Basic_Timer_Interrupt_Callback(struct Basic_Timer_Handle_t *pBasic_Timer_Handle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	Basic_Timer_ClearUpdateEventFlag(pBasic_Timer_Handle);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff5a 	bl	80006f2 <Basic_Timer_ClearUpdateEventFlag>

	current_digit = (interrupt_count)%(num_digits);
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <Basic_Timer_Interrupt_Callback+0x94>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <Basic_Timer_Interrupt_Callback+0x98>)
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	fbb3 f1f2 	udiv	r1, r3, r2
 800084a:	fb01 f202 	mul.w	r2, r1, r2
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <Basic_Timer_Interrupt_Callback+0x9c>)
 8000854:	701a      	strb	r2, [r3, #0]
	prev_digit = (interrupt_count-1)%(num_digits);
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <Basic_Timer_Interrupt_Callback+0x94>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <Basic_Timer_Interrupt_Callback+0x98>)
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	fbb3 f1f2 	udiv	r1, r3, r2
 8000864:	fb01 f202 	mul.w	r2, r1, r2
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <Basic_Timer_Interrupt_Callback+0xa0>)
 800086e:	701a      	strb	r2, [r3, #0]

	//Disabling the previous digit
	GPIOWritePin(GPIOC, gpio_common[prev_digit],GPIO_LOW);
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <Basic_Timer_Interrupt_Callback+0xa0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <Basic_Timer_Interrupt_Callback+0xa4>)
 8000878:	5c9b      	ldrb	r3, [r3, r2]
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	; (80008d8 <Basic_Timer_Interrupt_Callback+0xa8>)
 8000880:	f7ff fcd6 	bl	8000230 <GPIOWritePin>

	//Enabling the current digit
	GPIOWritePin(GPIOC, gpio_common[current_digit],GPIO_HIGH);
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <Basic_Timer_Interrupt_Callback+0x9c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <Basic_Timer_Interrupt_Callback+0xa4>)
 800088c:	5c9b      	ldrb	r3, [r3, r2]
 800088e:	2201      	movs	r2, #1
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <Basic_Timer_Interrupt_Callback+0xa8>)
 8000894:	f7ff fccc 	bl	8000230 <GPIOWritePin>

	//Writing the current digit to the Seven Segment Display
	GPIOWritePort(GPIOA, decimal_digits[display_digits[current_digit]]);
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <Basic_Timer_Interrupt_Callback+0x9c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <Basic_Timer_Interrupt_Callback+0xac>)
 80008a0:	5c9b      	ldrb	r3, [r3, r2]
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <Basic_Timer_Interrupt_Callback+0xb0>)
 80008a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <Basic_Timer_Interrupt_Callback+0xb4>)
 80008ae:	f7ff fce1 	bl	8000274 <GPIOWritePort>

	//Incrementing the counter
	interrupt_count++;
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <Basic_Timer_Interrupt_Callback+0x94>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a02      	ldr	r2, [pc, #8]	; (80008c4 <Basic_Timer_Interrupt_Callback+0x94>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000060 	.word	0x20000060
 80008c8:	20000030 	.word	0x20000030
 80008cc:	20000065 	.word	0x20000065
 80008d0:	20000064 	.word	0x20000064
 80008d4:	20000034 	.word	0x20000034
 80008d8:	40020800 	.word	0x40020800
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	20000000 	.word	0x20000000
 80008e4:	40020000 	.word	0x40020000

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000916:	f000 f811 	bl	800093c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff ff07 	bl	800072c <main>

0800091e <LoopForever>:

LoopForever:
  b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800092c:	080009a4 	.word	0x080009a4
  ldr r2, =_sbss
 8000930:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000934:	20000068 	.word	0x20000068

08000938 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC_IRQHandler>
	...

0800093c <__libc_init_array>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4d0d      	ldr	r5, [pc, #52]	; (8000974 <__libc_init_array+0x38>)
 8000940:	4c0d      	ldr	r4, [pc, #52]	; (8000978 <__libc_init_array+0x3c>)
 8000942:	1b64      	subs	r4, r4, r5
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	2600      	movs	r6, #0
 8000948:	42a6      	cmp	r6, r4
 800094a:	d109      	bne.n	8000960 <__libc_init_array+0x24>
 800094c:	4d0b      	ldr	r5, [pc, #44]	; (800097c <__libc_init_array+0x40>)
 800094e:	4c0c      	ldr	r4, [pc, #48]	; (8000980 <__libc_init_array+0x44>)
 8000950:	f000 f818 	bl	8000984 <_init>
 8000954:	1b64      	subs	r4, r4, r5
 8000956:	10a4      	asrs	r4, r4, #2
 8000958:	2600      	movs	r6, #0
 800095a:	42a6      	cmp	r6, r4
 800095c:	d105      	bne.n	800096a <__libc_init_array+0x2e>
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f855 3b04 	ldr.w	r3, [r5], #4
 8000964:	4798      	blx	r3
 8000966:	3601      	adds	r6, #1
 8000968:	e7ee      	b.n	8000948 <__libc_init_array+0xc>
 800096a:	f855 3b04 	ldr.w	r3, [r5], #4
 800096e:	4798      	blx	r3
 8000970:	3601      	adds	r6, #1
 8000972:	e7f2      	b.n	800095a <__libc_init_array+0x1e>
 8000974:	0800099c 	.word	0x0800099c
 8000978:	0800099c 	.word	0x0800099c
 800097c:	0800099c 	.word	0x0800099c
 8000980:	080009a0 	.word	0x080009a0

08000984 <_init>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	bf00      	nop
 8000988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098a:	bc08      	pop	{r3}
 800098c:	469e      	mov	lr, r3
 800098e:	4770      	bx	lr

08000990 <_fini>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	bf00      	nop
 8000994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000996:	bc08      	pop	{r3}
 8000998:	469e      	mov	lr, r3
 800099a:	4770      	bx	lr
