
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006bc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000864  0800086c  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000864  08000864  0001086c  2**0
                  CONTENTS
  4 .ARM          00000000  08000864  08000864  0001086c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000864  0800086c  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001086c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000084d  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000027b  00000000  00000000  000110e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f0  00000000  00000000  00011360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b8  00000000  00000000  00011450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000386  00000000  00000000  00011508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001286  00000000  00000000  0001188e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005356  00000000  00000000  00012b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00017e6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d4  00000000  00000000  00017ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800084c 	.word	0x0800084c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800084c 	.word	0x0800084c

080001e8 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
 80001f4:	4613      	mov	r3, r2
 80001f6:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	78fa      	ldrb	r2, [r7, #3]
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	2103      	movs	r1, #3
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	43d2      	mvns	r2, r2
 800020c:	401a      	ands	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	78b9      	ldrb	r1, [r7, #2]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	0052      	lsls	r2, r2, #1
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	431a      	orrs	r2, r3
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]

}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000244:	78fb      	ldrb	r3, [r7, #3]
 8000246:	08db      	lsrs	r3, r3, #3
 8000248:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	f003 0307 	and.w	r3, r3, #7
 8000250:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000252:	7afa      	ldrb	r2, [r7, #11]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3208      	adds	r2, #8
 8000258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800025c:	7aba      	ldrb	r2, [r7, #10]
 800025e:	0092      	lsls	r2, r2, #2
 8000260:	210f      	movs	r1, #15
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	43d2      	mvns	r2, r2
 8000268:	4611      	mov	r1, r2
 800026a:	7afa      	ldrb	r2, [r7, #11]
 800026c:	4019      	ands	r1, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3208      	adds	r2, #8
 8000272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000276:	7afa      	ldrb	r2, [r7, #11]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3208      	adds	r2, #8
 800027c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000280:	78b9      	ldrb	r1, [r7, #2]
 8000282:	7aba      	ldrb	r2, [r7, #10]
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	4611      	mov	r1, r2
 800028c:	7afa      	ldrb	r2, [r7, #11]
 800028e:	4319      	orrs	r1, r3
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3208      	adds	r2, #8
 8000294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
	...

080002a4 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a88      	ldr	r2, [pc, #544]	; (80004d0 <EnablePeriClk+0x22c>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d108      	bne.n	80002c6 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002b4:	4b87      	ldr	r3, [pc, #540]	; (80004d4 <EnablePeriClk+0x230>)
 80002b6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f043 0201 	orr.w	r2, r3, #1
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80002c4:	e19b      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a83      	ldr	r2, [pc, #524]	; (80004d8 <EnablePeriClk+0x234>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d108      	bne.n	80002e0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002ce:	4b81      	ldr	r3, [pc, #516]	; (80004d4 <EnablePeriClk+0x230>)
 80002d0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 0202 	orr.w	r2, r3, #2
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	e18e      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a7e      	ldr	r2, [pc, #504]	; (80004dc <EnablePeriClk+0x238>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d108      	bne.n	80002fa <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002e8:	4b7a      	ldr	r3, [pc, #488]	; (80004d4 <EnablePeriClk+0x230>)
 80002ea:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f043 0204 	orr.w	r2, r3, #4
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	e181      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a78      	ldr	r2, [pc, #480]	; (80004e0 <EnablePeriClk+0x23c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d108      	bne.n	8000314 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000302:	4b74      	ldr	r3, [pc, #464]	; (80004d4 <EnablePeriClk+0x230>)
 8000304:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0208 	orr.w	r2, r3, #8
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	e174      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a73      	ldr	r2, [pc, #460]	; (80004e4 <EnablePeriClk+0x240>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d108      	bne.n	800032e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800031c:	4b6d      	ldr	r3, [pc, #436]	; (80004d4 <EnablePeriClk+0x230>)
 800031e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f043 0210 	orr.w	r2, r3, #16
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	e167      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a6d      	ldr	r2, [pc, #436]	; (80004e8 <EnablePeriClk+0x244>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d108      	bne.n	8000348 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000336:	4b67      	ldr	r3, [pc, #412]	; (80004d4 <EnablePeriClk+0x230>)
 8000338:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0220 	orr.w	r2, r3, #32
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	e15a      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a68      	ldr	r2, [pc, #416]	; (80004ec <EnablePeriClk+0x248>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d108      	bne.n	8000362 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000350:	4b60      	ldr	r3, [pc, #384]	; (80004d4 <EnablePeriClk+0x230>)
 8000352:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	e14d      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a62      	ldr	r2, [pc, #392]	; (80004f0 <EnablePeriClk+0x24c>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d108      	bne.n	800037c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800036a:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <EnablePeriClk+0x230>)
 800036c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	e140      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a5d      	ldr	r2, [pc, #372]	; (80004f4 <EnablePeriClk+0x250>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d108      	bne.n	8000396 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000384:	4b53      	ldr	r3, [pc, #332]	; (80004d4 <EnablePeriClk+0x230>)
 8000386:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	e133      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a57      	ldr	r2, [pc, #348]	; (80004f8 <EnablePeriClk+0x254>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d108      	bne.n	80003b0 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800039e:	4b57      	ldr	r3, [pc, #348]	; (80004fc <EnablePeriClk+0x258>)
 80003a0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	e126      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a53      	ldr	r2, [pc, #332]	; (8000500 <EnablePeriClk+0x25c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d108      	bne.n	80003ca <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003b8:	4b52      	ldr	r3, [pc, #328]	; (8000504 <EnablePeriClk+0x260>)
 80003ba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	e119      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a4e      	ldr	r2, [pc, #312]	; (8000508 <EnablePeriClk+0x264>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d108      	bne.n	80003e4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003d2:	4b4c      	ldr	r3, [pc, #304]	; (8000504 <EnablePeriClk+0x260>)
 80003d4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	e10c      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a49      	ldr	r2, [pc, #292]	; (800050c <EnablePeriClk+0x268>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d108      	bne.n	80003fe <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003ec:	4b45      	ldr	r3, [pc, #276]	; (8000504 <EnablePeriClk+0x260>)
 80003ee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	e0ff      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a43      	ldr	r2, [pc, #268]	; (8000510 <EnablePeriClk+0x26c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d108      	bne.n	8000418 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000406:	4b3f      	ldr	r3, [pc, #252]	; (8000504 <EnablePeriClk+0x260>)
 8000408:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	e0f2      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a3e      	ldr	r2, [pc, #248]	; (8000514 <EnablePeriClk+0x270>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d108      	bne.n	8000432 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000420:	4b38      	ldr	r3, [pc, #224]	; (8000504 <EnablePeriClk+0x260>)
 8000422:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	e0e5      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a38      	ldr	r2, [pc, #224]	; (8000518 <EnablePeriClk+0x274>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d108      	bne.n	800044c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <EnablePeriClk+0x258>)
 800043c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f043 0210 	orr.w	r2, r3, #16
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	e0d8      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a33      	ldr	r2, [pc, #204]	; (800051c <EnablePeriClk+0x278>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d108      	bne.n	8000466 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000454:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <EnablePeriClk+0x260>)
 8000456:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	601a      	str	r2, [r3, #0]
}
 8000464:	e0cb      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <EnablePeriClk+0x27c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d108      	bne.n	8000480 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <EnablePeriClk+0x260>)
 8000470:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	e0be      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a28      	ldr	r2, [pc, #160]	; (8000524 <EnablePeriClk+0x280>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d108      	bne.n	800049a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <EnablePeriClk+0x260>)
 800048a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	e0b1      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a22      	ldr	r2, [pc, #136]	; (8000528 <EnablePeriClk+0x284>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d108      	bne.n	80004b4 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <EnablePeriClk+0x260>)
 80004a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]
}
 80004b2:	e0a4      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a1d      	ldr	r2, [pc, #116]	; (800052c <EnablePeriClk+0x288>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d139      	bne.n	8000530 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <EnablePeriClk+0x258>)
 80004be:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f043 0220 	orr.w	r2, r3, #32
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	e097      	b.n	80005fe <EnablePeriClk+0x35a>
 80004ce:	bf00      	nop
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023830 	.word	0x40023830
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00
 80004f4:	40022000 	.word	0x40022000
 80004f8:	40013000 	.word	0x40013000
 80004fc:	40023844 	.word	0x40023844
 8000500:	40003800 	.word	0x40003800
 8000504:	40023840 	.word	0x40023840
 8000508:	40003c00 	.word	0x40003c00
 800050c:	40005400 	.word	0x40005400
 8000510:	40005800 	.word	0x40005800
 8000514:	40005c00 	.word	0x40005c00
 8000518:	40011000 	.word	0x40011000
 800051c:	40004400 	.word	0x40004400
 8000520:	40004800 	.word	0x40004800
 8000524:	40004c00 	.word	0x40004c00
 8000528:	40005000 	.word	0x40005000
 800052c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a35      	ldr	r2, [pc, #212]	; (8000608 <EnablePeriClk+0x364>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d108      	bne.n	800054a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <EnablePeriClk+0x368>)
 800053a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f043 0210 	orr.w	r2, r3, #16
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	e059      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a30      	ldr	r2, [pc, #192]	; (8000610 <EnablePeriClk+0x36c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d108      	bne.n	8000564 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <EnablePeriClk+0x368>)
 8000554:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0220 	orr.w	r2, r3, #32
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	e04c      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <EnablePeriClk+0x370>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d108      	bne.n	800057e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <EnablePeriClk+0x374>)
 800056e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	e03f      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a26      	ldr	r2, [pc, #152]	; (800061c <EnablePeriClk+0x378>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d108      	bne.n	8000598 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <EnablePeriClk+0x374>)
 8000588:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	e032      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800059e:	d108      	bne.n	80005b2 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <EnablePeriClk+0x368>)
 80005a2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f043 0201 	orr.w	r2, r3, #1
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	e025      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <EnablePeriClk+0x37c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d108      	bne.n	80005cc <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <EnablePeriClk+0x368>)
 80005bc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f043 0202 	orr.w	r2, r3, #2
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	e018      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <EnablePeriClk+0x380>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d108      	bne.n	80005e6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <EnablePeriClk+0x368>)
 80005d6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f043 0204 	orr.w	r2, r3, #4
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	e00b      	b.n	80005fe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <EnablePeriClk+0x384>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d107      	bne.n	80005fe <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <EnablePeriClk+0x368>)
 80005f0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f043 0208 	orr.w	r2, r3, #8
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40001000 	.word	0x40001000
 800060c:	40023840 	.word	0x40023840
 8000610:	40001400 	.word	0x40001400
 8000614:	40026000 	.word	0x40026000
 8000618:	40023830 	.word	0x40023830
 800061c:	40026400 	.word	0x40026400
 8000620:	40000400 	.word	0x40000400
 8000624:	40000800 	.word	0x40000800
 8000628:	40000c00 	.word	0x40000c00

0800062c <main>:
#define HSE_CHECK_BITPOS				17
#define PLL_ON_BITPOS					24
#define PLL_CHECK_BITPOS				25

int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

	uint32_t *pRCC_CR = (uint32_t *) RCC_CR_REG_ADDR;
 8000632:	4b5a      	ldr	r3, [pc, #360]	; (800079c <main+0x170>)
 8000634:	617b      	str	r3, [r7, #20]
	uint32_t *pRCC_CFGR = (uint32_t *) RCC_CFGR_REG_ADDR;
 8000636:	4b5a      	ldr	r3, [pc, #360]	; (80007a0 <main+0x174>)
 8000638:	613b      	str	r3, [r7, #16]
	uint32_t *pRCC_PLLCFGR = (uint32_t *) RCC_PLLCFGR_REG_ADDR;
 800063a:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <main+0x178>)
 800063c:	60fb      	str	r3, [r7, #12]
	uint8_t MCO1_SOURCE = MCO1_SOURCE_PLL;
 800063e:	2303      	movs	r3, #3
 8000640:	72fb      	strb	r3, [r7, #11]
	uint8_t MCO1_PRESCALAR = MCO_PRESCALAR_5;
 8000642:	2307      	movs	r3, #7
 8000644:	72bb      	strb	r3, [r7, #10]
	uint8_t MCO2_SOURCE = MCO1_SOURCE_PLL;
 8000646:	2303      	movs	r3, #3
 8000648:	727b      	strb	r3, [r7, #9]
	uint8_t MCO2_PRESCALAR = MCO_PRESCALAR_5;
 800064a:	2307      	movs	r3, #7
 800064c:	723b      	strb	r3, [r7, #8]
	uint8_t PLL_SOURCE = PLL_SRC_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
	uint16_t PLL_M_VALUE = 4;
 8000652:	2304      	movs	r3, #4
 8000654:	80bb      	strh	r3, [r7, #4]
	uint16_t PLL_N_VALUE = 50;
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	807b      	strh	r3, [r7, #2]
	uint16_t PLL_P_VALUE = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	803b      	strh	r3, [r7, #0]

	//Configure GPIO Pins for MCO1
	EnablePeriClk(GPIOA);
 800065e:	4852      	ldr	r0, [pc, #328]	; (80007a8 <main+0x17c>)
 8000660:	f7ff fe20 	bl	80002a4 <EnablePeriClk>
	GPIOSetMode(GPIOA,MCO1_GPIO_PIN, GPIO_MODE_ALTFN);
 8000664:	2202      	movs	r2, #2
 8000666:	2108      	movs	r1, #8
 8000668:	484f      	ldr	r0, [pc, #316]	; (80007a8 <main+0x17c>)
 800066a:	f7ff fdbd 	bl	80001e8 <GPIOSetMode>
	GPIOSetAltFn(GPIOA,MCO1_GPIO_PIN,GPIO_ALTFN_0);
 800066e:	2200      	movs	r2, #0
 8000670:	2108      	movs	r1, #8
 8000672:	484d      	ldr	r0, [pc, #308]	; (80007a8 <main+0x17c>)
 8000674:	f7ff fddc 	bl	8000230 <GPIOSetAltFn>

	//Configure GPIO Pins for MCO2
	EnablePeriClk(GPIOC);
 8000678:	484c      	ldr	r0, [pc, #304]	; (80007ac <main+0x180>)
 800067a:	f7ff fe13 	bl	80002a4 <EnablePeriClk>
	GPIOSetMode(GPIOC,MCO2_GPIO_PIN, GPIO_MODE_ALTFN);
 800067e:	2202      	movs	r2, #2
 8000680:	2109      	movs	r1, #9
 8000682:	484a      	ldr	r0, [pc, #296]	; (80007ac <main+0x180>)
 8000684:	f7ff fdb0 	bl	80001e8 <GPIOSetMode>
	GPIOSetAltFn(GPIOC,MCO2_GPIO_PIN,GPIO_ALTFN_0);
 8000688:	2200      	movs	r2, #0
 800068a:	2109      	movs	r1, #9
 800068c:	4847      	ldr	r0, [pc, #284]	; (80007ac <main+0x180>)
 800068e:	f7ff fdcf 	bl	8000230 <GPIOSetAltFn>

	//Configuring RCC_CFGR for MCO1
	*pRCC_CFGR &= ~(0x3 << MCO1_SOURCE_BITPOS);
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR |= (MCO1_SOURCE << MCO1_SOURCE_BITPOS);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7afa      	ldrb	r2, [r7, #11]
 80006a4:	0552      	lsls	r2, r2, #21
 80006a6:	431a      	orrs	r2, r3
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR &= ~(0x7 << MCO1_PRESCALAR_BITPOS);
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR |= (MCO1_PRESCALAR << MCO1_PRESCALAR_BITPOS);
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	7aba      	ldrb	r2, [r7, #10]
 80006be:	0612      	lsls	r2, r2, #24
 80006c0:	431a      	orrs	r2, r3
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	601a      	str	r2, [r3, #0]

	//Configuring RCC_CFGR for MCO2
	*pRCC_CFGR &= ~(0x3 << MCO2_SOURCE_BITPOS);
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR |= (MCO2_SOURCE << MCO2_SOURCE_BITPOS);
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7a7a      	ldrb	r2, [r7, #9]
 80006d8:	0792      	lsls	r2, r2, #30
 80006da:	431a      	orrs	r2, r3
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR &= ~(0x7 << MCO2_PRESCALAR_BITPOS);
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 5260 	bic.w	r2, r3, #939524096	; 0x38000000
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR |= (MCO2_PRESCALAR << MCO2_PRESCALAR_BITPOS);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7a3a      	ldrb	r2, [r7, #8]
 80006f2:	06d2      	lsls	r2, r2, #27
 80006f4:	431a      	orrs	r2, r3
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	601a      	str	r2, [r3, #0]

	//Turning on the HSE Oscillator as the PLL Source
	*pRCC_CR |= (1 << HSE_ON_BITPOS);					//Turning on the HSE Oscillator
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	601a      	str	r2, [r3, #0]
	while(!(*pRCC_CR & (1 << HSE_CHECK_BITPOS)));			//Checking whether HSE Oscillator is turned on and is stable
 8000706:	bf00      	nop
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <main+0xdc>

	//Configuring the PLL Oscillator
	// 1. Configuring the PLL Configuration Register (RCC_PLLCFGR)
	// 1a. Configuring 'M' Value
	*pRCC_PLLCFGR &= ~(63 << PLL_M_BITPOS);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	601a      	str	r2, [r3, #0]
	*pRCC_PLLCFGR |= (PLL_M_VALUE << PLL_M_BITPOS);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	431a      	orrs	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]

	// 1b. Configuring 'N' Value
	*pRCC_PLLCFGR &= ~(511 << PLL_N_BITPOS);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	6013      	str	r3, [r2, #0]
	*pRCC_PLLCFGR |= (PLL_N_VALUE << PLL_N_BITPOS);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	887a      	ldrh	r2, [r7, #2]
 8000742:	0192      	lsls	r2, r2, #6
 8000744:	431a      	orrs	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	601a      	str	r2, [r3, #0]

	// 1c. Configuring 'P' Value
	*pRCC_PLLCFGR &= ~(3 << PLL_P_BITPOS);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	601a      	str	r2, [r3, #0]
	*pRCC_PLLCFGR |= (PLL_P_VALUE << PLL_P_BITPOS);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	883a      	ldrh	r2, [r7, #0]
 800075c:	0412      	lsls	r2, r2, #16
 800075e:	431a      	orrs	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	601a      	str	r2, [r3, #0]

	// 1.d Configuring the PLL Source (HSI or HSE)
	*pRCC_PLLCFGR &= ~(1 << PLL_SRC_BITPOS);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	601a      	str	r2, [r3, #0]
	*pRCC_PLLCFGR |= (PLL_SOURCE << PLL_SRC_BITPOS);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	0592      	lsls	r2, r2, #22
 8000778:	431a      	orrs	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	601a      	str	r2, [r3, #0]

	// 2. Turning on the PLL Oscillator
	*pRCC_CR |= (1 << PLL_ON_BITPOS);					//Turning on the HSE Oscillator
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	601a      	str	r2, [r3, #0]
	while(!(*pRCC_CR & (1 << PLL_CHECK_BITPOS)));			//Checking whether HSE Oscillator is turned on and is stable
 800078a:	bf00      	nop
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <main+0x160>

	while(1)
 8000798:	e7fe      	b.n	8000798 <main+0x16c>
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40023808 	.word	0x40023808
 80007a4:	40023804 	.word	0x40023804
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 f811 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff ff23 	bl	800062c <main>

080007e6 <LoopForever>:

LoopForever:
  b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007f4:	0800086c 	.word	0x0800086c
  ldr r2, =_sbss
 80007f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007fc:	2000001c 	.word	0x2000001c

08000800 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <__libc_init_array>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	4d0d      	ldr	r5, [pc, #52]	; (800083c <__libc_init_array+0x38>)
 8000808:	4c0d      	ldr	r4, [pc, #52]	; (8000840 <__libc_init_array+0x3c>)
 800080a:	1b64      	subs	r4, r4, r5
 800080c:	10a4      	asrs	r4, r4, #2
 800080e:	2600      	movs	r6, #0
 8000810:	42a6      	cmp	r6, r4
 8000812:	d109      	bne.n	8000828 <__libc_init_array+0x24>
 8000814:	4d0b      	ldr	r5, [pc, #44]	; (8000844 <__libc_init_array+0x40>)
 8000816:	4c0c      	ldr	r4, [pc, #48]	; (8000848 <__libc_init_array+0x44>)
 8000818:	f000 f818 	bl	800084c <_init>
 800081c:	1b64      	subs	r4, r4, r5
 800081e:	10a4      	asrs	r4, r4, #2
 8000820:	2600      	movs	r6, #0
 8000822:	42a6      	cmp	r6, r4
 8000824:	d105      	bne.n	8000832 <__libc_init_array+0x2e>
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f855 3b04 	ldr.w	r3, [r5], #4
 800082c:	4798      	blx	r3
 800082e:	3601      	adds	r6, #1
 8000830:	e7ee      	b.n	8000810 <__libc_init_array+0xc>
 8000832:	f855 3b04 	ldr.w	r3, [r5], #4
 8000836:	4798      	blx	r3
 8000838:	3601      	adds	r6, #1
 800083a:	e7f2      	b.n	8000822 <__libc_init_array+0x1e>
 800083c:	08000864 	.word	0x08000864
 8000840:	08000864 	.word	0x08000864
 8000844:	08000864 	.word	0x08000864
 8000848:	08000868 	.word	0x08000868

0800084c <_init>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	bf00      	nop
 8000850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000852:	bc08      	pop	{r3}
 8000854:	469e      	mov	lr, r3
 8000856:	4770      	bx	lr

08000858 <_fini>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	bf00      	nop
 800085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085e:	bc08      	pop	{r3}
 8000860:	469e      	mov	lr, r3
 8000862:	4770      	bx	lr
