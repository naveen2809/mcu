
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002978  08002978  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002978  08002978  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002978  08002978  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000078  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000369b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b30  00000000  00000000  00023729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000490  00000000  00000000  00024260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003e8  00000000  00000000  000246f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000214f  00000000  00000000  00024ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a1a  00000000  00000000  00026c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d284  00000000  00000000  0002c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000398c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001964  00000000  00000000  00039918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002888 	.word	0x08002888

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002888 	.word	0x08002888

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <at45dbxx_read_status_register>:

	return AT45DBXX_SUCCESS;
}

uint8_t at45dbxx_read_status_register(uint8_t *RxBuf)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 2;								//Eight Bytes for Sectors 0 to 7
 8000298:	2302      	movs	r3, #2
 800029a:	61bb      	str	r3, [r7, #24]
	CommandLength = 1;						// Opcode Byte + 3 Dummy Bytes
 800029c:	2301      	movs	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
	TotalLength = Len + CommandLength;
 80002a0:	69ba      	ldr	r2, [r7, #24]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

	tx_buffer = (uint8_t *) malloc(TotalLength);
 80002a8:	6938      	ldr	r0, [r7, #16]
 80002aa:	f001 fad9 	bl	8001860 <malloc>
 80002ae:	4603      	mov	r3, r0
 80002b0:	60fb      	str	r3, [r7, #12]
	receive_buffer = (uint8_t *) malloc(TotalLength);
 80002b2:	6938      	ldr	r0, [r7, #16]
 80002b4:	f001 fad4 	bl	8001860 <malloc>
 80002b8:	4603      	mov	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]

	if((tx_buffer == NULL) || (receive_buffer == NULL))
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d002      	beq.n	80002c8 <at45dbxx_read_status_register+0x38>
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d101      	bne.n	80002cc <at45dbxx_read_status_register+0x3c>
	{
		return AT45DBXX_FAIL;
 80002c8:	2301      	movs	r3, #1
 80002ca:	e02d      	b.n	8000328 <at45dbxx_read_status_register+0x98>
	}

	tx_buffer[0] = 0xD7;							//Opcode
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	22d7      	movs	r2, #215	; 0xd7
 80002d0:	701a      	strb	r2, [r3, #0]

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2104      	movs	r1, #4
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <at45dbxx_read_status_register+0xa0>)
 80002d8:	f000 fc55 	bl	8000b86 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	68f9      	ldr	r1, [r7, #12]
 80002e2:	4814      	ldr	r0, [pc, #80]	; (8000334 <at45dbxx_read_status_register+0xa4>)
 80002e4:	f000 fde2 	bl	8000eac <SPIMasterRecvData>
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2104      	movs	r1, #4
 80002ec:	4810      	ldr	r0, [pc, #64]	; (8000330 <at45dbxx_read_status_register+0xa0>)
 80002ee:	f000 fc4a 	bl	8000b86 <GPIOWritePin>

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
 80002f6:	e00c      	b.n	8000312 <at45dbxx_read_status_register+0x82>
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
 80002f8:	69fa      	ldr	r2, [r7, #28]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	4413      	add	r3, r2
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	441a      	add	r2, r3
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	440b      	add	r3, r1
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<Len;i++)
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	3301      	adds	r3, #1
 8000310:	61fb      	str	r3, [r7, #28]
 8000312:	69fa      	ldr	r2, [r7, #28]
 8000314:	69bb      	ldr	r3, [r7, #24]
 8000316:	429a      	cmp	r2, r3
 8000318:	d3ee      	bcc.n	80002f8 <at45dbxx_read_status_register+0x68>
	}

	free(tx_buffer);
 800031a:	68f8      	ldr	r0, [r7, #12]
 800031c:	f001 faa8 	bl	8001870 <free>
	free(receive_buffer);
 8000320:	68b8      	ldr	r0, [r7, #8]
 8000322:	f001 faa5 	bl	8001870 <free>

	return AT45DBXX_SUCCESS;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40020000 	.word	0x40020000
 8000334:	40003800 	.word	0x40003800

08000338 <at45dbxx_configure_page_size>:

uint8_t at45dbxx_configure_page_size(uint8_t PageSize)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	uint32_t CommandLength;
	uint8_t *tx_buffer;

	CommandLength = 4;						//4 Opcode Bytes for this operation
 8000342:	2304      	movs	r3, #4
 8000344:	60fb      	str	r3, [r7, #12]

	tx_buffer = (uint8_t *) malloc(CommandLength);
 8000346:	68f8      	ldr	r0, [r7, #12]
 8000348:	f001 fa8a 	bl	8001860 <malloc>
 800034c:	4603      	mov	r3, r0
 800034e:	60bb      	str	r3, [r7, #8]

	if(tx_buffer == NULL)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d101      	bne.n	800035a <at45dbxx_configure_page_size+0x22>
	{
		return AT45DBXX_FAIL;
 8000356:	2301      	movs	r3, #1
 8000358:	e037      	b.n	80003ca <at45dbxx_configure_page_size+0x92>
	}

	if(PageSize == AT45DBXX_PAGE_SIZE_256)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d10f      	bne.n	8000380 <at45dbxx_configure_page_size+0x48>
	{
		tx_buffer[0] = 0x3D;					//Opcode-1 for Page Size 256
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	223d      	movs	r2, #61	; 0x3d
 8000364:	701a      	strb	r2, [r3, #0]
		tx_buffer[1] = 0x2A;					//Opcode-2 for Page Size 256
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	3301      	adds	r3, #1
 800036a:	222a      	movs	r2, #42	; 0x2a
 800036c:	701a      	strb	r2, [r3, #0]
		tx_buffer[2] = 0x80;					//Opcode-3 for Page Size 256
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3302      	adds	r3, #2
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	701a      	strb	r2, [r3, #0]
		tx_buffer[3] = 0xA6;					//Opcode-4 for Page Size 256
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3303      	adds	r3, #3
 800037a:	22a6      	movs	r2, #166	; 0xa6
 800037c:	701a      	strb	r2, [r3, #0]
 800037e:	e011      	b.n	80003a4 <at45dbxx_configure_page_size+0x6c>
	}
	else if(PageSize == AT45DBXX_PAGE_SIZE_264)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d10e      	bne.n	80003a4 <at45dbxx_configure_page_size+0x6c>
	{
		tx_buffer[0] = 0x3D;					//Opcode-1 for Page Size 264
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	223d      	movs	r2, #61	; 0x3d
 800038a:	701a      	strb	r2, [r3, #0]
		tx_buffer[1] = 0x2A;					//Opcode-2 for Page Size 264
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	3301      	adds	r3, #1
 8000390:	222a      	movs	r2, #42	; 0x2a
 8000392:	701a      	strb	r2, [r3, #0]
		tx_buffer[2] = 0x80;					//Opcode-3 for Page Size 264
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3302      	adds	r3, #2
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	701a      	strb	r2, [r3, #0]
		tx_buffer[3] = 0xA7;					//Opcode-4 for Page Size 264
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	3303      	adds	r3, #3
 80003a0:	22a7      	movs	r2, #167	; 0xa7
 80003a2:	701a      	strb	r2, [r3, #0]
	}

	//Send Command to Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <at45dbxx_configure_page_size+0x9c>)
 80003aa:	f000 fbec 	bl	8000b86 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buffer,CommandLength);
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	68b9      	ldr	r1, [r7, #8]
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <at45dbxx_configure_page_size+0xa0>)
 80003b4:	f000 fd4e 	bl	8000e54 <SPISendData>
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2104      	movs	r1, #4
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <at45dbxx_configure_page_size+0x9c>)
 80003be:	f000 fbe2 	bl	8000b86 <GPIOWritePin>

	free(tx_buffer);
 80003c2:	68b8      	ldr	r0, [r7, #8]
 80003c4:	f001 fa54 	bl	8001870 <free>

	return AT45DBXX_SUCCESS;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40020000 	.word	0x40020000
 80003d8:	40003800 	.word	0x40003800

080003dc <at45dbxx_read_manufacturer_and_device_info>:

uint8_t at45dbxx_read_manufacturer_and_device_info(uint8_t *RxBuf)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint32_t TotalLength,i,CommandLength, Len;
	uint8_t *tx_buffer,*receive_buffer;

	Len = 5;								//One byte for Manufacturer ID, two bytes for Device ID and two bytes for Manufacturer Extended Information
 80003e4:	2305      	movs	r3, #5
 80003e6:	61bb      	str	r3, [r7, #24]
	CommandLength = 1;						//Opcode Byte
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
	TotalLength = Len + CommandLength;
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	4413      	add	r3, r2
 80003f2:	613b      	str	r3, [r7, #16]

	tx_buffer = (uint8_t *) malloc(TotalLength);
 80003f4:	6938      	ldr	r0, [r7, #16]
 80003f6:	f001 fa33 	bl	8001860 <malloc>
 80003fa:	4603      	mov	r3, r0
 80003fc:	60fb      	str	r3, [r7, #12]
	receive_buffer = (uint8_t *) malloc(TotalLength);
 80003fe:	6938      	ldr	r0, [r7, #16]
 8000400:	f001 fa2e 	bl	8001860 <malloc>
 8000404:	4603      	mov	r3, r0
 8000406:	60bb      	str	r3, [r7, #8]

	if((tx_buffer == NULL) || (receive_buffer == NULL))
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <at45dbxx_read_manufacturer_and_device_info+0x38>
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d101      	bne.n	8000418 <at45dbxx_read_manufacturer_and_device_info+0x3c>
	{
		return AT45DBXX_FAIL;
 8000414:	2301      	movs	r3, #1
 8000416:	e02d      	b.n	8000474 <at45dbxx_read_manufacturer_and_device_info+0x98>
	}

	tx_buffer[0] = 0x9F;							//Opcode
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	229f      	movs	r2, #159	; 0x9f
 800041c:	701a      	strb	r2, [r3, #0]

	//Read from Flash Memory
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_LOW);
 800041e:	2200      	movs	r2, #0
 8000420:	2104      	movs	r1, #4
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <at45dbxx_read_manufacturer_and_device_info+0xa0>)
 8000424:	f000 fbaf 	bl	8000b86 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buffer,receive_buffer,TotalLength);
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	68f9      	ldr	r1, [r7, #12]
 800042e:	4814      	ldr	r0, [pc, #80]	; (8000480 <at45dbxx_read_manufacturer_and_device_info+0xa4>)
 8000430:	f000 fd3c 	bl	8000eac <SPIMasterRecvData>
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <at45dbxx_read_manufacturer_and_device_info+0xa0>)
 800043a:	f000 fba4 	bl	8000b86 <GPIOWritePin>

	//Update the Receive Buffer
	for(i=0;i<Len;i++)
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
 8000442:	e00c      	b.n	800045e <at45dbxx_read_manufacturer_and_device_info+0x82>
	{
		RxBuf[i] = receive_buffer[i+CommandLength];
 8000444:	69fa      	ldr	r2, [r7, #28]
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	4413      	add	r3, r2
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	441a      	add	r2, r3
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	440b      	add	r3, r1
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	701a      	strb	r2, [r3, #0]
	for(i=0;i<Len;i++)
 8000458:	69fb      	ldr	r3, [r7, #28]
 800045a:	3301      	adds	r3, #1
 800045c:	61fb      	str	r3, [r7, #28]
 800045e:	69fa      	ldr	r2, [r7, #28]
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	429a      	cmp	r2, r3
 8000464:	d3ee      	bcc.n	8000444 <at45dbxx_read_manufacturer_and_device_info+0x68>
	}

	free(tx_buffer);
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f001 fa02 	bl	8001870 <free>
	free(receive_buffer);
 800046c:	68b8      	ldr	r0, [r7, #8]
 800046e:	f001 f9ff 	bl	8001870 <free>

	return AT45DBXX_SUCCESS;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40020000 	.word	0x40020000
 8000480:	40003800 	.word	0x40003800

08000484 <at45dbxx_configure_flash>:

	return;
}

void at45dbxx_configure_flash(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[2];

	//Configure the GPIO Pin for Slave Select Pin of FLASH Module
	EnablePeriClk(FLASH_PORT);
 800048a:	4810      	ldr	r0, [pc, #64]	; (80004cc <at45dbxx_configure_flash+0x48>)
 800048c:	f000 fd58 	bl	8000f40 <EnablePeriClk>
	GPIOSetMode(FLASH_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 8000490:	2201      	movs	r2, #1
 8000492:	2104      	movs	r1, #4
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <at45dbxx_configure_flash+0x48>)
 8000496:	f000 fb52 	bl	8000b3e <GPIOSetMode>
	GPIOWritePin(FLASH_PORT,SS_PIN,GPIO_HIGH);
 800049a:	2201      	movs	r2, #1
 800049c:	2104      	movs	r1, #4
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <at45dbxx_configure_flash+0x48>)
 80004a0:	f000 fb71 	bl	8000b86 <GPIOWritePin>

	//Logic to set the Page Size to 256 bytes if it is not already set to it
	//Read Status Register
	at45dbxx_read_status_register(rx_buffer);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fef2 	bl	8000290 <at45dbxx_read_status_register>

	if((rx_buffer[0] & AT45DBXX_STATUS_PAGESIZE_BITMASK) == 0)
 80004ac:	793b      	ldrb	r3, [r7, #4]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d106      	bne.n	80004c4 <at45dbxx_configure_flash+0x40>
	{
		at45dbxx_configure_page_size(AT45DBXX_PAGE_SIZE_256);
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ff3e 	bl	8000338 <at45dbxx_configure_page_size>
		delay_us(5000000);
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <at45dbxx_configure_flash+0x4c>)
 80004be:	f000 f809 	bl	80004d4 <delay_us>
	}

	return;
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
}
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40020000 	.word	0x40020000
 80004d0:	004c4b40 	.word	0x004c4b40

080004d4 <delay_us>:
struct USART_Handle_t Test_USART;
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x50;

void delay_us(uint32_t delay)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <delay_us+0x2c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2200      	movs	r2, #0
 80004e2:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80004e4:	bf00      	nop
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <delay_us+0x2c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f8      	bcc.n	80004e6 <delay_us+0x12>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000080 	.word	0x20000080

08000504 <configure_delay_timer>:

void configure_delay_timer(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <configure_delay_timer+0x3c>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 8000510:	2228      	movs	r2, #40	; 0x28
 8000512:	2100      	movs	r1, #0
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <configure_delay_timer+0x40>)
 8000516:	f001 f9b3 	bl	8001880 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <configure_delay_timer+0x3c>)
 800051c:	2201      	movs	r2, #1
 800051e:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <configure_delay_timer+0x3c>)
 8000522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000526:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 8000528:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800052c:	f000 fd08 	bl	8000f40 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <configure_delay_timer+0x3c>)
 8000532:	f000 f8cb 	bl	80006cc <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <configure_delay_timer+0x3c>)
 8000538:	f000 faf0 	bl	8000b1c <General_Purpose_Timer_PeripheralEnable>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000080 	.word	0x20000080
 8000544:	20000084 	.word	0x20000084

08000548 <configure_spi>:

void configure_spi(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800054e:	4825      	ldr	r0, [pc, #148]	; (80005e4 <configure_spi+0x9c>)
 8000550:	f000 fcf6 	bl	8000f40 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000554:	2202      	movs	r2, #2
 8000556:	210f      	movs	r1, #15
 8000558:	4822      	ldr	r0, [pc, #136]	; (80005e4 <configure_spi+0x9c>)
 800055a:	f000 faf0 	bl	8000b3e <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800055e:	2202      	movs	r2, #2
 8000560:	210e      	movs	r1, #14
 8000562:	4820      	ldr	r0, [pc, #128]	; (80005e4 <configure_spi+0x9c>)
 8000564:	f000 faeb 	bl	8000b3e <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 8000568:	2202      	movs	r2, #2
 800056a:	210d      	movs	r1, #13
 800056c:	481d      	ldr	r0, [pc, #116]	; (80005e4 <configure_spi+0x9c>)
 800056e:	f000 fae6 	bl	8000b3e <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 8000572:	2202      	movs	r2, #2
 8000574:	210c      	movs	r1, #12
 8000576:	481b      	ldr	r0, [pc, #108]	; (80005e4 <configure_spi+0x9c>)
 8000578:	f000 fae1 	bl	8000b3e <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 800057c:	2205      	movs	r2, #5
 800057e:	210f      	movs	r1, #15
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <configure_spi+0x9c>)
 8000582:	f000 fb22 	bl	8000bca <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000586:	2205      	movs	r2, #5
 8000588:	210e      	movs	r1, #14
 800058a:	4816      	ldr	r0, [pc, #88]	; (80005e4 <configure_spi+0x9c>)
 800058c:	f000 fb1d 	bl	8000bca <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 8000590:	2205      	movs	r2, #5
 8000592:	210d      	movs	r1, #13
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <configure_spi+0x9c>)
 8000596:	f000 fb18 	bl	8000bca <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 800059a:	2205      	movs	r2, #5
 800059c:	210c      	movs	r1, #12
 800059e:	4811      	ldr	r0, [pc, #68]	; (80005e4 <configure_spi+0x9c>)
 80005a0:	f000 fb13 	bl	8000bca <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 80005a4:	2301      	movs	r3, #1
 80005a6:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV8;
 80005b0:	2302      	movs	r3, #2
 80005b2:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 80005b4:	2300      	movs	r3, #0
 80005b6:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 80005bc:	2301      	movs	r3, #1
 80005be:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 80005c0:	2301      	movs	r3, #1
 80005c2:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <configure_spi+0xa0>)
 80005c6:	f000 fcbb 	bl	8000f40 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <configure_spi+0xa0>)
 80005d0:	f000 fb9e 	bl	8000d10 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <configure_spi+0xa0>)
 80005d6:	f000 fc16 	bl	8000e06 <SPIEnable>
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40003800 	.word	0x40003800

080005ec <configure_uart>:

void configure_uart(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <configure_uart+0xb0>)
 80005f2:	f000 fca5 	bl	8000f40 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80005f6:	2202      	movs	r2, #2
 80005f8:	2105      	movs	r1, #5
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <configure_uart+0xb0>)
 80005fc:	f000 fa9f 	bl	8000b3e <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000600:	2202      	movs	r2, #2
 8000602:	2106      	movs	r1, #6
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <configure_uart+0xb0>)
 8000606:	f000 fa9a 	bl	8000b3e <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 800060a:	2207      	movs	r2, #7
 800060c:	2105      	movs	r1, #5
 800060e:	4823      	ldr	r0, [pc, #140]	; (800069c <configure_uart+0xb0>)
 8000610:	f000 fadb 	bl	8000bca <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000614:	2207      	movs	r2, #7
 8000616:	2106      	movs	r1, #6
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <configure_uart+0xb0>)
 800061a:	f000 fad6 	bl	8000bca <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	481e      	ldr	r0, [pc, #120]	; (800069c <configure_uart+0xb0>)
 8000624:	f000 fb0a 	bl	8000c3c <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000628:	2200      	movs	r2, #0
 800062a:	2106      	movs	r1, #6
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <configure_uart+0xb0>)
 800062e:	f000 fb05 	bl	8000c3c <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 8000632:	2202      	movs	r2, #2
 8000634:	2105      	movs	r1, #5
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <configure_uart+0xb0>)
 8000638:	f000 fb46 	bl	8000cc8 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 800063c:	2202      	movs	r2, #2
 800063e:	2106      	movs	r1, #6
 8000640:	4816      	ldr	r0, [pc, #88]	; (800069c <configure_uart+0xb0>)
 8000642:	f000 fb41 	bl	8000cc8 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000646:	2201      	movs	r2, #1
 8000648:	2105      	movs	r1, #5
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <configure_uart+0xb0>)
 800064c:	f000 fb18 	bl	8000c80 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 8000650:	2201      	movs	r2, #1
 8000652:	2106      	movs	r1, #6
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <configure_uart+0xb0>)
 8000656:	f000 fb13 	bl	8000c80 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <configure_uart+0xb4>)
 800065c:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <configure_uart+0xb8>)
 800065e:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <configure_uart+0xb4>)
 8000662:	2202      	movs	r2, #2
 8000664:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <configure_uart+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <configure_uart+0xb4>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <configure_uart+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <configure_uart+0xb4>)
 800067a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800067e:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <configure_uart+0xb4>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <configure_uart+0xb8>)
 8000688:	f000 fc5a 	bl	8000f40 <EnablePeriClk>
	USART_Init(&Test_USART);
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <configure_uart+0xb4>)
 800068e:	f000 fe1b 	bl	80012c8 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <configure_uart+0xb4>)
 8000694:	f000 ff18 	bl	80014c8 <USART_PeripheralEnable>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	40004400 	.word	0x40004400

080006a8 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <UART_SendChar+0x20>)
 80006ba:	f000 ff2b 	bl	8001514 <USART_SendData>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000ac 	.word	0x200000ac

080006cc <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	6852      	ldr	r2, [r2, #4]
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6892      	ldr	r2, [r2, #8]
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7b1b      	ldrb	r3, [r3, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d16a      	bne.n	80007c6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a1a      	ldr	r2, [r3, #32]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b5b      	ldrb	r3, [r3, #13]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d11c      	bne.n	8000742 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f022 0203 	bic.w	r2, r2, #3
 8000716:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	6912      	ldr	r2, [r2, #16]
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	699a      	ldr	r2, [r3, #24]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000730:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000740:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7b5b      	ldrb	r3, [r3, #13]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d11c      	bne.n	8000784 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f022 0203 	bic.w	r2, r2, #3
 8000758:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	6912      	ldr	r2, [r2, #16]
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000772:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000782:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b5b      	ldrb	r3, [r3, #13]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d11c      	bne.n	80007c6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f022 0203 	bic.w	r2, r2, #3
 800079a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6912      	ldr	r2, [r2, #16]
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007b4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	699a      	ldr	r2, [r3, #24]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80007c4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7d1b      	ldrb	r3, [r3, #20]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 80bf 	bne.w	800094e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7d5b      	ldrb	r3, [r3, #21]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d124      	bne.n	8000822 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007e6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	6992      	ldr	r2, [r2, #24]
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000800:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000810:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6a1a      	ldr	r2, [r3, #32]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0210 	orr.w	r2, r2, #16
 8000820:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7d5b      	ldrb	r3, [r3, #21]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d124      	bne.n	8000874 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	699a      	ldr	r2, [r3, #24]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000838:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	6992      	ldr	r2, [r2, #24]
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	699a      	ldr	r2, [r3, #24]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000852:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	699a      	ldr	r2, [r3, #24]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000862:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6a1a      	ldr	r2, [r3, #32]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f042 0210 	orr.w	r2, r2, #16
 8000872:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7d5b      	ldrb	r3, [r3, #21]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d124      	bne.n	80008c6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	699a      	ldr	r2, [r3, #24]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800088a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6992      	ldr	r2, [r2, #24]
 8000894:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008a4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	699a      	ldr	r2, [r3, #24]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80008b4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6a1a      	ldr	r2, [r3, #32]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0210 	orr.w	r2, r2, #16
 80008c4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7d5b      	ldrb	r3, [r3, #21]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d13f      	bne.n	800094e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	699a      	ldr	r2, [r3, #24]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008dc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008ec:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80008fc:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a1a      	ldr	r2, [r3, #32]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0220 	bic.w	r2, r2, #32
 800090c:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6a1a      	ldr	r2, [r3, #32]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800091c:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	699a      	ldr	r2, [r3, #24]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800092c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f042 0204 	orr.w	r2, r2, #4
 800093c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f042 0210 	orr.w	r2, r2, #16
 800094c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7f1b      	ldrb	r3, [r3, #28]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d16a      	bne.n	8000a2c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a1a      	ldr	r2, [r3, #32]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000964:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f5b      	ldrb	r3, [r3, #29]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d11c      	bne.n	80009a8 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f022 0203 	bic.w	r2, r2, #3
 800097c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6a12      	ldr	r2, [r2, #32]
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	69da      	ldr	r2, [r3, #28]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000996:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	69da      	ldr	r2, [r3, #28]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80009a6:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7f5b      	ldrb	r3, [r3, #29]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d11c      	bne.n	80009ea <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	69da      	ldr	r2, [r3, #28]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0203 	bic.w	r2, r2, #3
 80009be:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6a12      	ldr	r2, [r2, #32]
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009d8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80009e8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7f5b      	ldrb	r3, [r3, #29]
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d11c      	bne.n	8000a2c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0203 	bic.w	r2, r2, #3
 8000a00:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	6a12      	ldr	r2, [r2, #32]
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	69da      	ldr	r2, [r3, #28]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a1a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000a2a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d16d      	bne.n	8000b12 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a1a      	ldr	r2, [r3, #32]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a44:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d11c      	bne.n	8000a8a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a5e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	69da      	ldr	r2, [r3, #28]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a78:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69da      	ldr	r2, [r3, #28]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a88:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d11c      	bne.n	8000ace <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000aa2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69da      	ldr	r2, [r3, #28]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000abc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000acc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d11c      	bne.n	8000b12 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	69da      	ldr	r2, [r3, #28]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000ae6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	69da      	ldr	r2, [r3, #28]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000b00:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69da      	ldr	r2, [r3, #28]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000b10:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b085      	sub	sp, #20
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	70fb      	strb	r3, [r7, #3]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	78b9      	ldrb	r1, [r7, #2]
 8000b6e:	78fa      	ldrb	r2, [r7, #3]
 8000b70:	0052      	lsls	r2, r2, #1
 8000b72:	fa01 f202 	lsl.w	r2, r1, r2
 8000b76:	431a      	orrs	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]

}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
 8000b92:	4613      	mov	r3, r2
 8000b94:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	78fa      	ldrb	r2, [r7, #3]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	43d2      	mvns	r2, r2
 8000ba8:	401a      	ands	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	78b9      	ldrb	r1, [r7, #2]
 8000bb4:	78fa      	ldrb	r2, [r7, #3]
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	615a      	str	r2, [r3, #20]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70fb      	strb	r3, [r7, #3]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	08db      	lsrs	r3, r3, #3
 8000be2:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000bec:	7afa      	ldrb	r2, [r7, #11]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	7aba      	ldrb	r2, [r7, #10]
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	4611      	mov	r1, r2
 8000c04:	7afa      	ldrb	r2, [r7, #11]
 8000c06:	4019      	ands	r1, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000c10:	7afa      	ldrb	r2, [r7, #11]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3208      	adds	r2, #8
 8000c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1a:	78b9      	ldrb	r1, [r7, #2]
 8000c1c:	7aba      	ldrb	r2, [r7, #10]
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	fa01 f202 	lsl.w	r2, r1, r2
 8000c24:	4611      	mov	r1, r2
 8000c26:	7afa      	ldrb	r2, [r7, #11]
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	78fa      	ldrb	r2, [r7, #3]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	78b9      	ldrb	r1, [r7, #2]
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c70:	431a      	orrs	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	605a      	str	r2, [r3, #4]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	43d2      	mvns	r2, r2
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	78b9      	ldrb	r1, [r7, #2]
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	60da      	str	r2, [r3, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	78fa      	ldrb	r2, [r7, #3]
 8000ce2:	0052      	lsls	r2, r2, #1
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	43d2      	mvns	r2, r2
 8000cec:	401a      	ands	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	78b9      	ldrb	r1, [r7, #2]
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	0052      	lsls	r2, r2, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	609a      	str	r2, [r3, #8]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 0201 	bic.w	r2, r3, #1
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	7852      	ldrb	r2, [r2, #1]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 0202 	bic.w	r2, r3, #2
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	0052      	lsls	r2, r2, #1
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 0204 	bic.w	r2, r3, #4
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	7892      	ldrb	r2, [r2, #2]
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	7912      	ldrb	r2, [r2, #4]
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	431a      	orrs	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	7952      	ldrb	r2, [r2, #5]
 8000da0:	02d2      	lsls	r2, r2, #11
 8000da2:	431a      	orrs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	7992      	ldrb	r2, [r2, #6]
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	79d2      	ldrb	r2, [r2, #7]
 8000dd8:	0212      	lsls	r2, r2, #8
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f023 0204 	bic.w	r2, r3, #4
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	7a12      	ldrb	r2, [r2, #8]
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	431a      	orrs	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	605a      	str	r2, [r3, #4]


}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3

}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint32_t len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 8000e64:	e012      	b.n	8000e8c <SPISendData+0x38>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000e66:	bf00      	nop
 8000e68:	2101      	movs	r1, #1
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff ffdc 	bl	8000e28 <SPIGetFlags>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f8      	beq.n	8000e68 <SPISendData+0x14>

		pSPI->SPI_DR = *TxBuf;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
		len--;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
	while(len > 0) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1e9      	bne.n	8000e66 <SPISendData+0x12>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 8000e92:	bf00      	nop
 8000e94:	2101      	movs	r1, #1
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff ffc6 	bl	8000e28 <SPIGetFlags>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f8      	beq.n	8000e94 <SPISendData+0x40>
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint32_t len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000ebe:	bf00      	nop
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ffb0 	bl	8000e28 <SPIGetFlags>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f8      	beq.n	8000ec0 <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000ece:	e004      	b.n	8000eda <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000eda:	2100      	movs	r1, #0
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f7ff ffa3 	bl	8000e28 <SPIGetFlags>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f3      	bne.n	8000ed0 <SPIMasterRecvData+0x24>

	while(len > 0) {
 8000ee8:	e022      	b.n	8000f30 <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000eea:	bf00      	nop
 8000eec:	2101      	movs	r1, #1
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ff9a 	bl	8000e28 <SPIGetFlags>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f8      	beq.n	8000eec <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 8000f0a:	bf00      	nop
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff ff8a 	bl	8000e28 <SPIGetFlags>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f8      	beq.n	8000f0c <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
		len--;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
	while(len > 0) {
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1d9      	bne.n	8000eea <SPIMasterRecvData+0x3e>
	}

	return;
 8000f36:	bf00      	nop
}
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a88      	ldr	r2, [pc, #544]	; (800116c <EnablePeriClk+0x22c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d108      	bne.n	8000f62 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f50:	4b87      	ldr	r3, [pc, #540]	; (8001170 <EnablePeriClk+0x230>)
 8000f52:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f043 0201 	orr.w	r2, r3, #1
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000f60:	e19b      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a83      	ldr	r2, [pc, #524]	; (8001174 <EnablePeriClk+0x234>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d108      	bne.n	8000f7c <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f6a:	4b81      	ldr	r3, [pc, #516]	; (8001170 <EnablePeriClk+0x230>)
 8000f6c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f043 0202 	orr.w	r2, r3, #2
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	601a      	str	r2, [r3, #0]
}
 8000f7a:	e18e      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a7e      	ldr	r2, [pc, #504]	; (8001178 <EnablePeriClk+0x238>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d108      	bne.n	8000f96 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f84:	4b7a      	ldr	r3, [pc, #488]	; (8001170 <EnablePeriClk+0x230>)
 8000f86:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f043 0204 	orr.w	r2, r3, #4
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	e181      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a78      	ldr	r2, [pc, #480]	; (800117c <EnablePeriClk+0x23c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d108      	bne.n	8000fb0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <EnablePeriClk+0x230>)
 8000fa0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f043 0208 	orr.w	r2, r3, #8
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	e174      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a73      	ldr	r2, [pc, #460]	; (8001180 <EnablePeriClk+0x240>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d108      	bne.n	8000fca <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000fb8:	4b6d      	ldr	r3, [pc, #436]	; (8001170 <EnablePeriClk+0x230>)
 8000fba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f043 0210 	orr.w	r2, r3, #16
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	e167      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a6d      	ldr	r2, [pc, #436]	; (8001184 <EnablePeriClk+0x244>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d108      	bne.n	8000fe4 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000fd2:	4b67      	ldr	r3, [pc, #412]	; (8001170 <EnablePeriClk+0x230>)
 8000fd4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f043 0220 	orr.w	r2, r3, #32
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	e15a      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a68      	ldr	r2, [pc, #416]	; (8001188 <EnablePeriClk+0x248>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d108      	bne.n	8000ffe <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000fec:	4b60      	ldr	r3, [pc, #384]	; (8001170 <EnablePeriClk+0x230>)
 8000fee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	601a      	str	r2, [r3, #0]
}
 8000ffc:	e14d      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a62      	ldr	r2, [pc, #392]	; (800118c <EnablePeriClk+0x24c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d108      	bne.n	8001018 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001006:	4b5a      	ldr	r3, [pc, #360]	; (8001170 <EnablePeriClk+0x230>)
 8001008:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	e140      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a5d      	ldr	r2, [pc, #372]	; (8001190 <EnablePeriClk+0x250>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d108      	bne.n	8001032 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <EnablePeriClk+0x230>)
 8001022:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	e133      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a57      	ldr	r2, [pc, #348]	; (8001194 <EnablePeriClk+0x254>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d108      	bne.n	800104c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <EnablePeriClk+0x258>)
 800103c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	e126      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a53      	ldr	r2, [pc, #332]	; (800119c <EnablePeriClk+0x25c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d108      	bne.n	8001066 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001054:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <EnablePeriClk+0x260>)
 8001056:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	e119      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <EnablePeriClk+0x264>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d108      	bne.n	8001080 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <EnablePeriClk+0x260>)
 8001070:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	e10c      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <EnablePeriClk+0x268>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d108      	bne.n	800109a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <EnablePeriClk+0x260>)
 800108a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	e0ff      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a43      	ldr	r2, [pc, #268]	; (80011ac <EnablePeriClk+0x26c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d108      	bne.n	80010b4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <EnablePeriClk+0x260>)
 80010a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	e0f2      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3e      	ldr	r2, [pc, #248]	; (80011b0 <EnablePeriClk+0x270>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d108      	bne.n	80010ce <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <EnablePeriClk+0x260>)
 80010be:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	e0e5      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <EnablePeriClk+0x274>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d108      	bne.n	80010e8 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <EnablePeriClk+0x258>)
 80010d8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0210 	orr.w	r2, r3, #16
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	e0d8      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <EnablePeriClk+0x278>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d108      	bne.n	8001102 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <EnablePeriClk+0x260>)
 80010f2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	e0cb      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <EnablePeriClk+0x27c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d108      	bne.n	800111c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <EnablePeriClk+0x260>)
 800110c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	e0be      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <EnablePeriClk+0x280>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d108      	bne.n	8001136 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <EnablePeriClk+0x260>)
 8001126:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	e0b1      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <EnablePeriClk+0x284>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d108      	bne.n	8001150 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <EnablePeriClk+0x260>)
 8001140:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	e0a4      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <EnablePeriClk+0x288>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d139      	bne.n	80011cc <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <EnablePeriClk+0x258>)
 800115a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f043 0220 	orr.w	r2, r3, #32
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	e097      	b.n	800129a <EnablePeriClk+0x35a>
 800116a:	bf00      	nop
 800116c:	40020000 	.word	0x40020000
 8001170:	40023830 	.word	0x40023830
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40013000 	.word	0x40013000
 8001198:	40023844 	.word	0x40023844
 800119c:	40003800 	.word	0x40003800
 80011a0:	40023840 	.word	0x40023840
 80011a4:	40003c00 	.word	0x40003c00
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40005800 	.word	0x40005800
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40004800 	.word	0x40004800
 80011c0:	40004c00 	.word	0x40004c00
 80011c4:	40005000 	.word	0x40005000
 80011c8:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <EnablePeriClk+0x364>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d108      	bne.n	80011e6 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <EnablePeriClk+0x368>)
 80011d6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	e059      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a30      	ldr	r2, [pc, #192]	; (80012ac <EnablePeriClk+0x36c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d108      	bne.n	8001200 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <EnablePeriClk+0x368>)
 80011f0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f043 0220 	orr.w	r2, r3, #32
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	e04c      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <EnablePeriClk+0x370>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d108      	bne.n	800121a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <EnablePeriClk+0x374>)
 800120a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	e03f      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <EnablePeriClk+0x378>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d108      	bne.n	8001234 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <EnablePeriClk+0x374>)
 8001224:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	e032      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800123a:	d108      	bne.n	800124e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <EnablePeriClk+0x368>)
 800123e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	e025      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <EnablePeriClk+0x37c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d108      	bne.n	8001268 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <EnablePeriClk+0x368>)
 8001258:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f043 0202 	orr.w	r2, r3, #2
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	e018      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <EnablePeriClk+0x380>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d108      	bne.n	8001282 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <EnablePeriClk+0x368>)
 8001272:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f043 0204 	orr.w	r2, r3, #4
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	e00b      	b.n	800129a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <EnablePeriClk+0x384>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d107      	bne.n	800129a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <EnablePeriClk+0x368>)
 800128c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f043 0208 	orr.w	r2, r3, #8
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40001000 	.word	0x40001000
 80012a8:	40023840 	.word	0x40023840
 80012ac:	40001400 	.word	0x40001400
 80012b0:	40026000 	.word	0x40026000
 80012b4:	40023830 	.word	0x40023830
 80012b8:	40026400 	.word	0x40026400
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40000800 	.word	0x40000800
 80012c4:	40000c00 	.word	0x40000c00

080012c8 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d110      	bne.n	80012fa <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	e028      	b.n	800134c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d110      	bne.n	8001324 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0208 	bic.w	r2, r2, #8
 8001310:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0204 	orr.w	r2, r2, #4
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	e013      	b.n	800134c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d10f      	bne.n	800134c <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0208 	orr.w	r2, r2, #8
 800133a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0204 	orr.w	r2, r2, #4
 800134a:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d108      	bne.n	8001366 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e00b      	b.n	800137e <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800137c:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800138c:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6919      	ldr	r1, [r3, #16]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	031a      	lsls	r2, r3, #12
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d108      	bne.n	80013bc <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	e028      	b.n	800140e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d110      	bne.n	80013e6 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013d2:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e013      	b.n	800140e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d10f      	bne.n	800140e <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013fc:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140c:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f8a7 	bl	8001568 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d110      	bne.n	8001444 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001430:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001440:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8001442:	e03d      	b.n	80014c0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d110      	bne.n	800146e <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800145a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800146a:	615a      	str	r2, [r3, #20]
}
 800146c:	e028      	b.n	80014c0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d110      	bne.n	8001498 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001484:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001494:	615a      	str	r2, [r3, #20]
}
 8001496:	e013      	b.n	80014c0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d10f      	bne.n	80014c0 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ae:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014be:	615a      	str	r2, [r3, #20]
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014de:	60da      	str	r2, [r3, #12]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001520:	e012      	b.n	8001548 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8001522:	bf00      	nop
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff ffdf 	bl	80014ea <USART_GetFlagStatus>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f8      	beq.n	8001524 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3301      	adds	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
		Len--;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3b01      	subs	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e9      	bne.n	8001522 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 800154e:	bf00      	nop
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff ffc9 	bl	80014ea <USART_GetFlagStatus>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f8      	beq.n	8001550 <USART_SendData+0x3c>
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8001572:	f240 6383 	movw	r3, #1667	; 0x683
 8001576:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	609a      	str	r2, [r3, #8]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
	...

0800158c <main>:

#define BUFFER_SIZE	256
#define TEST_PIN	GPIO_PIN_1

int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001592:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t MemAddress[3] = {0x00,0x01,0x00};
 8001594:	4a32      	ldr	r2, [pc, #200]	; (8001660 <main+0xd4>)
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4611      	mov	r1, r2
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	3302      	adds	r3, #2
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[BUFFER_SIZE];
	uint8_t rx_buffer[BUFFER_SIZE];
	uint8_t status;

	//Configure the Timer
	configure_delay_timer();
 80015a6:	f7fe ffad 	bl	8000504 <configure_delay_timer>

	//Configure the UART
	configure_uart();
 80015aa:	f7ff f81f 	bl	80005ec <configure_uart>

	//Configure the SPI Peripheral
	configure_spi();
 80015ae:	f7fe ffcb 	bl	8000548 <configure_spi>

	//Configure the FLASH Module
	at45dbxx_configure_flash();
 80015b2:	f7fe ff67 	bl	8000484 <at45dbxx_configure_flash>

	//Configuring the Test Pin
	GPIOSetMode(FLASH_PORT,TEST_PIN,GPIO_MODE_OUTPUT);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2101      	movs	r1, #1
 80015ba:	482a      	ldr	r0, [pc, #168]	; (8001664 <main+0xd8>)
 80015bc:	f7ff fabf 	bl	8000b3e <GPIOSetMode>
	GPIOWritePin(FLASH_PORT,TEST_PIN,GPIO_LOW);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2101      	movs	r1, #1
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <main+0xd8>)
 80015c6:	f7ff fade 	bl	8000b86 <GPIOWritePin>

	//Read and Print the Manufacturer and Device Information
	at45dbxx_read_manufacturer_and_device_info(rx_buffer);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff05 	bl	80003dc <at45dbxx_read_manufacturer_and_device_info>

	printf("\r\n");
 80015d2:	4825      	ldr	r0, [pc, #148]	; (8001668 <main+0xdc>)
 80015d4:	f000 fac0 	bl	8001b58 <puts>
	printf("Manufacturer and Device ID: ");
 80015d8:	4824      	ldr	r0, [pc, #144]	; (800166c <main+0xe0>)
 80015da:	f000 fa37 	bl	8001a4c <iprintf>
	for(i=0;i<AT45DBXX_MANUFACTURER_AND_DEVICE_INFO_LEN;i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80015e4:	e010      	b.n	8001608 <main+0x7c>
	{
		printf("%X ",rx_buffer[i]);
 80015e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ea:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80015ee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	481d      	ldr	r0, [pc, #116]	; (8001670 <main+0xe4>)
 80015fa:	f000 fa27 	bl	8001a4c <iprintf>
	for(i=0;i<AT45DBXX_MANUFACTURER_AND_DEVICE_INFO_LEN;i++)
 80015fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001608:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800160c:	2b04      	cmp	r3, #4
 800160e:	d9ea      	bls.n	80015e6 <main+0x5a>
	}
	printf("\r\n");
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <main+0xdc>)
 8001612:	f000 faa1 	bl	8001b58 <puts>

	//Read Status Register
	at45dbxx_read_status_register(rx_buffer);
 8001616:	463b      	mov	r3, r7
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fe39 	bl	8000290 <at45dbxx_read_status_register>

	printf("Status Register: ");
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <main+0xe8>)
 8001620:	f000 fa14 	bl	8001a4c <iprintf>
	for(i=0;i<AT45DBXX_STATUS_REGISTER_LEN;i++)
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800162a:	e010      	b.n	800164e <main+0xc2>
	{
		printf("%X ",rx_buffer[i]);
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8001634:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <main+0xe4>)
 8001640:	f000 fa04 	bl	8001a4c <iprintf>
	for(i=0;i<AT45DBXX_STATUS_REGISTER_LEN;i++)
 8001644:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001648:	3301      	adds	r3, #1
 800164a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800164e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001652:	2b01      	cmp	r3, #1
 8001654:	d9ea      	bls.n	800162c <main+0xa0>
	}
	printf("\r\n");
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <main+0xdc>)
 8001658:	f000 fa7e 	bl	8001b58 <puts>
		printf("%X ",rx_buffer[i]);
	}
	printf("\r\n");
*/

	while(1)
 800165c:	e7fe      	b.n	800165c <main+0xd0>
 800165e:	bf00      	nop
 8001660:	080028dc 	.word	0x080028dc
 8001664:	40020000 	.word	0x40020000
 8001668:	080028a0 	.word	0x080028a0
 800166c:	080028a4 	.word	0x080028a4
 8001670:	080028c4 	.word	0x080028c4
 8001674:	080028c8 	.word	0x080028c8

08001678 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
  }

  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ffeb 	bl	80006a8 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001710:	605a      	str	r2, [r3, #4]
  return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f000 f846 	bl	800180c <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20020000 	.word	0x20020000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	200000c8 	.word	0x200000c8
 80017b4:	200000e0 	.word	0x200000e0

080017b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopForever+0xe>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopForever+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017e6:	f000 f817 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff fecf 	bl	800158c <main>

080017ee <LoopForever>:

LoopForever:
  b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   r0, =_estack
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017fc:	08002980 	.word	0x08002980
  ldr r2, =_sbss
 8001800:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001804:	200000dc 	.word	0x200000dc

08001808 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <__errno>:
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <__errno+0x8>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4d0d      	ldr	r5, [pc, #52]	; (8001850 <__libc_init_array+0x38>)
 800181c:	4c0d      	ldr	r4, [pc, #52]	; (8001854 <__libc_init_array+0x3c>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	2600      	movs	r6, #0
 8001824:	42a6      	cmp	r6, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	4d0b      	ldr	r5, [pc, #44]	; (8001858 <__libc_init_array+0x40>)
 800182a:	4c0c      	ldr	r4, [pc, #48]	; (800185c <__libc_init_array+0x44>)
 800182c:	f001 f82c 	bl	8002888 <_init>
 8001830:	1b64      	subs	r4, r4, r5
 8001832:	10a4      	asrs	r4, r4, #2
 8001834:	2600      	movs	r6, #0
 8001836:	42a6      	cmp	r6, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001840:	4798      	blx	r3
 8001842:	3601      	adds	r6, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f855 3b04 	ldr.w	r3, [r5], #4
 800184a:	4798      	blx	r3
 800184c:	3601      	adds	r6, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	08002978 	.word	0x08002978
 8001854:	08002978 	.word	0x08002978
 8001858:	08002978 	.word	0x08002978
 800185c:	0800297c 	.word	0x0800297c

08001860 <malloc>:
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <malloc+0xc>)
 8001862:	4601      	mov	r1, r0
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f000 b87d 	b.w	8001964 <_malloc_r>
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <free>:
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <free+0xc>)
 8001872:	4601      	mov	r1, r0
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f000 b80b 	b.w	8001890 <_free_r>
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <memset>:
 8001880:	4402      	add	r2, r0
 8001882:	4603      	mov	r3, r0
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <memset+0xa>
 8001888:	4770      	bx	lr
 800188a:	f803 1b01 	strb.w	r1, [r3], #1
 800188e:	e7f9      	b.n	8001884 <memset+0x4>

08001890 <_free_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4605      	mov	r5, r0
 8001894:	2900      	cmp	r1, #0
 8001896:	d041      	beq.n	800191c <_free_r+0x8c>
 8001898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800189c:	1f0c      	subs	r4, r1, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bfb8      	it	lt
 80018a2:	18e4      	addlt	r4, r4, r3
 80018a4:	f000 fc4c 	bl	8002140 <__malloc_lock>
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <_free_r+0x90>)
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	b933      	cbnz	r3, 80018bc <_free_r+0x2c>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	6014      	str	r4, [r2, #0]
 80018b2:	4628      	mov	r0, r5
 80018b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018b8:	f000 bc48 	b.w	800214c <__malloc_unlock>
 80018bc:	42a3      	cmp	r3, r4
 80018be:	d908      	bls.n	80018d2 <_free_r+0x42>
 80018c0:	6820      	ldr	r0, [r4, #0]
 80018c2:	1821      	adds	r1, r4, r0
 80018c4:	428b      	cmp	r3, r1
 80018c6:	bf01      	itttt	eq
 80018c8:	6819      	ldreq	r1, [r3, #0]
 80018ca:	685b      	ldreq	r3, [r3, #4]
 80018cc:	1809      	addeq	r1, r1, r0
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	e7ed      	b.n	80018ae <_free_r+0x1e>
 80018d2:	461a      	mov	r2, r3
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	b10b      	cbz	r3, 80018dc <_free_r+0x4c>
 80018d8:	42a3      	cmp	r3, r4
 80018da:	d9fa      	bls.n	80018d2 <_free_r+0x42>
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	1850      	adds	r0, r2, r1
 80018e0:	42a0      	cmp	r0, r4
 80018e2:	d10b      	bne.n	80018fc <_free_r+0x6c>
 80018e4:	6820      	ldr	r0, [r4, #0]
 80018e6:	4401      	add	r1, r0
 80018e8:	1850      	adds	r0, r2, r1
 80018ea:	4283      	cmp	r3, r0
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	d1e0      	bne.n	80018b2 <_free_r+0x22>
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	6053      	str	r3, [r2, #4]
 80018f6:	4401      	add	r1, r0
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	e7da      	b.n	80018b2 <_free_r+0x22>
 80018fc:	d902      	bls.n	8001904 <_free_r+0x74>
 80018fe:	230c      	movs	r3, #12
 8001900:	602b      	str	r3, [r5, #0]
 8001902:	e7d6      	b.n	80018b2 <_free_r+0x22>
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	1821      	adds	r1, r4, r0
 8001908:	428b      	cmp	r3, r1
 800190a:	bf04      	itt	eq
 800190c:	6819      	ldreq	r1, [r3, #0]
 800190e:	685b      	ldreq	r3, [r3, #4]
 8001910:	6063      	str	r3, [r4, #4]
 8001912:	bf04      	itt	eq
 8001914:	1809      	addeq	r1, r1, r0
 8001916:	6021      	streq	r1, [r4, #0]
 8001918:	6054      	str	r4, [r2, #4]
 800191a:	e7ca      	b.n	80018b2 <_free_r+0x22>
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	bf00      	nop
 8001920:	200000cc 	.word	0x200000cc

08001924 <sbrk_aligned>:
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4e0e      	ldr	r6, [pc, #56]	; (8001960 <sbrk_aligned+0x3c>)
 8001928:	460c      	mov	r4, r1
 800192a:	6831      	ldr	r1, [r6, #0]
 800192c:	4605      	mov	r5, r0
 800192e:	b911      	cbnz	r1, 8001936 <sbrk_aligned+0x12>
 8001930:	f000 f91a 	bl	8001b68 <_sbrk_r>
 8001934:	6030      	str	r0, [r6, #0]
 8001936:	4621      	mov	r1, r4
 8001938:	4628      	mov	r0, r5
 800193a:	f000 f915 	bl	8001b68 <_sbrk_r>
 800193e:	1c43      	adds	r3, r0, #1
 8001940:	d00a      	beq.n	8001958 <sbrk_aligned+0x34>
 8001942:	1cc4      	adds	r4, r0, #3
 8001944:	f024 0403 	bic.w	r4, r4, #3
 8001948:	42a0      	cmp	r0, r4
 800194a:	d007      	beq.n	800195c <sbrk_aligned+0x38>
 800194c:	1a21      	subs	r1, r4, r0
 800194e:	4628      	mov	r0, r5
 8001950:	f000 f90a 	bl	8001b68 <_sbrk_r>
 8001954:	3001      	adds	r0, #1
 8001956:	d101      	bne.n	800195c <sbrk_aligned+0x38>
 8001958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800195c:	4620      	mov	r0, r4
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	200000d0 	.word	0x200000d0

08001964 <_malloc_r>:
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	1ccd      	adds	r5, r1, #3
 800196a:	f025 0503 	bic.w	r5, r5, #3
 800196e:	3508      	adds	r5, #8
 8001970:	2d0c      	cmp	r5, #12
 8001972:	bf38      	it	cc
 8001974:	250c      	movcc	r5, #12
 8001976:	2d00      	cmp	r5, #0
 8001978:	4607      	mov	r7, r0
 800197a:	db01      	blt.n	8001980 <_malloc_r+0x1c>
 800197c:	42a9      	cmp	r1, r5
 800197e:	d905      	bls.n	800198c <_malloc_r+0x28>
 8001980:	230c      	movs	r3, #12
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	2600      	movs	r6, #0
 8001986:	4630      	mov	r0, r6
 8001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198c:	4e2e      	ldr	r6, [pc, #184]	; (8001a48 <_malloc_r+0xe4>)
 800198e:	f000 fbd7 	bl	8002140 <__malloc_lock>
 8001992:	6833      	ldr	r3, [r6, #0]
 8001994:	461c      	mov	r4, r3
 8001996:	bb34      	cbnz	r4, 80019e6 <_malloc_r+0x82>
 8001998:	4629      	mov	r1, r5
 800199a:	4638      	mov	r0, r7
 800199c:	f7ff ffc2 	bl	8001924 <sbrk_aligned>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	4604      	mov	r4, r0
 80019a4:	d14d      	bne.n	8001a42 <_malloc_r+0xde>
 80019a6:	6834      	ldr	r4, [r6, #0]
 80019a8:	4626      	mov	r6, r4
 80019aa:	2e00      	cmp	r6, #0
 80019ac:	d140      	bne.n	8001a30 <_malloc_r+0xcc>
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	4631      	mov	r1, r6
 80019b2:	4638      	mov	r0, r7
 80019b4:	eb04 0803 	add.w	r8, r4, r3
 80019b8:	f000 f8d6 	bl	8001b68 <_sbrk_r>
 80019bc:	4580      	cmp	r8, r0
 80019be:	d13a      	bne.n	8001a36 <_malloc_r+0xd2>
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	3503      	adds	r5, #3
 80019c4:	1a6d      	subs	r5, r5, r1
 80019c6:	f025 0503 	bic.w	r5, r5, #3
 80019ca:	3508      	adds	r5, #8
 80019cc:	2d0c      	cmp	r5, #12
 80019ce:	bf38      	it	cc
 80019d0:	250c      	movcc	r5, #12
 80019d2:	4629      	mov	r1, r5
 80019d4:	4638      	mov	r0, r7
 80019d6:	f7ff ffa5 	bl	8001924 <sbrk_aligned>
 80019da:	3001      	adds	r0, #1
 80019dc:	d02b      	beq.n	8001a36 <_malloc_r+0xd2>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	442b      	add	r3, r5
 80019e2:	6023      	str	r3, [r4, #0]
 80019e4:	e00e      	b.n	8001a04 <_malloc_r+0xa0>
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	1b52      	subs	r2, r2, r5
 80019ea:	d41e      	bmi.n	8001a2a <_malloc_r+0xc6>
 80019ec:	2a0b      	cmp	r2, #11
 80019ee:	d916      	bls.n	8001a1e <_malloc_r+0xba>
 80019f0:	1961      	adds	r1, r4, r5
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	6025      	str	r5, [r4, #0]
 80019f6:	bf18      	it	ne
 80019f8:	6059      	strne	r1, [r3, #4]
 80019fa:	6863      	ldr	r3, [r4, #4]
 80019fc:	bf08      	it	eq
 80019fe:	6031      	streq	r1, [r6, #0]
 8001a00:	5162      	str	r2, [r4, r5]
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	4638      	mov	r0, r7
 8001a06:	f104 060b 	add.w	r6, r4, #11
 8001a0a:	f000 fb9f 	bl	800214c <__malloc_unlock>
 8001a0e:	f026 0607 	bic.w	r6, r6, #7
 8001a12:	1d23      	adds	r3, r4, #4
 8001a14:	1af2      	subs	r2, r6, r3
 8001a16:	d0b6      	beq.n	8001986 <_malloc_r+0x22>
 8001a18:	1b9b      	subs	r3, r3, r6
 8001a1a:	50a3      	str	r3, [r4, r2]
 8001a1c:	e7b3      	b.n	8001986 <_malloc_r+0x22>
 8001a1e:	6862      	ldr	r2, [r4, #4]
 8001a20:	42a3      	cmp	r3, r4
 8001a22:	bf0c      	ite	eq
 8001a24:	6032      	streq	r2, [r6, #0]
 8001a26:	605a      	strne	r2, [r3, #4]
 8001a28:	e7ec      	b.n	8001a04 <_malloc_r+0xa0>
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	6864      	ldr	r4, [r4, #4]
 8001a2e:	e7b2      	b.n	8001996 <_malloc_r+0x32>
 8001a30:	4634      	mov	r4, r6
 8001a32:	6876      	ldr	r6, [r6, #4]
 8001a34:	e7b9      	b.n	80019aa <_malloc_r+0x46>
 8001a36:	230c      	movs	r3, #12
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	f000 fb86 	bl	800214c <__malloc_unlock>
 8001a40:	e7a1      	b.n	8001986 <_malloc_r+0x22>
 8001a42:	6025      	str	r5, [r4, #0]
 8001a44:	e7de      	b.n	8001a04 <_malloc_r+0xa0>
 8001a46:	bf00      	nop
 8001a48:	200000cc 	.word	0x200000cc

08001a4c <iprintf>:
 8001a4c:	b40f      	push	{r0, r1, r2, r3}
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <iprintf+0x2c>)
 8001a50:	b513      	push	{r0, r1, r4, lr}
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	b124      	cbz	r4, 8001a60 <iprintf+0x14>
 8001a56:	69a3      	ldr	r3, [r4, #24]
 8001a58:	b913      	cbnz	r3, 8001a60 <iprintf+0x14>
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f000 fa6a 	bl	8001f34 <__sinit>
 8001a60:	ab05      	add	r3, sp, #20
 8001a62:	9a04      	ldr	r2, [sp, #16]
 8001a64:	68a1      	ldr	r1, [r4, #8]
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f000 fb9d 	bl	80021a8 <_vfiprintf_r>
 8001a6e:	b002      	add	sp, #8
 8001a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a74:	b004      	add	sp, #16
 8001a76:	4770      	bx	lr
 8001a78:	20000000 	.word	0x20000000

08001a7c <_puts_r>:
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	460e      	mov	r6, r1
 8001a80:	4605      	mov	r5, r0
 8001a82:	b118      	cbz	r0, 8001a8c <_puts_r+0x10>
 8001a84:	6983      	ldr	r3, [r0, #24]
 8001a86:	b90b      	cbnz	r3, 8001a8c <_puts_r+0x10>
 8001a88:	f000 fa54 	bl	8001f34 <__sinit>
 8001a8c:	69ab      	ldr	r3, [r5, #24]
 8001a8e:	68ac      	ldr	r4, [r5, #8]
 8001a90:	b913      	cbnz	r3, 8001a98 <_puts_r+0x1c>
 8001a92:	4628      	mov	r0, r5
 8001a94:	f000 fa4e 	bl	8001f34 <__sinit>
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <_puts_r+0xd0>)
 8001a9a:	429c      	cmp	r4, r3
 8001a9c:	d120      	bne.n	8001ae0 <_puts_r+0x64>
 8001a9e:	686c      	ldr	r4, [r5, #4]
 8001aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa2:	07db      	lsls	r3, r3, #31
 8001aa4:	d405      	bmi.n	8001ab2 <_puts_r+0x36>
 8001aa6:	89a3      	ldrh	r3, [r4, #12]
 8001aa8:	0598      	lsls	r0, r3, #22
 8001aaa:	d402      	bmi.n	8001ab2 <_puts_r+0x36>
 8001aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aae:	f000 fadf 	bl	8002070 <__retarget_lock_acquire_recursive>
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	0719      	lsls	r1, r3, #28
 8001ab6:	d51d      	bpl.n	8001af4 <_puts_r+0x78>
 8001ab8:	6923      	ldr	r3, [r4, #16]
 8001aba:	b1db      	cbz	r3, 8001af4 <_puts_r+0x78>
 8001abc:	3e01      	subs	r6, #1
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60a3      	str	r3, [r4, #8]
 8001ac8:	bb39      	cbnz	r1, 8001b1a <_puts_r+0x9e>
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da38      	bge.n	8001b40 <_puts_r+0xc4>
 8001ace:	4622      	mov	r2, r4
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f000 f858 	bl	8001b88 <__swbuf_r>
 8001ad8:	3001      	adds	r0, #1
 8001ada:	d011      	beq.n	8001b00 <_puts_r+0x84>
 8001adc:	250a      	movs	r5, #10
 8001ade:	e011      	b.n	8001b04 <_puts_r+0x88>
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <_puts_r+0xd4>)
 8001ae2:	429c      	cmp	r4, r3
 8001ae4:	d101      	bne.n	8001aea <_puts_r+0x6e>
 8001ae6:	68ac      	ldr	r4, [r5, #8]
 8001ae8:	e7da      	b.n	8001aa0 <_puts_r+0x24>
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <_puts_r+0xd8>)
 8001aec:	429c      	cmp	r4, r3
 8001aee:	bf08      	it	eq
 8001af0:	68ec      	ldreq	r4, [r5, #12]
 8001af2:	e7d5      	b.n	8001aa0 <_puts_r+0x24>
 8001af4:	4621      	mov	r1, r4
 8001af6:	4628      	mov	r0, r5
 8001af8:	f000 f898 	bl	8001c2c <__swsetup_r>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d0dd      	beq.n	8001abc <_puts_r+0x40>
 8001b00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b06:	07da      	lsls	r2, r3, #31
 8001b08:	d405      	bmi.n	8001b16 <_puts_r+0x9a>
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	059b      	lsls	r3, r3, #22
 8001b0e:	d402      	bmi.n	8001b16 <_puts_r+0x9a>
 8001b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b12:	f000 faae 	bl	8002072 <__retarget_lock_release_recursive>
 8001b16:	4628      	mov	r0, r5
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da04      	bge.n	8001b28 <_puts_r+0xac>
 8001b1e:	69a2      	ldr	r2, [r4, #24]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dc06      	bgt.n	8001b32 <_puts_r+0xb6>
 8001b24:	290a      	cmp	r1, #10
 8001b26:	d004      	beq.n	8001b32 <_puts_r+0xb6>
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	6022      	str	r2, [r4, #0]
 8001b2e:	7019      	strb	r1, [r3, #0]
 8001b30:	e7c5      	b.n	8001abe <_puts_r+0x42>
 8001b32:	4622      	mov	r2, r4
 8001b34:	4628      	mov	r0, r5
 8001b36:	f000 f827 	bl	8001b88 <__swbuf_r>
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d1bf      	bne.n	8001abe <_puts_r+0x42>
 8001b3e:	e7df      	b.n	8001b00 <_puts_r+0x84>
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	250a      	movs	r5, #10
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	6022      	str	r2, [r4, #0]
 8001b48:	701d      	strb	r5, [r3, #0]
 8001b4a:	e7db      	b.n	8001b04 <_puts_r+0x88>
 8001b4c:	08002904 	.word	0x08002904
 8001b50:	08002924 	.word	0x08002924
 8001b54:	080028e4 	.word	0x080028e4

08001b58 <puts>:
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <puts+0xc>)
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	f7ff bf8d 	b.w	8001a7c <_puts_r>
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <_sbrk_r>:
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	4d06      	ldr	r5, [pc, #24]	; (8001b84 <_sbrk_r+0x1c>)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	602b      	str	r3, [r5, #0]
 8001b74:	f7ff fdea 	bl	800174c <_sbrk>
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	d102      	bne.n	8001b82 <_sbrk_r+0x1a>
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	b103      	cbz	r3, 8001b82 <_sbrk_r+0x1a>
 8001b80:	6023      	str	r3, [r4, #0]
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
 8001b84:	200000d8 	.word	0x200000d8

08001b88 <__swbuf_r>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	460e      	mov	r6, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	4605      	mov	r5, r0
 8001b90:	b118      	cbz	r0, 8001b9a <__swbuf_r+0x12>
 8001b92:	6983      	ldr	r3, [r0, #24]
 8001b94:	b90b      	cbnz	r3, 8001b9a <__swbuf_r+0x12>
 8001b96:	f000 f9cd 	bl	8001f34 <__sinit>
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <__swbuf_r+0x98>)
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	d12b      	bne.n	8001bf8 <__swbuf_r+0x70>
 8001ba0:	686c      	ldr	r4, [r5, #4]
 8001ba2:	69a3      	ldr	r3, [r4, #24]
 8001ba4:	60a3      	str	r3, [r4, #8]
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	071a      	lsls	r2, r3, #28
 8001baa:	d52f      	bpl.n	8001c0c <__swbuf_r+0x84>
 8001bac:	6923      	ldr	r3, [r4, #16]
 8001bae:	b36b      	cbz	r3, 8001c0c <__swbuf_r+0x84>
 8001bb0:	6923      	ldr	r3, [r4, #16]
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	1ac0      	subs	r0, r0, r3
 8001bb6:	6963      	ldr	r3, [r4, #20]
 8001bb8:	b2f6      	uxtb	r6, r6
 8001bba:	4283      	cmp	r3, r0
 8001bbc:	4637      	mov	r7, r6
 8001bbe:	dc04      	bgt.n	8001bca <__swbuf_r+0x42>
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f000 f922 	bl	8001e0c <_fflush_r>
 8001bc8:	bb30      	cbnz	r0, 8001c18 <__swbuf_r+0x90>
 8001bca:	68a3      	ldr	r3, [r4, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60a3      	str	r3, [r4, #8]
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	6022      	str	r2, [r4, #0]
 8001bd6:	701e      	strb	r6, [r3, #0]
 8001bd8:	6963      	ldr	r3, [r4, #20]
 8001bda:	3001      	adds	r0, #1
 8001bdc:	4283      	cmp	r3, r0
 8001bde:	d004      	beq.n	8001bea <__swbuf_r+0x62>
 8001be0:	89a3      	ldrh	r3, [r4, #12]
 8001be2:	07db      	lsls	r3, r3, #31
 8001be4:	d506      	bpl.n	8001bf4 <__swbuf_r+0x6c>
 8001be6:	2e0a      	cmp	r6, #10
 8001be8:	d104      	bne.n	8001bf4 <__swbuf_r+0x6c>
 8001bea:	4621      	mov	r1, r4
 8001bec:	4628      	mov	r0, r5
 8001bee:	f000 f90d 	bl	8001e0c <_fflush_r>
 8001bf2:	b988      	cbnz	r0, 8001c18 <__swbuf_r+0x90>
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <__swbuf_r+0x9c>)
 8001bfa:	429c      	cmp	r4, r3
 8001bfc:	d101      	bne.n	8001c02 <__swbuf_r+0x7a>
 8001bfe:	68ac      	ldr	r4, [r5, #8]
 8001c00:	e7cf      	b.n	8001ba2 <__swbuf_r+0x1a>
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <__swbuf_r+0xa0>)
 8001c04:	429c      	cmp	r4, r3
 8001c06:	bf08      	it	eq
 8001c08:	68ec      	ldreq	r4, [r5, #12]
 8001c0a:	e7ca      	b.n	8001ba2 <__swbuf_r+0x1a>
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f000 f80c 	bl	8001c2c <__swsetup_r>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d0cb      	beq.n	8001bb0 <__swbuf_r+0x28>
 8001c18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c1c:	e7ea      	b.n	8001bf4 <__swbuf_r+0x6c>
 8001c1e:	bf00      	nop
 8001c20:	08002904 	.word	0x08002904
 8001c24:	08002924 	.word	0x08002924
 8001c28:	080028e4 	.word	0x080028e4

08001c2c <__swsetup_r>:
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <__swsetup_r+0xcc>)
 8001c2e:	b570      	push	{r4, r5, r6, lr}
 8001c30:	681d      	ldr	r5, [r3, #0]
 8001c32:	4606      	mov	r6, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	b125      	cbz	r5, 8001c42 <__swsetup_r+0x16>
 8001c38:	69ab      	ldr	r3, [r5, #24]
 8001c3a:	b913      	cbnz	r3, 8001c42 <__swsetup_r+0x16>
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f979 	bl	8001f34 <__sinit>
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <__swsetup_r+0xd0>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	d10f      	bne.n	8001c68 <__swsetup_r+0x3c>
 8001c48:	686c      	ldr	r4, [r5, #4]
 8001c4a:	89a3      	ldrh	r3, [r4, #12]
 8001c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c50:	0719      	lsls	r1, r3, #28
 8001c52:	d42c      	bmi.n	8001cae <__swsetup_r+0x82>
 8001c54:	06dd      	lsls	r5, r3, #27
 8001c56:	d411      	bmi.n	8001c7c <__swsetup_r+0x50>
 8001c58:	2309      	movs	r3, #9
 8001c5a:	6033      	str	r3, [r6, #0]
 8001c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c60:	81a3      	strh	r3, [r4, #12]
 8001c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c66:	e03e      	b.n	8001ce6 <__swsetup_r+0xba>
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <__swsetup_r+0xd4>)
 8001c6a:	429c      	cmp	r4, r3
 8001c6c:	d101      	bne.n	8001c72 <__swsetup_r+0x46>
 8001c6e:	68ac      	ldr	r4, [r5, #8]
 8001c70:	e7eb      	b.n	8001c4a <__swsetup_r+0x1e>
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <__swsetup_r+0xd8>)
 8001c74:	429c      	cmp	r4, r3
 8001c76:	bf08      	it	eq
 8001c78:	68ec      	ldreq	r4, [r5, #12]
 8001c7a:	e7e6      	b.n	8001c4a <__swsetup_r+0x1e>
 8001c7c:	0758      	lsls	r0, r3, #29
 8001c7e:	d512      	bpl.n	8001ca6 <__swsetup_r+0x7a>
 8001c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c82:	b141      	cbz	r1, 8001c96 <__swsetup_r+0x6a>
 8001c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c88:	4299      	cmp	r1, r3
 8001c8a:	d002      	beq.n	8001c92 <__swsetup_r+0x66>
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f7ff fdff 	bl	8001890 <_free_r>
 8001c92:	2300      	movs	r3, #0
 8001c94:	6363      	str	r3, [r4, #52]	; 0x34
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6063      	str	r3, [r4, #4]
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	6023      	str	r3, [r4, #0]
 8001ca6:	89a3      	ldrh	r3, [r4, #12]
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	81a3      	strh	r3, [r4, #12]
 8001cae:	6923      	ldr	r3, [r4, #16]
 8001cb0:	b94b      	cbnz	r3, 8001cc6 <__swsetup_r+0x9a>
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbc:	d003      	beq.n	8001cc6 <__swsetup_r+0x9a>
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f000 f9fd 	bl	80020c0 <__smakebuf_r>
 8001cc6:	89a0      	ldrh	r0, [r4, #12]
 8001cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ccc:	f010 0301 	ands.w	r3, r0, #1
 8001cd0:	d00a      	beq.n	8001ce8 <__swsetup_r+0xbc>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60a3      	str	r3, [r4, #8]
 8001cd6:	6963      	ldr	r3, [r4, #20]
 8001cd8:	425b      	negs	r3, r3
 8001cda:	61a3      	str	r3, [r4, #24]
 8001cdc:	6923      	ldr	r3, [r4, #16]
 8001cde:	b943      	cbnz	r3, 8001cf2 <__swsetup_r+0xc6>
 8001ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ce4:	d1ba      	bne.n	8001c5c <__swsetup_r+0x30>
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	0781      	lsls	r1, r0, #30
 8001cea:	bf58      	it	pl
 8001cec:	6963      	ldrpl	r3, [r4, #20]
 8001cee:	60a3      	str	r3, [r4, #8]
 8001cf0:	e7f4      	b.n	8001cdc <__swsetup_r+0xb0>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e7f7      	b.n	8001ce6 <__swsetup_r+0xba>
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	08002904 	.word	0x08002904
 8001d00:	08002924 	.word	0x08002924
 8001d04:	080028e4 	.word	0x080028e4

08001d08 <__sflush_r>:
 8001d08:	898a      	ldrh	r2, [r1, #12]
 8001d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0c:	4605      	mov	r5, r0
 8001d0e:	0710      	lsls	r0, r2, #28
 8001d10:	460c      	mov	r4, r1
 8001d12:	d457      	bmi.n	8001dc4 <__sflush_r+0xbc>
 8001d14:	684b      	ldr	r3, [r1, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dc04      	bgt.n	8001d24 <__sflush_r+0x1c>
 8001d1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dc01      	bgt.n	8001d24 <__sflush_r+0x1c>
 8001d20:	2000      	movs	r0, #0
 8001d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d26:	2e00      	cmp	r6, #0
 8001d28:	d0fa      	beq.n	8001d20 <__sflush_r+0x18>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d30:	682f      	ldr	r7, [r5, #0]
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	d032      	beq.n	8001d9c <__sflush_r+0x94>
 8001d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	d505      	bpl.n	8001d4a <__sflush_r+0x42>
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	1ac0      	subs	r0, r0, r3
 8001d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d44:	b10b      	cbz	r3, 8001d4a <__sflush_r+0x42>
 8001d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d48:	1ac0      	subs	r0, r0, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d50:	6a21      	ldr	r1, [r4, #32]
 8001d52:	4628      	mov	r0, r5
 8001d54:	47b0      	blx	r6
 8001d56:	1c43      	adds	r3, r0, #1
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	d106      	bne.n	8001d6a <__sflush_r+0x62>
 8001d5c:	6829      	ldr	r1, [r5, #0]
 8001d5e:	291d      	cmp	r1, #29
 8001d60:	d82c      	bhi.n	8001dbc <__sflush_r+0xb4>
 8001d62:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <__sflush_r+0x100>)
 8001d64:	40ca      	lsrs	r2, r1
 8001d66:	07d6      	lsls	r6, r2, #31
 8001d68:	d528      	bpl.n	8001dbc <__sflush_r+0xb4>
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6062      	str	r2, [r4, #4]
 8001d6e:	04d9      	lsls	r1, r3, #19
 8001d70:	6922      	ldr	r2, [r4, #16]
 8001d72:	6022      	str	r2, [r4, #0]
 8001d74:	d504      	bpl.n	8001d80 <__sflush_r+0x78>
 8001d76:	1c42      	adds	r2, r0, #1
 8001d78:	d101      	bne.n	8001d7e <__sflush_r+0x76>
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	b903      	cbnz	r3, 8001d80 <__sflush_r+0x78>
 8001d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8001d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d82:	602f      	str	r7, [r5, #0]
 8001d84:	2900      	cmp	r1, #0
 8001d86:	d0cb      	beq.n	8001d20 <__sflush_r+0x18>
 8001d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d8c:	4299      	cmp	r1, r3
 8001d8e:	d002      	beq.n	8001d96 <__sflush_r+0x8e>
 8001d90:	4628      	mov	r0, r5
 8001d92:	f7ff fd7d 	bl	8001890 <_free_r>
 8001d96:	2000      	movs	r0, #0
 8001d98:	6360      	str	r0, [r4, #52]	; 0x34
 8001d9a:	e7c2      	b.n	8001d22 <__sflush_r+0x1a>
 8001d9c:	6a21      	ldr	r1, [r4, #32]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4628      	mov	r0, r5
 8001da2:	47b0      	blx	r6
 8001da4:	1c41      	adds	r1, r0, #1
 8001da6:	d1c7      	bne.n	8001d38 <__sflush_r+0x30>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0c4      	beq.n	8001d38 <__sflush_r+0x30>
 8001dae:	2b1d      	cmp	r3, #29
 8001db0:	d001      	beq.n	8001db6 <__sflush_r+0xae>
 8001db2:	2b16      	cmp	r3, #22
 8001db4:	d101      	bne.n	8001dba <__sflush_r+0xb2>
 8001db6:	602f      	str	r7, [r5, #0]
 8001db8:	e7b2      	b.n	8001d20 <__sflush_r+0x18>
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc0:	81a3      	strh	r3, [r4, #12]
 8001dc2:	e7ae      	b.n	8001d22 <__sflush_r+0x1a>
 8001dc4:	690f      	ldr	r7, [r1, #16]
 8001dc6:	2f00      	cmp	r7, #0
 8001dc8:	d0aa      	beq.n	8001d20 <__sflush_r+0x18>
 8001dca:	0793      	lsls	r3, r2, #30
 8001dcc:	680e      	ldr	r6, [r1, #0]
 8001dce:	bf08      	it	eq
 8001dd0:	694b      	ldreq	r3, [r1, #20]
 8001dd2:	600f      	str	r7, [r1, #0]
 8001dd4:	bf18      	it	ne
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	1bf6      	subs	r6, r6, r7
 8001dda:	608b      	str	r3, [r1, #8]
 8001ddc:	2e00      	cmp	r6, #0
 8001dde:	dd9f      	ble.n	8001d20 <__sflush_r+0x18>
 8001de0:	6a21      	ldr	r1, [r4, #32]
 8001de2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001de6:	4633      	mov	r3, r6
 8001de8:	463a      	mov	r2, r7
 8001dea:	4628      	mov	r0, r5
 8001dec:	47e0      	blx	ip
 8001dee:	2800      	cmp	r0, #0
 8001df0:	dc06      	bgt.n	8001e00 <__sflush_r+0xf8>
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df8:	81a3      	strh	r3, [r4, #12]
 8001dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfe:	e790      	b.n	8001d22 <__sflush_r+0x1a>
 8001e00:	4407      	add	r7, r0
 8001e02:	1a36      	subs	r6, r6, r0
 8001e04:	e7ea      	b.n	8001ddc <__sflush_r+0xd4>
 8001e06:	bf00      	nop
 8001e08:	20400001 	.word	0x20400001

08001e0c <_fflush_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	690b      	ldr	r3, [r1, #16]
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	b913      	cbnz	r3, 8001e1c <_fflush_r+0x10>
 8001e16:	2500      	movs	r5, #0
 8001e18:	4628      	mov	r0, r5
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	b118      	cbz	r0, 8001e26 <_fflush_r+0x1a>
 8001e1e:	6983      	ldr	r3, [r0, #24]
 8001e20:	b90b      	cbnz	r3, 8001e26 <_fflush_r+0x1a>
 8001e22:	f000 f887 	bl	8001f34 <__sinit>
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <_fflush_r+0x6c>)
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	d11b      	bne.n	8001e64 <_fflush_r+0x58>
 8001e2c:	686c      	ldr	r4, [r5, #4]
 8001e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <_fflush_r+0xa>
 8001e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e38:	07d0      	lsls	r0, r2, #31
 8001e3a:	d404      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e3c:	0599      	lsls	r1, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e42:	f000 f915 	bl	8002070 <__retarget_lock_acquire_recursive>
 8001e46:	4628      	mov	r0, r5
 8001e48:	4621      	mov	r1, r4
 8001e4a:	f7ff ff5d 	bl	8001d08 <__sflush_r>
 8001e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e50:	07da      	lsls	r2, r3, #31
 8001e52:	4605      	mov	r5, r0
 8001e54:	d4e0      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	059b      	lsls	r3, r3, #22
 8001e5a:	d4dd      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e5e:	f000 f908 	bl	8002072 <__retarget_lock_release_recursive>
 8001e62:	e7d9      	b.n	8001e18 <_fflush_r+0xc>
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_fflush_r+0x70>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	d101      	bne.n	8001e6e <_fflush_r+0x62>
 8001e6a:	68ac      	ldr	r4, [r5, #8]
 8001e6c:	e7df      	b.n	8001e2e <_fflush_r+0x22>
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <_fflush_r+0x74>)
 8001e70:	429c      	cmp	r4, r3
 8001e72:	bf08      	it	eq
 8001e74:	68ec      	ldreq	r4, [r5, #12]
 8001e76:	e7da      	b.n	8001e2e <_fflush_r+0x22>
 8001e78:	08002904 	.word	0x08002904
 8001e7c:	08002924 	.word	0x08002924
 8001e80:	080028e4 	.word	0x080028e4

08001e84 <std>:
 8001e84:	2300      	movs	r3, #0
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
 8001e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e92:	6083      	str	r3, [r0, #8]
 8001e94:	8181      	strh	r1, [r0, #12]
 8001e96:	6643      	str	r3, [r0, #100]	; 0x64
 8001e98:	81c2      	strh	r2, [r0, #14]
 8001e9a:	6183      	str	r3, [r0, #24]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	305c      	adds	r0, #92	; 0x5c
 8001ea2:	f7ff fced 	bl	8001880 <memset>
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <std+0x38>)
 8001ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x3c>)
 8001eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std+0x40>)
 8001eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <std+0x44>)
 8001eb4:	6224      	str	r4, [r4, #32]
 8001eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	08002731 	.word	0x08002731
 8001ec0:	08002753 	.word	0x08002753
 8001ec4:	0800278b 	.word	0x0800278b
 8001ec8:	080027af 	.word	0x080027af

08001ecc <_cleanup_r>:
 8001ecc:	4901      	ldr	r1, [pc, #4]	; (8001ed4 <_cleanup_r+0x8>)
 8001ece:	f000 b8af 	b.w	8002030 <_fwalk_reent>
 8001ed2:	bf00      	nop
 8001ed4:	08001e0d 	.word	0x08001e0d

08001ed8 <__sfmoreglue>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2268      	movs	r2, #104	; 0x68
 8001edc:	1e4d      	subs	r5, r1, #1
 8001ede:	4355      	muls	r5, r2
 8001ee0:	460e      	mov	r6, r1
 8001ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ee6:	f7ff fd3d 	bl	8001964 <_malloc_r>
 8001eea:	4604      	mov	r4, r0
 8001eec:	b140      	cbz	r0, 8001f00 <__sfmoreglue+0x28>
 8001eee:	2100      	movs	r1, #0
 8001ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ef4:	300c      	adds	r0, #12
 8001ef6:	60a0      	str	r0, [r4, #8]
 8001ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001efc:	f7ff fcc0 	bl	8001880 <memset>
 8001f00:	4620      	mov	r0, r4
 8001f02:	bd70      	pop	{r4, r5, r6, pc}

08001f04 <__sfp_lock_acquire>:
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <__sfp_lock_acquire+0x8>)
 8001f06:	f000 b8b3 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8001f0a:	bf00      	nop
 8001f0c:	200000d5 	.word	0x200000d5

08001f10 <__sfp_lock_release>:
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <__sfp_lock_release+0x8>)
 8001f12:	f000 b8ae 	b.w	8002072 <__retarget_lock_release_recursive>
 8001f16:	bf00      	nop
 8001f18:	200000d5 	.word	0x200000d5

08001f1c <__sinit_lock_acquire>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <__sinit_lock_acquire+0x8>)
 8001f1e:	f000 b8a7 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8001f22:	bf00      	nop
 8001f24:	200000d6 	.word	0x200000d6

08001f28 <__sinit_lock_release>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__sinit_lock_release+0x8>)
 8001f2a:	f000 b8a2 	b.w	8002072 <__retarget_lock_release_recursive>
 8001f2e:	bf00      	nop
 8001f30:	200000d6 	.word	0x200000d6

08001f34 <__sinit>:
 8001f34:	b510      	push	{r4, lr}
 8001f36:	4604      	mov	r4, r0
 8001f38:	f7ff fff0 	bl	8001f1c <__sinit_lock_acquire>
 8001f3c:	69a3      	ldr	r3, [r4, #24]
 8001f3e:	b11b      	cbz	r3, 8001f48 <__sinit+0x14>
 8001f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f44:	f7ff bff0 	b.w	8001f28 <__sinit_lock_release>
 8001f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <__sinit+0x68>)
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <__sinit+0x6c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	bf04      	itt	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	61a3      	streq	r3, [r4, #24]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f000 f820 	bl	8001fa4 <__sfp>
 8001f64:	6060      	str	r0, [r4, #4]
 8001f66:	4620      	mov	r0, r4
 8001f68:	f000 f81c 	bl	8001fa4 <__sfp>
 8001f6c:	60a0      	str	r0, [r4, #8]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 f818 	bl	8001fa4 <__sfp>
 8001f74:	2200      	movs	r2, #0
 8001f76:	60e0      	str	r0, [r4, #12]
 8001f78:	2104      	movs	r1, #4
 8001f7a:	6860      	ldr	r0, [r4, #4]
 8001f7c:	f7ff ff82 	bl	8001e84 <std>
 8001f80:	68a0      	ldr	r0, [r4, #8]
 8001f82:	2201      	movs	r2, #1
 8001f84:	2109      	movs	r1, #9
 8001f86:	f7ff ff7d 	bl	8001e84 <std>
 8001f8a:	68e0      	ldr	r0, [r4, #12]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	2112      	movs	r1, #18
 8001f90:	f7ff ff78 	bl	8001e84 <std>
 8001f94:	2301      	movs	r3, #1
 8001f96:	61a3      	str	r3, [r4, #24]
 8001f98:	e7d2      	b.n	8001f40 <__sinit+0xc>
 8001f9a:	bf00      	nop
 8001f9c:	080028e0 	.word	0x080028e0
 8001fa0:	08001ecd 	.word	0x08001ecd

08001fa4 <__sfp>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	4607      	mov	r7, r0
 8001fa8:	f7ff ffac 	bl	8001f04 <__sfp_lock_acquire>
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <__sfp+0x84>)
 8001fae:	681e      	ldr	r6, [r3, #0]
 8001fb0:	69b3      	ldr	r3, [r6, #24]
 8001fb2:	b913      	cbnz	r3, 8001fba <__sfp+0x16>
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f7ff ffbd 	bl	8001f34 <__sinit>
 8001fba:	3648      	adds	r6, #72	; 0x48
 8001fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	d503      	bpl.n	8001fcc <__sfp+0x28>
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	b30b      	cbz	r3, 800200c <__sfp+0x68>
 8001fc8:	6836      	ldr	r6, [r6, #0]
 8001fca:	e7f7      	b.n	8001fbc <__sfp+0x18>
 8001fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fd0:	b9d5      	cbnz	r5, 8002008 <__sfp+0x64>
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <__sfp+0x88>)
 8001fd4:	60e3      	str	r3, [r4, #12]
 8001fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fda:	6665      	str	r5, [r4, #100]	; 0x64
 8001fdc:	f000 f847 	bl	800206e <__retarget_lock_init_recursive>
 8001fe0:	f7ff ff96 	bl	8001f10 <__sfp_lock_release>
 8001fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fec:	6025      	str	r5, [r4, #0]
 8001fee:	61a5      	str	r5, [r4, #24]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ff8:	f7ff fc42 	bl	8001880 <memset>
 8001ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002004:	4620      	mov	r0, r4
 8002006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002008:	3468      	adds	r4, #104	; 0x68
 800200a:	e7d9      	b.n	8001fc0 <__sfp+0x1c>
 800200c:	2104      	movs	r1, #4
 800200e:	4638      	mov	r0, r7
 8002010:	f7ff ff62 	bl	8001ed8 <__sfmoreglue>
 8002014:	4604      	mov	r4, r0
 8002016:	6030      	str	r0, [r6, #0]
 8002018:	2800      	cmp	r0, #0
 800201a:	d1d5      	bne.n	8001fc8 <__sfp+0x24>
 800201c:	f7ff ff78 	bl	8001f10 <__sfp_lock_release>
 8002020:	230c      	movs	r3, #12
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	e7ee      	b.n	8002004 <__sfp+0x60>
 8002026:	bf00      	nop
 8002028:	080028e0 	.word	0x080028e0
 800202c:	ffff0001 	.word	0xffff0001

08002030 <_fwalk_reent>:
 8002030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002034:	4606      	mov	r6, r0
 8002036:	4688      	mov	r8, r1
 8002038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800203c:	2700      	movs	r7, #0
 800203e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002042:	f1b9 0901 	subs.w	r9, r9, #1
 8002046:	d505      	bpl.n	8002054 <_fwalk_reent+0x24>
 8002048:	6824      	ldr	r4, [r4, #0]
 800204a:	2c00      	cmp	r4, #0
 800204c:	d1f7      	bne.n	800203e <_fwalk_reent+0xe>
 800204e:	4638      	mov	r0, r7
 8002050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002054:	89ab      	ldrh	r3, [r5, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d907      	bls.n	800206a <_fwalk_reent+0x3a>
 800205a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800205e:	3301      	adds	r3, #1
 8002060:	d003      	beq.n	800206a <_fwalk_reent+0x3a>
 8002062:	4629      	mov	r1, r5
 8002064:	4630      	mov	r0, r6
 8002066:	47c0      	blx	r8
 8002068:	4307      	orrs	r7, r0
 800206a:	3568      	adds	r5, #104	; 0x68
 800206c:	e7e9      	b.n	8002042 <_fwalk_reent+0x12>

0800206e <__retarget_lock_init_recursive>:
 800206e:	4770      	bx	lr

08002070 <__retarget_lock_acquire_recursive>:
 8002070:	4770      	bx	lr

08002072 <__retarget_lock_release_recursive>:
 8002072:	4770      	bx	lr

08002074 <__swhatbuf_r>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	460e      	mov	r6, r1
 8002078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207c:	2900      	cmp	r1, #0
 800207e:	b096      	sub	sp, #88	; 0x58
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
 8002084:	da08      	bge.n	8002098 <__swhatbuf_r+0x24>
 8002086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	602a      	str	r2, [r5, #0]
 800208e:	061a      	lsls	r2, r3, #24
 8002090:	d410      	bmi.n	80020b4 <__swhatbuf_r+0x40>
 8002092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002096:	e00e      	b.n	80020b6 <__swhatbuf_r+0x42>
 8002098:	466a      	mov	r2, sp
 800209a:	f000 fbaf 	bl	80027fc <_fstat_r>
 800209e:	2800      	cmp	r0, #0
 80020a0:	dbf1      	blt.n	8002086 <__swhatbuf_r+0x12>
 80020a2:	9a01      	ldr	r2, [sp, #4]
 80020a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020ac:	425a      	negs	r2, r3
 80020ae:	415a      	adcs	r2, r3
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	e7ee      	b.n	8002092 <__swhatbuf_r+0x1e>
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	2000      	movs	r0, #0
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	b016      	add	sp, #88	; 0x58
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080020c0 <__smakebuf_r>:
 80020c0:	898b      	ldrh	r3, [r1, #12]
 80020c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020c4:	079d      	lsls	r5, r3, #30
 80020c6:	4606      	mov	r6, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	d507      	bpl.n	80020dc <__smakebuf_r+0x1c>
 80020cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	6123      	str	r3, [r4, #16]
 80020d4:	2301      	movs	r3, #1
 80020d6:	6163      	str	r3, [r4, #20]
 80020d8:	b002      	add	sp, #8
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	ab01      	add	r3, sp, #4
 80020de:	466a      	mov	r2, sp
 80020e0:	f7ff ffc8 	bl	8002074 <__swhatbuf_r>
 80020e4:	9900      	ldr	r1, [sp, #0]
 80020e6:	4605      	mov	r5, r0
 80020e8:	4630      	mov	r0, r6
 80020ea:	f7ff fc3b 	bl	8001964 <_malloc_r>
 80020ee:	b948      	cbnz	r0, 8002104 <__smakebuf_r+0x44>
 80020f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020f4:	059a      	lsls	r2, r3, #22
 80020f6:	d4ef      	bmi.n	80020d8 <__smakebuf_r+0x18>
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	81a3      	strh	r3, [r4, #12]
 8002102:	e7e3      	b.n	80020cc <__smakebuf_r+0xc>
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <__smakebuf_r+0x7c>)
 8002106:	62b3      	str	r3, [r6, #40]	; 0x28
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	6020      	str	r0, [r4, #0]
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	81a3      	strh	r3, [r4, #12]
 8002112:	9b00      	ldr	r3, [sp, #0]
 8002114:	6163      	str	r3, [r4, #20]
 8002116:	9b01      	ldr	r3, [sp, #4]
 8002118:	6120      	str	r0, [r4, #16]
 800211a:	b15b      	cbz	r3, 8002134 <__smakebuf_r+0x74>
 800211c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002120:	4630      	mov	r0, r6
 8002122:	f000 fb7d 	bl	8002820 <_isatty_r>
 8002126:	b128      	cbz	r0, 8002134 <__smakebuf_r+0x74>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	89a0      	ldrh	r0, [r4, #12]
 8002136:	4305      	orrs	r5, r0
 8002138:	81a5      	strh	r5, [r4, #12]
 800213a:	e7cd      	b.n	80020d8 <__smakebuf_r+0x18>
 800213c:	08001ecd 	.word	0x08001ecd

08002140 <__malloc_lock>:
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <__malloc_lock+0x8>)
 8002142:	f7ff bf95 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8002146:	bf00      	nop
 8002148:	200000d4 	.word	0x200000d4

0800214c <__malloc_unlock>:
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <__malloc_unlock+0x8>)
 800214e:	f7ff bf90 	b.w	8002072 <__retarget_lock_release_recursive>
 8002152:	bf00      	nop
 8002154:	200000d4 	.word	0x200000d4

08002158 <__sfputc_r>:
 8002158:	6893      	ldr	r3, [r2, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	b410      	push	{r4}
 8002160:	6093      	str	r3, [r2, #8]
 8002162:	da07      	bge.n	8002174 <__sfputc_r+0x1c>
 8002164:	6994      	ldr	r4, [r2, #24]
 8002166:	42a3      	cmp	r3, r4
 8002168:	db01      	blt.n	800216e <__sfputc_r+0x16>
 800216a:	290a      	cmp	r1, #10
 800216c:	d102      	bne.n	8002174 <__sfputc_r+0x1c>
 800216e:	bc10      	pop	{r4}
 8002170:	f7ff bd0a 	b.w	8001b88 <__swbuf_r>
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	1c58      	adds	r0, r3, #1
 8002178:	6010      	str	r0, [r2, #0]
 800217a:	7019      	strb	r1, [r3, #0]
 800217c:	4608      	mov	r0, r1
 800217e:	bc10      	pop	{r4}
 8002180:	4770      	bx	lr

08002182 <__sfputs_r>:
 8002182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002184:	4606      	mov	r6, r0
 8002186:	460f      	mov	r7, r1
 8002188:	4614      	mov	r4, r2
 800218a:	18d5      	adds	r5, r2, r3
 800218c:	42ac      	cmp	r4, r5
 800218e:	d101      	bne.n	8002194 <__sfputs_r+0x12>
 8002190:	2000      	movs	r0, #0
 8002192:	e007      	b.n	80021a4 <__sfputs_r+0x22>
 8002194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002198:	463a      	mov	r2, r7
 800219a:	4630      	mov	r0, r6
 800219c:	f7ff ffdc 	bl	8002158 <__sfputc_r>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d1f3      	bne.n	800218c <__sfputs_r+0xa>
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021a8 <_vfiprintf_r>:
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	460d      	mov	r5, r1
 80021ae:	b09d      	sub	sp, #116	; 0x74
 80021b0:	4614      	mov	r4, r2
 80021b2:	4698      	mov	r8, r3
 80021b4:	4606      	mov	r6, r0
 80021b6:	b118      	cbz	r0, 80021c0 <_vfiprintf_r+0x18>
 80021b8:	6983      	ldr	r3, [r0, #24]
 80021ba:	b90b      	cbnz	r3, 80021c0 <_vfiprintf_r+0x18>
 80021bc:	f7ff feba 	bl	8001f34 <__sinit>
 80021c0:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <_vfiprintf_r+0x240>)
 80021c2:	429d      	cmp	r5, r3
 80021c4:	d11b      	bne.n	80021fe <_vfiprintf_r+0x56>
 80021c6:	6875      	ldr	r5, [r6, #4]
 80021c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021ca:	07d9      	lsls	r1, r3, #31
 80021cc:	d405      	bmi.n	80021da <_vfiprintf_r+0x32>
 80021ce:	89ab      	ldrh	r3, [r5, #12]
 80021d0:	059a      	lsls	r2, r3, #22
 80021d2:	d402      	bmi.n	80021da <_vfiprintf_r+0x32>
 80021d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021d6:	f7ff ff4b 	bl	8002070 <__retarget_lock_acquire_recursive>
 80021da:	89ab      	ldrh	r3, [r5, #12]
 80021dc:	071b      	lsls	r3, r3, #28
 80021de:	d501      	bpl.n	80021e4 <_vfiprintf_r+0x3c>
 80021e0:	692b      	ldr	r3, [r5, #16]
 80021e2:	b9eb      	cbnz	r3, 8002220 <_vfiprintf_r+0x78>
 80021e4:	4629      	mov	r1, r5
 80021e6:	4630      	mov	r0, r6
 80021e8:	f7ff fd20 	bl	8001c2c <__swsetup_r>
 80021ec:	b1c0      	cbz	r0, 8002220 <_vfiprintf_r+0x78>
 80021ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021f0:	07dc      	lsls	r4, r3, #31
 80021f2:	d50e      	bpl.n	8002212 <_vfiprintf_r+0x6a>
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	b01d      	add	sp, #116	; 0x74
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <_vfiprintf_r+0x244>)
 8002200:	429d      	cmp	r5, r3
 8002202:	d101      	bne.n	8002208 <_vfiprintf_r+0x60>
 8002204:	68b5      	ldr	r5, [r6, #8]
 8002206:	e7df      	b.n	80021c8 <_vfiprintf_r+0x20>
 8002208:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <_vfiprintf_r+0x248>)
 800220a:	429d      	cmp	r5, r3
 800220c:	bf08      	it	eq
 800220e:	68f5      	ldreq	r5, [r6, #12]
 8002210:	e7da      	b.n	80021c8 <_vfiprintf_r+0x20>
 8002212:	89ab      	ldrh	r3, [r5, #12]
 8002214:	0598      	lsls	r0, r3, #22
 8002216:	d4ed      	bmi.n	80021f4 <_vfiprintf_r+0x4c>
 8002218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800221a:	f7ff ff2a 	bl	8002072 <__retarget_lock_release_recursive>
 800221e:	e7e9      	b.n	80021f4 <_vfiprintf_r+0x4c>
 8002220:	2300      	movs	r3, #0
 8002222:	9309      	str	r3, [sp, #36]	; 0x24
 8002224:	2320      	movs	r3, #32
 8002226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800222a:	f8cd 800c 	str.w	r8, [sp, #12]
 800222e:	2330      	movs	r3, #48	; 0x30
 8002230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023f4 <_vfiprintf_r+0x24c>
 8002234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002238:	f04f 0901 	mov.w	r9, #1
 800223c:	4623      	mov	r3, r4
 800223e:	469a      	mov	sl, r3
 8002240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002244:	b10a      	cbz	r2, 800224a <_vfiprintf_r+0xa2>
 8002246:	2a25      	cmp	r2, #37	; 0x25
 8002248:	d1f9      	bne.n	800223e <_vfiprintf_r+0x96>
 800224a:	ebba 0b04 	subs.w	fp, sl, r4
 800224e:	d00b      	beq.n	8002268 <_vfiprintf_r+0xc0>
 8002250:	465b      	mov	r3, fp
 8002252:	4622      	mov	r2, r4
 8002254:	4629      	mov	r1, r5
 8002256:	4630      	mov	r0, r6
 8002258:	f7ff ff93 	bl	8002182 <__sfputs_r>
 800225c:	3001      	adds	r0, #1
 800225e:	f000 80aa 	beq.w	80023b6 <_vfiprintf_r+0x20e>
 8002262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002264:	445a      	add	r2, fp
 8002266:	9209      	str	r2, [sp, #36]	; 0x24
 8002268:	f89a 3000 	ldrb.w	r3, [sl]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a2 	beq.w	80023b6 <_vfiprintf_r+0x20e>
 8002272:	2300      	movs	r3, #0
 8002274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800227c:	f10a 0a01 	add.w	sl, sl, #1
 8002280:	9304      	str	r3, [sp, #16]
 8002282:	9307      	str	r3, [sp, #28]
 8002284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002288:	931a      	str	r3, [sp, #104]	; 0x68
 800228a:	4654      	mov	r4, sl
 800228c:	2205      	movs	r2, #5
 800228e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002292:	4858      	ldr	r0, [pc, #352]	; (80023f4 <_vfiprintf_r+0x24c>)
 8002294:	f7fd ffac 	bl	80001f0 <memchr>
 8002298:	9a04      	ldr	r2, [sp, #16]
 800229a:	b9d8      	cbnz	r0, 80022d4 <_vfiprintf_r+0x12c>
 800229c:	06d1      	lsls	r1, r2, #27
 800229e:	bf44      	itt	mi
 80022a0:	2320      	movmi	r3, #32
 80022a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022a6:	0713      	lsls	r3, r2, #28
 80022a8:	bf44      	itt	mi
 80022aa:	232b      	movmi	r3, #43	; 0x2b
 80022ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022b0:	f89a 3000 	ldrb.w	r3, [sl]
 80022b4:	2b2a      	cmp	r3, #42	; 0x2a
 80022b6:	d015      	beq.n	80022e4 <_vfiprintf_r+0x13c>
 80022b8:	9a07      	ldr	r2, [sp, #28]
 80022ba:	4654      	mov	r4, sl
 80022bc:	2000      	movs	r0, #0
 80022be:	f04f 0c0a 	mov.w	ip, #10
 80022c2:	4621      	mov	r1, r4
 80022c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022c8:	3b30      	subs	r3, #48	; 0x30
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d94e      	bls.n	800236c <_vfiprintf_r+0x1c4>
 80022ce:	b1b0      	cbz	r0, 80022fe <_vfiprintf_r+0x156>
 80022d0:	9207      	str	r2, [sp, #28]
 80022d2:	e014      	b.n	80022fe <_vfiprintf_r+0x156>
 80022d4:	eba0 0308 	sub.w	r3, r0, r8
 80022d8:	fa09 f303 	lsl.w	r3, r9, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	9304      	str	r3, [sp, #16]
 80022e0:	46a2      	mov	sl, r4
 80022e2:	e7d2      	b.n	800228a <_vfiprintf_r+0xe2>
 80022e4:	9b03      	ldr	r3, [sp, #12]
 80022e6:	1d19      	adds	r1, r3, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	9103      	str	r1, [sp, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bfbb      	ittet	lt
 80022f0:	425b      	neglt	r3, r3
 80022f2:	f042 0202 	orrlt.w	r2, r2, #2
 80022f6:	9307      	strge	r3, [sp, #28]
 80022f8:	9307      	strlt	r3, [sp, #28]
 80022fa:	bfb8      	it	lt
 80022fc:	9204      	strlt	r2, [sp, #16]
 80022fe:	7823      	ldrb	r3, [r4, #0]
 8002300:	2b2e      	cmp	r3, #46	; 0x2e
 8002302:	d10c      	bne.n	800231e <_vfiprintf_r+0x176>
 8002304:	7863      	ldrb	r3, [r4, #1]
 8002306:	2b2a      	cmp	r3, #42	; 0x2a
 8002308:	d135      	bne.n	8002376 <_vfiprintf_r+0x1ce>
 800230a:	9b03      	ldr	r3, [sp, #12]
 800230c:	1d1a      	adds	r2, r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	9203      	str	r2, [sp, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	bfb8      	it	lt
 8002316:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800231a:	3402      	adds	r4, #2
 800231c:	9305      	str	r3, [sp, #20]
 800231e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80023f8 <_vfiprintf_r+0x250>
 8002322:	7821      	ldrb	r1, [r4, #0]
 8002324:	2203      	movs	r2, #3
 8002326:	4650      	mov	r0, sl
 8002328:	f7fd ff62 	bl	80001f0 <memchr>
 800232c:	b140      	cbz	r0, 8002340 <_vfiprintf_r+0x198>
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	eba0 000a 	sub.w	r0, r0, sl
 8002334:	fa03 f000 	lsl.w	r0, r3, r0
 8002338:	9b04      	ldr	r3, [sp, #16]
 800233a:	4303      	orrs	r3, r0
 800233c:	3401      	adds	r4, #1
 800233e:	9304      	str	r3, [sp, #16]
 8002340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002344:	482d      	ldr	r0, [pc, #180]	; (80023fc <_vfiprintf_r+0x254>)
 8002346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800234a:	2206      	movs	r2, #6
 800234c:	f7fd ff50 	bl	80001f0 <memchr>
 8002350:	2800      	cmp	r0, #0
 8002352:	d03f      	beq.n	80023d4 <_vfiprintf_r+0x22c>
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <_vfiprintf_r+0x258>)
 8002356:	bb1b      	cbnz	r3, 80023a0 <_vfiprintf_r+0x1f8>
 8002358:	9b03      	ldr	r3, [sp, #12]
 800235a:	3307      	adds	r3, #7
 800235c:	f023 0307 	bic.w	r3, r3, #7
 8002360:	3308      	adds	r3, #8
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002366:	443b      	add	r3, r7
 8002368:	9309      	str	r3, [sp, #36]	; 0x24
 800236a:	e767      	b.n	800223c <_vfiprintf_r+0x94>
 800236c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002370:	460c      	mov	r4, r1
 8002372:	2001      	movs	r0, #1
 8002374:	e7a5      	b.n	80022c2 <_vfiprintf_r+0x11a>
 8002376:	2300      	movs	r3, #0
 8002378:	3401      	adds	r4, #1
 800237a:	9305      	str	r3, [sp, #20]
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 0c0a 	mov.w	ip, #10
 8002382:	4620      	mov	r0, r4
 8002384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002388:	3a30      	subs	r2, #48	; 0x30
 800238a:	2a09      	cmp	r2, #9
 800238c:	d903      	bls.n	8002396 <_vfiprintf_r+0x1ee>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0c5      	beq.n	800231e <_vfiprintf_r+0x176>
 8002392:	9105      	str	r1, [sp, #20]
 8002394:	e7c3      	b.n	800231e <_vfiprintf_r+0x176>
 8002396:	fb0c 2101 	mla	r1, ip, r1, r2
 800239a:	4604      	mov	r4, r0
 800239c:	2301      	movs	r3, #1
 800239e:	e7f0      	b.n	8002382 <_vfiprintf_r+0x1da>
 80023a0:	ab03      	add	r3, sp, #12
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	462a      	mov	r2, r5
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <_vfiprintf_r+0x25c>)
 80023a8:	a904      	add	r1, sp, #16
 80023aa:	4630      	mov	r0, r6
 80023ac:	f3af 8000 	nop.w
 80023b0:	4607      	mov	r7, r0
 80023b2:	1c78      	adds	r0, r7, #1
 80023b4:	d1d6      	bne.n	8002364 <_vfiprintf_r+0x1bc>
 80023b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023b8:	07d9      	lsls	r1, r3, #31
 80023ba:	d405      	bmi.n	80023c8 <_vfiprintf_r+0x220>
 80023bc:	89ab      	ldrh	r3, [r5, #12]
 80023be:	059a      	lsls	r2, r3, #22
 80023c0:	d402      	bmi.n	80023c8 <_vfiprintf_r+0x220>
 80023c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023c4:	f7ff fe55 	bl	8002072 <__retarget_lock_release_recursive>
 80023c8:	89ab      	ldrh	r3, [r5, #12]
 80023ca:	065b      	lsls	r3, r3, #25
 80023cc:	f53f af12 	bmi.w	80021f4 <_vfiprintf_r+0x4c>
 80023d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023d2:	e711      	b.n	80021f8 <_vfiprintf_r+0x50>
 80023d4:	ab03      	add	r3, sp, #12
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	462a      	mov	r2, r5
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <_vfiprintf_r+0x25c>)
 80023dc:	a904      	add	r1, sp, #16
 80023de:	4630      	mov	r0, r6
 80023e0:	f000 f880 	bl	80024e4 <_printf_i>
 80023e4:	e7e4      	b.n	80023b0 <_vfiprintf_r+0x208>
 80023e6:	bf00      	nop
 80023e8:	08002904 	.word	0x08002904
 80023ec:	08002924 	.word	0x08002924
 80023f0:	080028e4 	.word	0x080028e4
 80023f4:	08002944 	.word	0x08002944
 80023f8:	0800294a 	.word	0x0800294a
 80023fc:	0800294e 	.word	0x0800294e
 8002400:	00000000 	.word	0x00000000
 8002404:	08002183 	.word	0x08002183

08002408 <_printf_common>:
 8002408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800240c:	4616      	mov	r6, r2
 800240e:	4699      	mov	r9, r3
 8002410:	688a      	ldr	r2, [r1, #8]
 8002412:	690b      	ldr	r3, [r1, #16]
 8002414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002418:	4293      	cmp	r3, r2
 800241a:	bfb8      	it	lt
 800241c:	4613      	movlt	r3, r2
 800241e:	6033      	str	r3, [r6, #0]
 8002420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002424:	4607      	mov	r7, r0
 8002426:	460c      	mov	r4, r1
 8002428:	b10a      	cbz	r2, 800242e <_printf_common+0x26>
 800242a:	3301      	adds	r3, #1
 800242c:	6033      	str	r3, [r6, #0]
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	0699      	lsls	r1, r3, #26
 8002432:	bf42      	ittt	mi
 8002434:	6833      	ldrmi	r3, [r6, #0]
 8002436:	3302      	addmi	r3, #2
 8002438:	6033      	strmi	r3, [r6, #0]
 800243a:	6825      	ldr	r5, [r4, #0]
 800243c:	f015 0506 	ands.w	r5, r5, #6
 8002440:	d106      	bne.n	8002450 <_printf_common+0x48>
 8002442:	f104 0a19 	add.w	sl, r4, #25
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	6832      	ldr	r2, [r6, #0]
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	42ab      	cmp	r3, r5
 800244e:	dc26      	bgt.n	800249e <_printf_common+0x96>
 8002450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002454:	1e13      	subs	r3, r2, #0
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	bf18      	it	ne
 800245a:	2301      	movne	r3, #1
 800245c:	0692      	lsls	r2, r2, #26
 800245e:	d42b      	bmi.n	80024b8 <_printf_common+0xb0>
 8002460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002464:	4649      	mov	r1, r9
 8002466:	4638      	mov	r0, r7
 8002468:	47c0      	blx	r8
 800246a:	3001      	adds	r0, #1
 800246c:	d01e      	beq.n	80024ac <_printf_common+0xa4>
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	68e5      	ldr	r5, [r4, #12]
 8002472:	6832      	ldr	r2, [r6, #0]
 8002474:	f003 0306 	and.w	r3, r3, #6
 8002478:	2b04      	cmp	r3, #4
 800247a:	bf08      	it	eq
 800247c:	1aad      	subeq	r5, r5, r2
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	6922      	ldr	r2, [r4, #16]
 8002482:	bf0c      	ite	eq
 8002484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002488:	2500      	movne	r5, #0
 800248a:	4293      	cmp	r3, r2
 800248c:	bfc4      	itt	gt
 800248e:	1a9b      	subgt	r3, r3, r2
 8002490:	18ed      	addgt	r5, r5, r3
 8002492:	2600      	movs	r6, #0
 8002494:	341a      	adds	r4, #26
 8002496:	42b5      	cmp	r5, r6
 8002498:	d11a      	bne.n	80024d0 <_printf_common+0xc8>
 800249a:	2000      	movs	r0, #0
 800249c:	e008      	b.n	80024b0 <_printf_common+0xa8>
 800249e:	2301      	movs	r3, #1
 80024a0:	4652      	mov	r2, sl
 80024a2:	4649      	mov	r1, r9
 80024a4:	4638      	mov	r0, r7
 80024a6:	47c0      	blx	r8
 80024a8:	3001      	adds	r0, #1
 80024aa:	d103      	bne.n	80024b4 <_printf_common+0xac>
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b4:	3501      	adds	r5, #1
 80024b6:	e7c6      	b.n	8002446 <_printf_common+0x3e>
 80024b8:	18e1      	adds	r1, r4, r3
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	2030      	movs	r0, #48	; 0x30
 80024be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024c2:	4422      	add	r2, r4
 80024c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024cc:	3302      	adds	r3, #2
 80024ce:	e7c7      	b.n	8002460 <_printf_common+0x58>
 80024d0:	2301      	movs	r3, #1
 80024d2:	4622      	mov	r2, r4
 80024d4:	4649      	mov	r1, r9
 80024d6:	4638      	mov	r0, r7
 80024d8:	47c0      	blx	r8
 80024da:	3001      	adds	r0, #1
 80024dc:	d0e6      	beq.n	80024ac <_printf_common+0xa4>
 80024de:	3601      	adds	r6, #1
 80024e0:	e7d9      	b.n	8002496 <_printf_common+0x8e>
	...

080024e4 <_printf_i>:
 80024e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024e8:	7e0f      	ldrb	r7, [r1, #24]
 80024ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024ec:	2f78      	cmp	r7, #120	; 0x78
 80024ee:	4691      	mov	r9, r2
 80024f0:	4680      	mov	r8, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	469a      	mov	sl, r3
 80024f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024fa:	d807      	bhi.n	800250c <_printf_i+0x28>
 80024fc:	2f62      	cmp	r7, #98	; 0x62
 80024fe:	d80a      	bhi.n	8002516 <_printf_i+0x32>
 8002500:	2f00      	cmp	r7, #0
 8002502:	f000 80d8 	beq.w	80026b6 <_printf_i+0x1d2>
 8002506:	2f58      	cmp	r7, #88	; 0x58
 8002508:	f000 80a3 	beq.w	8002652 <_printf_i+0x16e>
 800250c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002514:	e03a      	b.n	800258c <_printf_i+0xa8>
 8002516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800251a:	2b15      	cmp	r3, #21
 800251c:	d8f6      	bhi.n	800250c <_printf_i+0x28>
 800251e:	a101      	add	r1, pc, #4	; (adr r1, 8002524 <_printf_i+0x40>)
 8002520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002524:	0800257d 	.word	0x0800257d
 8002528:	08002591 	.word	0x08002591
 800252c:	0800250d 	.word	0x0800250d
 8002530:	0800250d 	.word	0x0800250d
 8002534:	0800250d 	.word	0x0800250d
 8002538:	0800250d 	.word	0x0800250d
 800253c:	08002591 	.word	0x08002591
 8002540:	0800250d 	.word	0x0800250d
 8002544:	0800250d 	.word	0x0800250d
 8002548:	0800250d 	.word	0x0800250d
 800254c:	0800250d 	.word	0x0800250d
 8002550:	0800269d 	.word	0x0800269d
 8002554:	080025c1 	.word	0x080025c1
 8002558:	0800267f 	.word	0x0800267f
 800255c:	0800250d 	.word	0x0800250d
 8002560:	0800250d 	.word	0x0800250d
 8002564:	080026bf 	.word	0x080026bf
 8002568:	0800250d 	.word	0x0800250d
 800256c:	080025c1 	.word	0x080025c1
 8002570:	0800250d 	.word	0x0800250d
 8002574:	0800250d 	.word	0x0800250d
 8002578:	08002687 	.word	0x08002687
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	1d1a      	adds	r2, r3, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	602a      	str	r2, [r5, #0]
 8002584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800258c:	2301      	movs	r3, #1
 800258e:	e0a3      	b.n	80026d8 <_printf_i+0x1f4>
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	6829      	ldr	r1, [r5, #0]
 8002594:	0606      	lsls	r6, r0, #24
 8002596:	f101 0304 	add.w	r3, r1, #4
 800259a:	d50a      	bpl.n	80025b2 <_printf_i+0xce>
 800259c:	680e      	ldr	r6, [r1, #0]
 800259e:	602b      	str	r3, [r5, #0]
 80025a0:	2e00      	cmp	r6, #0
 80025a2:	da03      	bge.n	80025ac <_printf_i+0xc8>
 80025a4:	232d      	movs	r3, #45	; 0x2d
 80025a6:	4276      	negs	r6, r6
 80025a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ac:	485e      	ldr	r0, [pc, #376]	; (8002728 <_printf_i+0x244>)
 80025ae:	230a      	movs	r3, #10
 80025b0:	e019      	b.n	80025e6 <_printf_i+0x102>
 80025b2:	680e      	ldr	r6, [r1, #0]
 80025b4:	602b      	str	r3, [r5, #0]
 80025b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025ba:	bf18      	it	ne
 80025bc:	b236      	sxthne	r6, r6
 80025be:	e7ef      	b.n	80025a0 <_printf_i+0xbc>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	1d19      	adds	r1, r3, #4
 80025c6:	6029      	str	r1, [r5, #0]
 80025c8:	0601      	lsls	r1, r0, #24
 80025ca:	d501      	bpl.n	80025d0 <_printf_i+0xec>
 80025cc:	681e      	ldr	r6, [r3, #0]
 80025ce:	e002      	b.n	80025d6 <_printf_i+0xf2>
 80025d0:	0646      	lsls	r6, r0, #25
 80025d2:	d5fb      	bpl.n	80025cc <_printf_i+0xe8>
 80025d4:	881e      	ldrh	r6, [r3, #0]
 80025d6:	4854      	ldr	r0, [pc, #336]	; (8002728 <_printf_i+0x244>)
 80025d8:	2f6f      	cmp	r7, #111	; 0x6f
 80025da:	bf0c      	ite	eq
 80025dc:	2308      	moveq	r3, #8
 80025de:	230a      	movne	r3, #10
 80025e0:	2100      	movs	r1, #0
 80025e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025e6:	6865      	ldr	r5, [r4, #4]
 80025e8:	60a5      	str	r5, [r4, #8]
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	bfa2      	ittt	ge
 80025ee:	6821      	ldrge	r1, [r4, #0]
 80025f0:	f021 0104 	bicge.w	r1, r1, #4
 80025f4:	6021      	strge	r1, [r4, #0]
 80025f6:	b90e      	cbnz	r6, 80025fc <_printf_i+0x118>
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	d04d      	beq.n	8002698 <_printf_i+0x1b4>
 80025fc:	4615      	mov	r5, r2
 80025fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8002602:	fb03 6711 	mls	r7, r3, r1, r6
 8002606:	5dc7      	ldrb	r7, [r0, r7]
 8002608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800260c:	4637      	mov	r7, r6
 800260e:	42bb      	cmp	r3, r7
 8002610:	460e      	mov	r6, r1
 8002612:	d9f4      	bls.n	80025fe <_printf_i+0x11a>
 8002614:	2b08      	cmp	r3, #8
 8002616:	d10b      	bne.n	8002630 <_printf_i+0x14c>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	07de      	lsls	r6, r3, #31
 800261c:	d508      	bpl.n	8002630 <_printf_i+0x14c>
 800261e:	6923      	ldr	r3, [r4, #16]
 8002620:	6861      	ldr	r1, [r4, #4]
 8002622:	4299      	cmp	r1, r3
 8002624:	bfde      	ittt	le
 8002626:	2330      	movle	r3, #48	; 0x30
 8002628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800262c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002630:	1b52      	subs	r2, r2, r5
 8002632:	6122      	str	r2, [r4, #16]
 8002634:	f8cd a000 	str.w	sl, [sp]
 8002638:	464b      	mov	r3, r9
 800263a:	aa03      	add	r2, sp, #12
 800263c:	4621      	mov	r1, r4
 800263e:	4640      	mov	r0, r8
 8002640:	f7ff fee2 	bl	8002408 <_printf_common>
 8002644:	3001      	adds	r0, #1
 8002646:	d14c      	bne.n	80026e2 <_printf_i+0x1fe>
 8002648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800264c:	b004      	add	sp, #16
 800264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002652:	4835      	ldr	r0, [pc, #212]	; (8002728 <_printf_i+0x244>)
 8002654:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002658:	6829      	ldr	r1, [r5, #0]
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002660:	6029      	str	r1, [r5, #0]
 8002662:	061d      	lsls	r5, r3, #24
 8002664:	d514      	bpl.n	8002690 <_printf_i+0x1ac>
 8002666:	07df      	lsls	r7, r3, #31
 8002668:	bf44      	itt	mi
 800266a:	f043 0320 	orrmi.w	r3, r3, #32
 800266e:	6023      	strmi	r3, [r4, #0]
 8002670:	b91e      	cbnz	r6, 800267a <_printf_i+0x196>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f023 0320 	bic.w	r3, r3, #32
 8002678:	6023      	str	r3, [r4, #0]
 800267a:	2310      	movs	r3, #16
 800267c:	e7b0      	b.n	80025e0 <_printf_i+0xfc>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	f043 0320 	orr.w	r3, r3, #32
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	2378      	movs	r3, #120	; 0x78
 8002688:	4828      	ldr	r0, [pc, #160]	; (800272c <_printf_i+0x248>)
 800268a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800268e:	e7e3      	b.n	8002658 <_printf_i+0x174>
 8002690:	0659      	lsls	r1, r3, #25
 8002692:	bf48      	it	mi
 8002694:	b2b6      	uxthmi	r6, r6
 8002696:	e7e6      	b.n	8002666 <_printf_i+0x182>
 8002698:	4615      	mov	r5, r2
 800269a:	e7bb      	b.n	8002614 <_printf_i+0x130>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	6826      	ldr	r6, [r4, #0]
 80026a0:	6961      	ldr	r1, [r4, #20]
 80026a2:	1d18      	adds	r0, r3, #4
 80026a4:	6028      	str	r0, [r5, #0]
 80026a6:	0635      	lsls	r5, r6, #24
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	d501      	bpl.n	80026b0 <_printf_i+0x1cc>
 80026ac:	6019      	str	r1, [r3, #0]
 80026ae:	e002      	b.n	80026b6 <_printf_i+0x1d2>
 80026b0:	0670      	lsls	r0, r6, #25
 80026b2:	d5fb      	bpl.n	80026ac <_printf_i+0x1c8>
 80026b4:	8019      	strh	r1, [r3, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	6123      	str	r3, [r4, #16]
 80026ba:	4615      	mov	r5, r2
 80026bc:	e7ba      	b.n	8002634 <_printf_i+0x150>
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	1d1a      	adds	r2, r3, #4
 80026c2:	602a      	str	r2, [r5, #0]
 80026c4:	681d      	ldr	r5, [r3, #0]
 80026c6:	6862      	ldr	r2, [r4, #4]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4628      	mov	r0, r5
 80026cc:	f7fd fd90 	bl	80001f0 <memchr>
 80026d0:	b108      	cbz	r0, 80026d6 <_printf_i+0x1f2>
 80026d2:	1b40      	subs	r0, r0, r5
 80026d4:	6060      	str	r0, [r4, #4]
 80026d6:	6863      	ldr	r3, [r4, #4]
 80026d8:	6123      	str	r3, [r4, #16]
 80026da:	2300      	movs	r3, #0
 80026dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e0:	e7a8      	b.n	8002634 <_printf_i+0x150>
 80026e2:	6923      	ldr	r3, [r4, #16]
 80026e4:	462a      	mov	r2, r5
 80026e6:	4649      	mov	r1, r9
 80026e8:	4640      	mov	r0, r8
 80026ea:	47d0      	blx	sl
 80026ec:	3001      	adds	r0, #1
 80026ee:	d0ab      	beq.n	8002648 <_printf_i+0x164>
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	079b      	lsls	r3, r3, #30
 80026f4:	d413      	bmi.n	800271e <_printf_i+0x23a>
 80026f6:	68e0      	ldr	r0, [r4, #12]
 80026f8:	9b03      	ldr	r3, [sp, #12]
 80026fa:	4298      	cmp	r0, r3
 80026fc:	bfb8      	it	lt
 80026fe:	4618      	movlt	r0, r3
 8002700:	e7a4      	b.n	800264c <_printf_i+0x168>
 8002702:	2301      	movs	r3, #1
 8002704:	4632      	mov	r2, r6
 8002706:	4649      	mov	r1, r9
 8002708:	4640      	mov	r0, r8
 800270a:	47d0      	blx	sl
 800270c:	3001      	adds	r0, #1
 800270e:	d09b      	beq.n	8002648 <_printf_i+0x164>
 8002710:	3501      	adds	r5, #1
 8002712:	68e3      	ldr	r3, [r4, #12]
 8002714:	9903      	ldr	r1, [sp, #12]
 8002716:	1a5b      	subs	r3, r3, r1
 8002718:	42ab      	cmp	r3, r5
 800271a:	dcf2      	bgt.n	8002702 <_printf_i+0x21e>
 800271c:	e7eb      	b.n	80026f6 <_printf_i+0x212>
 800271e:	2500      	movs	r5, #0
 8002720:	f104 0619 	add.w	r6, r4, #25
 8002724:	e7f5      	b.n	8002712 <_printf_i+0x22e>
 8002726:	bf00      	nop
 8002728:	08002955 	.word	0x08002955
 800272c:	08002966 	.word	0x08002966

08002730 <__sread>:
 8002730:	b510      	push	{r4, lr}
 8002732:	460c      	mov	r4, r1
 8002734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002738:	f000 f894 	bl	8002864 <_read_r>
 800273c:	2800      	cmp	r0, #0
 800273e:	bfab      	itete	ge
 8002740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002742:	89a3      	ldrhlt	r3, [r4, #12]
 8002744:	181b      	addge	r3, r3, r0
 8002746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800274a:	bfac      	ite	ge
 800274c:	6563      	strge	r3, [r4, #84]	; 0x54
 800274e:	81a3      	strhlt	r3, [r4, #12]
 8002750:	bd10      	pop	{r4, pc}

08002752 <__swrite>:
 8002752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002756:	461f      	mov	r7, r3
 8002758:	898b      	ldrh	r3, [r1, #12]
 800275a:	05db      	lsls	r3, r3, #23
 800275c:	4605      	mov	r5, r0
 800275e:	460c      	mov	r4, r1
 8002760:	4616      	mov	r6, r2
 8002762:	d505      	bpl.n	8002770 <__swrite+0x1e>
 8002764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002768:	2302      	movs	r3, #2
 800276a:	2200      	movs	r2, #0
 800276c:	f000 f868 	bl	8002840 <_lseek_r>
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277a:	81a3      	strh	r3, [r4, #12]
 800277c:	4632      	mov	r2, r6
 800277e:	463b      	mov	r3, r7
 8002780:	4628      	mov	r0, r5
 8002782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002786:	f000 b817 	b.w	80027b8 <_write_r>

0800278a <__sseek>:
 800278a:	b510      	push	{r4, lr}
 800278c:	460c      	mov	r4, r1
 800278e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002792:	f000 f855 	bl	8002840 <_lseek_r>
 8002796:	1c43      	adds	r3, r0, #1
 8002798:	89a3      	ldrh	r3, [r4, #12]
 800279a:	bf15      	itete	ne
 800279c:	6560      	strne	r0, [r4, #84]	; 0x54
 800279e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027a6:	81a3      	strheq	r3, [r4, #12]
 80027a8:	bf18      	it	ne
 80027aa:	81a3      	strhne	r3, [r4, #12]
 80027ac:	bd10      	pop	{r4, pc}

080027ae <__sclose>:
 80027ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b2:	f000 b813 	b.w	80027dc <_close_r>
	...

080027b8 <_write_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4d07      	ldr	r5, [pc, #28]	; (80027d8 <_write_r+0x20>)
 80027bc:	4604      	mov	r4, r0
 80027be:	4608      	mov	r0, r1
 80027c0:	4611      	mov	r1, r2
 80027c2:	2200      	movs	r2, #0
 80027c4:	602a      	str	r2, [r5, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7fe ff73 	bl	80016b2 <_write>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d102      	bne.n	80027d6 <_write_r+0x1e>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	b103      	cbz	r3, 80027d6 <_write_r+0x1e>
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200000d8 	.word	0x200000d8

080027dc <_close_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4d06      	ldr	r5, [pc, #24]	; (80027f8 <_close_r+0x1c>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	602b      	str	r3, [r5, #0]
 80027e8:	f7fe ff7f 	bl	80016ea <_close>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_close_r+0x1a>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_close_r+0x1a>
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	200000d8 	.word	0x200000d8

080027fc <_fstat_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	4d07      	ldr	r5, [pc, #28]	; (800281c <_fstat_r+0x20>)
 8002800:	2300      	movs	r3, #0
 8002802:	4604      	mov	r4, r0
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	f7fe ff79 	bl	8001700 <_fstat>
 800280e:	1c43      	adds	r3, r0, #1
 8002810:	d102      	bne.n	8002818 <_fstat_r+0x1c>
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	b103      	cbz	r3, 8002818 <_fstat_r+0x1c>
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	bd38      	pop	{r3, r4, r5, pc}
 800281a:	bf00      	nop
 800281c:	200000d8 	.word	0x200000d8

08002820 <_isatty_r>:
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4d06      	ldr	r5, [pc, #24]	; (800283c <_isatty_r+0x1c>)
 8002824:	2300      	movs	r3, #0
 8002826:	4604      	mov	r4, r0
 8002828:	4608      	mov	r0, r1
 800282a:	602b      	str	r3, [r5, #0]
 800282c:	f7fe ff77 	bl	800171e <_isatty>
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	d102      	bne.n	800283a <_isatty_r+0x1a>
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	b103      	cbz	r3, 800283a <_isatty_r+0x1a>
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	bd38      	pop	{r3, r4, r5, pc}
 800283c:	200000d8 	.word	0x200000d8

08002840 <_lseek_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4d07      	ldr	r5, [pc, #28]	; (8002860 <_lseek_r+0x20>)
 8002844:	4604      	mov	r4, r0
 8002846:	4608      	mov	r0, r1
 8002848:	4611      	mov	r1, r2
 800284a:	2200      	movs	r2, #0
 800284c:	602a      	str	r2, [r5, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	f7fe ff6f 	bl	8001732 <_lseek>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	d102      	bne.n	800285e <_lseek_r+0x1e>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	b103      	cbz	r3, 800285e <_lseek_r+0x1e>
 800285c:	6023      	str	r3, [r4, #0]
 800285e:	bd38      	pop	{r3, r4, r5, pc}
 8002860:	200000d8 	.word	0x200000d8

08002864 <_read_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4d07      	ldr	r5, [pc, #28]	; (8002884 <_read_r+0x20>)
 8002868:	4604      	mov	r4, r0
 800286a:	4608      	mov	r0, r1
 800286c:	4611      	mov	r1, r2
 800286e:	2200      	movs	r2, #0
 8002870:	602a      	str	r2, [r5, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f7fe ff00 	bl	8001678 <_read>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_read_r+0x1e>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	b103      	cbz	r3, 8002882 <_read_r+0x1e>
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	200000d8 	.word	0x200000d8

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
