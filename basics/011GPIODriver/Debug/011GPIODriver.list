
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b40  08002b40  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b40  08002b40  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000078  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002dea  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c2c  00000000  00000000  00022e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000430  00000000  00000000  00023ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000378  00000000  00000000  00023ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a29  00000000  00000000  00024258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005303  00000000  00000000  00028c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cc1d  00000000  00000000  0002df84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003aba1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017e4  00000000  00000000  0003abf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002a34 	.word	0x08002a34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08002a34 	.word	0x08002a34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <eeprom_at24cxx_read_byte>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void eeprom_at24cxx_read_byte(uint16_t eeprom_address,uint8_t *buffer)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	4603      	mov	r3, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	80fb      	strh	r3, [r7, #6]
	I2CMaster_AT24Cxx_EEPROM_Read_Sequential(I2C_DEVICE,buffer,1,eeprom_address,SlaveAddress);
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <eeprom_at24cxx_read_byte+0x2c>)
 80002ae:	6818      	ldr	r0, [r3, #0]
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <eeprom_at24cxx_read_byte+0x30>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	88fa      	ldrh	r2, [r7, #6]
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	4613      	mov	r3, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	6839      	ldr	r1, [r7, #0]
 80002be:	f000 fe57 	bl	8000f70 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential>
	return;
 80002c2:	bf00      	nop
}
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000000 	.word	0x20000000
 80002d0:	20000004 	.word	0x20000004

080002d4 <eeprom_at24cxx_read_sequential>:
	I2CMasterReceiveData(I2C_DEVICE,buffer,1,SlaveAddress);
	return;
}

void eeprom_at24cxx_read_sequential(uint16_t eeprom_address,uint8_t *buffer,uint16_t length)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af02      	add	r7, sp, #8
 80002da:	4603      	mov	r3, r0
 80002dc:	6039      	str	r1, [r7, #0]
 80002de:	80fb      	strh	r3, [r7, #6]
 80002e0:	4613      	mov	r3, r2
 80002e2:	80bb      	strh	r3, [r7, #4]
	I2CMaster_AT24Cxx_EEPROM_Read_Sequential(I2C_DEVICE,buffer,length,eeprom_address,SlaveAddress);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <eeprom_at24cxx_read_sequential+0x30>)
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	88ba      	ldrh	r2, [r7, #4]
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <eeprom_at24cxx_read_sequential+0x34>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	88f9      	ldrh	r1, [r7, #6]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	460b      	mov	r3, r1
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	f000 fe3b 	bl	8000f70 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential>
	return;
 80002fa:	bf00      	nop
}
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	20000004 	.word	0x20000004

0800030c <eeprom_at24cxx_write_byte>:
	I2CMasterReceiveData(I2C_DEVICE,buffer,length,SlaveAddress);
	return;
}

void eeprom_at24cxx_write_byte(uint16_t eeprom_address,uint8_t *buffer)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	80fb      	strh	r3, [r7, #6]
	uint8_t * data;

	data = (uint8_t *)malloc(3);
 8000318:	2003      	movs	r0, #3
 800031a:	f001 fb23 	bl	8001964 <malloc>
 800031e:	4603      	mov	r3, r0
 8000320:	60fb      	str	r3, [r7, #12]

	if(data !=NULL)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d018      	beq.n	800035a <eeprom_at24cxx_write_byte+0x4e>
	{
		data[0] = (uint8_t) eeprom_address;
 8000328:	88fb      	ldrh	r3, [r7, #6]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	701a      	strb	r2, [r3, #0]
		data[1] = (uint8_t) (eeprom_address >> 8);
 8000330:	88fb      	ldrh	r3, [r7, #6]
 8000332:	0a1b      	lsrs	r3, r3, #8
 8000334:	b29a      	uxth	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	3301      	adds	r3, #1
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	701a      	strb	r2, [r3, #0]
		data[2] = buffer[0];
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3302      	adds	r3, #2
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	701a      	strb	r2, [r3, #0]

		I2CMasterSendData(I2C_DEVICE,data,3,SlaveAddress);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <eeprom_at24cxx_write_byte+0x58>)
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <eeprom_at24cxx_write_byte+0x5c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2203      	movs	r2, #3
 8000352:	68f9      	ldr	r1, [r7, #12]
 8000354:	f000 fcc2 	bl	8000cdc <I2CMasterSendData>
	}

	return;
 8000358:	bf00      	nop
 800035a:	bf00      	nop
}
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	20000004 	.word	0x20000004

0800036c <eeprom_at24cxx_write_page>:

void eeprom_at24cxx_write_page(uint16_t eeprom_address,uint8_t *buffer,uint16_t length)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	80fb      	strh	r3, [r7, #6]
 8000378:	4613      	mov	r3, r2
 800037a:	80bb      	strh	r3, [r7, #4]
	uint8_t * data;
	uint8_t i;

	data = (uint8_t *)malloc(length+2);
 800037c:	88bb      	ldrh	r3, [r7, #4]
 800037e:	3302      	adds	r3, #2
 8000380:	4618      	mov	r0, r3
 8000382:	f001 faef 	bl	8001964 <malloc>
 8000386:	4603      	mov	r3, r0
 8000388:	60bb      	str	r3, [r7, #8]

	if(data !=NULL)
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d029      	beq.n	80003e4 <eeprom_at24cxx_write_page+0x78>
	{
		data[0] = (uint8_t) eeprom_address;
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	b2da      	uxtb	r2, r3
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	701a      	strb	r2, [r3, #0]
		data[1] = (uint8_t) (eeprom_address >> 8);
 8000398:	88fb      	ldrh	r3, [r7, #6]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b29a      	uxth	r2, r3
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	3301      	adds	r3, #1
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	701a      	strb	r2, [r3, #0]

		for(i=0;i<length;i++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	e00b      	b.n	80003c4 <eeprom_at24cxx_write_page+0x58>
		{
			data[i+2] = buffer[i];
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	441a      	add	r2, r3
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	3302      	adds	r3, #2
 80003b6:	68b9      	ldr	r1, [r7, #8]
 80003b8:	440b      	add	r3, r1
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	701a      	strb	r2, [r3, #0]
		for(i=0;i<length;i++)
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	3301      	adds	r3, #1
 80003c2:	73fb      	strb	r3, [r7, #15]
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	88ba      	ldrh	r2, [r7, #4]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d8ee      	bhi.n	80003ac <eeprom_at24cxx_write_page+0x40>
		}

		I2CMasterSendData(I2C_DEVICE,data,length+2,SlaveAddress);
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <eeprom_at24cxx_write_page+0x80>)
 80003d0:	6818      	ldr	r0, [r3, #0]
 80003d2:	88bb      	ldrh	r3, [r7, #4]
 80003d4:	3302      	adds	r3, #2
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <eeprom_at24cxx_write_page+0x84>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	f000 fc7d 	bl	8000cdc <I2CMasterSendData>
	}

	return;
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
}
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000004 	.word	0x20000004

080003f4 <delay_us>:
struct USART_Handle_t Test_USART;
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0xA0;

void delay_us(uint32_t delay)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <delay_us+0x2c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 8000404:	bf00      	nop
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <delay_us+0x2c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	429a      	cmp	r2, r3
 8000412:	d3f8      	bcc.n	8000406 <delay_us+0x12>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000088 	.word	0x20000088

08000424 <configure_delay_timer>:

void configure_delay_timer(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <configure_delay_timer+0x3c>)
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 8000430:	2228      	movs	r2, #40	; 0x28
 8000432:	2100      	movs	r1, #0
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <configure_delay_timer+0x40>)
 8000436:	f001 fa9d 	bl	8001974 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <configure_delay_timer+0x3c>)
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <configure_delay_timer+0x3c>)
 8000442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000446:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 8000448:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800044c:	f000 fe38 	bl	80010c0 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <configure_delay_timer+0x3c>)
 8000452:	f000 f8dc 	bl	800060e <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 8000456:	4802      	ldr	r0, [pc, #8]	; (8000460 <configure_delay_timer+0x3c>)
 8000458:	f000 fb01 	bl	8000a5e <General_Purpose_Timer_PeripheralEnable>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000088 	.word	0x20000088
 8000464:	2000008c 	.word	0x2000008c

08000468 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 800046c:	482a      	ldr	r0, [pc, #168]	; (8000518 <configure_uart+0xb0>)
 800046e:	f000 fe27 	bl	80010c0 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000472:	2202      	movs	r2, #2
 8000474:	2105      	movs	r1, #5
 8000476:	4828      	ldr	r0, [pc, #160]	; (8000518 <configure_uart+0xb0>)
 8000478:	f000 fb02 	bl	8000a80 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 800047c:	2202      	movs	r2, #2
 800047e:	2106      	movs	r1, #6
 8000480:	4825      	ldr	r0, [pc, #148]	; (8000518 <configure_uart+0xb0>)
 8000482:	f000 fafd 	bl	8000a80 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 8000486:	2207      	movs	r2, #7
 8000488:	2105      	movs	r1, #5
 800048a:	4823      	ldr	r0, [pc, #140]	; (8000518 <configure_uart+0xb0>)
 800048c:	f000 fb1c 	bl	8000ac8 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000490:	2207      	movs	r2, #7
 8000492:	2106      	movs	r1, #6
 8000494:	4820      	ldr	r0, [pc, #128]	; (8000518 <configure_uart+0xb0>)
 8000496:	f000 fb17 	bl	8000ac8 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800049a:	2200      	movs	r2, #0
 800049c:	2105      	movs	r1, #5
 800049e:	481e      	ldr	r0, [pc, #120]	; (8000518 <configure_uart+0xb0>)
 80004a0:	f000 fb4b 	bl	8000b3a <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2106      	movs	r1, #6
 80004a8:	481b      	ldr	r0, [pc, #108]	; (8000518 <configure_uart+0xb0>)
 80004aa:	f000 fb46 	bl	8000b3a <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80004ae:	2202      	movs	r2, #2
 80004b0:	2105      	movs	r1, #5
 80004b2:	4819      	ldr	r0, [pc, #100]	; (8000518 <configure_uart+0xb0>)
 80004b4:	f000 fb87 	bl	8000bc6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80004b8:	2202      	movs	r2, #2
 80004ba:	2106      	movs	r1, #6
 80004bc:	4816      	ldr	r0, [pc, #88]	; (8000518 <configure_uart+0xb0>)
 80004be:	f000 fb82 	bl	8000bc6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2105      	movs	r1, #5
 80004c6:	4814      	ldr	r0, [pc, #80]	; (8000518 <configure_uart+0xb0>)
 80004c8:	f000 fb59 	bl	8000b7e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2106      	movs	r1, #6
 80004d0:	4811      	ldr	r0, [pc, #68]	; (8000518 <configure_uart+0xb0>)
 80004d2:	f000 fb54 	bl	8000b7e <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <configure_uart+0xb4>)
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <configure_uart+0xb8>)
 80004da:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <configure_uart+0xb4>)
 80004de:	2202      	movs	r2, #2
 80004e0:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <configure_uart+0xb4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <configure_uart+0xb4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <configure_uart+0xb4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <configure_uart+0xb4>)
 80004f6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004fa:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <configure_uart+0xb4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <configure_uart+0xb8>)
 8000504:	f000 fddc 	bl	80010c0 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <configure_uart+0xb4>)
 800050a:	f000 ff9d 	bl	8001448 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <configure_uart+0xb4>)
 8000510:	f001 f89a 	bl	8001648 <USART_PeripheralEnable>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020c00 	.word	0x40020c00
 800051c:	200000b4 	.word	0x200000b4
 8000520:	40004400 	.word	0x40004400

08000524 <configure_i2c>:

void configure_i2c(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800052a:	463b      	mov	r3, r7
 800052c:	2218      	movs	r2, #24
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fa1f 	bl	8001974 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000536:	482d      	ldr	r0, [pc, #180]	; (80005ec <configure_i2c+0xc8>)
 8000538:	f000 fdc2 	bl	80010c0 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800053c:	2202      	movs	r2, #2
 800053e:	2107      	movs	r1, #7
 8000540:	482a      	ldr	r0, [pc, #168]	; (80005ec <configure_i2c+0xc8>)
 8000542:	f000 fa9d 	bl	8000a80 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000546:	2202      	movs	r2, #2
 8000548:	2106      	movs	r1, #6
 800054a:	4828      	ldr	r0, [pc, #160]	; (80005ec <configure_i2c+0xc8>)
 800054c:	f000 fa98 	bl	8000a80 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000550:	2204      	movs	r2, #4
 8000552:	2107      	movs	r1, #7
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <configure_i2c+0xc8>)
 8000556:	f000 fab7 	bl	8000ac8 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800055a:	2204      	movs	r2, #4
 800055c:	2106      	movs	r1, #6
 800055e:	4823      	ldr	r0, [pc, #140]	; (80005ec <configure_i2c+0xc8>)
 8000560:	f000 fab2 	bl	8000ac8 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000564:	2201      	movs	r2, #1
 8000566:	2107      	movs	r1, #7
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <configure_i2c+0xc8>)
 800056a:	f000 fae6 	bl	8000b3a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800056e:	2201      	movs	r2, #1
 8000570:	2106      	movs	r1, #6
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <configure_i2c+0xc8>)
 8000574:	f000 fae1 	bl	8000b3a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000578:	2202      	movs	r2, #2
 800057a:	2107      	movs	r1, #7
 800057c:	481b      	ldr	r0, [pc, #108]	; (80005ec <configure_i2c+0xc8>)
 800057e:	f000 fb22 	bl	8000bc6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000582:	2202      	movs	r2, #2
 8000584:	2106      	movs	r1, #6
 8000586:	4819      	ldr	r0, [pc, #100]	; (80005ec <configure_i2c+0xc8>)
 8000588:	f000 fb1d 	bl	8000bc6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800058c:	2201      	movs	r2, #1
 800058e:	2107      	movs	r1, #7
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <configure_i2c+0xc8>)
 8000592:	f000 faf4 	bl	8000b7e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000596:	2201      	movs	r2, #1
 8000598:	2106      	movs	r1, #6
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <configure_i2c+0xc8>)
 800059c:	f000 faef 	bl	8000b7e <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 80005a0:	2310      	movs	r3, #16
 80005a2:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 80005ac:	2350      	movs	r3, #80	; 0x50
 80005ae:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <configure_i2c+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fd81 	bl	80010c0 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <configure_i2c+0xcc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	463a      	mov	r2, r7
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fb21 	bl	8000c0e <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <configure_i2c+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2111      	movs	r1, #17
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fc9a 	bl	8000f0c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <configure_i2c+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fb6c 	bl	8000cba <I2CEnable>

	return;
 80005e2:	bf00      	nop
}
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400
 80005f0:	20000000 	.word	0x20000000

080005f4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd2b 	bl	800105c <lcd_pcf8574_send_data>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	6852      	ldr	r2, [r2, #4]
 800061e:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6892      	ldr	r2, [r2, #8]
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7b1b      	ldrb	r3, [r3, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d16a      	bne.n	8000708 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6a1a      	ldr	r2, [r3, #32]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f042 0201 	orr.w	r2, r2, #1
 8000640:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7b5b      	ldrb	r3, [r3, #13]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d11c      	bne.n	8000684 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f022 0203 	bic.w	r2, r2, #3
 8000658:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	6912      	ldr	r2, [r2, #16]
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000672:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000682:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d11c      	bne.n	80006c6 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	699a      	ldr	r2, [r3, #24]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f022 0203 	bic.w	r2, r2, #3
 800069a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	6912      	ldr	r2, [r2, #16]
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006b4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	699a      	ldr	r2, [r3, #24]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80006c4:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7b5b      	ldrb	r3, [r3, #13]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d11c      	bne.n	8000708 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f022 0203 	bic.w	r2, r2, #3
 80006dc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6912      	ldr	r2, [r2, #16]
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006f6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	699a      	ldr	r2, [r3, #24]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000706:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7d1b      	ldrb	r3, [r3, #20]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 80bf 	bne.w	8000890 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7d5b      	ldrb	r3, [r3, #21]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d124      	bne.n	8000764 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000728:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	6992      	ldr	r2, [r2, #24]
 8000732:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000742:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000752:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a1a      	ldr	r2, [r3, #32]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0210 	orr.w	r2, r2, #16
 8000762:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7d5b      	ldrb	r3, [r3, #21]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d124      	bne.n	80007b6 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800077a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6992      	ldr	r2, [r2, #24]
 8000784:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000794:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	699a      	ldr	r2, [r3, #24]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007a4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6a1a      	ldr	r2, [r3, #32]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f042 0210 	orr.w	r2, r2, #16
 80007b4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7d5b      	ldrb	r3, [r3, #21]
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d124      	bne.n	8000808 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6992      	ldr	r2, [r2, #24]
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007e6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	699a      	ldr	r2, [r3, #24]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80007f6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a1a      	ldr	r2, [r3, #32]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f042 0210 	orr.w	r2, r2, #16
 8000806:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7d5b      	ldrb	r3, [r3, #21]
 800080c:	2b08      	cmp	r3, #8
 800080e:	d13f      	bne.n	8000890 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800081e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800082e:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800083e:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6a1a      	ldr	r2, [r3, #32]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0220 	bic.w	r2, r2, #32
 800084e:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6a1a      	ldr	r2, [r3, #32]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800085e:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	699a      	ldr	r2, [r3, #24]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800086e:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0204 	orr.w	r2, r2, #4
 800087e:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6a1a      	ldr	r2, [r3, #32]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0210 	orr.w	r2, r2, #16
 800088e:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7f1b      	ldrb	r3, [r3, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d16a      	bne.n	800096e <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a1a      	ldr	r2, [r3, #32]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008a6:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7f5b      	ldrb	r3, [r3, #29]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d11c      	bne.n	80008ea <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	69da      	ldr	r2, [r3, #28]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0203 	bic.w	r2, r2, #3
 80008be:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6a12      	ldr	r2, [r2, #32]
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69da      	ldr	r2, [r3, #28]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008d8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80008e8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7f5b      	ldrb	r3, [r3, #29]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d11c      	bne.n	800092c <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f022 0203 	bic.w	r2, r2, #3
 8000900:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6a12      	ldr	r2, [r2, #32]
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800091a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800092a:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7f5b      	ldrb	r3, [r3, #29]
 8000930:	2b04      	cmp	r3, #4
 8000932:	d11c      	bne.n	800096e <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	69da      	ldr	r2, [r3, #28]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 0203 	bic.w	r2, r2, #3
 8000942:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	6a12      	ldr	r2, [r2, #32]
 800094c:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800095c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800096c:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	d16d      	bne.n	8000a54 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6a1a      	ldr	r2, [r3, #32]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000986:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800098e:	2b02      	cmp	r3, #2
 8000990:	d11c      	bne.n	80009cc <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69da      	ldr	r2, [r3, #28]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009a0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009aa:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	69da      	ldr	r2, [r3, #28]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009ba:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80009ca:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d11c      	bne.n	8000a10 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009e4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009fe:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	69da      	ldr	r2, [r3, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000a0e:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d11c      	bne.n	8000a54 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a28:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a42:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	69da      	ldr	r2, [r3, #28]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000a52:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	78fa      	ldrb	r2, [r7, #3]
 8000a9a:	0052      	lsls	r2, r2, #1
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	43d2      	mvns	r2, r2
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	78b9      	ldrb	r1, [r7, #2]
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]

}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000aea:	7afa      	ldrb	r2, [r7, #11]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3208      	adds	r2, #8
 8000af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af4:	7aba      	ldrb	r2, [r7, #10]
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	210f      	movs	r1, #15
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	4611      	mov	r1, r2
 8000b02:	7afa      	ldrb	r2, [r7, #11]
 8000b04:	4019      	ands	r1, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000b0e:	7afa      	ldrb	r2, [r7, #11]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3208      	adds	r2, #8
 8000b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b18:	78b9      	ldrb	r1, [r7, #2]
 8000b1a:	7aba      	ldrb	r2, [r7, #10]
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	7afa      	ldrb	r2, [r7, #11]
 8000b26:	4319      	orrs	r1, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	70fb      	strb	r3, [r7, #3]
 8000b46:	4613      	mov	r3, r2
 8000b48:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	78fa      	ldrb	r2, [r7, #3]
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	43d2      	mvns	r2, r2
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	78b9      	ldrb	r1, [r7, #2]
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	605a      	str	r2, [r3, #4]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	78b9      	ldrb	r1, [r7, #2]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	0052      	lsls	r2, r2, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	60da      	str	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	70fb      	strb	r3, [r7, #3]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	78fa      	ldrb	r2, [r7, #3]
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	2103      	movs	r1, #3
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	78b9      	ldrb	r1, [r7, #2]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	609a      	str	r2, [r3, #8]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	03db      	lsls	r3, r3, #15
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10d      	bne.n	8000c76 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	039b      	lsls	r3, r3, #14
 8000c70:	431a      	orrs	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	029b      	lsls	r3, r3, #10
 8000caa:	431a      	orrs	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	601a      	str	r2, [r3, #0]

}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f043 0201 	orr.w	r2, r3, #1
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 f8b4 	bl	8000e5c <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000cf4:	bf00      	nop
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f000 f8d1 	bl	8000ea0 <I2C_GetFlagStatus>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f8      	beq.n	8000cf6 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f8d7 	bl	8000eca <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000d1c:	bf00      	nop
 8000d1e:	2102      	movs	r1, #2
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f8bd 	bl	8000ea0 <I2C_GetFlagStatus>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f8      	beq.n	8000d1e <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f8dc 	bl	8000eea <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000d32:	e012      	b.n	8000d5a <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000d34:	bf00      	nop
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f8b1 	bl	8000ea0 <I2C_GetFlagStatus>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f8      	beq.n	8000d36 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e9      	bne.n	8000d34 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000d60:	bf00      	nop
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 f89b 	bl	8000ea0 <I2C_GetFlagStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d1f8      	bne.n	8000d62 <I2CMasterSendData+0x86>
 8000d70:	2104      	movs	r1, #4
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f000 f894 	bl	8000ea0 <I2C_GetFlagStatus>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d1f1      	bne.n	8000d62 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f000 f87d 	bl	8000e7e <I2C_SendStopBit>

}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <I2CMasterReceiveData>:

void I2CMasterReceiveData(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t SlaveAddress)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	70fb      	strb	r3, [r7, #3]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f85c 	bl	8000e5c <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000da4:	bf00      	nop
 8000da6:	2101      	movs	r1, #1
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 f879 	bl	8000ea0 <I2C_GetFlagStatus>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f8      	beq.n	8000da6 <I2CMasterReceiveData+0x1a>

	//3. Send Slave Address Address Along with Read Bit Set
	SlaveAddress = SlaveAddress << 1;
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	70fb      	strb	r3, [r7, #3]
	SlaveAddress |= (0x1);
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f87f 	bl	8000eca <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000dcc:	bf00      	nop
 8000dce:	2102      	movs	r1, #2
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f865 	bl	8000ea0 <I2C_GetFlagStatus>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f8      	beq.n	8000dce <I2CMasterReceiveData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f000 f884 	bl	8000eea <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d919      	bls.n	8000e1c <I2CMasterReceiveData+0x90>
	{
		I2CEnableAck(I2CAddress);
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f89f 	bl	8000f2c <I2CEnableAck>
		while(Len >= 2)
 8000dee:	e012      	b.n	8000e16 <I2CMasterReceiveData+0x8a>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8000df0:	bf00      	nop
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 f853 	bl	8000ea0 <I2C_GetFlagStatus>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f8      	beq.n	8000df2 <I2CMasterReceiveData+0x66>
			*RxBuf = pI2C->I2C_DR;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
			Len--;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d8e9      	bhi.n	8000df0 <I2CMasterReceiveData+0x64>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d115      	bne.n	8000e4e <I2CMasterReceiveData+0xc2>
	{
		I2CDisableAck(I2CAddress);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 f893 	bl	8000f4e <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8000e28:	bf00      	nop
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f837 	bl	8000ea0 <I2C_GetFlagStatus>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f8      	beq.n	8000e2a <I2CMasterReceiveData+0x9e>
		*RxBuf = pI2C->I2C_DR;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f815 	bl	8000e7e <I2C_SendStopBit>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b085      	sub	sp, #20
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	621a      	str	r2, [r3, #32]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential>:

void I2CMaster_AT24Cxx_EEPROM_Read_Sequential(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint16_t eeprom_address, uint8_t SlaveAddress)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	807b      	strh	r3, [r7, #2]
	uint8_t address_length;
	uint8_t * data;

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff6a 	bl	8000e5c <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000f88:	bf00      	nop
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff ff87 	bl	8000ea0 <I2C_GetFlagStatus>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f8      	beq.n	8000f8a <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000f98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SlaveAddress &= ~(0x1);
 8000fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff ff88 	bl	8000eca <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000fba:	bf00      	nop
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ff6e 	bl	8000ea0 <I2C_GetFlagStatus>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f8      	beq.n	8000fbc <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff ff8d 	bl	8000eea <I2C_ClearADDRStatusBit>

	//5. Send Address Bytes

	data = (uint8_t *)malloc(2);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 fcc7 	bl	8001964 <malloc>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	61bb      	str	r3, [r7, #24]

	if(data !=NULL)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d032      	beq.n	8001046 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xd6>
	{
		address_length = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	77fb      	strb	r3, [r7, #31]

		data[0] = (uint8_t) eeprom_address;
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	701a      	strb	r2, [r3, #0]
		data[1] = (uint8_t) (eeprom_address >> 8);
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	701a      	strb	r2, [r3, #0]

		while(address_length > 0)
 8000ffa:	e012      	b.n	8001022 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xb2>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000ffc:	bf00      	nop
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff ff4d 	bl	8000ea0 <I2C_GetFlagStatus>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f8      	beq.n	8000ffe <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x8e>
			pI2C->I2C_DR = *data;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	611a      	str	r2, [r3, #16]
			data++;
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3301      	adds	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
			address_length--;
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	3b01      	subs	r3, #1
 8001020:	77fb      	strb	r3, [r7, #31]
		while(address_length > 0)
 8001022:	7ffb      	ldrb	r3, [r7, #31]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e9      	bne.n	8000ffc <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x8c>
		}

		//6. Wait for last byte transmission to be completed
		// Check for TXE=1 and BTF=1

		while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001028:	bf00      	nop
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff ff37 	bl	8000ea0 <I2C_GetFlagStatus>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d1f8      	bne.n	800102a <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xba>
 8001038:	2104      	movs	r1, #4
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff ff30 	bl	8000ea0 <I2C_GetFlagStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d1f1      	bne.n	800102a <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xba>

	}

	//Read from EEPROM

	I2CMasterReceiveData(I2CAddress,RxBuf,Len,SlaveAddress);
 8001046:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fe9c 	bl	8000d8c <I2CMasterReceiveData>

	return;
 8001054:	bf00      	nop
}
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <lcd_pcf8574_send_data>:

	return;
}

void lcd_pcf8574_send_data(uint8_t data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f023 030f 	bic.w	r3, r3, #15
 800106c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 030d 	orr.w	r3, r3, #13
 800107a:	b2db      	uxtb	r3, r3
 800107c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f043 0309 	orr.w	r3, r3, #9
 8001084:	b2db      	uxtb	r3, r3
 8001086:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	f043 030d 	orr.w	r3, r3, #13
 800108e:	b2db      	uxtb	r3, r3
 8001090:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	f043 0309 	orr.w	r3, r3, #9
 8001098:	b2db      	uxtb	r3, r3
 800109a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <lcd_pcf8574_send_data+0x5c>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <lcd_pcf8574_send_data+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f107 0108 	add.w	r1, r7, #8
 80010a8:	2204      	movs	r2, #4
 80010aa:	f7ff fe17 	bl	8000cdc <I2CMasterSendData>

	return;
 80010ae:	bf00      	nop
}
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004

080010c0 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a88      	ldr	r2, [pc, #544]	; (80012ec <EnablePeriClk+0x22c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d108      	bne.n	80010e2 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010d0:	4b87      	ldr	r3, [pc, #540]	; (80012f0 <EnablePeriClk+0x230>)
 80010d2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80010e0:	e19b      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a83      	ldr	r2, [pc, #524]	; (80012f4 <EnablePeriClk+0x234>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d108      	bne.n	80010fc <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010ea:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <EnablePeriClk+0x230>)
 80010ec:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	601a      	str	r2, [r3, #0]
}
 80010fa:	e18e      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a7e      	ldr	r2, [pc, #504]	; (80012f8 <EnablePeriClk+0x238>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d108      	bne.n	8001116 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001104:	4b7a      	ldr	r3, [pc, #488]	; (80012f0 <EnablePeriClk+0x230>)
 8001106:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f043 0204 	orr.w	r2, r3, #4
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	e181      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a78      	ldr	r2, [pc, #480]	; (80012fc <EnablePeriClk+0x23c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d108      	bne.n	8001130 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800111e:	4b74      	ldr	r3, [pc, #464]	; (80012f0 <EnablePeriClk+0x230>)
 8001120:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f043 0208 	orr.w	r2, r3, #8
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	e174      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a73      	ldr	r2, [pc, #460]	; (8001300 <EnablePeriClk+0x240>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d108      	bne.n	800114a <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001138:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <EnablePeriClk+0x230>)
 800113a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f043 0210 	orr.w	r2, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	e167      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a6d      	ldr	r2, [pc, #436]	; (8001304 <EnablePeriClk+0x244>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d108      	bne.n	8001164 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001152:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <EnablePeriClk+0x230>)
 8001154:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f043 0220 	orr.w	r2, r3, #32
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	e15a      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a68      	ldr	r2, [pc, #416]	; (8001308 <EnablePeriClk+0x248>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d108      	bne.n	800117e <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800116c:	4b60      	ldr	r3, [pc, #384]	; (80012f0 <EnablePeriClk+0x230>)
 800116e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	e14d      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a62      	ldr	r2, [pc, #392]	; (800130c <EnablePeriClk+0x24c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d108      	bne.n	8001198 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001186:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <EnablePeriClk+0x230>)
 8001188:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	e140      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <EnablePeriClk+0x250>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d108      	bne.n	80011b2 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <EnablePeriClk+0x230>)
 80011a2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	e133      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a57      	ldr	r2, [pc, #348]	; (8001314 <EnablePeriClk+0x254>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d108      	bne.n	80011cc <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <EnablePeriClk+0x258>)
 80011bc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	e126      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a53      	ldr	r2, [pc, #332]	; (800131c <EnablePeriClk+0x25c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d108      	bne.n	80011e6 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <EnablePeriClk+0x260>)
 80011d6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	e119      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <EnablePeriClk+0x264>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d108      	bne.n	8001200 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <EnablePeriClk+0x260>)
 80011f0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	e10c      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a49      	ldr	r2, [pc, #292]	; (8001328 <EnablePeriClk+0x268>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d108      	bne.n	800121a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <EnablePeriClk+0x260>)
 800120a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	e0ff      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a43      	ldr	r2, [pc, #268]	; (800132c <EnablePeriClk+0x26c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d108      	bne.n	8001234 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <EnablePeriClk+0x260>)
 8001224:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	e0f2      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3e      	ldr	r2, [pc, #248]	; (8001330 <EnablePeriClk+0x270>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d108      	bne.n	800124e <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <EnablePeriClk+0x260>)
 800123e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	e0e5      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a38      	ldr	r2, [pc, #224]	; (8001334 <EnablePeriClk+0x274>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d108      	bne.n	8001268 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <EnablePeriClk+0x258>)
 8001258:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f043 0210 	orr.w	r2, r3, #16
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	e0d8      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <EnablePeriClk+0x278>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d108      	bne.n	8001282 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <EnablePeriClk+0x260>)
 8001272:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	e0cb      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a2d      	ldr	r2, [pc, #180]	; (800133c <EnablePeriClk+0x27c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d108      	bne.n	800129c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <EnablePeriClk+0x260>)
 800128c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	e0be      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <EnablePeriClk+0x280>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d108      	bne.n	80012b6 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <EnablePeriClk+0x260>)
 80012a6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	e0b1      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <EnablePeriClk+0x284>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d108      	bne.n	80012d0 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <EnablePeriClk+0x260>)
 80012c0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	e0a4      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <EnablePeriClk+0x288>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d139      	bne.n	800134c <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <EnablePeriClk+0x258>)
 80012da:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f043 0220 	orr.w	r2, r3, #32
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	e097      	b.n	800141a <EnablePeriClk+0x35a>
 80012ea:	bf00      	nop
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40023830 	.word	0x40023830
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40021c00 	.word	0x40021c00
 8001310:	40022000 	.word	0x40022000
 8001314:	40013000 	.word	0x40013000
 8001318:	40023844 	.word	0x40023844
 800131c:	40003800 	.word	0x40003800
 8001320:	40023840 	.word	0x40023840
 8001324:	40003c00 	.word	0x40003c00
 8001328:	40005400 	.word	0x40005400
 800132c:	40005800 	.word	0x40005800
 8001330:	40005c00 	.word	0x40005c00
 8001334:	40011000 	.word	0x40011000
 8001338:	40004400 	.word	0x40004400
 800133c:	40004800 	.word	0x40004800
 8001340:	40004c00 	.word	0x40004c00
 8001344:	40005000 	.word	0x40005000
 8001348:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a35      	ldr	r2, [pc, #212]	; (8001424 <EnablePeriClk+0x364>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d108      	bne.n	8001366 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <EnablePeriClk+0x368>)
 8001356:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f043 0210 	orr.w	r2, r3, #16
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	e059      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <EnablePeriClk+0x36c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d108      	bne.n	8001380 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <EnablePeriClk+0x368>)
 8001370:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f043 0220 	orr.w	r2, r3, #32
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	e04c      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <EnablePeriClk+0x370>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d108      	bne.n	800139a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <EnablePeriClk+0x374>)
 800138a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	e03f      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <EnablePeriClk+0x378>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d108      	bne.n	80013b4 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <EnablePeriClk+0x374>)
 80013a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	e032      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ba:	d108      	bne.n	80013ce <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <EnablePeriClk+0x368>)
 80013be:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	e025      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <EnablePeriClk+0x37c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d108      	bne.n	80013e8 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <EnablePeriClk+0x368>)
 80013d8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f043 0202 	orr.w	r2, r3, #2
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
}
 80013e6:	e018      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <EnablePeriClk+0x380>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d108      	bne.n	8001402 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <EnablePeriClk+0x368>)
 80013f2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	e00b      	b.n	800141a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <EnablePeriClk+0x384>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d107      	bne.n	800141a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <EnablePeriClk+0x368>)
 800140c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f043 0208 	orr.w	r2, r3, #8
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40001000 	.word	0x40001000
 8001428:	40023840 	.word	0x40023840
 800142c:	40001400 	.word	0x40001400
 8001430:	40026000 	.word	0x40026000
 8001434:	40023830 	.word	0x40023830
 8001438:	40026400 	.word	0x40026400
 800143c:	40000400 	.word	0x40000400
 8001440:	40000800 	.word	0x40000800
 8001444:	40000c00 	.word	0x40000c00

08001448 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d110      	bne.n	800147a <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	e028      	b.n	80014cc <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d110      	bne.n	80014a4 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0208 	bic.w	r2, r2, #8
 8001490:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e013      	b.n	80014cc <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10f      	bne.n	80014cc <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0208 	orr.w	r2, r2, #8
 80014ba:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0204 	orr.w	r2, r2, #4
 80014ca:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d108      	bne.n	80014e6 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	e00b      	b.n	80014fe <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014fc:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800150c:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6919      	ldr	r1, [r3, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	031a      	lsls	r2, r3, #12
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	e028      	b.n	800158e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d110      	bne.n	8001566 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001552:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	e013      	b.n	800158e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10f      	bne.n	800158e <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800157c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158c:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f868 	bl	800166a <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d110      	bne.n	80015c4 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b0:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 80015c2:	e03d      	b.n	8001640 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d110      	bne.n	80015ee <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015da:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ea:	615a      	str	r2, [r3, #20]
}
 80015ec:	e028      	b.n	8001640 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d110      	bne.n	8001618 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001604:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001614:	615a      	str	r2, [r3, #20]
}
 8001616:	e013      	b.n	8001640 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d10f      	bne.n	8001640 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800162e:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163e:	615a      	str	r2, [r3, #20]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800165e:	60da      	str	r2, [r3, #12]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8001674:	f240 6383 	movw	r3, #1667	; 0x683
 8001678:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	609a      	str	r2, [r3, #8]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <main>:
#include "common_utils.h"

#define READ_BUFFER_SIZE 128

int main(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b0a7      	sub	sp, #156	; 0x9c
 8001690:	af00      	add	r7, sp, #0
	uint16_t eeprom_address = 0x41;		//First byte of Page 1 (Address 65). Page size of EEPROM is 64 bytes
 8001692:	2341      	movs	r3, #65	; 0x41
 8001694:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	char message[]="Hello World!!!";
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <main+0xd8>)
 800169a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800169e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a0:	c407      	stmia	r4!, {r0, r1, r2}
 80016a2:	8023      	strh	r3, [r4, #0]
 80016a4:	3402      	adds	r4, #2
 80016a6:	0c1b      	lsrs	r3, r3, #16
 80016a8:	7023      	strb	r3, [r4, #0]
	char read_buffer[READ_BUFFER_SIZE];

	uint16_t length,i;

	//Configure the Timer
	configure_delay_timer();
 80016aa:	f7fe febb 	bl	8000424 <configure_delay_timer>

	//Configure the UART
	configure_uart();
 80016ae:	f7fe fedb 	bl	8000468 <configure_uart>

	//Configure the I2C Peripheral
	configure_i2c();
 80016b2:	f7fe ff37 	bl	8000524 <configure_i2c>

	//Write Byte to EEPROM
	eeprom_at24cxx_write_byte(eeprom_address,(uint8_t *)message);
 80016b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fe23 	bl	800030c <eeprom_at24cxx_write_byte>

	//Wait for EEPROM Write to be Completed
	delay_us(2000000);
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <main+0xdc>)
 80016c8:	f7fe fe94 	bl	80003f4 <delay_us>

	//Read Byte from EEPROM
	eeprom_at24cxx_read_byte(eeprom_address,(uint8_t *)read_buffer);
 80016cc:	463a      	mov	r2, r7
 80016ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fde3 	bl	80002a0 <eeprom_at24cxx_read_byte>
	printf("Read Byte from Address %x: %c\r\n",eeprom_address,read_buffer[0]);   //Ensure that printf() is redirected to UART in "syscalls.c" file
 80016da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016de:	783a      	ldrb	r2, [r7, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4822      	ldr	r0, [pc, #136]	; (800176c <main+0xe0>)
 80016e4:	f000 fa2c 	bl	8001b40 <iprintf>

	//Write String of Bytes to EEPROM
	length = strlen(message);
 80016e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd7f 	bl	80001f0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	eeprom_at24cxx_write_page(eeprom_address,(uint8_t *)message,length);
 80016f8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80016fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001700:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe31 	bl	800036c <eeprom_at24cxx_write_page>

	//Wait for EEPROM Write to be Completed
	delay_us(5000000);
 800170a:	4819      	ldr	r0, [pc, #100]	; (8001770 <main+0xe4>)
 800170c:	f7fe fe72 	bl	80003f4 <delay_us>

	//Read String of Bytes from EEPROM
	eeprom_at24cxx_read_sequential(eeprom_address,(uint8_t *)read_buffer,length);
 8001710:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8001714:	4639      	mov	r1, r7
 8001716:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fdda 	bl	80002d4 <eeprom_at24cxx_read_sequential>

	//Print the bytes read from EEPROM
	printf("Read String of Bytes from Address %x: ",eeprom_address);   //Ensure that printf() is redirected to UART in "syscalls.c" file
 8001720:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <main+0xe8>)
 8001728:	f000 fa0a 	bl	8001b40 <iprintf>
	for(i=0;i<length;i++)
 800172c:	2300      	movs	r3, #0
 800172e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001732:	e00d      	b.n	8001750 <main+0xc4>
		printf("%c",read_buffer[i]);
 8001734:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001738:	3398      	adds	r3, #152	; 0x98
 800173a:	443b      	add	r3, r7
 800173c:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fa15 	bl	8001b70 <putchar>
	for(i=0;i<length;i++)
 8001746:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800174a:	3301      	adds	r3, #1
 800174c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001750:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001754:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001758:	429a      	cmp	r2, r3
 800175a:	d3eb      	bcc.n	8001734 <main+0xa8>
	printf("\r\n");
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <main+0xec>)
 800175e:	f000 fa89 	bl	8001c74 <puts>

	while(1)
 8001762:	e7fe      	b.n	8001762 <main+0xd6>
 8001764:	08002a98 	.word	0x08002a98
 8001768:	001e8480 	.word	0x001e8480
 800176c:	08002a4c 	.word	0x08002a4c
 8001770:	004c4b40 	.word	0x004c4b40
 8001774:	08002a6c 	.word	0x08002a6c
 8001778:	08002a94 	.word	0x08002a94

0800177c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00a      	b.n	80017a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178e:	f3af 8000 	nop.w
 8001792:	4601      	mov	r1, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf0      	blt.n	800178e <_read+0x12>
  }

  return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e009      	b.n	80017dc <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff0f 	bl	80005f4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf1      	blt.n	80017c8 <_write+0x12>
  }
  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_close>:

int _close(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001814:	605a      	str	r2, [r3, #4]
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <_isatty>:

int _isatty(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f000 f846 	bl	8001910 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	200000d0 	.word	0x200000d0
 80018b8:	200000e8 	.word	0x200000e8

080018bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018ea:	f000 f817 	bl	800191c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ee:	f7ff fecd 	bl	800168c <main>

080018f2 <LoopForever>:

LoopForever:
  b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   r0, =_estack
 80018f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001900:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8001904:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001908:	200000e4 	.word	0x200000e4

0800190c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <__errno>:
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <__errno+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <__libc_init_array>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4d0d      	ldr	r5, [pc, #52]	; (8001954 <__libc_init_array+0x38>)
 8001920:	4c0d      	ldr	r4, [pc, #52]	; (8001958 <__libc_init_array+0x3c>)
 8001922:	1b64      	subs	r4, r4, r5
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	2600      	movs	r6, #0
 8001928:	42a6      	cmp	r6, r4
 800192a:	d109      	bne.n	8001940 <__libc_init_array+0x24>
 800192c:	4d0b      	ldr	r5, [pc, #44]	; (800195c <__libc_init_array+0x40>)
 800192e:	4c0c      	ldr	r4, [pc, #48]	; (8001960 <__libc_init_array+0x44>)
 8001930:	f001 f880 	bl	8002a34 <_init>
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	10a4      	asrs	r4, r4, #2
 8001938:	2600      	movs	r6, #0
 800193a:	42a6      	cmp	r6, r4
 800193c:	d105      	bne.n	800194a <__libc_init_array+0x2e>
 800193e:	bd70      	pop	{r4, r5, r6, pc}
 8001940:	f855 3b04 	ldr.w	r3, [r5], #4
 8001944:	4798      	blx	r3
 8001946:	3601      	adds	r6, #1
 8001948:	e7ee      	b.n	8001928 <__libc_init_array+0xc>
 800194a:	f855 3b04 	ldr.w	r3, [r5], #4
 800194e:	4798      	blx	r3
 8001950:	3601      	adds	r6, #1
 8001952:	e7f2      	b.n	800193a <__libc_init_array+0x1e>
 8001954:	08002b40 	.word	0x08002b40
 8001958:	08002b40 	.word	0x08002b40
 800195c:	08002b40 	.word	0x08002b40
 8001960:	08002b44 	.word	0x08002b44

08001964 <malloc>:
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <malloc+0xc>)
 8001966:	4601      	mov	r1, r0
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f000 b875 	b.w	8001a58 <_malloc_r>
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008

08001974 <memset>:
 8001974:	4402      	add	r2, r0
 8001976:	4603      	mov	r3, r0
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <memset+0xa>
 800197c:	4770      	bx	lr
 800197e:	f803 1b01 	strb.w	r1, [r3], #1
 8001982:	e7f9      	b.n	8001978 <memset+0x4>

08001984 <_free_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4605      	mov	r5, r0
 8001988:	2900      	cmp	r1, #0
 800198a:	d041      	beq.n	8001a10 <_free_r+0x8c>
 800198c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001990:	1f0c      	subs	r4, r1, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	bfb8      	it	lt
 8001996:	18e4      	addlt	r4, r4, r3
 8001998:	f000 fc60 	bl	800225c <__malloc_lock>
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <_free_r+0x90>)
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	b933      	cbnz	r3, 80019b0 <_free_r+0x2c>
 80019a2:	6063      	str	r3, [r4, #4]
 80019a4:	6014      	str	r4, [r2, #0]
 80019a6:	4628      	mov	r0, r5
 80019a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ac:	f000 bc5c 	b.w	8002268 <__malloc_unlock>
 80019b0:	42a3      	cmp	r3, r4
 80019b2:	d908      	bls.n	80019c6 <_free_r+0x42>
 80019b4:	6820      	ldr	r0, [r4, #0]
 80019b6:	1821      	adds	r1, r4, r0
 80019b8:	428b      	cmp	r3, r1
 80019ba:	bf01      	itttt	eq
 80019bc:	6819      	ldreq	r1, [r3, #0]
 80019be:	685b      	ldreq	r3, [r3, #4]
 80019c0:	1809      	addeq	r1, r1, r0
 80019c2:	6021      	streq	r1, [r4, #0]
 80019c4:	e7ed      	b.n	80019a2 <_free_r+0x1e>
 80019c6:	461a      	mov	r2, r3
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	b10b      	cbz	r3, 80019d0 <_free_r+0x4c>
 80019cc:	42a3      	cmp	r3, r4
 80019ce:	d9fa      	bls.n	80019c6 <_free_r+0x42>
 80019d0:	6811      	ldr	r1, [r2, #0]
 80019d2:	1850      	adds	r0, r2, r1
 80019d4:	42a0      	cmp	r0, r4
 80019d6:	d10b      	bne.n	80019f0 <_free_r+0x6c>
 80019d8:	6820      	ldr	r0, [r4, #0]
 80019da:	4401      	add	r1, r0
 80019dc:	1850      	adds	r0, r2, r1
 80019de:	4283      	cmp	r3, r0
 80019e0:	6011      	str	r1, [r2, #0]
 80019e2:	d1e0      	bne.n	80019a6 <_free_r+0x22>
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	6053      	str	r3, [r2, #4]
 80019ea:	4401      	add	r1, r0
 80019ec:	6011      	str	r1, [r2, #0]
 80019ee:	e7da      	b.n	80019a6 <_free_r+0x22>
 80019f0:	d902      	bls.n	80019f8 <_free_r+0x74>
 80019f2:	230c      	movs	r3, #12
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	e7d6      	b.n	80019a6 <_free_r+0x22>
 80019f8:	6820      	ldr	r0, [r4, #0]
 80019fa:	1821      	adds	r1, r4, r0
 80019fc:	428b      	cmp	r3, r1
 80019fe:	bf04      	itt	eq
 8001a00:	6819      	ldreq	r1, [r3, #0]
 8001a02:	685b      	ldreq	r3, [r3, #4]
 8001a04:	6063      	str	r3, [r4, #4]
 8001a06:	bf04      	itt	eq
 8001a08:	1809      	addeq	r1, r1, r0
 8001a0a:	6021      	streq	r1, [r4, #0]
 8001a0c:	6054      	str	r4, [r2, #4]
 8001a0e:	e7ca      	b.n	80019a6 <_free_r+0x22>
 8001a10:	bd38      	pop	{r3, r4, r5, pc}
 8001a12:	bf00      	nop
 8001a14:	200000d4 	.word	0x200000d4

08001a18 <sbrk_aligned>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	4e0e      	ldr	r6, [pc, #56]	; (8001a54 <sbrk_aligned+0x3c>)
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	6831      	ldr	r1, [r6, #0]
 8001a20:	4605      	mov	r5, r0
 8001a22:	b911      	cbnz	r1, 8001a2a <sbrk_aligned+0x12>
 8001a24:	f000 f92e 	bl	8001c84 <_sbrk_r>
 8001a28:	6030      	str	r0, [r6, #0]
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f000 f929 	bl	8001c84 <_sbrk_r>
 8001a32:	1c43      	adds	r3, r0, #1
 8001a34:	d00a      	beq.n	8001a4c <sbrk_aligned+0x34>
 8001a36:	1cc4      	adds	r4, r0, #3
 8001a38:	f024 0403 	bic.w	r4, r4, #3
 8001a3c:	42a0      	cmp	r0, r4
 8001a3e:	d007      	beq.n	8001a50 <sbrk_aligned+0x38>
 8001a40:	1a21      	subs	r1, r4, r0
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 f91e 	bl	8001c84 <_sbrk_r>
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d101      	bne.n	8001a50 <sbrk_aligned+0x38>
 8001a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a50:	4620      	mov	r0, r4
 8001a52:	bd70      	pop	{r4, r5, r6, pc}
 8001a54:	200000d8 	.word	0x200000d8

08001a58 <_malloc_r>:
 8001a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5c:	1ccd      	adds	r5, r1, #3
 8001a5e:	f025 0503 	bic.w	r5, r5, #3
 8001a62:	3508      	adds	r5, #8
 8001a64:	2d0c      	cmp	r5, #12
 8001a66:	bf38      	it	cc
 8001a68:	250c      	movcc	r5, #12
 8001a6a:	2d00      	cmp	r5, #0
 8001a6c:	4607      	mov	r7, r0
 8001a6e:	db01      	blt.n	8001a74 <_malloc_r+0x1c>
 8001a70:	42a9      	cmp	r1, r5
 8001a72:	d905      	bls.n	8001a80 <_malloc_r+0x28>
 8001a74:	230c      	movs	r3, #12
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	2600      	movs	r6, #0
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a80:	4e2e      	ldr	r6, [pc, #184]	; (8001b3c <_malloc_r+0xe4>)
 8001a82:	f000 fbeb 	bl	800225c <__malloc_lock>
 8001a86:	6833      	ldr	r3, [r6, #0]
 8001a88:	461c      	mov	r4, r3
 8001a8a:	bb34      	cbnz	r4, 8001ada <_malloc_r+0x82>
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4638      	mov	r0, r7
 8001a90:	f7ff ffc2 	bl	8001a18 <sbrk_aligned>
 8001a94:	1c43      	adds	r3, r0, #1
 8001a96:	4604      	mov	r4, r0
 8001a98:	d14d      	bne.n	8001b36 <_malloc_r+0xde>
 8001a9a:	6834      	ldr	r4, [r6, #0]
 8001a9c:	4626      	mov	r6, r4
 8001a9e:	2e00      	cmp	r6, #0
 8001aa0:	d140      	bne.n	8001b24 <_malloc_r+0xcc>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	4631      	mov	r1, r6
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	eb04 0803 	add.w	r8, r4, r3
 8001aac:	f000 f8ea 	bl	8001c84 <_sbrk_r>
 8001ab0:	4580      	cmp	r8, r0
 8001ab2:	d13a      	bne.n	8001b2a <_malloc_r+0xd2>
 8001ab4:	6821      	ldr	r1, [r4, #0]
 8001ab6:	3503      	adds	r5, #3
 8001ab8:	1a6d      	subs	r5, r5, r1
 8001aba:	f025 0503 	bic.w	r5, r5, #3
 8001abe:	3508      	adds	r5, #8
 8001ac0:	2d0c      	cmp	r5, #12
 8001ac2:	bf38      	it	cc
 8001ac4:	250c      	movcc	r5, #12
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	4638      	mov	r0, r7
 8001aca:	f7ff ffa5 	bl	8001a18 <sbrk_aligned>
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d02b      	beq.n	8001b2a <_malloc_r+0xd2>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	442b      	add	r3, r5
 8001ad6:	6023      	str	r3, [r4, #0]
 8001ad8:	e00e      	b.n	8001af8 <_malloc_r+0xa0>
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	1b52      	subs	r2, r2, r5
 8001ade:	d41e      	bmi.n	8001b1e <_malloc_r+0xc6>
 8001ae0:	2a0b      	cmp	r2, #11
 8001ae2:	d916      	bls.n	8001b12 <_malloc_r+0xba>
 8001ae4:	1961      	adds	r1, r4, r5
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	6025      	str	r5, [r4, #0]
 8001aea:	bf18      	it	ne
 8001aec:	6059      	strne	r1, [r3, #4]
 8001aee:	6863      	ldr	r3, [r4, #4]
 8001af0:	bf08      	it	eq
 8001af2:	6031      	streq	r1, [r6, #0]
 8001af4:	5162      	str	r2, [r4, r5]
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	4638      	mov	r0, r7
 8001afa:	f104 060b 	add.w	r6, r4, #11
 8001afe:	f000 fbb3 	bl	8002268 <__malloc_unlock>
 8001b02:	f026 0607 	bic.w	r6, r6, #7
 8001b06:	1d23      	adds	r3, r4, #4
 8001b08:	1af2      	subs	r2, r6, r3
 8001b0a:	d0b6      	beq.n	8001a7a <_malloc_r+0x22>
 8001b0c:	1b9b      	subs	r3, r3, r6
 8001b0e:	50a3      	str	r3, [r4, r2]
 8001b10:	e7b3      	b.n	8001a7a <_malloc_r+0x22>
 8001b12:	6862      	ldr	r2, [r4, #4]
 8001b14:	42a3      	cmp	r3, r4
 8001b16:	bf0c      	ite	eq
 8001b18:	6032      	streq	r2, [r6, #0]
 8001b1a:	605a      	strne	r2, [r3, #4]
 8001b1c:	e7ec      	b.n	8001af8 <_malloc_r+0xa0>
 8001b1e:	4623      	mov	r3, r4
 8001b20:	6864      	ldr	r4, [r4, #4]
 8001b22:	e7b2      	b.n	8001a8a <_malloc_r+0x32>
 8001b24:	4634      	mov	r4, r6
 8001b26:	6876      	ldr	r6, [r6, #4]
 8001b28:	e7b9      	b.n	8001a9e <_malloc_r+0x46>
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4638      	mov	r0, r7
 8001b30:	f000 fb9a 	bl	8002268 <__malloc_unlock>
 8001b34:	e7a1      	b.n	8001a7a <_malloc_r+0x22>
 8001b36:	6025      	str	r5, [r4, #0]
 8001b38:	e7de      	b.n	8001af8 <_malloc_r+0xa0>
 8001b3a:	bf00      	nop
 8001b3c:	200000d4 	.word	0x200000d4

08001b40 <iprintf>:
 8001b40:	b40f      	push	{r0, r1, r2, r3}
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <iprintf+0x2c>)
 8001b44:	b513      	push	{r0, r1, r4, lr}
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	b124      	cbz	r4, 8001b54 <iprintf+0x14>
 8001b4a:	69a3      	ldr	r3, [r4, #24]
 8001b4c:	b913      	cbnz	r3, 8001b54 <iprintf+0x14>
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f000 fa7e 	bl	8002050 <__sinit>
 8001b54:	ab05      	add	r3, sp, #20
 8001b56:	9a04      	ldr	r2, [sp, #16]
 8001b58:	68a1      	ldr	r1, [r4, #8]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 fbb1 	bl	80022c4 <_vfiprintf_r>
 8001b62:	b002      	add	sp, #8
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b68:	b004      	add	sp, #16
 8001b6a:	4770      	bx	lr
 8001b6c:	20000008 	.word	0x20000008

08001b70 <putchar>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <putchar+0x24>)
 8001b74:	681c      	ldr	r4, [r3, #0]
 8001b76:	4605      	mov	r5, r0
 8001b78:	b124      	cbz	r4, 8001b84 <putchar+0x14>
 8001b7a:	69a3      	ldr	r3, [r4, #24]
 8001b7c:	b913      	cbnz	r3, 8001b84 <putchar+0x14>
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f000 fa66 	bl	8002050 <__sinit>
 8001b84:	68a2      	ldr	r2, [r4, #8]
 8001b86:	4629      	mov	r1, r5
 8001b88:	4620      	mov	r0, r4
 8001b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b8e:	f000 be5d 	b.w	800284c <_putc_r>
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008

08001b98 <_puts_r>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	460e      	mov	r6, r1
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b118      	cbz	r0, 8001ba8 <_puts_r+0x10>
 8001ba0:	6983      	ldr	r3, [r0, #24]
 8001ba2:	b90b      	cbnz	r3, 8001ba8 <_puts_r+0x10>
 8001ba4:	f000 fa54 	bl	8002050 <__sinit>
 8001ba8:	69ab      	ldr	r3, [r5, #24]
 8001baa:	68ac      	ldr	r4, [r5, #8]
 8001bac:	b913      	cbnz	r3, 8001bb4 <_puts_r+0x1c>
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 fa4e 	bl	8002050 <__sinit>
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <_puts_r+0xd0>)
 8001bb6:	429c      	cmp	r4, r3
 8001bb8:	d120      	bne.n	8001bfc <_puts_r+0x64>
 8001bba:	686c      	ldr	r4, [r5, #4]
 8001bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bbe:	07db      	lsls	r3, r3, #31
 8001bc0:	d405      	bmi.n	8001bce <_puts_r+0x36>
 8001bc2:	89a3      	ldrh	r3, [r4, #12]
 8001bc4:	0598      	lsls	r0, r3, #22
 8001bc6:	d402      	bmi.n	8001bce <_puts_r+0x36>
 8001bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bca:	f000 fadf 	bl	800218c <__retarget_lock_acquire_recursive>
 8001bce:	89a3      	ldrh	r3, [r4, #12]
 8001bd0:	0719      	lsls	r1, r3, #28
 8001bd2:	d51d      	bpl.n	8001c10 <_puts_r+0x78>
 8001bd4:	6923      	ldr	r3, [r4, #16]
 8001bd6:	b1db      	cbz	r3, 8001c10 <_puts_r+0x78>
 8001bd8:	3e01      	subs	r6, #1
 8001bda:	68a3      	ldr	r3, [r4, #8]
 8001bdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60a3      	str	r3, [r4, #8]
 8001be4:	bb39      	cbnz	r1, 8001c36 <_puts_r+0x9e>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da38      	bge.n	8001c5c <_puts_r+0xc4>
 8001bea:	4622      	mov	r2, r4
 8001bec:	210a      	movs	r1, #10
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 f858 	bl	8001ca4 <__swbuf_r>
 8001bf4:	3001      	adds	r0, #1
 8001bf6:	d011      	beq.n	8001c1c <_puts_r+0x84>
 8001bf8:	250a      	movs	r5, #10
 8001bfa:	e011      	b.n	8001c20 <_puts_r+0x88>
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <_puts_r+0xd4>)
 8001bfe:	429c      	cmp	r4, r3
 8001c00:	d101      	bne.n	8001c06 <_puts_r+0x6e>
 8001c02:	68ac      	ldr	r4, [r5, #8]
 8001c04:	e7da      	b.n	8001bbc <_puts_r+0x24>
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <_puts_r+0xd8>)
 8001c08:	429c      	cmp	r4, r3
 8001c0a:	bf08      	it	eq
 8001c0c:	68ec      	ldreq	r4, [r5, #12]
 8001c0e:	e7d5      	b.n	8001bbc <_puts_r+0x24>
 8001c10:	4621      	mov	r1, r4
 8001c12:	4628      	mov	r0, r5
 8001c14:	f000 f898 	bl	8001d48 <__swsetup_r>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d0dd      	beq.n	8001bd8 <_puts_r+0x40>
 8001c1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c22:	07da      	lsls	r2, r3, #31
 8001c24:	d405      	bmi.n	8001c32 <_puts_r+0x9a>
 8001c26:	89a3      	ldrh	r3, [r4, #12]
 8001c28:	059b      	lsls	r3, r3, #22
 8001c2a:	d402      	bmi.n	8001c32 <_puts_r+0x9a>
 8001c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c2e:	f000 faae 	bl	800218e <__retarget_lock_release_recursive>
 8001c32:	4628      	mov	r0, r5
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da04      	bge.n	8001c44 <_puts_r+0xac>
 8001c3a:	69a2      	ldr	r2, [r4, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dc06      	bgt.n	8001c4e <_puts_r+0xb6>
 8001c40:	290a      	cmp	r1, #10
 8001c42:	d004      	beq.n	8001c4e <_puts_r+0xb6>
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	6022      	str	r2, [r4, #0]
 8001c4a:	7019      	strb	r1, [r3, #0]
 8001c4c:	e7c5      	b.n	8001bda <_puts_r+0x42>
 8001c4e:	4622      	mov	r2, r4
 8001c50:	4628      	mov	r0, r5
 8001c52:	f000 f827 	bl	8001ca4 <__swbuf_r>
 8001c56:	3001      	adds	r0, #1
 8001c58:	d1bf      	bne.n	8001bda <_puts_r+0x42>
 8001c5a:	e7df      	b.n	8001c1c <_puts_r+0x84>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	250a      	movs	r5, #10
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	6022      	str	r2, [r4, #0]
 8001c64:	701d      	strb	r5, [r3, #0]
 8001c66:	e7db      	b.n	8001c20 <_puts_r+0x88>
 8001c68:	08002acc 	.word	0x08002acc
 8001c6c:	08002aec 	.word	0x08002aec
 8001c70:	08002aac 	.word	0x08002aac

08001c74 <puts>:
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <puts+0xc>)
 8001c76:	4601      	mov	r1, r0
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f7ff bf8d 	b.w	8001b98 <_puts_r>
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <_sbrk_r>:
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4d06      	ldr	r5, [pc, #24]	; (8001ca0 <_sbrk_r+0x1c>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	f7ff fdde 	bl	8001850 <_sbrk>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_sbrk_r+0x1a>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_sbrk_r+0x1a>
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	200000e0 	.word	0x200000e0

08001ca4 <__swbuf_r>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	460e      	mov	r6, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	4605      	mov	r5, r0
 8001cac:	b118      	cbz	r0, 8001cb6 <__swbuf_r+0x12>
 8001cae:	6983      	ldr	r3, [r0, #24]
 8001cb0:	b90b      	cbnz	r3, 8001cb6 <__swbuf_r+0x12>
 8001cb2:	f000 f9cd 	bl	8002050 <__sinit>
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <__swbuf_r+0x98>)
 8001cb8:	429c      	cmp	r4, r3
 8001cba:	d12b      	bne.n	8001d14 <__swbuf_r+0x70>
 8001cbc:	686c      	ldr	r4, [r5, #4]
 8001cbe:	69a3      	ldr	r3, [r4, #24]
 8001cc0:	60a3      	str	r3, [r4, #8]
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	071a      	lsls	r2, r3, #28
 8001cc6:	d52f      	bpl.n	8001d28 <__swbuf_r+0x84>
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	b36b      	cbz	r3, 8001d28 <__swbuf_r+0x84>
 8001ccc:	6923      	ldr	r3, [r4, #16]
 8001cce:	6820      	ldr	r0, [r4, #0]
 8001cd0:	1ac0      	subs	r0, r0, r3
 8001cd2:	6963      	ldr	r3, [r4, #20]
 8001cd4:	b2f6      	uxtb	r6, r6
 8001cd6:	4283      	cmp	r3, r0
 8001cd8:	4637      	mov	r7, r6
 8001cda:	dc04      	bgt.n	8001ce6 <__swbuf_r+0x42>
 8001cdc:	4621      	mov	r1, r4
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f000 f922 	bl	8001f28 <_fflush_r>
 8001ce4:	bb30      	cbnz	r0, 8001d34 <__swbuf_r+0x90>
 8001ce6:	68a3      	ldr	r3, [r4, #8]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60a3      	str	r3, [r4, #8]
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	6022      	str	r2, [r4, #0]
 8001cf2:	701e      	strb	r6, [r3, #0]
 8001cf4:	6963      	ldr	r3, [r4, #20]
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	4283      	cmp	r3, r0
 8001cfa:	d004      	beq.n	8001d06 <__swbuf_r+0x62>
 8001cfc:	89a3      	ldrh	r3, [r4, #12]
 8001cfe:	07db      	lsls	r3, r3, #31
 8001d00:	d506      	bpl.n	8001d10 <__swbuf_r+0x6c>
 8001d02:	2e0a      	cmp	r6, #10
 8001d04:	d104      	bne.n	8001d10 <__swbuf_r+0x6c>
 8001d06:	4621      	mov	r1, r4
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f000 f90d 	bl	8001f28 <_fflush_r>
 8001d0e:	b988      	cbnz	r0, 8001d34 <__swbuf_r+0x90>
 8001d10:	4638      	mov	r0, r7
 8001d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <__swbuf_r+0x9c>)
 8001d16:	429c      	cmp	r4, r3
 8001d18:	d101      	bne.n	8001d1e <__swbuf_r+0x7a>
 8001d1a:	68ac      	ldr	r4, [r5, #8]
 8001d1c:	e7cf      	b.n	8001cbe <__swbuf_r+0x1a>
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <__swbuf_r+0xa0>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	bf08      	it	eq
 8001d24:	68ec      	ldreq	r4, [r5, #12]
 8001d26:	e7ca      	b.n	8001cbe <__swbuf_r+0x1a>
 8001d28:	4621      	mov	r1, r4
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f000 f80c 	bl	8001d48 <__swsetup_r>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d0cb      	beq.n	8001ccc <__swbuf_r+0x28>
 8001d34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001d38:	e7ea      	b.n	8001d10 <__swbuf_r+0x6c>
 8001d3a:	bf00      	nop
 8001d3c:	08002acc 	.word	0x08002acc
 8001d40:	08002aec 	.word	0x08002aec
 8001d44:	08002aac 	.word	0x08002aac

08001d48 <__swsetup_r>:
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <__swsetup_r+0xcc>)
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	681d      	ldr	r5, [r3, #0]
 8001d4e:	4606      	mov	r6, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	b125      	cbz	r5, 8001d5e <__swsetup_r+0x16>
 8001d54:	69ab      	ldr	r3, [r5, #24]
 8001d56:	b913      	cbnz	r3, 8001d5e <__swsetup_r+0x16>
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f000 f979 	bl	8002050 <__sinit>
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <__swsetup_r+0xd0>)
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d10f      	bne.n	8001d84 <__swsetup_r+0x3c>
 8001d64:	686c      	ldr	r4, [r5, #4]
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d6c:	0719      	lsls	r1, r3, #28
 8001d6e:	d42c      	bmi.n	8001dca <__swsetup_r+0x82>
 8001d70:	06dd      	lsls	r5, r3, #27
 8001d72:	d411      	bmi.n	8001d98 <__swsetup_r+0x50>
 8001d74:	2309      	movs	r3, #9
 8001d76:	6033      	str	r3, [r6, #0]
 8001d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d7c:	81a3      	strh	r3, [r4, #12]
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d82:	e03e      	b.n	8001e02 <__swsetup_r+0xba>
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <__swsetup_r+0xd4>)
 8001d86:	429c      	cmp	r4, r3
 8001d88:	d101      	bne.n	8001d8e <__swsetup_r+0x46>
 8001d8a:	68ac      	ldr	r4, [r5, #8]
 8001d8c:	e7eb      	b.n	8001d66 <__swsetup_r+0x1e>
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <__swsetup_r+0xd8>)
 8001d90:	429c      	cmp	r4, r3
 8001d92:	bf08      	it	eq
 8001d94:	68ec      	ldreq	r4, [r5, #12]
 8001d96:	e7e6      	b.n	8001d66 <__swsetup_r+0x1e>
 8001d98:	0758      	lsls	r0, r3, #29
 8001d9a:	d512      	bpl.n	8001dc2 <__swsetup_r+0x7a>
 8001d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d9e:	b141      	cbz	r1, 8001db2 <__swsetup_r+0x6a>
 8001da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001da4:	4299      	cmp	r1, r3
 8001da6:	d002      	beq.n	8001dae <__swsetup_r+0x66>
 8001da8:	4630      	mov	r0, r6
 8001daa:	f7ff fdeb 	bl	8001984 <_free_r>
 8001dae:	2300      	movs	r3, #0
 8001db0:	6363      	str	r3, [r4, #52]	; 0x34
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	6063      	str	r3, [r4, #4]
 8001dbe:	6923      	ldr	r3, [r4, #16]
 8001dc0:	6023      	str	r3, [r4, #0]
 8001dc2:	89a3      	ldrh	r3, [r4, #12]
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	81a3      	strh	r3, [r4, #12]
 8001dca:	6923      	ldr	r3, [r4, #16]
 8001dcc:	b94b      	cbnz	r3, 8001de2 <__swsetup_r+0x9a>
 8001dce:	89a3      	ldrh	r3, [r4, #12]
 8001dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd8:	d003      	beq.n	8001de2 <__swsetup_r+0x9a>
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f000 f9fd 	bl	80021dc <__smakebuf_r>
 8001de2:	89a0      	ldrh	r0, [r4, #12]
 8001de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001de8:	f010 0301 	ands.w	r3, r0, #1
 8001dec:	d00a      	beq.n	8001e04 <__swsetup_r+0xbc>
 8001dee:	2300      	movs	r3, #0
 8001df0:	60a3      	str	r3, [r4, #8]
 8001df2:	6963      	ldr	r3, [r4, #20]
 8001df4:	425b      	negs	r3, r3
 8001df6:	61a3      	str	r3, [r4, #24]
 8001df8:	6923      	ldr	r3, [r4, #16]
 8001dfa:	b943      	cbnz	r3, 8001e0e <__swsetup_r+0xc6>
 8001dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e00:	d1ba      	bne.n	8001d78 <__swsetup_r+0x30>
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	0781      	lsls	r1, r0, #30
 8001e06:	bf58      	it	pl
 8001e08:	6963      	ldrpl	r3, [r4, #20]
 8001e0a:	60a3      	str	r3, [r4, #8]
 8001e0c:	e7f4      	b.n	8001df8 <__swsetup_r+0xb0>
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e7f7      	b.n	8001e02 <__swsetup_r+0xba>
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008
 8001e18:	08002acc 	.word	0x08002acc
 8001e1c:	08002aec 	.word	0x08002aec
 8001e20:	08002aac 	.word	0x08002aac

08001e24 <__sflush_r>:
 8001e24:	898a      	ldrh	r2, [r1, #12]
 8001e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e28:	4605      	mov	r5, r0
 8001e2a:	0710      	lsls	r0, r2, #28
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	d457      	bmi.n	8001ee0 <__sflush_r+0xbc>
 8001e30:	684b      	ldr	r3, [r1, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dc04      	bgt.n	8001e40 <__sflush_r+0x1c>
 8001e36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	dc01      	bgt.n	8001e40 <__sflush_r+0x1c>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e42:	2e00      	cmp	r6, #0
 8001e44:	d0fa      	beq.n	8001e3c <__sflush_r+0x18>
 8001e46:	2300      	movs	r3, #0
 8001e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e4c:	682f      	ldr	r7, [r5, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	d032      	beq.n	8001eb8 <__sflush_r+0x94>
 8001e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e54:	89a3      	ldrh	r3, [r4, #12]
 8001e56:	075a      	lsls	r2, r3, #29
 8001e58:	d505      	bpl.n	8001e66 <__sflush_r+0x42>
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	1ac0      	subs	r0, r0, r3
 8001e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e60:	b10b      	cbz	r3, 8001e66 <__sflush_r+0x42>
 8001e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e64:	1ac0      	subs	r0, r0, r3
 8001e66:	2300      	movs	r3, #0
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e6c:	6a21      	ldr	r1, [r4, #32]
 8001e6e:	4628      	mov	r0, r5
 8001e70:	47b0      	blx	r6
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	d106      	bne.n	8001e86 <__sflush_r+0x62>
 8001e78:	6829      	ldr	r1, [r5, #0]
 8001e7a:	291d      	cmp	r1, #29
 8001e7c:	d82c      	bhi.n	8001ed8 <__sflush_r+0xb4>
 8001e7e:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <__sflush_r+0x100>)
 8001e80:	40ca      	lsrs	r2, r1
 8001e82:	07d6      	lsls	r6, r2, #31
 8001e84:	d528      	bpl.n	8001ed8 <__sflush_r+0xb4>
 8001e86:	2200      	movs	r2, #0
 8001e88:	6062      	str	r2, [r4, #4]
 8001e8a:	04d9      	lsls	r1, r3, #19
 8001e8c:	6922      	ldr	r2, [r4, #16]
 8001e8e:	6022      	str	r2, [r4, #0]
 8001e90:	d504      	bpl.n	8001e9c <__sflush_r+0x78>
 8001e92:	1c42      	adds	r2, r0, #1
 8001e94:	d101      	bne.n	8001e9a <__sflush_r+0x76>
 8001e96:	682b      	ldr	r3, [r5, #0]
 8001e98:	b903      	cbnz	r3, 8001e9c <__sflush_r+0x78>
 8001e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e9e:	602f      	str	r7, [r5, #0]
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d0cb      	beq.n	8001e3c <__sflush_r+0x18>
 8001ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d002      	beq.n	8001eb2 <__sflush_r+0x8e>
 8001eac:	4628      	mov	r0, r5
 8001eae:	f7ff fd69 	bl	8001984 <_free_r>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8001eb6:	e7c2      	b.n	8001e3e <__sflush_r+0x1a>
 8001eb8:	6a21      	ldr	r1, [r4, #32]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	47b0      	blx	r6
 8001ec0:	1c41      	adds	r1, r0, #1
 8001ec2:	d1c7      	bne.n	8001e54 <__sflush_r+0x30>
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0c4      	beq.n	8001e54 <__sflush_r+0x30>
 8001eca:	2b1d      	cmp	r3, #29
 8001ecc:	d001      	beq.n	8001ed2 <__sflush_r+0xae>
 8001ece:	2b16      	cmp	r3, #22
 8001ed0:	d101      	bne.n	8001ed6 <__sflush_r+0xb2>
 8001ed2:	602f      	str	r7, [r5, #0]
 8001ed4:	e7b2      	b.n	8001e3c <__sflush_r+0x18>
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	e7ae      	b.n	8001e3e <__sflush_r+0x1a>
 8001ee0:	690f      	ldr	r7, [r1, #16]
 8001ee2:	2f00      	cmp	r7, #0
 8001ee4:	d0aa      	beq.n	8001e3c <__sflush_r+0x18>
 8001ee6:	0793      	lsls	r3, r2, #30
 8001ee8:	680e      	ldr	r6, [r1, #0]
 8001eea:	bf08      	it	eq
 8001eec:	694b      	ldreq	r3, [r1, #20]
 8001eee:	600f      	str	r7, [r1, #0]
 8001ef0:	bf18      	it	ne
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	1bf6      	subs	r6, r6, r7
 8001ef6:	608b      	str	r3, [r1, #8]
 8001ef8:	2e00      	cmp	r6, #0
 8001efa:	dd9f      	ble.n	8001e3c <__sflush_r+0x18>
 8001efc:	6a21      	ldr	r1, [r4, #32]
 8001efe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001f02:	4633      	mov	r3, r6
 8001f04:	463a      	mov	r2, r7
 8001f06:	4628      	mov	r0, r5
 8001f08:	47e0      	blx	ip
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	dc06      	bgt.n	8001f1c <__sflush_r+0xf8>
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f14:	81a3      	strh	r3, [r4, #12]
 8001f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1a:	e790      	b.n	8001e3e <__sflush_r+0x1a>
 8001f1c:	4407      	add	r7, r0
 8001f1e:	1a36      	subs	r6, r6, r0
 8001f20:	e7ea      	b.n	8001ef8 <__sflush_r+0xd4>
 8001f22:	bf00      	nop
 8001f24:	20400001 	.word	0x20400001

08001f28 <_fflush_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	690b      	ldr	r3, [r1, #16]
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	b913      	cbnz	r3, 8001f38 <_fflush_r+0x10>
 8001f32:	2500      	movs	r5, #0
 8001f34:	4628      	mov	r0, r5
 8001f36:	bd38      	pop	{r3, r4, r5, pc}
 8001f38:	b118      	cbz	r0, 8001f42 <_fflush_r+0x1a>
 8001f3a:	6983      	ldr	r3, [r0, #24]
 8001f3c:	b90b      	cbnz	r3, 8001f42 <_fflush_r+0x1a>
 8001f3e:	f000 f887 	bl	8002050 <__sinit>
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <_fflush_r+0x6c>)
 8001f44:	429c      	cmp	r4, r3
 8001f46:	d11b      	bne.n	8001f80 <_fflush_r+0x58>
 8001f48:	686c      	ldr	r4, [r5, #4]
 8001f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ef      	beq.n	8001f32 <_fflush_r+0xa>
 8001f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f54:	07d0      	lsls	r0, r2, #31
 8001f56:	d404      	bmi.n	8001f62 <_fflush_r+0x3a>
 8001f58:	0599      	lsls	r1, r3, #22
 8001f5a:	d402      	bmi.n	8001f62 <_fflush_r+0x3a>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f5e:	f000 f915 	bl	800218c <__retarget_lock_acquire_recursive>
 8001f62:	4628      	mov	r0, r5
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7ff ff5d 	bl	8001e24 <__sflush_r>
 8001f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f6c:	07da      	lsls	r2, r3, #31
 8001f6e:	4605      	mov	r5, r0
 8001f70:	d4e0      	bmi.n	8001f34 <_fflush_r+0xc>
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	059b      	lsls	r3, r3, #22
 8001f76:	d4dd      	bmi.n	8001f34 <_fflush_r+0xc>
 8001f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f7a:	f000 f908 	bl	800218e <__retarget_lock_release_recursive>
 8001f7e:	e7d9      	b.n	8001f34 <_fflush_r+0xc>
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <_fflush_r+0x70>)
 8001f82:	429c      	cmp	r4, r3
 8001f84:	d101      	bne.n	8001f8a <_fflush_r+0x62>
 8001f86:	68ac      	ldr	r4, [r5, #8]
 8001f88:	e7df      	b.n	8001f4a <_fflush_r+0x22>
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <_fflush_r+0x74>)
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	bf08      	it	eq
 8001f90:	68ec      	ldreq	r4, [r5, #12]
 8001f92:	e7da      	b.n	8001f4a <_fflush_r+0x22>
 8001f94:	08002acc 	.word	0x08002acc
 8001f98:	08002aec 	.word	0x08002aec
 8001f9c:	08002aac 	.word	0x08002aac

08001fa0 <std>:
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	b510      	push	{r4, lr}
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8001faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fae:	6083      	str	r3, [r0, #8]
 8001fb0:	8181      	strh	r1, [r0, #12]
 8001fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8001fb4:	81c2      	strh	r2, [r0, #14]
 8001fb6:	6183      	str	r3, [r0, #24]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2208      	movs	r2, #8
 8001fbc:	305c      	adds	r0, #92	; 0x5c
 8001fbe:	f7ff fcd9 	bl	8001974 <memset>
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <std+0x38>)
 8001fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <std+0x3c>)
 8001fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <std+0x40>)
 8001fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <std+0x44>)
 8001fd0:	6224      	str	r4, [r4, #32]
 8001fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8001fd4:	bd10      	pop	{r4, pc}
 8001fd6:	bf00      	nop
 8001fd8:	080028dd 	.word	0x080028dd
 8001fdc:	080028ff 	.word	0x080028ff
 8001fe0:	08002937 	.word	0x08002937
 8001fe4:	0800295b 	.word	0x0800295b

08001fe8 <_cleanup_r>:
 8001fe8:	4901      	ldr	r1, [pc, #4]	; (8001ff0 <_cleanup_r+0x8>)
 8001fea:	f000 b8af 	b.w	800214c <_fwalk_reent>
 8001fee:	bf00      	nop
 8001ff0:	08001f29 	.word	0x08001f29

08001ff4 <__sfmoreglue>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2268      	movs	r2, #104	; 0x68
 8001ff8:	1e4d      	subs	r5, r1, #1
 8001ffa:	4355      	muls	r5, r2
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002002:	f7ff fd29 	bl	8001a58 <_malloc_r>
 8002006:	4604      	mov	r4, r0
 8002008:	b140      	cbz	r0, 800201c <__sfmoreglue+0x28>
 800200a:	2100      	movs	r1, #0
 800200c:	e9c0 1600 	strd	r1, r6, [r0]
 8002010:	300c      	adds	r0, #12
 8002012:	60a0      	str	r0, [r4, #8]
 8002014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002018:	f7ff fcac 	bl	8001974 <memset>
 800201c:	4620      	mov	r0, r4
 800201e:	bd70      	pop	{r4, r5, r6, pc}

08002020 <__sfp_lock_acquire>:
 8002020:	4801      	ldr	r0, [pc, #4]	; (8002028 <__sfp_lock_acquire+0x8>)
 8002022:	f000 b8b3 	b.w	800218c <__retarget_lock_acquire_recursive>
 8002026:	bf00      	nop
 8002028:	200000dd 	.word	0x200000dd

0800202c <__sfp_lock_release>:
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <__sfp_lock_release+0x8>)
 800202e:	f000 b8ae 	b.w	800218e <__retarget_lock_release_recursive>
 8002032:	bf00      	nop
 8002034:	200000dd 	.word	0x200000dd

08002038 <__sinit_lock_acquire>:
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <__sinit_lock_acquire+0x8>)
 800203a:	f000 b8a7 	b.w	800218c <__retarget_lock_acquire_recursive>
 800203e:	bf00      	nop
 8002040:	200000de 	.word	0x200000de

08002044 <__sinit_lock_release>:
 8002044:	4801      	ldr	r0, [pc, #4]	; (800204c <__sinit_lock_release+0x8>)
 8002046:	f000 b8a2 	b.w	800218e <__retarget_lock_release_recursive>
 800204a:	bf00      	nop
 800204c:	200000de 	.word	0x200000de

08002050 <__sinit>:
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	f7ff fff0 	bl	8002038 <__sinit_lock_acquire>
 8002058:	69a3      	ldr	r3, [r4, #24]
 800205a:	b11b      	cbz	r3, 8002064 <__sinit+0x14>
 800205c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002060:	f7ff bff0 	b.w	8002044 <__sinit_lock_release>
 8002064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002068:	6523      	str	r3, [r4, #80]	; 0x50
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <__sinit+0x68>)
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <__sinit+0x6c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	62a2      	str	r2, [r4, #40]	; 0x28
 8002072:	42a3      	cmp	r3, r4
 8002074:	bf04      	itt	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	61a3      	streq	r3, [r4, #24]
 800207a:	4620      	mov	r0, r4
 800207c:	f000 f820 	bl	80020c0 <__sfp>
 8002080:	6060      	str	r0, [r4, #4]
 8002082:	4620      	mov	r0, r4
 8002084:	f000 f81c 	bl	80020c0 <__sfp>
 8002088:	60a0      	str	r0, [r4, #8]
 800208a:	4620      	mov	r0, r4
 800208c:	f000 f818 	bl	80020c0 <__sfp>
 8002090:	2200      	movs	r2, #0
 8002092:	60e0      	str	r0, [r4, #12]
 8002094:	2104      	movs	r1, #4
 8002096:	6860      	ldr	r0, [r4, #4]
 8002098:	f7ff ff82 	bl	8001fa0 <std>
 800209c:	68a0      	ldr	r0, [r4, #8]
 800209e:	2201      	movs	r2, #1
 80020a0:	2109      	movs	r1, #9
 80020a2:	f7ff ff7d 	bl	8001fa0 <std>
 80020a6:	68e0      	ldr	r0, [r4, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	2112      	movs	r1, #18
 80020ac:	f7ff ff78 	bl	8001fa0 <std>
 80020b0:	2301      	movs	r3, #1
 80020b2:	61a3      	str	r3, [r4, #24]
 80020b4:	e7d2      	b.n	800205c <__sinit+0xc>
 80020b6:	bf00      	nop
 80020b8:	08002aa8 	.word	0x08002aa8
 80020bc:	08001fe9 	.word	0x08001fe9

080020c0 <__sfp>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	4607      	mov	r7, r0
 80020c4:	f7ff ffac 	bl	8002020 <__sfp_lock_acquire>
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <__sfp+0x84>)
 80020ca:	681e      	ldr	r6, [r3, #0]
 80020cc:	69b3      	ldr	r3, [r6, #24]
 80020ce:	b913      	cbnz	r3, 80020d6 <__sfp+0x16>
 80020d0:	4630      	mov	r0, r6
 80020d2:	f7ff ffbd 	bl	8002050 <__sinit>
 80020d6:	3648      	adds	r6, #72	; 0x48
 80020d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020dc:	3b01      	subs	r3, #1
 80020de:	d503      	bpl.n	80020e8 <__sfp+0x28>
 80020e0:	6833      	ldr	r3, [r6, #0]
 80020e2:	b30b      	cbz	r3, 8002128 <__sfp+0x68>
 80020e4:	6836      	ldr	r6, [r6, #0]
 80020e6:	e7f7      	b.n	80020d8 <__sfp+0x18>
 80020e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020ec:	b9d5      	cbnz	r5, 8002124 <__sfp+0x64>
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <__sfp+0x88>)
 80020f0:	60e3      	str	r3, [r4, #12]
 80020f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020f6:	6665      	str	r5, [r4, #100]	; 0x64
 80020f8:	f000 f847 	bl	800218a <__retarget_lock_init_recursive>
 80020fc:	f7ff ff96 	bl	800202c <__sfp_lock_release>
 8002100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002108:	6025      	str	r5, [r4, #0]
 800210a:	61a5      	str	r5, [r4, #24]
 800210c:	2208      	movs	r2, #8
 800210e:	4629      	mov	r1, r5
 8002110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002114:	f7ff fc2e 	bl	8001974 <memset>
 8002118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800211c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002120:	4620      	mov	r0, r4
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002124:	3468      	adds	r4, #104	; 0x68
 8002126:	e7d9      	b.n	80020dc <__sfp+0x1c>
 8002128:	2104      	movs	r1, #4
 800212a:	4638      	mov	r0, r7
 800212c:	f7ff ff62 	bl	8001ff4 <__sfmoreglue>
 8002130:	4604      	mov	r4, r0
 8002132:	6030      	str	r0, [r6, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	d1d5      	bne.n	80020e4 <__sfp+0x24>
 8002138:	f7ff ff78 	bl	800202c <__sfp_lock_release>
 800213c:	230c      	movs	r3, #12
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	e7ee      	b.n	8002120 <__sfp+0x60>
 8002142:	bf00      	nop
 8002144:	08002aa8 	.word	0x08002aa8
 8002148:	ffff0001 	.word	0xffff0001

0800214c <_fwalk_reent>:
 800214c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002150:	4606      	mov	r6, r0
 8002152:	4688      	mov	r8, r1
 8002154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002158:	2700      	movs	r7, #0
 800215a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800215e:	f1b9 0901 	subs.w	r9, r9, #1
 8002162:	d505      	bpl.n	8002170 <_fwalk_reent+0x24>
 8002164:	6824      	ldr	r4, [r4, #0]
 8002166:	2c00      	cmp	r4, #0
 8002168:	d1f7      	bne.n	800215a <_fwalk_reent+0xe>
 800216a:	4638      	mov	r0, r7
 800216c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002170:	89ab      	ldrh	r3, [r5, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d907      	bls.n	8002186 <_fwalk_reent+0x3a>
 8002176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800217a:	3301      	adds	r3, #1
 800217c:	d003      	beq.n	8002186 <_fwalk_reent+0x3a>
 800217e:	4629      	mov	r1, r5
 8002180:	4630      	mov	r0, r6
 8002182:	47c0      	blx	r8
 8002184:	4307      	orrs	r7, r0
 8002186:	3568      	adds	r5, #104	; 0x68
 8002188:	e7e9      	b.n	800215e <_fwalk_reent+0x12>

0800218a <__retarget_lock_init_recursive>:
 800218a:	4770      	bx	lr

0800218c <__retarget_lock_acquire_recursive>:
 800218c:	4770      	bx	lr

0800218e <__retarget_lock_release_recursive>:
 800218e:	4770      	bx	lr

08002190 <__swhatbuf_r>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	460e      	mov	r6, r1
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	2900      	cmp	r1, #0
 800219a:	b096      	sub	sp, #88	; 0x58
 800219c:	4614      	mov	r4, r2
 800219e:	461d      	mov	r5, r3
 80021a0:	da08      	bge.n	80021b4 <__swhatbuf_r+0x24>
 80021a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	602a      	str	r2, [r5, #0]
 80021aa:	061a      	lsls	r2, r3, #24
 80021ac:	d410      	bmi.n	80021d0 <__swhatbuf_r+0x40>
 80021ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b2:	e00e      	b.n	80021d2 <__swhatbuf_r+0x42>
 80021b4:	466a      	mov	r2, sp
 80021b6:	f000 fbf7 	bl	80029a8 <_fstat_r>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	dbf1      	blt.n	80021a2 <__swhatbuf_r+0x12>
 80021be:	9a01      	ldr	r2, [sp, #4]
 80021c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021c8:	425a      	negs	r2, r3
 80021ca:	415a      	adcs	r2, r3
 80021cc:	602a      	str	r2, [r5, #0]
 80021ce:	e7ee      	b.n	80021ae <__swhatbuf_r+0x1e>
 80021d0:	2340      	movs	r3, #64	; 0x40
 80021d2:	2000      	movs	r0, #0
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	b016      	add	sp, #88	; 0x58
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080021dc <__smakebuf_r>:
 80021dc:	898b      	ldrh	r3, [r1, #12]
 80021de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021e0:	079d      	lsls	r5, r3, #30
 80021e2:	4606      	mov	r6, r0
 80021e4:	460c      	mov	r4, r1
 80021e6:	d507      	bpl.n	80021f8 <__smakebuf_r+0x1c>
 80021e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	6123      	str	r3, [r4, #16]
 80021f0:	2301      	movs	r3, #1
 80021f2:	6163      	str	r3, [r4, #20]
 80021f4:	b002      	add	sp, #8
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	ab01      	add	r3, sp, #4
 80021fa:	466a      	mov	r2, sp
 80021fc:	f7ff ffc8 	bl	8002190 <__swhatbuf_r>
 8002200:	9900      	ldr	r1, [sp, #0]
 8002202:	4605      	mov	r5, r0
 8002204:	4630      	mov	r0, r6
 8002206:	f7ff fc27 	bl	8001a58 <_malloc_r>
 800220a:	b948      	cbnz	r0, 8002220 <__smakebuf_r+0x44>
 800220c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002210:	059a      	lsls	r2, r3, #22
 8002212:	d4ef      	bmi.n	80021f4 <__smakebuf_r+0x18>
 8002214:	f023 0303 	bic.w	r3, r3, #3
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	81a3      	strh	r3, [r4, #12]
 800221e:	e7e3      	b.n	80021e8 <__smakebuf_r+0xc>
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <__smakebuf_r+0x7c>)
 8002222:	62b3      	str	r3, [r6, #40]	; 0x28
 8002224:	89a3      	ldrh	r3, [r4, #12]
 8002226:	6020      	str	r0, [r4, #0]
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	81a3      	strh	r3, [r4, #12]
 800222e:	9b00      	ldr	r3, [sp, #0]
 8002230:	6163      	str	r3, [r4, #20]
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	6120      	str	r0, [r4, #16]
 8002236:	b15b      	cbz	r3, 8002250 <__smakebuf_r+0x74>
 8002238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800223c:	4630      	mov	r0, r6
 800223e:	f000 fbc5 	bl	80029cc <_isatty_r>
 8002242:	b128      	cbz	r0, 8002250 <__smakebuf_r+0x74>
 8002244:	89a3      	ldrh	r3, [r4, #12]
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	81a3      	strh	r3, [r4, #12]
 8002250:	89a0      	ldrh	r0, [r4, #12]
 8002252:	4305      	orrs	r5, r0
 8002254:	81a5      	strh	r5, [r4, #12]
 8002256:	e7cd      	b.n	80021f4 <__smakebuf_r+0x18>
 8002258:	08001fe9 	.word	0x08001fe9

0800225c <__malloc_lock>:
 800225c:	4801      	ldr	r0, [pc, #4]	; (8002264 <__malloc_lock+0x8>)
 800225e:	f7ff bf95 	b.w	800218c <__retarget_lock_acquire_recursive>
 8002262:	bf00      	nop
 8002264:	200000dc 	.word	0x200000dc

08002268 <__malloc_unlock>:
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <__malloc_unlock+0x8>)
 800226a:	f7ff bf90 	b.w	800218e <__retarget_lock_release_recursive>
 800226e:	bf00      	nop
 8002270:	200000dc 	.word	0x200000dc

08002274 <__sfputc_r>:
 8002274:	6893      	ldr	r3, [r2, #8]
 8002276:	3b01      	subs	r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	b410      	push	{r4}
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	da07      	bge.n	8002290 <__sfputc_r+0x1c>
 8002280:	6994      	ldr	r4, [r2, #24]
 8002282:	42a3      	cmp	r3, r4
 8002284:	db01      	blt.n	800228a <__sfputc_r+0x16>
 8002286:	290a      	cmp	r1, #10
 8002288:	d102      	bne.n	8002290 <__sfputc_r+0x1c>
 800228a:	bc10      	pop	{r4}
 800228c:	f7ff bd0a 	b.w	8001ca4 <__swbuf_r>
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	1c58      	adds	r0, r3, #1
 8002294:	6010      	str	r0, [r2, #0]
 8002296:	7019      	strb	r1, [r3, #0]
 8002298:	4608      	mov	r0, r1
 800229a:	bc10      	pop	{r4}
 800229c:	4770      	bx	lr

0800229e <__sfputs_r>:
 800229e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a0:	4606      	mov	r6, r0
 80022a2:	460f      	mov	r7, r1
 80022a4:	4614      	mov	r4, r2
 80022a6:	18d5      	adds	r5, r2, r3
 80022a8:	42ac      	cmp	r4, r5
 80022aa:	d101      	bne.n	80022b0 <__sfputs_r+0x12>
 80022ac:	2000      	movs	r0, #0
 80022ae:	e007      	b.n	80022c0 <__sfputs_r+0x22>
 80022b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022b4:	463a      	mov	r2, r7
 80022b6:	4630      	mov	r0, r6
 80022b8:	f7ff ffdc 	bl	8002274 <__sfputc_r>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d1f3      	bne.n	80022a8 <__sfputs_r+0xa>
 80022c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022c4 <_vfiprintf_r>:
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c8:	460d      	mov	r5, r1
 80022ca:	b09d      	sub	sp, #116	; 0x74
 80022cc:	4614      	mov	r4, r2
 80022ce:	4698      	mov	r8, r3
 80022d0:	4606      	mov	r6, r0
 80022d2:	b118      	cbz	r0, 80022dc <_vfiprintf_r+0x18>
 80022d4:	6983      	ldr	r3, [r0, #24]
 80022d6:	b90b      	cbnz	r3, 80022dc <_vfiprintf_r+0x18>
 80022d8:	f7ff feba 	bl	8002050 <__sinit>
 80022dc:	4b89      	ldr	r3, [pc, #548]	; (8002504 <_vfiprintf_r+0x240>)
 80022de:	429d      	cmp	r5, r3
 80022e0:	d11b      	bne.n	800231a <_vfiprintf_r+0x56>
 80022e2:	6875      	ldr	r5, [r6, #4]
 80022e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022e6:	07d9      	lsls	r1, r3, #31
 80022e8:	d405      	bmi.n	80022f6 <_vfiprintf_r+0x32>
 80022ea:	89ab      	ldrh	r3, [r5, #12]
 80022ec:	059a      	lsls	r2, r3, #22
 80022ee:	d402      	bmi.n	80022f6 <_vfiprintf_r+0x32>
 80022f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022f2:	f7ff ff4b 	bl	800218c <__retarget_lock_acquire_recursive>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	d501      	bpl.n	8002300 <_vfiprintf_r+0x3c>
 80022fc:	692b      	ldr	r3, [r5, #16]
 80022fe:	b9eb      	cbnz	r3, 800233c <_vfiprintf_r+0x78>
 8002300:	4629      	mov	r1, r5
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff fd20 	bl	8001d48 <__swsetup_r>
 8002308:	b1c0      	cbz	r0, 800233c <_vfiprintf_r+0x78>
 800230a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800230c:	07dc      	lsls	r4, r3, #31
 800230e:	d50e      	bpl.n	800232e <_vfiprintf_r+0x6a>
 8002310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002314:	b01d      	add	sp, #116	; 0x74
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <_vfiprintf_r+0x244>)
 800231c:	429d      	cmp	r5, r3
 800231e:	d101      	bne.n	8002324 <_vfiprintf_r+0x60>
 8002320:	68b5      	ldr	r5, [r6, #8]
 8002322:	e7df      	b.n	80022e4 <_vfiprintf_r+0x20>
 8002324:	4b79      	ldr	r3, [pc, #484]	; (800250c <_vfiprintf_r+0x248>)
 8002326:	429d      	cmp	r5, r3
 8002328:	bf08      	it	eq
 800232a:	68f5      	ldreq	r5, [r6, #12]
 800232c:	e7da      	b.n	80022e4 <_vfiprintf_r+0x20>
 800232e:	89ab      	ldrh	r3, [r5, #12]
 8002330:	0598      	lsls	r0, r3, #22
 8002332:	d4ed      	bmi.n	8002310 <_vfiprintf_r+0x4c>
 8002334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002336:	f7ff ff2a 	bl	800218e <__retarget_lock_release_recursive>
 800233a:	e7e9      	b.n	8002310 <_vfiprintf_r+0x4c>
 800233c:	2300      	movs	r3, #0
 800233e:	9309      	str	r3, [sp, #36]	; 0x24
 8002340:	2320      	movs	r3, #32
 8002342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002346:	f8cd 800c 	str.w	r8, [sp, #12]
 800234a:	2330      	movs	r3, #48	; 0x30
 800234c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002510 <_vfiprintf_r+0x24c>
 8002350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002354:	f04f 0901 	mov.w	r9, #1
 8002358:	4623      	mov	r3, r4
 800235a:	469a      	mov	sl, r3
 800235c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002360:	b10a      	cbz	r2, 8002366 <_vfiprintf_r+0xa2>
 8002362:	2a25      	cmp	r2, #37	; 0x25
 8002364:	d1f9      	bne.n	800235a <_vfiprintf_r+0x96>
 8002366:	ebba 0b04 	subs.w	fp, sl, r4
 800236a:	d00b      	beq.n	8002384 <_vfiprintf_r+0xc0>
 800236c:	465b      	mov	r3, fp
 800236e:	4622      	mov	r2, r4
 8002370:	4629      	mov	r1, r5
 8002372:	4630      	mov	r0, r6
 8002374:	f7ff ff93 	bl	800229e <__sfputs_r>
 8002378:	3001      	adds	r0, #1
 800237a:	f000 80aa 	beq.w	80024d2 <_vfiprintf_r+0x20e>
 800237e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002380:	445a      	add	r2, fp
 8002382:	9209      	str	r2, [sp, #36]	; 0x24
 8002384:	f89a 3000 	ldrb.w	r3, [sl]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a2 	beq.w	80024d2 <_vfiprintf_r+0x20e>
 800238e:	2300      	movs	r3, #0
 8002390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002398:	f10a 0a01 	add.w	sl, sl, #1
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	9307      	str	r3, [sp, #28]
 80023a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023a4:	931a      	str	r3, [sp, #104]	; 0x68
 80023a6:	4654      	mov	r4, sl
 80023a8:	2205      	movs	r2, #5
 80023aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ae:	4858      	ldr	r0, [pc, #352]	; (8002510 <_vfiprintf_r+0x24c>)
 80023b0:	f7fd ff26 	bl	8000200 <memchr>
 80023b4:	9a04      	ldr	r2, [sp, #16]
 80023b6:	b9d8      	cbnz	r0, 80023f0 <_vfiprintf_r+0x12c>
 80023b8:	06d1      	lsls	r1, r2, #27
 80023ba:	bf44      	itt	mi
 80023bc:	2320      	movmi	r3, #32
 80023be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023c2:	0713      	lsls	r3, r2, #28
 80023c4:	bf44      	itt	mi
 80023c6:	232b      	movmi	r3, #43	; 0x2b
 80023c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023cc:	f89a 3000 	ldrb.w	r3, [sl]
 80023d0:	2b2a      	cmp	r3, #42	; 0x2a
 80023d2:	d015      	beq.n	8002400 <_vfiprintf_r+0x13c>
 80023d4:	9a07      	ldr	r2, [sp, #28]
 80023d6:	4654      	mov	r4, sl
 80023d8:	2000      	movs	r0, #0
 80023da:	f04f 0c0a 	mov.w	ip, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023e4:	3b30      	subs	r3, #48	; 0x30
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d94e      	bls.n	8002488 <_vfiprintf_r+0x1c4>
 80023ea:	b1b0      	cbz	r0, 800241a <_vfiprintf_r+0x156>
 80023ec:	9207      	str	r2, [sp, #28]
 80023ee:	e014      	b.n	800241a <_vfiprintf_r+0x156>
 80023f0:	eba0 0308 	sub.w	r3, r0, r8
 80023f4:	fa09 f303 	lsl.w	r3, r9, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	9304      	str	r3, [sp, #16]
 80023fc:	46a2      	mov	sl, r4
 80023fe:	e7d2      	b.n	80023a6 <_vfiprintf_r+0xe2>
 8002400:	9b03      	ldr	r3, [sp, #12]
 8002402:	1d19      	adds	r1, r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	9103      	str	r1, [sp, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	bfbb      	ittet	lt
 800240c:	425b      	neglt	r3, r3
 800240e:	f042 0202 	orrlt.w	r2, r2, #2
 8002412:	9307      	strge	r3, [sp, #28]
 8002414:	9307      	strlt	r3, [sp, #28]
 8002416:	bfb8      	it	lt
 8002418:	9204      	strlt	r2, [sp, #16]
 800241a:	7823      	ldrb	r3, [r4, #0]
 800241c:	2b2e      	cmp	r3, #46	; 0x2e
 800241e:	d10c      	bne.n	800243a <_vfiprintf_r+0x176>
 8002420:	7863      	ldrb	r3, [r4, #1]
 8002422:	2b2a      	cmp	r3, #42	; 0x2a
 8002424:	d135      	bne.n	8002492 <_vfiprintf_r+0x1ce>
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	9203      	str	r2, [sp, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	bfb8      	it	lt
 8002432:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002436:	3402      	adds	r4, #2
 8002438:	9305      	str	r3, [sp, #20]
 800243a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002514 <_vfiprintf_r+0x250>
 800243e:	7821      	ldrb	r1, [r4, #0]
 8002440:	2203      	movs	r2, #3
 8002442:	4650      	mov	r0, sl
 8002444:	f7fd fedc 	bl	8000200 <memchr>
 8002448:	b140      	cbz	r0, 800245c <_vfiprintf_r+0x198>
 800244a:	2340      	movs	r3, #64	; 0x40
 800244c:	eba0 000a 	sub.w	r0, r0, sl
 8002450:	fa03 f000 	lsl.w	r0, r3, r0
 8002454:	9b04      	ldr	r3, [sp, #16]
 8002456:	4303      	orrs	r3, r0
 8002458:	3401      	adds	r4, #1
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002460:	482d      	ldr	r0, [pc, #180]	; (8002518 <_vfiprintf_r+0x254>)
 8002462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002466:	2206      	movs	r2, #6
 8002468:	f7fd feca 	bl	8000200 <memchr>
 800246c:	2800      	cmp	r0, #0
 800246e:	d03f      	beq.n	80024f0 <_vfiprintf_r+0x22c>
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <_vfiprintf_r+0x258>)
 8002472:	bb1b      	cbnz	r3, 80024bc <_vfiprintf_r+0x1f8>
 8002474:	9b03      	ldr	r3, [sp, #12]
 8002476:	3307      	adds	r3, #7
 8002478:	f023 0307 	bic.w	r3, r3, #7
 800247c:	3308      	adds	r3, #8
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002482:	443b      	add	r3, r7
 8002484:	9309      	str	r3, [sp, #36]	; 0x24
 8002486:	e767      	b.n	8002358 <_vfiprintf_r+0x94>
 8002488:	fb0c 3202 	mla	r2, ip, r2, r3
 800248c:	460c      	mov	r4, r1
 800248e:	2001      	movs	r0, #1
 8002490:	e7a5      	b.n	80023de <_vfiprintf_r+0x11a>
 8002492:	2300      	movs	r3, #0
 8002494:	3401      	adds	r4, #1
 8002496:	9305      	str	r3, [sp, #20]
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 0c0a 	mov.w	ip, #10
 800249e:	4620      	mov	r0, r4
 80024a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024a4:	3a30      	subs	r2, #48	; 0x30
 80024a6:	2a09      	cmp	r2, #9
 80024a8:	d903      	bls.n	80024b2 <_vfiprintf_r+0x1ee>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0c5      	beq.n	800243a <_vfiprintf_r+0x176>
 80024ae:	9105      	str	r1, [sp, #20]
 80024b0:	e7c3      	b.n	800243a <_vfiprintf_r+0x176>
 80024b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80024b6:	4604      	mov	r4, r0
 80024b8:	2301      	movs	r3, #1
 80024ba:	e7f0      	b.n	800249e <_vfiprintf_r+0x1da>
 80024bc:	ab03      	add	r3, sp, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	462a      	mov	r2, r5
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <_vfiprintf_r+0x25c>)
 80024c4:	a904      	add	r1, sp, #16
 80024c6:	4630      	mov	r0, r6
 80024c8:	f3af 8000 	nop.w
 80024cc:	4607      	mov	r7, r0
 80024ce:	1c78      	adds	r0, r7, #1
 80024d0:	d1d6      	bne.n	8002480 <_vfiprintf_r+0x1bc>
 80024d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024d4:	07d9      	lsls	r1, r3, #31
 80024d6:	d405      	bmi.n	80024e4 <_vfiprintf_r+0x220>
 80024d8:	89ab      	ldrh	r3, [r5, #12]
 80024da:	059a      	lsls	r2, r3, #22
 80024dc:	d402      	bmi.n	80024e4 <_vfiprintf_r+0x220>
 80024de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024e0:	f7ff fe55 	bl	800218e <__retarget_lock_release_recursive>
 80024e4:	89ab      	ldrh	r3, [r5, #12]
 80024e6:	065b      	lsls	r3, r3, #25
 80024e8:	f53f af12 	bmi.w	8002310 <_vfiprintf_r+0x4c>
 80024ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ee:	e711      	b.n	8002314 <_vfiprintf_r+0x50>
 80024f0:	ab03      	add	r3, sp, #12
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	462a      	mov	r2, r5
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <_vfiprintf_r+0x25c>)
 80024f8:	a904      	add	r1, sp, #16
 80024fa:	4630      	mov	r0, r6
 80024fc:	f000 f880 	bl	8002600 <_printf_i>
 8002500:	e7e4      	b.n	80024cc <_vfiprintf_r+0x208>
 8002502:	bf00      	nop
 8002504:	08002acc 	.word	0x08002acc
 8002508:	08002aec 	.word	0x08002aec
 800250c:	08002aac 	.word	0x08002aac
 8002510:	08002b0c 	.word	0x08002b0c
 8002514:	08002b12 	.word	0x08002b12
 8002518:	08002b16 	.word	0x08002b16
 800251c:	00000000 	.word	0x00000000
 8002520:	0800229f 	.word	0x0800229f

08002524 <_printf_common>:
 8002524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002528:	4616      	mov	r6, r2
 800252a:	4699      	mov	r9, r3
 800252c:	688a      	ldr	r2, [r1, #8]
 800252e:	690b      	ldr	r3, [r1, #16]
 8002530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002534:	4293      	cmp	r3, r2
 8002536:	bfb8      	it	lt
 8002538:	4613      	movlt	r3, r2
 800253a:	6033      	str	r3, [r6, #0]
 800253c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002540:	4607      	mov	r7, r0
 8002542:	460c      	mov	r4, r1
 8002544:	b10a      	cbz	r2, 800254a <_printf_common+0x26>
 8002546:	3301      	adds	r3, #1
 8002548:	6033      	str	r3, [r6, #0]
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	0699      	lsls	r1, r3, #26
 800254e:	bf42      	ittt	mi
 8002550:	6833      	ldrmi	r3, [r6, #0]
 8002552:	3302      	addmi	r3, #2
 8002554:	6033      	strmi	r3, [r6, #0]
 8002556:	6825      	ldr	r5, [r4, #0]
 8002558:	f015 0506 	ands.w	r5, r5, #6
 800255c:	d106      	bne.n	800256c <_printf_common+0x48>
 800255e:	f104 0a19 	add.w	sl, r4, #25
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	6832      	ldr	r2, [r6, #0]
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	42ab      	cmp	r3, r5
 800256a:	dc26      	bgt.n	80025ba <_printf_common+0x96>
 800256c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002570:	1e13      	subs	r3, r2, #0
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	bf18      	it	ne
 8002576:	2301      	movne	r3, #1
 8002578:	0692      	lsls	r2, r2, #26
 800257a:	d42b      	bmi.n	80025d4 <_printf_common+0xb0>
 800257c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002580:	4649      	mov	r1, r9
 8002582:	4638      	mov	r0, r7
 8002584:	47c0      	blx	r8
 8002586:	3001      	adds	r0, #1
 8002588:	d01e      	beq.n	80025c8 <_printf_common+0xa4>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	68e5      	ldr	r5, [r4, #12]
 800258e:	6832      	ldr	r2, [r6, #0]
 8002590:	f003 0306 	and.w	r3, r3, #6
 8002594:	2b04      	cmp	r3, #4
 8002596:	bf08      	it	eq
 8002598:	1aad      	subeq	r5, r5, r2
 800259a:	68a3      	ldr	r3, [r4, #8]
 800259c:	6922      	ldr	r2, [r4, #16]
 800259e:	bf0c      	ite	eq
 80025a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025a4:	2500      	movne	r5, #0
 80025a6:	4293      	cmp	r3, r2
 80025a8:	bfc4      	itt	gt
 80025aa:	1a9b      	subgt	r3, r3, r2
 80025ac:	18ed      	addgt	r5, r5, r3
 80025ae:	2600      	movs	r6, #0
 80025b0:	341a      	adds	r4, #26
 80025b2:	42b5      	cmp	r5, r6
 80025b4:	d11a      	bne.n	80025ec <_printf_common+0xc8>
 80025b6:	2000      	movs	r0, #0
 80025b8:	e008      	b.n	80025cc <_printf_common+0xa8>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4652      	mov	r2, sl
 80025be:	4649      	mov	r1, r9
 80025c0:	4638      	mov	r0, r7
 80025c2:	47c0      	blx	r8
 80025c4:	3001      	adds	r0, #1
 80025c6:	d103      	bne.n	80025d0 <_printf_common+0xac>
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d0:	3501      	adds	r5, #1
 80025d2:	e7c6      	b.n	8002562 <_printf_common+0x3e>
 80025d4:	18e1      	adds	r1, r4, r3
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	2030      	movs	r0, #48	; 0x30
 80025da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025de:	4422      	add	r2, r4
 80025e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025e8:	3302      	adds	r3, #2
 80025ea:	e7c7      	b.n	800257c <_printf_common+0x58>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4622      	mov	r2, r4
 80025f0:	4649      	mov	r1, r9
 80025f2:	4638      	mov	r0, r7
 80025f4:	47c0      	blx	r8
 80025f6:	3001      	adds	r0, #1
 80025f8:	d0e6      	beq.n	80025c8 <_printf_common+0xa4>
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7d9      	b.n	80025b2 <_printf_common+0x8e>
	...

08002600 <_printf_i>:
 8002600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002604:	7e0f      	ldrb	r7, [r1, #24]
 8002606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002608:	2f78      	cmp	r7, #120	; 0x78
 800260a:	4691      	mov	r9, r2
 800260c:	4680      	mov	r8, r0
 800260e:	460c      	mov	r4, r1
 8002610:	469a      	mov	sl, r3
 8002612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002616:	d807      	bhi.n	8002628 <_printf_i+0x28>
 8002618:	2f62      	cmp	r7, #98	; 0x62
 800261a:	d80a      	bhi.n	8002632 <_printf_i+0x32>
 800261c:	2f00      	cmp	r7, #0
 800261e:	f000 80d8 	beq.w	80027d2 <_printf_i+0x1d2>
 8002622:	2f58      	cmp	r7, #88	; 0x58
 8002624:	f000 80a3 	beq.w	800276e <_printf_i+0x16e>
 8002628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800262c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002630:	e03a      	b.n	80026a8 <_printf_i+0xa8>
 8002632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002636:	2b15      	cmp	r3, #21
 8002638:	d8f6      	bhi.n	8002628 <_printf_i+0x28>
 800263a:	a101      	add	r1, pc, #4	; (adr r1, 8002640 <_printf_i+0x40>)
 800263c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002640:	08002699 	.word	0x08002699
 8002644:	080026ad 	.word	0x080026ad
 8002648:	08002629 	.word	0x08002629
 800264c:	08002629 	.word	0x08002629
 8002650:	08002629 	.word	0x08002629
 8002654:	08002629 	.word	0x08002629
 8002658:	080026ad 	.word	0x080026ad
 800265c:	08002629 	.word	0x08002629
 8002660:	08002629 	.word	0x08002629
 8002664:	08002629 	.word	0x08002629
 8002668:	08002629 	.word	0x08002629
 800266c:	080027b9 	.word	0x080027b9
 8002670:	080026dd 	.word	0x080026dd
 8002674:	0800279b 	.word	0x0800279b
 8002678:	08002629 	.word	0x08002629
 800267c:	08002629 	.word	0x08002629
 8002680:	080027db 	.word	0x080027db
 8002684:	08002629 	.word	0x08002629
 8002688:	080026dd 	.word	0x080026dd
 800268c:	08002629 	.word	0x08002629
 8002690:	08002629 	.word	0x08002629
 8002694:	080027a3 	.word	0x080027a3
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	1d1a      	adds	r2, r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	602a      	str	r2, [r5, #0]
 80026a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0a3      	b.n	80027f4 <_printf_i+0x1f4>
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	6829      	ldr	r1, [r5, #0]
 80026b0:	0606      	lsls	r6, r0, #24
 80026b2:	f101 0304 	add.w	r3, r1, #4
 80026b6:	d50a      	bpl.n	80026ce <_printf_i+0xce>
 80026b8:	680e      	ldr	r6, [r1, #0]
 80026ba:	602b      	str	r3, [r5, #0]
 80026bc:	2e00      	cmp	r6, #0
 80026be:	da03      	bge.n	80026c8 <_printf_i+0xc8>
 80026c0:	232d      	movs	r3, #45	; 0x2d
 80026c2:	4276      	negs	r6, r6
 80026c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c8:	485e      	ldr	r0, [pc, #376]	; (8002844 <_printf_i+0x244>)
 80026ca:	230a      	movs	r3, #10
 80026cc:	e019      	b.n	8002702 <_printf_i+0x102>
 80026ce:	680e      	ldr	r6, [r1, #0]
 80026d0:	602b      	str	r3, [r5, #0]
 80026d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026d6:	bf18      	it	ne
 80026d8:	b236      	sxthne	r6, r6
 80026da:	e7ef      	b.n	80026bc <_printf_i+0xbc>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	1d19      	adds	r1, r3, #4
 80026e2:	6029      	str	r1, [r5, #0]
 80026e4:	0601      	lsls	r1, r0, #24
 80026e6:	d501      	bpl.n	80026ec <_printf_i+0xec>
 80026e8:	681e      	ldr	r6, [r3, #0]
 80026ea:	e002      	b.n	80026f2 <_printf_i+0xf2>
 80026ec:	0646      	lsls	r6, r0, #25
 80026ee:	d5fb      	bpl.n	80026e8 <_printf_i+0xe8>
 80026f0:	881e      	ldrh	r6, [r3, #0]
 80026f2:	4854      	ldr	r0, [pc, #336]	; (8002844 <_printf_i+0x244>)
 80026f4:	2f6f      	cmp	r7, #111	; 0x6f
 80026f6:	bf0c      	ite	eq
 80026f8:	2308      	moveq	r3, #8
 80026fa:	230a      	movne	r3, #10
 80026fc:	2100      	movs	r1, #0
 80026fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002702:	6865      	ldr	r5, [r4, #4]
 8002704:	60a5      	str	r5, [r4, #8]
 8002706:	2d00      	cmp	r5, #0
 8002708:	bfa2      	ittt	ge
 800270a:	6821      	ldrge	r1, [r4, #0]
 800270c:	f021 0104 	bicge.w	r1, r1, #4
 8002710:	6021      	strge	r1, [r4, #0]
 8002712:	b90e      	cbnz	r6, 8002718 <_printf_i+0x118>
 8002714:	2d00      	cmp	r5, #0
 8002716:	d04d      	beq.n	80027b4 <_printf_i+0x1b4>
 8002718:	4615      	mov	r5, r2
 800271a:	fbb6 f1f3 	udiv	r1, r6, r3
 800271e:	fb03 6711 	mls	r7, r3, r1, r6
 8002722:	5dc7      	ldrb	r7, [r0, r7]
 8002724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002728:	4637      	mov	r7, r6
 800272a:	42bb      	cmp	r3, r7
 800272c:	460e      	mov	r6, r1
 800272e:	d9f4      	bls.n	800271a <_printf_i+0x11a>
 8002730:	2b08      	cmp	r3, #8
 8002732:	d10b      	bne.n	800274c <_printf_i+0x14c>
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	07de      	lsls	r6, r3, #31
 8002738:	d508      	bpl.n	800274c <_printf_i+0x14c>
 800273a:	6923      	ldr	r3, [r4, #16]
 800273c:	6861      	ldr	r1, [r4, #4]
 800273e:	4299      	cmp	r1, r3
 8002740:	bfde      	ittt	le
 8002742:	2330      	movle	r3, #48	; 0x30
 8002744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002748:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800274c:	1b52      	subs	r2, r2, r5
 800274e:	6122      	str	r2, [r4, #16]
 8002750:	f8cd a000 	str.w	sl, [sp]
 8002754:	464b      	mov	r3, r9
 8002756:	aa03      	add	r2, sp, #12
 8002758:	4621      	mov	r1, r4
 800275a:	4640      	mov	r0, r8
 800275c:	f7ff fee2 	bl	8002524 <_printf_common>
 8002760:	3001      	adds	r0, #1
 8002762:	d14c      	bne.n	80027fe <_printf_i+0x1fe>
 8002764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002768:	b004      	add	sp, #16
 800276a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276e:	4835      	ldr	r0, [pc, #212]	; (8002844 <_printf_i+0x244>)
 8002770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002774:	6829      	ldr	r1, [r5, #0]
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	f851 6b04 	ldr.w	r6, [r1], #4
 800277c:	6029      	str	r1, [r5, #0]
 800277e:	061d      	lsls	r5, r3, #24
 8002780:	d514      	bpl.n	80027ac <_printf_i+0x1ac>
 8002782:	07df      	lsls	r7, r3, #31
 8002784:	bf44      	itt	mi
 8002786:	f043 0320 	orrmi.w	r3, r3, #32
 800278a:	6023      	strmi	r3, [r4, #0]
 800278c:	b91e      	cbnz	r6, 8002796 <_printf_i+0x196>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f023 0320 	bic.w	r3, r3, #32
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	2310      	movs	r3, #16
 8002798:	e7b0      	b.n	80026fc <_printf_i+0xfc>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	2378      	movs	r3, #120	; 0x78
 80027a4:	4828      	ldr	r0, [pc, #160]	; (8002848 <_printf_i+0x248>)
 80027a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027aa:	e7e3      	b.n	8002774 <_printf_i+0x174>
 80027ac:	0659      	lsls	r1, r3, #25
 80027ae:	bf48      	it	mi
 80027b0:	b2b6      	uxthmi	r6, r6
 80027b2:	e7e6      	b.n	8002782 <_printf_i+0x182>
 80027b4:	4615      	mov	r5, r2
 80027b6:	e7bb      	b.n	8002730 <_printf_i+0x130>
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	6826      	ldr	r6, [r4, #0]
 80027bc:	6961      	ldr	r1, [r4, #20]
 80027be:	1d18      	adds	r0, r3, #4
 80027c0:	6028      	str	r0, [r5, #0]
 80027c2:	0635      	lsls	r5, r6, #24
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	d501      	bpl.n	80027cc <_printf_i+0x1cc>
 80027c8:	6019      	str	r1, [r3, #0]
 80027ca:	e002      	b.n	80027d2 <_printf_i+0x1d2>
 80027cc:	0670      	lsls	r0, r6, #25
 80027ce:	d5fb      	bpl.n	80027c8 <_printf_i+0x1c8>
 80027d0:	8019      	strh	r1, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	6123      	str	r3, [r4, #16]
 80027d6:	4615      	mov	r5, r2
 80027d8:	e7ba      	b.n	8002750 <_printf_i+0x150>
 80027da:	682b      	ldr	r3, [r5, #0]
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	602a      	str	r2, [r5, #0]
 80027e0:	681d      	ldr	r5, [r3, #0]
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	2100      	movs	r1, #0
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7fd fd0a 	bl	8000200 <memchr>
 80027ec:	b108      	cbz	r0, 80027f2 <_printf_i+0x1f2>
 80027ee:	1b40      	subs	r0, r0, r5
 80027f0:	6060      	str	r0, [r4, #4]
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	6123      	str	r3, [r4, #16]
 80027f6:	2300      	movs	r3, #0
 80027f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027fc:	e7a8      	b.n	8002750 <_printf_i+0x150>
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	462a      	mov	r2, r5
 8002802:	4649      	mov	r1, r9
 8002804:	4640      	mov	r0, r8
 8002806:	47d0      	blx	sl
 8002808:	3001      	adds	r0, #1
 800280a:	d0ab      	beq.n	8002764 <_printf_i+0x164>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	079b      	lsls	r3, r3, #30
 8002810:	d413      	bmi.n	800283a <_printf_i+0x23a>
 8002812:	68e0      	ldr	r0, [r4, #12]
 8002814:	9b03      	ldr	r3, [sp, #12]
 8002816:	4298      	cmp	r0, r3
 8002818:	bfb8      	it	lt
 800281a:	4618      	movlt	r0, r3
 800281c:	e7a4      	b.n	8002768 <_printf_i+0x168>
 800281e:	2301      	movs	r3, #1
 8002820:	4632      	mov	r2, r6
 8002822:	4649      	mov	r1, r9
 8002824:	4640      	mov	r0, r8
 8002826:	47d0      	blx	sl
 8002828:	3001      	adds	r0, #1
 800282a:	d09b      	beq.n	8002764 <_printf_i+0x164>
 800282c:	3501      	adds	r5, #1
 800282e:	68e3      	ldr	r3, [r4, #12]
 8002830:	9903      	ldr	r1, [sp, #12]
 8002832:	1a5b      	subs	r3, r3, r1
 8002834:	42ab      	cmp	r3, r5
 8002836:	dcf2      	bgt.n	800281e <_printf_i+0x21e>
 8002838:	e7eb      	b.n	8002812 <_printf_i+0x212>
 800283a:	2500      	movs	r5, #0
 800283c:	f104 0619 	add.w	r6, r4, #25
 8002840:	e7f5      	b.n	800282e <_printf_i+0x22e>
 8002842:	bf00      	nop
 8002844:	08002b1d 	.word	0x08002b1d
 8002848:	08002b2e 	.word	0x08002b2e

0800284c <_putc_r>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	460d      	mov	r5, r1
 8002850:	4614      	mov	r4, r2
 8002852:	4606      	mov	r6, r0
 8002854:	b118      	cbz	r0, 800285e <_putc_r+0x12>
 8002856:	6983      	ldr	r3, [r0, #24]
 8002858:	b90b      	cbnz	r3, 800285e <_putc_r+0x12>
 800285a:	f7ff fbf9 	bl	8002050 <__sinit>
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <_putc_r+0x84>)
 8002860:	429c      	cmp	r4, r3
 8002862:	d124      	bne.n	80028ae <_putc_r+0x62>
 8002864:	6874      	ldr	r4, [r6, #4]
 8002866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002868:	07d8      	lsls	r0, r3, #31
 800286a:	d405      	bmi.n	8002878 <_putc_r+0x2c>
 800286c:	89a3      	ldrh	r3, [r4, #12]
 800286e:	0599      	lsls	r1, r3, #22
 8002870:	d402      	bmi.n	8002878 <_putc_r+0x2c>
 8002872:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002874:	f7ff fc8a 	bl	800218c <__retarget_lock_acquire_recursive>
 8002878:	68a3      	ldr	r3, [r4, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	60a3      	str	r3, [r4, #8]
 8002880:	da05      	bge.n	800288e <_putc_r+0x42>
 8002882:	69a2      	ldr	r2, [r4, #24]
 8002884:	4293      	cmp	r3, r2
 8002886:	db1c      	blt.n	80028c2 <_putc_r+0x76>
 8002888:	b2eb      	uxtb	r3, r5
 800288a:	2b0a      	cmp	r3, #10
 800288c:	d019      	beq.n	80028c2 <_putc_r+0x76>
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	6022      	str	r2, [r4, #0]
 8002894:	701d      	strb	r5, [r3, #0]
 8002896:	b2ed      	uxtb	r5, r5
 8002898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800289a:	07da      	lsls	r2, r3, #31
 800289c:	d405      	bmi.n	80028aa <_putc_r+0x5e>
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	059b      	lsls	r3, r3, #22
 80028a2:	d402      	bmi.n	80028aa <_putc_r+0x5e>
 80028a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028a6:	f7ff fc72 	bl	800218e <__retarget_lock_release_recursive>
 80028aa:	4628      	mov	r0, r5
 80028ac:	bd70      	pop	{r4, r5, r6, pc}
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <_putc_r+0x88>)
 80028b0:	429c      	cmp	r4, r3
 80028b2:	d101      	bne.n	80028b8 <_putc_r+0x6c>
 80028b4:	68b4      	ldr	r4, [r6, #8]
 80028b6:	e7d6      	b.n	8002866 <_putc_r+0x1a>
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_putc_r+0x8c>)
 80028ba:	429c      	cmp	r4, r3
 80028bc:	bf08      	it	eq
 80028be:	68f4      	ldreq	r4, [r6, #12]
 80028c0:	e7d1      	b.n	8002866 <_putc_r+0x1a>
 80028c2:	4629      	mov	r1, r5
 80028c4:	4622      	mov	r2, r4
 80028c6:	4630      	mov	r0, r6
 80028c8:	f7ff f9ec 	bl	8001ca4 <__swbuf_r>
 80028cc:	4605      	mov	r5, r0
 80028ce:	e7e3      	b.n	8002898 <_putc_r+0x4c>
 80028d0:	08002acc 	.word	0x08002acc
 80028d4:	08002aec 	.word	0x08002aec
 80028d8:	08002aac 	.word	0x08002aac

080028dc <__sread>:
 80028dc:	b510      	push	{r4, lr}
 80028de:	460c      	mov	r4, r1
 80028e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e4:	f000 f894 	bl	8002a10 <_read_r>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	bfab      	itete	ge
 80028ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028ee:	89a3      	ldrhlt	r3, [r4, #12]
 80028f0:	181b      	addge	r3, r3, r0
 80028f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028f6:	bfac      	ite	ge
 80028f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80028fa:	81a3      	strhlt	r3, [r4, #12]
 80028fc:	bd10      	pop	{r4, pc}

080028fe <__swrite>:
 80028fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002902:	461f      	mov	r7, r3
 8002904:	898b      	ldrh	r3, [r1, #12]
 8002906:	05db      	lsls	r3, r3, #23
 8002908:	4605      	mov	r5, r0
 800290a:	460c      	mov	r4, r1
 800290c:	4616      	mov	r6, r2
 800290e:	d505      	bpl.n	800291c <__swrite+0x1e>
 8002910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002914:	2302      	movs	r3, #2
 8002916:	2200      	movs	r2, #0
 8002918:	f000 f868 	bl	80029ec <_lseek_r>
 800291c:	89a3      	ldrh	r3, [r4, #12]
 800291e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002926:	81a3      	strh	r3, [r4, #12]
 8002928:	4632      	mov	r2, r6
 800292a:	463b      	mov	r3, r7
 800292c:	4628      	mov	r0, r5
 800292e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002932:	f000 b817 	b.w	8002964 <_write_r>

08002936 <__sseek>:
 8002936:	b510      	push	{r4, lr}
 8002938:	460c      	mov	r4, r1
 800293a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800293e:	f000 f855 	bl	80029ec <_lseek_r>
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	bf15      	itete	ne
 8002948:	6560      	strne	r0, [r4, #84]	; 0x54
 800294a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800294e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002952:	81a3      	strheq	r3, [r4, #12]
 8002954:	bf18      	it	ne
 8002956:	81a3      	strhne	r3, [r4, #12]
 8002958:	bd10      	pop	{r4, pc}

0800295a <__sclose>:
 800295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295e:	f000 b813 	b.w	8002988 <_close_r>
	...

08002964 <_write_r>:
 8002964:	b538      	push	{r3, r4, r5, lr}
 8002966:	4d07      	ldr	r5, [pc, #28]	; (8002984 <_write_r+0x20>)
 8002968:	4604      	mov	r4, r0
 800296a:	4608      	mov	r0, r1
 800296c:	4611      	mov	r1, r2
 800296e:	2200      	movs	r2, #0
 8002970:	602a      	str	r2, [r5, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	f7fe ff1f 	bl	80017b6 <_write>
 8002978:	1c43      	adds	r3, r0, #1
 800297a:	d102      	bne.n	8002982 <_write_r+0x1e>
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	b103      	cbz	r3, 8002982 <_write_r+0x1e>
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	200000e0 	.word	0x200000e0

08002988 <_close_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4d06      	ldr	r5, [pc, #24]	; (80029a4 <_close_r+0x1c>)
 800298c:	2300      	movs	r3, #0
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fe ff2b 	bl	80017ee <_close>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_close_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_close_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	200000e0 	.word	0x200000e0

080029a8 <_fstat_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4d07      	ldr	r5, [pc, #28]	; (80029c8 <_fstat_r+0x20>)
 80029ac:	2300      	movs	r3, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	602b      	str	r3, [r5, #0]
 80029b6:	f7fe ff25 	bl	8001804 <_fstat>
 80029ba:	1c43      	adds	r3, r0, #1
 80029bc:	d102      	bne.n	80029c4 <_fstat_r+0x1c>
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	b103      	cbz	r3, 80029c4 <_fstat_r+0x1c>
 80029c2:	6023      	str	r3, [r4, #0]
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
 80029c6:	bf00      	nop
 80029c8:	200000e0 	.word	0x200000e0

080029cc <_isatty_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4d06      	ldr	r5, [pc, #24]	; (80029e8 <_isatty_r+0x1c>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	4604      	mov	r4, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	f7fe ff23 	bl	8001822 <_isatty>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d102      	bne.n	80029e6 <_isatty_r+0x1a>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	b103      	cbz	r3, 80029e6 <_isatty_r+0x1a>
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	200000e0 	.word	0x200000e0

080029ec <_lseek_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4d07      	ldr	r5, [pc, #28]	; (8002a0c <_lseek_r+0x20>)
 80029f0:	4604      	mov	r4, r0
 80029f2:	4608      	mov	r0, r1
 80029f4:	4611      	mov	r1, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	602a      	str	r2, [r5, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7fe ff1b 	bl	8001836 <_lseek>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	d102      	bne.n	8002a0a <_lseek_r+0x1e>
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	b103      	cbz	r3, 8002a0a <_lseek_r+0x1e>
 8002a08:	6023      	str	r3, [r4, #0]
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
 8002a0c:	200000e0 	.word	0x200000e0

08002a10 <_read_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4d07      	ldr	r5, [pc, #28]	; (8002a30 <_read_r+0x20>)
 8002a14:	4604      	mov	r4, r0
 8002a16:	4608      	mov	r0, r1
 8002a18:	4611      	mov	r1, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	602a      	str	r2, [r5, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f7fe feac 	bl	800177c <_read>
 8002a24:	1c43      	adds	r3, r0, #1
 8002a26:	d102      	bne.n	8002a2e <_read_r+0x1e>
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	b103      	cbz	r3, 8002a2e <_read_r+0x1e>
 8002a2c:	6023      	str	r3, [r4, #0]
 8002a2e:	bd38      	pop	{r3, r4, r5, pc}
 8002a30:	200000e0 	.word	0x200000e0

08002a34 <_init>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr

08002a40 <_fini>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr
