
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c4  080038c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080038c4  080038c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c4  080038c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080038cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044fc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fc5  00000000  00000000  0002459a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  00025560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003e0  00000000  00000000  00025a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002da3  00000000  00000000  00025de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000062a0  00000000  00000000  00028b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ea50  00000000  00000000  0002ee2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003d87b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001918  00000000  00000000  0003d8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003754 	.word	0x08003754

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003754 	.word	0x08003754

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000090 	.word	0x20000090

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f002 f9e3 	bl	800269c <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fdba 	bl	8001e60 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 ff67 	bl	80011c0 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f001 f9a5 	bl	8001642 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000094 	.word	0x20000094

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 f9c3 	bl	800269c <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 fda2 	bl	8001e60 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f001 f99f 	bl	8001664 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f001 f99a 	bl	8001664 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f001 f9db 	bl	80016f0 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f001 f9d6 	bl	80016f0 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f001 fa0a 	bl	8001762 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f001 fa05 	bl	8001762 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f001 fa46 	bl	80017ee <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f001 fa41 	bl	80017ee <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f001 fa18 	bl	80017a6 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f001 fa13 	bl	80017a6 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fd61 	bl	8001e60 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fa45 	bl	8001836 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fb56 	bl	8001a64 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fa90 	bl	80018e2 <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 f95b 	bl	800269c <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f001 fd3a 	bl	8001e60 <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f001 f937 	bl	8001664 <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f001 f932 	bl	8001664 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f001 f973 	bl	80016f0 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f001 f96e 	bl	80016f0 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f001 f9a2 	bl	8001762 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f001 f99d 	bl	8001762 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f001 f9de 	bl	80017ee <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f001 f9d9 	bl	80017ee <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f001 f9b0 	bl	80017a6 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f001 f9ab 	bl	80017a6 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fcf9 	bl	8001e60 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f9dd 	bl	8001836 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f001 faee 	bl	8001a64 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fa28 	bl	80018e2 <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fc45 	bl	8001d40 <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <RTC_DS3231_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2204      	movs	r2, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 f8e3 	bl	800269c <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
 800052c:	e01a      	b.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d116      	bne.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 8000568:	7b3b      	ldrb	r3, [r7, #12]
 800056a:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	2204      	movs	r2, #4
 8000582:	f001 f9bf 	bl	8001904 <I2CMasterSendData>
	delay_us(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058a:	f7ff fe81 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2204      	movs	r2, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f880 	bl	800269c <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b9b      	ldrb	r3, [r3, #14]
 80005a0:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7a9b      	ldrb	r3, [r3, #10]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7adb      	ldrb	r3, [r3, #11]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b1b      	ldrb	r3, [r3, #12]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b5b      	ldrb	r3, [r3, #13]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 80005e4:	2303      	movs	r3, #3
 80005e6:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 80005ec:	7a3b      	ldrb	r3, [r7, #8]
 80005ee:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	2205      	movs	r2, #5
 8000606:	f001 f97d 	bl	8001904 <I2CMasterSendData>

	return;
 800060a:	bf00      	nop
}
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008
 8000618:	2000000c 	.word	0x2000000c

0800061c <RTC_DS3231_Read_Calendar>:

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,RxBuf,7,0, SlaveAddressRTC);
 8000626:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <RTC_DS3231_Read_Calendar+0x198>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <RTC_DS3231_Read_Calendar+0x19c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2207      	movs	r2, #7
 8000638:	f001 fa46 	bl	8001ac8 <I2CMaster_DS3231_RTC_Read>

	time->seconds = ((RxBuf[0] >> DS3231_RTC_TR_ST) & 0x7)*10 + ((RxBuf[0] >> DS3231_RTC_TR_SU) & 0xF);
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	701a      	strb	r2, [r3, #0]
	time->minutes = ((RxBuf[1] >> DS3231_RTC_TR_MNT) & 0x7)*10 + ((RxBuf[1] >> DS3231_RTC_TR_MNU) & 0xF);
 8000662:	7a7b      	ldrb	r3, [r7, #9]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4413      	add	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4413      	add	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	705a      	strb	r2, [r3, #1]
	if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)     //24 Hour Format
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	099b      	lsrs	r3, r3, #6
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d120      	bne.n	80006da <RTC_DS3231_Read_Calendar+0xbe>
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x3)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000698:	7abb      	ldrb	r3, [r7, #10]
 800069a:	091b      	lsrs	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	b25a      	sxtb	r2, r3
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	709a      	strb	r2, [r3, #2]
 80006d8:	e02c      	b.n	8000734 <RTC_DS3231_Read_Calendar+0x118>
	}
	else   //12 Hour Format
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x1)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 80006da:	7abb      	ldrb	r3, [r7, #10]
 80006dc:	091b      	lsrs	r3, r3, #4
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7abb      	ldrb	r3, [r7, #10]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_AMPM));
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	7abb      	ldrb	r3, [r7, #10]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	b2da      	uxtb	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	7abb      	ldrb	r3, [r7, #10]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	709a      	strb	r2, [r3, #2]
	}

	date->dayofweek = (RxBuf[3] & 0x7);
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	70da      	strb	r2, [r3, #3]
	date->date = ((RxBuf[4] >> DS3231_RTC_DR_DT) & 0x3)*10 + ((RxBuf[4] >> DS3231_RTC_DR_DU) & 0xF);
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	701a      	strb	r2, [r3, #0]
	date->month = ((RxBuf[5] >> DS3231_RTC_DR_MT) & 0x1)*10 + ((RxBuf[5] >> DS3231_RTC_DR_MU) & 0xF);
 8000766:	7b7b      	ldrb	r3, [r7, #13]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	705a      	strb	r2, [r3, #1]
	date->year = ((RxBuf[6] >> DS3231_RTC_DR_YT) & 0xF)*10 + ((RxBuf[6] >> DS3231_RTC_DR_YU) & 0xF);
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	709a      	strb	r2, [r3, #2]

	return;
 80007ac:	bf00      	nop
}
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008
 80007b8:	2000000c 	.word	0x2000000c

080007bc <RTC_DS3231_Display_Calendar_LCD>:

void RTC_DS3231_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(ds3231_display_count == 0)
 80007c6:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 809c 	bne.w	8000908 <RTC_DS3231_Display_Calendar_LCD+0x14c>
	{
		memset(&saved_time,0,sizeof(struct Time));
 80007d0:	2204      	movs	r2, #4
 80007d2:	2100      	movs	r1, #0
 80007d4:	4884      	ldr	r0, [pc, #528]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80007d6:	f001 ff61 	bl	800269c <memset>
		memset(&saved_date,0,sizeof(struct Date));
 80007da:	2204      	movs	r2, #4
 80007dc:	2100      	movs	r1, #0
 80007de:	4883      	ldr	r0, [pc, #524]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80007e0:	f001 ff5c 	bl	800269c <memset>

		//Print the Time Information
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)      //24 Hour Format
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	099b      	lsrs	r3, r3, #6
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d117      	bne.n	8000824 <RTC_DS3231_Display_Calendar_LCD+0x68>
		{
			lcd_pcf8574_clear_screen();
 80007f4:	f001 fad6 	bl	8001da4 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 80007f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007fc:	f7ff fd48 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000800:	f001 fad7 	bl	8001db2 <lcd_pcf8574_return_home>
			delay_us(3000);
 8000804:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000808:	f7ff fd42 	bl	8000290 <delay_us>
			printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	4619      	mov	r1, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	461a      	mov	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4874      	ldr	r0, [pc, #464]	; (80009f0 <RTC_DS3231_Display_Calendar_LCD+0x234>)
 800081e:	f002 f823 	bl	8002868 <iprintf>
 8000822:	e02c      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
		}
		else  //12 Hour Format
		{
			lcd_pcf8574_clear_screen();
 8000824:	f001 fabe 	bl	8001da4 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8000828:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800082c:	f7ff fd30 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000830:	f001 fabf 	bl	8001db2 <lcd_pcf8574_return_home>
			delay_us(3000);
 8000834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000838:	f7ff fd2a 	bl	8000290 <delay_us>
			if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)		//AM
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10c      	bne.n	8000866 <RTC_DS3231_Display_Calendar_LCD+0xaa>
			{
				printf("   %02d:%02d:%02d AM",(time->hours & 0xF),time->minutes,time->seconds);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	f003 010f 	and.w	r1, r3, #15
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	461a      	mov	r2, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4865      	ldr	r0, [pc, #404]	; (80009f4 <RTC_DS3231_Display_Calendar_LCD+0x238>)
 8000860:	f002 f802 	bl	8002868 <iprintf>
 8000864:	e00b      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
			}
			else
			{
				printf("   %02d:%02d:%02d PM",(time->hours & 0xF),time->minutes,time->seconds);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	f003 010f 	and.w	r1, r3, #15
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	485f      	ldr	r0, [pc, #380]	; (80009f8 <RTC_DS3231_Display_Calendar_LCD+0x23c>)
 800087a:	f001 fff5 	bl	8002868 <iprintf>
			}
		}

		//Saving the time information
		saved_time.seconds = time->seconds;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000884:	701a      	strb	r2, [r3, #0]
		saved_time.minutes = time->minutes;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	785a      	ldrb	r2, [r3, #1]
 800088a:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800088c:	705a      	strb	r2, [r3, #1]
		saved_time.hours = time->hours;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789a      	ldrb	r2, [r3, #2]
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000894:	709a      	strb	r2, [r3, #2]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 8000896:	2100      	movs	r1, #0
 8000898:	2001      	movs	r0, #1
 800089a:	f001 fa91 	bl	8001dc0 <lcd_pcf8574_set_position>
		delay_us(3000);
 800089e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a2:	f7ff fcf5 	bl	8000290 <delay_us>
		format_dow(date,dow);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 fac9 	bl	8000e44 <format_dow>
		format_mon(date,mon);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 fb17 	bl	8000eec <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	4602      	mov	r2, r0
 80008d6:	4849      	ldr	r0, [pc, #292]	; (80009fc <RTC_DS3231_Display_Calendar_LCD+0x240>)
 80008d8:	f001 ffc6 	bl	8002868 <iprintf>

		//Saving the date information
		saved_date.date = date->date;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008e2:	701a      	strb	r2, [r3, #0]
		saved_date.month = date->month;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	785a      	ldrb	r2, [r3, #1]
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008ea:	705a      	strb	r2, [r3, #1]
		saved_date.year = date->year;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789a      	ldrb	r2, [r3, #2]
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008f2:	709a      	strb	r2, [r3, #2]
		saved_date.dayofweek = date->dayofweek;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	78da      	ldrb	r2, [r3, #3]
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008fa:	70da      	strb	r2, [r3, #3]

		//Update count value
		ds3231_display_count++;
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000904:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 8000906:	e128      	b.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)   //24 Hour Format
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	099b      	lsrs	r3, r3, #6
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d148      	bne.n	80009aa <RTC_DS3231_Display_Calendar_LCD+0x1ee>
			if(saved_time.seconds != time->seconds)
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d011      	beq.n	8000948 <RTC_DS3231_Display_Calendar_LCD+0x18c>
				lcd_pcf8574_set_position(0,10);
 8000924:	210a      	movs	r1, #10
 8000926:	2000      	movs	r0, #0
 8000928:	f001 fa4a 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 800092c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000930:	f7ff fcae 	bl	8000290 <delay_us>
				printf("%02d",time->seconds);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800093c:	f001 ff94 	bl	8002868 <iprintf>
				saved_time.seconds = time->seconds;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000946:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800094a:	785a      	ldrb	r2, [r3, #1]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	429a      	cmp	r2, r3
 8000952:	d011      	beq.n	8000978 <RTC_DS3231_Display_Calendar_LCD+0x1bc>
				lcd_pcf8574_set_position(0,7);
 8000954:	2107      	movs	r1, #7
 8000956:	2000      	movs	r0, #0
 8000958:	f001 fa32 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f7ff fc96 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	4619      	mov	r1, r3
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800096c:	f001 ff7c 	bl	8002868 <iprintf>
				saved_time.minutes = time->minutes;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000976:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	429a      	cmp	r2, r3
 8000982:	d07d      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,4);
 8000984:	2104      	movs	r1, #4
 8000986:	2000      	movs	r0, #0
 8000988:	f001 fa1a 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f7ff fc7e 	bl	8000290 <delay_us>
				printf("%02d",time->hours);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	4619      	mov	r1, r3
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800099c:	f001 ff64 	bl	8002868 <iprintf>
				saved_time.hours = time->hours;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	789a      	ldrb	r2, [r3, #2]
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009a6:	709a      	strb	r2, [r3, #2]
 80009a8:	e06a      	b.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
			if(saved_time.seconds != time->seconds)
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d032      	beq.n	8000a1c <RTC_DS3231_Display_Calendar_LCD+0x260>
				lcd_pcf8574_set_position(0,9);
 80009b6:	2109      	movs	r1, #9
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa01 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c2:	f7ff fc65 	bl	8000290 <delay_us>
				if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)    //AM
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d118      	bne.n	8000a08 <RTC_DS3231_Display_Calendar_LCD+0x24c>
					printf("%02d AM",time->seconds);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <RTC_DS3231_Display_Calendar_LCD+0x248>)
 80009de:	f001 ff43 	bl	8002868 <iprintf>
 80009e2:	e017      	b.n	8000a14 <RTC_DS3231_Display_Calendar_LCD+0x258>
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	200000c0 	.word	0x200000c0
 80009ec:	200000bc 	.word	0x200000bc
 80009f0:	0800376c 	.word	0x0800376c
 80009f4:	08003780 	.word	0x08003780
 80009f8:	08003798 	.word	0x08003798
 80009fc:	080037b0 	.word	0x080037b0
 8000a00:	080037c4 	.word	0x080037c4
 8000a04:	080037cc 	.word	0x080037cc
					printf("%02d PM",time->seconds);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4855      	ldr	r0, [pc, #340]	; (8000b64 <RTC_DS3231_Display_Calendar_LCD+0x3a8>)
 8000a10:	f001 ff2a 	bl	8002868 <iprintf>
				saved_time.seconds = time->seconds;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000a1c:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1e:	785a      	ldrb	r2, [r3, #1]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d011      	beq.n	8000a4c <RTC_DS3231_Display_Calendar_LCD+0x290>
				lcd_pcf8574_set_position(0,6);
 8000a28:	2106      	movs	r1, #6
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 f9c8 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f7ff fc2c 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	484b      	ldr	r0, [pc, #300]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a40:	f001 ff12 	bl	8002868 <iprintf>
				saved_time.minutes = time->minutes;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	785a      	ldrb	r2, [r3, #1]
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4a:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4e:	789a      	ldrb	r2, [r3, #2]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d013      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,3);
 8000a58:	2103      	movs	r1, #3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f9b0 	bl	8001dc0 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a64:	f7ff fc14 	bl	8000290 <delay_us>
				printf("%02d",(time->hours & 0xF));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	4619      	mov	r1, r3
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a74:	f001 fef8 	bl	8002868 <iprintf>
				saved_time.hours = time->hours;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789a      	ldrb	r2, [r3, #2]
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a7e:	709a      	strb	r2, [r3, #2]
		if(saved_date.date != date->date)
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d011      	beq.n	8000ab0 <RTC_DS3231_Display_Calendar_LCD+0x2f4>
			lcd_pcf8574_set_position(1,6);
 8000a8c:	2106      	movs	r1, #6
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 f996 	bl	8001dc0 <lcd_pcf8574_set_position>
			delay_us(500);
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f7ff fbfa 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000aa4:	f001 fee0 	bl	8002868 <iprintf>
			saved_date.date = date->date;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aae:	701a      	strb	r2, [r3, #0]
		if(saved_date.month != date->month)
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d017      	beq.n	8000aec <RTC_DS3231_Display_Calendar_LCD+0x330>
			lcd_pcf8574_set_position(1,9);
 8000abc:	2109      	movs	r1, #9
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f001 f97e 	bl	8001dc0 <lcd_pcf8574_set_position>
			delay_us(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fbe2 	bl	8000290 <delay_us>
			format_mon(date,mon);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fa0a 	bl	8000eec <format_mon>
			printf("%s",mon);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000ae0:	f001 fec2 	bl	8002868 <iprintf>
			saved_date.month = date->month;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	785a      	ldrb	r2, [r3, #1]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aea:	705a      	strb	r2, [r3, #1]
		if(saved_date.year != date->year)
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aee:	789a      	ldrb	r2, [r3, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d011      	beq.n	8000b1c <RTC_DS3231_Display_Calendar_LCD+0x360>
			lcd_pcf8574_set_position(1,13);
 8000af8:	210d      	movs	r1, #13
 8000afa:	2001      	movs	r0, #1
 8000afc:	f001 f960 	bl	8001dc0 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f7ff fbc4 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000b10:	f001 feaa 	bl	8002868 <iprintf>
			saved_date.year = date->year;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	789a      	ldrb	r2, [r3, #2]
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1a:	709a      	strb	r2, [r3, #2]
		if(saved_date.dayofweek != date->dayofweek)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1e:	78da      	ldrb	r2, [r3, #3]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d018      	beq.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
			lcd_pcf8574_set_position(1,2);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 f948 	bl	8001dc0 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f7ff fbac 	bl	8000290 <delay_us>
			format_dow(date,dow);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f980 	bl	8000e44 <format_dow>
			printf("%s",dow);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000b4c:	f001 fe8c 	bl	8002868 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	78da      	ldrb	r2, [r3, #3]
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b56:	70da      	strb	r2, [r3, #3]
	return;
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
}
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	080037d4 	.word	0x080037d4
 8000b68:	200000c0 	.word	0x200000c0
 8000b6c:	080037c4 	.word	0x080037c4
 8000b70:	200000bc 	.word	0x200000bc
 8000b74:	080037dc 	.word	0x080037dc

08000b78 <RTC_DS3231_Config_Alarm>:

void RTC_DS3231_Config_Alarm(struct RTC_DS3231_AlarmConfig_t *pRTCAlarmConfig)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	uint8_t seconds, minutes, hours, date, control_register;

	seconds = (pRTCAlarmConfig->RTCAlarmSecondsUnits << DS3231_RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << DS3231_RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << DS3231_RTC_ALRMR_MSK1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	b25a      	sxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	011b      	lsls	r3, r3, #4
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	01db      	lsls	r3, r3, #7
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	757b      	strb	r3, [r7, #21]
	minutes = (pRTCAlarmConfig->RTCAlarmMinutesUnits << DS3231_RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << DS3231_RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << DS3231_RTC_ALRMR_MSK2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	795b      	ldrb	r3, [r3, #5]
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b25a      	sxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	01db      	lsls	r3, r3, #7
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	753b      	strb	r3, [r7, #20]

	if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_24)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7a5b      	ldrb	r3, [r3, #9]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d116      	bne.n	8000bf6 <RTC_DS3231_Config_Alarm+0x7e>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	79db      	ldrb	r3, [r3, #7]
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7a1b      	ldrb	r3, [r3, #8]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7a5b      	ldrb	r3, [r3, #9]
 8000bde:	019b      	lsls	r3, r3, #6
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7adb      	ldrb	r3, [r3, #11]
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	75fb      	strb	r3, [r7, #23]
 8000bf4:	e01f      	b.n	8000c36 <RTC_DS3231_Config_Alarm+0xbe>
	}
	else if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_12)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7a5b      	ldrb	r3, [r3, #9]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d11b      	bne.n	8000c36 <RTC_DS3231_Config_Alarm+0xbe>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << DS3231_RTC_ALRMR_AMPM) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	79db      	ldrb	r3, [r3, #7]
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7a1b      	ldrb	r3, [r3, #8]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7a9b      	ldrb	r3, [r3, #10]
 8000c14:	015b      	lsls	r3, r3, #5
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7a5b      	ldrb	r3, [r3, #9]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7adb      	ldrb	r3, [r3, #11]
 8000c2c:	01db      	lsls	r3, r3, #7
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	75fb      	strb	r3, [r7, #23]
	}

	if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_NO)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7bdb      	ldrb	r3, [r3, #15]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d110      	bne.n	8000c60 <RTC_DS3231_Config_Alarm+0xe8>
	{
		//Configure the Date
		date = (pRTCAlarmConfig->RTCAlarmDateUnits << DS3231_RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << DS3231_RTC_ALRMR_DT) | (0 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b1b      	ldrb	r3, [r3, #12]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7b5b      	ldrb	r3, [r3, #13]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b25a      	sxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7c1b      	ldrb	r3, [r3, #16]
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	75bb      	strb	r3, [r7, #22]
 8000c5e:	e00e      	b.n	8000c7e <RTC_DS3231_Config_Alarm+0x106>
	}
	else if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_YES)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7bdb      	ldrb	r3, [r3, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10a      	bne.n	8000c7e <RTC_DS3231_Config_Alarm+0x106>
	{
		//Configure the WeekDay
		date = (pRTCAlarmConfig->RTCAlarmDayOfWeek << DS3231_RTC_ALRMR_DU) | (1 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b9a      	ldrb	r2, [r3, #14]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7c1b      	ldrb	r3, [r3, #16]
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7c:	75bb      	strb	r3, [r7, #22]
	}

	//Configure the ALARM Parameters in the Device
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d113      	bne.n	8000cae <RTC_DS3231_Config_Alarm+0x136>
	{
		Tx_Buf[0] = 0x07;
 8000c86:	2307      	movs	r3, #7
 8000c88:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = seconds;
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = minutes;
 8000c8e:	7d3b      	ldrb	r3, [r7, #20]
 8000c90:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = hours;
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	73fb      	strb	r3, [r7, #15]
		Tx_Buf[4] = date;
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	743b      	strb	r3, [r7, #16]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f107 010c 	add.w	r1, r7, #12
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	f000 fe2c 	bl	8001904 <I2CMasterSendData>
 8000cac:	e014      	b.n	8000cd8 <RTC_DS3231_Config_Alarm+0x160>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d110      	bne.n	8000cd8 <RTC_DS3231_Config_Alarm+0x160>
	{
		Tx_Buf[0] = 0x0B;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = minutes;
 8000cba:	7d3b      	ldrb	r3, [r7, #20]
 8000cbc:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = hours;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = date;
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	73fb      	strb	r3, [r7, #15]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f107 010c 	add.w	r1, r7, #12
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	f000 fe16 	bl	8001904 <I2CMasterSendData>
	}

	//Enable the Alarm in the configuration register
	//a. Read the configuration register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&control_register,1,0x0E, SlaveAddressRTC);
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f107 010b 	add.w	r1, r7, #11
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	230e      	movs	r3, #14
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f000 feed 	bl	8001ac8 <I2CMaster_DS3231_RTC_Read>

	//b. Modify the Alarm Enable Bits
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <RTC_DS3231_Config_Alarm+0x18a>
	{
		control_register |= (1 << DS3231_RTC_CR_A1IE);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	72fb      	strb	r3, [r7, #11]
 8000d00:	e008      	b.n	8000d14 <RTC_DS3231_Config_Alarm+0x19c>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <RTC_DS3231_Config_Alarm+0x19c>
	{
		control_register |= (1 << DS3231_RTC_CR_A2IE);
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	72fb      	strb	r3, [r7, #11]
	}

	//c. Write to the configuration register
	Tx_Buf[0] = 0x0E;
 8000d14:	230e      	movs	r3, #14
 8000d16:	733b      	strb	r3, [r7, #12]
	Tx_Buf[1] = control_register;
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	737b      	strb	r3, [r7, #13]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f000 fdeb 	bl	8001904 <I2CMasterSendData>

	return;
 8000d2e:	bf00      	nop
}
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <RTC_DS3231_Config_Alarm_Interrupt>:

void RTC_DS3231_Config_Alarm_Interrupt(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(DS3231_RTC_ALARM_INPUT_GPIO_PORT,DS3231_RTC_ALARM_INPUT_GPIO_PIN,EXTI_FALLING_TRIGGER,DS3231_RTC_ALARM_INPUT_IRQ_NUM);
 8000d44:	2328      	movs	r3, #40	; 0x28
 8000d46:	2201      	movs	r2, #1
 8000d48:	210a      	movs	r1, #10
 8000d4a:	4802      	ldr	r0, [pc, #8]	; (8000d54 <RTC_DS3231_Config_Alarm_Interrupt+0x14>)
 8000d4c:	f000 f94e 	bl	8000fec <configure_external_gpio_interrupt>

	return;
 8000d50:	bf00      	nop
}
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020800 	.word	0x40020800

08000d58 <RTC_DS3231_Config_Alarm_Output_GPIO>:

void RTC_DS3231_Config_Alarm_Output_GPIO(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	EnablePeriClk(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT);
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 8000d5e:	f001 f87f 	bl	8001e60 <EnablePeriClk>
	GPIOSetMode(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_MODE_OUTPUT);
 8000d62:	2201      	movs	r2, #1
 8000d64:	210f      	movs	r1, #15
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 8000d68:	f000 fc7c 	bl	8001664 <GPIOSetMode>
	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_LOW);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	210f      	movs	r1, #15
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 8000d72:	f000 fc9b 	bl	80016ac <GPIOWritePin>

	return;
 8000d76:	bf00      	nop
}
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <RTC_DS3231_Config_Button_Interrupt>:

void RTC_DS3231_Config_Button_Interrupt(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(DS3231_RTC_BTN_INT_GPIO_PORT,DS3231_RTC_BTN_INT_GPIO_PIN,EXTI_FALLING_TRIGGER,DS3231_RTC_BTN_INT_IRQ_NUM);
 8000d84:	2308      	movs	r3, #8
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4802      	ldr	r0, [pc, #8]	; (8000d94 <RTC_DS3231_Config_Button_Interrupt+0x14>)
 8000d8c:	f000 f92e 	bl	8000fec <configure_external_gpio_interrupt>

	return;
 8000d90:	bf00      	nop
}
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000

08000d98 <RTC_DS3231_Read_Register>:

uint8_t RTC_DS3231_Read_Register(uint8_t address)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&reg,1,address,SlaveAddressRTC);
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <RTC_DS3231_Read_Register+0x2c>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <RTC_DS3231_Read_Register+0x30>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	f107 010f 	add.w	r1, r7, #15
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4613      	mov	r3, r2
 8000db4:	2201      	movs	r2, #1
 8000db6:	f000 fe87 	bl	8001ac8 <I2CMaster_DS3231_RTC_Read>

	return reg;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	2000000c 	.word	0x2000000c

08000dcc <RTC_DS3231_Clear_Alarm>:

void RTC_DS3231_Clear_Alarm(uint8_t AlarmSelection)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	uint8_t control_status_reg_address = 15;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t Tx_Buf[2];

	//Read the Control Status Register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&reg,1,control_status_reg_address,SlaveAddressRTC);
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <RTC_DS3231_Clear_Alarm+0x70>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <RTC_DS3231_Clear_Alarm+0x74>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	f107 010e 	add.w	r1, r7, #14
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	4613      	mov	r3, r2
 8000dec:	2201      	movs	r2, #1
 8000dee:	f000 fe6b 	bl	8001ac8 <I2CMaster_DS3231_RTC_Read>

	//Update the Control Status Register
	Tx_Buf[0] = control_status_reg_address;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	733b      	strb	r3, [r7, #12]

	if(AlarmSelection == DS3231_RTC_ALARM_1)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <RTC_DS3231_Clear_Alarm+0x3c>
	{
		Tx_Buf[1] = reg & 0xFE;
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	f023 0301 	bic.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	737b      	strb	r3, [r7, #13]
 8000e06:	e007      	b.n	8000e18 <RTC_DS3231_Clear_Alarm+0x4c>
	}
	else if(AlarmSelection == DS3231_RTC_ALARM_2)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <RTC_DS3231_Clear_Alarm+0x4c>
	{
		Tx_Buf[1] = reg & 0xFD;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f023 0302 	bic.w	r3, r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	737b      	strb	r3, [r7, #13]
	}

	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <RTC_DS3231_Clear_Alarm+0x70>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <RTC_DS3231_Clear_Alarm+0x74>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	2202      	movs	r2, #2
 8000e26:	f000 fd6d 	bl	8001904 <I2CMasterSendData>
	delay_us(2000);
 8000e2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e2e:	f7ff fa2f 	bl	8000290 <delay_us>

	return;
 8000e32:	bf00      	nop
}
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	78db      	ldrb	r3, [r3, #3]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d834      	bhi.n	8000ec2 <format_dow+0x7e>
 8000e58:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <format_dow+0x1c>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e7d 	.word	0x08000e7d
 8000e64:	08000e87 	.word	0x08000e87
 8000e68:	08000e91 	.word	0x08000e91
 8000e6c:	08000e9b 	.word	0x08000e9b
 8000e70:	08000ea5 	.word	0x08000ea5
 8000e74:	08000eaf 	.word	0x08000eaf
 8000e78:	08000eb9 	.word	0x08000eb9
	{
		case 1:
			strcpy(dow,"Mon");
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <format_dow+0x8c>)
 8000e80:	6810      	ldr	r0, [r2, #0]
 8000e82:	6018      	str	r0, [r3, #0]
			break;
 8000e84:	e01e      	b.n	8000ec4 <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <format_dow+0x90>)
 8000e8a:	6810      	ldr	r0, [r2, #0]
 8000e8c:	6018      	str	r0, [r3, #0]
			break;
 8000e8e:	e019      	b.n	8000ec4 <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <format_dow+0x94>)
 8000e94:	6810      	ldr	r0, [r2, #0]
 8000e96:	6018      	str	r0, [r3, #0]
			break;
 8000e98:	e014      	b.n	8000ec4 <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <format_dow+0x98>)
 8000e9e:	6810      	ldr	r0, [r2, #0]
 8000ea0:	6018      	str	r0, [r3, #0]
			break;
 8000ea2:	e00f      	b.n	8000ec4 <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <format_dow+0x9c>)
 8000ea8:	6810      	ldr	r0, [r2, #0]
 8000eaa:	6018      	str	r0, [r3, #0]
			break;
 8000eac:	e00a      	b.n	8000ec4 <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <format_dow+0xa0>)
 8000eb2:	6810      	ldr	r0, [r2, #0]
 8000eb4:	6018      	str	r0, [r3, #0]
			break;
 8000eb6:	e005      	b.n	8000ec4 <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <format_dow+0xa4>)
 8000ebc:	6810      	ldr	r0, [r2, #0]
 8000ebe:	6018      	str	r0, [r3, #0]
			break;
 8000ec0:	e000      	b.n	8000ec4 <format_dow+0x80>
		default:
			break;
 8000ec2:	bf00      	nop
	}

	return;
 8000ec4:	bf00      	nop
}
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	080037e0 	.word	0x080037e0
 8000ed4:	080037e4 	.word	0x080037e4
 8000ed8:	080037e8 	.word	0x080037e8
 8000edc:	080037ec 	.word	0x080037ec
 8000ee0:	080037f0 	.word	0x080037f0
 8000ee4:	080037f4 	.word	0x080037f4
 8000ee8:	080037f8 	.word	0x080037f8

08000eec <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	switch(date->month)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	2b0b      	cmp	r3, #11
 8000efe:	d857      	bhi.n	8000fb0 <format_mon+0xc4>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <format_mon+0x1c>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f39 	.word	0x08000f39
 8000f0c:	08000f43 	.word	0x08000f43
 8000f10:	08000f4d 	.word	0x08000f4d
 8000f14:	08000f57 	.word	0x08000f57
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08000f6b 	.word	0x08000f6b
 8000f20:	08000f75 	.word	0x08000f75
 8000f24:	08000f7f 	.word	0x08000f7f
 8000f28:	08000f89 	.word	0x08000f89
 8000f2c:	08000f93 	.word	0x08000f93
 8000f30:	08000f9d 	.word	0x08000f9d
 8000f34:	08000fa7 	.word	0x08000fa7
	{
		case 1:
			strcpy(mon,"Jan");
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <format_mon+0xd0>)
 8000f3c:	6810      	ldr	r0, [r2, #0]
 8000f3e:	6018      	str	r0, [r3, #0]
			break;
 8000f40:	e037      	b.n	8000fb2 <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <format_mon+0xd4>)
 8000f46:	6810      	ldr	r0, [r2, #0]
 8000f48:	6018      	str	r0, [r3, #0]
			break;
 8000f4a:	e032      	b.n	8000fb2 <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <format_mon+0xd8>)
 8000f50:	6810      	ldr	r0, [r2, #0]
 8000f52:	6018      	str	r0, [r3, #0]
			break;
 8000f54:	e02d      	b.n	8000fb2 <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <format_mon+0xdc>)
 8000f5a:	6810      	ldr	r0, [r2, #0]
 8000f5c:	6018      	str	r0, [r3, #0]
			break;
 8000f5e:	e028      	b.n	8000fb2 <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <format_mon+0xe0>)
 8000f64:	6810      	ldr	r0, [r2, #0]
 8000f66:	6018      	str	r0, [r3, #0]
			break;
 8000f68:	e023      	b.n	8000fb2 <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <format_mon+0xe4>)
 8000f6e:	6810      	ldr	r0, [r2, #0]
 8000f70:	6018      	str	r0, [r3, #0]
			break;
 8000f72:	e01e      	b.n	8000fb2 <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <format_mon+0xe8>)
 8000f78:	6810      	ldr	r0, [r2, #0]
 8000f7a:	6018      	str	r0, [r3, #0]
			break;
 8000f7c:	e019      	b.n	8000fb2 <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <format_mon+0xec>)
 8000f82:	6810      	ldr	r0, [r2, #0]
 8000f84:	6018      	str	r0, [r3, #0]
			break;
 8000f86:	e014      	b.n	8000fb2 <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <format_mon+0xf0>)
 8000f8c:	6810      	ldr	r0, [r2, #0]
 8000f8e:	6018      	str	r0, [r3, #0]
			break;
 8000f90:	e00f      	b.n	8000fb2 <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <format_mon+0xf4>)
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	6018      	str	r0, [r3, #0]
			break;
 8000f9a:	e00a      	b.n	8000fb2 <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <format_mon+0xf8>)
 8000fa0:	6810      	ldr	r0, [r2, #0]
 8000fa2:	6018      	str	r0, [r3, #0]
			break;
 8000fa4:	e005      	b.n	8000fb2 <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <format_mon+0xfc>)
 8000faa:	6810      	ldr	r0, [r2, #0]
 8000fac:	6018      	str	r0, [r3, #0]
			break;
 8000fae:	e000      	b.n	8000fb2 <format_mon+0xc6>
		default:
			break;
 8000fb0:	bf00      	nop
	}

	return;
 8000fb2:	bf00      	nop
}
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	080037fc 	.word	0x080037fc
 8000fc0:	08003800 	.word	0x08003800
 8000fc4:	08003804 	.word	0x08003804
 8000fc8:	08003808 	.word	0x08003808
 8000fcc:	0800380c 	.word	0x0800380c
 8000fd0:	08003810 	.word	0x08003810
 8000fd4:	08003814 	.word	0x08003814
 8000fd8:	08003818 	.word	0x08003818
 8000fdc:	0800381c 	.word	0x0800381c
 8000fe0:	08003820 	.word	0x08003820
 8000fe4:	08003824 	.word	0x08003824
 8000fe8:	08003828 	.word	0x08003828

08000fec <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	70fb      	strb	r3, [r7, #3]
 8000ffe:	460b      	mov	r3, r1
 8001000:	70bb      	strb	r3, [r7, #2]
 8001002:	4613      	mov	r3, r2
 8001004:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <configure_external_gpio_interrupt+0x10c>)
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <configure_external_gpio_interrupt+0x110>)
 800100c:	623b      	str	r3, [r7, #32]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <configure_external_gpio_interrupt+0x114>)
 8001010:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <configure_external_gpio_interrupt+0x118>)
 8001014:	61bb      	str	r3, [r7, #24]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <configure_external_gpio_interrupt+0x11c>)
 8001018:	617b      	str	r3, [r7, #20]
	uint32_t OFFSET;
	uint32_t OFFSET_ADDRESS;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 ff20 	bl	8001e60 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fb1c 	bl	8001664 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fb95 	bl	8001762 <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2202      	movs	r2, #2
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fbd5 	bl	80017ee <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fbab 	bl	80017a6 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	431a      	orrs	r2, r3
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 8001062:	78bb      	ldrb	r3, [r7, #2]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d108      	bne.n	800107a <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	431a      	orrs	r2, r3
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	431a      	orrs	r2, r3
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	613b      	str	r3, [r7, #16]
	OFFSET_ADDRESS = gpio_pin/4;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	60fb      	str	r3, [r7, #12]
	pSYSCFG_EXTI_CR_ADDR += OFFSET_ADDRESS;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4413      	add	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	210f      	movs	r1, #15
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	43d2      	mvns	r2, r2
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f81c 	bl	800110c <gpio_port_name_to_num>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	409a      	lsls	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 f87c 	bl	80021e8 <NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023844 	.word	0x40023844
 80010fc:	40013c00 	.word	0x40013c00
 8001100:	40013c08 	.word	0x40013c08
 8001104:	40013c0c 	.word	0x40013c0c
 8001108:	40013808 	.word	0x40013808

0800110c <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <gpio_port_name_to_num+0x90>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d102      	bne.n	8001122 <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e036      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <gpio_port_name_to_num+0x94>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d102      	bne.n	8001130 <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e02f      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <gpio_port_name_to_num+0x98>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d102      	bne.n	800113e <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e028      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <gpio_port_name_to_num+0x9c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d102      	bne.n	800114c <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8001146:	2303      	movs	r3, #3
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e021      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <gpio_port_name_to_num+0xa0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e01a      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <gpio_port_name_to_num+0xa4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 8001162:	2305      	movs	r3, #5
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e013      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <gpio_port_name_to_num+0xa8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d102      	bne.n	8001176 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 8001170:	2306      	movs	r3, #6
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e00c      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <gpio_port_name_to_num+0xac>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 800117e:	2307      	movs	r3, #7
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e005      	b.n	8001190 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <gpio_port_name_to_num+0xb0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 800118c:	2308      	movs	r3, #8
 800118e:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40022000 	.word	0x40022000

080011c0 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6852      	ldr	r2, [r2, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6892      	ldr	r2, [r2, #8]
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b5b      	ldrb	r3, [r3, #13]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d16a      	bne.n	80012ba <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7b9b      	ldrb	r3, [r3, #14]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d11c      	bne.n	8001236 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0203 	bic.w	r2, r2, #3
 800120a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6912      	ldr	r2, [r2, #16]
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001224:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001234:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7b9b      	ldrb	r3, [r3, #14]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d11c      	bne.n	8001278 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699a      	ldr	r2, [r3, #24]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0203 	bic.w	r2, r2, #3
 800124c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6912      	ldr	r2, [r2, #16]
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001266:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001276:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b9b      	ldrb	r3, [r3, #14]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d11c      	bne.n	80012ba <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0203 	bic.w	r2, r2, #3
 800128e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6912      	ldr	r2, [r2, #16]
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012a8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80012b8:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7d1b      	ldrb	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80bf 	bne.w	8001442 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7d5b      	ldrb	r3, [r3, #21]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d124      	bne.n	8001316 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012da:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6992      	ldr	r2, [r2, #24]
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012f4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699a      	ldr	r2, [r3, #24]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001304:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0210 	orr.w	r2, r2, #16
 8001314:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7d5b      	ldrb	r3, [r3, #21]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d124      	bne.n	8001368 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800132c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6992      	ldr	r2, [r2, #24]
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001346:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001356:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7d5b      	ldrb	r3, [r3, #21]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d124      	bne.n	80013ba <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800137e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6992      	ldr	r2, [r2, #24]
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001398:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80013a8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0210 	orr.w	r2, r2, #16
 80013b8:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7d5b      	ldrb	r3, [r3, #21]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d13f      	bne.n	8001442 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013d0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e0:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80013f0:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0220 	bic.w	r2, r2, #32
 8001400:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001410:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001420:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0210 	orr.w	r2, r2, #16
 8001440:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7f1b      	ldrb	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d16a      	bne.n	8001520 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001458:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7f5b      	ldrb	r3, [r3, #29]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d11c      	bne.n	800149c <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0203 	bic.w	r2, r2, #3
 8001470:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6a12      	ldr	r2, [r2, #32]
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800148a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800149a:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7f5b      	ldrb	r3, [r3, #29]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d11c      	bne.n	80014de <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0203 	bic.w	r2, r2, #3
 80014b2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6a12      	ldr	r2, [r2, #32]
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014cc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80014dc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7f5b      	ldrb	r3, [r3, #29]
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d11c      	bne.n	8001520 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0203 	bic.w	r2, r2, #3
 80014f4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6a12      	ldr	r2, [r2, #32]
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800150e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800151e:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001526:	2b00      	cmp	r3, #0
 8001528:	d16d      	bne.n	8001606 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001538:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001540:	2b02      	cmp	r3, #2
 8001542:	d11c      	bne.n	800157e <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001552:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800156c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800157c:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001584:	2b03      	cmp	r3, #3
 8001586:	d11c      	bne.n	80015c2 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001596:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80015b0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80015c0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d11c      	bne.n	8001606 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80015da:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80015f4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001604:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7b1b      	ldrb	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 800161e:	e00b      	b.n	8001638 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	60da      	str	r2, [r3, #12]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	4613      	mov	r3, r2
 8001672:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	0052      	lsls	r2, r2, #1
 8001680:	2103      	movs	r1, #3
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	43d2      	mvns	r2, r2
 8001688:	401a      	ands	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	78b9      	ldrb	r1, [r7, #2]
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	431a      	orrs	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	601a      	str	r2, [r3, #0]

}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	401a      	ands	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	78b9      	ldrb	r1, [r7, #2]
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	431a      	orrs	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	615a      	str	r2, [r3, #20]
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
 80016fc:	4613      	mov	r3, r2
 80016fe:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8001712:	7afa      	ldrb	r2, [r7, #11]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	7aba      	ldrb	r2, [r7, #10]
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	210f      	movs	r1, #15
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	43d2      	mvns	r2, r2
 8001728:	4611      	mov	r1, r2
 800172a:	7afa      	ldrb	r2, [r7, #11]
 800172c:	4019      	ands	r1, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3208      	adds	r2, #8
 8001732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8001736:	7afa      	ldrb	r2, [r7, #11]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	78b9      	ldrb	r1, [r7, #2]
 8001742:	7aba      	ldrb	r2, [r7, #10]
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4611      	mov	r1, r2
 800174c:	7afa      	ldrb	r2, [r7, #11]
 800174e:	4319      	orrs	r1, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3208      	adds	r2, #8
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	4613      	mov	r3, r2
 8001770:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	43d2      	mvns	r2, r2
 8001784:	401a      	ands	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	78b9      	ldrb	r1, [r7, #2]
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	fa01 f202 	lsl.w	r2, r1, r2
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	605a      	str	r2, [r3, #4]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	4613      	mov	r3, r2
 80017b4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	0052      	lsls	r2, r2, #1
 80017c2:	2103      	movs	r1, #3
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	43d2      	mvns	r2, r2
 80017ca:	401a      	ands	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	78b9      	ldrb	r1, [r7, #2]
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	0052      	lsls	r2, r2, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	60da      	str	r2, [r3, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70fb      	strb	r3, [r7, #3]
 80017fa:	4613      	mov	r3, r2
 80017fc:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	0052      	lsls	r2, r2, #1
 800180a:	2103      	movs	r1, #3
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	43d2      	mvns	r2, r2
 8001812:	401a      	ands	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	78b9      	ldrb	r1, [r7, #2]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	0052      	lsls	r2, r2, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	03db      	lsls	r3, r3, #15
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10d      	bne.n	800189e <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018a6:	f023 030f 	bic.w	r3, r3, #15
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	601a      	str	r2, [r3, #0]

}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	601a      	str	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f84c 	bl	80019b4 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 800191c:	bf00      	nop
 800191e:	2101      	movs	r1, #1
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f869 	bl	80019f8 <I2C_GetFlagStatus>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f8      	beq.n	800191e <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f86f 	bl	8001a22 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001944:	bf00      	nop
 8001946:	2102      	movs	r1, #2
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f855 	bl	80019f8 <I2C_GetFlagStatus>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f8      	beq.n	8001946 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f874 	bl	8001a42 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 800195a:	e012      	b.n	8001982 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 800195c:	bf00      	nop
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f849 	bl	80019f8 <I2C_GetFlagStatus>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f8      	beq.n	800195e <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3301      	adds	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
		Len--;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001988:	bf00      	nop
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f833 	bl	80019f8 <I2C_GetFlagStatus>
 8001992:	4603      	mov	r3, r0
 8001994:	2b01      	cmp	r3, #1
 8001996:	d1f8      	bne.n	800198a <I2CMasterSendData+0x86>
 8001998:	2104      	movs	r1, #4
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f82c 	bl	80019f8 <I2C_GetFlagStatus>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d1f1      	bne.n	800198a <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f815 	bl	80019d6 <I2C_SendStopBit>

}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	621a      	str	r2, [r3, #32]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff ff66 	bl	80019b4 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001ae8:	bf00      	nop
 8001aea:	2101      	movs	r1, #1
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff ff83 	bl	80019f8 <I2C_GetFlagStatus>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f8      	beq.n	8001aea <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 8001af8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff88 	bl	8001a22 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001b12:	bf00      	nop
 8001b14:	2102      	movs	r1, #2
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff6e 	bl	80019f8 <I2C_GetFlagStatus>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f8      	beq.n	8001b14 <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff ff8d 	bl	8001a42 <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8001b2c:	e015      	b.n	8001b5a <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001b2e:	bf00      	nop
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff ff60 	bl	80019f8 <I2C_GetFlagStatus>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f8      	beq.n	8001b30 <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001b3e:	7fbb      	ldrb	r3, [r7, #30]
 8001b40:	3320      	adds	r3, #32
 8001b42:	443b      	add	r3, r7
 8001b44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	611a      	str	r2, [r3, #16]
		i++;
 8001b4e:	7fbb      	ldrb	r3, [r7, #30]
 8001b50:	3301      	adds	r3, #1
 8001b52:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e6      	bne.n	8001b2e <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001b60:	bf00      	nop
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff47 	bl	80019f8 <I2C_GetFlagStatus>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1f8      	bne.n	8001b62 <I2CMaster_DS3231_RTC_Read+0x9a>
 8001b70:	2104      	movs	r1, #4
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff ff40 	bl	80019f8 <I2C_GetFlagStatus>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d1f1      	bne.n	8001b62 <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff ff18 	bl	80019b4 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001b84:	bf00      	nop
 8001b86:	2101      	movs	r1, #1
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff ff35 	bl	80019f8 <I2C_GetFlagStatus>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f8      	beq.n	8001b86 <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 8001b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff ff3a 	bl	8001a22 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001bae:	bf00      	nop
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff ff20 	bl	80019f8 <I2C_GetFlagStatus>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f8      	beq.n	8001bb0 <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff ff3f 	bl	8001a42 <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d919      	bls.n	8001bfe <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff ff5a 	bl	8001a84 <I2CEnableAck>
		while(Len >= 2)
 8001bd0:	e012      	b.n	8001bf8 <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001bd2:	bf00      	nop
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff ff0e 	bl	80019f8 <I2C_GetFlagStatus>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f8      	beq.n	8001bd4 <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
			Len--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d8e9      	bhi.n	8001bd2 <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d115      	bne.n	8001c30 <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff ff4e 	bl	8001aa6 <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001c0a:	bf00      	nop
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff fef2 	bl	80019f8 <I2C_GetFlagStatus>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f8      	beq.n	8001c0c <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
		Len--;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fed0 	bl	80019d6 <I2C_SendStopBit>

	return;
 8001c36:	bf00      	nop
}
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8001c42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c46:	f7fe fb23 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001c4a:	2030      	movs	r0, #48	; 0x30
 8001c4c:	f000 f846 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c54:	f7fe fb1c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001c58:	2030      	movs	r0, #48	; 0x30
 8001c5a:	f000 f83f 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001c5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c62:	f7fe fb15 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001c66:	2030      	movs	r0, #48	; 0x30
 8001c68:	f000 f838 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8001c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c70:	f7fe fb0e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8001c74:	2020      	movs	r0, #32
 8001c76:	f000 f831 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8001c7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c7e:	f7fe fb07 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001c82:	2028      	movs	r0, #40	; 0x28
 8001c84:	f000 f82a 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c88:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c8c:	f7fe fb00 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8001c90:	2008      	movs	r0, #8
 8001c92:	f000 f823 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c9a:	f7fe faf9 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f000 f81c 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001ca4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ca8:	f7fe faf2 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 f815 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001cb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cb6:	f7fe faeb 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001cba:	2006      	movs	r0, #6
 8001cbc:	f000 f80e 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001cc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cc4:	f7fe fae4 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001cc8:	200c      	movs	r0, #12
 8001cca:	f000 f807 	bl	8001cdc <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001cce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cd2:	f7fe fadd 	bl	8000290 <delay_us>

	return;
 8001cd6:	bf00      	nop
}
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f023 030f 	bic.w	r3, r3, #15
 8001cec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	f043 030c 	orr.w	r3, r3, #12
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	f043 030c 	orr.w	r3, r3, #12
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001d12:	7bbb      	ldrb	r3, [r7, #14]
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <lcd_pcf8574_send_cmd+0x5c>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <lcd_pcf8574_send_cmd+0x60>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f107 0108 	add.w	r1, r7, #8
 8001d28:	2204      	movs	r2, #4
 8001d2a:	f7ff fdeb 	bl	8001904 <I2CMasterSendData>

	return;
 8001d2e:	bf00      	nop
}
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f023 030f 	bic.w	r3, r3, #15
 8001d50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f043 030d 	orr.w	r3, r3, #13
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f043 0309 	orr.w	r3, r3, #9
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	f043 030d 	orr.w	r3, r3, #13
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	f043 0309 	orr.w	r3, r3, #9
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <lcd_pcf8574_send_data+0x5c>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <lcd_pcf8574_send_data+0x60>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f107 0108 	add.w	r1, r7, #8
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	f7ff fdb9 	bl	8001904 <I2CMasterSendData>

	return;
 8001d92:	bf00      	nop
}
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff ff97 	bl	8001cdc <lcd_pcf8574_send_cmd>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff ff90 	bl	8001cdc <lcd_pcf8574_send_cmd>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b27      	cmp	r3, #39	; 0x27
 8001dda:	d802      	bhi.n	8001de2 <lcd_pcf8574_set_position+0x22>
			position = col;
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e011      	b.n	8001e06 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e00e      	b.n	8001e06 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d109      	bne.n	8001e02 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	2b27      	cmp	r3, #39	; 0x27
 8001df2:	d803      	bhi.n	8001dfc <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	3340      	adds	r3, #64	; 0x40
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e004      	b.n	8001e06 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e001      	b.n	8001e06 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e0c:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff63 	bl	8001cdc <lcd_pcf8574_send_cmd>

	return;
 8001e16:	bf00      	nop
}
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <RTC_Alarm_IRQHandler+0x24>)
 8001e28:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001e2a:	f000 f80d 	bl	8001e48 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]

	return;
 8001e3a:	bf00      	nop
}
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40013c14 	.word	0x40013c14

08001e48 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	210f      	movs	r1, #15
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <RTC_Alarm_Interrupt_Callback+0x14>)
 8001e52:	f7ff fc2b 	bl	80016ac <GPIOWritePin>

	return;
 8001e56:	bf00      	nop
}
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020c00 	.word	0x40020c00

08001e60 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a88      	ldr	r2, [pc, #544]	; (800208c <EnablePeriClk+0x22c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e70:	4b87      	ldr	r3, [pc, #540]	; (8002090 <EnablePeriClk+0x230>)
 8001e72:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001e80:	e19b      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a83      	ldr	r2, [pc, #524]	; (8002094 <EnablePeriClk+0x234>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e8a:	4b81      	ldr	r3, [pc, #516]	; (8002090 <EnablePeriClk+0x230>)
 8001e8c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	e18e      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a7e      	ldr	r2, [pc, #504]	; (8002098 <EnablePeriClk+0x238>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d108      	bne.n	8001eb6 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ea4:	4b7a      	ldr	r3, [pc, #488]	; (8002090 <EnablePeriClk+0x230>)
 8001ea6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	e181      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a78      	ldr	r2, [pc, #480]	; (800209c <EnablePeriClk+0x23c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ebe:	4b74      	ldr	r3, [pc, #464]	; (8002090 <EnablePeriClk+0x230>)
 8001ec0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f043 0208 	orr.w	r2, r3, #8
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	e174      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a73      	ldr	r2, [pc, #460]	; (80020a0 <EnablePeriClk+0x240>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <EnablePeriClk+0x230>)
 8001eda:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	e167      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a6d      	ldr	r2, [pc, #436]	; (80020a4 <EnablePeriClk+0x244>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <EnablePeriClk+0x230>)
 8001ef4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f043 0220 	orr.w	r2, r3, #32
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	e15a      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <EnablePeriClk+0x248>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <EnablePeriClk+0x230>)
 8001f0e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	e14d      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a62      	ldr	r2, [pc, #392]	; (80020ac <EnablePeriClk+0x24c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <EnablePeriClk+0x230>)
 8001f28:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	e140      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <EnablePeriClk+0x250>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <EnablePeriClk+0x230>)
 8001f42:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	e133      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a57      	ldr	r2, [pc, #348]	; (80020b4 <EnablePeriClk+0x254>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <EnablePeriClk+0x258>)
 8001f5c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	e126      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a53      	ldr	r2, [pc, #332]	; (80020bc <EnablePeriClk+0x25c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f74:	4b52      	ldr	r3, [pc, #328]	; (80020c0 <EnablePeriClk+0x260>)
 8001f76:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	e119      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <EnablePeriClk+0x264>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d108      	bne.n	8001fa0 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <EnablePeriClk+0x260>)
 8001f90:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	e10c      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <EnablePeriClk+0x268>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d108      	bne.n	8001fba <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <EnablePeriClk+0x260>)
 8001faa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	e0ff      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <EnablePeriClk+0x26c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <EnablePeriClk+0x260>)
 8001fc4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	e0f2      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	; (80020d0 <EnablePeriClk+0x270>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d108      	bne.n	8001fee <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <EnablePeriClk+0x260>)
 8001fde:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	e0e5      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <EnablePeriClk+0x274>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d108      	bne.n	8002008 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <EnablePeriClk+0x258>)
 8001ff8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	e0d8      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <EnablePeriClk+0x278>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <EnablePeriClk+0x260>)
 8002012:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	e0cb      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <EnablePeriClk+0x27c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <EnablePeriClk+0x260>)
 800202c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	e0be      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <EnablePeriClk+0x280>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <EnablePeriClk+0x260>)
 8002046:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]
}
 8002054:	e0b1      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <EnablePeriClk+0x284>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <EnablePeriClk+0x260>)
 8002060:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	e0a4      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <EnablePeriClk+0x288>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d139      	bne.n	80020ec <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <EnablePeriClk+0x258>)
 800207a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	e097      	b.n	80021ba <EnablePeriClk+0x35a>
 800208a:	bf00      	nop
 800208c:	40020000 	.word	0x40020000
 8002090:	40023830 	.word	0x40023830
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40013000 	.word	0x40013000
 80020b8:	40023844 	.word	0x40023844
 80020bc:	40003800 	.word	0x40003800
 80020c0:	40023840 	.word	0x40023840
 80020c4:	40003c00 	.word	0x40003c00
 80020c8:	40005400 	.word	0x40005400
 80020cc:	40005800 	.word	0x40005800
 80020d0:	40005c00 	.word	0x40005c00
 80020d4:	40011000 	.word	0x40011000
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40004800 	.word	0x40004800
 80020e0:	40004c00 	.word	0x40004c00
 80020e4:	40005000 	.word	0x40005000
 80020e8:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a35      	ldr	r2, [pc, #212]	; (80021c4 <EnablePeriClk+0x364>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d108      	bne.n	8002106 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <EnablePeriClk+0x368>)
 80020f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f043 0210 	orr.w	r2, r3, #16
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	e059      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a30      	ldr	r2, [pc, #192]	; (80021cc <EnablePeriClk+0x36c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <EnablePeriClk+0x368>)
 8002110:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	e04c      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <EnablePeriClk+0x370>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <EnablePeriClk+0x374>)
 800212a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	e03f      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <EnablePeriClk+0x378>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <EnablePeriClk+0x374>)
 8002144:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	e032      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d108      	bne.n	800216e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <EnablePeriClk+0x368>)
 800215e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	e025      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <EnablePeriClk+0x37c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <EnablePeriClk+0x368>)
 8002178:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	e018      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <EnablePeriClk+0x380>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <EnablePeriClk+0x368>)
 8002192:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	e00b      	b.n	80021ba <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <EnablePeriClk+0x384>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d107      	bne.n	80021ba <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <EnablePeriClk+0x368>)
 80021ac:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f043 0208 	orr.w	r2, r3, #8
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40001000 	.word	0x40001000
 80021c8:	40023840 	.word	0x40023840
 80021cc:	40001400 	.word	0x40001400
 80021d0:	40026000 	.word	0x40026000
 80021d4:	40023830 	.word	0x40023830
 80021d8:	40026400 	.word	0x40026400
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00

080021e8 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800220a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800220e:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <main>:

static void disable_interrupts(void);
static void enable_interrupts(void);

int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0

	struct RTC_DS3231_Config_t ds3231_rtc_config;
	struct RTC_DS3231_AlarmConfig_t ds3231_rtc_alarm_config;

	disable_interrupts();
 8002232:	f000 f929 	bl	8002488 <disable_interrupts>

	//Configure the Timer
	configure_delay_timer();
 8002236:	f7fe f843 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 800223a:	f7fe f863 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 800223e:	4b55      	ldr	r3, [pc, #340]	; (8002394 <main+0x168>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fb36 	bl	80028b8 <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 800224c:	4852      	ldr	r0, [pc, #328]	; (8002398 <main+0x16c>)
 800224e:	f7fe f81f 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8002252:	f7ff fcf4 	bl	8001c3e <lcd_pcf8574_init>
	delay_us(100000);
 8002256:	4851      	ldr	r0, [pc, #324]	; (800239c <main+0x170>)
 8002258:	f7fe f81a 	bl	8000290 <delay_us>

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 800225c:	f7fe f8ba 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the parameters of the RTC
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	220f      	movs	r2, #15
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fa17 	bl	800269c <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	763b      	strb	r3, [r7, #24]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	767b      	strb	r3, [r7, #25]
	ds3231_rtc_config.RTCClockMinutesUnits = 6;
 8002276:	2306      	movs	r3, #6
 8002278:	76bb      	strb	r3, [r7, #26]
	ds3231_rtc_config.RTCClockMinutesTens = 3;
 800227a:	2303      	movs	r3, #3
 800227c:	76fb      	strb	r3, [r7, #27]
	ds3231_rtc_config.RTCClockHoursUnits = 9;
 800227e:	2309      	movs	r3, #9
 8002280:	773b      	strb	r3, [r7, #28]
	ds3231_rtc_config.RTCClockHoursTens = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	777b      	strb	r3, [r7, #29]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002286:	2301      	movs	r3, #1
 8002288:	77bb      	strb	r3, [r7, #30]
	ds3231_rtc_config.RTCClockAMPM = DS3231_RTC_HOUR_AM;
 800228a:	2300      	movs	r3, #0
 800228c:	77fb      	strb	r3, [r7, #31]
	ds3231_rtc_config.RTCClockDateUnits = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 3020 	strb.w	r3, [r7, #32]
	ds3231_rtc_config.RTCClockDateTens = 2;
 8002294:	2302      	movs	r3, #2
 8002296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ds3231_rtc_config.RTCClockMonthTens = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ds3231_rtc_config.RTCClockYearUnits = 4;
 80022a6:	2304      	movs	r3, #4
 80022a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ds3231_rtc_config.RTCClockYearTens = 2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ds3231_rtc_config.RTCClockDayOfWeek = RTC_CLK_DOW_SUN;
 80022b2:	2307      	movs	r3, #7
 80022b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 80022b8:	f107 0318 	add.w	r3, r7, #24
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8ff 	bl	80004c0 <RTC_DS3231_Config_Calendar>
	delay_us(100000);
 80022c2:	4836      	ldr	r0, [pc, #216]	; (800239c <main+0x170>)
 80022c4:	f7fd ffe4 	bl	8000290 <delay_us>

	//Configure the DS3231 RTC Alarm 1
	memset(&ds3231_rtc_alarm_config,0,sizeof(ds3231_rtc_alarm_config));
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2211      	movs	r2, #17
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f9e4 	bl	800269c <memset>
	ds3231_rtc_alarm_config.RTCAlarmSelection = DS3231_RTC_ALARM_1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_alarm_config.RTCAlarmSecondsTens = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_NO;
 80022e0:	2301      	movs	r3, #1
 80022e2:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_alarm_config.RTCAlarmMinutesUnits = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_alarm_config.RTCAlarmMinutesTens = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_NO;
 80022ec:	2301      	movs	r3, #1
 80022ee:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_alarm_config.RTCAlarmHoursUnits = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_alarm_config.RTCAlarmHoursTens = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_alarm_config.RTCAlarmHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 80022f8:	2301      	movs	r3, #1
 80022fa:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_alarm_config.RTCAlarmAMPM = DS3231_RTC_HOUR_PM;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_NO;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_alarm_config.RTCAlarmDateUnits = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_alarm_config.RTCAlarmDateTens = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_alarm_config.RTCAlarmDayOfWeek = RTC_CLK_DOW_FRI;
 800230c:	2305      	movs	r3, #5
 800230e:	74bb      	strb	r3, [r7, #18]
	ds3231_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8002310:	2301      	movs	r3, #1
 8002312:	74fb      	strb	r3, [r7, #19]
	ds3231_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8002314:	2301      	movs	r3, #1
 8002316:	753b      	strb	r3, [r7, #20]

	RTC_DS3231_Config_Alarm(&ds3231_rtc_alarm_config);
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fc2c 	bl	8000b78 <RTC_DS3231_Config_Alarm>
	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_1);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fd53 	bl	8000dcc <RTC_DS3231_Clear_Alarm>

	//Configure the DS3231 RTC Alarm 2
	memset(&ds3231_rtc_alarm_config,0,sizeof(ds3231_rtc_alarm_config));
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2211      	movs	r2, #17
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f9b5 	bl	800269c <memset>
	ds3231_rtc_alarm_config.RTCAlarmSelection = DS3231_RTC_ALARM_2;
 8002332:	2301      	movs	r3, #1
 8002334:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_alarm_config.RTCAlarmMinutesUnits = 8;
 8002336:	2308      	movs	r3, #8
 8002338:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_alarm_config.RTCAlarmMinutesTens = 3;
 800233a:	2303      	movs	r3, #3
 800233c:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_YES;
 800233e:	2300      	movs	r3, #0
 8002340:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_alarm_config.RTCAlarmHoursUnits = 9;
 8002342:	2309      	movs	r3, #9
 8002344:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_alarm_config.RTCAlarmHoursTens = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_alarm_config.RTCAlarmHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 800234a:	2301      	movs	r3, #1
 800234c:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_alarm_config.RTCAlarmAMPM = DS3231_RTC_HOUR_AM;
 800234e:	2300      	movs	r3, #0
 8002350:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_YES;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_alarm_config.RTCAlarmDateUnits = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_alarm_config.RTCAlarmDateTens = 2;
 800235a:	2302      	movs	r3, #2
 800235c:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_alarm_config.RTCAlarmDayOfWeek = RTC_CLK_DOW_SUN;
 800235e:	2307      	movs	r3, #7
 8002360:	74bb      	strb	r3, [r7, #18]
	ds3231_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
	ds3231_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8002366:	2301      	movs	r3, #1
 8002368:	753b      	strb	r3, [r7, #20]

	RTC_DS3231_Config_Alarm(&ds3231_rtc_alarm_config);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fc03 	bl	8000b78 <RTC_DS3231_Config_Alarm>
	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_2);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe fd2a 	bl	8000dcc <RTC_DS3231_Clear_Alarm>

	//Configure the Alarm Input GPIO Pin and Enable the Interrupt in NVIC
	RTC_DS3231_Config_Alarm_Interrupt();
 8002378:	f7fe fce2 	bl	8000d40 <RTC_DS3231_Config_Alarm_Interrupt>

	//Configure the Alarm Output GPIO Pin
	RTC_DS3231_Config_Alarm_Output_GPIO();
 800237c:	f7fe fcec 	bl	8000d58 <RTC_DS3231_Config_Alarm_Output_GPIO>

	//Configure the Button Interrupt
	RTC_DS3231_Config_Button_Interrupt();
 8002380:	f7fe fcfe 	bl	8000d80 <RTC_DS3231_Config_Button_Interrupt>

	delay_us(10000);
 8002384:	f242 7010 	movw	r0, #10000	; 0x2710
 8002388:	f7fd ff82 	bl	8000290 <delay_us>

	enable_interrupts();
 800238c:	f000 f883 	bl	8002496 <enable_interrupts>

	while(1)
 8002390:	e7fe      	b.n	8002390 <main+0x164>
 8002392:	bf00      	nop
 8002394:	20000010 	.word	0x20000010
 8002398:	000f4240 	.word	0x000f4240
 800239c:	000186a0 	.word	0x000186a0

080023a0 <EXTI15_10_IRQHandler>:
	return 0;
}

//Alarm Interrupt
void EXTI15_10_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <EXTI15_10_IRQHandler+0x98>)
 80023a8:	60fb      	str	r3, [r7, #12]
	uint8_t reg_value, reg_address;
	uint8_t control_status_reg_address = 15;
 80023aa:	230f      	movs	r3, #15
 80023ac:	72fb      	strb	r3, [r7, #11]
	uint8_t Tx_Buf[2];

	disable_interrupts();
 80023ae:	f000 f86b 	bl	8002488 <disable_interrupts>

	//Reading the DS3231 RTC Module Status Register
	reg_address = 0xF;										//Address of Control and Status Register
 80023b2:	230f      	movs	r3, #15
 80023b4:	72bb      	strb	r3, [r7, #10]
	reg_value = RTC_DS3231_Read_Register(reg_address);
 80023b6:	7abb      	ldrb	r3, [r7, #10]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fced 	bl	8000d98 <RTC_DS3231_Read_Register>
 80023be:	4603      	mov	r3, r0
 80023c0:	727b      	strb	r3, [r7, #9]

	delay_us(1000);
 80023c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c6:	f7fd ff63 	bl	8000290 <delay_us>

	if(reg_value & (1 << DS3231_RTC_CSR_A1F))				//Checking if Alarm 1 Flag is Set
 80023ca:	7a7b      	ldrb	r3, [r7, #9]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <EXTI15_10_IRQHandler+0x44>
	{
		//Update the LCD
		RTC_DS3231_Read_Calendar(&date,&time);
 80023d4:	4919      	ldr	r1, [pc, #100]	; (800243c <EXTI15_10_IRQHandler+0x9c>)
 80023d6:	481a      	ldr	r0, [pc, #104]	; (8002440 <EXTI15_10_IRQHandler+0xa0>)
 80023d8:	f7fe f920 	bl	800061c <RTC_DS3231_Read_Calendar>
		RTC_DS3231_Display_Calendar_LCD(&date,&time);
 80023dc:	4917      	ldr	r1, [pc, #92]	; (800243c <EXTI15_10_IRQHandler+0x9c>)
 80023de:	4818      	ldr	r0, [pc, #96]	; (8002440 <EXTI15_10_IRQHandler+0xa0>)
 80023e0:	f7fe f9ec 	bl	80007bc <RTC_DS3231_Display_Calendar_LCD>
	}

	if(reg_value & (1 << DS3231_RTC_CSR_A2F))				//Checking if Alarm 2 Flag is Set
 80023e4:	7a7b      	ldrb	r3, [r7, #9]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <EXTI15_10_IRQHandler+0x58>
	{
		//Turning on the Output LED
		GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_HIGH);
 80023ee:	2201      	movs	r2, #1
 80023f0:	210f      	movs	r1, #15
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <EXTI15_10_IRQHandler+0xa4>)
 80023f4:	f7ff f95a 	bl	80016ac <GPIOWritePin>
	}

	//Clearing the Alarm Flags in the DS3231 RTC Module
	Tx_Buf[0] = control_status_reg_address;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	713b      	strb	r3, [r7, #4]
	Tx_Buf[1] = reg_value & 0xFC;
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	717b      	strb	r3, [r7, #5]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <EXTI15_10_IRQHandler+0xa8>)
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <EXTI15_10_IRQHandler+0xac>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	1d39      	adds	r1, r7, #4
 8002410:	2202      	movs	r2, #2
 8002412:	f7ff fa77 	bl	8001904 <I2CMasterSendData>
	delay_us(2000);
 8002416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800241a:	f7fd ff39 	bl	8000290 <delay_us>

	//Clearing the Alarm Interrupt
	*pEXTI_PR |= (1 << DS3231_RTC_ALARM_INPUT_GPIO_PIN);	//Clearing the EXTI_PR Register
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	601a      	str	r2, [r3, #0]

	enable_interrupts();
 800242a:	f000 f834 	bl	8002496 <enable_interrupts>

	return;
 800242e:	bf00      	nop
}
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40013c14 	.word	0x40013c14
 800243c:	200000cc 	.word	0x200000cc
 8002440:	200000c8 	.word	0x200000c8
 8002444:	40020c00 	.word	0x40020c00
 8002448:	20000008 	.word	0x20000008
 800244c:	2000000c 	.word	0x2000000c

08002450 <EXTI2_IRQHandler>:

//Button Interrupt
void EXTI2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <EXTI2_IRQHandler+0x30>)
 8002458:	607b      	str	r3, [r7, #4]

	disable_interrupts();
 800245a:	f000 f815 	bl	8002488 <disable_interrupts>

	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_LOW);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	4808      	ldr	r0, [pc, #32]	; (8002484 <EXTI2_IRQHandler+0x34>)
 8002464:	f7ff f922 	bl	80016ac <GPIOWritePin>

	//2. Clearing the Button Interrupt
	*pEXTI_PR |= (1 << DS3231_RTC_BTN_INT_GPIO_PIN);		// Clearing the EXTI_PR Register
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]

	enable_interrupts();
 8002474:	f000 f80f 	bl	8002496 <enable_interrupts>

	return;
 8002478:	bf00      	nop
}
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013c14 	.word	0x40013c14
 8002484:	40020c00 	.word	0x40020c00

08002488 <disable_interrupts>:

static void disable_interrupts(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	__asm volatile ("CPSID I");
 800248c:	b672      	cpsid	i

	return;
 800248e:	bf00      	nop
}
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <enable_interrupts>:

static void enable_interrupts(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
	__asm volatile ("CPSIE I");
 800249a:	b662      	cpsie	i

	return;
 800249c:	bf00      	nop
}
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b6:	f3af 8000 	nop.w
 80024ba:	4601      	mov	r1, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf0      	blt.n	80024b6 <_read+0x12>
  }

  return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e009      	b.n	8002504 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ffd3 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf1      	blt.n	80024f0 <_write+0x12>
  }
  return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_close>:

int _close(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253c:	605a      	str	r2, [r3, #4]
  return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <_isatty>:

int _isatty(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f000 f846 	bl	8002638 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	200000d0 	.word	0x200000d0
 80025e0:	200000e8 	.word	0x200000e8

080025e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002612:	f000 f817 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002616:	f7ff fe09 	bl	800222c <main>

0800261a <LoopForever>:

LoopForever:
  b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   r0, =_estack
 800261c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002628:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 800262c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002630:	200000e4 	.word	0x200000e4

08002634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC_IRQHandler>
	...

08002638 <__errno>:
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <__errno+0x8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000010 	.word	0x20000010

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	4d0d      	ldr	r5, [pc, #52]	; (800267c <__libc_init_array+0x38>)
 8002648:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264a:	1b64      	subs	r4, r4, r5
 800264c:	10a4      	asrs	r4, r4, #2
 800264e:	2600      	movs	r6, #0
 8002650:	42a6      	cmp	r6, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	4d0b      	ldr	r5, [pc, #44]	; (8002684 <__libc_init_array+0x40>)
 8002656:	4c0c      	ldr	r4, [pc, #48]	; (8002688 <__libc_init_array+0x44>)
 8002658:	f001 f87c 	bl	8003754 <_init>
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	2600      	movs	r6, #0
 8002662:	42a6      	cmp	r6, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	f855 3b04 	ldr.w	r3, [r5], #4
 800266c:	4798      	blx	r3
 800266e:	3601      	adds	r6, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	f855 3b04 	ldr.w	r3, [r5], #4
 8002676:	4798      	blx	r3
 8002678:	3601      	adds	r6, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	080038c4 	.word	0x080038c4
 8002680:	080038c4 	.word	0x080038c4
 8002684:	080038c4 	.word	0x080038c4
 8002688:	080038c8 	.word	0x080038c8

0800268c <malloc>:
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <malloc+0xc>)
 800268e:	4601      	mov	r1, r0
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f000 b875 	b.w	8002780 <_malloc_r>
 8002696:	bf00      	nop
 8002698:	20000010 	.word	0x20000010

0800269c <memset>:
 800269c:	4402      	add	r2, r0
 800269e:	4603      	mov	r3, r0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	f803 1b01 	strb.w	r1, [r3], #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <_free_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4605      	mov	r5, r0
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d041      	beq.n	8002738 <_free_r+0x8c>
 80026b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026b8:	1f0c      	subs	r4, r1, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	18e4      	addlt	r4, r4, r3
 80026c0:	f000 fca4 	bl	800300c <__malloc_lock>
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <_free_r+0x90>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	b933      	cbnz	r3, 80026d8 <_free_r+0x2c>
 80026ca:	6063      	str	r3, [r4, #4]
 80026cc:	6014      	str	r4, [r2, #0]
 80026ce:	4628      	mov	r0, r5
 80026d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026d4:	f000 bca0 	b.w	8003018 <__malloc_unlock>
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d908      	bls.n	80026ee <_free_r+0x42>
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	1821      	adds	r1, r4, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf01      	itttt	eq
 80026e4:	6819      	ldreq	r1, [r3, #0]
 80026e6:	685b      	ldreq	r3, [r3, #4]
 80026e8:	1809      	addeq	r1, r1, r0
 80026ea:	6021      	streq	r1, [r4, #0]
 80026ec:	e7ed      	b.n	80026ca <_free_r+0x1e>
 80026ee:	461a      	mov	r2, r3
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b10b      	cbz	r3, 80026f8 <_free_r+0x4c>
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	d9fa      	bls.n	80026ee <_free_r+0x42>
 80026f8:	6811      	ldr	r1, [r2, #0]
 80026fa:	1850      	adds	r0, r2, r1
 80026fc:	42a0      	cmp	r0, r4
 80026fe:	d10b      	bne.n	8002718 <_free_r+0x6c>
 8002700:	6820      	ldr	r0, [r4, #0]
 8002702:	4401      	add	r1, r0
 8002704:	1850      	adds	r0, r2, r1
 8002706:	4283      	cmp	r3, r0
 8002708:	6011      	str	r1, [r2, #0]
 800270a:	d1e0      	bne.n	80026ce <_free_r+0x22>
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	6053      	str	r3, [r2, #4]
 8002712:	4401      	add	r1, r0
 8002714:	6011      	str	r1, [r2, #0]
 8002716:	e7da      	b.n	80026ce <_free_r+0x22>
 8002718:	d902      	bls.n	8002720 <_free_r+0x74>
 800271a:	230c      	movs	r3, #12
 800271c:	602b      	str	r3, [r5, #0]
 800271e:	e7d6      	b.n	80026ce <_free_r+0x22>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	1821      	adds	r1, r4, r0
 8002724:	428b      	cmp	r3, r1
 8002726:	bf04      	itt	eq
 8002728:	6819      	ldreq	r1, [r3, #0]
 800272a:	685b      	ldreq	r3, [r3, #4]
 800272c:	6063      	str	r3, [r4, #4]
 800272e:	bf04      	itt	eq
 8002730:	1809      	addeq	r1, r1, r0
 8002732:	6021      	streq	r1, [r4, #0]
 8002734:	6054      	str	r4, [r2, #4]
 8002736:	e7ca      	b.n	80026ce <_free_r+0x22>
 8002738:	bd38      	pop	{r3, r4, r5, pc}
 800273a:	bf00      	nop
 800273c:	200000d4 	.word	0x200000d4

08002740 <sbrk_aligned>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4e0e      	ldr	r6, [pc, #56]	; (800277c <sbrk_aligned+0x3c>)
 8002744:	460c      	mov	r4, r1
 8002746:	6831      	ldr	r1, [r6, #0]
 8002748:	4605      	mov	r5, r0
 800274a:	b911      	cbnz	r1, 8002752 <sbrk_aligned+0x12>
 800274c:	f000 f8a4 	bl	8002898 <_sbrk_r>
 8002750:	6030      	str	r0, [r6, #0]
 8002752:	4621      	mov	r1, r4
 8002754:	4628      	mov	r0, r5
 8002756:	f000 f89f 	bl	8002898 <_sbrk_r>
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	d00a      	beq.n	8002774 <sbrk_aligned+0x34>
 800275e:	1cc4      	adds	r4, r0, #3
 8002760:	f024 0403 	bic.w	r4, r4, #3
 8002764:	42a0      	cmp	r0, r4
 8002766:	d007      	beq.n	8002778 <sbrk_aligned+0x38>
 8002768:	1a21      	subs	r1, r4, r0
 800276a:	4628      	mov	r0, r5
 800276c:	f000 f894 	bl	8002898 <_sbrk_r>
 8002770:	3001      	adds	r0, #1
 8002772:	d101      	bne.n	8002778 <sbrk_aligned+0x38>
 8002774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002778:	4620      	mov	r0, r4
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	200000d8 	.word	0x200000d8

08002780 <_malloc_r>:
 8002780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002784:	1ccd      	adds	r5, r1, #3
 8002786:	f025 0503 	bic.w	r5, r5, #3
 800278a:	3508      	adds	r5, #8
 800278c:	2d0c      	cmp	r5, #12
 800278e:	bf38      	it	cc
 8002790:	250c      	movcc	r5, #12
 8002792:	2d00      	cmp	r5, #0
 8002794:	4607      	mov	r7, r0
 8002796:	db01      	blt.n	800279c <_malloc_r+0x1c>
 8002798:	42a9      	cmp	r1, r5
 800279a:	d905      	bls.n	80027a8 <_malloc_r+0x28>
 800279c:	230c      	movs	r3, #12
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	2600      	movs	r6, #0
 80027a2:	4630      	mov	r0, r6
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027a8:	4e2e      	ldr	r6, [pc, #184]	; (8002864 <_malloc_r+0xe4>)
 80027aa:	f000 fc2f 	bl	800300c <__malloc_lock>
 80027ae:	6833      	ldr	r3, [r6, #0]
 80027b0:	461c      	mov	r4, r3
 80027b2:	bb34      	cbnz	r4, 8002802 <_malloc_r+0x82>
 80027b4:	4629      	mov	r1, r5
 80027b6:	4638      	mov	r0, r7
 80027b8:	f7ff ffc2 	bl	8002740 <sbrk_aligned>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	4604      	mov	r4, r0
 80027c0:	d14d      	bne.n	800285e <_malloc_r+0xde>
 80027c2:	6834      	ldr	r4, [r6, #0]
 80027c4:	4626      	mov	r6, r4
 80027c6:	2e00      	cmp	r6, #0
 80027c8:	d140      	bne.n	800284c <_malloc_r+0xcc>
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	4631      	mov	r1, r6
 80027ce:	4638      	mov	r0, r7
 80027d0:	eb04 0803 	add.w	r8, r4, r3
 80027d4:	f000 f860 	bl	8002898 <_sbrk_r>
 80027d8:	4580      	cmp	r8, r0
 80027da:	d13a      	bne.n	8002852 <_malloc_r+0xd2>
 80027dc:	6821      	ldr	r1, [r4, #0]
 80027de:	3503      	adds	r5, #3
 80027e0:	1a6d      	subs	r5, r5, r1
 80027e2:	f025 0503 	bic.w	r5, r5, #3
 80027e6:	3508      	adds	r5, #8
 80027e8:	2d0c      	cmp	r5, #12
 80027ea:	bf38      	it	cc
 80027ec:	250c      	movcc	r5, #12
 80027ee:	4629      	mov	r1, r5
 80027f0:	4638      	mov	r0, r7
 80027f2:	f7ff ffa5 	bl	8002740 <sbrk_aligned>
 80027f6:	3001      	adds	r0, #1
 80027f8:	d02b      	beq.n	8002852 <_malloc_r+0xd2>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	442b      	add	r3, r5
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	e00e      	b.n	8002820 <_malloc_r+0xa0>
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	1b52      	subs	r2, r2, r5
 8002806:	d41e      	bmi.n	8002846 <_malloc_r+0xc6>
 8002808:	2a0b      	cmp	r2, #11
 800280a:	d916      	bls.n	800283a <_malloc_r+0xba>
 800280c:	1961      	adds	r1, r4, r5
 800280e:	42a3      	cmp	r3, r4
 8002810:	6025      	str	r5, [r4, #0]
 8002812:	bf18      	it	ne
 8002814:	6059      	strne	r1, [r3, #4]
 8002816:	6863      	ldr	r3, [r4, #4]
 8002818:	bf08      	it	eq
 800281a:	6031      	streq	r1, [r6, #0]
 800281c:	5162      	str	r2, [r4, r5]
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	4638      	mov	r0, r7
 8002822:	f104 060b 	add.w	r6, r4, #11
 8002826:	f000 fbf7 	bl	8003018 <__malloc_unlock>
 800282a:	f026 0607 	bic.w	r6, r6, #7
 800282e:	1d23      	adds	r3, r4, #4
 8002830:	1af2      	subs	r2, r6, r3
 8002832:	d0b6      	beq.n	80027a2 <_malloc_r+0x22>
 8002834:	1b9b      	subs	r3, r3, r6
 8002836:	50a3      	str	r3, [r4, r2]
 8002838:	e7b3      	b.n	80027a2 <_malloc_r+0x22>
 800283a:	6862      	ldr	r2, [r4, #4]
 800283c:	42a3      	cmp	r3, r4
 800283e:	bf0c      	ite	eq
 8002840:	6032      	streq	r2, [r6, #0]
 8002842:	605a      	strne	r2, [r3, #4]
 8002844:	e7ec      	b.n	8002820 <_malloc_r+0xa0>
 8002846:	4623      	mov	r3, r4
 8002848:	6864      	ldr	r4, [r4, #4]
 800284a:	e7b2      	b.n	80027b2 <_malloc_r+0x32>
 800284c:	4634      	mov	r4, r6
 800284e:	6876      	ldr	r6, [r6, #4]
 8002850:	e7b9      	b.n	80027c6 <_malloc_r+0x46>
 8002852:	230c      	movs	r3, #12
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4638      	mov	r0, r7
 8002858:	f000 fbde 	bl	8003018 <__malloc_unlock>
 800285c:	e7a1      	b.n	80027a2 <_malloc_r+0x22>
 800285e:	6025      	str	r5, [r4, #0]
 8002860:	e7de      	b.n	8002820 <_malloc_r+0xa0>
 8002862:	bf00      	nop
 8002864:	200000d4 	.word	0x200000d4

08002868 <iprintf>:
 8002868:	b40f      	push	{r0, r1, r2, r3}
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <iprintf+0x2c>)
 800286c:	b513      	push	{r0, r1, r4, lr}
 800286e:	681c      	ldr	r4, [r3, #0]
 8002870:	b124      	cbz	r4, 800287c <iprintf+0x14>
 8002872:	69a3      	ldr	r3, [r4, #24]
 8002874:	b913      	cbnz	r3, 800287c <iprintf+0x14>
 8002876:	4620      	mov	r0, r4
 8002878:	f000 fac2 	bl	8002e00 <__sinit>
 800287c:	ab05      	add	r3, sp, #20
 800287e:	9a04      	ldr	r2, [sp, #16]
 8002880:	68a1      	ldr	r1, [r4, #8]
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fbf5 	bl	8003074 <_vfiprintf_r>
 800288a:	b002      	add	sp, #8
 800288c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002890:	b004      	add	sp, #16
 8002892:	4770      	bx	lr
 8002894:	20000010 	.word	0x20000010

08002898 <_sbrk_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4d06      	ldr	r5, [pc, #24]	; (80028b4 <_sbrk_r+0x1c>)
 800289c:	2300      	movs	r3, #0
 800289e:	4604      	mov	r4, r0
 80028a0:	4608      	mov	r0, r1
 80028a2:	602b      	str	r3, [r5, #0]
 80028a4:	f7ff fe68 	bl	8002578 <_sbrk>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_sbrk_r+0x1a>
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_sbrk_r+0x1a>
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	200000e0 	.word	0x200000e0

080028b8 <setbuf>:
 80028b8:	2900      	cmp	r1, #0
 80028ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028be:	bf0c      	ite	eq
 80028c0:	2202      	moveq	r2, #2
 80028c2:	2200      	movne	r2, #0
 80028c4:	f000 b800 	b.w	80028c8 <setvbuf>

080028c8 <setvbuf>:
 80028c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80028cc:	461d      	mov	r5, r3
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <setvbuf+0x17c>)
 80028d0:	681f      	ldr	r7, [r3, #0]
 80028d2:	4604      	mov	r4, r0
 80028d4:	460e      	mov	r6, r1
 80028d6:	4690      	mov	r8, r2
 80028d8:	b127      	cbz	r7, 80028e4 <setvbuf+0x1c>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	b913      	cbnz	r3, 80028e4 <setvbuf+0x1c>
 80028de:	4638      	mov	r0, r7
 80028e0:	f000 fa8e 	bl	8002e00 <__sinit>
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <setvbuf+0x180>)
 80028e6:	429c      	cmp	r4, r3
 80028e8:	d167      	bne.n	80029ba <setvbuf+0xf2>
 80028ea:	687c      	ldr	r4, [r7, #4]
 80028ec:	f1b8 0f02 	cmp.w	r8, #2
 80028f0:	d006      	beq.n	8002900 <setvbuf+0x38>
 80028f2:	f1b8 0f01 	cmp.w	r8, #1
 80028f6:	f200 809f 	bhi.w	8002a38 <setvbuf+0x170>
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	f2c0 809c 	blt.w	8002a38 <setvbuf+0x170>
 8002900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002902:	07db      	lsls	r3, r3, #31
 8002904:	d405      	bmi.n	8002912 <setvbuf+0x4a>
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	0598      	lsls	r0, r3, #22
 800290a:	d402      	bmi.n	8002912 <setvbuf+0x4a>
 800290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800290e:	f000 fb15 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002912:	4621      	mov	r1, r4
 8002914:	4638      	mov	r0, r7
 8002916:	f000 f9df 	bl	8002cd8 <_fflush_r>
 800291a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800291c:	b141      	cbz	r1, 8002930 <setvbuf+0x68>
 800291e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002922:	4299      	cmp	r1, r3
 8002924:	d002      	beq.n	800292c <setvbuf+0x64>
 8002926:	4638      	mov	r0, r7
 8002928:	f7ff fec0 	bl	80026ac <_free_r>
 800292c:	2300      	movs	r3, #0
 800292e:	6363      	str	r3, [r4, #52]	; 0x34
 8002930:	2300      	movs	r3, #0
 8002932:	61a3      	str	r3, [r4, #24]
 8002934:	6063      	str	r3, [r4, #4]
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	0619      	lsls	r1, r3, #24
 800293a:	d503      	bpl.n	8002944 <setvbuf+0x7c>
 800293c:	6921      	ldr	r1, [r4, #16]
 800293e:	4638      	mov	r0, r7
 8002940:	f7ff feb4 	bl	80026ac <_free_r>
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	f1b8 0f02 	cmp.w	r8, #2
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	d06c      	beq.n	8002a30 <setvbuf+0x168>
 8002956:	ab01      	add	r3, sp, #4
 8002958:	466a      	mov	r2, sp
 800295a:	4621      	mov	r1, r4
 800295c:	4638      	mov	r0, r7
 800295e:	f000 faef 	bl	8002f40 <__swhatbuf_r>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	4318      	orrs	r0, r3
 8002966:	81a0      	strh	r0, [r4, #12]
 8002968:	2d00      	cmp	r5, #0
 800296a:	d130      	bne.n	80029ce <setvbuf+0x106>
 800296c:	9d00      	ldr	r5, [sp, #0]
 800296e:	4628      	mov	r0, r5
 8002970:	f7ff fe8c 	bl	800268c <malloc>
 8002974:	4606      	mov	r6, r0
 8002976:	2800      	cmp	r0, #0
 8002978:	d155      	bne.n	8002a26 <setvbuf+0x15e>
 800297a:	f8dd 9000 	ldr.w	r9, [sp]
 800297e:	45a9      	cmp	r9, r5
 8002980:	d14a      	bne.n	8002a18 <setvbuf+0x150>
 8002982:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002986:	2200      	movs	r2, #0
 8002988:	60a2      	str	r2, [r4, #8]
 800298a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800298e:	6022      	str	r2, [r4, #0]
 8002990:	6122      	str	r2, [r4, #16]
 8002992:	2201      	movs	r2, #1
 8002994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002998:	6162      	str	r2, [r4, #20]
 800299a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	07d2      	lsls	r2, r2, #31
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	d405      	bmi.n	80029b2 <setvbuf+0xea>
 80029a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80029aa:	d102      	bne.n	80029b2 <setvbuf+0xea>
 80029ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ae:	f000 fac6 	bl	8002f3e <__retarget_lock_release_recursive>
 80029b2:	4628      	mov	r0, r5
 80029b4:	b003      	add	sp, #12
 80029b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <setvbuf+0x184>)
 80029bc:	429c      	cmp	r4, r3
 80029be:	d101      	bne.n	80029c4 <setvbuf+0xfc>
 80029c0:	68bc      	ldr	r4, [r7, #8]
 80029c2:	e793      	b.n	80028ec <setvbuf+0x24>
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <setvbuf+0x188>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	bf08      	it	eq
 80029ca:	68fc      	ldreq	r4, [r7, #12]
 80029cc:	e78e      	b.n	80028ec <setvbuf+0x24>
 80029ce:	2e00      	cmp	r6, #0
 80029d0:	d0cd      	beq.n	800296e <setvbuf+0xa6>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	b913      	cbnz	r3, 80029dc <setvbuf+0x114>
 80029d6:	4638      	mov	r0, r7
 80029d8:	f000 fa12 	bl	8002e00 <__sinit>
 80029dc:	f1b8 0f01 	cmp.w	r8, #1
 80029e0:	bf08      	it	eq
 80029e2:	89a3      	ldrheq	r3, [r4, #12]
 80029e4:	6026      	str	r6, [r4, #0]
 80029e6:	bf04      	itt	eq
 80029e8:	f043 0301 	orreq.w	r3, r3, #1
 80029ec:	81a3      	strheq	r3, [r4, #12]
 80029ee:	89a2      	ldrh	r2, [r4, #12]
 80029f0:	f012 0308 	ands.w	r3, r2, #8
 80029f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80029f8:	d01c      	beq.n	8002a34 <setvbuf+0x16c>
 80029fa:	07d3      	lsls	r3, r2, #31
 80029fc:	bf41      	itttt	mi
 80029fe:	2300      	movmi	r3, #0
 8002a00:	426d      	negmi	r5, r5
 8002a02:	60a3      	strmi	r3, [r4, #8]
 8002a04:	61a5      	strmi	r5, [r4, #24]
 8002a06:	bf58      	it	pl
 8002a08:	60a5      	strpl	r5, [r4, #8]
 8002a0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002a0c:	f015 0501 	ands.w	r5, r5, #1
 8002a10:	d115      	bne.n	8002a3e <setvbuf+0x176>
 8002a12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a16:	e7c8      	b.n	80029aa <setvbuf+0xe2>
 8002a18:	4648      	mov	r0, r9
 8002a1a:	f7ff fe37 	bl	800268c <malloc>
 8002a1e:	4606      	mov	r6, r0
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d0ae      	beq.n	8002982 <setvbuf+0xba>
 8002a24:	464d      	mov	r5, r9
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2c:	81a3      	strh	r3, [r4, #12]
 8002a2e:	e7d0      	b.n	80029d2 <setvbuf+0x10a>
 8002a30:	2500      	movs	r5, #0
 8002a32:	e7a8      	b.n	8002986 <setvbuf+0xbe>
 8002a34:	60a3      	str	r3, [r4, #8]
 8002a36:	e7e8      	b.n	8002a0a <setvbuf+0x142>
 8002a38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002a3c:	e7b9      	b.n	80029b2 <setvbuf+0xea>
 8002a3e:	2500      	movs	r5, #0
 8002a40:	e7b7      	b.n	80029b2 <setvbuf+0xea>
 8002a42:	bf00      	nop
 8002a44:	20000010 	.word	0x20000010
 8002a48:	08003850 	.word	0x08003850
 8002a4c:	08003870 	.word	0x08003870
 8002a50:	08003830 	.word	0x08003830

08002a54 <__swbuf_r>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	460e      	mov	r6, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	b118      	cbz	r0, 8002a66 <__swbuf_r+0x12>
 8002a5e:	6983      	ldr	r3, [r0, #24]
 8002a60:	b90b      	cbnz	r3, 8002a66 <__swbuf_r+0x12>
 8002a62:	f000 f9cd 	bl	8002e00 <__sinit>
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <__swbuf_r+0x98>)
 8002a68:	429c      	cmp	r4, r3
 8002a6a:	d12b      	bne.n	8002ac4 <__swbuf_r+0x70>
 8002a6c:	686c      	ldr	r4, [r5, #4]
 8002a6e:	69a3      	ldr	r3, [r4, #24]
 8002a70:	60a3      	str	r3, [r4, #8]
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	071a      	lsls	r2, r3, #28
 8002a76:	d52f      	bpl.n	8002ad8 <__swbuf_r+0x84>
 8002a78:	6923      	ldr	r3, [r4, #16]
 8002a7a:	b36b      	cbz	r3, 8002ad8 <__swbuf_r+0x84>
 8002a7c:	6923      	ldr	r3, [r4, #16]
 8002a7e:	6820      	ldr	r0, [r4, #0]
 8002a80:	1ac0      	subs	r0, r0, r3
 8002a82:	6963      	ldr	r3, [r4, #20]
 8002a84:	b2f6      	uxtb	r6, r6
 8002a86:	4283      	cmp	r3, r0
 8002a88:	4637      	mov	r7, r6
 8002a8a:	dc04      	bgt.n	8002a96 <__swbuf_r+0x42>
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f922 	bl	8002cd8 <_fflush_r>
 8002a94:	bb30      	cbnz	r0, 8002ae4 <__swbuf_r+0x90>
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	60a3      	str	r3, [r4, #8]
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	6022      	str	r2, [r4, #0]
 8002aa2:	701e      	strb	r6, [r3, #0]
 8002aa4:	6963      	ldr	r3, [r4, #20]
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	4283      	cmp	r3, r0
 8002aaa:	d004      	beq.n	8002ab6 <__swbuf_r+0x62>
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	07db      	lsls	r3, r3, #31
 8002ab0:	d506      	bpl.n	8002ac0 <__swbuf_r+0x6c>
 8002ab2:	2e0a      	cmp	r6, #10
 8002ab4:	d104      	bne.n	8002ac0 <__swbuf_r+0x6c>
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f000 f90d 	bl	8002cd8 <_fflush_r>
 8002abe:	b988      	cbnz	r0, 8002ae4 <__swbuf_r+0x90>
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <__swbuf_r+0x9c>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	d101      	bne.n	8002ace <__swbuf_r+0x7a>
 8002aca:	68ac      	ldr	r4, [r5, #8]
 8002acc:	e7cf      	b.n	8002a6e <__swbuf_r+0x1a>
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <__swbuf_r+0xa0>)
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	bf08      	it	eq
 8002ad4:	68ec      	ldreq	r4, [r5, #12]
 8002ad6:	e7ca      	b.n	8002a6e <__swbuf_r+0x1a>
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4628      	mov	r0, r5
 8002adc:	f000 f80c 	bl	8002af8 <__swsetup_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d0cb      	beq.n	8002a7c <__swbuf_r+0x28>
 8002ae4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ae8:	e7ea      	b.n	8002ac0 <__swbuf_r+0x6c>
 8002aea:	bf00      	nop
 8002aec:	08003850 	.word	0x08003850
 8002af0:	08003870 	.word	0x08003870
 8002af4:	08003830 	.word	0x08003830

08002af8 <__swsetup_r>:
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <__swsetup_r+0xcc>)
 8002afa:	b570      	push	{r4, r5, r6, lr}
 8002afc:	681d      	ldr	r5, [r3, #0]
 8002afe:	4606      	mov	r6, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	b125      	cbz	r5, 8002b0e <__swsetup_r+0x16>
 8002b04:	69ab      	ldr	r3, [r5, #24]
 8002b06:	b913      	cbnz	r3, 8002b0e <__swsetup_r+0x16>
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f000 f979 	bl	8002e00 <__sinit>
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <__swsetup_r+0xd0>)
 8002b10:	429c      	cmp	r4, r3
 8002b12:	d10f      	bne.n	8002b34 <__swsetup_r+0x3c>
 8002b14:	686c      	ldr	r4, [r5, #4]
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b1c:	0719      	lsls	r1, r3, #28
 8002b1e:	d42c      	bmi.n	8002b7a <__swsetup_r+0x82>
 8002b20:	06dd      	lsls	r5, r3, #27
 8002b22:	d411      	bmi.n	8002b48 <__swsetup_r+0x50>
 8002b24:	2309      	movs	r3, #9
 8002b26:	6033      	str	r3, [r6, #0]
 8002b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b2c:	81a3      	strh	r3, [r4, #12]
 8002b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b32:	e03e      	b.n	8002bb2 <__swsetup_r+0xba>
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <__swsetup_r+0xd4>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	d101      	bne.n	8002b3e <__swsetup_r+0x46>
 8002b3a:	68ac      	ldr	r4, [r5, #8]
 8002b3c:	e7eb      	b.n	8002b16 <__swsetup_r+0x1e>
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <__swsetup_r+0xd8>)
 8002b40:	429c      	cmp	r4, r3
 8002b42:	bf08      	it	eq
 8002b44:	68ec      	ldreq	r4, [r5, #12]
 8002b46:	e7e6      	b.n	8002b16 <__swsetup_r+0x1e>
 8002b48:	0758      	lsls	r0, r3, #29
 8002b4a:	d512      	bpl.n	8002b72 <__swsetup_r+0x7a>
 8002b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b4e:	b141      	cbz	r1, 8002b62 <__swsetup_r+0x6a>
 8002b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b54:	4299      	cmp	r1, r3
 8002b56:	d002      	beq.n	8002b5e <__swsetup_r+0x66>
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f7ff fda7 	bl	80026ac <_free_r>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6363      	str	r3, [r4, #52]	; 0x34
 8002b62:	89a3      	ldrh	r3, [r4, #12]
 8002b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	6923      	ldr	r3, [r4, #16]
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	81a3      	strh	r3, [r4, #12]
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	b94b      	cbnz	r3, 8002b92 <__swsetup_r+0x9a>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d003      	beq.n	8002b92 <__swsetup_r+0x9a>
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f000 f9fd 	bl	8002f8c <__smakebuf_r>
 8002b92:	89a0      	ldrh	r0, [r4, #12]
 8002b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b98:	f010 0301 	ands.w	r3, r0, #1
 8002b9c:	d00a      	beq.n	8002bb4 <__swsetup_r+0xbc>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60a3      	str	r3, [r4, #8]
 8002ba2:	6963      	ldr	r3, [r4, #20]
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	61a3      	str	r3, [r4, #24]
 8002ba8:	6923      	ldr	r3, [r4, #16]
 8002baa:	b943      	cbnz	r3, 8002bbe <__swsetup_r+0xc6>
 8002bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002bb0:	d1ba      	bne.n	8002b28 <__swsetup_r+0x30>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	0781      	lsls	r1, r0, #30
 8002bb6:	bf58      	it	pl
 8002bb8:	6963      	ldrpl	r3, [r4, #20]
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	e7f4      	b.n	8002ba8 <__swsetup_r+0xb0>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e7f7      	b.n	8002bb2 <__swsetup_r+0xba>
 8002bc2:	bf00      	nop
 8002bc4:	20000010 	.word	0x20000010
 8002bc8:	08003850 	.word	0x08003850
 8002bcc:	08003870 	.word	0x08003870
 8002bd0:	08003830 	.word	0x08003830

08002bd4 <__sflush_r>:
 8002bd4:	898a      	ldrh	r2, [r1, #12]
 8002bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd8:	4605      	mov	r5, r0
 8002bda:	0710      	lsls	r0, r2, #28
 8002bdc:	460c      	mov	r4, r1
 8002bde:	d457      	bmi.n	8002c90 <__sflush_r+0xbc>
 8002be0:	684b      	ldr	r3, [r1, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dc04      	bgt.n	8002bf0 <__sflush_r+0x1c>
 8002be6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dc01      	bgt.n	8002bf0 <__sflush_r+0x1c>
 8002bec:	2000      	movs	r0, #0
 8002bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d0fa      	beq.n	8002bec <__sflush_r+0x18>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bfc:	682f      	ldr	r7, [r5, #0]
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	d032      	beq.n	8002c68 <__sflush_r+0x94>
 8002c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	075a      	lsls	r2, r3, #29
 8002c08:	d505      	bpl.n	8002c16 <__sflush_r+0x42>
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	1ac0      	subs	r0, r0, r3
 8002c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c10:	b10b      	cbz	r3, 8002c16 <__sflush_r+0x42>
 8002c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c14:	1ac0      	subs	r0, r0, r3
 8002c16:	2300      	movs	r3, #0
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c1c:	6a21      	ldr	r1, [r4, #32]
 8002c1e:	4628      	mov	r0, r5
 8002c20:	47b0      	blx	r6
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	d106      	bne.n	8002c36 <__sflush_r+0x62>
 8002c28:	6829      	ldr	r1, [r5, #0]
 8002c2a:	291d      	cmp	r1, #29
 8002c2c:	d82c      	bhi.n	8002c88 <__sflush_r+0xb4>
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <__sflush_r+0x100>)
 8002c30:	40ca      	lsrs	r2, r1
 8002c32:	07d6      	lsls	r6, r2, #31
 8002c34:	d528      	bpl.n	8002c88 <__sflush_r+0xb4>
 8002c36:	2200      	movs	r2, #0
 8002c38:	6062      	str	r2, [r4, #4]
 8002c3a:	04d9      	lsls	r1, r3, #19
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	6022      	str	r2, [r4, #0]
 8002c40:	d504      	bpl.n	8002c4c <__sflush_r+0x78>
 8002c42:	1c42      	adds	r2, r0, #1
 8002c44:	d101      	bne.n	8002c4a <__sflush_r+0x76>
 8002c46:	682b      	ldr	r3, [r5, #0]
 8002c48:	b903      	cbnz	r3, 8002c4c <__sflush_r+0x78>
 8002c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c4e:	602f      	str	r7, [r5, #0]
 8002c50:	2900      	cmp	r1, #0
 8002c52:	d0cb      	beq.n	8002bec <__sflush_r+0x18>
 8002c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c58:	4299      	cmp	r1, r3
 8002c5a:	d002      	beq.n	8002c62 <__sflush_r+0x8e>
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7ff fd25 	bl	80026ac <_free_r>
 8002c62:	2000      	movs	r0, #0
 8002c64:	6360      	str	r0, [r4, #52]	; 0x34
 8002c66:	e7c2      	b.n	8002bee <__sflush_r+0x1a>
 8002c68:	6a21      	ldr	r1, [r4, #32]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	47b0      	blx	r6
 8002c70:	1c41      	adds	r1, r0, #1
 8002c72:	d1c7      	bne.n	8002c04 <__sflush_r+0x30>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0c4      	beq.n	8002c04 <__sflush_r+0x30>
 8002c7a:	2b1d      	cmp	r3, #29
 8002c7c:	d001      	beq.n	8002c82 <__sflush_r+0xae>
 8002c7e:	2b16      	cmp	r3, #22
 8002c80:	d101      	bne.n	8002c86 <__sflush_r+0xb2>
 8002c82:	602f      	str	r7, [r5, #0]
 8002c84:	e7b2      	b.n	8002bec <__sflush_r+0x18>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	e7ae      	b.n	8002bee <__sflush_r+0x1a>
 8002c90:	690f      	ldr	r7, [r1, #16]
 8002c92:	2f00      	cmp	r7, #0
 8002c94:	d0aa      	beq.n	8002bec <__sflush_r+0x18>
 8002c96:	0793      	lsls	r3, r2, #30
 8002c98:	680e      	ldr	r6, [r1, #0]
 8002c9a:	bf08      	it	eq
 8002c9c:	694b      	ldreq	r3, [r1, #20]
 8002c9e:	600f      	str	r7, [r1, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	1bf6      	subs	r6, r6, r7
 8002ca6:	608b      	str	r3, [r1, #8]
 8002ca8:	2e00      	cmp	r6, #0
 8002caa:	dd9f      	ble.n	8002bec <__sflush_r+0x18>
 8002cac:	6a21      	ldr	r1, [r4, #32]
 8002cae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002cb2:	4633      	mov	r3, r6
 8002cb4:	463a      	mov	r2, r7
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	47e0      	blx	ip
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	dc06      	bgt.n	8002ccc <__sflush_r+0xf8>
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc4:	81a3      	strh	r3, [r4, #12]
 8002cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cca:	e790      	b.n	8002bee <__sflush_r+0x1a>
 8002ccc:	4407      	add	r7, r0
 8002cce:	1a36      	subs	r6, r6, r0
 8002cd0:	e7ea      	b.n	8002ca8 <__sflush_r+0xd4>
 8002cd2:	bf00      	nop
 8002cd4:	20400001 	.word	0x20400001

08002cd8 <_fflush_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	690b      	ldr	r3, [r1, #16]
 8002cdc:	4605      	mov	r5, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_fflush_r+0x10>
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	b118      	cbz	r0, 8002cf2 <_fflush_r+0x1a>
 8002cea:	6983      	ldr	r3, [r0, #24]
 8002cec:	b90b      	cbnz	r3, 8002cf2 <_fflush_r+0x1a>
 8002cee:	f000 f887 	bl	8002e00 <__sinit>
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <_fflush_r+0x6c>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d11b      	bne.n	8002d30 <_fflush_r+0x58>
 8002cf8:	686c      	ldr	r4, [r5, #4]
 8002cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <_fflush_r+0xa>
 8002d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d04:	07d0      	lsls	r0, r2, #31
 8002d06:	d404      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d08:	0599      	lsls	r1, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_fflush_r+0x3a>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0e:	f000 f915 	bl	8002f3c <__retarget_lock_acquire_recursive>
 8002d12:	4628      	mov	r0, r5
 8002d14:	4621      	mov	r1, r4
 8002d16:	f7ff ff5d 	bl	8002bd4 <__sflush_r>
 8002d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d1c:	07da      	lsls	r2, r3, #31
 8002d1e:	4605      	mov	r5, r0
 8002d20:	d4e0      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	059b      	lsls	r3, r3, #22
 8002d26:	d4dd      	bmi.n	8002ce4 <_fflush_r+0xc>
 8002d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d2a:	f000 f908 	bl	8002f3e <__retarget_lock_release_recursive>
 8002d2e:	e7d9      	b.n	8002ce4 <_fflush_r+0xc>
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <_fflush_r+0x70>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d101      	bne.n	8002d3a <_fflush_r+0x62>
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	e7df      	b.n	8002cfa <_fflush_r+0x22>
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <_fflush_r+0x74>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	bf08      	it	eq
 8002d40:	68ec      	ldreq	r4, [r5, #12]
 8002d42:	e7da      	b.n	8002cfa <_fflush_r+0x22>
 8002d44:	08003850 	.word	0x08003850
 8002d48:	08003870 	.word	0x08003870
 8002d4c:	08003830 	.word	0x08003830

08002d50 <std>:
 8002d50:	2300      	movs	r3, #0
 8002d52:	b510      	push	{r4, lr}
 8002d54:	4604      	mov	r4, r0
 8002d56:	e9c0 3300 	strd	r3, r3, [r0]
 8002d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d5e:	6083      	str	r3, [r0, #8]
 8002d60:	8181      	strh	r1, [r0, #12]
 8002d62:	6643      	str	r3, [r0, #100]	; 0x64
 8002d64:	81c2      	strh	r2, [r0, #14]
 8002d66:	6183      	str	r3, [r0, #24]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	305c      	adds	r0, #92	; 0x5c
 8002d6e:	f7ff fc95 	bl	800269c <memset>
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <std+0x38>)
 8002d74:	6263      	str	r3, [r4, #36]	; 0x24
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <std+0x3c>)
 8002d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <std+0x40>)
 8002d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <std+0x44>)
 8002d80:	6224      	str	r4, [r4, #32]
 8002d82:	6323      	str	r3, [r4, #48]	; 0x30
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	080035fd 	.word	0x080035fd
 8002d8c:	0800361f 	.word	0x0800361f
 8002d90:	08003657 	.word	0x08003657
 8002d94:	0800367b 	.word	0x0800367b

08002d98 <_cleanup_r>:
 8002d98:	4901      	ldr	r1, [pc, #4]	; (8002da0 <_cleanup_r+0x8>)
 8002d9a:	f000 b8af 	b.w	8002efc <_fwalk_reent>
 8002d9e:	bf00      	nop
 8002da0:	08002cd9 	.word	0x08002cd9

08002da4 <__sfmoreglue>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	2268      	movs	r2, #104	; 0x68
 8002da8:	1e4d      	subs	r5, r1, #1
 8002daa:	4355      	muls	r5, r2
 8002dac:	460e      	mov	r6, r1
 8002dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002db2:	f7ff fce5 	bl	8002780 <_malloc_r>
 8002db6:	4604      	mov	r4, r0
 8002db8:	b140      	cbz	r0, 8002dcc <__sfmoreglue+0x28>
 8002dba:	2100      	movs	r1, #0
 8002dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8002dc0:	300c      	adds	r0, #12
 8002dc2:	60a0      	str	r0, [r4, #8]
 8002dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002dc8:	f7ff fc68 	bl	800269c <memset>
 8002dcc:	4620      	mov	r0, r4
 8002dce:	bd70      	pop	{r4, r5, r6, pc}

08002dd0 <__sfp_lock_acquire>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	; (8002dd8 <__sfp_lock_acquire+0x8>)
 8002dd2:	f000 b8b3 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	200000dd 	.word	0x200000dd

08002ddc <__sfp_lock_release>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	; (8002de4 <__sfp_lock_release+0x8>)
 8002dde:	f000 b8ae 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	200000dd 	.word	0x200000dd

08002de8 <__sinit_lock_acquire>:
 8002de8:	4801      	ldr	r0, [pc, #4]	; (8002df0 <__sinit_lock_acquire+0x8>)
 8002dea:	f000 b8a7 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8002dee:	bf00      	nop
 8002df0:	200000de 	.word	0x200000de

08002df4 <__sinit_lock_release>:
 8002df4:	4801      	ldr	r0, [pc, #4]	; (8002dfc <__sinit_lock_release+0x8>)
 8002df6:	f000 b8a2 	b.w	8002f3e <__retarget_lock_release_recursive>
 8002dfa:	bf00      	nop
 8002dfc:	200000de 	.word	0x200000de

08002e00 <__sinit>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4604      	mov	r4, r0
 8002e04:	f7ff fff0 	bl	8002de8 <__sinit_lock_acquire>
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	b11b      	cbz	r3, 8002e14 <__sinit+0x14>
 8002e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e10:	f7ff bff0 	b.w	8002df4 <__sinit_lock_release>
 8002e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e18:	6523      	str	r3, [r4, #80]	; 0x50
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <__sinit+0x68>)
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <__sinit+0x6c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	bf04      	itt	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	61a3      	streq	r3, [r4, #24]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f000 f820 	bl	8002e70 <__sfp>
 8002e30:	6060      	str	r0, [r4, #4]
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f81c 	bl	8002e70 <__sfp>
 8002e38:	60a0      	str	r0, [r4, #8]
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 f818 	bl	8002e70 <__sfp>
 8002e40:	2200      	movs	r2, #0
 8002e42:	60e0      	str	r0, [r4, #12]
 8002e44:	2104      	movs	r1, #4
 8002e46:	6860      	ldr	r0, [r4, #4]
 8002e48:	f7ff ff82 	bl	8002d50 <std>
 8002e4c:	68a0      	ldr	r0, [r4, #8]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2109      	movs	r1, #9
 8002e52:	f7ff ff7d 	bl	8002d50 <std>
 8002e56:	68e0      	ldr	r0, [r4, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	2112      	movs	r1, #18
 8002e5c:	f7ff ff78 	bl	8002d50 <std>
 8002e60:	2301      	movs	r3, #1
 8002e62:	61a3      	str	r3, [r4, #24]
 8002e64:	e7d2      	b.n	8002e0c <__sinit+0xc>
 8002e66:	bf00      	nop
 8002e68:	0800382c 	.word	0x0800382c
 8002e6c:	08002d99 	.word	0x08002d99

08002e70 <__sfp>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	4607      	mov	r7, r0
 8002e74:	f7ff ffac 	bl	8002dd0 <__sfp_lock_acquire>
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <__sfp+0x84>)
 8002e7a:	681e      	ldr	r6, [r3, #0]
 8002e7c:	69b3      	ldr	r3, [r6, #24]
 8002e7e:	b913      	cbnz	r3, 8002e86 <__sfp+0x16>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f7ff ffbd 	bl	8002e00 <__sinit>
 8002e86:	3648      	adds	r6, #72	; 0x48
 8002e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	d503      	bpl.n	8002e98 <__sfp+0x28>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	b30b      	cbz	r3, 8002ed8 <__sfp+0x68>
 8002e94:	6836      	ldr	r6, [r6, #0]
 8002e96:	e7f7      	b.n	8002e88 <__sfp+0x18>
 8002e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e9c:	b9d5      	cbnz	r5, 8002ed4 <__sfp+0x64>
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <__sfp+0x88>)
 8002ea0:	60e3      	str	r3, [r4, #12]
 8002ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ea8:	f000 f847 	bl	8002f3a <__retarget_lock_init_recursive>
 8002eac:	f7ff ff96 	bl	8002ddc <__sfp_lock_release>
 8002eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002eb8:	6025      	str	r5, [r4, #0]
 8002eba:	61a5      	str	r5, [r4, #24]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ec4:	f7ff fbea 	bl	800269c <memset>
 8002ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	3468      	adds	r4, #104	; 0x68
 8002ed6:	e7d9      	b.n	8002e8c <__sfp+0x1c>
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7ff ff62 	bl	8002da4 <__sfmoreglue>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	6030      	str	r0, [r6, #0]
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1d5      	bne.n	8002e94 <__sfp+0x24>
 8002ee8:	f7ff ff78 	bl	8002ddc <__sfp_lock_release>
 8002eec:	230c      	movs	r3, #12
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	e7ee      	b.n	8002ed0 <__sfp+0x60>
 8002ef2:	bf00      	nop
 8002ef4:	0800382c 	.word	0x0800382c
 8002ef8:	ffff0001 	.word	0xffff0001

08002efc <_fwalk_reent>:
 8002efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f00:	4606      	mov	r6, r0
 8002f02:	4688      	mov	r8, r1
 8002f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f08:	2700      	movs	r7, #0
 8002f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f12:	d505      	bpl.n	8002f20 <_fwalk_reent+0x24>
 8002f14:	6824      	ldr	r4, [r4, #0]
 8002f16:	2c00      	cmp	r4, #0
 8002f18:	d1f7      	bne.n	8002f0a <_fwalk_reent+0xe>
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f20:	89ab      	ldrh	r3, [r5, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d907      	bls.n	8002f36 <_fwalk_reent+0x3a>
 8002f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <_fwalk_reent+0x3a>
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4630      	mov	r0, r6
 8002f32:	47c0      	blx	r8
 8002f34:	4307      	orrs	r7, r0
 8002f36:	3568      	adds	r5, #104	; 0x68
 8002f38:	e7e9      	b.n	8002f0e <_fwalk_reent+0x12>

08002f3a <__retarget_lock_init_recursive>:
 8002f3a:	4770      	bx	lr

08002f3c <__retarget_lock_acquire_recursive>:
 8002f3c:	4770      	bx	lr

08002f3e <__retarget_lock_release_recursive>:
 8002f3e:	4770      	bx	lr

08002f40 <__swhatbuf_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	460e      	mov	r6, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	b096      	sub	sp, #88	; 0x58
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	da08      	bge.n	8002f64 <__swhatbuf_r+0x24>
 8002f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	602a      	str	r2, [r5, #0]
 8002f5a:	061a      	lsls	r2, r3, #24
 8002f5c:	d410      	bmi.n	8002f80 <__swhatbuf_r+0x40>
 8002f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f62:	e00e      	b.n	8002f82 <__swhatbuf_r+0x42>
 8002f64:	466a      	mov	r2, sp
 8002f66:	f000 fbaf 	bl	80036c8 <_fstat_r>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	dbf1      	blt.n	8002f52 <__swhatbuf_r+0x12>
 8002f6e:	9a01      	ldr	r2, [sp, #4]
 8002f70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f78:	425a      	negs	r2, r3
 8002f7a:	415a      	adcs	r2, r3
 8002f7c:	602a      	str	r2, [r5, #0]
 8002f7e:	e7ee      	b.n	8002f5e <__swhatbuf_r+0x1e>
 8002f80:	2340      	movs	r3, #64	; 0x40
 8002f82:	2000      	movs	r0, #0
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	b016      	add	sp, #88	; 0x58
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f8c <__smakebuf_r>:
 8002f8c:	898b      	ldrh	r3, [r1, #12]
 8002f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f90:	079d      	lsls	r5, r3, #30
 8002f92:	4606      	mov	r6, r0
 8002f94:	460c      	mov	r4, r1
 8002f96:	d507      	bpl.n	8002fa8 <__smakebuf_r+0x1c>
 8002f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	6123      	str	r3, [r4, #16]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	ab01      	add	r3, sp, #4
 8002faa:	466a      	mov	r2, sp
 8002fac:	f7ff ffc8 	bl	8002f40 <__swhatbuf_r>
 8002fb0:	9900      	ldr	r1, [sp, #0]
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f7ff fbe3 	bl	8002780 <_malloc_r>
 8002fba:	b948      	cbnz	r0, 8002fd0 <__smakebuf_r+0x44>
 8002fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc0:	059a      	lsls	r2, r3, #22
 8002fc2:	d4ef      	bmi.n	8002fa4 <__smakebuf_r+0x18>
 8002fc4:	f023 0303 	bic.w	r3, r3, #3
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	e7e3      	b.n	8002f98 <__smakebuf_r+0xc>
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <__smakebuf_r+0x7c>)
 8002fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	6020      	str	r0, [r4, #0]
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	6163      	str	r3, [r4, #20]
 8002fe2:	9b01      	ldr	r3, [sp, #4]
 8002fe4:	6120      	str	r0, [r4, #16]
 8002fe6:	b15b      	cbz	r3, 8003000 <__smakebuf_r+0x74>
 8002fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 fb7d 	bl	80036ec <_isatty_r>
 8002ff2:	b128      	cbz	r0, 8003000 <__smakebuf_r+0x74>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	89a0      	ldrh	r0, [r4, #12]
 8003002:	4305      	orrs	r5, r0
 8003004:	81a5      	strh	r5, [r4, #12]
 8003006:	e7cd      	b.n	8002fa4 <__smakebuf_r+0x18>
 8003008:	08002d99 	.word	0x08002d99

0800300c <__malloc_lock>:
 800300c:	4801      	ldr	r0, [pc, #4]	; (8003014 <__malloc_lock+0x8>)
 800300e:	f7ff bf95 	b.w	8002f3c <__retarget_lock_acquire_recursive>
 8003012:	bf00      	nop
 8003014:	200000dc 	.word	0x200000dc

08003018 <__malloc_unlock>:
 8003018:	4801      	ldr	r0, [pc, #4]	; (8003020 <__malloc_unlock+0x8>)
 800301a:	f7ff bf90 	b.w	8002f3e <__retarget_lock_release_recursive>
 800301e:	bf00      	nop
 8003020:	200000dc 	.word	0x200000dc

08003024 <__sfputc_r>:
 8003024:	6893      	ldr	r3, [r2, #8]
 8003026:	3b01      	subs	r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	b410      	push	{r4}
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	da07      	bge.n	8003040 <__sfputc_r+0x1c>
 8003030:	6994      	ldr	r4, [r2, #24]
 8003032:	42a3      	cmp	r3, r4
 8003034:	db01      	blt.n	800303a <__sfputc_r+0x16>
 8003036:	290a      	cmp	r1, #10
 8003038:	d102      	bne.n	8003040 <__sfputc_r+0x1c>
 800303a:	bc10      	pop	{r4}
 800303c:	f7ff bd0a 	b.w	8002a54 <__swbuf_r>
 8003040:	6813      	ldr	r3, [r2, #0]
 8003042:	1c58      	adds	r0, r3, #1
 8003044:	6010      	str	r0, [r2, #0]
 8003046:	7019      	strb	r1, [r3, #0]
 8003048:	4608      	mov	r0, r1
 800304a:	bc10      	pop	{r4}
 800304c:	4770      	bx	lr

0800304e <__sfputs_r>:
 800304e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003050:	4606      	mov	r6, r0
 8003052:	460f      	mov	r7, r1
 8003054:	4614      	mov	r4, r2
 8003056:	18d5      	adds	r5, r2, r3
 8003058:	42ac      	cmp	r4, r5
 800305a:	d101      	bne.n	8003060 <__sfputs_r+0x12>
 800305c:	2000      	movs	r0, #0
 800305e:	e007      	b.n	8003070 <__sfputs_r+0x22>
 8003060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003064:	463a      	mov	r2, r7
 8003066:	4630      	mov	r0, r6
 8003068:	f7ff ffdc 	bl	8003024 <__sfputc_r>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d1f3      	bne.n	8003058 <__sfputs_r+0xa>
 8003070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003074 <_vfiprintf_r>:
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003078:	460d      	mov	r5, r1
 800307a:	b09d      	sub	sp, #116	; 0x74
 800307c:	4614      	mov	r4, r2
 800307e:	4698      	mov	r8, r3
 8003080:	4606      	mov	r6, r0
 8003082:	b118      	cbz	r0, 800308c <_vfiprintf_r+0x18>
 8003084:	6983      	ldr	r3, [r0, #24]
 8003086:	b90b      	cbnz	r3, 800308c <_vfiprintf_r+0x18>
 8003088:	f7ff feba 	bl	8002e00 <__sinit>
 800308c:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <_vfiprintf_r+0x240>)
 800308e:	429d      	cmp	r5, r3
 8003090:	d11b      	bne.n	80030ca <_vfiprintf_r+0x56>
 8003092:	6875      	ldr	r5, [r6, #4]
 8003094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003096:	07d9      	lsls	r1, r3, #31
 8003098:	d405      	bmi.n	80030a6 <_vfiprintf_r+0x32>
 800309a:	89ab      	ldrh	r3, [r5, #12]
 800309c:	059a      	lsls	r2, r3, #22
 800309e:	d402      	bmi.n	80030a6 <_vfiprintf_r+0x32>
 80030a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030a2:	f7ff ff4b 	bl	8002f3c <__retarget_lock_acquire_recursive>
 80030a6:	89ab      	ldrh	r3, [r5, #12]
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	d501      	bpl.n	80030b0 <_vfiprintf_r+0x3c>
 80030ac:	692b      	ldr	r3, [r5, #16]
 80030ae:	b9eb      	cbnz	r3, 80030ec <_vfiprintf_r+0x78>
 80030b0:	4629      	mov	r1, r5
 80030b2:	4630      	mov	r0, r6
 80030b4:	f7ff fd20 	bl	8002af8 <__swsetup_r>
 80030b8:	b1c0      	cbz	r0, 80030ec <_vfiprintf_r+0x78>
 80030ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030bc:	07dc      	lsls	r4, r3, #31
 80030be:	d50e      	bpl.n	80030de <_vfiprintf_r+0x6a>
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c4:	b01d      	add	sp, #116	; 0x74
 80030c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <_vfiprintf_r+0x244>)
 80030cc:	429d      	cmp	r5, r3
 80030ce:	d101      	bne.n	80030d4 <_vfiprintf_r+0x60>
 80030d0:	68b5      	ldr	r5, [r6, #8]
 80030d2:	e7df      	b.n	8003094 <_vfiprintf_r+0x20>
 80030d4:	4b79      	ldr	r3, [pc, #484]	; (80032bc <_vfiprintf_r+0x248>)
 80030d6:	429d      	cmp	r5, r3
 80030d8:	bf08      	it	eq
 80030da:	68f5      	ldreq	r5, [r6, #12]
 80030dc:	e7da      	b.n	8003094 <_vfiprintf_r+0x20>
 80030de:	89ab      	ldrh	r3, [r5, #12]
 80030e0:	0598      	lsls	r0, r3, #22
 80030e2:	d4ed      	bmi.n	80030c0 <_vfiprintf_r+0x4c>
 80030e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030e6:	f7ff ff2a 	bl	8002f3e <__retarget_lock_release_recursive>
 80030ea:	e7e9      	b.n	80030c0 <_vfiprintf_r+0x4c>
 80030ec:	2300      	movs	r3, #0
 80030ee:	9309      	str	r3, [sp, #36]	; 0x24
 80030f0:	2320      	movs	r3, #32
 80030f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030fa:	2330      	movs	r3, #48	; 0x30
 80030fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032c0 <_vfiprintf_r+0x24c>
 8003100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003104:	f04f 0901 	mov.w	r9, #1
 8003108:	4623      	mov	r3, r4
 800310a:	469a      	mov	sl, r3
 800310c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003110:	b10a      	cbz	r2, 8003116 <_vfiprintf_r+0xa2>
 8003112:	2a25      	cmp	r2, #37	; 0x25
 8003114:	d1f9      	bne.n	800310a <_vfiprintf_r+0x96>
 8003116:	ebba 0b04 	subs.w	fp, sl, r4
 800311a:	d00b      	beq.n	8003134 <_vfiprintf_r+0xc0>
 800311c:	465b      	mov	r3, fp
 800311e:	4622      	mov	r2, r4
 8003120:	4629      	mov	r1, r5
 8003122:	4630      	mov	r0, r6
 8003124:	f7ff ff93 	bl	800304e <__sfputs_r>
 8003128:	3001      	adds	r0, #1
 800312a:	f000 80aa 	beq.w	8003282 <_vfiprintf_r+0x20e>
 800312e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003130:	445a      	add	r2, fp
 8003132:	9209      	str	r2, [sp, #36]	; 0x24
 8003134:	f89a 3000 	ldrb.w	r3, [sl]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a2 	beq.w	8003282 <_vfiprintf_r+0x20e>
 800313e:	2300      	movs	r3, #0
 8003140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003148:	f10a 0a01 	add.w	sl, sl, #1
 800314c:	9304      	str	r3, [sp, #16]
 800314e:	9307      	str	r3, [sp, #28]
 8003150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003154:	931a      	str	r3, [sp, #104]	; 0x68
 8003156:	4654      	mov	r4, sl
 8003158:	2205      	movs	r2, #5
 800315a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800315e:	4858      	ldr	r0, [pc, #352]	; (80032c0 <_vfiprintf_r+0x24c>)
 8003160:	f7fd f846 	bl	80001f0 <memchr>
 8003164:	9a04      	ldr	r2, [sp, #16]
 8003166:	b9d8      	cbnz	r0, 80031a0 <_vfiprintf_r+0x12c>
 8003168:	06d1      	lsls	r1, r2, #27
 800316a:	bf44      	itt	mi
 800316c:	2320      	movmi	r3, #32
 800316e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003172:	0713      	lsls	r3, r2, #28
 8003174:	bf44      	itt	mi
 8003176:	232b      	movmi	r3, #43	; 0x2b
 8003178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800317c:	f89a 3000 	ldrb.w	r3, [sl]
 8003180:	2b2a      	cmp	r3, #42	; 0x2a
 8003182:	d015      	beq.n	80031b0 <_vfiprintf_r+0x13c>
 8003184:	9a07      	ldr	r2, [sp, #28]
 8003186:	4654      	mov	r4, sl
 8003188:	2000      	movs	r0, #0
 800318a:	f04f 0c0a 	mov.w	ip, #10
 800318e:	4621      	mov	r1, r4
 8003190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003194:	3b30      	subs	r3, #48	; 0x30
 8003196:	2b09      	cmp	r3, #9
 8003198:	d94e      	bls.n	8003238 <_vfiprintf_r+0x1c4>
 800319a:	b1b0      	cbz	r0, 80031ca <_vfiprintf_r+0x156>
 800319c:	9207      	str	r2, [sp, #28]
 800319e:	e014      	b.n	80031ca <_vfiprintf_r+0x156>
 80031a0:	eba0 0308 	sub.w	r3, r0, r8
 80031a4:	fa09 f303 	lsl.w	r3, r9, r3
 80031a8:	4313      	orrs	r3, r2
 80031aa:	9304      	str	r3, [sp, #16]
 80031ac:	46a2      	mov	sl, r4
 80031ae:	e7d2      	b.n	8003156 <_vfiprintf_r+0xe2>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	1d19      	adds	r1, r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	9103      	str	r1, [sp, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bfbb      	ittet	lt
 80031bc:	425b      	neglt	r3, r3
 80031be:	f042 0202 	orrlt.w	r2, r2, #2
 80031c2:	9307      	strge	r3, [sp, #28]
 80031c4:	9307      	strlt	r3, [sp, #28]
 80031c6:	bfb8      	it	lt
 80031c8:	9204      	strlt	r2, [sp, #16]
 80031ca:	7823      	ldrb	r3, [r4, #0]
 80031cc:	2b2e      	cmp	r3, #46	; 0x2e
 80031ce:	d10c      	bne.n	80031ea <_vfiprintf_r+0x176>
 80031d0:	7863      	ldrb	r3, [r4, #1]
 80031d2:	2b2a      	cmp	r3, #42	; 0x2a
 80031d4:	d135      	bne.n	8003242 <_vfiprintf_r+0x1ce>
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	1d1a      	adds	r2, r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	9203      	str	r2, [sp, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bfb8      	it	lt
 80031e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031e6:	3402      	adds	r4, #2
 80031e8:	9305      	str	r3, [sp, #20]
 80031ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80032c4 <_vfiprintf_r+0x250>
 80031ee:	7821      	ldrb	r1, [r4, #0]
 80031f0:	2203      	movs	r2, #3
 80031f2:	4650      	mov	r0, sl
 80031f4:	f7fc fffc 	bl	80001f0 <memchr>
 80031f8:	b140      	cbz	r0, 800320c <_vfiprintf_r+0x198>
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	eba0 000a 	sub.w	r0, r0, sl
 8003200:	fa03 f000 	lsl.w	r0, r3, r0
 8003204:	9b04      	ldr	r3, [sp, #16]
 8003206:	4303      	orrs	r3, r0
 8003208:	3401      	adds	r4, #1
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003210:	482d      	ldr	r0, [pc, #180]	; (80032c8 <_vfiprintf_r+0x254>)
 8003212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003216:	2206      	movs	r2, #6
 8003218:	f7fc ffea 	bl	80001f0 <memchr>
 800321c:	2800      	cmp	r0, #0
 800321e:	d03f      	beq.n	80032a0 <_vfiprintf_r+0x22c>
 8003220:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <_vfiprintf_r+0x258>)
 8003222:	bb1b      	cbnz	r3, 800326c <_vfiprintf_r+0x1f8>
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	3307      	adds	r3, #7
 8003228:	f023 0307 	bic.w	r3, r3, #7
 800322c:	3308      	adds	r3, #8
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003232:	443b      	add	r3, r7
 8003234:	9309      	str	r3, [sp, #36]	; 0x24
 8003236:	e767      	b.n	8003108 <_vfiprintf_r+0x94>
 8003238:	fb0c 3202 	mla	r2, ip, r2, r3
 800323c:	460c      	mov	r4, r1
 800323e:	2001      	movs	r0, #1
 8003240:	e7a5      	b.n	800318e <_vfiprintf_r+0x11a>
 8003242:	2300      	movs	r3, #0
 8003244:	3401      	adds	r4, #1
 8003246:	9305      	str	r3, [sp, #20]
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 0c0a 	mov.w	ip, #10
 800324e:	4620      	mov	r0, r4
 8003250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003254:	3a30      	subs	r2, #48	; 0x30
 8003256:	2a09      	cmp	r2, #9
 8003258:	d903      	bls.n	8003262 <_vfiprintf_r+0x1ee>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0c5      	beq.n	80031ea <_vfiprintf_r+0x176>
 800325e:	9105      	str	r1, [sp, #20]
 8003260:	e7c3      	b.n	80031ea <_vfiprintf_r+0x176>
 8003262:	fb0c 2101 	mla	r1, ip, r1, r2
 8003266:	4604      	mov	r4, r0
 8003268:	2301      	movs	r3, #1
 800326a:	e7f0      	b.n	800324e <_vfiprintf_r+0x1da>
 800326c:	ab03      	add	r3, sp, #12
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	462a      	mov	r2, r5
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <_vfiprintf_r+0x25c>)
 8003274:	a904      	add	r1, sp, #16
 8003276:	4630      	mov	r0, r6
 8003278:	f3af 8000 	nop.w
 800327c:	4607      	mov	r7, r0
 800327e:	1c78      	adds	r0, r7, #1
 8003280:	d1d6      	bne.n	8003230 <_vfiprintf_r+0x1bc>
 8003282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003284:	07d9      	lsls	r1, r3, #31
 8003286:	d405      	bmi.n	8003294 <_vfiprintf_r+0x220>
 8003288:	89ab      	ldrh	r3, [r5, #12]
 800328a:	059a      	lsls	r2, r3, #22
 800328c:	d402      	bmi.n	8003294 <_vfiprintf_r+0x220>
 800328e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003290:	f7ff fe55 	bl	8002f3e <__retarget_lock_release_recursive>
 8003294:	89ab      	ldrh	r3, [r5, #12]
 8003296:	065b      	lsls	r3, r3, #25
 8003298:	f53f af12 	bmi.w	80030c0 <_vfiprintf_r+0x4c>
 800329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329e:	e711      	b.n	80030c4 <_vfiprintf_r+0x50>
 80032a0:	ab03      	add	r3, sp, #12
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	462a      	mov	r2, r5
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <_vfiprintf_r+0x25c>)
 80032a8:	a904      	add	r1, sp, #16
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 f880 	bl	80033b0 <_printf_i>
 80032b0:	e7e4      	b.n	800327c <_vfiprintf_r+0x208>
 80032b2:	bf00      	nop
 80032b4:	08003850 	.word	0x08003850
 80032b8:	08003870 	.word	0x08003870
 80032bc:	08003830 	.word	0x08003830
 80032c0:	08003890 	.word	0x08003890
 80032c4:	08003896 	.word	0x08003896
 80032c8:	0800389a 	.word	0x0800389a
 80032cc:	00000000 	.word	0x00000000
 80032d0:	0800304f 	.word	0x0800304f

080032d4 <_printf_common>:
 80032d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d8:	4616      	mov	r6, r2
 80032da:	4699      	mov	r9, r3
 80032dc:	688a      	ldr	r2, [r1, #8]
 80032de:	690b      	ldr	r3, [r1, #16]
 80032e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bfb8      	it	lt
 80032e8:	4613      	movlt	r3, r2
 80032ea:	6033      	str	r3, [r6, #0]
 80032ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f0:	4607      	mov	r7, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	b10a      	cbz	r2, 80032fa <_printf_common+0x26>
 80032f6:	3301      	adds	r3, #1
 80032f8:	6033      	str	r3, [r6, #0]
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	0699      	lsls	r1, r3, #26
 80032fe:	bf42      	ittt	mi
 8003300:	6833      	ldrmi	r3, [r6, #0]
 8003302:	3302      	addmi	r3, #2
 8003304:	6033      	strmi	r3, [r6, #0]
 8003306:	6825      	ldr	r5, [r4, #0]
 8003308:	f015 0506 	ands.w	r5, r5, #6
 800330c:	d106      	bne.n	800331c <_printf_common+0x48>
 800330e:	f104 0a19 	add.w	sl, r4, #25
 8003312:	68e3      	ldr	r3, [r4, #12]
 8003314:	6832      	ldr	r2, [r6, #0]
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	42ab      	cmp	r3, r5
 800331a:	dc26      	bgt.n	800336a <_printf_common+0x96>
 800331c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003320:	1e13      	subs	r3, r2, #0
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	bf18      	it	ne
 8003326:	2301      	movne	r3, #1
 8003328:	0692      	lsls	r2, r2, #26
 800332a:	d42b      	bmi.n	8003384 <_printf_common+0xb0>
 800332c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003330:	4649      	mov	r1, r9
 8003332:	4638      	mov	r0, r7
 8003334:	47c0      	blx	r8
 8003336:	3001      	adds	r0, #1
 8003338:	d01e      	beq.n	8003378 <_printf_common+0xa4>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	68e5      	ldr	r5, [r4, #12]
 800333e:	6832      	ldr	r2, [r6, #0]
 8003340:	f003 0306 	and.w	r3, r3, #6
 8003344:	2b04      	cmp	r3, #4
 8003346:	bf08      	it	eq
 8003348:	1aad      	subeq	r5, r5, r2
 800334a:	68a3      	ldr	r3, [r4, #8]
 800334c:	6922      	ldr	r2, [r4, #16]
 800334e:	bf0c      	ite	eq
 8003350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003354:	2500      	movne	r5, #0
 8003356:	4293      	cmp	r3, r2
 8003358:	bfc4      	itt	gt
 800335a:	1a9b      	subgt	r3, r3, r2
 800335c:	18ed      	addgt	r5, r5, r3
 800335e:	2600      	movs	r6, #0
 8003360:	341a      	adds	r4, #26
 8003362:	42b5      	cmp	r5, r6
 8003364:	d11a      	bne.n	800339c <_printf_common+0xc8>
 8003366:	2000      	movs	r0, #0
 8003368:	e008      	b.n	800337c <_printf_common+0xa8>
 800336a:	2301      	movs	r3, #1
 800336c:	4652      	mov	r2, sl
 800336e:	4649      	mov	r1, r9
 8003370:	4638      	mov	r0, r7
 8003372:	47c0      	blx	r8
 8003374:	3001      	adds	r0, #1
 8003376:	d103      	bne.n	8003380 <_printf_common+0xac>
 8003378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003380:	3501      	adds	r5, #1
 8003382:	e7c6      	b.n	8003312 <_printf_common+0x3e>
 8003384:	18e1      	adds	r1, r4, r3
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	2030      	movs	r0, #48	; 0x30
 800338a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800338e:	4422      	add	r2, r4
 8003390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003398:	3302      	adds	r3, #2
 800339a:	e7c7      	b.n	800332c <_printf_common+0x58>
 800339c:	2301      	movs	r3, #1
 800339e:	4622      	mov	r2, r4
 80033a0:	4649      	mov	r1, r9
 80033a2:	4638      	mov	r0, r7
 80033a4:	47c0      	blx	r8
 80033a6:	3001      	adds	r0, #1
 80033a8:	d0e6      	beq.n	8003378 <_printf_common+0xa4>
 80033aa:	3601      	adds	r6, #1
 80033ac:	e7d9      	b.n	8003362 <_printf_common+0x8e>
	...

080033b0 <_printf_i>:
 80033b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	7e0f      	ldrb	r7, [r1, #24]
 80033b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033b8:	2f78      	cmp	r7, #120	; 0x78
 80033ba:	4691      	mov	r9, r2
 80033bc:	4680      	mov	r8, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	469a      	mov	sl, r3
 80033c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033c6:	d807      	bhi.n	80033d8 <_printf_i+0x28>
 80033c8:	2f62      	cmp	r7, #98	; 0x62
 80033ca:	d80a      	bhi.n	80033e2 <_printf_i+0x32>
 80033cc:	2f00      	cmp	r7, #0
 80033ce:	f000 80d8 	beq.w	8003582 <_printf_i+0x1d2>
 80033d2:	2f58      	cmp	r7, #88	; 0x58
 80033d4:	f000 80a3 	beq.w	800351e <_printf_i+0x16e>
 80033d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033e0:	e03a      	b.n	8003458 <_printf_i+0xa8>
 80033e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033e6:	2b15      	cmp	r3, #21
 80033e8:	d8f6      	bhi.n	80033d8 <_printf_i+0x28>
 80033ea:	a101      	add	r1, pc, #4	; (adr r1, 80033f0 <_printf_i+0x40>)
 80033ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033f0:	08003449 	.word	0x08003449
 80033f4:	0800345d 	.word	0x0800345d
 80033f8:	080033d9 	.word	0x080033d9
 80033fc:	080033d9 	.word	0x080033d9
 8003400:	080033d9 	.word	0x080033d9
 8003404:	080033d9 	.word	0x080033d9
 8003408:	0800345d 	.word	0x0800345d
 800340c:	080033d9 	.word	0x080033d9
 8003410:	080033d9 	.word	0x080033d9
 8003414:	080033d9 	.word	0x080033d9
 8003418:	080033d9 	.word	0x080033d9
 800341c:	08003569 	.word	0x08003569
 8003420:	0800348d 	.word	0x0800348d
 8003424:	0800354b 	.word	0x0800354b
 8003428:	080033d9 	.word	0x080033d9
 800342c:	080033d9 	.word	0x080033d9
 8003430:	0800358b 	.word	0x0800358b
 8003434:	080033d9 	.word	0x080033d9
 8003438:	0800348d 	.word	0x0800348d
 800343c:	080033d9 	.word	0x080033d9
 8003440:	080033d9 	.word	0x080033d9
 8003444:	08003553 	.word	0x08003553
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	602a      	str	r2, [r5, #0]
 8003450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003458:	2301      	movs	r3, #1
 800345a:	e0a3      	b.n	80035a4 <_printf_i+0x1f4>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	6829      	ldr	r1, [r5, #0]
 8003460:	0606      	lsls	r6, r0, #24
 8003462:	f101 0304 	add.w	r3, r1, #4
 8003466:	d50a      	bpl.n	800347e <_printf_i+0xce>
 8003468:	680e      	ldr	r6, [r1, #0]
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	2e00      	cmp	r6, #0
 800346e:	da03      	bge.n	8003478 <_printf_i+0xc8>
 8003470:	232d      	movs	r3, #45	; 0x2d
 8003472:	4276      	negs	r6, r6
 8003474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003478:	485e      	ldr	r0, [pc, #376]	; (80035f4 <_printf_i+0x244>)
 800347a:	230a      	movs	r3, #10
 800347c:	e019      	b.n	80034b2 <_printf_i+0x102>
 800347e:	680e      	ldr	r6, [r1, #0]
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003486:	bf18      	it	ne
 8003488:	b236      	sxthne	r6, r6
 800348a:	e7ef      	b.n	800346c <_printf_i+0xbc>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	6820      	ldr	r0, [r4, #0]
 8003490:	1d19      	adds	r1, r3, #4
 8003492:	6029      	str	r1, [r5, #0]
 8003494:	0601      	lsls	r1, r0, #24
 8003496:	d501      	bpl.n	800349c <_printf_i+0xec>
 8003498:	681e      	ldr	r6, [r3, #0]
 800349a:	e002      	b.n	80034a2 <_printf_i+0xf2>
 800349c:	0646      	lsls	r6, r0, #25
 800349e:	d5fb      	bpl.n	8003498 <_printf_i+0xe8>
 80034a0:	881e      	ldrh	r6, [r3, #0]
 80034a2:	4854      	ldr	r0, [pc, #336]	; (80035f4 <_printf_i+0x244>)
 80034a4:	2f6f      	cmp	r7, #111	; 0x6f
 80034a6:	bf0c      	ite	eq
 80034a8:	2308      	moveq	r3, #8
 80034aa:	230a      	movne	r3, #10
 80034ac:	2100      	movs	r1, #0
 80034ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034b2:	6865      	ldr	r5, [r4, #4]
 80034b4:	60a5      	str	r5, [r4, #8]
 80034b6:	2d00      	cmp	r5, #0
 80034b8:	bfa2      	ittt	ge
 80034ba:	6821      	ldrge	r1, [r4, #0]
 80034bc:	f021 0104 	bicge.w	r1, r1, #4
 80034c0:	6021      	strge	r1, [r4, #0]
 80034c2:	b90e      	cbnz	r6, 80034c8 <_printf_i+0x118>
 80034c4:	2d00      	cmp	r5, #0
 80034c6:	d04d      	beq.n	8003564 <_printf_i+0x1b4>
 80034c8:	4615      	mov	r5, r2
 80034ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80034ce:	fb03 6711 	mls	r7, r3, r1, r6
 80034d2:	5dc7      	ldrb	r7, [r0, r7]
 80034d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034d8:	4637      	mov	r7, r6
 80034da:	42bb      	cmp	r3, r7
 80034dc:	460e      	mov	r6, r1
 80034de:	d9f4      	bls.n	80034ca <_printf_i+0x11a>
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d10b      	bne.n	80034fc <_printf_i+0x14c>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	07de      	lsls	r6, r3, #31
 80034e8:	d508      	bpl.n	80034fc <_printf_i+0x14c>
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	6861      	ldr	r1, [r4, #4]
 80034ee:	4299      	cmp	r1, r3
 80034f0:	bfde      	ittt	le
 80034f2:	2330      	movle	r3, #48	; 0x30
 80034f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034fc:	1b52      	subs	r2, r2, r5
 80034fe:	6122      	str	r2, [r4, #16]
 8003500:	f8cd a000 	str.w	sl, [sp]
 8003504:	464b      	mov	r3, r9
 8003506:	aa03      	add	r2, sp, #12
 8003508:	4621      	mov	r1, r4
 800350a:	4640      	mov	r0, r8
 800350c:	f7ff fee2 	bl	80032d4 <_printf_common>
 8003510:	3001      	adds	r0, #1
 8003512:	d14c      	bne.n	80035ae <_printf_i+0x1fe>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003518:	b004      	add	sp, #16
 800351a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351e:	4835      	ldr	r0, [pc, #212]	; (80035f4 <_printf_i+0x244>)
 8003520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003524:	6829      	ldr	r1, [r5, #0]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	f851 6b04 	ldr.w	r6, [r1], #4
 800352c:	6029      	str	r1, [r5, #0]
 800352e:	061d      	lsls	r5, r3, #24
 8003530:	d514      	bpl.n	800355c <_printf_i+0x1ac>
 8003532:	07df      	lsls	r7, r3, #31
 8003534:	bf44      	itt	mi
 8003536:	f043 0320 	orrmi.w	r3, r3, #32
 800353a:	6023      	strmi	r3, [r4, #0]
 800353c:	b91e      	cbnz	r6, 8003546 <_printf_i+0x196>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f023 0320 	bic.w	r3, r3, #32
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	2310      	movs	r3, #16
 8003548:	e7b0      	b.n	80034ac <_printf_i+0xfc>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	f043 0320 	orr.w	r3, r3, #32
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	2378      	movs	r3, #120	; 0x78
 8003554:	4828      	ldr	r0, [pc, #160]	; (80035f8 <_printf_i+0x248>)
 8003556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800355a:	e7e3      	b.n	8003524 <_printf_i+0x174>
 800355c:	0659      	lsls	r1, r3, #25
 800355e:	bf48      	it	mi
 8003560:	b2b6      	uxthmi	r6, r6
 8003562:	e7e6      	b.n	8003532 <_printf_i+0x182>
 8003564:	4615      	mov	r5, r2
 8003566:	e7bb      	b.n	80034e0 <_printf_i+0x130>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	6826      	ldr	r6, [r4, #0]
 800356c:	6961      	ldr	r1, [r4, #20]
 800356e:	1d18      	adds	r0, r3, #4
 8003570:	6028      	str	r0, [r5, #0]
 8003572:	0635      	lsls	r5, r6, #24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	d501      	bpl.n	800357c <_printf_i+0x1cc>
 8003578:	6019      	str	r1, [r3, #0]
 800357a:	e002      	b.n	8003582 <_printf_i+0x1d2>
 800357c:	0670      	lsls	r0, r6, #25
 800357e:	d5fb      	bpl.n	8003578 <_printf_i+0x1c8>
 8003580:	8019      	strh	r1, [r3, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	4615      	mov	r5, r2
 8003588:	e7ba      	b.n	8003500 <_printf_i+0x150>
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	602a      	str	r2, [r5, #0]
 8003590:	681d      	ldr	r5, [r3, #0]
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	2100      	movs	r1, #0
 8003596:	4628      	mov	r0, r5
 8003598:	f7fc fe2a 	bl	80001f0 <memchr>
 800359c:	b108      	cbz	r0, 80035a2 <_printf_i+0x1f2>
 800359e:	1b40      	subs	r0, r0, r5
 80035a0:	6060      	str	r0, [r4, #4]
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	2300      	movs	r3, #0
 80035a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ac:	e7a8      	b.n	8003500 <_printf_i+0x150>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	462a      	mov	r2, r5
 80035b2:	4649      	mov	r1, r9
 80035b4:	4640      	mov	r0, r8
 80035b6:	47d0      	blx	sl
 80035b8:	3001      	adds	r0, #1
 80035ba:	d0ab      	beq.n	8003514 <_printf_i+0x164>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	079b      	lsls	r3, r3, #30
 80035c0:	d413      	bmi.n	80035ea <_printf_i+0x23a>
 80035c2:	68e0      	ldr	r0, [r4, #12]
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	4298      	cmp	r0, r3
 80035c8:	bfb8      	it	lt
 80035ca:	4618      	movlt	r0, r3
 80035cc:	e7a4      	b.n	8003518 <_printf_i+0x168>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4632      	mov	r2, r6
 80035d2:	4649      	mov	r1, r9
 80035d4:	4640      	mov	r0, r8
 80035d6:	47d0      	blx	sl
 80035d8:	3001      	adds	r0, #1
 80035da:	d09b      	beq.n	8003514 <_printf_i+0x164>
 80035dc:	3501      	adds	r5, #1
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	9903      	ldr	r1, [sp, #12]
 80035e2:	1a5b      	subs	r3, r3, r1
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	dcf2      	bgt.n	80035ce <_printf_i+0x21e>
 80035e8:	e7eb      	b.n	80035c2 <_printf_i+0x212>
 80035ea:	2500      	movs	r5, #0
 80035ec:	f104 0619 	add.w	r6, r4, #25
 80035f0:	e7f5      	b.n	80035de <_printf_i+0x22e>
 80035f2:	bf00      	nop
 80035f4:	080038a1 	.word	0x080038a1
 80035f8:	080038b2 	.word	0x080038b2

080035fc <__sread>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	460c      	mov	r4, r1
 8003600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003604:	f000 f894 	bl	8003730 <_read_r>
 8003608:	2800      	cmp	r0, #0
 800360a:	bfab      	itete	ge
 800360c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800360e:	89a3      	ldrhlt	r3, [r4, #12]
 8003610:	181b      	addge	r3, r3, r0
 8003612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003616:	bfac      	ite	ge
 8003618:	6563      	strge	r3, [r4, #84]	; 0x54
 800361a:	81a3      	strhlt	r3, [r4, #12]
 800361c:	bd10      	pop	{r4, pc}

0800361e <__swrite>:
 800361e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003622:	461f      	mov	r7, r3
 8003624:	898b      	ldrh	r3, [r1, #12]
 8003626:	05db      	lsls	r3, r3, #23
 8003628:	4605      	mov	r5, r0
 800362a:	460c      	mov	r4, r1
 800362c:	4616      	mov	r6, r2
 800362e:	d505      	bpl.n	800363c <__swrite+0x1e>
 8003630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003634:	2302      	movs	r3, #2
 8003636:	2200      	movs	r2, #0
 8003638:	f000 f868 	bl	800370c <_lseek_r>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	4632      	mov	r2, r6
 800364a:	463b      	mov	r3, r7
 800364c:	4628      	mov	r0, r5
 800364e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003652:	f000 b817 	b.w	8003684 <_write_r>

08003656 <__sseek>:
 8003656:	b510      	push	{r4, lr}
 8003658:	460c      	mov	r4, r1
 800365a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365e:	f000 f855 	bl	800370c <_lseek_r>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	bf15      	itete	ne
 8003668:	6560      	strne	r0, [r4, #84]	; 0x54
 800366a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800366e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003672:	81a3      	strheq	r3, [r4, #12]
 8003674:	bf18      	it	ne
 8003676:	81a3      	strhne	r3, [r4, #12]
 8003678:	bd10      	pop	{r4, pc}

0800367a <__sclose>:
 800367a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367e:	f000 b813 	b.w	80036a8 <_close_r>
	...

08003684 <_write_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4d07      	ldr	r5, [pc, #28]	; (80036a4 <_write_r+0x20>)
 8003688:	4604      	mov	r4, r0
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	2200      	movs	r2, #0
 8003690:	602a      	str	r2, [r5, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f7fe ff23 	bl	80024de <_write>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_write_r+0x1e>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_write_r+0x1e>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	200000e0 	.word	0x200000e0

080036a8 <_close_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4d06      	ldr	r5, [pc, #24]	; (80036c4 <_close_r+0x1c>)
 80036ac:	2300      	movs	r3, #0
 80036ae:	4604      	mov	r4, r0
 80036b0:	4608      	mov	r0, r1
 80036b2:	602b      	str	r3, [r5, #0]
 80036b4:	f7fe ff2f 	bl	8002516 <_close>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d102      	bne.n	80036c2 <_close_r+0x1a>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	b103      	cbz	r3, 80036c2 <_close_r+0x1a>
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
 80036c4:	200000e0 	.word	0x200000e0

080036c8 <_fstat_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4d07      	ldr	r5, [pc, #28]	; (80036e8 <_fstat_r+0x20>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	602b      	str	r3, [r5, #0]
 80036d6:	f7fe ff29 	bl	800252c <_fstat>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	d102      	bne.n	80036e4 <_fstat_r+0x1c>
 80036de:	682b      	ldr	r3, [r5, #0]
 80036e0:	b103      	cbz	r3, 80036e4 <_fstat_r+0x1c>
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
 80036e6:	bf00      	nop
 80036e8:	200000e0 	.word	0x200000e0

080036ec <_isatty_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d06      	ldr	r5, [pc, #24]	; (8003708 <_isatty_r+0x1c>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4604      	mov	r4, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	f7fe ff27 	bl	800254a <_isatty>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_isatty_r+0x1a>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	b103      	cbz	r3, 8003706 <_isatty_r+0x1a>
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	200000e0 	.word	0x200000e0

0800370c <_lseek_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d07      	ldr	r5, [pc, #28]	; (800372c <_lseek_r+0x20>)
 8003710:	4604      	mov	r4, r0
 8003712:	4608      	mov	r0, r1
 8003714:	4611      	mov	r1, r2
 8003716:	2200      	movs	r2, #0
 8003718:	602a      	str	r2, [r5, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f7fe ff1f 	bl	800255e <_lseek>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_lseek_r+0x1e>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_lseek_r+0x1e>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	200000e0 	.word	0x200000e0

08003730 <_read_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4d07      	ldr	r5, [pc, #28]	; (8003750 <_read_r+0x20>)
 8003734:	4604      	mov	r4, r0
 8003736:	4608      	mov	r0, r1
 8003738:	4611      	mov	r1, r2
 800373a:	2200      	movs	r2, #0
 800373c:	602a      	str	r2, [r5, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7fe feb0 	bl	80024a4 <_read>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_read_r+0x1e>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_read_r+0x1e>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	200000e0 	.word	0x200000e0

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
