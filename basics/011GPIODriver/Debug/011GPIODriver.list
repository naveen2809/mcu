
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f18  08002f18  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002f18  08002f18  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f18  08002f18  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000000c0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029d7  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009e5  00000000  00000000  00022a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00023470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000320  00000000  00000000  00023828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c3a  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004543  00000000  00000000  00027782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dc24  00000000  00000000  0002bcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000398e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000163c  00000000  00000000  0003993c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002de0 	.word	0x08002de0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002de0 	.word	0x08002de0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay_us>:
#include "common_utilities.h"

struct General_Purpose_Timer_Handle_t TIM2_Handle;

void delay_us(uint32_t delay)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <delay_us+0x2c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002b0:	bf00      	nop
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <delay_us+0x2c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	011b      	lsls	r3, r3, #4
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3f8      	bcc.n	80002b2 <delay_us+0x12>
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	200000a0 	.word	0x200000a0

080002d0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <configure_delay_timer+0x3c>)
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002dc:	2228      	movs	r2, #40	; 0x28
 80002de:	2100      	movs	r1, #0
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <configure_delay_timer+0x40>)
 80002e2:	f001 fd1d 	bl	8001d20 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x4;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <configure_delay_timer+0x3c>)
 80002e8:	2204      	movs	r2, #4
 80002ea:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <configure_delay_timer+0x3c>)
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002f2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002f8:	f000 fc46 	bl	8000b88 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <configure_delay_timer+0x3c>)
 80002fe:	f000 f809 	bl	8000314 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <configure_delay_timer+0x3c>)
 8000304:	f000 fa2e 	bl	8000764 <General_Purpose_Timer_PeripheralEnable>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000a0 	.word	0x200000a0
 8000310:	200000a4 	.word	0x200000a4

08000314 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	6852      	ldr	r2, [r2, #4]
 8000324:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6892      	ldr	r2, [r2, #8]
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7b1b      	ldrb	r3, [r3, #12]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d16a      	bne.n	800040e <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	6a1a      	ldr	r2, [r3, #32]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f042 0201 	orr.w	r2, r2, #1
 8000346:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	7b5b      	ldrb	r3, [r3, #13]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d11c      	bne.n	800038a <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	699a      	ldr	r2, [r3, #24]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f022 0203 	bic.w	r2, r2, #3
 800035e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	6912      	ldr	r2, [r2, #16]
 8000368:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000378:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	699a      	ldr	r2, [r3, #24]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000388:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7b5b      	ldrb	r3, [r3, #13]
 800038e:	2b03      	cmp	r3, #3
 8000390:	d11c      	bne.n	80003cc <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	699a      	ldr	r2, [r3, #24]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f022 0203 	bic.w	r2, r2, #3
 80003a0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	6912      	ldr	r2, [r2, #16]
 80003aa:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003ba:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	699a      	ldr	r2, [r3, #24]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80003ca:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7b5b      	ldrb	r3, [r3, #13]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d11c      	bne.n	800040e <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	699a      	ldr	r2, [r3, #24]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f022 0203 	bic.w	r2, r2, #3
 80003e2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	6912      	ldr	r2, [r2, #16]
 80003ec:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003fc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800040c:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	7d1b      	ldrb	r3, [r3, #20]
 8000412:	2b00      	cmp	r3, #0
 8000414:	f040 80bf 	bne.w	8000596 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7d5b      	ldrb	r3, [r3, #21]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d124      	bne.n	800046a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	699a      	ldr	r2, [r3, #24]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800042e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	6992      	ldr	r2, [r2, #24]
 8000438:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	699a      	ldr	r2, [r3, #24]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000448:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000458:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6a1a      	ldr	r2, [r3, #32]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f042 0210 	orr.w	r2, r2, #16
 8000468:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7d5b      	ldrb	r3, [r3, #21]
 800046e:	2b03      	cmp	r3, #3
 8000470:	d124      	bne.n	80004bc <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000480:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	6992      	ldr	r2, [r2, #24]
 800048a:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800049a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	699a      	ldr	r2, [r3, #24]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80004aa:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6a1a      	ldr	r2, [r3, #32]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f042 0210 	orr.w	r2, r2, #16
 80004ba:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7d5b      	ldrb	r3, [r3, #21]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d124      	bne.n	800050e <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80004d2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	6992      	ldr	r2, [r2, #24]
 80004dc:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80004ec:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80004fc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6a1a      	ldr	r2, [r3, #32]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f042 0210 	orr.w	r2, r2, #16
 800050c:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7d5b      	ldrb	r3, [r3, #21]
 8000512:	2b08      	cmp	r3, #8
 8000514:	d13f      	bne.n	8000596 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	699a      	ldr	r2, [r3, #24]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000524:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000534:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000544:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a1a      	ldr	r2, [r3, #32]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f022 0220 	bic.w	r2, r2, #32
 8000554:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6a1a      	ldr	r2, [r3, #32]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000564:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000574:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0204 	orr.w	r2, r2, #4
 8000584:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6a1a      	ldr	r2, [r3, #32]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0210 	orr.w	r2, r2, #16
 8000594:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7f1b      	ldrb	r3, [r3, #28]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d16a      	bne.n	8000674 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a1a      	ldr	r2, [r3, #32]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ac:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7f5b      	ldrb	r3, [r3, #29]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d11c      	bne.n	80005f0 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f022 0203 	bic.w	r2, r2, #3
 80005c4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	6a12      	ldr	r2, [r2, #32]
 80005ce:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005de:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80005ee:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7f5b      	ldrb	r3, [r3, #29]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d11c      	bne.n	8000632 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	69da      	ldr	r2, [r3, #28]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f022 0203 	bic.w	r2, r2, #3
 8000606:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6a12      	ldr	r2, [r2, #32]
 8000610:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000620:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	69da      	ldr	r2, [r3, #28]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000630:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7f5b      	ldrb	r3, [r3, #29]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d11c      	bne.n	8000674 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	69da      	ldr	r2, [r3, #28]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0203 	bic.w	r2, r2, #3
 8000648:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	6a12      	ldr	r2, [r2, #32]
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000662:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000672:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800067a:	2b00      	cmp	r3, #0
 800067c:	d16d      	bne.n	800075a <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6a1a      	ldr	r2, [r3, #32]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800068c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000694:	2b02      	cmp	r3, #2
 8000696:	d11c      	bne.n	80006d2 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69da      	ldr	r2, [r3, #28]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80006a6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006c0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69da      	ldr	r2, [r3, #28]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80006d0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d11c      	bne.n	8000716 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80006ea:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80006f4:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000704:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	69da      	ldr	r2, [r3, #28]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000714:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800071c:	2b04      	cmp	r3, #4
 800071e:	d11c      	bne.n	800075a <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	69da      	ldr	r2, [r3, #28]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800072e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000748:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	69da      	ldr	r2, [r3, #28]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000758:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0201 	orr.w	r2, r2, #1
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
 8000792:	4613      	mov	r3, r2
 8000794:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	78fa      	ldrb	r2, [r7, #3]
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	2103      	movs	r1, #3
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	78b9      	ldrb	r1, [r7, #2]
 80007b6:	78fa      	ldrb	r2, [r7, #3]
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	431a      	orrs	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	601a      	str	r2, [r3, #0]

}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70fb      	strb	r3, [r7, #3]
 80007da:	4613      	mov	r3, r2
 80007dc:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	2101      	movs	r1, #1
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	43d2      	mvns	r2, r2
 80007f0:	401a      	ands	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	78b9      	ldrb	r1, [r7, #2]
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	431a      	orrs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	615a      	str	r2, [r3, #20]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
 800081e:	4613      	mov	r3, r2
 8000820:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000834:	7afa      	ldrb	r2, [r7, #11]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3208      	adds	r2, #8
 800083a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083e:	7aba      	ldrb	r2, [r7, #10]
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	210f      	movs	r1, #15
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	43d2      	mvns	r2, r2
 800084a:	4611      	mov	r1, r2
 800084c:	7afa      	ldrb	r2, [r7, #11]
 800084e:	4019      	ands	r1, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3208      	adds	r2, #8
 8000854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000858:	7afa      	ldrb	r2, [r7, #11]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3208      	adds	r2, #8
 800085e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000862:	78b9      	ldrb	r1, [r7, #2]
 8000864:	7aba      	ldrb	r2, [r7, #10]
 8000866:	0092      	lsls	r2, r2, #2
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	4611      	mov	r1, r2
 800086e:	7afa      	ldrb	r2, [r7, #11]
 8000870:	4319      	orrs	r1, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3208      	adds	r2, #8
 8000876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
 8000890:	4613      	mov	r3, r2
 8000892:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	78fa      	ldrb	r2, [r7, #3]
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	78b9      	ldrb	r1, [r7, #2]
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	431a      	orrs	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	605a      	str	r2, [r3, #4]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
 80008d4:	4613      	mov	r3, r2
 80008d6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	2103      	movs	r1, #3
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	43d2      	mvns	r2, r2
 80008ec:	401a      	ands	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	78b9      	ldrb	r1, [r7, #2]
 80008f8:	78fa      	ldrb	r2, [r7, #3]
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	431a      	orrs	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	60da      	str	r2, [r3, #12]
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
 800091c:	4613      	mov	r3, r2
 800091e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	78fa      	ldrb	r2, [r7, #3]
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	2103      	movs	r1, #3
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	401a      	ands	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	78b9      	ldrb	r1, [r7, #2]
 8000940:	78fa      	ldrb	r2, [r7, #3]
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	609a      	str	r2, [r3, #8]
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 0201 	bic.w	r2, r3, #1
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	7852      	ldrb	r2, [r2, #1]
 800097a:	431a      	orrs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 0202 	bic.w	r2, r3, #2
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f023 0204 	bic.w	r2, r3, #4
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	7892      	ldrb	r2, [r2, #2]
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	431a      	orrs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	7912      	ldrb	r2, [r2, #4]
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	431a      	orrs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	7952      	ldrb	r2, [r2, #5]
 80009e8:	02d2      	lsls	r2, r2, #11
 80009ea:	431a      	orrs	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	7992      	ldrb	r2, [r2, #6]
 8000a04:	0252      	lsls	r2, r2, #9
 8000a06:	431a      	orrs	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	79d2      	ldrb	r2, [r2, #7]
 8000a20:	0212      	lsls	r2, r2, #8
 8000a22:	431a      	orrs	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f023 0204 	bic.w	r2, r3, #4
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	7a12      	ldrb	r2, [r2, #8]
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	605a      	str	r2, [r3, #4]


}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3

}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	71fb      	strb	r3, [r7, #7]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 8000aae:	e012      	b.n	8000ad6 <SPISendData+0x3a>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000ab0:	bf00      	nop
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f7ff ffdb 	bl	8000a70 <SPIGetFlags>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f8      	beq.n	8000ab2 <SPISendData+0x16>

		pSPI->SPI_DR = *TxBuf;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
		len--;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	71fb      	strb	r3, [r7, #7]
	while(len > 0) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1e9      	bne.n	8000ab0 <SPISendData+0x14>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 8000adc:	bf00      	nop
 8000ade:	2101      	movs	r1, #1
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ffc5 	bl	8000a70 <SPIGetFlags>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f8      	beq.n	8000ade <SPISendData+0x42>
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000b08:	bf00      	nop
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff ffaf 	bl	8000a70 <SPIGetFlags>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f8      	beq.n	8000b0a <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000b18:	e004      	b.n	8000b24 <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000b24:	2100      	movs	r1, #0
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ffa2 	bl	8000a70 <SPIGetFlags>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f3      	bne.n	8000b1a <SPIMasterRecvData+0x24>

	while(len > 0) {
 8000b32:	e022      	b.n	8000b7a <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000b34:	bf00      	nop
 8000b36:	2101      	movs	r1, #1
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f7ff ff99 	bl	8000a70 <SPIGetFlags>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f8      	beq.n	8000b36 <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 8000b54:	bf00      	nop
 8000b56:	2100      	movs	r1, #0
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ff89 	bl	8000a70 <SPIGetFlags>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f8      	beq.n	8000b56 <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
		len--;
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	70fb      	strb	r3, [r7, #3]
	while(len > 0) {
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1d9      	bne.n	8000b34 <SPIMasterRecvData+0x3e>
	}

	return;
 8000b80:	bf00      	nop
}
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a88      	ldr	r2, [pc, #544]	; (8000db4 <EnablePeriClk+0x22c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d108      	bne.n	8000baa <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b98:	4b87      	ldr	r3, [pc, #540]	; (8000db8 <EnablePeriClk+0x230>)
 8000b9a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f043 0201 	orr.w	r2, r3, #1
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000ba8:	e19b      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a83      	ldr	r2, [pc, #524]	; (8000dbc <EnablePeriClk+0x234>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d108      	bne.n	8000bc4 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bb2:	4b81      	ldr	r3, [pc, #516]	; (8000db8 <EnablePeriClk+0x230>)
 8000bb4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f043 0202 	orr.w	r2, r3, #2
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	e18e      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a7e      	ldr	r2, [pc, #504]	; (8000dc0 <EnablePeriClk+0x238>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d108      	bne.n	8000bde <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bcc:	4b7a      	ldr	r3, [pc, #488]	; (8000db8 <EnablePeriClk+0x230>)
 8000bce:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f043 0204 	orr.w	r2, r3, #4
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	e181      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a78      	ldr	r2, [pc, #480]	; (8000dc4 <EnablePeriClk+0x23c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d108      	bne.n	8000bf8 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000be6:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <EnablePeriClk+0x230>)
 8000be8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f043 0208 	orr.w	r2, r3, #8
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	e174      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a73      	ldr	r2, [pc, #460]	; (8000dc8 <EnablePeriClk+0x240>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d108      	bne.n	8000c12 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c00:	4b6d      	ldr	r3, [pc, #436]	; (8000db8 <EnablePeriClk+0x230>)
 8000c02:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f043 0210 	orr.w	r2, r3, #16
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	e167      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a6d      	ldr	r2, [pc, #436]	; (8000dcc <EnablePeriClk+0x244>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d108      	bne.n	8000c2c <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c1a:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <EnablePeriClk+0x230>)
 8000c1c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f043 0220 	orr.w	r2, r3, #32
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	e15a      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a68      	ldr	r2, [pc, #416]	; (8000dd0 <EnablePeriClk+0x248>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d108      	bne.n	8000c46 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c34:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <EnablePeriClk+0x230>)
 8000c36:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	e14d      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a62      	ldr	r2, [pc, #392]	; (8000dd4 <EnablePeriClk+0x24c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d108      	bne.n	8000c60 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <EnablePeriClk+0x230>)
 8000c50:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	e140      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a5d      	ldr	r2, [pc, #372]	; (8000dd8 <EnablePeriClk+0x250>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d108      	bne.n	8000c7a <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c68:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <EnablePeriClk+0x230>)
 8000c6a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	e133      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <EnablePeriClk+0x254>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d108      	bne.n	8000c94 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <EnablePeriClk+0x258>)
 8000c84:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	e126      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a53      	ldr	r2, [pc, #332]	; (8000de4 <EnablePeriClk+0x25c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d108      	bne.n	8000cae <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c9c:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <EnablePeriClk+0x260>)
 8000c9e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	e119      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4e      	ldr	r2, [pc, #312]	; (8000dec <EnablePeriClk+0x264>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d108      	bne.n	8000cc8 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cb6:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <EnablePeriClk+0x260>)
 8000cb8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	601a      	str	r2, [r3, #0]
}
 8000cc6:	e10c      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <EnablePeriClk+0x268>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d108      	bne.n	8000ce2 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <EnablePeriClk+0x260>)
 8000cd2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	e0ff      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a43      	ldr	r2, [pc, #268]	; (8000df4 <EnablePeriClk+0x26c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d108      	bne.n	8000cfc <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cea:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <EnablePeriClk+0x260>)
 8000cec:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	e0f2      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	; (8000df8 <EnablePeriClk+0x270>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d108      	bne.n	8000d16 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <EnablePeriClk+0x260>)
 8000d06:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	e0e5      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a38      	ldr	r2, [pc, #224]	; (8000dfc <EnablePeriClk+0x274>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d108      	bne.n	8000d30 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <EnablePeriClk+0x258>)
 8000d20:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f043 0210 	orr.w	r2, r3, #16
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	e0d8      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a33      	ldr	r2, [pc, #204]	; (8000e00 <EnablePeriClk+0x278>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d108      	bne.n	8000d4a <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <EnablePeriClk+0x260>)
 8000d3a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	e0cb      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <EnablePeriClk+0x27c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d108      	bne.n	8000d64 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <EnablePeriClk+0x260>)
 8000d54:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	e0be      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <EnablePeriClk+0x280>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d108      	bne.n	8000d7e <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <EnablePeriClk+0x260>)
 8000d6e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	e0b1      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <EnablePeriClk+0x284>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d108      	bne.n	8000d98 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <EnablePeriClk+0x260>)
 8000d88:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	e0a4      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <EnablePeriClk+0x288>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d139      	bne.n	8000e14 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <EnablePeriClk+0x258>)
 8000da2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f043 0220 	orr.w	r2, r3, #32
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	e097      	b.n	8000ee2 <EnablePeriClk+0x35a>
 8000db2:	bf00      	nop
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40023830 	.word	0x40023830
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40021400 	.word	0x40021400
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40021c00 	.word	0x40021c00
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40013000 	.word	0x40013000
 8000de0:	40023844 	.word	0x40023844
 8000de4:	40003800 	.word	0x40003800
 8000de8:	40023840 	.word	0x40023840
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40005800 	.word	0x40005800
 8000df8:	40005c00 	.word	0x40005c00
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	40004400 	.word	0x40004400
 8000e04:	40004800 	.word	0x40004800
 8000e08:	40004c00 	.word	0x40004c00
 8000e0c:	40005000 	.word	0x40005000
 8000e10:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a35      	ldr	r2, [pc, #212]	; (8000eec <EnablePeriClk+0x364>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d108      	bne.n	8000e2e <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <EnablePeriClk+0x368>)
 8000e1e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 0210 	orr.w	r2, r3, #16
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	e059      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <EnablePeriClk+0x36c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d108      	bne.n	8000e48 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <EnablePeriClk+0x368>)
 8000e38:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f043 0220 	orr.w	r2, r3, #32
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	e04c      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <EnablePeriClk+0x370>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d108      	bne.n	8000e62 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <EnablePeriClk+0x374>)
 8000e52:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	e03f      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <EnablePeriClk+0x378>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d108      	bne.n	8000e7c <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <EnablePeriClk+0x374>)
 8000e6c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	e032      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e82:	d108      	bne.n	8000e96 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <EnablePeriClk+0x368>)
 8000e86:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	e025      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <EnablePeriClk+0x37c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d108      	bne.n	8000eb0 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <EnablePeriClk+0x368>)
 8000ea0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f043 0202 	orr.w	r2, r3, #2
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	e018      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <EnablePeriClk+0x380>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d108      	bne.n	8000eca <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <EnablePeriClk+0x368>)
 8000eba:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f043 0204 	orr.w	r2, r3, #4
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	e00b      	b.n	8000ee2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <EnablePeriClk+0x384>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d107      	bne.n	8000ee2 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <EnablePeriClk+0x368>)
 8000ed4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f043 0208 	orr.w	r2, r3, #8
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40001000 	.word	0x40001000
 8000ef0:	40023840 	.word	0x40023840
 8000ef4:	40001400 	.word	0x40001400
 8000ef8:	40026000 	.word	0x40026000
 8000efc:	40023830 	.word	0x40023830
 8000f00:	40026400 	.word	0x40026400
 8000f04:	40000400 	.word	0x40000400
 8000f08:	40000800 	.word	0x40000800
 8000f0c:	40000c00 	.word	0x40000c00

08000f10 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d110      	bne.n	8000f42 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0208 	orr.w	r2, r2, #8
 8000f2e:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	e028      	b.n	8000f94 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d110      	bne.n	8000f6c <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0208 	bic.w	r2, r2, #8
 8000f58:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0204 	orr.w	r2, r2, #4
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	e013      	b.n	8000f94 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d10f      	bne.n	8000f94 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0208 	orr.w	r2, r2, #8
 8000f82:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0204 	orr.w	r2, r2, #4
 8000f92:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d108      	bne.n	8000fae <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	e00b      	b.n	8000fc6 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d107      	bne.n	8000fc6 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fc4:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000fd4:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6919      	ldr	r1, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	031a      	lsls	r2, r3, #12
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	e028      	b.n	8001056 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d110      	bne.n	800102e <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800101a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	e013      	b.n	8001056 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d10f      	bne.n	8001056 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001044:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001054:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f8a7 	bl	80011b0 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001078:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001088:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 800108a:	e03d      	b.n	8001108 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d110      	bne.n	80010b6 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a2:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b2:	615a      	str	r2, [r3, #20]
}
 80010b4:	e028      	b.n	8001108 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d110      	bne.n	80010e0 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010cc:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010dc:	615a      	str	r2, [r3, #20]
}
 80010de:	e013      	b.n	8001108 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d10f      	bne.n	8001108 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010f6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001106:	615a      	str	r2, [r3, #20]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001126:	60da      	str	r2, [r3, #12]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001168:	e012      	b.n	8001190 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 800116a:	bf00      	nop
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff ffdf 	bl	8001132 <USART_GetFlagStatus>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f8      	beq.n	800116c <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
		Len--;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3b01      	subs	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1e9      	bne.n	800116a <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8001196:	bf00      	nop
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff ffc9 	bl	8001132 <USART_GetFlagStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f8      	beq.n	8001198 <USART_SendData+0x3c>
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 80011ba:	f240 6383 	movw	r3, #1667	; 0x683
 80011be:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	609a      	str	r2, [r3, #8]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <main>:
uint8_t nrf_packet_tx_state;

struct USART_Handle_t Test_USART;

int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
	struct NRF_RADIO_CONFIG_t radio_config;

	uint8_t addr[] = {0xA1,0xA2,0xA3,0xA4,0xA5};
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <main+0xa8>)
 80011dc:	463b      	mov	r3, r7
 80011de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e2:	6018      	str	r0, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	7019      	strb	r1, [r3, #0]

	tx_packet_length = strlen(tx_buffer);
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <main+0xac>)
 80011ea:	f7ff f801 	bl	80001f0 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <main+0xb0>)
 80011f4:	701a      	strb	r2, [r3, #0]

	//1.a Configure the Timer Peripheral
	configure_delay_timer();
 80011f6:	f7ff f86b 	bl	80002d0 <configure_delay_timer>

	//1.b Configure the UART Peripheral
	configure_uart();
 80011fa:	f000 fbaf 	bl	800195c <configure_uart>

	//1.c Configure Radio Interrupts
	//configure_radio_interrupts();

	//2. Configure the SPI Port connecting to NRF24L01 Radio
	configure_spi();
 80011fe:	f000 f843 	bl	8001288 <configure_spi>

	configure_gpio_led();
 8001202:	f000 fc73 	bl	8001aec <configure_gpio_led>

	//3. Configure the NRF24L01 Radio
	memset(&radio_config,0,sizeof(radio_config));
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fd86 	bl	8001d20 <memset>
	radio_config.radio_mode = NRF_RADIO_MODE_RX;
 8001214:	2301      	movs	r3, #1
 8001216:	723b      	strb	r3, [r7, #8]
	radio_config.radio_channel = 10;
 8001218:	230a      	movs	r3, #10
 800121a:	727b      	strb	r3, [r7, #9]
	radio_config.radio_data_rate = NRF_RADIO_DATA_RATE_250K;
 800121c:	2300      	movs	r3, #0
 800121e:	72bb      	strb	r3, [r7, #10]
	radio_config.radio_pa_level = NRF_RADIO_PA_LEVEL_0;
 8001220:	2300      	movs	r3, #0
 8001222:	72fb      	strb	r3, [r7, #11]
	radio_config.radio_enable_data_pipes = (NRF_RADIO_ERX_P0);
 8001224:	2301      	movs	r3, #1
 8001226:	733b      	strb	r3, [r7, #12]
	radio_config.radio_enable_auto_acknowledgements = (NRF_RADIO_ENAA_P0);
 8001228:	2301      	movs	r3, #1
 800122a:	737b      	strb	r3, [r7, #13]
	radio_config.radio_address_width = NRF_RADIO_ADDRESS_WIDTH_5B;
 800122c:	2303      	movs	r3, #3
 800122e:	73bb      	strb	r3, [r7, #14]
	radio_config.radio_auto_retransmit_count = NRF_RADIO_ARC_3;
 8001230:	2303      	movs	r3, #3
 8001232:	73fb      	strb	r3, [r7, #15]
	radio_config.radio_auto_retransmit_delay = NRF_RADIO_ARD_1000US;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	743b      	strb	r3, [r7, #16]
	memcpy(&radio_config.radio_addr_p0, addr, sizeof(addr));
 8001238:	f107 0311 	add.w	r3, r7, #17
 800123c:	463a      	mov	r2, r7
 800123e:	6810      	ldr	r0, [r2, #0]
 8001240:	6018      	str	r0, [r3, #0]
 8001242:	7912      	ldrb	r2, [r2, #4]
 8001244:	711a      	strb	r2, [r3, #4]
	memcpy(&radio_config.radio_addr_peer, addr, sizeof(addr));
 8001246:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800124a:	463a      	mov	r2, r7
 800124c:	6810      	ldr	r0, [r2, #0]
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	7912      	ldrb	r2, [r2, #4]
 8001252:	711a      	strb	r2, [r3, #4]
	radio_config.radio_dynamic_payload_length_feature = NRF_RADIO_DPL_FEATURE_ENABLE;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	radio_config.radio_dynamic_payload_enable_pipes = NRF_RADIO_DPL_P0;
 800125a:	2301      	movs	r3, #1
 800125c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	radio_config.radio_ack_payload_feature = NRF_RADIO_ACK_PAYLOAD_FEATURE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	radio_config.radio_dynamic_ack_feature = NRF_RADIO_DYNAMIC_ACK_FEATURE_ENABLE;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	configure_nrf_radio(&radio_config);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f85b 	bl	800132c <configure_nrf_radio>

	while(1)
	{
		nrf_radio_rx_polling();
 8001276:	f000 fbf5 	bl	8001a64 <nrf_radio_rx_polling>
 800127a:	e7fc      	b.n	8001276 <main+0xa2>
 800127c:	08002df8 	.word	0x08002df8
 8001280:	20000000 	.word	0x20000000
 8001284:	2000010d 	.word	0x2000010d

08001288 <configure_spi>:

	return 0;
}

void configure_spi(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <configure_spi+0x9c>)
 8001290:	f7ff fc7a 	bl	8000b88 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8001294:	2202      	movs	r2, #2
 8001296:	210f      	movs	r1, #15
 8001298:	4822      	ldr	r0, [pc, #136]	; (8001324 <configure_spi+0x9c>)
 800129a:	f7ff fa74 	bl	8000786 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800129e:	2202      	movs	r2, #2
 80012a0:	210e      	movs	r1, #14
 80012a2:	4820      	ldr	r0, [pc, #128]	; (8001324 <configure_spi+0x9c>)
 80012a4:	f7ff fa6f 	bl	8000786 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 80012a8:	2202      	movs	r2, #2
 80012aa:	210d      	movs	r1, #13
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <configure_spi+0x9c>)
 80012ae:	f7ff fa6a 	bl	8000786 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 80012b2:	2202      	movs	r2, #2
 80012b4:	210c      	movs	r1, #12
 80012b6:	481b      	ldr	r0, [pc, #108]	; (8001324 <configure_spi+0x9c>)
 80012b8:	f7ff fa65 	bl	8000786 <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 80012bc:	2205      	movs	r2, #5
 80012be:	210f      	movs	r1, #15
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <configure_spi+0x9c>)
 80012c2:	f7ff faa6 	bl	8000812 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 80012c6:	2205      	movs	r2, #5
 80012c8:	210e      	movs	r1, #14
 80012ca:	4816      	ldr	r0, [pc, #88]	; (8001324 <configure_spi+0x9c>)
 80012cc:	f7ff faa1 	bl	8000812 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 80012d0:	2205      	movs	r2, #5
 80012d2:	210d      	movs	r1, #13
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <configure_spi+0x9c>)
 80012d6:	f7ff fa9c 	bl	8000812 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 80012da:	2205      	movs	r2, #5
 80012dc:	210c      	movs	r1, #12
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <configure_spi+0x9c>)
 80012e0:	f7ff fa97 	bl	8000812 <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 80012e4:	2301      	movs	r3, #1
 80012e6:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV4;
 80012f0:	2301      	movs	r3, #1
 80012f2:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 80012f4:	2300      	movs	r3, #0
 80012f6:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 8001300:	2301      	movs	r3, #1
 8001302:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <configure_spi+0xa0>)
 8001306:	f7ff fc3f 	bl	8000b88 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <configure_spi+0xa0>)
 8001310:	f7ff fb22 	bl	8000958 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <configure_spi+0xa0>)
 8001316:	f7ff fb9a 	bl	8000a4e <SPIEnable>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020400 	.word	0x40020400
 8001328:	40003800 	.word	0x40003800

0800132c <configure_nrf_radio>:

void configure_nrf_radio(struct NRF_RADIO_CONFIG_t * radio_config)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	uint8_t i;

	//1. Configure the GPIO pins for CE and IRQ pins
	EnablePeriClk(RADIO_PORT);
 8001334:	4871      	ldr	r0, [pc, #452]	; (80014fc <configure_nrf_radio+0x1d0>)
 8001336:	f7ff fc27 	bl	8000b88 <EnablePeriClk>
	GPIOSetMode(RADIO_PORT,CE_PIN,GPIO_MODE_OUTPUT);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	486f      	ldr	r0, [pc, #444]	; (80014fc <configure_nrf_radio+0x1d0>)
 8001340:	f7ff fa21 	bl	8000786 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	486c      	ldr	r0, [pc, #432]	; (80014fc <configure_nrf_radio+0x1d0>)
 800134a:	f7ff fa40 	bl	80007ce <GPIOWritePin>
	GPIOSetMode(RADIO_PORT,IRQ_PIN,GPIO_MODE_INPUT);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	486a      	ldr	r0, [pc, #424]	; (80014fc <configure_nrf_radio+0x1d0>)
 8001354:	f7ff fa17 	bl	8000786 <GPIOSetMode>
	GPIOSetPullUpDownConfig(RADIO_PORT,IRQ_PIN,GPIO_PULL_UP);
 8001358:	2201      	movs	r2, #1
 800135a:	2100      	movs	r1, #0
 800135c:	4867      	ldr	r0, [pc, #412]	; (80014fc <configure_nrf_radio+0x1d0>)
 800135e:	f7ff fab3 	bl	80008c8 <GPIOSetPullUpDownConfig>
	GPIOSetMode(RADIO_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 8001362:	2201      	movs	r2, #1
 8001364:	2104      	movs	r1, #4
 8001366:	4865      	ldr	r0, [pc, #404]	; (80014fc <configure_nrf_radio+0x1d0>)
 8001368:	f7ff fa0d 	bl	8000786 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 800136c:	2201      	movs	r2, #1
 800136e:	2104      	movs	r1, #4
 8001370:	4862      	ldr	r0, [pc, #392]	; (80014fc <configure_nrf_radio+0x1d0>)
 8001372:	f7ff fa2c 	bl	80007ce <GPIOWritePin>

	//2. Configure the Radio Mode

	//3. Configure the RF Channel, Data Rate and PA Level
	//3.1 Configure the RF Channel
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_CH;
 8001376:	4b62      	ldr	r3, [pc, #392]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001378:	2225      	movs	r2, #37	; 0x25
 800137a:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_channel;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	785a      	ldrb	r2, [r3, #1]
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001382:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <configure_nrf_radio+0x1d8>)
 8001386:	2202      	movs	r2, #2
 8001388:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 800138a:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <configure_nrf_radio+0x1d8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	485b      	ldr	r0, [pc, #364]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001392:	f000 fac5 	bl	8001920 <nrf_radio_cmd_write>

	//3.2 Configure the Data Rate and PA Level
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_SETUP;
 8001396:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001398:	2226      	movs	r2, #38	; 0x26
 800139a:	701a      	strb	r2, [r3, #0]

	cmd_buffer[1] &= 0x00;
 800139c:	4b58      	ldr	r3, [pc, #352]	; (8001500 <configure_nrf_radio+0x1d4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_pa_level << NRF_RADIO_RF_PWR_POS);
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013b8:	705a      	strb	r2, [r3, #1]

	if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_250K)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10b      	bne.n	80013da <configure_nrf_radio+0xae>
	{
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_LOW_POS);
 80013c2:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013ce:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013d2:	785a      	ldrb	r2, [r3, #1]
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013d6:	705a      	strb	r2, [r3, #1]
 80013d8:	e01b      	b.n	8001412 <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_1M)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <configure_nrf_radio+0xc8>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013e4:	785a      	ldrb	r2, [r3, #1]
 80013e6:	4b46      	ldr	r3, [pc, #280]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013e8:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013ec:	785a      	ldrb	r2, [r3, #1]
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013f0:	705a      	strb	r2, [r3, #1]
 80013f2:	e00e      	b.n	8001412 <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_2M)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	789b      	ldrb	r3, [r3, #2]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d10a      	bne.n	8001412 <configure_nrf_radio+0xe6>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <configure_nrf_radio+0x1d4>)
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001402:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_HIGH_POS);
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001410:	705a      	strb	r2, [r3, #1]
	}

	cmd_packet_length = 2;
 8001412:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <configure_nrf_radio+0x1d8>)
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <configure_nrf_radio+0x1d8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4838      	ldr	r0, [pc, #224]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001420:	f000 fa7e 	bl	8001920 <nrf_radio_cmd_write>

	//4. Configure Data Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_RXADDR;
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001426:	2222      	movs	r2, #34	; 0x22
 8001428:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_data_pipes;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	791a      	ldrb	r2, [r3, #4]
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001430:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <configure_nrf_radio+0x1d8>)
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <configure_nrf_radio+0x1d8>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4830      	ldr	r0, [pc, #192]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001440:	f000 fa6e 	bl	8001920 <nrf_radio_cmd_write>

	//5. Configure Auto-Acknowledgements
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_AA;
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001446:	2221      	movs	r2, #33	; 0x21
 8001448:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_auto_acknowledgements;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	795a      	ldrb	r2, [r3, #5]
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001450:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <configure_nrf_radio+0x1d8>)
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <configure_nrf_radio+0x1d8>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	4828      	ldr	r0, [pc, #160]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001460:	f000 fa5e 	bl	8001920 <nrf_radio_cmd_write>

	//6. Configure Address Width
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_AW;
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001466:	2223      	movs	r2, #35	; 0x23
 8001468:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_address_width;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	799a      	ldrb	r2, [r3, #6]
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001470:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <configure_nrf_radio+0x1d8>)
 8001474:	2202      	movs	r2, #2
 8001476:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <configure_nrf_radio+0x1d8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001480:	f000 fa4e 	bl	8001920 <nrf_radio_cmd_write>

	//7. Configure Retransmission Parameters
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_RETR;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = (radio_config->radio_auto_retransmit_count | radio_config->radio_auto_retransmit_delay);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	79da      	ldrb	r2, [r3, #7]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7a1b      	ldrb	r3, [r3, #8]
 8001492:	4313      	orrs	r3, r2
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <configure_nrf_radio+0x1d4>)
 8001498:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <configure_nrf_radio+0x1d8>)
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <configure_nrf_radio+0x1d8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4816      	ldr	r0, [pc, #88]	; (8001500 <configure_nrf_radio+0x1d4>)
 80014a8:	f000 fa3a 	bl	8001920 <nrf_radio_cmd_write>

	//8. Configure Own Address (RX_ADDR_P0)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RX_ADDR_P0;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <configure_nrf_radio+0x1d4>)
 80014ae:	222a      	movs	r2, #42	; 0x2a
 80014b0:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e009      	b.n	80014cc <configure_nrf_radio+0x1a0>
	{
		cmd_buffer[i] = radio_config->radio_addr_p0[i];
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	440a      	add	r2, r1
 80014c0:	7a51      	ldrb	r1, [r2, #9]
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <configure_nrf_radio+0x1d4>)
 80014c4:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	799b      	ldrb	r3, [r3, #6]
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d9f0      	bls.n	80014b8 <configure_nrf_radio+0x18c>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	799b      	ldrb	r3, [r3, #6]
 80014da:	3301      	adds	r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <configure_nrf_radio+0x1d8>)
 80014e0:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <configure_nrf_radio+0x1d8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <configure_nrf_radio+0x1d4>)
 80014ea:	f000 fa19 	bl	8001920 <nrf_radio_cmd_write>

	//9. Configure Peer Address (TX_ADDR)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_TX_ADDR;
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <configure_nrf_radio+0x1d4>)
 80014f0:	2230      	movs	r2, #48	; 0x30
 80014f2:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e011      	b.n	800151e <configure_nrf_radio+0x1f2>
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000
 8001500:	200000ec 	.word	0x200000ec
 8001504:	2000010f 	.word	0x2000010f
	{
		cmd_buffer[i] = radio_config->radio_addr_peer[i];
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	440a      	add	r2, r1
 8001510:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8001514:	4a43      	ldr	r2, [pc, #268]	; (8001624 <configure_nrf_radio+0x2f8>)
 8001516:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	799b      	ldrb	r3, [r3, #6]
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	429a      	cmp	r2, r3
 8001526:	d9ef      	bls.n	8001508 <configure_nrf_radio+0x1dc>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <configure_nrf_radio+0x2fc>)
 8001532:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <configure_nrf_radio+0x2fc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	483a      	ldr	r0, [pc, #232]	; (8001624 <configure_nrf_radio+0x2f8>)
 800153c:	f000 f9f0 	bl	8001920 <nrf_radio_cmd_write>

	//10. Configure Dynamic Pay-load Length Feature for Individual Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_DYNPD;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <configure_nrf_radio+0x2f8>)
 8001542:	223c      	movs	r2, #60	; 0x3c
 8001544:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_dynamic_payload_enable_pipes;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <configure_nrf_radio+0x2f8>)
 800154e:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <configure_nrf_radio+0x2fc>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <configure_nrf_radio+0x2fc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4831      	ldr	r0, [pc, #196]	; (8001624 <configure_nrf_radio+0x2f8>)
 800155e:	f000 f9df 	bl	8001920 <nrf_radio_cmd_write>

	//11. Configure Feature Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_FEATURE;
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <configure_nrf_radio+0x2f8>)
 8001564:	223d      	movs	r2, #61	; 0x3d
 8001566:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <configure_nrf_radio+0x2f8>)
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_payload_length_feature << NRF_RADIO_DPL_FEATURE_BITPOS);
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <configure_nrf_radio+0x2f8>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b25b      	sxtb	r3, r3
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <configure_nrf_radio+0x2f8>)
 8001586:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_ack_payload_feature << NRF_RADIO_ACK_PAYLOAD_FEATURE_BITPOS);
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <configure_nrf_radio+0x2f8>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	b25a      	sxtb	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015a0:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_ack_feature << NRF_RADIO_DYNAMIC_ACK_FEATURE_BITPOS);
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015a4:	785a      	ldrb	r2, [r3, #1]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015b2:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <configure_nrf_radio+0x2fc>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <configure_nrf_radio+0x2fc>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015c2:	f000 f9ad 	bl	8001920 <nrf_radio_cmd_write>

	//12. Configure CONFIG Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_CONFIG;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015c8:	2220      	movs	r2, #32
 80015ca:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	705a      	strb	r2, [r3, #1]
	if(radio_config->radio_mode == NRF_RADIO_MODE_TX)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <configure_nrf_radio+0x2b6>
	{
		cmd_buffer[1] = 0x0A;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015dc:	220a      	movs	r2, #10
 80015de:	705a      	strb	r2, [r3, #1]
 80015e0:	e006      	b.n	80015f0 <configure_nrf_radio+0x2c4>
	}
	else if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <configure_nrf_radio+0x2c4>
	{
		cmd_buffer[1] = 0x0B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015ec:	220b      	movs	r2, #11
 80015ee:	705a      	strb	r2, [r3, #1]
	}
	cmd_packet_length = 2;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <configure_nrf_radio+0x2fc>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <configure_nrf_radio+0x2fc>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <configure_nrf_radio+0x2f8>)
 80015fe:	f000 f98f 	bl	8001920 <nrf_radio_cmd_write>

	if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <configure_nrf_radio+0x2f0>
	{
		delay_us(50);
 800160a:	2032      	movs	r0, #50	; 0x32
 800160c:	f7fe fe48 	bl	80002a0 <delay_us>
		GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <configure_nrf_radio+0x300>)
 8001616:	f7ff f8da 	bl	80007ce <GPIOWritePin>
	}

	return;
 800161a:	bf00      	nop
 800161c:	bf00      	nop
}
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200000ec 	.word	0x200000ec
 8001628:	2000010f 	.word	0x2000010f
 800162c:	40020000 	.word	0x40020000

08001630 <nrf_radio_receive_packet_callback>:

	return nrf_packet_tx_state;
}

void nrf_radio_receive_packet_callback(uint8_t *buffer, uint8_t length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	//Print message
	printf("Packet Received from Peer Radio\r\n");
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <nrf_radio_receive_packet_callback+0xa0>)
 800163e:	f000 fc11 	bl	8001e64 <puts>

	//Print packet length
	//The actual length of the message is one less than the value of length
	printf("Packet Length: %d\r\n",length);
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	4619      	mov	r1, r3
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <nrf_radio_receive_packet_callback+0xa4>)
 8001648:	f000 fb72 	bl	8001d30 <iprintf>

	//Print packet contents
	//The actual Rx packet contents are stored from buffer[1] onwards as buffer[0] contains the value of STATUS Register
	for(i=1;i<=length;i++)
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e009      	b.n	8001666 <nrf_radio_receive_packet_callback+0x36>
	{
		printf("%c",buffer[i]);
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fb80 	bl	8001d60 <putchar>
	for(i=1;i<=length;i++)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3301      	adds	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	429a      	cmp	r2, r3
 800166c:	d9f1      	bls.n	8001652 <nrf_radio_receive_packet_callback+0x22>
	}

	if(buffer[1] == 'X' && buffer[2] == 'X' && buffer[3] == 'X' && buffer[4] == 'X')
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b58      	cmp	r3, #88	; 0x58
 8001676:	d110      	bne.n	800169a <nrf_radio_receive_packet_callback+0x6a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3302      	adds	r3, #2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b58      	cmp	r3, #88	; 0x58
 8001680:	d10b      	bne.n	800169a <nrf_radio_receive_packet_callback+0x6a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3303      	adds	r3, #3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b58      	cmp	r3, #88	; 0x58
 800168a:	d106      	bne.n	800169a <nrf_radio_receive_packet_callback+0x6a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3304      	adds	r3, #4
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b58      	cmp	r3, #88	; 0x58
 8001694:	d101      	bne.n	800169a <nrf_radio_receive_packet_callback+0x6a>
	{
		gpio_led_turn_on();
 8001696:	f000 fa37 	bl	8001b08 <gpio_led_turn_on>
	}

	if(buffer[1] == 'Y' && buffer[2] == 'Y' && buffer[3] == 'Y' && buffer[4] == 'Y')
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b59      	cmp	r3, #89	; 0x59
 80016a2:	d111      	bne.n	80016c8 <nrf_radio_receive_packet_callback+0x98>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3302      	adds	r3, #2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b59      	cmp	r3, #89	; 0x59
 80016ac:	d10c      	bne.n	80016c8 <nrf_radio_receive_packet_callback+0x98>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3303      	adds	r3, #3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b59      	cmp	r3, #89	; 0x59
 80016b6:	d107      	bne.n	80016c8 <nrf_radio_receive_packet_callback+0x98>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b59      	cmp	r3, #89	; 0x59
 80016c0:	d102      	bne.n	80016c8 <nrf_radio_receive_packet_callback+0x98>
	{
		gpio_led_turn_off();
 80016c2:	f000 fa2d 	bl	8001b20 <gpio_led_turn_off>
	}

	return;
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
}
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08002e00 	.word	0x08002e00
 80016d4:	08002e24 	.word	0x08002e24

080016d8 <nrf_radio_interrupt_callback>:

void nrf_radio_interrupt_callback(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	uint8_t interrupt_source, status;

	//1. Get the STATUS Register
	status = nrf_radio_get_status_register();
 80016de:	f000 f849 	bl	8001774 <nrf_radio_get_status_register>
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]

	//2. Identify interrupt source
	interrupt_source = nrf_radio_get_interrupt_source();
 80016e6:	f000 f871 	bl	80017cc <nrf_radio_get_interrupt_source>
 80016ea:	4603      	mov	r3, r0
 80016ec:	71bb      	strb	r3, [r7, #6]

	//3. Handle the interrupt source
	if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10c      	bne.n	800170e <nrf_radio_interrupt_callback+0x36>
	{
		nrf_radio_retreive_packet_from_fifo();
 80016f4:	f000 f890 	bl	8001818 <nrf_radio_retreive_packet_from_fifo>
		nrf_radio_receive_packet_callback((uint8_t *)rx_buffer,rx_packet_length);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <nrf_radio_interrupt_callback+0x88>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <nrf_radio_interrupt_callback+0x8c>)
 8001700:	f7ff ff96 	bl	8001630 <nrf_radio_receive_packet_callback>
		status |= NRF_RADIO_INT_SRC_RX_DR_BITPOS;
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	e014      	b.n	8001738 <nrf_radio_interrupt_callback+0x60>
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_TX_DS)
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <nrf_radio_interrupt_callback+0x4c>
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_COMPLETE;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <nrf_radio_interrupt_callback+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
		status |= NRF_RADIO_INT_SRC_TX_DS_BITPOS;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	e009      	b.n	8001738 <nrf_radio_interrupt_callback+0x60>
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_MAX_RT)
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d106      	bne.n	8001738 <nrf_radio_interrupt_callback+0x60>
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_FAIL;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <nrf_radio_interrupt_callback+0x90>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
		status |= NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	71fb      	strb	r3, [r7, #7]
	}

	//4. Clear the interrupt by writing to STATUS Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <nrf_radio_interrupt_callback+0x94>)
 800173a:	2227      	movs	r2, #39	; 0x27
 800173c:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = status;
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <nrf_radio_interrupt_callback+0x94>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	7053      	strb	r3, [r2, #1]
	cmd_packet_length = 2;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <nrf_radio_interrupt_callback+0x98>)
 8001746:	2202      	movs	r2, #2
 8001748:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <nrf_radio_interrupt_callback+0x98>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <nrf_radio_interrupt_callback+0x94>)
 8001752:	f000 f8e5 	bl	8001920 <nrf_radio_cmd_write>

	return;
 8001756:	bf00      	nop
}
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000010e 	.word	0x2000010e
 8001764:	200000cc 	.word	0x200000cc
 8001768:	20000110 	.word	0x20000110
 800176c:	200000ec 	.word	0x200000ec
 8001770:	2000010f 	.word	0x2000010f

08001774 <nrf_radio_get_status_register>:

uint8_t nrf_radio_get_status_register(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	uint8_t status;

	//1. Read the STATUS register (using NOP command)
	cmd_buffer[0] = NRF_RADIO_CMD_NOP;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <nrf_radio_get_status_register+0x44>)
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	701a      	strb	r2, [r3, #0]
	cmd_packet_length = 1;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <nrf_radio_get_status_register+0x48>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 8001786:	2200      	movs	r2, #0
 8001788:	2104      	movs	r1, #4
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <nrf_radio_get_status_register+0x4c>)
 800178c:	f7ff f81f 	bl	80007ce <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <nrf_radio_get_status_register+0x48>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <nrf_radio_get_status_register+0x50>)
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <nrf_radio_get_status_register+0x44>)
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <nrf_radio_get_status_register+0x54>)
 800179a:	f7ff f9ac 	bl	8000af6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 800179e:	2201      	movs	r2, #1
 80017a0:	2104      	movs	r1, #4
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <nrf_radio_get_status_register+0x4c>)
 80017a4:	f7ff f813 	bl	80007ce <GPIOWritePin>

	status = (uint8_t) rx_buffer[0];
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <nrf_radio_get_status_register+0x50>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	71fb      	strb	r3, [r7, #7]

	return status;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000ec 	.word	0x200000ec
 80017bc:	2000010f 	.word	0x2000010f
 80017c0:	40020000 	.word	0x40020000
 80017c4:	200000cc 	.word	0x200000cc
 80017c8:	40003800 	.word	0x40003800

080017cc <nrf_radio_get_interrupt_source>:

uint8_t nrf_radio_get_interrupt_source(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;

	//1. Read the STATUS register
	status = nrf_radio_get_status_register();
 80017d2:	f7ff ffcf 	bl	8001774 <nrf_radio_get_status_register>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71bb      	strb	r3, [r7, #6]

	if(status & NRF_RADIO_INT_SRC_TX_DS_BITPOS)
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <nrf_radio_get_interrupt_source+0x1e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_TX_DS;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e011      	b.n	800180e <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_RX_DR_BITPOS)
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <nrf_radio_get_interrupt_source+0x2e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_RX_DR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	e009      	b.n	800180e <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_MAX_RT_BITPOS)
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <nrf_radio_get_interrupt_source+0x3e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_MAX_RT;
 8001804:	2302      	movs	r3, #2
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	e001      	b.n	800180e <nrf_radio_get_interrupt_source+0x42>
	}
	else
	{
		interrupt_source = NRF_RADIO_INT_SRC_NONE;
 800180a:	2303      	movs	r3, #3
 800180c:	71fb      	strb	r3, [r7, #7]
	}

	return interrupt_source;
 800180e:	79fb      	ldrb	r3, [r7, #7]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <nrf_radio_retreive_packet_from_fifo>:

void nrf_radio_retreive_packet_from_fifo(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	uint8_t packet_length, i, status;

	//1. Get the STATUS Register
	status = nrf_radio_get_status_register();
 800181e:	f7ff ffa9 	bl	8001774 <nrf_radio_get_status_register>
 8001822:	4603      	mov	r3, r0
 8001824:	71bb      	strb	r3, [r7, #6]
	printf("Status: %d\r\n",status);
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	4619      	mov	r1, r3
 800182a:	481d      	ldr	r0, [pc, #116]	; (80018a0 <nrf_radio_retreive_packet_from_fifo+0x88>)
 800182c:	f000 fa80 	bl	8001d30 <iprintf>

	//1. Get the length of the RX Pay-load (from Data Pipe P0)
	packet_length = nrf_radio_get_rx_packet_length();
 8001830:	f000 f846 	bl	80018c0 <nrf_radio_get_rx_packet_length>
 8001834:	4603      	mov	r3, r0
 8001836:	717b      	strb	r3, [r7, #5]

	printf("Packet Length: %d\r\n",packet_length);
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	4619      	mov	r1, r3
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <nrf_radio_retreive_packet_from_fifo+0x8c>)
 800183e:	f000 fa77 	bl	8001d30 <iprintf>

	//2. Read the RX Pay-load
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PAYLOAD;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <nrf_radio_retreive_packet_from_fifo+0x90>)
 8001844:	2261      	movs	r2, #97	; 0x61
 8001846:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=packet_length;i++)
 8001848:	2301      	movs	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	e006      	b.n	800185c <nrf_radio_retreive_packet_from_fifo+0x44>
		cmd_buffer[i] = 0x00;
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <nrf_radio_retreive_packet_from_fifo+0x90>)
 8001852:	2100      	movs	r1, #0
 8001854:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=packet_length;i++)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	3301      	adds	r3, #1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	429a      	cmp	r2, r3
 8001862:	d9f4      	bls.n	800184e <nrf_radio_retreive_packet_from_fifo+0x36>
	cmd_packet_length = packet_length + 1;
 8001864:	797b      	ldrb	r3, [r7, #5]
 8001866:	3301      	adds	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <nrf_radio_retreive_packet_from_fifo+0x94>)
 800186c:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800186e:	2200      	movs	r2, #0
 8001870:	2104      	movs	r1, #4
 8001872:	480f      	ldr	r0, [pc, #60]	; (80018b0 <nrf_radio_retreive_packet_from_fifo+0x98>)
 8001874:	f7fe ffab 	bl	80007ce <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <nrf_radio_retreive_packet_from_fifo+0x94>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <nrf_radio_retreive_packet_from_fifo+0x9c>)
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <nrf_radio_retreive_packet_from_fifo+0x90>)
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <nrf_radio_retreive_packet_from_fifo+0xa0>)
 8001882:	f7ff f938 	bl	8000af6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001886:	2201      	movs	r2, #1
 8001888:	2104      	movs	r1, #4
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <nrf_radio_retreive_packet_from_fifo+0x98>)
 800188c:	f7fe ff9f 	bl	80007ce <GPIOWritePin>

	//3. Update the global variable rx_packet_length
	rx_packet_length = packet_length;
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <nrf_radio_retreive_packet_from_fifo+0xa4>)
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	7013      	strb	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	08002e38 	.word	0x08002e38
 80018a4:	08002e24 	.word	0x08002e24
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	2000010f 	.word	0x2000010f
 80018b0:	40020000 	.word	0x40020000
 80018b4:	200000cc 	.word	0x200000cc
 80018b8:	40003800 	.word	0x40003800
 80018bc:	2000010e 	.word	0x2000010e

080018c0 <nrf_radio_get_rx_packet_length>:

uint8_t nrf_radio_get_rx_packet_length(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

	uint8_t length;
	//1. Read the RX_PW_P0 Register
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PL_WID;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <nrf_radio_get_rx_packet_length+0x4c>)
 80018c8:	2260      	movs	r2, #96	; 0x60
 80018ca:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = 0x00;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <nrf_radio_get_rx_packet_length+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <nrf_radio_get_rx_packet_length+0x50>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 80018d8:	2200      	movs	r2, #0
 80018da:	2104      	movs	r1, #4
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <nrf_radio_get_rx_packet_length+0x54>)
 80018de:	f7fe ff76 	bl	80007ce <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <nrf_radio_get_rx_packet_length+0x50>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <nrf_radio_get_rx_packet_length+0x58>)
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <nrf_radio_get_rx_packet_length+0x4c>)
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <nrf_radio_get_rx_packet_length+0x5c>)
 80018ec:	f7ff f903 	bl	8000af6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2104      	movs	r1, #4
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <nrf_radio_get_rx_packet_length+0x54>)
 80018f6:	f7fe ff6a 	bl	80007ce <GPIOWritePin>

	length = (uint8_t) rx_buffer[1];
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <nrf_radio_get_rx_packet_length+0x58>)
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	71fb      	strb	r3, [r7, #7]

	return length;
 8001900:	79fb      	ldrb	r3, [r7, #7]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000ec 	.word	0x200000ec
 8001910:	2000010f 	.word	0x2000010f
 8001914:	40020000 	.word	0x40020000
 8001918:	200000cc 	.word	0x200000cc
 800191c:	40003800 	.word	0x40003800

08001920 <nrf_radio_cmd_write>:

	return;
}

void nrf_radio_cmd_write(uint8_t *buffer,uint8_t length)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800192c:	2200      	movs	r2, #0
 800192e:	2104      	movs	r1, #4
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <nrf_radio_cmd_write+0x34>)
 8001932:	f7fe ff4c 	bl	80007ce <GPIOWritePin>
	SPISendData(SPI_DEV,buffer,length);
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	461a      	mov	r2, r3
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <nrf_radio_cmd_write+0x38>)
 800193e:	f7ff f8ad 	bl	8000a9c <SPISendData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001942:	2201      	movs	r2, #1
 8001944:	2104      	movs	r1, #4
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <nrf_radio_cmd_write+0x34>)
 8001948:	f7fe ff41 	bl	80007ce <GPIOWritePin>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020000 	.word	0x40020000
 8001958:	40003800 	.word	0x40003800

0800195c <configure_uart>:

void configure_uart(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <configure_uart+0xb0>)
 8001962:	f7ff f911 	bl	8000b88 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 8001966:	2202      	movs	r2, #2
 8001968:	2105      	movs	r1, #5
 800196a:	4828      	ldr	r0, [pc, #160]	; (8001a0c <configure_uart+0xb0>)
 800196c:	f7fe ff0b 	bl	8000786 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8001970:	2202      	movs	r2, #2
 8001972:	2106      	movs	r1, #6
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <configure_uart+0xb0>)
 8001976:	f7fe ff06 	bl	8000786 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 800197a:	2207      	movs	r2, #7
 800197c:	2105      	movs	r1, #5
 800197e:	4823      	ldr	r0, [pc, #140]	; (8001a0c <configure_uart+0xb0>)
 8001980:	f7fe ff47 	bl	8000812 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8001984:	2207      	movs	r2, #7
 8001986:	2106      	movs	r1, #6
 8001988:	4820      	ldr	r0, [pc, #128]	; (8001a0c <configure_uart+0xb0>)
 800198a:	f7fe ff42 	bl	8000812 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800198e:	2200      	movs	r2, #0
 8001990:	2105      	movs	r1, #5
 8001992:	481e      	ldr	r0, [pc, #120]	; (8001a0c <configure_uart+0xb0>)
 8001994:	f7fe ff76 	bl	8000884 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8001998:	2200      	movs	r2, #0
 800199a:	2106      	movs	r1, #6
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <configure_uart+0xb0>)
 800199e:	f7fe ff71 	bl	8000884 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80019a2:	2202      	movs	r2, #2
 80019a4:	2105      	movs	r1, #5
 80019a6:	4819      	ldr	r0, [pc, #100]	; (8001a0c <configure_uart+0xb0>)
 80019a8:	f7fe ffb2 	bl	8000910 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80019ac:	2202      	movs	r2, #2
 80019ae:	2106      	movs	r1, #6
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <configure_uart+0xb0>)
 80019b2:	f7fe ffad 	bl	8000910 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2105      	movs	r1, #5
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <configure_uart+0xb0>)
 80019bc:	f7fe ff84 	bl	80008c8 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2106      	movs	r1, #6
 80019c4:	4811      	ldr	r0, [pc, #68]	; (8001a0c <configure_uart+0xb0>)
 80019c6:	f7fe ff7f 	bl	80008c8 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <configure_uart+0xb4>)
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <configure_uart+0xb8>)
 80019ce:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <configure_uart+0xb4>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <configure_uart+0xb4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <configure_uart+0xb4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <configure_uart+0xb4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <configure_uart+0xb4>)
 80019ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019ee:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <configure_uart+0xb4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <configure_uart+0xb8>)
 80019f8:	f7ff f8c6 	bl	8000b88 <EnablePeriClk>
	USART_Init(&Test_USART);
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <configure_uart+0xb4>)
 80019fe:	f7ff fa87 	bl	8000f10 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <configure_uart+0xb4>)
 8001a04:	f7ff fb84 	bl	8001110 <USART_PeripheralEnable>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	20000114 	.word	0x20000114
 8001a14:	40004400 	.word	0x40004400

08001a18 <UART_SendChar>:

void UART_SendChar(uint8_t ch)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <UART_SendChar+0x20>)
 8001a2a:	f7ff fb97 	bl	800115c <USART_SendData>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000114 	.word	0x20000114

08001a3c <EXTI0_IRQHandler>:
{
	configure_external_interrupt();
}

void EXTI0_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <EXTI0_IRQHandler+0x24>)
 8001a44:	607b      	str	r3, [r7, #4]

	//1. Handling the interrupt
	nrf_radio_interrupt_callback();
 8001a46:	f7ff fe47 	bl	80016d8 <nrf_radio_interrupt_callback>

	//2. Clearing the EXTI_PR Register
	*pEXTI_PR |= (1 << INTERRUPT_PIN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]

	return;
 8001a56:	bf00      	nop
}
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40013c14 	.word	0x40013c14

08001a64 <nrf_radio_rx_polling>:

void nrf_radio_rx_polling(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

	uint8_t status, interrupt_source;

	while(1)
	{
		status = nrf_radio_get_status_register();
 8001a6a:	f7ff fe83 	bl	8001774 <nrf_radio_get_status_register>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
		interrupt_source = nrf_radio_get_interrupt_source();
 8001a72:	f7ff feab 	bl	80017cc <nrf_radio_get_interrupt_source>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71bb      	strb	r3, [r7, #6]

		printf("Callback Status: %d\r\n", status);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <nrf_radio_rx_polling+0x6c>)
 8001a80:	f000 f956 	bl	8001d30 <iprintf>
		printf("Callback Interrupt Source: %d\r\n", interrupt_source);
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <nrf_radio_rx_polling+0x70>)
 8001a8a:	f000 f951 	bl	8001d30 <iprintf>

		//3. Handle the interrupt source
		if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
 8001a8e:	79bb      	ldrb	r3, [r7, #6]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d118      	bne.n	8001ac6 <nrf_radio_rx_polling+0x62>
		{
			nrf_radio_retreive_packet_from_fifo();
 8001a94:	f7ff fec0 	bl	8001818 <nrf_radio_retreive_packet_from_fifo>
			nrf_radio_receive_packet_callback((uint8_t *)rx_buffer,rx_packet_length);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <nrf_radio_rx_polling+0x74>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480f      	ldr	r0, [pc, #60]	; (8001adc <nrf_radio_rx_polling+0x78>)
 8001aa0:	f7ff fdc6 	bl	8001630 <nrf_radio_receive_packet_callback>
			status = NRF_RADIO_INT_SRC_RX_DR_BITPOS;
 8001aa4:	2340      	movs	r3, #64	; 0x40
 8001aa6:	71fb      	strb	r3, [r7, #7]

			//4. Clear the interrupt by writing to STATUS Register
			cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <nrf_radio_rx_polling+0x7c>)
 8001aaa:	2227      	movs	r2, #39	; 0x27
 8001aac:	701a      	strb	r2, [r3, #0]
			cmd_buffer[1] = status;
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <nrf_radio_rx_polling+0x7c>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	7053      	strb	r3, [r2, #1]
			cmd_packet_length = 2;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <nrf_radio_rx_polling+0x80>)
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
			nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <nrf_radio_rx_polling+0x80>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <nrf_radio_rx_polling+0x7c>)
 8001ac2:	f7ff ff2d 	bl	8001920 <nrf_radio_cmd_write>
		}

		delay_us(1000000);
 8001ac6:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <nrf_radio_rx_polling+0x84>)
 8001ac8:	f7fe fbea 	bl	80002a0 <delay_us>
		status = nrf_radio_get_status_register();
 8001acc:	e7cd      	b.n	8001a6a <nrf_radio_rx_polling+0x6>
 8001ace:	bf00      	nop
 8001ad0:	08002e48 	.word	0x08002e48
 8001ad4:	08002e60 	.word	0x08002e60
 8001ad8:	2000010e 	.word	0x2000010e
 8001adc:	200000cc 	.word	0x200000cc
 8001ae0:	200000ec 	.word	0x200000ec
 8001ae4:	2000010f 	.word	0x2000010f
 8001ae8:	000f4240 	.word	0x000f4240

08001aec <configure_gpio_led>:
	}

}

void configure_gpio_led(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	EnablePeriClk(GPIO_LED_PORT);
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <configure_gpio_led+0x18>)
 8001af2:	f7ff f849 	bl	8000b88 <EnablePeriClk>
	GPIOSetMode(GPIO_LED_PORT,GPIO_LED_PIN,GPIO_MODE_OUTPUT);
 8001af6:	2201      	movs	r2, #1
 8001af8:	210c      	movs	r1, #12
 8001afa:	4802      	ldr	r0, [pc, #8]	; (8001b04 <configure_gpio_led+0x18>)
 8001afc:	f7fe fe43 	bl	8000786 <GPIOSetMode>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <gpio_led_turn_on>:

void gpio_led_turn_on(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	GPIOWritePin(GPIO_LED_PORT,GPIO_LED_PIN,GPIO_HIGH);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	210c      	movs	r1, #12
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <gpio_led_turn_on+0x14>)
 8001b12:	f7fe fe5c 	bl	80007ce <GPIOWritePin>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <gpio_led_turn_off>:

void gpio_led_turn_off(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	GPIOWritePin(GPIO_LED_PORT,GPIO_LED_PIN,GPIO_LOW);
 8001b24:	2200      	movs	r2, #0
 8001b26:	210c      	movs	r1, #12
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <gpio_led_turn_off+0x14>)
 8001b2a:	f7fe fe50 	bl	80007ce <GPIOWritePin>
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e00a      	b.n	8001b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4a:	f3af 8000 	nop.w
 8001b4e:	4601      	mov	r1, r0
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf0      	blt.n	8001b4a <_read+0x12>
  }

  return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e009      	b.n	8001b98 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	  UART_SendChar(*ptr++);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	60ba      	str	r2, [r7, #8]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff43 	bl	8001a18 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf1      	blt.n	8001b84 <_write+0x12>
  }
  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_close>:

int _close(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <_isatty>:

int _isatty(int file)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f000 f846 	bl	8001ccc <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20020000 	.word	0x20020000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000130 	.word	0x20000130
 8001c74:	20000148 	.word	0x20000148

08001c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	; (8001cc4 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ca6:	f000 f817 	bl	8001cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff fa93 	bl	80011d4 <main>

08001cae <LoopForever>:

LoopForever:
  b LoopForever
 8001cae:	e7fe      	b.n	8001cae <LoopForever>
  ldr   r0, =_estack
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001cbc:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 8001cc0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001cc4:	20000144 	.word	0x20000144

08001cc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <__errno>:
 8001ccc:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <__errno+0x8>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000020 	.word	0x20000020

08001cd8 <__libc_init_array>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4d0d      	ldr	r5, [pc, #52]	; (8001d10 <__libc_init_array+0x38>)
 8001cdc:	4c0d      	ldr	r4, [pc, #52]	; (8001d14 <__libc_init_array+0x3c>)
 8001cde:	1b64      	subs	r4, r4, r5
 8001ce0:	10a4      	asrs	r4, r4, #2
 8001ce2:	2600      	movs	r6, #0
 8001ce4:	42a6      	cmp	r6, r4
 8001ce6:	d109      	bne.n	8001cfc <__libc_init_array+0x24>
 8001ce8:	4d0b      	ldr	r5, [pc, #44]	; (8001d18 <__libc_init_array+0x40>)
 8001cea:	4c0c      	ldr	r4, [pc, #48]	; (8001d1c <__libc_init_array+0x44>)
 8001cec:	f001 f878 	bl	8002de0 <_init>
 8001cf0:	1b64      	subs	r4, r4, r5
 8001cf2:	10a4      	asrs	r4, r4, #2
 8001cf4:	2600      	movs	r6, #0
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	d105      	bne.n	8001d06 <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d00:	4798      	blx	r3
 8001d02:	3601      	adds	r6, #1
 8001d04:	e7ee      	b.n	8001ce4 <__libc_init_array+0xc>
 8001d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0a:	4798      	blx	r3
 8001d0c:	3601      	adds	r6, #1
 8001d0e:	e7f2      	b.n	8001cf6 <__libc_init_array+0x1e>
 8001d10:	08002f18 	.word	0x08002f18
 8001d14:	08002f18 	.word	0x08002f18
 8001d18:	08002f18 	.word	0x08002f18
 8001d1c:	08002f1c 	.word	0x08002f1c

08001d20 <memset>:
 8001d20:	4402      	add	r2, r0
 8001d22:	4603      	mov	r3, r0
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d100      	bne.n	8001d2a <memset+0xa>
 8001d28:	4770      	bx	lr
 8001d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d2e:	e7f9      	b.n	8001d24 <memset+0x4>

08001d30 <iprintf>:
 8001d30:	b40f      	push	{r0, r1, r2, r3}
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <iprintf+0x2c>)
 8001d34:	b513      	push	{r0, r1, r4, lr}
 8001d36:	681c      	ldr	r4, [r3, #0]
 8001d38:	b124      	cbz	r4, 8001d44 <iprintf+0x14>
 8001d3a:	69a3      	ldr	r3, [r4, #24]
 8001d3c:	b913      	cbnz	r3, 8001d44 <iprintf+0x14>
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f000 fa6e 	bl	8002220 <__sinit>
 8001d44:	ab05      	add	r3, sp, #20
 8001d46:	9a04      	ldr	r2, [sp, #16]
 8001d48:	68a1      	ldr	r1, [r4, #8]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f000 fc73 	bl	8002638 <_vfiprintf_r>
 8001d52:	b002      	add	sp, #8
 8001d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d58:	b004      	add	sp, #16
 8001d5a:	4770      	bx	lr
 8001d5c:	20000020 	.word	0x20000020

08001d60 <putchar>:
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <putchar+0x24>)
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	4605      	mov	r5, r0
 8001d68:	b124      	cbz	r4, 8001d74 <putchar+0x14>
 8001d6a:	69a3      	ldr	r3, [r4, #24]
 8001d6c:	b913      	cbnz	r3, 8001d74 <putchar+0x14>
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f000 fa56 	bl	8002220 <__sinit>
 8001d74:	68a2      	ldr	r2, [r4, #8]
 8001d76:	4629      	mov	r1, r5
 8001d78:	4620      	mov	r0, r4
 8001d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d7e:	f000 bf1f 	b.w	8002bc0 <_putc_r>
 8001d82:	bf00      	nop
 8001d84:	20000020 	.word	0x20000020

08001d88 <_puts_r>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	460e      	mov	r6, r1
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	b118      	cbz	r0, 8001d98 <_puts_r+0x10>
 8001d90:	6983      	ldr	r3, [r0, #24]
 8001d92:	b90b      	cbnz	r3, 8001d98 <_puts_r+0x10>
 8001d94:	f000 fa44 	bl	8002220 <__sinit>
 8001d98:	69ab      	ldr	r3, [r5, #24]
 8001d9a:	68ac      	ldr	r4, [r5, #8]
 8001d9c:	b913      	cbnz	r3, 8001da4 <_puts_r+0x1c>
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f000 fa3e 	bl	8002220 <__sinit>
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <_puts_r+0xd0>)
 8001da6:	429c      	cmp	r4, r3
 8001da8:	d120      	bne.n	8001dec <_puts_r+0x64>
 8001daa:	686c      	ldr	r4, [r5, #4]
 8001dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dae:	07db      	lsls	r3, r3, #31
 8001db0:	d405      	bmi.n	8001dbe <_puts_r+0x36>
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	0598      	lsls	r0, r3, #22
 8001db6:	d402      	bmi.n	8001dbe <_puts_r+0x36>
 8001db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dba:	f000 facf 	bl	800235c <__retarget_lock_acquire_recursive>
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	0719      	lsls	r1, r3, #28
 8001dc2:	d51d      	bpl.n	8001e00 <_puts_r+0x78>
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	b1db      	cbz	r3, 8001e00 <_puts_r+0x78>
 8001dc8:	3e01      	subs	r6, #1
 8001dca:	68a3      	ldr	r3, [r4, #8]
 8001dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60a3      	str	r3, [r4, #8]
 8001dd4:	bb39      	cbnz	r1, 8001e26 <_puts_r+0x9e>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da38      	bge.n	8001e4c <_puts_r+0xc4>
 8001dda:	4622      	mov	r2, r4
 8001ddc:	210a      	movs	r1, #10
 8001dde:	4628      	mov	r0, r5
 8001de0:	f000 f848 	bl	8001e74 <__swbuf_r>
 8001de4:	3001      	adds	r0, #1
 8001de6:	d011      	beq.n	8001e0c <_puts_r+0x84>
 8001de8:	250a      	movs	r5, #10
 8001dea:	e011      	b.n	8001e10 <_puts_r+0x88>
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <_puts_r+0xd4>)
 8001dee:	429c      	cmp	r4, r3
 8001df0:	d101      	bne.n	8001df6 <_puts_r+0x6e>
 8001df2:	68ac      	ldr	r4, [r5, #8]
 8001df4:	e7da      	b.n	8001dac <_puts_r+0x24>
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <_puts_r+0xd8>)
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	bf08      	it	eq
 8001dfc:	68ec      	ldreq	r4, [r5, #12]
 8001dfe:	e7d5      	b.n	8001dac <_puts_r+0x24>
 8001e00:	4621      	mov	r1, r4
 8001e02:	4628      	mov	r0, r5
 8001e04:	f000 f888 	bl	8001f18 <__swsetup_r>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d0dd      	beq.n	8001dc8 <_puts_r+0x40>
 8001e0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e12:	07da      	lsls	r2, r3, #31
 8001e14:	d405      	bmi.n	8001e22 <_puts_r+0x9a>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	059b      	lsls	r3, r3, #22
 8001e1a:	d402      	bmi.n	8001e22 <_puts_r+0x9a>
 8001e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e1e:	f000 fa9e 	bl	800235e <__retarget_lock_release_recursive>
 8001e22:	4628      	mov	r0, r5
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da04      	bge.n	8001e34 <_puts_r+0xac>
 8001e2a:	69a2      	ldr	r2, [r4, #24]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dc06      	bgt.n	8001e3e <_puts_r+0xb6>
 8001e30:	290a      	cmp	r1, #10
 8001e32:	d004      	beq.n	8001e3e <_puts_r+0xb6>
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	6022      	str	r2, [r4, #0]
 8001e3a:	7019      	strb	r1, [r3, #0]
 8001e3c:	e7c5      	b.n	8001dca <_puts_r+0x42>
 8001e3e:	4622      	mov	r2, r4
 8001e40:	4628      	mov	r0, r5
 8001e42:	f000 f817 	bl	8001e74 <__swbuf_r>
 8001e46:	3001      	adds	r0, #1
 8001e48:	d1bf      	bne.n	8001dca <_puts_r+0x42>
 8001e4a:	e7df      	b.n	8001e0c <_puts_r+0x84>
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	250a      	movs	r5, #10
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	6022      	str	r2, [r4, #0]
 8001e54:	701d      	strb	r5, [r3, #0]
 8001e56:	e7db      	b.n	8001e10 <_puts_r+0x88>
 8001e58:	08002ea4 	.word	0x08002ea4
 8001e5c:	08002ec4 	.word	0x08002ec4
 8001e60:	08002e84 	.word	0x08002e84

08001e64 <puts>:
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <puts+0xc>)
 8001e66:	4601      	mov	r1, r0
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	f7ff bf8d 	b.w	8001d88 <_puts_r>
 8001e6e:	bf00      	nop
 8001e70:	20000020 	.word	0x20000020

08001e74 <__swbuf_r>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	460e      	mov	r6, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	b118      	cbz	r0, 8001e86 <__swbuf_r+0x12>
 8001e7e:	6983      	ldr	r3, [r0, #24]
 8001e80:	b90b      	cbnz	r3, 8001e86 <__swbuf_r+0x12>
 8001e82:	f000 f9cd 	bl	8002220 <__sinit>
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <__swbuf_r+0x98>)
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	d12b      	bne.n	8001ee4 <__swbuf_r+0x70>
 8001e8c:	686c      	ldr	r4, [r5, #4]
 8001e8e:	69a3      	ldr	r3, [r4, #24]
 8001e90:	60a3      	str	r3, [r4, #8]
 8001e92:	89a3      	ldrh	r3, [r4, #12]
 8001e94:	071a      	lsls	r2, r3, #28
 8001e96:	d52f      	bpl.n	8001ef8 <__swbuf_r+0x84>
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	b36b      	cbz	r3, 8001ef8 <__swbuf_r+0x84>
 8001e9c:	6923      	ldr	r3, [r4, #16]
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	1ac0      	subs	r0, r0, r3
 8001ea2:	6963      	ldr	r3, [r4, #20]
 8001ea4:	b2f6      	uxtb	r6, r6
 8001ea6:	4283      	cmp	r3, r0
 8001ea8:	4637      	mov	r7, r6
 8001eaa:	dc04      	bgt.n	8001eb6 <__swbuf_r+0x42>
 8001eac:	4621      	mov	r1, r4
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f000 f922 	bl	80020f8 <_fflush_r>
 8001eb4:	bb30      	cbnz	r0, 8001f04 <__swbuf_r+0x90>
 8001eb6:	68a3      	ldr	r3, [r4, #8]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60a3      	str	r3, [r4, #8]
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	6022      	str	r2, [r4, #0]
 8001ec2:	701e      	strb	r6, [r3, #0]
 8001ec4:	6963      	ldr	r3, [r4, #20]
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	4283      	cmp	r3, r0
 8001eca:	d004      	beq.n	8001ed6 <__swbuf_r+0x62>
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d506      	bpl.n	8001ee0 <__swbuf_r+0x6c>
 8001ed2:	2e0a      	cmp	r6, #10
 8001ed4:	d104      	bne.n	8001ee0 <__swbuf_r+0x6c>
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f000 f90d 	bl	80020f8 <_fflush_r>
 8001ede:	b988      	cbnz	r0, 8001f04 <__swbuf_r+0x90>
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <__swbuf_r+0x9c>)
 8001ee6:	429c      	cmp	r4, r3
 8001ee8:	d101      	bne.n	8001eee <__swbuf_r+0x7a>
 8001eea:	68ac      	ldr	r4, [r5, #8]
 8001eec:	e7cf      	b.n	8001e8e <__swbuf_r+0x1a>
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <__swbuf_r+0xa0>)
 8001ef0:	429c      	cmp	r4, r3
 8001ef2:	bf08      	it	eq
 8001ef4:	68ec      	ldreq	r4, [r5, #12]
 8001ef6:	e7ca      	b.n	8001e8e <__swbuf_r+0x1a>
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4628      	mov	r0, r5
 8001efc:	f000 f80c 	bl	8001f18 <__swsetup_r>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d0cb      	beq.n	8001e9c <__swbuf_r+0x28>
 8001f04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f08:	e7ea      	b.n	8001ee0 <__swbuf_r+0x6c>
 8001f0a:	bf00      	nop
 8001f0c:	08002ea4 	.word	0x08002ea4
 8001f10:	08002ec4 	.word	0x08002ec4
 8001f14:	08002e84 	.word	0x08002e84

08001f18 <__swsetup_r>:
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <__swsetup_r+0xcc>)
 8001f1a:	b570      	push	{r4, r5, r6, lr}
 8001f1c:	681d      	ldr	r5, [r3, #0]
 8001f1e:	4606      	mov	r6, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	b125      	cbz	r5, 8001f2e <__swsetup_r+0x16>
 8001f24:	69ab      	ldr	r3, [r5, #24]
 8001f26:	b913      	cbnz	r3, 8001f2e <__swsetup_r+0x16>
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f000 f979 	bl	8002220 <__sinit>
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <__swsetup_r+0xd0>)
 8001f30:	429c      	cmp	r4, r3
 8001f32:	d10f      	bne.n	8001f54 <__swsetup_r+0x3c>
 8001f34:	686c      	ldr	r4, [r5, #4]
 8001f36:	89a3      	ldrh	r3, [r4, #12]
 8001f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f3c:	0719      	lsls	r1, r3, #28
 8001f3e:	d42c      	bmi.n	8001f9a <__swsetup_r+0x82>
 8001f40:	06dd      	lsls	r5, r3, #27
 8001f42:	d411      	bmi.n	8001f68 <__swsetup_r+0x50>
 8001f44:	2309      	movs	r3, #9
 8001f46:	6033      	str	r3, [r6, #0]
 8001f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f4c:	81a3      	strh	r3, [r4, #12]
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f52:	e03e      	b.n	8001fd2 <__swsetup_r+0xba>
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <__swsetup_r+0xd4>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d101      	bne.n	8001f5e <__swsetup_r+0x46>
 8001f5a:	68ac      	ldr	r4, [r5, #8]
 8001f5c:	e7eb      	b.n	8001f36 <__swsetup_r+0x1e>
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <__swsetup_r+0xd8>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	bf08      	it	eq
 8001f64:	68ec      	ldreq	r4, [r5, #12]
 8001f66:	e7e6      	b.n	8001f36 <__swsetup_r+0x1e>
 8001f68:	0758      	lsls	r0, r3, #29
 8001f6a:	d512      	bpl.n	8001f92 <__swsetup_r+0x7a>
 8001f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f6e:	b141      	cbz	r1, 8001f82 <__swsetup_r+0x6a>
 8001f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f74:	4299      	cmp	r1, r3
 8001f76:	d002      	beq.n	8001f7e <__swsetup_r+0x66>
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f000 fa57 	bl	800242c <_free_r>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	6363      	str	r3, [r4, #52]	; 0x34
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f88:	81a3      	strh	r3, [r4, #12]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6063      	str	r3, [r4, #4]
 8001f8e:	6923      	ldr	r3, [r4, #16]
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	81a3      	strh	r3, [r4, #12]
 8001f9a:	6923      	ldr	r3, [r4, #16]
 8001f9c:	b94b      	cbnz	r3, 8001fb2 <__swsetup_r+0x9a>
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d003      	beq.n	8001fb2 <__swsetup_r+0x9a>
 8001faa:	4621      	mov	r1, r4
 8001fac:	4630      	mov	r0, r6
 8001fae:	f000 f9fd 	bl	80023ac <__smakebuf_r>
 8001fb2:	89a0      	ldrh	r0, [r4, #12]
 8001fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fb8:	f010 0301 	ands.w	r3, r0, #1
 8001fbc:	d00a      	beq.n	8001fd4 <__swsetup_r+0xbc>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60a3      	str	r3, [r4, #8]
 8001fc2:	6963      	ldr	r3, [r4, #20]
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	61a3      	str	r3, [r4, #24]
 8001fc8:	6923      	ldr	r3, [r4, #16]
 8001fca:	b943      	cbnz	r3, 8001fde <__swsetup_r+0xc6>
 8001fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fd0:	d1ba      	bne.n	8001f48 <__swsetup_r+0x30>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	0781      	lsls	r1, r0, #30
 8001fd6:	bf58      	it	pl
 8001fd8:	6963      	ldrpl	r3, [r4, #20]
 8001fda:	60a3      	str	r3, [r4, #8]
 8001fdc:	e7f4      	b.n	8001fc8 <__swsetup_r+0xb0>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e7f7      	b.n	8001fd2 <__swsetup_r+0xba>
 8001fe2:	bf00      	nop
 8001fe4:	20000020 	.word	0x20000020
 8001fe8:	08002ea4 	.word	0x08002ea4
 8001fec:	08002ec4 	.word	0x08002ec4
 8001ff0:	08002e84 	.word	0x08002e84

08001ff4 <__sflush_r>:
 8001ff4:	898a      	ldrh	r2, [r1, #12]
 8001ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	0710      	lsls	r0, r2, #28
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	d457      	bmi.n	80020b0 <__sflush_r+0xbc>
 8002000:	684b      	ldr	r3, [r1, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	dc04      	bgt.n	8002010 <__sflush_r+0x1c>
 8002006:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	dc01      	bgt.n	8002010 <__sflush_r+0x1c>
 800200c:	2000      	movs	r0, #0
 800200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002012:	2e00      	cmp	r6, #0
 8002014:	d0fa      	beq.n	800200c <__sflush_r+0x18>
 8002016:	2300      	movs	r3, #0
 8002018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800201c:	682f      	ldr	r7, [r5, #0]
 800201e:	602b      	str	r3, [r5, #0]
 8002020:	d032      	beq.n	8002088 <__sflush_r+0x94>
 8002022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	075a      	lsls	r2, r3, #29
 8002028:	d505      	bpl.n	8002036 <__sflush_r+0x42>
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	1ac0      	subs	r0, r0, r3
 800202e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002030:	b10b      	cbz	r3, 8002036 <__sflush_r+0x42>
 8002032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002034:	1ac0      	subs	r0, r0, r3
 8002036:	2300      	movs	r3, #0
 8002038:	4602      	mov	r2, r0
 800203a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800203c:	6a21      	ldr	r1, [r4, #32]
 800203e:	4628      	mov	r0, r5
 8002040:	47b0      	blx	r6
 8002042:	1c43      	adds	r3, r0, #1
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	d106      	bne.n	8002056 <__sflush_r+0x62>
 8002048:	6829      	ldr	r1, [r5, #0]
 800204a:	291d      	cmp	r1, #29
 800204c:	d82c      	bhi.n	80020a8 <__sflush_r+0xb4>
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <__sflush_r+0x100>)
 8002050:	40ca      	lsrs	r2, r1
 8002052:	07d6      	lsls	r6, r2, #31
 8002054:	d528      	bpl.n	80020a8 <__sflush_r+0xb4>
 8002056:	2200      	movs	r2, #0
 8002058:	6062      	str	r2, [r4, #4]
 800205a:	04d9      	lsls	r1, r3, #19
 800205c:	6922      	ldr	r2, [r4, #16]
 800205e:	6022      	str	r2, [r4, #0]
 8002060:	d504      	bpl.n	800206c <__sflush_r+0x78>
 8002062:	1c42      	adds	r2, r0, #1
 8002064:	d101      	bne.n	800206a <__sflush_r+0x76>
 8002066:	682b      	ldr	r3, [r5, #0]
 8002068:	b903      	cbnz	r3, 800206c <__sflush_r+0x78>
 800206a:	6560      	str	r0, [r4, #84]	; 0x54
 800206c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800206e:	602f      	str	r7, [r5, #0]
 8002070:	2900      	cmp	r1, #0
 8002072:	d0cb      	beq.n	800200c <__sflush_r+0x18>
 8002074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002078:	4299      	cmp	r1, r3
 800207a:	d002      	beq.n	8002082 <__sflush_r+0x8e>
 800207c:	4628      	mov	r0, r5
 800207e:	f000 f9d5 	bl	800242c <_free_r>
 8002082:	2000      	movs	r0, #0
 8002084:	6360      	str	r0, [r4, #52]	; 0x34
 8002086:	e7c2      	b.n	800200e <__sflush_r+0x1a>
 8002088:	6a21      	ldr	r1, [r4, #32]
 800208a:	2301      	movs	r3, #1
 800208c:	4628      	mov	r0, r5
 800208e:	47b0      	blx	r6
 8002090:	1c41      	adds	r1, r0, #1
 8002092:	d1c7      	bne.n	8002024 <__sflush_r+0x30>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0c4      	beq.n	8002024 <__sflush_r+0x30>
 800209a:	2b1d      	cmp	r3, #29
 800209c:	d001      	beq.n	80020a2 <__sflush_r+0xae>
 800209e:	2b16      	cmp	r3, #22
 80020a0:	d101      	bne.n	80020a6 <__sflush_r+0xb2>
 80020a2:	602f      	str	r7, [r5, #0]
 80020a4:	e7b2      	b.n	800200c <__sflush_r+0x18>
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	e7ae      	b.n	800200e <__sflush_r+0x1a>
 80020b0:	690f      	ldr	r7, [r1, #16]
 80020b2:	2f00      	cmp	r7, #0
 80020b4:	d0aa      	beq.n	800200c <__sflush_r+0x18>
 80020b6:	0793      	lsls	r3, r2, #30
 80020b8:	680e      	ldr	r6, [r1, #0]
 80020ba:	bf08      	it	eq
 80020bc:	694b      	ldreq	r3, [r1, #20]
 80020be:	600f      	str	r7, [r1, #0]
 80020c0:	bf18      	it	ne
 80020c2:	2300      	movne	r3, #0
 80020c4:	1bf6      	subs	r6, r6, r7
 80020c6:	608b      	str	r3, [r1, #8]
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	dd9f      	ble.n	800200c <__sflush_r+0x18>
 80020cc:	6a21      	ldr	r1, [r4, #32]
 80020ce:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80020d2:	4633      	mov	r3, r6
 80020d4:	463a      	mov	r2, r7
 80020d6:	4628      	mov	r0, r5
 80020d8:	47e0      	blx	ip
 80020da:	2800      	cmp	r0, #0
 80020dc:	dc06      	bgt.n	80020ec <__sflush_r+0xf8>
 80020de:	89a3      	ldrh	r3, [r4, #12]
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ea:	e790      	b.n	800200e <__sflush_r+0x1a>
 80020ec:	4407      	add	r7, r0
 80020ee:	1a36      	subs	r6, r6, r0
 80020f0:	e7ea      	b.n	80020c8 <__sflush_r+0xd4>
 80020f2:	bf00      	nop
 80020f4:	20400001 	.word	0x20400001

080020f8 <_fflush_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	690b      	ldr	r3, [r1, #16]
 80020fc:	4605      	mov	r5, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	b913      	cbnz	r3, 8002108 <_fflush_r+0x10>
 8002102:	2500      	movs	r5, #0
 8002104:	4628      	mov	r0, r5
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	b118      	cbz	r0, 8002112 <_fflush_r+0x1a>
 800210a:	6983      	ldr	r3, [r0, #24]
 800210c:	b90b      	cbnz	r3, 8002112 <_fflush_r+0x1a>
 800210e:	f000 f887 	bl	8002220 <__sinit>
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <_fflush_r+0x6c>)
 8002114:	429c      	cmp	r4, r3
 8002116:	d11b      	bne.n	8002150 <_fflush_r+0x58>
 8002118:	686c      	ldr	r4, [r5, #4]
 800211a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ef      	beq.n	8002102 <_fflush_r+0xa>
 8002122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002124:	07d0      	lsls	r0, r2, #31
 8002126:	d404      	bmi.n	8002132 <_fflush_r+0x3a>
 8002128:	0599      	lsls	r1, r3, #22
 800212a:	d402      	bmi.n	8002132 <_fflush_r+0x3a>
 800212c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800212e:	f000 f915 	bl	800235c <__retarget_lock_acquire_recursive>
 8002132:	4628      	mov	r0, r5
 8002134:	4621      	mov	r1, r4
 8002136:	f7ff ff5d 	bl	8001ff4 <__sflush_r>
 800213a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800213c:	07da      	lsls	r2, r3, #31
 800213e:	4605      	mov	r5, r0
 8002140:	d4e0      	bmi.n	8002104 <_fflush_r+0xc>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	059b      	lsls	r3, r3, #22
 8002146:	d4dd      	bmi.n	8002104 <_fflush_r+0xc>
 8002148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800214a:	f000 f908 	bl	800235e <__retarget_lock_release_recursive>
 800214e:	e7d9      	b.n	8002104 <_fflush_r+0xc>
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <_fflush_r+0x70>)
 8002152:	429c      	cmp	r4, r3
 8002154:	d101      	bne.n	800215a <_fflush_r+0x62>
 8002156:	68ac      	ldr	r4, [r5, #8]
 8002158:	e7df      	b.n	800211a <_fflush_r+0x22>
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <_fflush_r+0x74>)
 800215c:	429c      	cmp	r4, r3
 800215e:	bf08      	it	eq
 8002160:	68ec      	ldreq	r4, [r5, #12]
 8002162:	e7da      	b.n	800211a <_fflush_r+0x22>
 8002164:	08002ea4 	.word	0x08002ea4
 8002168:	08002ec4 	.word	0x08002ec4
 800216c:	08002e84 	.word	0x08002e84

08002170 <std>:
 8002170:	2300      	movs	r3, #0
 8002172:	b510      	push	{r4, lr}
 8002174:	4604      	mov	r4, r0
 8002176:	e9c0 3300 	strd	r3, r3, [r0]
 800217a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800217e:	6083      	str	r3, [r0, #8]
 8002180:	8181      	strh	r1, [r0, #12]
 8002182:	6643      	str	r3, [r0, #100]	; 0x64
 8002184:	81c2      	strh	r2, [r0, #14]
 8002186:	6183      	str	r3, [r0, #24]
 8002188:	4619      	mov	r1, r3
 800218a:	2208      	movs	r2, #8
 800218c:	305c      	adds	r0, #92	; 0x5c
 800218e:	f7ff fdc7 	bl	8001d20 <memset>
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <std+0x38>)
 8002194:	6263      	str	r3, [r4, #36]	; 0x24
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <std+0x3c>)
 8002198:	62a3      	str	r3, [r4, #40]	; 0x28
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <std+0x40>)
 800219c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <std+0x44>)
 80021a0:	6224      	str	r4, [r4, #32]
 80021a2:	6323      	str	r3, [r4, #48]	; 0x30
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	08002c71 	.word	0x08002c71
 80021ac:	08002c93 	.word	0x08002c93
 80021b0:	08002ccb 	.word	0x08002ccb
 80021b4:	08002cef 	.word	0x08002cef

080021b8 <_cleanup_r>:
 80021b8:	4901      	ldr	r1, [pc, #4]	; (80021c0 <_cleanup_r+0x8>)
 80021ba:	f000 b8af 	b.w	800231c <_fwalk_reent>
 80021be:	bf00      	nop
 80021c0:	080020f9 	.word	0x080020f9

080021c4 <__sfmoreglue>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	2268      	movs	r2, #104	; 0x68
 80021c8:	1e4d      	subs	r5, r1, #1
 80021ca:	4355      	muls	r5, r2
 80021cc:	460e      	mov	r6, r1
 80021ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021d2:	f000 f995 	bl	8002500 <_malloc_r>
 80021d6:	4604      	mov	r4, r0
 80021d8:	b140      	cbz	r0, 80021ec <__sfmoreglue+0x28>
 80021da:	2100      	movs	r1, #0
 80021dc:	e9c0 1600 	strd	r1, r6, [r0]
 80021e0:	300c      	adds	r0, #12
 80021e2:	60a0      	str	r0, [r4, #8]
 80021e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021e8:	f7ff fd9a 	bl	8001d20 <memset>
 80021ec:	4620      	mov	r0, r4
 80021ee:	bd70      	pop	{r4, r5, r6, pc}

080021f0 <__sfp_lock_acquire>:
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <__sfp_lock_acquire+0x8>)
 80021f2:	f000 b8b3 	b.w	800235c <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	20000135 	.word	0x20000135

080021fc <__sfp_lock_release>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__sfp_lock_release+0x8>)
 80021fe:	f000 b8ae 	b.w	800235e <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	20000135 	.word	0x20000135

08002208 <__sinit_lock_acquire>:
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <__sinit_lock_acquire+0x8>)
 800220a:	f000 b8a7 	b.w	800235c <__retarget_lock_acquire_recursive>
 800220e:	bf00      	nop
 8002210:	20000136 	.word	0x20000136

08002214 <__sinit_lock_release>:
 8002214:	4801      	ldr	r0, [pc, #4]	; (800221c <__sinit_lock_release+0x8>)
 8002216:	f000 b8a2 	b.w	800235e <__retarget_lock_release_recursive>
 800221a:	bf00      	nop
 800221c:	20000136 	.word	0x20000136

08002220 <__sinit>:
 8002220:	b510      	push	{r4, lr}
 8002222:	4604      	mov	r4, r0
 8002224:	f7ff fff0 	bl	8002208 <__sinit_lock_acquire>
 8002228:	69a3      	ldr	r3, [r4, #24]
 800222a:	b11b      	cbz	r3, 8002234 <__sinit+0x14>
 800222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002230:	f7ff bff0 	b.w	8002214 <__sinit_lock_release>
 8002234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002238:	6523      	str	r3, [r4, #80]	; 0x50
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <__sinit+0x68>)
 800223c:	4a13      	ldr	r2, [pc, #76]	; (800228c <__sinit+0x6c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	62a2      	str	r2, [r4, #40]	; 0x28
 8002242:	42a3      	cmp	r3, r4
 8002244:	bf04      	itt	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	61a3      	streq	r3, [r4, #24]
 800224a:	4620      	mov	r0, r4
 800224c:	f000 f820 	bl	8002290 <__sfp>
 8002250:	6060      	str	r0, [r4, #4]
 8002252:	4620      	mov	r0, r4
 8002254:	f000 f81c 	bl	8002290 <__sfp>
 8002258:	60a0      	str	r0, [r4, #8]
 800225a:	4620      	mov	r0, r4
 800225c:	f000 f818 	bl	8002290 <__sfp>
 8002260:	2200      	movs	r2, #0
 8002262:	60e0      	str	r0, [r4, #12]
 8002264:	2104      	movs	r1, #4
 8002266:	6860      	ldr	r0, [r4, #4]
 8002268:	f7ff ff82 	bl	8002170 <std>
 800226c:	68a0      	ldr	r0, [r4, #8]
 800226e:	2201      	movs	r2, #1
 8002270:	2109      	movs	r1, #9
 8002272:	f7ff ff7d 	bl	8002170 <std>
 8002276:	68e0      	ldr	r0, [r4, #12]
 8002278:	2202      	movs	r2, #2
 800227a:	2112      	movs	r1, #18
 800227c:	f7ff ff78 	bl	8002170 <std>
 8002280:	2301      	movs	r3, #1
 8002282:	61a3      	str	r3, [r4, #24]
 8002284:	e7d2      	b.n	800222c <__sinit+0xc>
 8002286:	bf00      	nop
 8002288:	08002e80 	.word	0x08002e80
 800228c:	080021b9 	.word	0x080021b9

08002290 <__sfp>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	4607      	mov	r7, r0
 8002294:	f7ff ffac 	bl	80021f0 <__sfp_lock_acquire>
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <__sfp+0x84>)
 800229a:	681e      	ldr	r6, [r3, #0]
 800229c:	69b3      	ldr	r3, [r6, #24]
 800229e:	b913      	cbnz	r3, 80022a6 <__sfp+0x16>
 80022a0:	4630      	mov	r0, r6
 80022a2:	f7ff ffbd 	bl	8002220 <__sinit>
 80022a6:	3648      	adds	r6, #72	; 0x48
 80022a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	d503      	bpl.n	80022b8 <__sfp+0x28>
 80022b0:	6833      	ldr	r3, [r6, #0]
 80022b2:	b30b      	cbz	r3, 80022f8 <__sfp+0x68>
 80022b4:	6836      	ldr	r6, [r6, #0]
 80022b6:	e7f7      	b.n	80022a8 <__sfp+0x18>
 80022b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022bc:	b9d5      	cbnz	r5, 80022f4 <__sfp+0x64>
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <__sfp+0x88>)
 80022c0:	60e3      	str	r3, [r4, #12]
 80022c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022c6:	6665      	str	r5, [r4, #100]	; 0x64
 80022c8:	f000 f847 	bl	800235a <__retarget_lock_init_recursive>
 80022cc:	f7ff ff96 	bl	80021fc <__sfp_lock_release>
 80022d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022d8:	6025      	str	r5, [r4, #0]
 80022da:	61a5      	str	r5, [r4, #24]
 80022dc:	2208      	movs	r2, #8
 80022de:	4629      	mov	r1, r5
 80022e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022e4:	f7ff fd1c 	bl	8001d20 <memset>
 80022e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022f0:	4620      	mov	r0, r4
 80022f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f4:	3468      	adds	r4, #104	; 0x68
 80022f6:	e7d9      	b.n	80022ac <__sfp+0x1c>
 80022f8:	2104      	movs	r1, #4
 80022fa:	4638      	mov	r0, r7
 80022fc:	f7ff ff62 	bl	80021c4 <__sfmoreglue>
 8002300:	4604      	mov	r4, r0
 8002302:	6030      	str	r0, [r6, #0]
 8002304:	2800      	cmp	r0, #0
 8002306:	d1d5      	bne.n	80022b4 <__sfp+0x24>
 8002308:	f7ff ff78 	bl	80021fc <__sfp_lock_release>
 800230c:	230c      	movs	r3, #12
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	e7ee      	b.n	80022f0 <__sfp+0x60>
 8002312:	bf00      	nop
 8002314:	08002e80 	.word	0x08002e80
 8002318:	ffff0001 	.word	0xffff0001

0800231c <_fwalk_reent>:
 800231c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002320:	4606      	mov	r6, r0
 8002322:	4688      	mov	r8, r1
 8002324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002328:	2700      	movs	r7, #0
 800232a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800232e:	f1b9 0901 	subs.w	r9, r9, #1
 8002332:	d505      	bpl.n	8002340 <_fwalk_reent+0x24>
 8002334:	6824      	ldr	r4, [r4, #0]
 8002336:	2c00      	cmp	r4, #0
 8002338:	d1f7      	bne.n	800232a <_fwalk_reent+0xe>
 800233a:	4638      	mov	r0, r7
 800233c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002340:	89ab      	ldrh	r3, [r5, #12]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d907      	bls.n	8002356 <_fwalk_reent+0x3a>
 8002346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800234a:	3301      	adds	r3, #1
 800234c:	d003      	beq.n	8002356 <_fwalk_reent+0x3a>
 800234e:	4629      	mov	r1, r5
 8002350:	4630      	mov	r0, r6
 8002352:	47c0      	blx	r8
 8002354:	4307      	orrs	r7, r0
 8002356:	3568      	adds	r5, #104	; 0x68
 8002358:	e7e9      	b.n	800232e <_fwalk_reent+0x12>

0800235a <__retarget_lock_init_recursive>:
 800235a:	4770      	bx	lr

0800235c <__retarget_lock_acquire_recursive>:
 800235c:	4770      	bx	lr

0800235e <__retarget_lock_release_recursive>:
 800235e:	4770      	bx	lr

08002360 <__swhatbuf_r>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	460e      	mov	r6, r1
 8002364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002368:	2900      	cmp	r1, #0
 800236a:	b096      	sub	sp, #88	; 0x58
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	da08      	bge.n	8002384 <__swhatbuf_r+0x24>
 8002372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	602a      	str	r2, [r5, #0]
 800237a:	061a      	lsls	r2, r3, #24
 800237c:	d410      	bmi.n	80023a0 <__swhatbuf_r+0x40>
 800237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002382:	e00e      	b.n	80023a2 <__swhatbuf_r+0x42>
 8002384:	466a      	mov	r2, sp
 8002386:	f000 fcd9 	bl	8002d3c <_fstat_r>
 800238a:	2800      	cmp	r0, #0
 800238c:	dbf1      	blt.n	8002372 <__swhatbuf_r+0x12>
 800238e:	9a01      	ldr	r2, [sp, #4]
 8002390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002398:	425a      	negs	r2, r3
 800239a:	415a      	adcs	r2, r3
 800239c:	602a      	str	r2, [r5, #0]
 800239e:	e7ee      	b.n	800237e <__swhatbuf_r+0x1e>
 80023a0:	2340      	movs	r3, #64	; 0x40
 80023a2:	2000      	movs	r0, #0
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	b016      	add	sp, #88	; 0x58
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080023ac <__smakebuf_r>:
 80023ac:	898b      	ldrh	r3, [r1, #12]
 80023ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023b0:	079d      	lsls	r5, r3, #30
 80023b2:	4606      	mov	r6, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	d507      	bpl.n	80023c8 <__smakebuf_r+0x1c>
 80023b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	2301      	movs	r3, #1
 80023c2:	6163      	str	r3, [r4, #20]
 80023c4:	b002      	add	sp, #8
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	ab01      	add	r3, sp, #4
 80023ca:	466a      	mov	r2, sp
 80023cc:	f7ff ffc8 	bl	8002360 <__swhatbuf_r>
 80023d0:	9900      	ldr	r1, [sp, #0]
 80023d2:	4605      	mov	r5, r0
 80023d4:	4630      	mov	r0, r6
 80023d6:	f000 f893 	bl	8002500 <_malloc_r>
 80023da:	b948      	cbnz	r0, 80023f0 <__smakebuf_r+0x44>
 80023dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e0:	059a      	lsls	r2, r3, #22
 80023e2:	d4ef      	bmi.n	80023c4 <__smakebuf_r+0x18>
 80023e4:	f023 0303 	bic.w	r3, r3, #3
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	81a3      	strh	r3, [r4, #12]
 80023ee:	e7e3      	b.n	80023b8 <__smakebuf_r+0xc>
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <__smakebuf_r+0x7c>)
 80023f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	6020      	str	r0, [r4, #0]
 80023f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fc:	81a3      	strh	r3, [r4, #12]
 80023fe:	9b00      	ldr	r3, [sp, #0]
 8002400:	6163      	str	r3, [r4, #20]
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	6120      	str	r0, [r4, #16]
 8002406:	b15b      	cbz	r3, 8002420 <__smakebuf_r+0x74>
 8002408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800240c:	4630      	mov	r0, r6
 800240e:	f000 fca7 	bl	8002d60 <_isatty_r>
 8002412:	b128      	cbz	r0, 8002420 <__smakebuf_r+0x74>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	89a0      	ldrh	r0, [r4, #12]
 8002422:	4305      	orrs	r5, r0
 8002424:	81a5      	strh	r5, [r4, #12]
 8002426:	e7cd      	b.n	80023c4 <__smakebuf_r+0x18>
 8002428:	080021b9 	.word	0x080021b9

0800242c <_free_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4605      	mov	r5, r0
 8002430:	2900      	cmp	r1, #0
 8002432:	d041      	beq.n	80024b8 <_free_r+0x8c>
 8002434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002438:	1f0c      	subs	r4, r1, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	18e4      	addlt	r4, r4, r3
 8002440:	f000 fcb0 	bl	8002da4 <__malloc_lock>
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <_free_r+0x90>)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	b933      	cbnz	r3, 8002458 <_free_r+0x2c>
 800244a:	6063      	str	r3, [r4, #4]
 800244c:	6014      	str	r4, [r2, #0]
 800244e:	4628      	mov	r0, r5
 8002450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002454:	f000 bcac 	b.w	8002db0 <__malloc_unlock>
 8002458:	42a3      	cmp	r3, r4
 800245a:	d908      	bls.n	800246e <_free_r+0x42>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428b      	cmp	r3, r1
 8002462:	bf01      	itttt	eq
 8002464:	6819      	ldreq	r1, [r3, #0]
 8002466:	685b      	ldreq	r3, [r3, #4]
 8002468:	1809      	addeq	r1, r1, r0
 800246a:	6021      	streq	r1, [r4, #0]
 800246c:	e7ed      	b.n	800244a <_free_r+0x1e>
 800246e:	461a      	mov	r2, r3
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b10b      	cbz	r3, 8002478 <_free_r+0x4c>
 8002474:	42a3      	cmp	r3, r4
 8002476:	d9fa      	bls.n	800246e <_free_r+0x42>
 8002478:	6811      	ldr	r1, [r2, #0]
 800247a:	1850      	adds	r0, r2, r1
 800247c:	42a0      	cmp	r0, r4
 800247e:	d10b      	bne.n	8002498 <_free_r+0x6c>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	4401      	add	r1, r0
 8002484:	1850      	adds	r0, r2, r1
 8002486:	4283      	cmp	r3, r0
 8002488:	6011      	str	r1, [r2, #0]
 800248a:	d1e0      	bne.n	800244e <_free_r+0x22>
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	4401      	add	r1, r0
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	e7da      	b.n	800244e <_free_r+0x22>
 8002498:	d902      	bls.n	80024a0 <_free_r+0x74>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d6      	b.n	800244e <_free_r+0x22>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	1821      	adds	r1, r4, r0
 80024a4:	428b      	cmp	r3, r1
 80024a6:	bf04      	itt	eq
 80024a8:	6819      	ldreq	r1, [r3, #0]
 80024aa:	685b      	ldreq	r3, [r3, #4]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	bf04      	itt	eq
 80024b0:	1809      	addeq	r1, r1, r0
 80024b2:	6021      	streq	r1, [r4, #0]
 80024b4:	6054      	str	r4, [r2, #4]
 80024b6:	e7ca      	b.n	800244e <_free_r+0x22>
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	20000138 	.word	0x20000138

080024c0 <sbrk_aligned>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4e0e      	ldr	r6, [pc, #56]	; (80024fc <sbrk_aligned+0x3c>)
 80024c4:	460c      	mov	r4, r1
 80024c6:	6831      	ldr	r1, [r6, #0]
 80024c8:	4605      	mov	r5, r0
 80024ca:	b911      	cbnz	r1, 80024d2 <sbrk_aligned+0x12>
 80024cc:	f000 fbc0 	bl	8002c50 <_sbrk_r>
 80024d0:	6030      	str	r0, [r6, #0]
 80024d2:	4621      	mov	r1, r4
 80024d4:	4628      	mov	r0, r5
 80024d6:	f000 fbbb 	bl	8002c50 <_sbrk_r>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	d00a      	beq.n	80024f4 <sbrk_aligned+0x34>
 80024de:	1cc4      	adds	r4, r0, #3
 80024e0:	f024 0403 	bic.w	r4, r4, #3
 80024e4:	42a0      	cmp	r0, r4
 80024e6:	d007      	beq.n	80024f8 <sbrk_aligned+0x38>
 80024e8:	1a21      	subs	r1, r4, r0
 80024ea:	4628      	mov	r0, r5
 80024ec:	f000 fbb0 	bl	8002c50 <_sbrk_r>
 80024f0:	3001      	adds	r0, #1
 80024f2:	d101      	bne.n	80024f8 <sbrk_aligned+0x38>
 80024f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024f8:	4620      	mov	r0, r4
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	2000013c 	.word	0x2000013c

08002500 <_malloc_r>:
 8002500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002504:	1ccd      	adds	r5, r1, #3
 8002506:	f025 0503 	bic.w	r5, r5, #3
 800250a:	3508      	adds	r5, #8
 800250c:	2d0c      	cmp	r5, #12
 800250e:	bf38      	it	cc
 8002510:	250c      	movcc	r5, #12
 8002512:	2d00      	cmp	r5, #0
 8002514:	4607      	mov	r7, r0
 8002516:	db01      	blt.n	800251c <_malloc_r+0x1c>
 8002518:	42a9      	cmp	r1, r5
 800251a:	d905      	bls.n	8002528 <_malloc_r+0x28>
 800251c:	230c      	movs	r3, #12
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	2600      	movs	r6, #0
 8002522:	4630      	mov	r0, r6
 8002524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002528:	4e2e      	ldr	r6, [pc, #184]	; (80025e4 <_malloc_r+0xe4>)
 800252a:	f000 fc3b 	bl	8002da4 <__malloc_lock>
 800252e:	6833      	ldr	r3, [r6, #0]
 8002530:	461c      	mov	r4, r3
 8002532:	bb34      	cbnz	r4, 8002582 <_malloc_r+0x82>
 8002534:	4629      	mov	r1, r5
 8002536:	4638      	mov	r0, r7
 8002538:	f7ff ffc2 	bl	80024c0 <sbrk_aligned>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	4604      	mov	r4, r0
 8002540:	d14d      	bne.n	80025de <_malloc_r+0xde>
 8002542:	6834      	ldr	r4, [r6, #0]
 8002544:	4626      	mov	r6, r4
 8002546:	2e00      	cmp	r6, #0
 8002548:	d140      	bne.n	80025cc <_malloc_r+0xcc>
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	4631      	mov	r1, r6
 800254e:	4638      	mov	r0, r7
 8002550:	eb04 0803 	add.w	r8, r4, r3
 8002554:	f000 fb7c 	bl	8002c50 <_sbrk_r>
 8002558:	4580      	cmp	r8, r0
 800255a:	d13a      	bne.n	80025d2 <_malloc_r+0xd2>
 800255c:	6821      	ldr	r1, [r4, #0]
 800255e:	3503      	adds	r5, #3
 8002560:	1a6d      	subs	r5, r5, r1
 8002562:	f025 0503 	bic.w	r5, r5, #3
 8002566:	3508      	adds	r5, #8
 8002568:	2d0c      	cmp	r5, #12
 800256a:	bf38      	it	cc
 800256c:	250c      	movcc	r5, #12
 800256e:	4629      	mov	r1, r5
 8002570:	4638      	mov	r0, r7
 8002572:	f7ff ffa5 	bl	80024c0 <sbrk_aligned>
 8002576:	3001      	adds	r0, #1
 8002578:	d02b      	beq.n	80025d2 <_malloc_r+0xd2>
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	442b      	add	r3, r5
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	e00e      	b.n	80025a0 <_malloc_r+0xa0>
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	1b52      	subs	r2, r2, r5
 8002586:	d41e      	bmi.n	80025c6 <_malloc_r+0xc6>
 8002588:	2a0b      	cmp	r2, #11
 800258a:	d916      	bls.n	80025ba <_malloc_r+0xba>
 800258c:	1961      	adds	r1, r4, r5
 800258e:	42a3      	cmp	r3, r4
 8002590:	6025      	str	r5, [r4, #0]
 8002592:	bf18      	it	ne
 8002594:	6059      	strne	r1, [r3, #4]
 8002596:	6863      	ldr	r3, [r4, #4]
 8002598:	bf08      	it	eq
 800259a:	6031      	streq	r1, [r6, #0]
 800259c:	5162      	str	r2, [r4, r5]
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	4638      	mov	r0, r7
 80025a2:	f104 060b 	add.w	r6, r4, #11
 80025a6:	f000 fc03 	bl	8002db0 <__malloc_unlock>
 80025aa:	f026 0607 	bic.w	r6, r6, #7
 80025ae:	1d23      	adds	r3, r4, #4
 80025b0:	1af2      	subs	r2, r6, r3
 80025b2:	d0b6      	beq.n	8002522 <_malloc_r+0x22>
 80025b4:	1b9b      	subs	r3, r3, r6
 80025b6:	50a3      	str	r3, [r4, r2]
 80025b8:	e7b3      	b.n	8002522 <_malloc_r+0x22>
 80025ba:	6862      	ldr	r2, [r4, #4]
 80025bc:	42a3      	cmp	r3, r4
 80025be:	bf0c      	ite	eq
 80025c0:	6032      	streq	r2, [r6, #0]
 80025c2:	605a      	strne	r2, [r3, #4]
 80025c4:	e7ec      	b.n	80025a0 <_malloc_r+0xa0>
 80025c6:	4623      	mov	r3, r4
 80025c8:	6864      	ldr	r4, [r4, #4]
 80025ca:	e7b2      	b.n	8002532 <_malloc_r+0x32>
 80025cc:	4634      	mov	r4, r6
 80025ce:	6876      	ldr	r6, [r6, #4]
 80025d0:	e7b9      	b.n	8002546 <_malloc_r+0x46>
 80025d2:	230c      	movs	r3, #12
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4638      	mov	r0, r7
 80025d8:	f000 fbea 	bl	8002db0 <__malloc_unlock>
 80025dc:	e7a1      	b.n	8002522 <_malloc_r+0x22>
 80025de:	6025      	str	r5, [r4, #0]
 80025e0:	e7de      	b.n	80025a0 <_malloc_r+0xa0>
 80025e2:	bf00      	nop
 80025e4:	20000138 	.word	0x20000138

080025e8 <__sfputc_r>:
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	b410      	push	{r4}
 80025f0:	6093      	str	r3, [r2, #8]
 80025f2:	da07      	bge.n	8002604 <__sfputc_r+0x1c>
 80025f4:	6994      	ldr	r4, [r2, #24]
 80025f6:	42a3      	cmp	r3, r4
 80025f8:	db01      	blt.n	80025fe <__sfputc_r+0x16>
 80025fa:	290a      	cmp	r1, #10
 80025fc:	d102      	bne.n	8002604 <__sfputc_r+0x1c>
 80025fe:	bc10      	pop	{r4}
 8002600:	f7ff bc38 	b.w	8001e74 <__swbuf_r>
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	1c58      	adds	r0, r3, #1
 8002608:	6010      	str	r0, [r2, #0]
 800260a:	7019      	strb	r1, [r3, #0]
 800260c:	4608      	mov	r0, r1
 800260e:	bc10      	pop	{r4}
 8002610:	4770      	bx	lr

08002612 <__sfputs_r>:
 8002612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002614:	4606      	mov	r6, r0
 8002616:	460f      	mov	r7, r1
 8002618:	4614      	mov	r4, r2
 800261a:	18d5      	adds	r5, r2, r3
 800261c:	42ac      	cmp	r4, r5
 800261e:	d101      	bne.n	8002624 <__sfputs_r+0x12>
 8002620:	2000      	movs	r0, #0
 8002622:	e007      	b.n	8002634 <__sfputs_r+0x22>
 8002624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002628:	463a      	mov	r2, r7
 800262a:	4630      	mov	r0, r6
 800262c:	f7ff ffdc 	bl	80025e8 <__sfputc_r>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d1f3      	bne.n	800261c <__sfputs_r+0xa>
 8002634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002638 <_vfiprintf_r>:
 8002638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800263c:	460d      	mov	r5, r1
 800263e:	b09d      	sub	sp, #116	; 0x74
 8002640:	4614      	mov	r4, r2
 8002642:	4698      	mov	r8, r3
 8002644:	4606      	mov	r6, r0
 8002646:	b118      	cbz	r0, 8002650 <_vfiprintf_r+0x18>
 8002648:	6983      	ldr	r3, [r0, #24]
 800264a:	b90b      	cbnz	r3, 8002650 <_vfiprintf_r+0x18>
 800264c:	f7ff fde8 	bl	8002220 <__sinit>
 8002650:	4b89      	ldr	r3, [pc, #548]	; (8002878 <_vfiprintf_r+0x240>)
 8002652:	429d      	cmp	r5, r3
 8002654:	d11b      	bne.n	800268e <_vfiprintf_r+0x56>
 8002656:	6875      	ldr	r5, [r6, #4]
 8002658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800265a:	07d9      	lsls	r1, r3, #31
 800265c:	d405      	bmi.n	800266a <_vfiprintf_r+0x32>
 800265e:	89ab      	ldrh	r3, [r5, #12]
 8002660:	059a      	lsls	r2, r3, #22
 8002662:	d402      	bmi.n	800266a <_vfiprintf_r+0x32>
 8002664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002666:	f7ff fe79 	bl	800235c <__retarget_lock_acquire_recursive>
 800266a:	89ab      	ldrh	r3, [r5, #12]
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	d501      	bpl.n	8002674 <_vfiprintf_r+0x3c>
 8002670:	692b      	ldr	r3, [r5, #16]
 8002672:	b9eb      	cbnz	r3, 80026b0 <_vfiprintf_r+0x78>
 8002674:	4629      	mov	r1, r5
 8002676:	4630      	mov	r0, r6
 8002678:	f7ff fc4e 	bl	8001f18 <__swsetup_r>
 800267c:	b1c0      	cbz	r0, 80026b0 <_vfiprintf_r+0x78>
 800267e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002680:	07dc      	lsls	r4, r3, #31
 8002682:	d50e      	bpl.n	80026a2 <_vfiprintf_r+0x6a>
 8002684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002688:	b01d      	add	sp, #116	; 0x74
 800268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268e:	4b7b      	ldr	r3, [pc, #492]	; (800287c <_vfiprintf_r+0x244>)
 8002690:	429d      	cmp	r5, r3
 8002692:	d101      	bne.n	8002698 <_vfiprintf_r+0x60>
 8002694:	68b5      	ldr	r5, [r6, #8]
 8002696:	e7df      	b.n	8002658 <_vfiprintf_r+0x20>
 8002698:	4b79      	ldr	r3, [pc, #484]	; (8002880 <_vfiprintf_r+0x248>)
 800269a:	429d      	cmp	r5, r3
 800269c:	bf08      	it	eq
 800269e:	68f5      	ldreq	r5, [r6, #12]
 80026a0:	e7da      	b.n	8002658 <_vfiprintf_r+0x20>
 80026a2:	89ab      	ldrh	r3, [r5, #12]
 80026a4:	0598      	lsls	r0, r3, #22
 80026a6:	d4ed      	bmi.n	8002684 <_vfiprintf_r+0x4c>
 80026a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026aa:	f7ff fe58 	bl	800235e <__retarget_lock_release_recursive>
 80026ae:	e7e9      	b.n	8002684 <_vfiprintf_r+0x4c>
 80026b0:	2300      	movs	r3, #0
 80026b2:	9309      	str	r3, [sp, #36]	; 0x24
 80026b4:	2320      	movs	r3, #32
 80026b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80026be:	2330      	movs	r3, #48	; 0x30
 80026c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002884 <_vfiprintf_r+0x24c>
 80026c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026c8:	f04f 0901 	mov.w	r9, #1
 80026cc:	4623      	mov	r3, r4
 80026ce:	469a      	mov	sl, r3
 80026d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026d4:	b10a      	cbz	r2, 80026da <_vfiprintf_r+0xa2>
 80026d6:	2a25      	cmp	r2, #37	; 0x25
 80026d8:	d1f9      	bne.n	80026ce <_vfiprintf_r+0x96>
 80026da:	ebba 0b04 	subs.w	fp, sl, r4
 80026de:	d00b      	beq.n	80026f8 <_vfiprintf_r+0xc0>
 80026e0:	465b      	mov	r3, fp
 80026e2:	4622      	mov	r2, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	4630      	mov	r0, r6
 80026e8:	f7ff ff93 	bl	8002612 <__sfputs_r>
 80026ec:	3001      	adds	r0, #1
 80026ee:	f000 80aa 	beq.w	8002846 <_vfiprintf_r+0x20e>
 80026f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026f4:	445a      	add	r2, fp
 80026f6:	9209      	str	r2, [sp, #36]	; 0x24
 80026f8:	f89a 3000 	ldrb.w	r3, [sl]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a2 	beq.w	8002846 <_vfiprintf_r+0x20e>
 8002702:	2300      	movs	r3, #0
 8002704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800270c:	f10a 0a01 	add.w	sl, sl, #1
 8002710:	9304      	str	r3, [sp, #16]
 8002712:	9307      	str	r3, [sp, #28]
 8002714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002718:	931a      	str	r3, [sp, #104]	; 0x68
 800271a:	4654      	mov	r4, sl
 800271c:	2205      	movs	r2, #5
 800271e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002722:	4858      	ldr	r0, [pc, #352]	; (8002884 <_vfiprintf_r+0x24c>)
 8002724:	f7fd fd6c 	bl	8000200 <memchr>
 8002728:	9a04      	ldr	r2, [sp, #16]
 800272a:	b9d8      	cbnz	r0, 8002764 <_vfiprintf_r+0x12c>
 800272c:	06d1      	lsls	r1, r2, #27
 800272e:	bf44      	itt	mi
 8002730:	2320      	movmi	r3, #32
 8002732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002736:	0713      	lsls	r3, r2, #28
 8002738:	bf44      	itt	mi
 800273a:	232b      	movmi	r3, #43	; 0x2b
 800273c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002740:	f89a 3000 	ldrb.w	r3, [sl]
 8002744:	2b2a      	cmp	r3, #42	; 0x2a
 8002746:	d015      	beq.n	8002774 <_vfiprintf_r+0x13c>
 8002748:	9a07      	ldr	r2, [sp, #28]
 800274a:	4654      	mov	r4, sl
 800274c:	2000      	movs	r0, #0
 800274e:	f04f 0c0a 	mov.w	ip, #10
 8002752:	4621      	mov	r1, r4
 8002754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002758:	3b30      	subs	r3, #48	; 0x30
 800275a:	2b09      	cmp	r3, #9
 800275c:	d94e      	bls.n	80027fc <_vfiprintf_r+0x1c4>
 800275e:	b1b0      	cbz	r0, 800278e <_vfiprintf_r+0x156>
 8002760:	9207      	str	r2, [sp, #28]
 8002762:	e014      	b.n	800278e <_vfiprintf_r+0x156>
 8002764:	eba0 0308 	sub.w	r3, r0, r8
 8002768:	fa09 f303 	lsl.w	r3, r9, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	9304      	str	r3, [sp, #16]
 8002770:	46a2      	mov	sl, r4
 8002772:	e7d2      	b.n	800271a <_vfiprintf_r+0xe2>
 8002774:	9b03      	ldr	r3, [sp, #12]
 8002776:	1d19      	adds	r1, r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	9103      	str	r1, [sp, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	bfbb      	ittet	lt
 8002780:	425b      	neglt	r3, r3
 8002782:	f042 0202 	orrlt.w	r2, r2, #2
 8002786:	9307      	strge	r3, [sp, #28]
 8002788:	9307      	strlt	r3, [sp, #28]
 800278a:	bfb8      	it	lt
 800278c:	9204      	strlt	r2, [sp, #16]
 800278e:	7823      	ldrb	r3, [r4, #0]
 8002790:	2b2e      	cmp	r3, #46	; 0x2e
 8002792:	d10c      	bne.n	80027ae <_vfiprintf_r+0x176>
 8002794:	7863      	ldrb	r3, [r4, #1]
 8002796:	2b2a      	cmp	r3, #42	; 0x2a
 8002798:	d135      	bne.n	8002806 <_vfiprintf_r+0x1ce>
 800279a:	9b03      	ldr	r3, [sp, #12]
 800279c:	1d1a      	adds	r2, r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	9203      	str	r2, [sp, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bfb8      	it	lt
 80027a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027aa:	3402      	adds	r4, #2
 80027ac:	9305      	str	r3, [sp, #20]
 80027ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002888 <_vfiprintf_r+0x250>
 80027b2:	7821      	ldrb	r1, [r4, #0]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4650      	mov	r0, sl
 80027b8:	f7fd fd22 	bl	8000200 <memchr>
 80027bc:	b140      	cbz	r0, 80027d0 <_vfiprintf_r+0x198>
 80027be:	2340      	movs	r3, #64	; 0x40
 80027c0:	eba0 000a 	sub.w	r0, r0, sl
 80027c4:	fa03 f000 	lsl.w	r0, r3, r0
 80027c8:	9b04      	ldr	r3, [sp, #16]
 80027ca:	4303      	orrs	r3, r0
 80027cc:	3401      	adds	r4, #1
 80027ce:	9304      	str	r3, [sp, #16]
 80027d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027d4:	482d      	ldr	r0, [pc, #180]	; (800288c <_vfiprintf_r+0x254>)
 80027d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027da:	2206      	movs	r2, #6
 80027dc:	f7fd fd10 	bl	8000200 <memchr>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d03f      	beq.n	8002864 <_vfiprintf_r+0x22c>
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <_vfiprintf_r+0x258>)
 80027e6:	bb1b      	cbnz	r3, 8002830 <_vfiprintf_r+0x1f8>
 80027e8:	9b03      	ldr	r3, [sp, #12]
 80027ea:	3307      	adds	r3, #7
 80027ec:	f023 0307 	bic.w	r3, r3, #7
 80027f0:	3308      	adds	r3, #8
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027f6:	443b      	add	r3, r7
 80027f8:	9309      	str	r3, [sp, #36]	; 0x24
 80027fa:	e767      	b.n	80026cc <_vfiprintf_r+0x94>
 80027fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002800:	460c      	mov	r4, r1
 8002802:	2001      	movs	r0, #1
 8002804:	e7a5      	b.n	8002752 <_vfiprintf_r+0x11a>
 8002806:	2300      	movs	r3, #0
 8002808:	3401      	adds	r4, #1
 800280a:	9305      	str	r3, [sp, #20]
 800280c:	4619      	mov	r1, r3
 800280e:	f04f 0c0a 	mov.w	ip, #10
 8002812:	4620      	mov	r0, r4
 8002814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002818:	3a30      	subs	r2, #48	; 0x30
 800281a:	2a09      	cmp	r2, #9
 800281c:	d903      	bls.n	8002826 <_vfiprintf_r+0x1ee>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0c5      	beq.n	80027ae <_vfiprintf_r+0x176>
 8002822:	9105      	str	r1, [sp, #20]
 8002824:	e7c3      	b.n	80027ae <_vfiprintf_r+0x176>
 8002826:	fb0c 2101 	mla	r1, ip, r1, r2
 800282a:	4604      	mov	r4, r0
 800282c:	2301      	movs	r3, #1
 800282e:	e7f0      	b.n	8002812 <_vfiprintf_r+0x1da>
 8002830:	ab03      	add	r3, sp, #12
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	462a      	mov	r2, r5
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <_vfiprintf_r+0x25c>)
 8002838:	a904      	add	r1, sp, #16
 800283a:	4630      	mov	r0, r6
 800283c:	f3af 8000 	nop.w
 8002840:	4607      	mov	r7, r0
 8002842:	1c78      	adds	r0, r7, #1
 8002844:	d1d6      	bne.n	80027f4 <_vfiprintf_r+0x1bc>
 8002846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002848:	07d9      	lsls	r1, r3, #31
 800284a:	d405      	bmi.n	8002858 <_vfiprintf_r+0x220>
 800284c:	89ab      	ldrh	r3, [r5, #12]
 800284e:	059a      	lsls	r2, r3, #22
 8002850:	d402      	bmi.n	8002858 <_vfiprintf_r+0x220>
 8002852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002854:	f7ff fd83 	bl	800235e <__retarget_lock_release_recursive>
 8002858:	89ab      	ldrh	r3, [r5, #12]
 800285a:	065b      	lsls	r3, r3, #25
 800285c:	f53f af12 	bmi.w	8002684 <_vfiprintf_r+0x4c>
 8002860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002862:	e711      	b.n	8002688 <_vfiprintf_r+0x50>
 8002864:	ab03      	add	r3, sp, #12
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	462a      	mov	r2, r5
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <_vfiprintf_r+0x25c>)
 800286c:	a904      	add	r1, sp, #16
 800286e:	4630      	mov	r0, r6
 8002870:	f000 f880 	bl	8002974 <_printf_i>
 8002874:	e7e4      	b.n	8002840 <_vfiprintf_r+0x208>
 8002876:	bf00      	nop
 8002878:	08002ea4 	.word	0x08002ea4
 800287c:	08002ec4 	.word	0x08002ec4
 8002880:	08002e84 	.word	0x08002e84
 8002884:	08002ee4 	.word	0x08002ee4
 8002888:	08002eea 	.word	0x08002eea
 800288c:	08002eee 	.word	0x08002eee
 8002890:	00000000 	.word	0x00000000
 8002894:	08002613 	.word	0x08002613

08002898 <_printf_common>:
 8002898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	4616      	mov	r6, r2
 800289e:	4699      	mov	r9, r3
 80028a0:	688a      	ldr	r2, [r1, #8]
 80028a2:	690b      	ldr	r3, [r1, #16]
 80028a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bfb8      	it	lt
 80028ac:	4613      	movlt	r3, r2
 80028ae:	6033      	str	r3, [r6, #0]
 80028b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028b4:	4607      	mov	r7, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	b10a      	cbz	r2, 80028be <_printf_common+0x26>
 80028ba:	3301      	adds	r3, #1
 80028bc:	6033      	str	r3, [r6, #0]
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	0699      	lsls	r1, r3, #26
 80028c2:	bf42      	ittt	mi
 80028c4:	6833      	ldrmi	r3, [r6, #0]
 80028c6:	3302      	addmi	r3, #2
 80028c8:	6033      	strmi	r3, [r6, #0]
 80028ca:	6825      	ldr	r5, [r4, #0]
 80028cc:	f015 0506 	ands.w	r5, r5, #6
 80028d0:	d106      	bne.n	80028e0 <_printf_common+0x48>
 80028d2:	f104 0a19 	add.w	sl, r4, #25
 80028d6:	68e3      	ldr	r3, [r4, #12]
 80028d8:	6832      	ldr	r2, [r6, #0]
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	42ab      	cmp	r3, r5
 80028de:	dc26      	bgt.n	800292e <_printf_common+0x96>
 80028e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028e4:	1e13      	subs	r3, r2, #0
 80028e6:	6822      	ldr	r2, [r4, #0]
 80028e8:	bf18      	it	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	0692      	lsls	r2, r2, #26
 80028ee:	d42b      	bmi.n	8002948 <_printf_common+0xb0>
 80028f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028f4:	4649      	mov	r1, r9
 80028f6:	4638      	mov	r0, r7
 80028f8:	47c0      	blx	r8
 80028fa:	3001      	adds	r0, #1
 80028fc:	d01e      	beq.n	800293c <_printf_common+0xa4>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	68e5      	ldr	r5, [r4, #12]
 8002902:	6832      	ldr	r2, [r6, #0]
 8002904:	f003 0306 	and.w	r3, r3, #6
 8002908:	2b04      	cmp	r3, #4
 800290a:	bf08      	it	eq
 800290c:	1aad      	subeq	r5, r5, r2
 800290e:	68a3      	ldr	r3, [r4, #8]
 8002910:	6922      	ldr	r2, [r4, #16]
 8002912:	bf0c      	ite	eq
 8002914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002918:	2500      	movne	r5, #0
 800291a:	4293      	cmp	r3, r2
 800291c:	bfc4      	itt	gt
 800291e:	1a9b      	subgt	r3, r3, r2
 8002920:	18ed      	addgt	r5, r5, r3
 8002922:	2600      	movs	r6, #0
 8002924:	341a      	adds	r4, #26
 8002926:	42b5      	cmp	r5, r6
 8002928:	d11a      	bne.n	8002960 <_printf_common+0xc8>
 800292a:	2000      	movs	r0, #0
 800292c:	e008      	b.n	8002940 <_printf_common+0xa8>
 800292e:	2301      	movs	r3, #1
 8002930:	4652      	mov	r2, sl
 8002932:	4649      	mov	r1, r9
 8002934:	4638      	mov	r0, r7
 8002936:	47c0      	blx	r8
 8002938:	3001      	adds	r0, #1
 800293a:	d103      	bne.n	8002944 <_printf_common+0xac>
 800293c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002944:	3501      	adds	r5, #1
 8002946:	e7c6      	b.n	80028d6 <_printf_common+0x3e>
 8002948:	18e1      	adds	r1, r4, r3
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	2030      	movs	r0, #48	; 0x30
 800294e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002952:	4422      	add	r2, r4
 8002954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800295c:	3302      	adds	r3, #2
 800295e:	e7c7      	b.n	80028f0 <_printf_common+0x58>
 8002960:	2301      	movs	r3, #1
 8002962:	4622      	mov	r2, r4
 8002964:	4649      	mov	r1, r9
 8002966:	4638      	mov	r0, r7
 8002968:	47c0      	blx	r8
 800296a:	3001      	adds	r0, #1
 800296c:	d0e6      	beq.n	800293c <_printf_common+0xa4>
 800296e:	3601      	adds	r6, #1
 8002970:	e7d9      	b.n	8002926 <_printf_common+0x8e>
	...

08002974 <_printf_i>:
 8002974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002978:	7e0f      	ldrb	r7, [r1, #24]
 800297a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800297c:	2f78      	cmp	r7, #120	; 0x78
 800297e:	4691      	mov	r9, r2
 8002980:	4680      	mov	r8, r0
 8002982:	460c      	mov	r4, r1
 8002984:	469a      	mov	sl, r3
 8002986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800298a:	d807      	bhi.n	800299c <_printf_i+0x28>
 800298c:	2f62      	cmp	r7, #98	; 0x62
 800298e:	d80a      	bhi.n	80029a6 <_printf_i+0x32>
 8002990:	2f00      	cmp	r7, #0
 8002992:	f000 80d8 	beq.w	8002b46 <_printf_i+0x1d2>
 8002996:	2f58      	cmp	r7, #88	; 0x58
 8002998:	f000 80a3 	beq.w	8002ae2 <_printf_i+0x16e>
 800299c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029a4:	e03a      	b.n	8002a1c <_printf_i+0xa8>
 80029a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029aa:	2b15      	cmp	r3, #21
 80029ac:	d8f6      	bhi.n	800299c <_printf_i+0x28>
 80029ae:	a101      	add	r1, pc, #4	; (adr r1, 80029b4 <_printf_i+0x40>)
 80029b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029b4:	08002a0d 	.word	0x08002a0d
 80029b8:	08002a21 	.word	0x08002a21
 80029bc:	0800299d 	.word	0x0800299d
 80029c0:	0800299d 	.word	0x0800299d
 80029c4:	0800299d 	.word	0x0800299d
 80029c8:	0800299d 	.word	0x0800299d
 80029cc:	08002a21 	.word	0x08002a21
 80029d0:	0800299d 	.word	0x0800299d
 80029d4:	0800299d 	.word	0x0800299d
 80029d8:	0800299d 	.word	0x0800299d
 80029dc:	0800299d 	.word	0x0800299d
 80029e0:	08002b2d 	.word	0x08002b2d
 80029e4:	08002a51 	.word	0x08002a51
 80029e8:	08002b0f 	.word	0x08002b0f
 80029ec:	0800299d 	.word	0x0800299d
 80029f0:	0800299d 	.word	0x0800299d
 80029f4:	08002b4f 	.word	0x08002b4f
 80029f8:	0800299d 	.word	0x0800299d
 80029fc:	08002a51 	.word	0x08002a51
 8002a00:	0800299d 	.word	0x0800299d
 8002a04:	0800299d 	.word	0x0800299d
 8002a08:	08002b17 	.word	0x08002b17
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	602a      	str	r2, [r5, #0]
 8002a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0a3      	b.n	8002b68 <_printf_i+0x1f4>
 8002a20:	6820      	ldr	r0, [r4, #0]
 8002a22:	6829      	ldr	r1, [r5, #0]
 8002a24:	0606      	lsls	r6, r0, #24
 8002a26:	f101 0304 	add.w	r3, r1, #4
 8002a2a:	d50a      	bpl.n	8002a42 <_printf_i+0xce>
 8002a2c:	680e      	ldr	r6, [r1, #0]
 8002a2e:	602b      	str	r3, [r5, #0]
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	da03      	bge.n	8002a3c <_printf_i+0xc8>
 8002a34:	232d      	movs	r3, #45	; 0x2d
 8002a36:	4276      	negs	r6, r6
 8002a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a3c:	485e      	ldr	r0, [pc, #376]	; (8002bb8 <_printf_i+0x244>)
 8002a3e:	230a      	movs	r3, #10
 8002a40:	e019      	b.n	8002a76 <_printf_i+0x102>
 8002a42:	680e      	ldr	r6, [r1, #0]
 8002a44:	602b      	str	r3, [r5, #0]
 8002a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a4a:	bf18      	it	ne
 8002a4c:	b236      	sxthne	r6, r6
 8002a4e:	e7ef      	b.n	8002a30 <_printf_i+0xbc>
 8002a50:	682b      	ldr	r3, [r5, #0]
 8002a52:	6820      	ldr	r0, [r4, #0]
 8002a54:	1d19      	adds	r1, r3, #4
 8002a56:	6029      	str	r1, [r5, #0]
 8002a58:	0601      	lsls	r1, r0, #24
 8002a5a:	d501      	bpl.n	8002a60 <_printf_i+0xec>
 8002a5c:	681e      	ldr	r6, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_printf_i+0xf2>
 8002a60:	0646      	lsls	r6, r0, #25
 8002a62:	d5fb      	bpl.n	8002a5c <_printf_i+0xe8>
 8002a64:	881e      	ldrh	r6, [r3, #0]
 8002a66:	4854      	ldr	r0, [pc, #336]	; (8002bb8 <_printf_i+0x244>)
 8002a68:	2f6f      	cmp	r7, #111	; 0x6f
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2308      	moveq	r3, #8
 8002a6e:	230a      	movne	r3, #10
 8002a70:	2100      	movs	r1, #0
 8002a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a76:	6865      	ldr	r5, [r4, #4]
 8002a78:	60a5      	str	r5, [r4, #8]
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	bfa2      	ittt	ge
 8002a7e:	6821      	ldrge	r1, [r4, #0]
 8002a80:	f021 0104 	bicge.w	r1, r1, #4
 8002a84:	6021      	strge	r1, [r4, #0]
 8002a86:	b90e      	cbnz	r6, 8002a8c <_printf_i+0x118>
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	d04d      	beq.n	8002b28 <_printf_i+0x1b4>
 8002a8c:	4615      	mov	r5, r2
 8002a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a92:	fb03 6711 	mls	r7, r3, r1, r6
 8002a96:	5dc7      	ldrb	r7, [r0, r7]
 8002a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a9c:	4637      	mov	r7, r6
 8002a9e:	42bb      	cmp	r3, r7
 8002aa0:	460e      	mov	r6, r1
 8002aa2:	d9f4      	bls.n	8002a8e <_printf_i+0x11a>
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d10b      	bne.n	8002ac0 <_printf_i+0x14c>
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	07de      	lsls	r6, r3, #31
 8002aac:	d508      	bpl.n	8002ac0 <_printf_i+0x14c>
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	6861      	ldr	r1, [r4, #4]
 8002ab2:	4299      	cmp	r1, r3
 8002ab4:	bfde      	ittt	le
 8002ab6:	2330      	movle	r3, #48	; 0x30
 8002ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002abc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ac0:	1b52      	subs	r2, r2, r5
 8002ac2:	6122      	str	r2, [r4, #16]
 8002ac4:	f8cd a000 	str.w	sl, [sp]
 8002ac8:	464b      	mov	r3, r9
 8002aca:	aa03      	add	r2, sp, #12
 8002acc:	4621      	mov	r1, r4
 8002ace:	4640      	mov	r0, r8
 8002ad0:	f7ff fee2 	bl	8002898 <_printf_common>
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d14c      	bne.n	8002b72 <_printf_i+0x1fe>
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002adc:	b004      	add	sp, #16
 8002ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae2:	4835      	ldr	r0, [pc, #212]	; (8002bb8 <_printf_i+0x244>)
 8002ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ae8:	6829      	ldr	r1, [r5, #0]
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8002af0:	6029      	str	r1, [r5, #0]
 8002af2:	061d      	lsls	r5, r3, #24
 8002af4:	d514      	bpl.n	8002b20 <_printf_i+0x1ac>
 8002af6:	07df      	lsls	r7, r3, #31
 8002af8:	bf44      	itt	mi
 8002afa:	f043 0320 	orrmi.w	r3, r3, #32
 8002afe:	6023      	strmi	r3, [r4, #0]
 8002b00:	b91e      	cbnz	r6, 8002b0a <_printf_i+0x196>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f023 0320 	bic.w	r3, r3, #32
 8002b08:	6023      	str	r3, [r4, #0]
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	e7b0      	b.n	8002a70 <_printf_i+0xfc>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	2378      	movs	r3, #120	; 0x78
 8002b18:	4828      	ldr	r0, [pc, #160]	; (8002bbc <_printf_i+0x248>)
 8002b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b1e:	e7e3      	b.n	8002ae8 <_printf_i+0x174>
 8002b20:	0659      	lsls	r1, r3, #25
 8002b22:	bf48      	it	mi
 8002b24:	b2b6      	uxthmi	r6, r6
 8002b26:	e7e6      	b.n	8002af6 <_printf_i+0x182>
 8002b28:	4615      	mov	r5, r2
 8002b2a:	e7bb      	b.n	8002aa4 <_printf_i+0x130>
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	6826      	ldr	r6, [r4, #0]
 8002b30:	6961      	ldr	r1, [r4, #20]
 8002b32:	1d18      	adds	r0, r3, #4
 8002b34:	6028      	str	r0, [r5, #0]
 8002b36:	0635      	lsls	r5, r6, #24
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	d501      	bpl.n	8002b40 <_printf_i+0x1cc>
 8002b3c:	6019      	str	r1, [r3, #0]
 8002b3e:	e002      	b.n	8002b46 <_printf_i+0x1d2>
 8002b40:	0670      	lsls	r0, r6, #25
 8002b42:	d5fb      	bpl.n	8002b3c <_printf_i+0x1c8>
 8002b44:	8019      	strh	r1, [r3, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	6123      	str	r3, [r4, #16]
 8002b4a:	4615      	mov	r5, r2
 8002b4c:	e7ba      	b.n	8002ac4 <_printf_i+0x150>
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	1d1a      	adds	r2, r3, #4
 8002b52:	602a      	str	r2, [r5, #0]
 8002b54:	681d      	ldr	r5, [r3, #0]
 8002b56:	6862      	ldr	r2, [r4, #4]
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	f7fd fb50 	bl	8000200 <memchr>
 8002b60:	b108      	cbz	r0, 8002b66 <_printf_i+0x1f2>
 8002b62:	1b40      	subs	r0, r0, r5
 8002b64:	6060      	str	r0, [r4, #4]
 8002b66:	6863      	ldr	r3, [r4, #4]
 8002b68:	6123      	str	r3, [r4, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b70:	e7a8      	b.n	8002ac4 <_printf_i+0x150>
 8002b72:	6923      	ldr	r3, [r4, #16]
 8002b74:	462a      	mov	r2, r5
 8002b76:	4649      	mov	r1, r9
 8002b78:	4640      	mov	r0, r8
 8002b7a:	47d0      	blx	sl
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d0ab      	beq.n	8002ad8 <_printf_i+0x164>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	079b      	lsls	r3, r3, #30
 8002b84:	d413      	bmi.n	8002bae <_printf_i+0x23a>
 8002b86:	68e0      	ldr	r0, [r4, #12]
 8002b88:	9b03      	ldr	r3, [sp, #12]
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	bfb8      	it	lt
 8002b8e:	4618      	movlt	r0, r3
 8002b90:	e7a4      	b.n	8002adc <_printf_i+0x168>
 8002b92:	2301      	movs	r3, #1
 8002b94:	4632      	mov	r2, r6
 8002b96:	4649      	mov	r1, r9
 8002b98:	4640      	mov	r0, r8
 8002b9a:	47d0      	blx	sl
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d09b      	beq.n	8002ad8 <_printf_i+0x164>
 8002ba0:	3501      	adds	r5, #1
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	9903      	ldr	r1, [sp, #12]
 8002ba6:	1a5b      	subs	r3, r3, r1
 8002ba8:	42ab      	cmp	r3, r5
 8002baa:	dcf2      	bgt.n	8002b92 <_printf_i+0x21e>
 8002bac:	e7eb      	b.n	8002b86 <_printf_i+0x212>
 8002bae:	2500      	movs	r5, #0
 8002bb0:	f104 0619 	add.w	r6, r4, #25
 8002bb4:	e7f5      	b.n	8002ba2 <_printf_i+0x22e>
 8002bb6:	bf00      	nop
 8002bb8:	08002ef5 	.word	0x08002ef5
 8002bbc:	08002f06 	.word	0x08002f06

08002bc0 <_putc_r>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	460d      	mov	r5, r1
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	b118      	cbz	r0, 8002bd2 <_putc_r+0x12>
 8002bca:	6983      	ldr	r3, [r0, #24]
 8002bcc:	b90b      	cbnz	r3, 8002bd2 <_putc_r+0x12>
 8002bce:	f7ff fb27 	bl	8002220 <__sinit>
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <_putc_r+0x84>)
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	d124      	bne.n	8002c22 <_putc_r+0x62>
 8002bd8:	6874      	ldr	r4, [r6, #4]
 8002bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bdc:	07d8      	lsls	r0, r3, #31
 8002bde:	d405      	bmi.n	8002bec <_putc_r+0x2c>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	0599      	lsls	r1, r3, #22
 8002be4:	d402      	bmi.n	8002bec <_putc_r+0x2c>
 8002be6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002be8:	f7ff fbb8 	bl	800235c <__retarget_lock_acquire_recursive>
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	da05      	bge.n	8002c02 <_putc_r+0x42>
 8002bf6:	69a2      	ldr	r2, [r4, #24]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	db1c      	blt.n	8002c36 <_putc_r+0x76>
 8002bfc:	b2eb      	uxtb	r3, r5
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d019      	beq.n	8002c36 <_putc_r+0x76>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	6022      	str	r2, [r4, #0]
 8002c08:	701d      	strb	r5, [r3, #0]
 8002c0a:	b2ed      	uxtb	r5, r5
 8002c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c0e:	07da      	lsls	r2, r3, #31
 8002c10:	d405      	bmi.n	8002c1e <_putc_r+0x5e>
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	059b      	lsls	r3, r3, #22
 8002c16:	d402      	bmi.n	8002c1e <_putc_r+0x5e>
 8002c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c1a:	f7ff fba0 	bl	800235e <__retarget_lock_release_recursive>
 8002c1e:	4628      	mov	r0, r5
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <_putc_r+0x88>)
 8002c24:	429c      	cmp	r4, r3
 8002c26:	d101      	bne.n	8002c2c <_putc_r+0x6c>
 8002c28:	68b4      	ldr	r4, [r6, #8]
 8002c2a:	e7d6      	b.n	8002bda <_putc_r+0x1a>
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <_putc_r+0x8c>)
 8002c2e:	429c      	cmp	r4, r3
 8002c30:	bf08      	it	eq
 8002c32:	68f4      	ldreq	r4, [r6, #12]
 8002c34:	e7d1      	b.n	8002bda <_putc_r+0x1a>
 8002c36:	4629      	mov	r1, r5
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f7ff f91a 	bl	8001e74 <__swbuf_r>
 8002c40:	4605      	mov	r5, r0
 8002c42:	e7e3      	b.n	8002c0c <_putc_r+0x4c>
 8002c44:	08002ea4 	.word	0x08002ea4
 8002c48:	08002ec4 	.word	0x08002ec4
 8002c4c:	08002e84 	.word	0x08002e84

08002c50 <_sbrk_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4d06      	ldr	r5, [pc, #24]	; (8002c6c <_sbrk_r+0x1c>)
 8002c54:	2300      	movs	r3, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	f7fe ffd6 	bl	8001c0c <_sbrk>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_sbrk_r+0x1a>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_sbrk_r+0x1a>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20000140 	.word	0x20000140

08002c70 <__sread>:
 8002c70:	b510      	push	{r4, lr}
 8002c72:	460c      	mov	r4, r1
 8002c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c78:	f000 f8a0 	bl	8002dbc <_read_r>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	bfab      	itete	ge
 8002c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c82:	89a3      	ldrhlt	r3, [r4, #12]
 8002c84:	181b      	addge	r3, r3, r0
 8002c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c8a:	bfac      	ite	ge
 8002c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c8e:	81a3      	strhlt	r3, [r4, #12]
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <__swrite>:
 8002c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c96:	461f      	mov	r7, r3
 8002c98:	898b      	ldrh	r3, [r1, #12]
 8002c9a:	05db      	lsls	r3, r3, #23
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	d505      	bpl.n	8002cb0 <__swrite+0x1e>
 8002ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	2200      	movs	r2, #0
 8002cac:	f000 f868 	bl	8002d80 <_lseek_r>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc6:	f000 b817 	b.w	8002cf8 <_write_r>

08002cca <__sseek>:
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	460c      	mov	r4, r1
 8002cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd2:	f000 f855 	bl	8002d80 <_lseek_r>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	bf15      	itete	ne
 8002cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ce6:	81a3      	strheq	r3, [r4, #12]
 8002ce8:	bf18      	it	ne
 8002cea:	81a3      	strhne	r3, [r4, #12]
 8002cec:	bd10      	pop	{r4, pc}

08002cee <__sclose>:
 8002cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf2:	f000 b813 	b.w	8002d1c <_close_r>
	...

08002cf8 <_write_r>:
 8002cf8:	b538      	push	{r3, r4, r5, lr}
 8002cfa:	4d07      	ldr	r5, [pc, #28]	; (8002d18 <_write_r+0x20>)
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	4608      	mov	r0, r1
 8002d00:	4611      	mov	r1, r2
 8002d02:	2200      	movs	r2, #0
 8002d04:	602a      	str	r2, [r5, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f7fe ff33 	bl	8001b72 <_write>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d102      	bne.n	8002d16 <_write_r+0x1e>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b103      	cbz	r3, 8002d16 <_write_r+0x1e>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
 8002d18:	20000140 	.word	0x20000140

08002d1c <_close_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4d06      	ldr	r5, [pc, #24]	; (8002d38 <_close_r+0x1c>)
 8002d20:	2300      	movs	r3, #0
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	f7fe ff3f 	bl	8001baa <_close>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_close_r+0x1a>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_close_r+0x1a>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000140 	.word	0x20000140

08002d3c <_fstat_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4d07      	ldr	r5, [pc, #28]	; (8002d5c <_fstat_r+0x20>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	4604      	mov	r4, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	602b      	str	r3, [r5, #0]
 8002d4a:	f7fe ff39 	bl	8001bc0 <_fstat>
 8002d4e:	1c43      	adds	r3, r0, #1
 8002d50:	d102      	bne.n	8002d58 <_fstat_r+0x1c>
 8002d52:	682b      	ldr	r3, [r5, #0]
 8002d54:	b103      	cbz	r3, 8002d58 <_fstat_r+0x1c>
 8002d56:	6023      	str	r3, [r4, #0]
 8002d58:	bd38      	pop	{r3, r4, r5, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000140 	.word	0x20000140

08002d60 <_isatty_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4d06      	ldr	r5, [pc, #24]	; (8002d7c <_isatty_r+0x1c>)
 8002d64:	2300      	movs	r3, #0
 8002d66:	4604      	mov	r4, r0
 8002d68:	4608      	mov	r0, r1
 8002d6a:	602b      	str	r3, [r5, #0]
 8002d6c:	f7fe ff37 	bl	8001bde <_isatty>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d102      	bne.n	8002d7a <_isatty_r+0x1a>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	b103      	cbz	r3, 8002d7a <_isatty_r+0x1a>
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	20000140 	.word	0x20000140

08002d80 <_lseek_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4d07      	ldr	r5, [pc, #28]	; (8002da0 <_lseek_r+0x20>)
 8002d84:	4604      	mov	r4, r0
 8002d86:	4608      	mov	r0, r1
 8002d88:	4611      	mov	r1, r2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	602a      	str	r2, [r5, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f7fe ff2f 	bl	8001bf2 <_lseek>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d102      	bne.n	8002d9e <_lseek_r+0x1e>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	b103      	cbz	r3, 8002d9e <_lseek_r+0x1e>
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	20000140 	.word	0x20000140

08002da4 <__malloc_lock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__malloc_lock+0x8>)
 8002da6:	f7ff bad9 	b.w	800235c <__retarget_lock_acquire_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000134 	.word	0x20000134

08002db0 <__malloc_unlock>:
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <__malloc_unlock+0x8>)
 8002db2:	f7ff bad4 	b.w	800235e <__retarget_lock_release_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000134 	.word	0x20000134

08002dbc <_read_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4d07      	ldr	r5, [pc, #28]	; (8002ddc <_read_r+0x20>)
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	4608      	mov	r0, r1
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	602a      	str	r2, [r5, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7fe feb4 	bl	8001b38 <_read>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_read_r+0x1e>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_read_r+0x1e>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	20000140 	.word	0x20000140

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
