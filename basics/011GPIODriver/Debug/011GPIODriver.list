
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c18  08002c18  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002c18  08002c18  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c18  08002c18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000005c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003fbc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e9b  00000000  00000000  0002405a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  00024ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a8  00000000  00000000  00025358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d15  00000000  00000000  00025700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d00  00000000  00000000  00028415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e961  00000000  00000000  0002e115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003ca76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001838  00000000  00000000  0003cac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002a84 	.word	0x08002a84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08002a84 	.word	0x08002a84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000090 	.word	0x20000090

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fb7b 	bl	80019cc <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 f84c 	bl	8001384 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f9f9 	bl	80006e4 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fc37 	bl	8000b66 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000094 	.word	0x20000094

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fb5b 	bl	80019cc <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 f834 	bl	8001384 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fc31 	bl	8000b88 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fc2c 	bl	8000b88 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fc6d 	bl	8000c14 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fc68 	bl	8000c14 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fc9c 	bl	8000c86 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fc97 	bl	8000c86 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fcd8 	bl	8000d12 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fcd3 	bl	8000d12 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 fcaa 	bl	8000cca <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 fca5 	bl	8000cca <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fff3 	bl	8001384 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fcd7 	bl	8000d5a <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fde8 	bl	8000f88 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fd22 	bl	8000e06 <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 faf3 	bl	80019cc <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f000 ffcc 	bl	8001384 <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f000 fbc9 	bl	8000b88 <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f000 fbc4 	bl	8000b88 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f000 fc05 	bl	8000c14 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f000 fc00 	bl	8000c14 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f000 fc34 	bl	8000c86 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f000 fc2f 	bl	8000c86 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f000 fc70 	bl	8000d12 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f000 fc6b 	bl	8000d12 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f000 fc42 	bl	8000cca <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f000 fc3d 	bl	8000cca <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f000 ff8b 	bl	8001384 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fc6f 	bl	8000d5a <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fd80 	bl	8000f88 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fcba 	bl	8000e06 <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fed7 	bl	8001264 <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <RTC_DS3231_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2204      	movs	r2, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fa7b 	bl	80019cc <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
 800052c:	e01a      	b.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d116      	bne.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 8000568:	7b3b      	ldrb	r3, [r7, #12]
 800056a:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	2204      	movs	r2, #4
 8000582:	f000 fc51 	bl	8000e28 <I2CMasterSendData>
	delay_us(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058a:	f7ff fe81 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2204      	movs	r2, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fa18 	bl	80019cc <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b9b      	ldrb	r3, [r3, #14]
 80005a0:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7a9b      	ldrb	r3, [r3, #10]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7adb      	ldrb	r3, [r3, #11]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b1b      	ldrb	r3, [r3, #12]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b5b      	ldrb	r3, [r3, #13]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 80005e4:	2303      	movs	r3, #3
 80005e6:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 80005ec:	7a3b      	ldrb	r3, [r7, #8]
 80005ee:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	2205      	movs	r2, #5
 8000606:	f000 fc0f 	bl	8000e28 <I2CMasterSendData>

	return;
 800060a:	bf00      	nop
}
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008
 8000618:	2000000c 	.word	0x2000000c

0800061c <RTC_DS3231_Display_Temp_LCD>:

	return;
}

void RTC_DS3231_Display_Temp_LCD(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af02      	add	r7, sp, #8

	uint8_t temp[2];
	uint8_t temp1_reg_address = 0x11;
 8000622:	2311      	movs	r3, #17
 8000624:	71bb      	strb	r3, [r7, #6]
	uint8_t temp2_reg_address = 0x12;
 8000626:	2312      	movs	r3, #18
 8000628:	717b      	strb	r3, [r7, #5]
	uint8_t temp_fraction, shift_len = 6;
 800062a:	2306      	movs	r3, #6
 800062c:	713b      	strb	r3, [r7, #4]

	//Reading the temperature registers
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&temp[0],1,temp1_reg_address,SlaveAddressRTC);
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <RTC_DS3231_Display_Temp_LCD+0xbc>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <RTC_DS3231_Display_Temp_LCD+0xc0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	4639      	mov	r1, r7
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	2201      	movs	r2, #1
 8000640:	f000 fcd4 	bl	8000fec <I2CMaster_DS3231_RTC_Read>
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&temp[1],1,temp2_reg_address,SlaveAddressRTC);
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <RTC_DS3231_Display_Temp_LCD+0xbc>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <RTC_DS3231_Display_Temp_LCD+0xc0>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	797c      	ldrb	r4, [r7, #5]
 800064e:	463a      	mov	r2, r7
 8000650:	1c51      	adds	r1, r2, #1
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4623      	mov	r3, r4
 8000656:	2201      	movs	r2, #1
 8000658:	f000 fcc8 	bl	8000fec <I2CMaster_DS3231_RTC_Read>

	//Converting the fractional part of temperature to decimal values
	if((temp[1] >> shift_len) == 0)
 800065c:	787b      	ldrb	r3, [r7, #1]
 800065e:	461a      	mov	r2, r3
 8000660:	793b      	ldrb	r3, [r7, #4]
 8000662:	fa42 f303 	asr.w	r3, r2, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d102      	bne.n	8000670 <RTC_DS3231_Display_Temp_LCD+0x54>
	{
		temp_fraction = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e01c      	b.n	80006aa <RTC_DS3231_Display_Temp_LCD+0x8e>
	}
	else if((temp[1] >> shift_len) == 1)
 8000670:	787b      	ldrb	r3, [r7, #1]
 8000672:	461a      	mov	r2, r3
 8000674:	793b      	ldrb	r3, [r7, #4]
 8000676:	fa42 f303 	asr.w	r3, r2, r3
 800067a:	2b01      	cmp	r3, #1
 800067c:	d102      	bne.n	8000684 <RTC_DS3231_Display_Temp_LCD+0x68>
	{
		temp_fraction = 25;
 800067e:	2319      	movs	r3, #25
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e012      	b.n	80006aa <RTC_DS3231_Display_Temp_LCD+0x8e>
	}
	else if((temp[1] >> shift_len) == 2)
 8000684:	787b      	ldrb	r3, [r7, #1]
 8000686:	461a      	mov	r2, r3
 8000688:	793b      	ldrb	r3, [r7, #4]
 800068a:	fa42 f303 	asr.w	r3, r2, r3
 800068e:	2b02      	cmp	r3, #2
 8000690:	d102      	bne.n	8000698 <RTC_DS3231_Display_Temp_LCD+0x7c>
	{
		temp_fraction = 50;
 8000692:	2332      	movs	r3, #50	; 0x32
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e008      	b.n	80006aa <RTC_DS3231_Display_Temp_LCD+0x8e>
	}
	else if((temp[1] >> shift_len) == 3)
 8000698:	787b      	ldrb	r3, [r7, #1]
 800069a:	461a      	mov	r2, r3
 800069c:	793b      	ldrb	r3, [r7, #4]
 800069e:	fa42 f303 	asr.w	r3, r2, r3
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d101      	bne.n	80006aa <RTC_DS3231_Display_Temp_LCD+0x8e>
	{
		temp_fraction = 75;
 80006a6:	234b      	movs	r3, #75	; 0x4b
 80006a8:	71fb      	strb	r3, [r7, #7]
	}

	lcd_pcf8574_clear_screen();
 80006aa:	f000 fe0d 	bl	80012c8 <lcd_pcf8574_clear_screen>
	delay_us(3000);
 80006ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006b2:	f7ff fded 	bl	8000290 <delay_us>
	lcd_pcf8574_return_home();
 80006b6:	f000 fe0e 	bl	80012d6 <lcd_pcf8574_return_home>
	delay_us(3000);
 80006ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006be:	f7ff fde7 	bl	8000290 <delay_us>
	printf("TEMP: %02d.%02d C",temp[0],temp_fraction);
 80006c2:	783b      	ldrb	r3, [r7, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <RTC_DS3231_Display_Temp_LCD+0xc4>)
 80006cc:	f001 fa64 	bl	8001b98 <iprintf>

	return;
 80006d0:	bf00      	nop
}
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	20000008 	.word	0x20000008
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	08002b10 	.word	0x08002b10

080006e4 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	6852      	ldr	r2, [r2, #4]
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	6892      	ldr	r2, [r2, #8]
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b5b      	ldrb	r3, [r3, #13]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d16a      	bne.n	80007de <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6a1a      	ldr	r2, [r3, #32]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f042 0201 	orr.w	r2, r2, #1
 8000716:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b9b      	ldrb	r3, [r3, #14]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d11c      	bne.n	800075a <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f022 0203 	bic.w	r2, r2, #3
 800072e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	6912      	ldr	r2, [r2, #16]
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000748:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000758:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7b9b      	ldrb	r3, [r3, #14]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d11c      	bne.n	800079c <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f022 0203 	bic.w	r2, r2, #3
 8000770:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	6912      	ldr	r2, [r2, #16]
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800078a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800079a:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7b9b      	ldrb	r3, [r3, #14]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d11c      	bne.n	80007de <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f022 0203 	bic.w	r2, r2, #3
 80007b2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6912      	ldr	r2, [r2, #16]
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	699a      	ldr	r2, [r3, #24]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80007dc:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7d1b      	ldrb	r3, [r3, #20]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 80bf 	bne.w	8000966 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7d5b      	ldrb	r3, [r3, #21]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d124      	bne.n	800083a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6992      	ldr	r2, [r2, #24]
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	699a      	ldr	r2, [r3, #24]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000818:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	699a      	ldr	r2, [r3, #24]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000828:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a1a      	ldr	r2, [r3, #32]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f042 0210 	orr.w	r2, r2, #16
 8000838:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7d5b      	ldrb	r3, [r3, #21]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d124      	bne.n	800088c <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	699a      	ldr	r2, [r3, #24]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000850:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	6992      	ldr	r2, [r2, #24]
 800085a:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	699a      	ldr	r2, [r3, #24]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800086a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	699a      	ldr	r2, [r3, #24]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800087a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6a1a      	ldr	r2, [r3, #32]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0210 	orr.w	r2, r2, #16
 800088a:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7d5b      	ldrb	r3, [r3, #21]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d124      	bne.n	80008de <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	699a      	ldr	r2, [r3, #24]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008a2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6992      	ldr	r2, [r2, #24]
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	699a      	ldr	r2, [r3, #24]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80008cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a1a      	ldr	r2, [r3, #32]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0210 	orr.w	r2, r2, #16
 80008dc:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7d5b      	ldrb	r3, [r3, #21]
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	d13f      	bne.n	8000966 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	699a      	ldr	r2, [r3, #24]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008f4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000904:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	699a      	ldr	r2, [r3, #24]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000914:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6a1a      	ldr	r2, [r3, #32]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 0220 	bic.w	r2, r2, #32
 8000924:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a1a      	ldr	r2, [r3, #32]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000934:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	699a      	ldr	r2, [r3, #24]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000944:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f042 0204 	orr.w	r2, r2, #4
 8000954:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a1a      	ldr	r2, [r3, #32]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0210 	orr.w	r2, r2, #16
 8000964:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d16a      	bne.n	8000a44 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6a1a      	ldr	r2, [r3, #32]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800097c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7f5b      	ldrb	r3, [r3, #29]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d11c      	bne.n	80009c0 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69da      	ldr	r2, [r3, #28]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0203 	bic.w	r2, r2, #3
 8000994:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	6a12      	ldr	r2, [r2, #32]
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009ae:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	69da      	ldr	r2, [r3, #28]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80009be:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7f5b      	ldrb	r3, [r3, #29]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d11c      	bne.n	8000a02 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69da      	ldr	r2, [r3, #28]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f022 0203 	bic.w	r2, r2, #3
 80009d6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6a12      	ldr	r2, [r2, #32]
 80009e0:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009f0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000a00:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7f5b      	ldrb	r3, [r3, #29]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d11c      	bne.n	8000a44 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0203 	bic.w	r2, r2, #3
 8000a18:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6a12      	ldr	r2, [r2, #32]
 8000a22:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a32:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000a42:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d16d      	bne.n	8000b2a <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a1a      	ldr	r2, [r3, #32]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a5c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d11c      	bne.n	8000aa2 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a76:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a90:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69da      	ldr	r2, [r3, #28]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000aa0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d11c      	bne.n	8000ae6 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000aba:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ac4:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ad4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	69da      	ldr	r2, [r3, #28]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000ae4:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d11c      	bne.n	8000b2a <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	69da      	ldr	r2, [r3, #28]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000afe:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b08:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000b18:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	69da      	ldr	r2, [r3, #28]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000b28:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7b1b      	ldrb	r3, [r3, #12]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d108      	bne.n	8000b44 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0201 	orr.w	r2, r2, #1
 8000b40:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 8000b42:	e00b      	b.n	8000b5c <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7b1b      	ldrb	r3, [r3, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d107      	bne.n	8000b5c <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68da      	ldr	r2, [r3, #12]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0201 	bic.w	r2, r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f042 0201 	orr.w	r2, r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
 8000b94:	4613      	mov	r3, r2
 8000b96:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	401a      	ands	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	78b9      	ldrb	r1, [r7, #2]
 8000bb8:	78fa      	ldrb	r2, [r7, #3]
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	601a      	str	r2, [r3, #0]

}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	78fa      	ldrb	r2, [r7, #3]
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	78b9      	ldrb	r1, [r7, #2]
 8000bfe:	78fa      	ldrb	r2, [r7, #3]
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	431a      	orrs	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	615a      	str	r2, [r3, #20]
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
 8000c20:	4613      	mov	r3, r2
 8000c22:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000c36:	7afa      	ldrb	r2, [r7, #11]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	7aba      	ldrb	r2, [r7, #10]
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	210f      	movs	r1, #15
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	43d2      	mvns	r2, r2
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	7afa      	ldrb	r2, [r7, #11]
 8000c50:	4019      	ands	r1, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3208      	adds	r2, #8
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000c5a:	7afa      	ldrb	r2, [r7, #11]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c64:	78b9      	ldrb	r1, [r7, #2]
 8000c66:	7aba      	ldrb	r2, [r7, #10]
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	4611      	mov	r1, r2
 8000c70:	7afa      	ldrb	r2, [r7, #11]
 8000c72:	4319      	orrs	r1, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3208      	adds	r2, #8
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70fb      	strb	r3, [r7, #3]
 8000c92:	4613      	mov	r3, r2
 8000c94:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	43d2      	mvns	r2, r2
 8000ca8:	401a      	ands	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	78b9      	ldrb	r1, [r7, #2]
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	605a      	str	r2, [r3, #4]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70fb      	strb	r3, [r7, #3]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	78b9      	ldrb	r1, [r7, #2]
 8000cfa:	78fa      	ldrb	r2, [r7, #3]
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	60da      	str	r2, [r3, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	0052      	lsls	r2, r2, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	78b9      	ldrb	r1, [r7, #2]
 8000d42:	78fa      	ldrb	r2, [r7, #3]
 8000d44:	0052      	lsls	r2, r2, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	609a      	str	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	03db      	lsls	r3, r3, #15
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d10d      	bne.n	8000dc2 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	69da      	ldr	r2, [r3, #28]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	039b      	lsls	r3, r3, #14
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000dca:	f023 030f 	bic.w	r3, r3, #15
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	431a      	orrs	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	601a      	str	r2, [r3, #0]

}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 f84c 	bl	8000ed8 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000e40:	bf00      	nop
 8000e42:	2101      	movs	r1, #1
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f000 f869 	bl	8000f1c <I2C_GetFlagStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f8      	beq.n	8000e42 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f86f 	bl	8000f46 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000e68:	bf00      	nop
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f855 	bl	8000f1c <I2C_GetFlagStatus>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f8      	beq.n	8000e6a <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 f874 	bl	8000f66 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000e7e:	e012      	b.n	8000ea6 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000e80:	bf00      	nop
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 f849 	bl	8000f1c <I2C_GetFlagStatus>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f8      	beq.n	8000e82 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
		Len--;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e9      	bne.n	8000e80 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000eac:	bf00      	nop
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 f833 	bl	8000f1c <I2C_GetFlagStatus>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d1f8      	bne.n	8000eae <I2CMasterSendData+0x86>
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 f82c 	bl	8000f1c <I2C_GetFlagStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d1f1      	bne.n	8000eae <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f815 	bl	8000efa <I2C_SendStopBit>

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	695a      	ldr	r2, [r3, #20]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	621a      	str	r2, [r3, #32]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff ff66 	bl	8000ed8 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 800100c:	bf00      	nop
 800100e:	2101      	movs	r1, #1
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff ff83 	bl	8000f1c <I2C_GetFlagStatus>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f8      	beq.n	800100e <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 800101c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	4619      	mov	r1, r3
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff ff88 	bl	8000f46 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001036:	bf00      	nop
 8001038:	2102      	movs	r1, #2
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff ff6e 	bl	8000f1c <I2C_GetFlagStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f8      	beq.n	8001038 <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff ff8d 	bl	8000f66 <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 800104c:	2300      	movs	r3, #0
 800104e:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8001050:	e015      	b.n	800107e <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001052:	bf00      	nop
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ff60 	bl	8000f1c <I2C_GetFlagStatus>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f8      	beq.n	8001054 <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001062:	7fbb      	ldrb	r3, [r7, #30]
 8001064:	3320      	adds	r3, #32
 8001066:	443b      	add	r3, r7
 8001068:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800106c:	461a      	mov	r2, r3
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	611a      	str	r2, [r3, #16]
		i++;
 8001072:	7fbb      	ldrb	r3, [r7, #30]
 8001074:	3301      	adds	r3, #1
 8001076:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	3b01      	subs	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e6      	bne.n	8001052 <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001084:	bf00      	nop
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ff47 	bl	8000f1c <I2C_GetFlagStatus>
 800108e:	4603      	mov	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d1f8      	bne.n	8001086 <I2CMaster_DS3231_RTC_Read+0x9a>
 8001094:	2104      	movs	r1, #4
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff ff40 	bl	8000f1c <I2C_GetFlagStatus>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d1f1      	bne.n	8001086 <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff ff18 	bl	8000ed8 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 80010a8:	bf00      	nop
 80010aa:	2101      	movs	r1, #1
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ff35 	bl	8000f1c <I2C_GetFlagStatus>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f8      	beq.n	80010aa <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 80010b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	4619      	mov	r1, r3
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff ff3a 	bl	8000f46 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 80010d2:	bf00      	nop
 80010d4:	2102      	movs	r1, #2
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff20 	bl	8000f1c <I2C_GetFlagStatus>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f8      	beq.n	80010d4 <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff ff3f 	bl	8000f66 <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d919      	bls.n	8001122 <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff5a 	bl	8000fa8 <I2CEnableAck>
		while(Len >= 2)
 80010f4:	e012      	b.n	800111c <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 80010f6:	bf00      	nop
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ff0e 	bl	8000f1c <I2C_GetFlagStatus>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f8      	beq.n	80010f8 <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3301      	adds	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
			Len--;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3b01      	subs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d8e9      	bhi.n	80010f6 <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d115      	bne.n	8001154 <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff ff4e 	bl	8000fca <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 800112e:	bf00      	nop
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fef2 	bl	8000f1c <I2C_GetFlagStatus>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f8      	beq.n	8001130 <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
		Len--;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff fed0 	bl	8000efa <I2C_SendStopBit>

	return;
 800115a:	bf00      	nop
}
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8001166:	f24c 3050 	movw	r0, #50000	; 0xc350
 800116a:	f7ff f891 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800116e:	2030      	movs	r0, #48	; 0x30
 8001170:	f000 f846 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001178:	f7ff f88a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800117c:	2030      	movs	r0, #48	; 0x30
 800117e:	f000 f83f 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001182:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001186:	f7ff f883 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800118a:	2030      	movs	r0, #48	; 0x30
 800118c:	f000 f838 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8001190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001194:	f7ff f87c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8001198:	2020      	movs	r0, #32
 800119a:	f000 f831 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 800119e:	f241 3088 	movw	r0, #5000	; 0x1388
 80011a2:	f7ff f875 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011a6:	2028      	movs	r0, #40	; 0x28
 80011a8:	f000 f82a 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011b0:	f7ff f86e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80011b4:	2008      	movs	r0, #8
 80011b6:	f000 f823 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011be:	f7ff f867 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 f81c 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011cc:	f7ff f860 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 f815 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011da:	f7ff f859 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011de:	2006      	movs	r0, #6
 80011e0:	f000 f80e 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011e8:	f7ff f852 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011ec:	200c      	movs	r0, #12
 80011ee:	f000 f807 	bl	8001200 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80011f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011f6:	f7ff f84b 	bl	8000290 <delay_us>

	return;
 80011fa:	bf00      	nop
}
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f043 030c 	orr.w	r3, r3, #12
 800121e:	b2db      	uxtb	r3, r3
 8001220:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	b2db      	uxtb	r3, r3
 800122a:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	f043 030c 	orr.w	r3, r3, #12
 8001232:	b2db      	uxtb	r3, r3
 8001234:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <lcd_pcf8574_send_cmd+0x5c>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <lcd_pcf8574_send_cmd+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f107 0108 	add.w	r1, r7, #8
 800124c:	2204      	movs	r2, #4
 800124e:	f7ff fdeb 	bl	8000e28 <I2CMasterSendData>

	return;
 8001252:	bf00      	nop
}
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004

08001264 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f023 030f 	bic.w	r3, r3, #15
 8001274:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	f043 030d 	orr.w	r3, r3, #13
 8001282:	b2db      	uxtb	r3, r3
 8001284:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f043 0309 	orr.w	r3, r3, #9
 800128c:	b2db      	uxtb	r3, r3
 800128e:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	f043 030d 	orr.w	r3, r3, #13
 8001296:	b2db      	uxtb	r3, r3
 8001298:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	f043 0309 	orr.w	r3, r3, #9
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <lcd_pcf8574_send_data+0x5c>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <lcd_pcf8574_send_data+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f107 0108 	add.w	r1, r7, #8
 80012b0:	2204      	movs	r2, #4
 80012b2:	f7ff fdb9 	bl	8000e28 <I2CMasterSendData>

	return;
 80012b6:	bf00      	nop
}
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff97 	bl	8001200 <lcd_pcf8574_send_cmd>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff ff90 	bl	8001200 <lcd_pcf8574_send_cmd>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d108      	bne.n	800130c <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	2b27      	cmp	r3, #39	; 0x27
 80012fe:	d802      	bhi.n	8001306 <lcd_pcf8574_set_position+0x22>
			position = col;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e011      	b.n	800132a <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e00e      	b.n	800132a <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d109      	bne.n	8001326 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b27      	cmp	r3, #39	; 0x27
 8001316:	d803      	bhi.n	8001320 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	3340      	adds	r3, #64	; 0x40
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e004      	b.n	800132a <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e001      	b.n	800132a <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001330:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff63 	bl	8001200 <lcd_pcf8574_send_cmd>

	return;
 800133a:	bf00      	nop
}
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <RTC_Alarm_IRQHandler+0x24>)
 800134c:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 800134e:	f000 f80d 	bl	800136c <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]

	return;
 800135e:	bf00      	nop
}
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40013c14 	.word	0x40013c14

0800136c <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001370:	2201      	movs	r2, #1
 8001372:	210f      	movs	r1, #15
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001376:	f7ff fc2b 	bl	8000bd0 <GPIOWritePin>

	return;
 800137a:	bf00      	nop
}
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020c00 	.word	0x40020c00

08001384 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a88      	ldr	r2, [pc, #544]	; (80015b0 <EnablePeriClk+0x22c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d108      	bne.n	80013a6 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001394:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <EnablePeriClk+0x230>)
 8001396:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80013a4:	e19b      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a83      	ldr	r2, [pc, #524]	; (80015b8 <EnablePeriClk+0x234>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d108      	bne.n	80013c0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <EnablePeriClk+0x230>)
 80013b0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	e18e      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a7e      	ldr	r2, [pc, #504]	; (80015bc <EnablePeriClk+0x238>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d108      	bne.n	80013da <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <EnablePeriClk+0x230>)
 80013ca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f043 0204 	orr.w	r2, r3, #4
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	e181      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a78      	ldr	r2, [pc, #480]	; (80015c0 <EnablePeriClk+0x23c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d108      	bne.n	80013f4 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <EnablePeriClk+0x230>)
 80013e4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f043 0208 	orr.w	r2, r3, #8
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	e174      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a73      	ldr	r2, [pc, #460]	; (80015c4 <EnablePeriClk+0x240>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d108      	bne.n	800140e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013fc:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <EnablePeriClk+0x230>)
 80013fe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	e167      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <EnablePeriClk+0x244>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d108      	bne.n	8001428 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <EnablePeriClk+0x230>)
 8001418:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f043 0220 	orr.w	r2, r3, #32
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	e15a      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a68      	ldr	r2, [pc, #416]	; (80015cc <EnablePeriClk+0x248>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d108      	bne.n	8001442 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <EnablePeriClk+0x230>)
 8001432:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	e14d      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a62      	ldr	r2, [pc, #392]	; (80015d0 <EnablePeriClk+0x24c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d108      	bne.n	800145c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <EnablePeriClk+0x230>)
 800144c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	e140      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <EnablePeriClk+0x250>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d108      	bne.n	8001476 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <EnablePeriClk+0x230>)
 8001466:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	e133      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <EnablePeriClk+0x254>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d108      	bne.n	8001490 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <EnablePeriClk+0x258>)
 8001480:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	e126      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a53      	ldr	r2, [pc, #332]	; (80015e0 <EnablePeriClk+0x25c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d108      	bne.n	80014aa <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <EnablePeriClk+0x260>)
 800149a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	e119      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <EnablePeriClk+0x264>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d108      	bne.n	80014c4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <EnablePeriClk+0x260>)
 80014b4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	e10c      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a49      	ldr	r2, [pc, #292]	; (80015ec <EnablePeriClk+0x268>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d108      	bne.n	80014de <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80014cc:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <EnablePeriClk+0x260>)
 80014ce:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	e0ff      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a43      	ldr	r2, [pc, #268]	; (80015f0 <EnablePeriClk+0x26c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d108      	bne.n	80014f8 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <EnablePeriClk+0x260>)
 80014e8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	e0f2      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3e      	ldr	r2, [pc, #248]	; (80015f4 <EnablePeriClk+0x270>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d108      	bne.n	8001512 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <EnablePeriClk+0x260>)
 8001502:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	e0e5      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <EnablePeriClk+0x274>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d108      	bne.n	800152c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <EnablePeriClk+0x258>)
 800151c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f043 0210 	orr.w	r2, r3, #16
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	e0d8      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a33      	ldr	r2, [pc, #204]	; (80015fc <EnablePeriClk+0x278>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d108      	bne.n	8001546 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <EnablePeriClk+0x260>)
 8001536:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	e0cb      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <EnablePeriClk+0x27c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d108      	bne.n	8001560 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <EnablePeriClk+0x260>)
 8001550:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	e0be      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <EnablePeriClk+0x280>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d108      	bne.n	800157a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <EnablePeriClk+0x260>)
 800156a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	e0b1      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <EnablePeriClk+0x284>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d108      	bne.n	8001594 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <EnablePeriClk+0x260>)
 8001584:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	e0a4      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <EnablePeriClk+0x288>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d139      	bne.n	8001610 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <EnablePeriClk+0x258>)
 800159e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	e097      	b.n	80016de <EnablePeriClk+0x35a>
 80015ae:	bf00      	nop
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40023830 	.word	0x40023830
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021c00 	.word	0x40021c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40013000 	.word	0x40013000
 80015dc:	40023844 	.word	0x40023844
 80015e0:	40003800 	.word	0x40003800
 80015e4:	40023840 	.word	0x40023840
 80015e8:	40003c00 	.word	0x40003c00
 80015ec:	40005400 	.word	0x40005400
 80015f0:	40005800 	.word	0x40005800
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40004400 	.word	0x40004400
 8001600:	40004800 	.word	0x40004800
 8001604:	40004c00 	.word	0x40004c00
 8001608:	40005000 	.word	0x40005000
 800160c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <EnablePeriClk+0x364>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d108      	bne.n	800162a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <EnablePeriClk+0x368>)
 800161a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	e059      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <EnablePeriClk+0x36c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d108      	bne.n	8001644 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <EnablePeriClk+0x368>)
 8001634:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]
}
 8001642:	e04c      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <EnablePeriClk+0x370>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d108      	bne.n	800165e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <EnablePeriClk+0x374>)
 800164e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	e03f      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <EnablePeriClk+0x378>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d108      	bne.n	8001678 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <EnablePeriClk+0x374>)
 8001668:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	e032      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167e:	d108      	bne.n	8001692 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <EnablePeriClk+0x368>)
 8001682:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	e025      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <EnablePeriClk+0x37c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d108      	bne.n	80016ac <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <EnablePeriClk+0x368>)
 800169c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f043 0202 	orr.w	r2, r3, #2
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	e018      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <EnablePeriClk+0x380>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d108      	bne.n	80016c6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <EnablePeriClk+0x368>)
 80016b6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	e00b      	b.n	80016de <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <EnablePeriClk+0x384>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d107      	bne.n	80016de <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <EnablePeriClk+0x368>)
 80016d0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f043 0208 	orr.w	r2, r3, #8
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40001000 	.word	0x40001000
 80016ec:	40023840 	.word	0x40023840
 80016f0:	40001400 	.word	0x40001400
 80016f4:	40026000 	.word	0x40026000
 80016f8:	40023830 	.word	0x40023830
 80016fc:	40026400 	.word	0x40026400
 8001700:	40000400 	.word	0x40000400
 8001704:	40000800 	.word	0x40000800
 8001708:	40000c00 	.word	0x40000c00

0800170c <main>:
#include "ds3231_rtc_driver.h"
#include "common_utils.h"
#include "external_interrupt_config.h"

int main(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
	struct RTC_DS3231_Config_t ds3231_rtc_config;
	uint32_t count = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]

	//Configure the Timer
	configure_delay_timer();
 8001716:	f7fe fdd3 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 800171a:	f7fe fdf3 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <main+0xb4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fa5e 	bl	8001be8 <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 800172c:	4825      	ldr	r0, [pc, #148]	; (80017c4 <main+0xb8>)
 800172e:	f7fe fdaf 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001732:	f7ff fd16 	bl	8001162 <lcd_pcf8574_init>
	delay_us(100000);
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <main+0xbc>)
 8001738:	f7fe fdaa 	bl	8000290 <delay_us>

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 800173c:	f7fe fe4a 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the parameters of the RTC
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	220f      	movs	r2, #15
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f940 	bl	80019cc <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_config.RTCClockMinutesUnits = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_config.RTCClockMinutesTens = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_config.RTCClockHoursUnits = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_config.RTCClockHoursTens = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8001764:	2301      	movs	r3, #1
 8001766:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_config.RTCClockAMPM = DS3231_RTC_HOUR_PM;
 8001768:	2301      	movs	r3, #1
 800176a:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_config.RTCClockDateUnits = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_config.RTCClockDateTens = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_config.RTCClockMonthTens = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_config.RTCClockYearUnits = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_config.RTCClockYearTens = 2;
 8001780:	2302      	movs	r3, #2
 8001782:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_config.RTCClockDayOfWeek = RTC_CLK_DOW_THU;
 8001784:	2304      	movs	r3, #4
 8001786:	74bb      	strb	r3, [r7, #18]

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe98 	bl	80004c0 <RTC_DS3231_Config_Calendar>
	delay_us(1000000);
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <main+0xb8>)
 8001792:	f7fe fd7d 	bl	8000290 <delay_us>

	while(1)
	{
		RTC_DS3231_Display_Temp_LCD();
 8001796:	f7fe ff41 	bl	800061c <RTC_DS3231_Display_Temp_LCD>
		lcd_pcf8574_set_position(1,0);
 800179a:	2100      	movs	r1, #0
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff fda1 	bl	80012e4 <lcd_pcf8574_set_position>
		delay_us(500);
 80017a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a6:	f7fe fd73 	bl	8000290 <delay_us>
		printf("Iteration: %ld", ++count);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	6979      	ldr	r1, [r7, #20]
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <main+0xc0>)
 80017b4:	f000 f9f0 	bl	8001b98 <iprintf>
		delay_us(64000000);
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <main+0xc4>)
 80017ba:	f7fe fd69 	bl	8000290 <delay_us>
		RTC_DS3231_Display_Temp_LCD();
 80017be:	e7ea      	b.n	8001796 <main+0x8a>
 80017c0:	20000010 	.word	0x20000010
 80017c4:	000f4240 	.word	0x000f4240
 80017c8:	000186a0 	.word	0x000186a0
 80017cc:	08002b70 	.word	0x08002b70
 80017d0:	03d09000 	.word	0x03d09000

080017d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
  }

  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe3b 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
  }
  return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186c:	605a      	str	r2, [r3, #4]
  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188e:	b480      	push	{r7}
 8001890:	b085      	sub	sp, #20
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f000 f846 	bl	8001968 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	200000bc 	.word	0x200000bc
 8001910:	200000d0 	.word	0x200000d0

08001914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001916:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001918:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001942:	f000 f817 	bl	8001974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001946:	f7ff fee1 	bl	800170c <main>

0800194a <LoopForever>:

LoopForever:
  b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   r0, =_estack
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001958:	08002c20 	.word	0x08002c20
  ldr r2, =_sbss
 800195c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001960:	200000d0 	.word	0x200000d0

08001964 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <__errno>:
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <__errno+0x8>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000010 	.word	0x20000010

08001974 <__libc_init_array>:
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4d0d      	ldr	r5, [pc, #52]	; (80019ac <__libc_init_array+0x38>)
 8001978:	4c0d      	ldr	r4, [pc, #52]	; (80019b0 <__libc_init_array+0x3c>)
 800197a:	1b64      	subs	r4, r4, r5
 800197c:	10a4      	asrs	r4, r4, #2
 800197e:	2600      	movs	r6, #0
 8001980:	42a6      	cmp	r6, r4
 8001982:	d109      	bne.n	8001998 <__libc_init_array+0x24>
 8001984:	4d0b      	ldr	r5, [pc, #44]	; (80019b4 <__libc_init_array+0x40>)
 8001986:	4c0c      	ldr	r4, [pc, #48]	; (80019b8 <__libc_init_array+0x44>)
 8001988:	f001 f87c 	bl	8002a84 <_init>
 800198c:	1b64      	subs	r4, r4, r5
 800198e:	10a4      	asrs	r4, r4, #2
 8001990:	2600      	movs	r6, #0
 8001992:	42a6      	cmp	r6, r4
 8001994:	d105      	bne.n	80019a2 <__libc_init_array+0x2e>
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	f855 3b04 	ldr.w	r3, [r5], #4
 800199c:	4798      	blx	r3
 800199e:	3601      	adds	r6, #1
 80019a0:	e7ee      	b.n	8001980 <__libc_init_array+0xc>
 80019a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a6:	4798      	blx	r3
 80019a8:	3601      	adds	r6, #1
 80019aa:	e7f2      	b.n	8001992 <__libc_init_array+0x1e>
 80019ac:	08002c18 	.word	0x08002c18
 80019b0:	08002c18 	.word	0x08002c18
 80019b4:	08002c18 	.word	0x08002c18
 80019b8:	08002c1c 	.word	0x08002c1c

080019bc <malloc>:
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <malloc+0xc>)
 80019be:	4601      	mov	r1, r0
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f000 b875 	b.w	8001ab0 <_malloc_r>
 80019c6:	bf00      	nop
 80019c8:	20000010 	.word	0x20000010

080019cc <memset>:
 80019cc:	4402      	add	r2, r0
 80019ce:	4603      	mov	r3, r0
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d100      	bne.n	80019d6 <memset+0xa>
 80019d4:	4770      	bx	lr
 80019d6:	f803 1b01 	strb.w	r1, [r3], #1
 80019da:	e7f9      	b.n	80019d0 <memset+0x4>

080019dc <_free_r>:
 80019dc:	b538      	push	{r3, r4, r5, lr}
 80019de:	4605      	mov	r5, r0
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d041      	beq.n	8001a68 <_free_r+0x8c>
 80019e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019e8:	1f0c      	subs	r4, r1, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bfb8      	it	lt
 80019ee:	18e4      	addlt	r4, r4, r3
 80019f0:	f000 fca4 	bl	800233c <__malloc_lock>
 80019f4:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <_free_r+0x90>)
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	b933      	cbnz	r3, 8001a08 <_free_r+0x2c>
 80019fa:	6063      	str	r3, [r4, #4]
 80019fc:	6014      	str	r4, [r2, #0]
 80019fe:	4628      	mov	r0, r5
 8001a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a04:	f000 bca0 	b.w	8002348 <__malloc_unlock>
 8001a08:	42a3      	cmp	r3, r4
 8001a0a:	d908      	bls.n	8001a1e <_free_r+0x42>
 8001a0c:	6820      	ldr	r0, [r4, #0]
 8001a0e:	1821      	adds	r1, r4, r0
 8001a10:	428b      	cmp	r3, r1
 8001a12:	bf01      	itttt	eq
 8001a14:	6819      	ldreq	r1, [r3, #0]
 8001a16:	685b      	ldreq	r3, [r3, #4]
 8001a18:	1809      	addeq	r1, r1, r0
 8001a1a:	6021      	streq	r1, [r4, #0]
 8001a1c:	e7ed      	b.n	80019fa <_free_r+0x1e>
 8001a1e:	461a      	mov	r2, r3
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	b10b      	cbz	r3, 8001a28 <_free_r+0x4c>
 8001a24:	42a3      	cmp	r3, r4
 8001a26:	d9fa      	bls.n	8001a1e <_free_r+0x42>
 8001a28:	6811      	ldr	r1, [r2, #0]
 8001a2a:	1850      	adds	r0, r2, r1
 8001a2c:	42a0      	cmp	r0, r4
 8001a2e:	d10b      	bne.n	8001a48 <_free_r+0x6c>
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	4401      	add	r1, r0
 8001a34:	1850      	adds	r0, r2, r1
 8001a36:	4283      	cmp	r3, r0
 8001a38:	6011      	str	r1, [r2, #0]
 8001a3a:	d1e0      	bne.n	80019fe <_free_r+0x22>
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6053      	str	r3, [r2, #4]
 8001a42:	4401      	add	r1, r0
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	e7da      	b.n	80019fe <_free_r+0x22>
 8001a48:	d902      	bls.n	8001a50 <_free_r+0x74>
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	602b      	str	r3, [r5, #0]
 8001a4e:	e7d6      	b.n	80019fe <_free_r+0x22>
 8001a50:	6820      	ldr	r0, [r4, #0]
 8001a52:	1821      	adds	r1, r4, r0
 8001a54:	428b      	cmp	r3, r1
 8001a56:	bf04      	itt	eq
 8001a58:	6819      	ldreq	r1, [r3, #0]
 8001a5a:	685b      	ldreq	r3, [r3, #4]
 8001a5c:	6063      	str	r3, [r4, #4]
 8001a5e:	bf04      	itt	eq
 8001a60:	1809      	addeq	r1, r1, r0
 8001a62:	6021      	streq	r1, [r4, #0]
 8001a64:	6054      	str	r4, [r2, #4]
 8001a66:	e7ca      	b.n	80019fe <_free_r+0x22>
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000c0 	.word	0x200000c0

08001a70 <sbrk_aligned>:
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4e0e      	ldr	r6, [pc, #56]	; (8001aac <sbrk_aligned+0x3c>)
 8001a74:	460c      	mov	r4, r1
 8001a76:	6831      	ldr	r1, [r6, #0]
 8001a78:	4605      	mov	r5, r0
 8001a7a:	b911      	cbnz	r1, 8001a82 <sbrk_aligned+0x12>
 8001a7c:	f000 f8a4 	bl	8001bc8 <_sbrk_r>
 8001a80:	6030      	str	r0, [r6, #0]
 8001a82:	4621      	mov	r1, r4
 8001a84:	4628      	mov	r0, r5
 8001a86:	f000 f89f 	bl	8001bc8 <_sbrk_r>
 8001a8a:	1c43      	adds	r3, r0, #1
 8001a8c:	d00a      	beq.n	8001aa4 <sbrk_aligned+0x34>
 8001a8e:	1cc4      	adds	r4, r0, #3
 8001a90:	f024 0403 	bic.w	r4, r4, #3
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d007      	beq.n	8001aa8 <sbrk_aligned+0x38>
 8001a98:	1a21      	subs	r1, r4, r0
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f000 f894 	bl	8001bc8 <_sbrk_r>
 8001aa0:	3001      	adds	r0, #1
 8001aa2:	d101      	bne.n	8001aa8 <sbrk_aligned+0x38>
 8001aa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	200000c4 	.word	0x200000c4

08001ab0 <_malloc_r>:
 8001ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab4:	1ccd      	adds	r5, r1, #3
 8001ab6:	f025 0503 	bic.w	r5, r5, #3
 8001aba:	3508      	adds	r5, #8
 8001abc:	2d0c      	cmp	r5, #12
 8001abe:	bf38      	it	cc
 8001ac0:	250c      	movcc	r5, #12
 8001ac2:	2d00      	cmp	r5, #0
 8001ac4:	4607      	mov	r7, r0
 8001ac6:	db01      	blt.n	8001acc <_malloc_r+0x1c>
 8001ac8:	42a9      	cmp	r1, r5
 8001aca:	d905      	bls.n	8001ad8 <_malloc_r+0x28>
 8001acc:	230c      	movs	r3, #12
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad8:	4e2e      	ldr	r6, [pc, #184]	; (8001b94 <_malloc_r+0xe4>)
 8001ada:	f000 fc2f 	bl	800233c <__malloc_lock>
 8001ade:	6833      	ldr	r3, [r6, #0]
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	bb34      	cbnz	r4, 8001b32 <_malloc_r+0x82>
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	f7ff ffc2 	bl	8001a70 <sbrk_aligned>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	4604      	mov	r4, r0
 8001af0:	d14d      	bne.n	8001b8e <_malloc_r+0xde>
 8001af2:	6834      	ldr	r4, [r6, #0]
 8001af4:	4626      	mov	r6, r4
 8001af6:	2e00      	cmp	r6, #0
 8001af8:	d140      	bne.n	8001b7c <_malloc_r+0xcc>
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	4631      	mov	r1, r6
 8001afe:	4638      	mov	r0, r7
 8001b00:	eb04 0803 	add.w	r8, r4, r3
 8001b04:	f000 f860 	bl	8001bc8 <_sbrk_r>
 8001b08:	4580      	cmp	r8, r0
 8001b0a:	d13a      	bne.n	8001b82 <_malloc_r+0xd2>
 8001b0c:	6821      	ldr	r1, [r4, #0]
 8001b0e:	3503      	adds	r5, #3
 8001b10:	1a6d      	subs	r5, r5, r1
 8001b12:	f025 0503 	bic.w	r5, r5, #3
 8001b16:	3508      	adds	r5, #8
 8001b18:	2d0c      	cmp	r5, #12
 8001b1a:	bf38      	it	cc
 8001b1c:	250c      	movcc	r5, #12
 8001b1e:	4629      	mov	r1, r5
 8001b20:	4638      	mov	r0, r7
 8001b22:	f7ff ffa5 	bl	8001a70 <sbrk_aligned>
 8001b26:	3001      	adds	r0, #1
 8001b28:	d02b      	beq.n	8001b82 <_malloc_r+0xd2>
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	442b      	add	r3, r5
 8001b2e:	6023      	str	r3, [r4, #0]
 8001b30:	e00e      	b.n	8001b50 <_malloc_r+0xa0>
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	1b52      	subs	r2, r2, r5
 8001b36:	d41e      	bmi.n	8001b76 <_malloc_r+0xc6>
 8001b38:	2a0b      	cmp	r2, #11
 8001b3a:	d916      	bls.n	8001b6a <_malloc_r+0xba>
 8001b3c:	1961      	adds	r1, r4, r5
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	6025      	str	r5, [r4, #0]
 8001b42:	bf18      	it	ne
 8001b44:	6059      	strne	r1, [r3, #4]
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	bf08      	it	eq
 8001b4a:	6031      	streq	r1, [r6, #0]
 8001b4c:	5162      	str	r2, [r4, r5]
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	4638      	mov	r0, r7
 8001b52:	f104 060b 	add.w	r6, r4, #11
 8001b56:	f000 fbf7 	bl	8002348 <__malloc_unlock>
 8001b5a:	f026 0607 	bic.w	r6, r6, #7
 8001b5e:	1d23      	adds	r3, r4, #4
 8001b60:	1af2      	subs	r2, r6, r3
 8001b62:	d0b6      	beq.n	8001ad2 <_malloc_r+0x22>
 8001b64:	1b9b      	subs	r3, r3, r6
 8001b66:	50a3      	str	r3, [r4, r2]
 8001b68:	e7b3      	b.n	8001ad2 <_malloc_r+0x22>
 8001b6a:	6862      	ldr	r2, [r4, #4]
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	bf0c      	ite	eq
 8001b70:	6032      	streq	r2, [r6, #0]
 8001b72:	605a      	strne	r2, [r3, #4]
 8001b74:	e7ec      	b.n	8001b50 <_malloc_r+0xa0>
 8001b76:	4623      	mov	r3, r4
 8001b78:	6864      	ldr	r4, [r4, #4]
 8001b7a:	e7b2      	b.n	8001ae2 <_malloc_r+0x32>
 8001b7c:	4634      	mov	r4, r6
 8001b7e:	6876      	ldr	r6, [r6, #4]
 8001b80:	e7b9      	b.n	8001af6 <_malloc_r+0x46>
 8001b82:	230c      	movs	r3, #12
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4638      	mov	r0, r7
 8001b88:	f000 fbde 	bl	8002348 <__malloc_unlock>
 8001b8c:	e7a1      	b.n	8001ad2 <_malloc_r+0x22>
 8001b8e:	6025      	str	r5, [r4, #0]
 8001b90:	e7de      	b.n	8001b50 <_malloc_r+0xa0>
 8001b92:	bf00      	nop
 8001b94:	200000c0 	.word	0x200000c0

08001b98 <iprintf>:
 8001b98:	b40f      	push	{r0, r1, r2, r3}
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <iprintf+0x2c>)
 8001b9c:	b513      	push	{r0, r1, r4, lr}
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	b124      	cbz	r4, 8001bac <iprintf+0x14>
 8001ba2:	69a3      	ldr	r3, [r4, #24]
 8001ba4:	b913      	cbnz	r3, 8001bac <iprintf+0x14>
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f000 fac2 	bl	8002130 <__sinit>
 8001bac:	ab05      	add	r3, sp, #20
 8001bae:	9a04      	ldr	r2, [sp, #16]
 8001bb0:	68a1      	ldr	r1, [r4, #8]
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f000 fbf5 	bl	80023a4 <_vfiprintf_r>
 8001bba:	b002      	add	sp, #8
 8001bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bc0:	b004      	add	sp, #16
 8001bc2:	4770      	bx	lr
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <_sbrk_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d06      	ldr	r5, [pc, #24]	; (8001be4 <_sbrk_r+0x1c>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	602b      	str	r3, [r5, #0]
 8001bd4:	f7ff fe68 	bl	80018a8 <_sbrk>
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d102      	bne.n	8001be2 <_sbrk_r+0x1a>
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	b103      	cbz	r3, 8001be2 <_sbrk_r+0x1a>
 8001be0:	6023      	str	r3, [r4, #0]
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	200000cc 	.word	0x200000cc

08001be8 <setbuf>:
 8001be8:	2900      	cmp	r1, #0
 8001bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bee:	bf0c      	ite	eq
 8001bf0:	2202      	moveq	r2, #2
 8001bf2:	2200      	movne	r2, #0
 8001bf4:	f000 b800 	b.w	8001bf8 <setvbuf>

08001bf8 <setvbuf>:
 8001bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <setvbuf+0x17c>)
 8001c00:	681f      	ldr	r7, [r3, #0]
 8001c02:	4604      	mov	r4, r0
 8001c04:	460e      	mov	r6, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	b127      	cbz	r7, 8001c14 <setvbuf+0x1c>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	b913      	cbnz	r3, 8001c14 <setvbuf+0x1c>
 8001c0e:	4638      	mov	r0, r7
 8001c10:	f000 fa8e 	bl	8002130 <__sinit>
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <setvbuf+0x180>)
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d167      	bne.n	8001cea <setvbuf+0xf2>
 8001c1a:	687c      	ldr	r4, [r7, #4]
 8001c1c:	f1b8 0f02 	cmp.w	r8, #2
 8001c20:	d006      	beq.n	8001c30 <setvbuf+0x38>
 8001c22:	f1b8 0f01 	cmp.w	r8, #1
 8001c26:	f200 809f 	bhi.w	8001d68 <setvbuf+0x170>
 8001c2a:	2d00      	cmp	r5, #0
 8001c2c:	f2c0 809c 	blt.w	8001d68 <setvbuf+0x170>
 8001c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c32:	07db      	lsls	r3, r3, #31
 8001c34:	d405      	bmi.n	8001c42 <setvbuf+0x4a>
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	0598      	lsls	r0, r3, #22
 8001c3a:	d402      	bmi.n	8001c42 <setvbuf+0x4a>
 8001c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c3e:	f000 fb15 	bl	800226c <__retarget_lock_acquire_recursive>
 8001c42:	4621      	mov	r1, r4
 8001c44:	4638      	mov	r0, r7
 8001c46:	f000 f9df 	bl	8002008 <_fflush_r>
 8001c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c4c:	b141      	cbz	r1, 8001c60 <setvbuf+0x68>
 8001c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c52:	4299      	cmp	r1, r3
 8001c54:	d002      	beq.n	8001c5c <setvbuf+0x64>
 8001c56:	4638      	mov	r0, r7
 8001c58:	f7ff fec0 	bl	80019dc <_free_r>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6363      	str	r3, [r4, #52]	; 0x34
 8001c60:	2300      	movs	r3, #0
 8001c62:	61a3      	str	r3, [r4, #24]
 8001c64:	6063      	str	r3, [r4, #4]
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	0619      	lsls	r1, r3, #24
 8001c6a:	d503      	bpl.n	8001c74 <setvbuf+0x7c>
 8001c6c:	6921      	ldr	r1, [r4, #16]
 8001c6e:	4638      	mov	r0, r7
 8001c70:	f7ff feb4 	bl	80019dc <_free_r>
 8001c74:	89a3      	ldrh	r3, [r4, #12]
 8001c76:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f1b8 0f02 	cmp.w	r8, #2
 8001c82:	81a3      	strh	r3, [r4, #12]
 8001c84:	d06c      	beq.n	8001d60 <setvbuf+0x168>
 8001c86:	ab01      	add	r3, sp, #4
 8001c88:	466a      	mov	r2, sp
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	f000 faef 	bl	8002270 <__swhatbuf_r>
 8001c92:	89a3      	ldrh	r3, [r4, #12]
 8001c94:	4318      	orrs	r0, r3
 8001c96:	81a0      	strh	r0, [r4, #12]
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	d130      	bne.n	8001cfe <setvbuf+0x106>
 8001c9c:	9d00      	ldr	r5, [sp, #0]
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f7ff fe8c 	bl	80019bc <malloc>
 8001ca4:	4606      	mov	r6, r0
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d155      	bne.n	8001d56 <setvbuf+0x15e>
 8001caa:	f8dd 9000 	ldr.w	r9, [sp]
 8001cae:	45a9      	cmp	r9, r5
 8001cb0:	d14a      	bne.n	8001d48 <setvbuf+0x150>
 8001cb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60a2      	str	r2, [r4, #8]
 8001cba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001cbe:	6022      	str	r2, [r4, #0]
 8001cc0:	6122      	str	r2, [r4, #16]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cc8:	6162      	str	r2, [r4, #20]
 8001cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	07d2      	lsls	r2, r2, #31
 8001cd2:	81a3      	strh	r3, [r4, #12]
 8001cd4:	d405      	bmi.n	8001ce2 <setvbuf+0xea>
 8001cd6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001cda:	d102      	bne.n	8001ce2 <setvbuf+0xea>
 8001cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cde:	f000 fac6 	bl	800226e <__retarget_lock_release_recursive>
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	b003      	add	sp, #12
 8001ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <setvbuf+0x184>)
 8001cec:	429c      	cmp	r4, r3
 8001cee:	d101      	bne.n	8001cf4 <setvbuf+0xfc>
 8001cf0:	68bc      	ldr	r4, [r7, #8]
 8001cf2:	e793      	b.n	8001c1c <setvbuf+0x24>
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <setvbuf+0x188>)
 8001cf6:	429c      	cmp	r4, r3
 8001cf8:	bf08      	it	eq
 8001cfa:	68fc      	ldreq	r4, [r7, #12]
 8001cfc:	e78e      	b.n	8001c1c <setvbuf+0x24>
 8001cfe:	2e00      	cmp	r6, #0
 8001d00:	d0cd      	beq.n	8001c9e <setvbuf+0xa6>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	b913      	cbnz	r3, 8001d0c <setvbuf+0x114>
 8001d06:	4638      	mov	r0, r7
 8001d08:	f000 fa12 	bl	8002130 <__sinit>
 8001d0c:	f1b8 0f01 	cmp.w	r8, #1
 8001d10:	bf08      	it	eq
 8001d12:	89a3      	ldrheq	r3, [r4, #12]
 8001d14:	6026      	str	r6, [r4, #0]
 8001d16:	bf04      	itt	eq
 8001d18:	f043 0301 	orreq.w	r3, r3, #1
 8001d1c:	81a3      	strheq	r3, [r4, #12]
 8001d1e:	89a2      	ldrh	r2, [r4, #12]
 8001d20:	f012 0308 	ands.w	r3, r2, #8
 8001d24:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001d28:	d01c      	beq.n	8001d64 <setvbuf+0x16c>
 8001d2a:	07d3      	lsls	r3, r2, #31
 8001d2c:	bf41      	itttt	mi
 8001d2e:	2300      	movmi	r3, #0
 8001d30:	426d      	negmi	r5, r5
 8001d32:	60a3      	strmi	r3, [r4, #8]
 8001d34:	61a5      	strmi	r5, [r4, #24]
 8001d36:	bf58      	it	pl
 8001d38:	60a5      	strpl	r5, [r4, #8]
 8001d3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001d3c:	f015 0501 	ands.w	r5, r5, #1
 8001d40:	d115      	bne.n	8001d6e <setvbuf+0x176>
 8001d42:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001d46:	e7c8      	b.n	8001cda <setvbuf+0xe2>
 8001d48:	4648      	mov	r0, r9
 8001d4a:	f7ff fe37 	bl	80019bc <malloc>
 8001d4e:	4606      	mov	r6, r0
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d0ae      	beq.n	8001cb2 <setvbuf+0xba>
 8001d54:	464d      	mov	r5, r9
 8001d56:	89a3      	ldrh	r3, [r4, #12]
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	81a3      	strh	r3, [r4, #12]
 8001d5e:	e7d0      	b.n	8001d02 <setvbuf+0x10a>
 8001d60:	2500      	movs	r5, #0
 8001d62:	e7a8      	b.n	8001cb6 <setvbuf+0xbe>
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	e7e8      	b.n	8001d3a <setvbuf+0x142>
 8001d68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d6c:	e7b9      	b.n	8001ce2 <setvbuf+0xea>
 8001d6e:	2500      	movs	r5, #0
 8001d70:	e7b7      	b.n	8001ce2 <setvbuf+0xea>
 8001d72:	bf00      	nop
 8001d74:	20000010 	.word	0x20000010
 8001d78:	08002ba4 	.word	0x08002ba4
 8001d7c:	08002bc4 	.word	0x08002bc4
 8001d80:	08002b84 	.word	0x08002b84

08001d84 <__swbuf_r>:
 8001d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d86:	460e      	mov	r6, r1
 8001d88:	4614      	mov	r4, r2
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	b118      	cbz	r0, 8001d96 <__swbuf_r+0x12>
 8001d8e:	6983      	ldr	r3, [r0, #24]
 8001d90:	b90b      	cbnz	r3, 8001d96 <__swbuf_r+0x12>
 8001d92:	f000 f9cd 	bl	8002130 <__sinit>
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <__swbuf_r+0x98>)
 8001d98:	429c      	cmp	r4, r3
 8001d9a:	d12b      	bne.n	8001df4 <__swbuf_r+0x70>
 8001d9c:	686c      	ldr	r4, [r5, #4]
 8001d9e:	69a3      	ldr	r3, [r4, #24]
 8001da0:	60a3      	str	r3, [r4, #8]
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	071a      	lsls	r2, r3, #28
 8001da6:	d52f      	bpl.n	8001e08 <__swbuf_r+0x84>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	b36b      	cbz	r3, 8001e08 <__swbuf_r+0x84>
 8001dac:	6923      	ldr	r3, [r4, #16]
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	1ac0      	subs	r0, r0, r3
 8001db2:	6963      	ldr	r3, [r4, #20]
 8001db4:	b2f6      	uxtb	r6, r6
 8001db6:	4283      	cmp	r3, r0
 8001db8:	4637      	mov	r7, r6
 8001dba:	dc04      	bgt.n	8001dc6 <__swbuf_r+0x42>
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f000 f922 	bl	8002008 <_fflush_r>
 8001dc4:	bb30      	cbnz	r0, 8001e14 <__swbuf_r+0x90>
 8001dc6:	68a3      	ldr	r3, [r4, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60a3      	str	r3, [r4, #8]
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	6022      	str	r2, [r4, #0]
 8001dd2:	701e      	strb	r6, [r3, #0]
 8001dd4:	6963      	ldr	r3, [r4, #20]
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	4283      	cmp	r3, r0
 8001dda:	d004      	beq.n	8001de6 <__swbuf_r+0x62>
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	07db      	lsls	r3, r3, #31
 8001de0:	d506      	bpl.n	8001df0 <__swbuf_r+0x6c>
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	d104      	bne.n	8001df0 <__swbuf_r+0x6c>
 8001de6:	4621      	mov	r1, r4
 8001de8:	4628      	mov	r0, r5
 8001dea:	f000 f90d 	bl	8002008 <_fflush_r>
 8001dee:	b988      	cbnz	r0, 8001e14 <__swbuf_r+0x90>
 8001df0:	4638      	mov	r0, r7
 8001df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <__swbuf_r+0x9c>)
 8001df6:	429c      	cmp	r4, r3
 8001df8:	d101      	bne.n	8001dfe <__swbuf_r+0x7a>
 8001dfa:	68ac      	ldr	r4, [r5, #8]
 8001dfc:	e7cf      	b.n	8001d9e <__swbuf_r+0x1a>
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <__swbuf_r+0xa0>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	bf08      	it	eq
 8001e04:	68ec      	ldreq	r4, [r5, #12]
 8001e06:	e7ca      	b.n	8001d9e <__swbuf_r+0x1a>
 8001e08:	4621      	mov	r1, r4
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f000 f80c 	bl	8001e28 <__swsetup_r>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d0cb      	beq.n	8001dac <__swbuf_r+0x28>
 8001e14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001e18:	e7ea      	b.n	8001df0 <__swbuf_r+0x6c>
 8001e1a:	bf00      	nop
 8001e1c:	08002ba4 	.word	0x08002ba4
 8001e20:	08002bc4 	.word	0x08002bc4
 8001e24:	08002b84 	.word	0x08002b84

08001e28 <__swsetup_r>:
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <__swsetup_r+0xcc>)
 8001e2a:	b570      	push	{r4, r5, r6, lr}
 8001e2c:	681d      	ldr	r5, [r3, #0]
 8001e2e:	4606      	mov	r6, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	b125      	cbz	r5, 8001e3e <__swsetup_r+0x16>
 8001e34:	69ab      	ldr	r3, [r5, #24]
 8001e36:	b913      	cbnz	r3, 8001e3e <__swsetup_r+0x16>
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f000 f979 	bl	8002130 <__sinit>
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <__swsetup_r+0xd0>)
 8001e40:	429c      	cmp	r4, r3
 8001e42:	d10f      	bne.n	8001e64 <__swsetup_r+0x3c>
 8001e44:	686c      	ldr	r4, [r5, #4]
 8001e46:	89a3      	ldrh	r3, [r4, #12]
 8001e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e4c:	0719      	lsls	r1, r3, #28
 8001e4e:	d42c      	bmi.n	8001eaa <__swsetup_r+0x82>
 8001e50:	06dd      	lsls	r5, r3, #27
 8001e52:	d411      	bmi.n	8001e78 <__swsetup_r+0x50>
 8001e54:	2309      	movs	r3, #9
 8001e56:	6033      	str	r3, [r6, #0]
 8001e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e62:	e03e      	b.n	8001ee2 <__swsetup_r+0xba>
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <__swsetup_r+0xd4>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	d101      	bne.n	8001e6e <__swsetup_r+0x46>
 8001e6a:	68ac      	ldr	r4, [r5, #8]
 8001e6c:	e7eb      	b.n	8001e46 <__swsetup_r+0x1e>
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <__swsetup_r+0xd8>)
 8001e70:	429c      	cmp	r4, r3
 8001e72:	bf08      	it	eq
 8001e74:	68ec      	ldreq	r4, [r5, #12]
 8001e76:	e7e6      	b.n	8001e46 <__swsetup_r+0x1e>
 8001e78:	0758      	lsls	r0, r3, #29
 8001e7a:	d512      	bpl.n	8001ea2 <__swsetup_r+0x7a>
 8001e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e7e:	b141      	cbz	r1, 8001e92 <__swsetup_r+0x6a>
 8001e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e84:	4299      	cmp	r1, r3
 8001e86:	d002      	beq.n	8001e8e <__swsetup_r+0x66>
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f7ff fda7 	bl	80019dc <_free_r>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6363      	str	r3, [r4, #52]	; 0x34
 8001e92:	89a3      	ldrh	r3, [r4, #12]
 8001e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e98:	81a3      	strh	r3, [r4, #12]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6063      	str	r3, [r4, #4]
 8001e9e:	6923      	ldr	r3, [r4, #16]
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	81a3      	strh	r3, [r4, #12]
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	b94b      	cbnz	r3, 8001ec2 <__swsetup_r+0x9a>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb8:	d003      	beq.n	8001ec2 <__swsetup_r+0x9a>
 8001eba:	4621      	mov	r1, r4
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 f9fd 	bl	80022bc <__smakebuf_r>
 8001ec2:	89a0      	ldrh	r0, [r4, #12]
 8001ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ec8:	f010 0301 	ands.w	r3, r0, #1
 8001ecc:	d00a      	beq.n	8001ee4 <__swsetup_r+0xbc>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60a3      	str	r3, [r4, #8]
 8001ed2:	6963      	ldr	r3, [r4, #20]
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	61a3      	str	r3, [r4, #24]
 8001ed8:	6923      	ldr	r3, [r4, #16]
 8001eda:	b943      	cbnz	r3, 8001eee <__swsetup_r+0xc6>
 8001edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ee0:	d1ba      	bne.n	8001e58 <__swsetup_r+0x30>
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	0781      	lsls	r1, r0, #30
 8001ee6:	bf58      	it	pl
 8001ee8:	6963      	ldrpl	r3, [r4, #20]
 8001eea:	60a3      	str	r3, [r4, #8]
 8001eec:	e7f4      	b.n	8001ed8 <__swsetup_r+0xb0>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	e7f7      	b.n	8001ee2 <__swsetup_r+0xba>
 8001ef2:	bf00      	nop
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	08002ba4 	.word	0x08002ba4
 8001efc:	08002bc4 	.word	0x08002bc4
 8001f00:	08002b84 	.word	0x08002b84

08001f04 <__sflush_r>:
 8001f04:	898a      	ldrh	r2, [r1, #12]
 8001f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f08:	4605      	mov	r5, r0
 8001f0a:	0710      	lsls	r0, r2, #28
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	d457      	bmi.n	8001fc0 <__sflush_r+0xbc>
 8001f10:	684b      	ldr	r3, [r1, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dc04      	bgt.n	8001f20 <__sflush_r+0x1c>
 8001f16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dc01      	bgt.n	8001f20 <__sflush_r+0x1c>
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	d0fa      	beq.n	8001f1c <__sflush_r+0x18>
 8001f26:	2300      	movs	r3, #0
 8001f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f2c:	682f      	ldr	r7, [r5, #0]
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	d032      	beq.n	8001f98 <__sflush_r+0x94>
 8001f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f34:	89a3      	ldrh	r3, [r4, #12]
 8001f36:	075a      	lsls	r2, r3, #29
 8001f38:	d505      	bpl.n	8001f46 <__sflush_r+0x42>
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	1ac0      	subs	r0, r0, r3
 8001f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f40:	b10b      	cbz	r3, 8001f46 <__sflush_r+0x42>
 8001f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f44:	1ac0      	subs	r0, r0, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f4c:	6a21      	ldr	r1, [r4, #32]
 8001f4e:	4628      	mov	r0, r5
 8001f50:	47b0      	blx	r6
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	d106      	bne.n	8001f66 <__sflush_r+0x62>
 8001f58:	6829      	ldr	r1, [r5, #0]
 8001f5a:	291d      	cmp	r1, #29
 8001f5c:	d82c      	bhi.n	8001fb8 <__sflush_r+0xb4>
 8001f5e:	4a29      	ldr	r2, [pc, #164]	; (8002004 <__sflush_r+0x100>)
 8001f60:	40ca      	lsrs	r2, r1
 8001f62:	07d6      	lsls	r6, r2, #31
 8001f64:	d528      	bpl.n	8001fb8 <__sflush_r+0xb4>
 8001f66:	2200      	movs	r2, #0
 8001f68:	6062      	str	r2, [r4, #4]
 8001f6a:	04d9      	lsls	r1, r3, #19
 8001f6c:	6922      	ldr	r2, [r4, #16]
 8001f6e:	6022      	str	r2, [r4, #0]
 8001f70:	d504      	bpl.n	8001f7c <__sflush_r+0x78>
 8001f72:	1c42      	adds	r2, r0, #1
 8001f74:	d101      	bne.n	8001f7a <__sflush_r+0x76>
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	b903      	cbnz	r3, 8001f7c <__sflush_r+0x78>
 8001f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f7e:	602f      	str	r7, [r5, #0]
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d0cb      	beq.n	8001f1c <__sflush_r+0x18>
 8001f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	d002      	beq.n	8001f92 <__sflush_r+0x8e>
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f7ff fd25 	bl	80019dc <_free_r>
 8001f92:	2000      	movs	r0, #0
 8001f94:	6360      	str	r0, [r4, #52]	; 0x34
 8001f96:	e7c2      	b.n	8001f1e <__sflush_r+0x1a>
 8001f98:	6a21      	ldr	r1, [r4, #32]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	47b0      	blx	r6
 8001fa0:	1c41      	adds	r1, r0, #1
 8001fa2:	d1c7      	bne.n	8001f34 <__sflush_r+0x30>
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0c4      	beq.n	8001f34 <__sflush_r+0x30>
 8001faa:	2b1d      	cmp	r3, #29
 8001fac:	d001      	beq.n	8001fb2 <__sflush_r+0xae>
 8001fae:	2b16      	cmp	r3, #22
 8001fb0:	d101      	bne.n	8001fb6 <__sflush_r+0xb2>
 8001fb2:	602f      	str	r7, [r5, #0]
 8001fb4:	e7b2      	b.n	8001f1c <__sflush_r+0x18>
 8001fb6:	89a3      	ldrh	r3, [r4, #12]
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbc:	81a3      	strh	r3, [r4, #12]
 8001fbe:	e7ae      	b.n	8001f1e <__sflush_r+0x1a>
 8001fc0:	690f      	ldr	r7, [r1, #16]
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d0aa      	beq.n	8001f1c <__sflush_r+0x18>
 8001fc6:	0793      	lsls	r3, r2, #30
 8001fc8:	680e      	ldr	r6, [r1, #0]
 8001fca:	bf08      	it	eq
 8001fcc:	694b      	ldreq	r3, [r1, #20]
 8001fce:	600f      	str	r7, [r1, #0]
 8001fd0:	bf18      	it	ne
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	1bf6      	subs	r6, r6, r7
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	dd9f      	ble.n	8001f1c <__sflush_r+0x18>
 8001fdc:	6a21      	ldr	r1, [r4, #32]
 8001fde:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fe2:	4633      	mov	r3, r6
 8001fe4:	463a      	mov	r2, r7
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	47e0      	blx	ip
 8001fea:	2800      	cmp	r0, #0
 8001fec:	dc06      	bgt.n	8001ffc <__sflush_r+0xf8>
 8001fee:	89a3      	ldrh	r3, [r4, #12]
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffa:	e790      	b.n	8001f1e <__sflush_r+0x1a>
 8001ffc:	4407      	add	r7, r0
 8001ffe:	1a36      	subs	r6, r6, r0
 8002000:	e7ea      	b.n	8001fd8 <__sflush_r+0xd4>
 8002002:	bf00      	nop
 8002004:	20400001 	.word	0x20400001

08002008 <_fflush_r>:
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	690b      	ldr	r3, [r1, #16]
 800200c:	4605      	mov	r5, r0
 800200e:	460c      	mov	r4, r1
 8002010:	b913      	cbnz	r3, 8002018 <_fflush_r+0x10>
 8002012:	2500      	movs	r5, #0
 8002014:	4628      	mov	r0, r5
 8002016:	bd38      	pop	{r3, r4, r5, pc}
 8002018:	b118      	cbz	r0, 8002022 <_fflush_r+0x1a>
 800201a:	6983      	ldr	r3, [r0, #24]
 800201c:	b90b      	cbnz	r3, 8002022 <_fflush_r+0x1a>
 800201e:	f000 f887 	bl	8002130 <__sinit>
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <_fflush_r+0x6c>)
 8002024:	429c      	cmp	r4, r3
 8002026:	d11b      	bne.n	8002060 <_fflush_r+0x58>
 8002028:	686c      	ldr	r4, [r5, #4]
 800202a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ef      	beq.n	8002012 <_fflush_r+0xa>
 8002032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002034:	07d0      	lsls	r0, r2, #31
 8002036:	d404      	bmi.n	8002042 <_fflush_r+0x3a>
 8002038:	0599      	lsls	r1, r3, #22
 800203a:	d402      	bmi.n	8002042 <_fflush_r+0x3a>
 800203c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800203e:	f000 f915 	bl	800226c <__retarget_lock_acquire_recursive>
 8002042:	4628      	mov	r0, r5
 8002044:	4621      	mov	r1, r4
 8002046:	f7ff ff5d 	bl	8001f04 <__sflush_r>
 800204a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800204c:	07da      	lsls	r2, r3, #31
 800204e:	4605      	mov	r5, r0
 8002050:	d4e0      	bmi.n	8002014 <_fflush_r+0xc>
 8002052:	89a3      	ldrh	r3, [r4, #12]
 8002054:	059b      	lsls	r3, r3, #22
 8002056:	d4dd      	bmi.n	8002014 <_fflush_r+0xc>
 8002058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800205a:	f000 f908 	bl	800226e <__retarget_lock_release_recursive>
 800205e:	e7d9      	b.n	8002014 <_fflush_r+0xc>
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <_fflush_r+0x70>)
 8002062:	429c      	cmp	r4, r3
 8002064:	d101      	bne.n	800206a <_fflush_r+0x62>
 8002066:	68ac      	ldr	r4, [r5, #8]
 8002068:	e7df      	b.n	800202a <_fflush_r+0x22>
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <_fflush_r+0x74>)
 800206c:	429c      	cmp	r4, r3
 800206e:	bf08      	it	eq
 8002070:	68ec      	ldreq	r4, [r5, #12]
 8002072:	e7da      	b.n	800202a <_fflush_r+0x22>
 8002074:	08002ba4 	.word	0x08002ba4
 8002078:	08002bc4 	.word	0x08002bc4
 800207c:	08002b84 	.word	0x08002b84

08002080 <std>:
 8002080:	2300      	movs	r3, #0
 8002082:	b510      	push	{r4, lr}
 8002084:	4604      	mov	r4, r0
 8002086:	e9c0 3300 	strd	r3, r3, [r0]
 800208a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800208e:	6083      	str	r3, [r0, #8]
 8002090:	8181      	strh	r1, [r0, #12]
 8002092:	6643      	str	r3, [r0, #100]	; 0x64
 8002094:	81c2      	strh	r2, [r0, #14]
 8002096:	6183      	str	r3, [r0, #24]
 8002098:	4619      	mov	r1, r3
 800209a:	2208      	movs	r2, #8
 800209c:	305c      	adds	r0, #92	; 0x5c
 800209e:	f7ff fc95 	bl	80019cc <memset>
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <std+0x38>)
 80020a4:	6263      	str	r3, [r4, #36]	; 0x24
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <std+0x3c>)
 80020a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <std+0x40>)
 80020ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <std+0x44>)
 80020b0:	6224      	str	r4, [r4, #32]
 80020b2:	6323      	str	r3, [r4, #48]	; 0x30
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	0800292d 	.word	0x0800292d
 80020bc:	0800294f 	.word	0x0800294f
 80020c0:	08002987 	.word	0x08002987
 80020c4:	080029ab 	.word	0x080029ab

080020c8 <_cleanup_r>:
 80020c8:	4901      	ldr	r1, [pc, #4]	; (80020d0 <_cleanup_r+0x8>)
 80020ca:	f000 b8af 	b.w	800222c <_fwalk_reent>
 80020ce:	bf00      	nop
 80020d0:	08002009 	.word	0x08002009

080020d4 <__sfmoreglue>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	2268      	movs	r2, #104	; 0x68
 80020d8:	1e4d      	subs	r5, r1, #1
 80020da:	4355      	muls	r5, r2
 80020dc:	460e      	mov	r6, r1
 80020de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020e2:	f7ff fce5 	bl	8001ab0 <_malloc_r>
 80020e6:	4604      	mov	r4, r0
 80020e8:	b140      	cbz	r0, 80020fc <__sfmoreglue+0x28>
 80020ea:	2100      	movs	r1, #0
 80020ec:	e9c0 1600 	strd	r1, r6, [r0]
 80020f0:	300c      	adds	r0, #12
 80020f2:	60a0      	str	r0, [r4, #8]
 80020f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020f8:	f7ff fc68 	bl	80019cc <memset>
 80020fc:	4620      	mov	r0, r4
 80020fe:	bd70      	pop	{r4, r5, r6, pc}

08002100 <__sfp_lock_acquire>:
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <__sfp_lock_acquire+0x8>)
 8002102:	f000 b8b3 	b.w	800226c <__retarget_lock_acquire_recursive>
 8002106:	bf00      	nop
 8002108:	200000c9 	.word	0x200000c9

0800210c <__sfp_lock_release>:
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <__sfp_lock_release+0x8>)
 800210e:	f000 b8ae 	b.w	800226e <__retarget_lock_release_recursive>
 8002112:	bf00      	nop
 8002114:	200000c9 	.word	0x200000c9

08002118 <__sinit_lock_acquire>:
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <__sinit_lock_acquire+0x8>)
 800211a:	f000 b8a7 	b.w	800226c <__retarget_lock_acquire_recursive>
 800211e:	bf00      	nop
 8002120:	200000ca 	.word	0x200000ca

08002124 <__sinit_lock_release>:
 8002124:	4801      	ldr	r0, [pc, #4]	; (800212c <__sinit_lock_release+0x8>)
 8002126:	f000 b8a2 	b.w	800226e <__retarget_lock_release_recursive>
 800212a:	bf00      	nop
 800212c:	200000ca 	.word	0x200000ca

08002130 <__sinit>:
 8002130:	b510      	push	{r4, lr}
 8002132:	4604      	mov	r4, r0
 8002134:	f7ff fff0 	bl	8002118 <__sinit_lock_acquire>
 8002138:	69a3      	ldr	r3, [r4, #24]
 800213a:	b11b      	cbz	r3, 8002144 <__sinit+0x14>
 800213c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002140:	f7ff bff0 	b.w	8002124 <__sinit_lock_release>
 8002144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002148:	6523      	str	r3, [r4, #80]	; 0x50
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <__sinit+0x68>)
 800214c:	4a13      	ldr	r2, [pc, #76]	; (800219c <__sinit+0x6c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	62a2      	str	r2, [r4, #40]	; 0x28
 8002152:	42a3      	cmp	r3, r4
 8002154:	bf04      	itt	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	61a3      	streq	r3, [r4, #24]
 800215a:	4620      	mov	r0, r4
 800215c:	f000 f820 	bl	80021a0 <__sfp>
 8002160:	6060      	str	r0, [r4, #4]
 8002162:	4620      	mov	r0, r4
 8002164:	f000 f81c 	bl	80021a0 <__sfp>
 8002168:	60a0      	str	r0, [r4, #8]
 800216a:	4620      	mov	r0, r4
 800216c:	f000 f818 	bl	80021a0 <__sfp>
 8002170:	2200      	movs	r2, #0
 8002172:	60e0      	str	r0, [r4, #12]
 8002174:	2104      	movs	r1, #4
 8002176:	6860      	ldr	r0, [r4, #4]
 8002178:	f7ff ff82 	bl	8002080 <std>
 800217c:	68a0      	ldr	r0, [r4, #8]
 800217e:	2201      	movs	r2, #1
 8002180:	2109      	movs	r1, #9
 8002182:	f7ff ff7d 	bl	8002080 <std>
 8002186:	68e0      	ldr	r0, [r4, #12]
 8002188:	2202      	movs	r2, #2
 800218a:	2112      	movs	r1, #18
 800218c:	f7ff ff78 	bl	8002080 <std>
 8002190:	2301      	movs	r3, #1
 8002192:	61a3      	str	r3, [r4, #24]
 8002194:	e7d2      	b.n	800213c <__sinit+0xc>
 8002196:	bf00      	nop
 8002198:	08002b80 	.word	0x08002b80
 800219c:	080020c9 	.word	0x080020c9

080021a0 <__sfp>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	4607      	mov	r7, r0
 80021a4:	f7ff ffac 	bl	8002100 <__sfp_lock_acquire>
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <__sfp+0x84>)
 80021aa:	681e      	ldr	r6, [r3, #0]
 80021ac:	69b3      	ldr	r3, [r6, #24]
 80021ae:	b913      	cbnz	r3, 80021b6 <__sfp+0x16>
 80021b0:	4630      	mov	r0, r6
 80021b2:	f7ff ffbd 	bl	8002130 <__sinit>
 80021b6:	3648      	adds	r6, #72	; 0x48
 80021b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021bc:	3b01      	subs	r3, #1
 80021be:	d503      	bpl.n	80021c8 <__sfp+0x28>
 80021c0:	6833      	ldr	r3, [r6, #0]
 80021c2:	b30b      	cbz	r3, 8002208 <__sfp+0x68>
 80021c4:	6836      	ldr	r6, [r6, #0]
 80021c6:	e7f7      	b.n	80021b8 <__sfp+0x18>
 80021c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021cc:	b9d5      	cbnz	r5, 8002204 <__sfp+0x64>
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <__sfp+0x88>)
 80021d0:	60e3      	str	r3, [r4, #12]
 80021d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021d6:	6665      	str	r5, [r4, #100]	; 0x64
 80021d8:	f000 f847 	bl	800226a <__retarget_lock_init_recursive>
 80021dc:	f7ff ff96 	bl	800210c <__sfp_lock_release>
 80021e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021e8:	6025      	str	r5, [r4, #0]
 80021ea:	61a5      	str	r5, [r4, #24]
 80021ec:	2208      	movs	r2, #8
 80021ee:	4629      	mov	r1, r5
 80021f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021f4:	f7ff fbea 	bl	80019cc <memset>
 80021f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002200:	4620      	mov	r0, r4
 8002202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002204:	3468      	adds	r4, #104	; 0x68
 8002206:	e7d9      	b.n	80021bc <__sfp+0x1c>
 8002208:	2104      	movs	r1, #4
 800220a:	4638      	mov	r0, r7
 800220c:	f7ff ff62 	bl	80020d4 <__sfmoreglue>
 8002210:	4604      	mov	r4, r0
 8002212:	6030      	str	r0, [r6, #0]
 8002214:	2800      	cmp	r0, #0
 8002216:	d1d5      	bne.n	80021c4 <__sfp+0x24>
 8002218:	f7ff ff78 	bl	800210c <__sfp_lock_release>
 800221c:	230c      	movs	r3, #12
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	e7ee      	b.n	8002200 <__sfp+0x60>
 8002222:	bf00      	nop
 8002224:	08002b80 	.word	0x08002b80
 8002228:	ffff0001 	.word	0xffff0001

0800222c <_fwalk_reent>:
 800222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002230:	4606      	mov	r6, r0
 8002232:	4688      	mov	r8, r1
 8002234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002238:	2700      	movs	r7, #0
 800223a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800223e:	f1b9 0901 	subs.w	r9, r9, #1
 8002242:	d505      	bpl.n	8002250 <_fwalk_reent+0x24>
 8002244:	6824      	ldr	r4, [r4, #0]
 8002246:	2c00      	cmp	r4, #0
 8002248:	d1f7      	bne.n	800223a <_fwalk_reent+0xe>
 800224a:	4638      	mov	r0, r7
 800224c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002250:	89ab      	ldrh	r3, [r5, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d907      	bls.n	8002266 <_fwalk_reent+0x3a>
 8002256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800225a:	3301      	adds	r3, #1
 800225c:	d003      	beq.n	8002266 <_fwalk_reent+0x3a>
 800225e:	4629      	mov	r1, r5
 8002260:	4630      	mov	r0, r6
 8002262:	47c0      	blx	r8
 8002264:	4307      	orrs	r7, r0
 8002266:	3568      	adds	r5, #104	; 0x68
 8002268:	e7e9      	b.n	800223e <_fwalk_reent+0x12>

0800226a <__retarget_lock_init_recursive>:
 800226a:	4770      	bx	lr

0800226c <__retarget_lock_acquire_recursive>:
 800226c:	4770      	bx	lr

0800226e <__retarget_lock_release_recursive>:
 800226e:	4770      	bx	lr

08002270 <__swhatbuf_r>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	460e      	mov	r6, r1
 8002274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002278:	2900      	cmp	r1, #0
 800227a:	b096      	sub	sp, #88	; 0x58
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	da08      	bge.n	8002294 <__swhatbuf_r+0x24>
 8002282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	602a      	str	r2, [r5, #0]
 800228a:	061a      	lsls	r2, r3, #24
 800228c:	d410      	bmi.n	80022b0 <__swhatbuf_r+0x40>
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	e00e      	b.n	80022b2 <__swhatbuf_r+0x42>
 8002294:	466a      	mov	r2, sp
 8002296:	f000 fbaf 	bl	80029f8 <_fstat_r>
 800229a:	2800      	cmp	r0, #0
 800229c:	dbf1      	blt.n	8002282 <__swhatbuf_r+0x12>
 800229e:	9a01      	ldr	r2, [sp, #4]
 80022a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022a8:	425a      	negs	r2, r3
 80022aa:	415a      	adcs	r2, r3
 80022ac:	602a      	str	r2, [r5, #0]
 80022ae:	e7ee      	b.n	800228e <__swhatbuf_r+0x1e>
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	2000      	movs	r0, #0
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	b016      	add	sp, #88	; 0x58
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080022bc <__smakebuf_r>:
 80022bc:	898b      	ldrh	r3, [r1, #12]
 80022be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022c0:	079d      	lsls	r5, r3, #30
 80022c2:	4606      	mov	r6, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	d507      	bpl.n	80022d8 <__smakebuf_r+0x1c>
 80022c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	6123      	str	r3, [r4, #16]
 80022d0:	2301      	movs	r3, #1
 80022d2:	6163      	str	r3, [r4, #20]
 80022d4:	b002      	add	sp, #8
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	ab01      	add	r3, sp, #4
 80022da:	466a      	mov	r2, sp
 80022dc:	f7ff ffc8 	bl	8002270 <__swhatbuf_r>
 80022e0:	9900      	ldr	r1, [sp, #0]
 80022e2:	4605      	mov	r5, r0
 80022e4:	4630      	mov	r0, r6
 80022e6:	f7ff fbe3 	bl	8001ab0 <_malloc_r>
 80022ea:	b948      	cbnz	r0, 8002300 <__smakebuf_r+0x44>
 80022ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022f0:	059a      	lsls	r2, r3, #22
 80022f2:	d4ef      	bmi.n	80022d4 <__smakebuf_r+0x18>
 80022f4:	f023 0303 	bic.w	r3, r3, #3
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	e7e3      	b.n	80022c8 <__smakebuf_r+0xc>
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <__smakebuf_r+0x7c>)
 8002302:	62b3      	str	r3, [r6, #40]	; 0x28
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	6020      	str	r0, [r4, #0]
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	9b00      	ldr	r3, [sp, #0]
 8002310:	6163      	str	r3, [r4, #20]
 8002312:	9b01      	ldr	r3, [sp, #4]
 8002314:	6120      	str	r0, [r4, #16]
 8002316:	b15b      	cbz	r3, 8002330 <__smakebuf_r+0x74>
 8002318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800231c:	4630      	mov	r0, r6
 800231e:	f000 fb7d 	bl	8002a1c <_isatty_r>
 8002322:	b128      	cbz	r0, 8002330 <__smakebuf_r+0x74>
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	89a0      	ldrh	r0, [r4, #12]
 8002332:	4305      	orrs	r5, r0
 8002334:	81a5      	strh	r5, [r4, #12]
 8002336:	e7cd      	b.n	80022d4 <__smakebuf_r+0x18>
 8002338:	080020c9 	.word	0x080020c9

0800233c <__malloc_lock>:
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <__malloc_lock+0x8>)
 800233e:	f7ff bf95 	b.w	800226c <__retarget_lock_acquire_recursive>
 8002342:	bf00      	nop
 8002344:	200000c8 	.word	0x200000c8

08002348 <__malloc_unlock>:
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <__malloc_unlock+0x8>)
 800234a:	f7ff bf90 	b.w	800226e <__retarget_lock_release_recursive>
 800234e:	bf00      	nop
 8002350:	200000c8 	.word	0x200000c8

08002354 <__sfputc_r>:
 8002354:	6893      	ldr	r3, [r2, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	b410      	push	{r4}
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	da07      	bge.n	8002370 <__sfputc_r+0x1c>
 8002360:	6994      	ldr	r4, [r2, #24]
 8002362:	42a3      	cmp	r3, r4
 8002364:	db01      	blt.n	800236a <__sfputc_r+0x16>
 8002366:	290a      	cmp	r1, #10
 8002368:	d102      	bne.n	8002370 <__sfputc_r+0x1c>
 800236a:	bc10      	pop	{r4}
 800236c:	f7ff bd0a 	b.w	8001d84 <__swbuf_r>
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	1c58      	adds	r0, r3, #1
 8002374:	6010      	str	r0, [r2, #0]
 8002376:	7019      	strb	r1, [r3, #0]
 8002378:	4608      	mov	r0, r1
 800237a:	bc10      	pop	{r4}
 800237c:	4770      	bx	lr

0800237e <__sfputs_r>:
 800237e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002380:	4606      	mov	r6, r0
 8002382:	460f      	mov	r7, r1
 8002384:	4614      	mov	r4, r2
 8002386:	18d5      	adds	r5, r2, r3
 8002388:	42ac      	cmp	r4, r5
 800238a:	d101      	bne.n	8002390 <__sfputs_r+0x12>
 800238c:	2000      	movs	r0, #0
 800238e:	e007      	b.n	80023a0 <__sfputs_r+0x22>
 8002390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002394:	463a      	mov	r2, r7
 8002396:	4630      	mov	r0, r6
 8002398:	f7ff ffdc 	bl	8002354 <__sfputc_r>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d1f3      	bne.n	8002388 <__sfputs_r+0xa>
 80023a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023a4 <_vfiprintf_r>:
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	460d      	mov	r5, r1
 80023aa:	b09d      	sub	sp, #116	; 0x74
 80023ac:	4614      	mov	r4, r2
 80023ae:	4698      	mov	r8, r3
 80023b0:	4606      	mov	r6, r0
 80023b2:	b118      	cbz	r0, 80023bc <_vfiprintf_r+0x18>
 80023b4:	6983      	ldr	r3, [r0, #24]
 80023b6:	b90b      	cbnz	r3, 80023bc <_vfiprintf_r+0x18>
 80023b8:	f7ff feba 	bl	8002130 <__sinit>
 80023bc:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <_vfiprintf_r+0x240>)
 80023be:	429d      	cmp	r5, r3
 80023c0:	d11b      	bne.n	80023fa <_vfiprintf_r+0x56>
 80023c2:	6875      	ldr	r5, [r6, #4]
 80023c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023c6:	07d9      	lsls	r1, r3, #31
 80023c8:	d405      	bmi.n	80023d6 <_vfiprintf_r+0x32>
 80023ca:	89ab      	ldrh	r3, [r5, #12]
 80023cc:	059a      	lsls	r2, r3, #22
 80023ce:	d402      	bmi.n	80023d6 <_vfiprintf_r+0x32>
 80023d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023d2:	f7ff ff4b 	bl	800226c <__retarget_lock_acquire_recursive>
 80023d6:	89ab      	ldrh	r3, [r5, #12]
 80023d8:	071b      	lsls	r3, r3, #28
 80023da:	d501      	bpl.n	80023e0 <_vfiprintf_r+0x3c>
 80023dc:	692b      	ldr	r3, [r5, #16]
 80023de:	b9eb      	cbnz	r3, 800241c <_vfiprintf_r+0x78>
 80023e0:	4629      	mov	r1, r5
 80023e2:	4630      	mov	r0, r6
 80023e4:	f7ff fd20 	bl	8001e28 <__swsetup_r>
 80023e8:	b1c0      	cbz	r0, 800241c <_vfiprintf_r+0x78>
 80023ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023ec:	07dc      	lsls	r4, r3, #31
 80023ee:	d50e      	bpl.n	800240e <_vfiprintf_r+0x6a>
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f4:	b01d      	add	sp, #116	; 0x74
 80023f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023fa:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <_vfiprintf_r+0x244>)
 80023fc:	429d      	cmp	r5, r3
 80023fe:	d101      	bne.n	8002404 <_vfiprintf_r+0x60>
 8002400:	68b5      	ldr	r5, [r6, #8]
 8002402:	e7df      	b.n	80023c4 <_vfiprintf_r+0x20>
 8002404:	4b79      	ldr	r3, [pc, #484]	; (80025ec <_vfiprintf_r+0x248>)
 8002406:	429d      	cmp	r5, r3
 8002408:	bf08      	it	eq
 800240a:	68f5      	ldreq	r5, [r6, #12]
 800240c:	e7da      	b.n	80023c4 <_vfiprintf_r+0x20>
 800240e:	89ab      	ldrh	r3, [r5, #12]
 8002410:	0598      	lsls	r0, r3, #22
 8002412:	d4ed      	bmi.n	80023f0 <_vfiprintf_r+0x4c>
 8002414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002416:	f7ff ff2a 	bl	800226e <__retarget_lock_release_recursive>
 800241a:	e7e9      	b.n	80023f0 <_vfiprintf_r+0x4c>
 800241c:	2300      	movs	r3, #0
 800241e:	9309      	str	r3, [sp, #36]	; 0x24
 8002420:	2320      	movs	r3, #32
 8002422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002426:	f8cd 800c 	str.w	r8, [sp, #12]
 800242a:	2330      	movs	r3, #48	; 0x30
 800242c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80025f0 <_vfiprintf_r+0x24c>
 8002430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002434:	f04f 0901 	mov.w	r9, #1
 8002438:	4623      	mov	r3, r4
 800243a:	469a      	mov	sl, r3
 800243c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002440:	b10a      	cbz	r2, 8002446 <_vfiprintf_r+0xa2>
 8002442:	2a25      	cmp	r2, #37	; 0x25
 8002444:	d1f9      	bne.n	800243a <_vfiprintf_r+0x96>
 8002446:	ebba 0b04 	subs.w	fp, sl, r4
 800244a:	d00b      	beq.n	8002464 <_vfiprintf_r+0xc0>
 800244c:	465b      	mov	r3, fp
 800244e:	4622      	mov	r2, r4
 8002450:	4629      	mov	r1, r5
 8002452:	4630      	mov	r0, r6
 8002454:	f7ff ff93 	bl	800237e <__sfputs_r>
 8002458:	3001      	adds	r0, #1
 800245a:	f000 80aa 	beq.w	80025b2 <_vfiprintf_r+0x20e>
 800245e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002460:	445a      	add	r2, fp
 8002462:	9209      	str	r2, [sp, #36]	; 0x24
 8002464:	f89a 3000 	ldrb.w	r3, [sl]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a2 	beq.w	80025b2 <_vfiprintf_r+0x20e>
 800246e:	2300      	movs	r3, #0
 8002470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002478:	f10a 0a01 	add.w	sl, sl, #1
 800247c:	9304      	str	r3, [sp, #16]
 800247e:	9307      	str	r3, [sp, #28]
 8002480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002484:	931a      	str	r3, [sp, #104]	; 0x68
 8002486:	4654      	mov	r4, sl
 8002488:	2205      	movs	r2, #5
 800248a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800248e:	4858      	ldr	r0, [pc, #352]	; (80025f0 <_vfiprintf_r+0x24c>)
 8002490:	f7fd feae 	bl	80001f0 <memchr>
 8002494:	9a04      	ldr	r2, [sp, #16]
 8002496:	b9d8      	cbnz	r0, 80024d0 <_vfiprintf_r+0x12c>
 8002498:	06d1      	lsls	r1, r2, #27
 800249a:	bf44      	itt	mi
 800249c:	2320      	movmi	r3, #32
 800249e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024a2:	0713      	lsls	r3, r2, #28
 80024a4:	bf44      	itt	mi
 80024a6:	232b      	movmi	r3, #43	; 0x2b
 80024a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024ac:	f89a 3000 	ldrb.w	r3, [sl]
 80024b0:	2b2a      	cmp	r3, #42	; 0x2a
 80024b2:	d015      	beq.n	80024e0 <_vfiprintf_r+0x13c>
 80024b4:	9a07      	ldr	r2, [sp, #28]
 80024b6:	4654      	mov	r4, sl
 80024b8:	2000      	movs	r0, #0
 80024ba:	f04f 0c0a 	mov.w	ip, #10
 80024be:	4621      	mov	r1, r4
 80024c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024c4:	3b30      	subs	r3, #48	; 0x30
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	d94e      	bls.n	8002568 <_vfiprintf_r+0x1c4>
 80024ca:	b1b0      	cbz	r0, 80024fa <_vfiprintf_r+0x156>
 80024cc:	9207      	str	r2, [sp, #28]
 80024ce:	e014      	b.n	80024fa <_vfiprintf_r+0x156>
 80024d0:	eba0 0308 	sub.w	r3, r0, r8
 80024d4:	fa09 f303 	lsl.w	r3, r9, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	9304      	str	r3, [sp, #16]
 80024dc:	46a2      	mov	sl, r4
 80024de:	e7d2      	b.n	8002486 <_vfiprintf_r+0xe2>
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	1d19      	adds	r1, r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	9103      	str	r1, [sp, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bfbb      	ittet	lt
 80024ec:	425b      	neglt	r3, r3
 80024ee:	f042 0202 	orrlt.w	r2, r2, #2
 80024f2:	9307      	strge	r3, [sp, #28]
 80024f4:	9307      	strlt	r3, [sp, #28]
 80024f6:	bfb8      	it	lt
 80024f8:	9204      	strlt	r2, [sp, #16]
 80024fa:	7823      	ldrb	r3, [r4, #0]
 80024fc:	2b2e      	cmp	r3, #46	; 0x2e
 80024fe:	d10c      	bne.n	800251a <_vfiprintf_r+0x176>
 8002500:	7863      	ldrb	r3, [r4, #1]
 8002502:	2b2a      	cmp	r3, #42	; 0x2a
 8002504:	d135      	bne.n	8002572 <_vfiprintf_r+0x1ce>
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	9203      	str	r2, [sp, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	bfb8      	it	lt
 8002512:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002516:	3402      	adds	r4, #2
 8002518:	9305      	str	r3, [sp, #20]
 800251a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80025f4 <_vfiprintf_r+0x250>
 800251e:	7821      	ldrb	r1, [r4, #0]
 8002520:	2203      	movs	r2, #3
 8002522:	4650      	mov	r0, sl
 8002524:	f7fd fe64 	bl	80001f0 <memchr>
 8002528:	b140      	cbz	r0, 800253c <_vfiprintf_r+0x198>
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	eba0 000a 	sub.w	r0, r0, sl
 8002530:	fa03 f000 	lsl.w	r0, r3, r0
 8002534:	9b04      	ldr	r3, [sp, #16]
 8002536:	4303      	orrs	r3, r0
 8002538:	3401      	adds	r4, #1
 800253a:	9304      	str	r3, [sp, #16]
 800253c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002540:	482d      	ldr	r0, [pc, #180]	; (80025f8 <_vfiprintf_r+0x254>)
 8002542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002546:	2206      	movs	r2, #6
 8002548:	f7fd fe52 	bl	80001f0 <memchr>
 800254c:	2800      	cmp	r0, #0
 800254e:	d03f      	beq.n	80025d0 <_vfiprintf_r+0x22c>
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <_vfiprintf_r+0x258>)
 8002552:	bb1b      	cbnz	r3, 800259c <_vfiprintf_r+0x1f8>
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	3307      	adds	r3, #7
 8002558:	f023 0307 	bic.w	r3, r3, #7
 800255c:	3308      	adds	r3, #8
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002562:	443b      	add	r3, r7
 8002564:	9309      	str	r3, [sp, #36]	; 0x24
 8002566:	e767      	b.n	8002438 <_vfiprintf_r+0x94>
 8002568:	fb0c 3202 	mla	r2, ip, r2, r3
 800256c:	460c      	mov	r4, r1
 800256e:	2001      	movs	r0, #1
 8002570:	e7a5      	b.n	80024be <_vfiprintf_r+0x11a>
 8002572:	2300      	movs	r3, #0
 8002574:	3401      	adds	r4, #1
 8002576:	9305      	str	r3, [sp, #20]
 8002578:	4619      	mov	r1, r3
 800257a:	f04f 0c0a 	mov.w	ip, #10
 800257e:	4620      	mov	r0, r4
 8002580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002584:	3a30      	subs	r2, #48	; 0x30
 8002586:	2a09      	cmp	r2, #9
 8002588:	d903      	bls.n	8002592 <_vfiprintf_r+0x1ee>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0c5      	beq.n	800251a <_vfiprintf_r+0x176>
 800258e:	9105      	str	r1, [sp, #20]
 8002590:	e7c3      	b.n	800251a <_vfiprintf_r+0x176>
 8002592:	fb0c 2101 	mla	r1, ip, r1, r2
 8002596:	4604      	mov	r4, r0
 8002598:	2301      	movs	r3, #1
 800259a:	e7f0      	b.n	800257e <_vfiprintf_r+0x1da>
 800259c:	ab03      	add	r3, sp, #12
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	462a      	mov	r2, r5
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <_vfiprintf_r+0x25c>)
 80025a4:	a904      	add	r1, sp, #16
 80025a6:	4630      	mov	r0, r6
 80025a8:	f3af 8000 	nop.w
 80025ac:	4607      	mov	r7, r0
 80025ae:	1c78      	adds	r0, r7, #1
 80025b0:	d1d6      	bne.n	8002560 <_vfiprintf_r+0x1bc>
 80025b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025b4:	07d9      	lsls	r1, r3, #31
 80025b6:	d405      	bmi.n	80025c4 <_vfiprintf_r+0x220>
 80025b8:	89ab      	ldrh	r3, [r5, #12]
 80025ba:	059a      	lsls	r2, r3, #22
 80025bc:	d402      	bmi.n	80025c4 <_vfiprintf_r+0x220>
 80025be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025c0:	f7ff fe55 	bl	800226e <__retarget_lock_release_recursive>
 80025c4:	89ab      	ldrh	r3, [r5, #12]
 80025c6:	065b      	lsls	r3, r3, #25
 80025c8:	f53f af12 	bmi.w	80023f0 <_vfiprintf_r+0x4c>
 80025cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ce:	e711      	b.n	80023f4 <_vfiprintf_r+0x50>
 80025d0:	ab03      	add	r3, sp, #12
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	462a      	mov	r2, r5
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <_vfiprintf_r+0x25c>)
 80025d8:	a904      	add	r1, sp, #16
 80025da:	4630      	mov	r0, r6
 80025dc:	f000 f880 	bl	80026e0 <_printf_i>
 80025e0:	e7e4      	b.n	80025ac <_vfiprintf_r+0x208>
 80025e2:	bf00      	nop
 80025e4:	08002ba4 	.word	0x08002ba4
 80025e8:	08002bc4 	.word	0x08002bc4
 80025ec:	08002b84 	.word	0x08002b84
 80025f0:	08002be4 	.word	0x08002be4
 80025f4:	08002bea 	.word	0x08002bea
 80025f8:	08002bee 	.word	0x08002bee
 80025fc:	00000000 	.word	0x00000000
 8002600:	0800237f 	.word	0x0800237f

08002604 <_printf_common>:
 8002604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002608:	4616      	mov	r6, r2
 800260a:	4699      	mov	r9, r3
 800260c:	688a      	ldr	r2, [r1, #8]
 800260e:	690b      	ldr	r3, [r1, #16]
 8002610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002614:	4293      	cmp	r3, r2
 8002616:	bfb8      	it	lt
 8002618:	4613      	movlt	r3, r2
 800261a:	6033      	str	r3, [r6, #0]
 800261c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002620:	4607      	mov	r7, r0
 8002622:	460c      	mov	r4, r1
 8002624:	b10a      	cbz	r2, 800262a <_printf_common+0x26>
 8002626:	3301      	adds	r3, #1
 8002628:	6033      	str	r3, [r6, #0]
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	0699      	lsls	r1, r3, #26
 800262e:	bf42      	ittt	mi
 8002630:	6833      	ldrmi	r3, [r6, #0]
 8002632:	3302      	addmi	r3, #2
 8002634:	6033      	strmi	r3, [r6, #0]
 8002636:	6825      	ldr	r5, [r4, #0]
 8002638:	f015 0506 	ands.w	r5, r5, #6
 800263c:	d106      	bne.n	800264c <_printf_common+0x48>
 800263e:	f104 0a19 	add.w	sl, r4, #25
 8002642:	68e3      	ldr	r3, [r4, #12]
 8002644:	6832      	ldr	r2, [r6, #0]
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	42ab      	cmp	r3, r5
 800264a:	dc26      	bgt.n	800269a <_printf_common+0x96>
 800264c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002650:	1e13      	subs	r3, r2, #0
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	bf18      	it	ne
 8002656:	2301      	movne	r3, #1
 8002658:	0692      	lsls	r2, r2, #26
 800265a:	d42b      	bmi.n	80026b4 <_printf_common+0xb0>
 800265c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002660:	4649      	mov	r1, r9
 8002662:	4638      	mov	r0, r7
 8002664:	47c0      	blx	r8
 8002666:	3001      	adds	r0, #1
 8002668:	d01e      	beq.n	80026a8 <_printf_common+0xa4>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	68e5      	ldr	r5, [r4, #12]
 800266e:	6832      	ldr	r2, [r6, #0]
 8002670:	f003 0306 	and.w	r3, r3, #6
 8002674:	2b04      	cmp	r3, #4
 8002676:	bf08      	it	eq
 8002678:	1aad      	subeq	r5, r5, r2
 800267a:	68a3      	ldr	r3, [r4, #8]
 800267c:	6922      	ldr	r2, [r4, #16]
 800267e:	bf0c      	ite	eq
 8002680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002684:	2500      	movne	r5, #0
 8002686:	4293      	cmp	r3, r2
 8002688:	bfc4      	itt	gt
 800268a:	1a9b      	subgt	r3, r3, r2
 800268c:	18ed      	addgt	r5, r5, r3
 800268e:	2600      	movs	r6, #0
 8002690:	341a      	adds	r4, #26
 8002692:	42b5      	cmp	r5, r6
 8002694:	d11a      	bne.n	80026cc <_printf_common+0xc8>
 8002696:	2000      	movs	r0, #0
 8002698:	e008      	b.n	80026ac <_printf_common+0xa8>
 800269a:	2301      	movs	r3, #1
 800269c:	4652      	mov	r2, sl
 800269e:	4649      	mov	r1, r9
 80026a0:	4638      	mov	r0, r7
 80026a2:	47c0      	blx	r8
 80026a4:	3001      	adds	r0, #1
 80026a6:	d103      	bne.n	80026b0 <_printf_common+0xac>
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b0:	3501      	adds	r5, #1
 80026b2:	e7c6      	b.n	8002642 <_printf_common+0x3e>
 80026b4:	18e1      	adds	r1, r4, r3
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	2030      	movs	r0, #48	; 0x30
 80026ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026be:	4422      	add	r2, r4
 80026c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026c8:	3302      	adds	r3, #2
 80026ca:	e7c7      	b.n	800265c <_printf_common+0x58>
 80026cc:	2301      	movs	r3, #1
 80026ce:	4622      	mov	r2, r4
 80026d0:	4649      	mov	r1, r9
 80026d2:	4638      	mov	r0, r7
 80026d4:	47c0      	blx	r8
 80026d6:	3001      	adds	r0, #1
 80026d8:	d0e6      	beq.n	80026a8 <_printf_common+0xa4>
 80026da:	3601      	adds	r6, #1
 80026dc:	e7d9      	b.n	8002692 <_printf_common+0x8e>
	...

080026e0 <_printf_i>:
 80026e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026e4:	7e0f      	ldrb	r7, [r1, #24]
 80026e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026e8:	2f78      	cmp	r7, #120	; 0x78
 80026ea:	4691      	mov	r9, r2
 80026ec:	4680      	mov	r8, r0
 80026ee:	460c      	mov	r4, r1
 80026f0:	469a      	mov	sl, r3
 80026f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026f6:	d807      	bhi.n	8002708 <_printf_i+0x28>
 80026f8:	2f62      	cmp	r7, #98	; 0x62
 80026fa:	d80a      	bhi.n	8002712 <_printf_i+0x32>
 80026fc:	2f00      	cmp	r7, #0
 80026fe:	f000 80d8 	beq.w	80028b2 <_printf_i+0x1d2>
 8002702:	2f58      	cmp	r7, #88	; 0x58
 8002704:	f000 80a3 	beq.w	800284e <_printf_i+0x16e>
 8002708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800270c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002710:	e03a      	b.n	8002788 <_printf_i+0xa8>
 8002712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002716:	2b15      	cmp	r3, #21
 8002718:	d8f6      	bhi.n	8002708 <_printf_i+0x28>
 800271a:	a101      	add	r1, pc, #4	; (adr r1, 8002720 <_printf_i+0x40>)
 800271c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002720:	08002779 	.word	0x08002779
 8002724:	0800278d 	.word	0x0800278d
 8002728:	08002709 	.word	0x08002709
 800272c:	08002709 	.word	0x08002709
 8002730:	08002709 	.word	0x08002709
 8002734:	08002709 	.word	0x08002709
 8002738:	0800278d 	.word	0x0800278d
 800273c:	08002709 	.word	0x08002709
 8002740:	08002709 	.word	0x08002709
 8002744:	08002709 	.word	0x08002709
 8002748:	08002709 	.word	0x08002709
 800274c:	08002899 	.word	0x08002899
 8002750:	080027bd 	.word	0x080027bd
 8002754:	0800287b 	.word	0x0800287b
 8002758:	08002709 	.word	0x08002709
 800275c:	08002709 	.word	0x08002709
 8002760:	080028bb 	.word	0x080028bb
 8002764:	08002709 	.word	0x08002709
 8002768:	080027bd 	.word	0x080027bd
 800276c:	08002709 	.word	0x08002709
 8002770:	08002709 	.word	0x08002709
 8002774:	08002883 	.word	0x08002883
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	602a      	str	r2, [r5, #0]
 8002780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002788:	2301      	movs	r3, #1
 800278a:	e0a3      	b.n	80028d4 <_printf_i+0x1f4>
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	6829      	ldr	r1, [r5, #0]
 8002790:	0606      	lsls	r6, r0, #24
 8002792:	f101 0304 	add.w	r3, r1, #4
 8002796:	d50a      	bpl.n	80027ae <_printf_i+0xce>
 8002798:	680e      	ldr	r6, [r1, #0]
 800279a:	602b      	str	r3, [r5, #0]
 800279c:	2e00      	cmp	r6, #0
 800279e:	da03      	bge.n	80027a8 <_printf_i+0xc8>
 80027a0:	232d      	movs	r3, #45	; 0x2d
 80027a2:	4276      	negs	r6, r6
 80027a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027a8:	485e      	ldr	r0, [pc, #376]	; (8002924 <_printf_i+0x244>)
 80027aa:	230a      	movs	r3, #10
 80027ac:	e019      	b.n	80027e2 <_printf_i+0x102>
 80027ae:	680e      	ldr	r6, [r1, #0]
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027b6:	bf18      	it	ne
 80027b8:	b236      	sxthne	r6, r6
 80027ba:	e7ef      	b.n	800279c <_printf_i+0xbc>
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	1d19      	adds	r1, r3, #4
 80027c2:	6029      	str	r1, [r5, #0]
 80027c4:	0601      	lsls	r1, r0, #24
 80027c6:	d501      	bpl.n	80027cc <_printf_i+0xec>
 80027c8:	681e      	ldr	r6, [r3, #0]
 80027ca:	e002      	b.n	80027d2 <_printf_i+0xf2>
 80027cc:	0646      	lsls	r6, r0, #25
 80027ce:	d5fb      	bpl.n	80027c8 <_printf_i+0xe8>
 80027d0:	881e      	ldrh	r6, [r3, #0]
 80027d2:	4854      	ldr	r0, [pc, #336]	; (8002924 <_printf_i+0x244>)
 80027d4:	2f6f      	cmp	r7, #111	; 0x6f
 80027d6:	bf0c      	ite	eq
 80027d8:	2308      	moveq	r3, #8
 80027da:	230a      	movne	r3, #10
 80027dc:	2100      	movs	r1, #0
 80027de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027e2:	6865      	ldr	r5, [r4, #4]
 80027e4:	60a5      	str	r5, [r4, #8]
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	bfa2      	ittt	ge
 80027ea:	6821      	ldrge	r1, [r4, #0]
 80027ec:	f021 0104 	bicge.w	r1, r1, #4
 80027f0:	6021      	strge	r1, [r4, #0]
 80027f2:	b90e      	cbnz	r6, 80027f8 <_printf_i+0x118>
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d04d      	beq.n	8002894 <_printf_i+0x1b4>
 80027f8:	4615      	mov	r5, r2
 80027fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80027fe:	fb03 6711 	mls	r7, r3, r1, r6
 8002802:	5dc7      	ldrb	r7, [r0, r7]
 8002804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002808:	4637      	mov	r7, r6
 800280a:	42bb      	cmp	r3, r7
 800280c:	460e      	mov	r6, r1
 800280e:	d9f4      	bls.n	80027fa <_printf_i+0x11a>
 8002810:	2b08      	cmp	r3, #8
 8002812:	d10b      	bne.n	800282c <_printf_i+0x14c>
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	07de      	lsls	r6, r3, #31
 8002818:	d508      	bpl.n	800282c <_printf_i+0x14c>
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	6861      	ldr	r1, [r4, #4]
 800281e:	4299      	cmp	r1, r3
 8002820:	bfde      	ittt	le
 8002822:	2330      	movle	r3, #48	; 0x30
 8002824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002828:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800282c:	1b52      	subs	r2, r2, r5
 800282e:	6122      	str	r2, [r4, #16]
 8002830:	f8cd a000 	str.w	sl, [sp]
 8002834:	464b      	mov	r3, r9
 8002836:	aa03      	add	r2, sp, #12
 8002838:	4621      	mov	r1, r4
 800283a:	4640      	mov	r0, r8
 800283c:	f7ff fee2 	bl	8002604 <_printf_common>
 8002840:	3001      	adds	r0, #1
 8002842:	d14c      	bne.n	80028de <_printf_i+0x1fe>
 8002844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002848:	b004      	add	sp, #16
 800284a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800284e:	4835      	ldr	r0, [pc, #212]	; (8002924 <_printf_i+0x244>)
 8002850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002854:	6829      	ldr	r1, [r5, #0]
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	f851 6b04 	ldr.w	r6, [r1], #4
 800285c:	6029      	str	r1, [r5, #0]
 800285e:	061d      	lsls	r5, r3, #24
 8002860:	d514      	bpl.n	800288c <_printf_i+0x1ac>
 8002862:	07df      	lsls	r7, r3, #31
 8002864:	bf44      	itt	mi
 8002866:	f043 0320 	orrmi.w	r3, r3, #32
 800286a:	6023      	strmi	r3, [r4, #0]
 800286c:	b91e      	cbnz	r6, 8002876 <_printf_i+0x196>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	f023 0320 	bic.w	r3, r3, #32
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	2310      	movs	r3, #16
 8002878:	e7b0      	b.n	80027dc <_printf_i+0xfc>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	2378      	movs	r3, #120	; 0x78
 8002884:	4828      	ldr	r0, [pc, #160]	; (8002928 <_printf_i+0x248>)
 8002886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800288a:	e7e3      	b.n	8002854 <_printf_i+0x174>
 800288c:	0659      	lsls	r1, r3, #25
 800288e:	bf48      	it	mi
 8002890:	b2b6      	uxthmi	r6, r6
 8002892:	e7e6      	b.n	8002862 <_printf_i+0x182>
 8002894:	4615      	mov	r5, r2
 8002896:	e7bb      	b.n	8002810 <_printf_i+0x130>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	6826      	ldr	r6, [r4, #0]
 800289c:	6961      	ldr	r1, [r4, #20]
 800289e:	1d18      	adds	r0, r3, #4
 80028a0:	6028      	str	r0, [r5, #0]
 80028a2:	0635      	lsls	r5, r6, #24
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	d501      	bpl.n	80028ac <_printf_i+0x1cc>
 80028a8:	6019      	str	r1, [r3, #0]
 80028aa:	e002      	b.n	80028b2 <_printf_i+0x1d2>
 80028ac:	0670      	lsls	r0, r6, #25
 80028ae:	d5fb      	bpl.n	80028a8 <_printf_i+0x1c8>
 80028b0:	8019      	strh	r1, [r3, #0]
 80028b2:	2300      	movs	r3, #0
 80028b4:	6123      	str	r3, [r4, #16]
 80028b6:	4615      	mov	r5, r2
 80028b8:	e7ba      	b.n	8002830 <_printf_i+0x150>
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	1d1a      	adds	r2, r3, #4
 80028be:	602a      	str	r2, [r5, #0]
 80028c0:	681d      	ldr	r5, [r3, #0]
 80028c2:	6862      	ldr	r2, [r4, #4]
 80028c4:	2100      	movs	r1, #0
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7fd fc92 	bl	80001f0 <memchr>
 80028cc:	b108      	cbz	r0, 80028d2 <_printf_i+0x1f2>
 80028ce:	1b40      	subs	r0, r0, r5
 80028d0:	6060      	str	r0, [r4, #4]
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	6123      	str	r3, [r4, #16]
 80028d6:	2300      	movs	r3, #0
 80028d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028dc:	e7a8      	b.n	8002830 <_printf_i+0x150>
 80028de:	6923      	ldr	r3, [r4, #16]
 80028e0:	462a      	mov	r2, r5
 80028e2:	4649      	mov	r1, r9
 80028e4:	4640      	mov	r0, r8
 80028e6:	47d0      	blx	sl
 80028e8:	3001      	adds	r0, #1
 80028ea:	d0ab      	beq.n	8002844 <_printf_i+0x164>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	079b      	lsls	r3, r3, #30
 80028f0:	d413      	bmi.n	800291a <_printf_i+0x23a>
 80028f2:	68e0      	ldr	r0, [r4, #12]
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	4298      	cmp	r0, r3
 80028f8:	bfb8      	it	lt
 80028fa:	4618      	movlt	r0, r3
 80028fc:	e7a4      	b.n	8002848 <_printf_i+0x168>
 80028fe:	2301      	movs	r3, #1
 8002900:	4632      	mov	r2, r6
 8002902:	4649      	mov	r1, r9
 8002904:	4640      	mov	r0, r8
 8002906:	47d0      	blx	sl
 8002908:	3001      	adds	r0, #1
 800290a:	d09b      	beq.n	8002844 <_printf_i+0x164>
 800290c:	3501      	adds	r5, #1
 800290e:	68e3      	ldr	r3, [r4, #12]
 8002910:	9903      	ldr	r1, [sp, #12]
 8002912:	1a5b      	subs	r3, r3, r1
 8002914:	42ab      	cmp	r3, r5
 8002916:	dcf2      	bgt.n	80028fe <_printf_i+0x21e>
 8002918:	e7eb      	b.n	80028f2 <_printf_i+0x212>
 800291a:	2500      	movs	r5, #0
 800291c:	f104 0619 	add.w	r6, r4, #25
 8002920:	e7f5      	b.n	800290e <_printf_i+0x22e>
 8002922:	bf00      	nop
 8002924:	08002bf5 	.word	0x08002bf5
 8002928:	08002c06 	.word	0x08002c06

0800292c <__sread>:
 800292c:	b510      	push	{r4, lr}
 800292e:	460c      	mov	r4, r1
 8002930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002934:	f000 f894 	bl	8002a60 <_read_r>
 8002938:	2800      	cmp	r0, #0
 800293a:	bfab      	itete	ge
 800293c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800293e:	89a3      	ldrhlt	r3, [r4, #12]
 8002940:	181b      	addge	r3, r3, r0
 8002942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002946:	bfac      	ite	ge
 8002948:	6563      	strge	r3, [r4, #84]	; 0x54
 800294a:	81a3      	strhlt	r3, [r4, #12]
 800294c:	bd10      	pop	{r4, pc}

0800294e <__swrite>:
 800294e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002952:	461f      	mov	r7, r3
 8002954:	898b      	ldrh	r3, [r1, #12]
 8002956:	05db      	lsls	r3, r3, #23
 8002958:	4605      	mov	r5, r0
 800295a:	460c      	mov	r4, r1
 800295c:	4616      	mov	r6, r2
 800295e:	d505      	bpl.n	800296c <__swrite+0x1e>
 8002960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002964:	2302      	movs	r3, #2
 8002966:	2200      	movs	r2, #0
 8002968:	f000 f868 	bl	8002a3c <_lseek_r>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	4632      	mov	r2, r6
 800297a:	463b      	mov	r3, r7
 800297c:	4628      	mov	r0, r5
 800297e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002982:	f000 b817 	b.w	80029b4 <_write_r>

08002986 <__sseek>:
 8002986:	b510      	push	{r4, lr}
 8002988:	460c      	mov	r4, r1
 800298a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298e:	f000 f855 	bl	8002a3c <_lseek_r>
 8002992:	1c43      	adds	r3, r0, #1
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	bf15      	itete	ne
 8002998:	6560      	strne	r0, [r4, #84]	; 0x54
 800299a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800299e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029a2:	81a3      	strheq	r3, [r4, #12]
 80029a4:	bf18      	it	ne
 80029a6:	81a3      	strhne	r3, [r4, #12]
 80029a8:	bd10      	pop	{r4, pc}

080029aa <__sclose>:
 80029aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ae:	f000 b813 	b.w	80029d8 <_close_r>
	...

080029b4 <_write_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4d07      	ldr	r5, [pc, #28]	; (80029d4 <_write_r+0x20>)
 80029b8:	4604      	mov	r4, r0
 80029ba:	4608      	mov	r0, r1
 80029bc:	4611      	mov	r1, r2
 80029be:	2200      	movs	r2, #0
 80029c0:	602a      	str	r2, [r5, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f7fe ff23 	bl	800180e <_write>
 80029c8:	1c43      	adds	r3, r0, #1
 80029ca:	d102      	bne.n	80029d2 <_write_r+0x1e>
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	b103      	cbz	r3, 80029d2 <_write_r+0x1e>
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	200000cc 	.word	0x200000cc

080029d8 <_close_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4d06      	ldr	r5, [pc, #24]	; (80029f4 <_close_r+0x1c>)
 80029dc:	2300      	movs	r3, #0
 80029de:	4604      	mov	r4, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	f7fe ff2f 	bl	8001846 <_close>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_close_r+0x1a>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_close_r+0x1a>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200000cc 	.word	0x200000cc

080029f8 <_fstat_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d07      	ldr	r5, [pc, #28]	; (8002a18 <_fstat_r+0x20>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	f7fe ff29 	bl	800185c <_fstat>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	d102      	bne.n	8002a14 <_fstat_r+0x1c>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b103      	cbz	r3, 8002a14 <_fstat_r+0x1c>
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	bf00      	nop
 8002a18:	200000cc 	.word	0x200000cc

08002a1c <_isatty_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4d06      	ldr	r5, [pc, #24]	; (8002a38 <_isatty_r+0x1c>)
 8002a20:	2300      	movs	r3, #0
 8002a22:	4604      	mov	r4, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f7fe ff27 	bl	800187a <_isatty>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d102      	bne.n	8002a36 <_isatty_r+0x1a>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	b103      	cbz	r3, 8002a36 <_isatty_r+0x1a>
 8002a34:	6023      	str	r3, [r4, #0]
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	200000cc 	.word	0x200000cc

08002a3c <_lseek_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4d07      	ldr	r5, [pc, #28]	; (8002a5c <_lseek_r+0x20>)
 8002a40:	4604      	mov	r4, r0
 8002a42:	4608      	mov	r0, r1
 8002a44:	4611      	mov	r1, r2
 8002a46:	2200      	movs	r2, #0
 8002a48:	602a      	str	r2, [r5, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7fe ff1f 	bl	800188e <_lseek>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d102      	bne.n	8002a5a <_lseek_r+0x1e>
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <_lseek_r+0x1e>
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	200000cc 	.word	0x200000cc

08002a60 <_read_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4d07      	ldr	r5, [pc, #28]	; (8002a80 <_read_r+0x20>)
 8002a64:	4604      	mov	r4, r0
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	602a      	str	r2, [r5, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7fe feb0 	bl	80017d4 <_read>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	d102      	bne.n	8002a7e <_read_r+0x1e>
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	b103      	cbz	r3, 8002a7e <_read_r+0x1e>
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	200000cc 	.word	0x200000cc

08002a84 <_init>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr

08002a90 <_fini>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr
