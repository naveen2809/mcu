
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e44  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002074  08002074  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002074  08002074  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002074  08002074  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800207c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000005c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b1d  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a96  00000000  00000000  00022bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000358  00000000  00000000  00023650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002c0  00000000  00000000  000239a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003915  00000000  00000000  00023c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f3f  00000000  00000000  0002757d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bfb7  00000000  00000000  0002b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00037473  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000135c  00000000  00000000  000374c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001fd4 	.word	0x08001fd4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000070 	.word	0x20000070
 80001e4:	08001fd4 	.word	0x08001fd4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay_us>:
#include "common_utilities.h"

struct General_Purpose_Timer_Handle_t TIM2_Handle;

void delay_us(uint32_t delay)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <delay_us+0x2c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 8000208:	bf00      	nop
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <delay_us+0x2c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	011b      	lsls	r3, r3, #4
 8000214:	429a      	cmp	r2, r3
 8000216:	d3f8      	bcc.n	800020a <delay_us+0x12>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000088 	.word	0x20000088

08000228 <configure_delay_timer>:

void configure_delay_timer(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <configure_delay_timer+0x3c>)
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 8000234:	2228      	movs	r2, #40	; 0x28
 8000236:	2100      	movs	r1, #0
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <configure_delay_timer+0x40>)
 800023a:	f001 f90f 	bl	800145c <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <configure_delay_timer+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <configure_delay_timer+0x3c>)
 8000246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800024a:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 800024c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000250:	f000 fd24 	bl	8000c9c <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <configure_delay_timer+0x3c>)
 8000256:	f000 f809 	bl	800026c <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <configure_delay_timer+0x3c>)
 800025c:	f000 fa2e 	bl	80006bc <General_Purpose_Timer_PeripheralEnable>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000088 	.word	0x20000088
 8000268:	2000008c 	.word	0x2000008c

0800026c <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	6852      	ldr	r2, [r2, #4]
 800027c:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6892      	ldr	r2, [r2, #8]
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	7b1b      	ldrb	r3, [r3, #12]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d16a      	bne.n	8000366 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	6a1a      	ldr	r2, [r3, #32]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f042 0201 	orr.w	r2, r2, #1
 800029e:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	7b5b      	ldrb	r3, [r3, #13]
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d11c      	bne.n	80002e2 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	699a      	ldr	r2, [r3, #24]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f022 0203 	bic.w	r2, r2, #3
 80002b6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	6912      	ldr	r2, [r2, #16]
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	699a      	ldr	r2, [r3, #24]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80002d0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	699a      	ldr	r2, [r3, #24]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80002e0:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	7b5b      	ldrb	r3, [r3, #13]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d11c      	bne.n	8000324 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	699a      	ldr	r2, [r3, #24]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f022 0203 	bic.w	r2, r2, #3
 80002f8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	6912      	ldr	r2, [r2, #16]
 8000302:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000312:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	699a      	ldr	r2, [r3, #24]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000322:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7b5b      	ldrb	r3, [r3, #13]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d11c      	bne.n	8000366 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f022 0203 	bic.w	r2, r2, #3
 800033a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6912      	ldr	r2, [r2, #16]
 8000344:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	699a      	ldr	r2, [r3, #24]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000354:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	699a      	ldr	r2, [r3, #24]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000364:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	7d1b      	ldrb	r3, [r3, #20]
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 80bf 	bne.w	80004ee <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	7d5b      	ldrb	r3, [r3, #21]
 8000374:	2b02      	cmp	r3, #2
 8000376:	d124      	bne.n	80003c2 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	699a      	ldr	r2, [r3, #24]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000386:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	6992      	ldr	r2, [r2, #24]
 8000390:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	699a      	ldr	r2, [r3, #24]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80003a0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	699a      	ldr	r2, [r3, #24]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80003b0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6a1a      	ldr	r2, [r3, #32]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f042 0210 	orr.w	r2, r2, #16
 80003c0:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7d5b      	ldrb	r3, [r3, #21]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d124      	bne.n	8000414 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	699a      	ldr	r2, [r3, #24]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80003d8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	6992      	ldr	r2, [r2, #24]
 80003e2:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80003f2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	699a      	ldr	r2, [r3, #24]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000402:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6a1a      	ldr	r2, [r3, #32]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f042 0210 	orr.w	r2, r2, #16
 8000412:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	7d5b      	ldrb	r3, [r3, #21]
 8000418:	2b04      	cmp	r3, #4
 800041a:	d124      	bne.n	8000466 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800042a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	6992      	ldr	r2, [r2, #24]
 8000434:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000444:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	699a      	ldr	r2, [r3, #24]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000454:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6a1a      	ldr	r2, [r3, #32]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f042 0210 	orr.w	r2, r2, #16
 8000464:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7d5b      	ldrb	r3, [r3, #21]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d13f      	bne.n	80004ee <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	699a      	ldr	r2, [r3, #24]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800047c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800048c:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	699a      	ldr	r2, [r3, #24]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800049c:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a1a      	ldr	r2, [r3, #32]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f022 0220 	bic.w	r2, r2, #32
 80004ac:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6a1a      	ldr	r2, [r3, #32]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80004bc:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80004cc:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	68da      	ldr	r2, [r3, #12]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f042 0204 	orr.w	r2, r2, #4
 80004dc:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6a1a      	ldr	r2, [r3, #32]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f042 0210 	orr.w	r2, r2, #16
 80004ec:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7f1b      	ldrb	r3, [r3, #28]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d16a      	bne.n	80005cc <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6a1a      	ldr	r2, [r3, #32]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000504:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	7f5b      	ldrb	r3, [r3, #29]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d11c      	bne.n	8000548 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	69da      	ldr	r2, [r3, #28]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f022 0203 	bic.w	r2, r2, #3
 800051c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	6a12      	ldr	r2, [r2, #32]
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	69da      	ldr	r2, [r3, #28]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000536:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000546:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7f5b      	ldrb	r3, [r3, #29]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d11c      	bne.n	800058a <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f022 0203 	bic.w	r2, r2, #3
 800055e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6a12      	ldr	r2, [r2, #32]
 8000568:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000578:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000588:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7f5b      	ldrb	r3, [r3, #29]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d11c      	bne.n	80005cc <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	69da      	ldr	r2, [r3, #28]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f022 0203 	bic.w	r2, r2, #3
 80005a0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	6a12      	ldr	r2, [r2, #32]
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005ba:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80005ca:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d16d      	bne.n	80006b2 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6a1a      	ldr	r2, [r3, #32]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005e4:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d11c      	bne.n	800062a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80005fe:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000608:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000618:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000628:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000630:	2b03      	cmp	r3, #3
 8000632:	d11c      	bne.n	800066e <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000642:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800065c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800066c:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000674:	2b04      	cmp	r3, #4
 8000676:	d11c      	bne.n	80006b2 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000686:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000690:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006a0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80006b0:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f042 0201 	orr.w	r2, r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80006de:	b480      	push	{r7}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	70fb      	strb	r3, [r7, #3]
 80006ea:	4613      	mov	r3, r2
 80006ec:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	78fa      	ldrb	r2, [r7, #3]
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	43d2      	mvns	r2, r2
 8000702:	401a      	ands	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	78b9      	ldrb	r1, [r7, #2]
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	431a      	orrs	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]

}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
 8000732:	4613      	mov	r3, r2
 8000734:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000748:	7afa      	ldrb	r2, [r7, #11]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3208      	adds	r2, #8
 800074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000752:	7aba      	ldrb	r2, [r7, #10]
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	210f      	movs	r1, #15
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	43d2      	mvns	r2, r2
 800075e:	4611      	mov	r1, r2
 8000760:	7afa      	ldrb	r2, [r7, #11]
 8000762:	4019      	ands	r1, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3208      	adds	r2, #8
 8000768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 800076c:	7afa      	ldrb	r2, [r7, #11]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3208      	adds	r2, #8
 8000772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000776:	78b9      	ldrb	r1, [r7, #2]
 8000778:	7aba      	ldrb	r2, [r7, #10]
 800077a:	0092      	lsls	r2, r2, #2
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	7afa      	ldrb	r2, [r7, #11]
 8000784:	4319      	orrs	r1, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3208      	adds	r2, #8
 800078a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	4613      	mov	r3, r2
 80007a6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	78fa      	ldrb	r2, [r7, #3]
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	78b9      	ldrb	r1, [r7, #2]
 80007c6:	78fa      	ldrb	r2, [r7, #3]
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	431a      	orrs	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	605a      	str	r2, [r3, #4]
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
 80007e8:	4613      	mov	r3, r2
 80007ea:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	2103      	movs	r1, #3
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	43d2      	mvns	r2, r2
 8000800:	401a      	ands	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	78b9      	ldrb	r1, [r7, #2]
 800080c:	78fa      	ldrb	r2, [r7, #3]
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	431a      	orrs	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	60da      	str	r2, [r3, #12]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
 8000830:	4613      	mov	r3, r2
 8000832:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	78fa      	ldrb	r2, [r7, #3]
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	2103      	movs	r1, #3
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	43d2      	mvns	r2, r2
 8000848:	401a      	ands	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	78b9      	ldrb	r1, [r7, #2]
 8000854:	78fa      	ldrb	r2, [r7, #3]
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	431a      	orrs	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	609a      	str	r2, [r3, #8]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	431a      	orrs	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	03db      	lsls	r3, r3, #15
 80008aa:	431a      	orrs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d10d      	bne.n	80008d4 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	69da      	ldr	r2, [r3, #28]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	039b      	lsls	r3, r3, #14
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80008dc:	f023 030f 	bic.w	r3, r3, #15
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	431a      	orrs	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	029b      	lsls	r3, r3, #10
 8000908:	431a      	orrs	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	601a      	str	r2, [r3, #0]

}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f84c 	bl	80009ea <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000952:	bf00      	nop
 8000954:	2101      	movs	r1, #1
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f869 	bl	8000a2e <I2C_GetFlagStatus>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f8      	beq.n	8000954 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f86f 	bl	8000a58 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 800097a:	bf00      	nop
 800097c:	2102      	movs	r1, #2
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f855 	bl	8000a2e <I2C_GetFlagStatus>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f8      	beq.n	800097c <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 f874 	bl	8000a78 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000990:	e012      	b.n	80009b8 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000992:	bf00      	nop
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 f849 	bl	8000a2e <I2C_GetFlagStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f8      	beq.n	8000994 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	611a      	str	r2, [r3, #16]
		TxBuf++;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
		Len--;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1e9      	bne.n	8000992 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 80009be:	bf00      	nop
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f000 f833 	bl	8000a2e <I2C_GetFlagStatus>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d1f8      	bne.n	80009c0 <I2CMasterSendData+0x86>
 80009ce:	2104      	movs	r1, #4
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f000 f82c 	bl	8000a2e <I2C_GetFlagStatus>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d1f1      	bne.n	80009c0 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f815 	bl	8000a0c <I2C_SendStopBit>

}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000aaa:	78fa      	ldrb	r2, [r7, #3]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	621a      	str	r2, [r3, #32]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000abe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ac2:	f7ff fb99 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ac6:	2030      	movs	r0, #48	; 0x30
 8000ac8:	f000 f846 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000acc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ad0:	f7ff fb92 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ad4:	2030      	movs	r0, #48	; 0x30
 8000ad6:	f000 f83f 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000ada:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ade:	f7ff fb8b 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ae2:	2030      	movs	r0, #48	; 0x30
 8000ae4:	f000 f838 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000ae8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aec:	f7ff fb84 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000af0:	2020      	movs	r0, #32
 8000af2:	f000 f831 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000af6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000afa:	f7ff fb7d 	bl	80001f8 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000afe:	2028      	movs	r0, #40	; 0x28
 8000b00:	f000 f82a 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b08:	f7ff fb76 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f000 f823 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b16:	f7ff fb6f 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f81c 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b24:	f7ff fb68 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f000 f815 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b32:	f7ff fb61 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b36:	2006      	movs	r0, #6
 8000b38:	f000 f80e 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b40:	f7ff fb5a 	bl	80001f8 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b44:	200c      	movs	r0, #12
 8000b46:	f000 f807 	bl	8000b58 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000b4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b4e:	f7ff fb53 	bl	80001f8 <delay_us>

	return;
 8000b52:	bf00      	nop
}
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f023 030f 	bic.w	r3, r3, #15
 8000b68:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f043 030c 	orr.w	r3, r3, #12
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	f043 030c 	orr.w	r3, r3, #12
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <lcd_pcf8574_send_cmd+0x5c>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <lcd_pcf8574_send_cmd+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	f7ff fec8 	bl	800093a <I2CMasterSendData>

	return;
 8000baa:	bf00      	nop
}
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f043 030d 	orr.w	r3, r3, #13
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	f043 0309 	orr.w	r3, r3, #9
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	f043 030d 	orr.w	r3, r3, #13
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	f043 0309 	orr.w	r3, r3, #9
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <lcd_pcf8574_send_data+0x5c>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <lcd_pcf8574_send_data+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	2204      	movs	r2, #4
 8000c0a:	f7ff fe96 	bl	800093a <I2CMasterSendData>

	return;
 8000c0e:	bf00      	nop
}
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ff97 	bl	8000b58 <lcd_pcf8574_send_cmd>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff ff90 	bl	8000b58 <lcd_pcf8574_send_cmd>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d108      	bne.n	8000c64 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	2b27      	cmp	r3, #39	; 0x27
 8000c56:	d802      	bhi.n	8000c5e <lcd_pcf8574_set_position+0x22>
			position = col;
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e011      	b.n	8000c82 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e00e      	b.n	8000c82 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d109      	bne.n	8000c7e <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	2b27      	cmp	r3, #39	; 0x27
 8000c6e:	d803      	bhi.n	8000c78 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	3340      	adds	r3, #64	; 0x40
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e004      	b.n	8000c82 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e001      	b.n	8000c82 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c88:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff63 	bl	8000b58 <lcd_pcf8574_send_cmd>

	return;
 8000c92:	bf00      	nop
}
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a88      	ldr	r2, [pc, #544]	; (8000ec8 <EnablePeriClk+0x22c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d108      	bne.n	8000cbe <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000cac:	4b87      	ldr	r3, [pc, #540]	; (8000ecc <EnablePeriClk+0x230>)
 8000cae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000cbc:	e19b      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a83      	ldr	r2, [pc, #524]	; (8000ed0 <EnablePeriClk+0x234>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d108      	bne.n	8000cd8 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000cc6:	4b81      	ldr	r3, [pc, #516]	; (8000ecc <EnablePeriClk+0x230>)
 8000cc8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f043 0202 	orr.w	r2, r3, #2
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	e18e      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a7e      	ldr	r2, [pc, #504]	; (8000ed4 <EnablePeriClk+0x238>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d108      	bne.n	8000cf2 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ce0:	4b7a      	ldr	r3, [pc, #488]	; (8000ecc <EnablePeriClk+0x230>)
 8000ce2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f043 0204 	orr.w	r2, r3, #4
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	e181      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a78      	ldr	r2, [pc, #480]	; (8000ed8 <EnablePeriClk+0x23c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d108      	bne.n	8000d0c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <EnablePeriClk+0x230>)
 8000cfc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f043 0208 	orr.w	r2, r3, #8
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	e174      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a73      	ldr	r2, [pc, #460]	; (8000edc <EnablePeriClk+0x240>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d108      	bne.n	8000d26 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d14:	4b6d      	ldr	r3, [pc, #436]	; (8000ecc <EnablePeriClk+0x230>)
 8000d16:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f043 0210 	orr.w	r2, r3, #16
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	e167      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a6d      	ldr	r2, [pc, #436]	; (8000ee0 <EnablePeriClk+0x244>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d108      	bne.n	8000d40 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <EnablePeriClk+0x230>)
 8000d30:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f043 0220 	orr.w	r2, r3, #32
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	601a      	str	r2, [r3, #0]
}
 8000d3e:	e15a      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a68      	ldr	r2, [pc, #416]	; (8000ee4 <EnablePeriClk+0x248>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d108      	bne.n	8000d5a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d48:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <EnablePeriClk+0x230>)
 8000d4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	e14d      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a62      	ldr	r2, [pc, #392]	; (8000ee8 <EnablePeriClk+0x24c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d108      	bne.n	8000d74 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <EnablePeriClk+0x230>)
 8000d64:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	e140      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a5d      	ldr	r2, [pc, #372]	; (8000eec <EnablePeriClk+0x250>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d108      	bne.n	8000d8e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <EnablePeriClk+0x230>)
 8000d7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	e133      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a57      	ldr	r2, [pc, #348]	; (8000ef0 <EnablePeriClk+0x254>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d108      	bne.n	8000da8 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <EnablePeriClk+0x258>)
 8000d98:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	e126      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a53      	ldr	r2, [pc, #332]	; (8000ef8 <EnablePeriClk+0x25c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d108      	bne.n	8000dc2 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000db0:	4b52      	ldr	r3, [pc, #328]	; (8000efc <EnablePeriClk+0x260>)
 8000db2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	e119      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4e      	ldr	r2, [pc, #312]	; (8000f00 <EnablePeriClk+0x264>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d108      	bne.n	8000ddc <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <EnablePeriClk+0x260>)
 8000dcc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]
}
 8000dda:	e10c      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <EnablePeriClk+0x268>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d108      	bne.n	8000df6 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000de4:	4b45      	ldr	r3, [pc, #276]	; (8000efc <EnablePeriClk+0x260>)
 8000de6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	e0ff      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a43      	ldr	r2, [pc, #268]	; (8000f08 <EnablePeriClk+0x26c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d108      	bne.n	8000e10 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <EnablePeriClk+0x260>)
 8000e00:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	e0f2      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <EnablePeriClk+0x270>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d108      	bne.n	8000e2a <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <EnablePeriClk+0x260>)
 8000e1a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	e0e5      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <EnablePeriClk+0x274>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d108      	bne.n	8000e44 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000e32:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <EnablePeriClk+0x258>)
 8000e34:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f043 0210 	orr.w	r2, r3, #16
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	e0d8      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <EnablePeriClk+0x278>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d108      	bne.n	8000e5e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <EnablePeriClk+0x260>)
 8000e4e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	e0cb      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <EnablePeriClk+0x27c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d108      	bne.n	8000e78 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <EnablePeriClk+0x260>)
 8000e68:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	e0be      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <EnablePeriClk+0x280>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d108      	bne.n	8000e92 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <EnablePeriClk+0x260>)
 8000e82:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	e0b1      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <EnablePeriClk+0x284>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d108      	bne.n	8000eac <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <EnablePeriClk+0x260>)
 8000e9c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	e0a4      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <EnablePeriClk+0x288>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d139      	bne.n	8000f28 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <EnablePeriClk+0x258>)
 8000eb6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f043 0220 	orr.w	r2, r3, #32
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	e097      	b.n	8000ff6 <EnablePeriClk+0x35a>
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40023830 	.word	0x40023830
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40021c00 	.word	0x40021c00
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	40023844 	.word	0x40023844
 8000ef8:	40003800 	.word	0x40003800
 8000efc:	40023840 	.word	0x40023840
 8000f00:	40003c00 	.word	0x40003c00
 8000f04:	40005400 	.word	0x40005400
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	40005c00 	.word	0x40005c00
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40004800 	.word	0x40004800
 8000f1c:	40004c00 	.word	0x40004c00
 8000f20:	40005000 	.word	0x40005000
 8000f24:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a35      	ldr	r2, [pc, #212]	; (8001000 <EnablePeriClk+0x364>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d108      	bne.n	8000f42 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f30:	4b34      	ldr	r3, [pc, #208]	; (8001004 <EnablePeriClk+0x368>)
 8000f32:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f043 0210 	orr.w	r2, r3, #16
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	e059      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a30      	ldr	r2, [pc, #192]	; (8001008 <EnablePeriClk+0x36c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d108      	bne.n	8000f5c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <EnablePeriClk+0x368>)
 8000f4c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f043 0220 	orr.w	r2, r3, #32
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	e04c      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a2b      	ldr	r2, [pc, #172]	; (800100c <EnablePeriClk+0x370>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d108      	bne.n	8000f76 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <EnablePeriClk+0x374>)
 8000f66:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	e03f      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <EnablePeriClk+0x378>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d108      	bne.n	8000f90 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <EnablePeriClk+0x374>)
 8000f80:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	e032      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f96:	d108      	bne.n	8000faa <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <EnablePeriClk+0x368>)
 8000f9a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	e025      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <EnablePeriClk+0x37c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d108      	bne.n	8000fc4 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <EnablePeriClk+0x368>)
 8000fb4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f043 0202 	orr.w	r2, r3, #2
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	e018      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <EnablePeriClk+0x380>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d108      	bne.n	8000fde <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <EnablePeriClk+0x368>)
 8000fce:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f043 0204 	orr.w	r2, r3, #4
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	e00b      	b.n	8000ff6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <EnablePeriClk+0x384>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d107      	bne.n	8000ff6 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <EnablePeriClk+0x368>)
 8000fe8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f043 0208 	orr.w	r2, r3, #8
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40001000 	.word	0x40001000
 8001004:	40023840 	.word	0x40023840
 8001008:	40001400 	.word	0x40001400
 800100c:	40026000 	.word	0x40026000
 8001010:	40023830 	.word	0x40023830
 8001014:	40026400 	.word	0x40026400
 8001018:	40000400 	.word	0x40000400
 800101c:	40000800 	.word	0x40000800
 8001020:	40000c00 	.word	0x40000c00

08001024 <main>:

uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;

int main(void)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
	uint16_t i;
	char message[]="Hello World!!!";
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x154>)
 800102c:	f107 0414 	add.w	r4, r7, #20
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	c407      	stmia	r4!, {r0, r1, r2}
 8001034:	8023      	strh	r3, [r4, #0]
 8001036:	3402      	adds	r4, #2
 8001038:	0c1b      	lsrs	r3, r3, #16
 800103a:	7023      	strb	r3, [r4, #0]
	char message2[]="Brave New World!";
 800103c:	4b4f      	ldr	r3, [pc, #316]	; (800117c <main+0x158>)
 800103e:	463c      	mov	r4, r7
 8001040:	461d      	mov	r5, r3
 8001042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	7023      	strb	r3, [r4, #0]

	//1a. Configure the I2C interface
	configure_i2c();
 800104a:	f000 f89f 	bl	800118c <configure_i2c>

	//1.b Configure the Timer Peripheral
	configure_delay_timer();
 800104e:	f7ff f8eb 	bl	8000228 <configure_delay_timer>

	setbuf(stdout, NULL);
 8001052:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <main+0x15c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fa1a 	bl	8001494 <setbuf>

	//2. Initialize the LDC module
	delay_us(1000000);
 8001060:	4848      	ldr	r0, [pc, #288]	; (8001184 <main+0x160>)
 8001062:	f7ff f8c9 	bl	80001f8 <delay_us>
	lcd_pcf8574_init();
 8001066:	f7ff fd28 	bl	8000aba <lcd_pcf8574_init>

	//3. Send message to the LCD module
	for(i=0;i<strlen(message);i++)
 800106a:	2300      	movs	r3, #0
 800106c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800106e:	e00a      	b.n	8001086 <main+0x62>
	{
		lcd_pcf8574_send_data((uint8_t)message[i]);
 8001070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	443b      	add	r3, r7
 8001076:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fd9e 	bl	8000bbc <lcd_pcf8574_send_data>
	for(i=0;i<strlen(message);i++)
 8001080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001082:	3301      	adds	r3, #1
 8001084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001086:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f8ab 	bl	80001e8 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	429c      	cmp	r4, r3
 8001096:	d3eb      	bcc.n	8001070 <main+0x4c>
	}

	lcd_pcf8574_send_cmd(0xC0);
 8001098:	20c0      	movs	r0, #192	; 0xc0
 800109a:	f7ff fd5d 	bl	8000b58 <lcd_pcf8574_send_cmd>

	//3. Send message to the LCD module
	for(i=0;i<strlen(message2);i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010a2:	e00a      	b.n	80010ba <main+0x96>
	{
		lcd_pcf8574_send_data((uint8_t)message2[i]);
 80010a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a6:	3328      	adds	r3, #40	; 0x28
 80010a8:	443b      	add	r3, r7
 80010aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd84 	bl	8000bbc <lcd_pcf8574_send_data>
	for(i=0;i<strlen(message2);i++)
 80010b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010b6:	3301      	adds	r3, #1
 80010b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010ba:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80010bc:	463b      	mov	r3, r7
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f892 	bl	80001e8 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	429c      	cmp	r4, r3
 80010c8:	d3ec      	bcc.n	80010a4 <main+0x80>
	}

	delay_us(5000000);
 80010ca:	482f      	ldr	r0, [pc, #188]	; (8001188 <main+0x164>)
 80010cc:	f7ff f894 	bl	80001f8 <delay_us>

	lcd_pcf8574_clear_screen();
 80010d0:	f7ff fda6 	bl	8000c20 <lcd_pcf8574_clear_screen>
	delay_us(3000);
 80010d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010d8:	f7ff f88e 	bl	80001f8 <delay_us>
	lcd_pcf8574_return_home();
 80010dc:	f7ff fda7 	bl	8000c2e <lcd_pcf8574_return_home>
	delay_us(3000);
 80010e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e4:	f7ff f888 	bl	80001f8 <delay_us>

	lcd_pcf8574_set_position(0,0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fda6 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'H');
 80010f0:	2048      	movs	r0, #72	; 0x48
 80010f2:	f000 f9bb 	bl	800146c <putchar>
	lcd_pcf8574_set_position(0,2);
 80010f6:	2102      	movs	r1, #2
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fd9f 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'E');
 80010fe:	2045      	movs	r0, #69	; 0x45
 8001100:	f000 f9b4 	bl	800146c <putchar>
	lcd_pcf8574_set_position(0,4);
 8001104:	2104      	movs	r1, #4
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fd98 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'L');
 800110c:	204c      	movs	r0, #76	; 0x4c
 800110e:	f000 f9ad 	bl	800146c <putchar>
	lcd_pcf8574_set_position(0,6);
 8001112:	2106      	movs	r1, #6
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fd91 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'L');
 800111a:	204c      	movs	r0, #76	; 0x4c
 800111c:	f000 f9a6 	bl	800146c <putchar>
	lcd_pcf8574_set_position(0,8);
 8001120:	2108      	movs	r1, #8
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fd8a 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'O');
 8001128:	204f      	movs	r0, #79	; 0x4f
 800112a:	f000 f99f 	bl	800146c <putchar>

	lcd_pcf8574_set_position(1,0);
 800112e:	2100      	movs	r1, #0
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fd83 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'W');
 8001136:	2057      	movs	r0, #87	; 0x57
 8001138:	f000 f998 	bl	800146c <putchar>
	lcd_pcf8574_set_position(1,2);
 800113c:	2102      	movs	r1, #2
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fd7c 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'O');
 8001144:	204f      	movs	r0, #79	; 0x4f
 8001146:	f000 f991 	bl	800146c <putchar>
	lcd_pcf8574_set_position(1,4);
 800114a:	2104      	movs	r1, #4
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff fd75 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'R');
 8001152:	2052      	movs	r0, #82	; 0x52
 8001154:	f000 f98a 	bl	800146c <putchar>
	lcd_pcf8574_set_position(1,6);
 8001158:	2106      	movs	r1, #6
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fd6e 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'L');
 8001160:	204c      	movs	r0, #76	; 0x4c
 8001162:	f000 f983 	bl	800146c <putchar>
	lcd_pcf8574_set_position(1,8);
 8001166:	2108      	movs	r1, #8
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff fd67 	bl	8000c3c <lcd_pcf8574_set_position>
	printf("%c",'D');
 800116e:	2044      	movs	r0, #68	; 0x44
 8001170:	f000 f97c 	bl	800146c <putchar>

	while(1);
 8001174:	e7fe      	b.n	8001174 <main+0x150>
 8001176:	bf00      	nop
 8001178:	08001fec 	.word	0x08001fec
 800117c:	08001ffc 	.word	0x08001ffc
 8001180:	20000008 	.word	0x20000008
 8001184:	000f4240 	.word	0x000f4240
 8001188:	004c4b40 	.word	0x004c4b40

0800118c <configure_i2c>:

	return 0;
}

void configure_i2c(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 8001192:	463b      	mov	r3, r7
 8001194:	2218      	movs	r2, #24
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f95f 	bl	800145c <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 800119e:	482d      	ldr	r0, [pc, #180]	; (8001254 <configure_i2c+0xc8>)
 80011a0:	f7ff fd7c 	bl	8000c9c <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 80011a4:	2202      	movs	r2, #2
 80011a6:	2107      	movs	r1, #7
 80011a8:	482a      	ldr	r0, [pc, #168]	; (8001254 <configure_i2c+0xc8>)
 80011aa:	f7ff fa98 	bl	80006de <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 80011ae:	2202      	movs	r2, #2
 80011b0:	2106      	movs	r1, #6
 80011b2:	4828      	ldr	r0, [pc, #160]	; (8001254 <configure_i2c+0xc8>)
 80011b4:	f7ff fa93 	bl	80006de <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 80011b8:	2204      	movs	r2, #4
 80011ba:	2107      	movs	r1, #7
 80011bc:	4825      	ldr	r0, [pc, #148]	; (8001254 <configure_i2c+0xc8>)
 80011be:	f7ff fab2 	bl	8000726 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 80011c2:	2204      	movs	r2, #4
 80011c4:	2106      	movs	r1, #6
 80011c6:	4823      	ldr	r0, [pc, #140]	; (8001254 <configure_i2c+0xc8>)
 80011c8:	f7ff faad 	bl	8000726 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2107      	movs	r1, #7
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <configure_i2c+0xc8>)
 80011d2:	f7ff fae1 	bl	8000798 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2106      	movs	r1, #6
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <configure_i2c+0xc8>)
 80011dc:	f7ff fadc 	bl	8000798 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 80011e0:	2202      	movs	r2, #2
 80011e2:	2107      	movs	r1, #7
 80011e4:	481b      	ldr	r0, [pc, #108]	; (8001254 <configure_i2c+0xc8>)
 80011e6:	f7ff fb1d 	bl	8000824 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 80011ea:	2202      	movs	r2, #2
 80011ec:	2106      	movs	r1, #6
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <configure_i2c+0xc8>)
 80011f0:	f7ff fb18 	bl	8000824 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2107      	movs	r1, #7
 80011f8:	4816      	ldr	r0, [pc, #88]	; (8001254 <configure_i2c+0xc8>)
 80011fa:	f7ff faef 	bl	80007dc <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 80011fe:	2201      	movs	r2, #1
 8001200:	2106      	movs	r1, #6
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <configure_i2c+0xc8>)
 8001204:	f7ff faea 	bl	80007dc <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8001208:	2310      	movs	r3, #16
 800120a:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 8001214:	2350      	movs	r3, #80	; 0x50
 8001216:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <configure_i2c+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd3b 	bl	8000c9c <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <configure_i2c+0xcc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	463a      	mov	r2, r7
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb1c 	bl	800086c <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <configure_i2c+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2111      	movs	r1, #17
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fc2d 	bl	8000a9a <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <configure_i2c+0xcc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fb67 	bl	8000918 <I2CEnable>

	return;
 800124a:	bf00      	nop
}
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020400 	.word	0x40020400
 8001258:	20000000 	.word	0x20000000

0800125c <LCD_SendChar>:

void LCD_SendChar(uint8_t ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fca7 	bl	8000bbc <lcd_pcf8574_send_data>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e00a      	b.n	800129e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001288:	f3af 8000 	nop.w
 800128c:	4601      	mov	r1, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbf0      	blt.n	8001288 <_read+0x12>
  }

  return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e009      	b.n	80012d6 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	 //UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffc6 	bl	800125c <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbf1      	blt.n	80012c2 <_write+0x12>
  }
  return len;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_close>:

int _close(int file)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	605a      	str	r2, [r3, #4]
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <_isatty>:

int _isatty(int file)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f000 f846 	bl	8001408 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200000b4 	.word	0x200000b4
 80013b0:	200000c8 	.word	0x200000c8

080013b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013e2:	f000 f817 	bl	8001414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7ff fe1d 	bl	8001024 <main>

080013ea <LoopForever>:

LoopForever:
  b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013f8:	0800207c 	.word	0x0800207c
  ldr r2, =_sbss
 80013fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001400:	200000c8 	.word	0x200000c8

08001404 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <__errno>:
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <__errno+0x8>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008

08001414 <__libc_init_array>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	4d0d      	ldr	r5, [pc, #52]	; (800144c <__libc_init_array+0x38>)
 8001418:	4c0d      	ldr	r4, [pc, #52]	; (8001450 <__libc_init_array+0x3c>)
 800141a:	1b64      	subs	r4, r4, r5
 800141c:	10a4      	asrs	r4, r4, #2
 800141e:	2600      	movs	r6, #0
 8001420:	42a6      	cmp	r6, r4
 8001422:	d109      	bne.n	8001438 <__libc_init_array+0x24>
 8001424:	4d0b      	ldr	r5, [pc, #44]	; (8001454 <__libc_init_array+0x40>)
 8001426:	4c0c      	ldr	r4, [pc, #48]	; (8001458 <__libc_init_array+0x44>)
 8001428:	f000 fdd4 	bl	8001fd4 <_init>
 800142c:	1b64      	subs	r4, r4, r5
 800142e:	10a4      	asrs	r4, r4, #2
 8001430:	2600      	movs	r6, #0
 8001432:	42a6      	cmp	r6, r4
 8001434:	d105      	bne.n	8001442 <__libc_init_array+0x2e>
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	f855 3b04 	ldr.w	r3, [r5], #4
 800143c:	4798      	blx	r3
 800143e:	3601      	adds	r6, #1
 8001440:	e7ee      	b.n	8001420 <__libc_init_array+0xc>
 8001442:	f855 3b04 	ldr.w	r3, [r5], #4
 8001446:	4798      	blx	r3
 8001448:	3601      	adds	r6, #1
 800144a:	e7f2      	b.n	8001432 <__libc_init_array+0x1e>
 800144c:	08002074 	.word	0x08002074
 8001450:	08002074 	.word	0x08002074
 8001454:	08002074 	.word	0x08002074
 8001458:	08002078 	.word	0x08002078

0800145c <memset>:
 800145c:	4402      	add	r2, r0
 800145e:	4603      	mov	r3, r0
 8001460:	4293      	cmp	r3, r2
 8001462:	d100      	bne.n	8001466 <memset+0xa>
 8001464:	4770      	bx	lr
 8001466:	f803 1b01 	strb.w	r1, [r3], #1
 800146a:	e7f9      	b.n	8001460 <memset+0x4>

0800146c <putchar>:
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <putchar+0x24>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	4605      	mov	r5, r0
 8001474:	b124      	cbz	r4, 8001480 <putchar+0x14>
 8001476:	69a3      	ldr	r3, [r4, #24]
 8001478:	b913      	cbnz	r3, 8001480 <putchar+0x14>
 800147a:	4620      	mov	r0, r4
 800147c:	f000 faae 	bl	80019dc <__sinit>
 8001480:	68a2      	ldr	r2, [r4, #8]
 8001482:	4629      	mov	r1, r5
 8001484:	4620      	mov	r0, r4
 8001486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800148a:	f000 bc93 	b.w	8001db4 <_putc_r>
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <setbuf>:
 8001494:	2900      	cmp	r1, #0
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	bf0c      	ite	eq
 800149c:	2202      	moveq	r2, #2
 800149e:	2200      	movne	r2, #0
 80014a0:	f000 b800 	b.w	80014a4 <setvbuf>

080014a4 <setvbuf>:
 80014a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80014a8:	461d      	mov	r5, r3
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <setvbuf+0x17c>)
 80014ac:	681f      	ldr	r7, [r3, #0]
 80014ae:	4604      	mov	r4, r0
 80014b0:	460e      	mov	r6, r1
 80014b2:	4690      	mov	r8, r2
 80014b4:	b127      	cbz	r7, 80014c0 <setvbuf+0x1c>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	b913      	cbnz	r3, 80014c0 <setvbuf+0x1c>
 80014ba:	4638      	mov	r0, r7
 80014bc:	f000 fa8e 	bl	80019dc <__sinit>
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <setvbuf+0x180>)
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d167      	bne.n	8001596 <setvbuf+0xf2>
 80014c6:	687c      	ldr	r4, [r7, #4]
 80014c8:	f1b8 0f02 	cmp.w	r8, #2
 80014cc:	d006      	beq.n	80014dc <setvbuf+0x38>
 80014ce:	f1b8 0f01 	cmp.w	r8, #1
 80014d2:	f200 809f 	bhi.w	8001614 <setvbuf+0x170>
 80014d6:	2d00      	cmp	r5, #0
 80014d8:	f2c0 809c 	blt.w	8001614 <setvbuf+0x170>
 80014dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014de:	07db      	lsls	r3, r3, #31
 80014e0:	d405      	bmi.n	80014ee <setvbuf+0x4a>
 80014e2:	89a3      	ldrh	r3, [r4, #12]
 80014e4:	0598      	lsls	r0, r3, #22
 80014e6:	d402      	bmi.n	80014ee <setvbuf+0x4a>
 80014e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ea:	f000 fb15 	bl	8001b18 <__retarget_lock_acquire_recursive>
 80014ee:	4621      	mov	r1, r4
 80014f0:	4638      	mov	r0, r7
 80014f2:	f000 f9df 	bl	80018b4 <_fflush_r>
 80014f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014f8:	b141      	cbz	r1, 800150c <setvbuf+0x68>
 80014fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014fe:	4299      	cmp	r1, r3
 8001500:	d002      	beq.n	8001508 <setvbuf+0x64>
 8001502:	4638      	mov	r0, r7
 8001504:	f000 fb78 	bl	8001bf8 <_free_r>
 8001508:	2300      	movs	r3, #0
 800150a:	6363      	str	r3, [r4, #52]	; 0x34
 800150c:	2300      	movs	r3, #0
 800150e:	61a3      	str	r3, [r4, #24]
 8001510:	6063      	str	r3, [r4, #4]
 8001512:	89a3      	ldrh	r3, [r4, #12]
 8001514:	0619      	lsls	r1, r3, #24
 8001516:	d503      	bpl.n	8001520 <setvbuf+0x7c>
 8001518:	6921      	ldr	r1, [r4, #16]
 800151a:	4638      	mov	r0, r7
 800151c:	f000 fb6c 	bl	8001bf8 <_free_r>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	f1b8 0f02 	cmp.w	r8, #2
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	d06c      	beq.n	800160c <setvbuf+0x168>
 8001532:	ab01      	add	r3, sp, #4
 8001534:	466a      	mov	r2, sp
 8001536:	4621      	mov	r1, r4
 8001538:	4638      	mov	r0, r7
 800153a:	f000 faef 	bl	8001b1c <__swhatbuf_r>
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	4318      	orrs	r0, r3
 8001542:	81a0      	strh	r0, [r4, #12]
 8001544:	2d00      	cmp	r5, #0
 8001546:	d130      	bne.n	80015aa <setvbuf+0x106>
 8001548:	9d00      	ldr	r5, [sp, #0]
 800154a:	4628      	mov	r0, r5
 800154c:	f000 fb4c 	bl	8001be8 <malloc>
 8001550:	4606      	mov	r6, r0
 8001552:	2800      	cmp	r0, #0
 8001554:	d155      	bne.n	8001602 <setvbuf+0x15e>
 8001556:	f8dd 9000 	ldr.w	r9, [sp]
 800155a:	45a9      	cmp	r9, r5
 800155c:	d14a      	bne.n	80015f4 <setvbuf+0x150>
 800155e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001562:	2200      	movs	r2, #0
 8001564:	60a2      	str	r2, [r4, #8]
 8001566:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800156a:	6022      	str	r2, [r4, #0]
 800156c:	6122      	str	r2, [r4, #16]
 800156e:	2201      	movs	r2, #1
 8001570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001574:	6162      	str	r2, [r4, #20]
 8001576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	07d2      	lsls	r2, r2, #31
 800157e:	81a3      	strh	r3, [r4, #12]
 8001580:	d405      	bmi.n	800158e <setvbuf+0xea>
 8001582:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001586:	d102      	bne.n	800158e <setvbuf+0xea>
 8001588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800158a:	f000 fac6 	bl	8001b1a <__retarget_lock_release_recursive>
 800158e:	4628      	mov	r0, r5
 8001590:	b003      	add	sp, #12
 8001592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <setvbuf+0x184>)
 8001598:	429c      	cmp	r4, r3
 800159a:	d101      	bne.n	80015a0 <setvbuf+0xfc>
 800159c:	68bc      	ldr	r4, [r7, #8]
 800159e:	e793      	b.n	80014c8 <setvbuf+0x24>
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <setvbuf+0x188>)
 80015a2:	429c      	cmp	r4, r3
 80015a4:	bf08      	it	eq
 80015a6:	68fc      	ldreq	r4, [r7, #12]
 80015a8:	e78e      	b.n	80014c8 <setvbuf+0x24>
 80015aa:	2e00      	cmp	r6, #0
 80015ac:	d0cd      	beq.n	800154a <setvbuf+0xa6>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	b913      	cbnz	r3, 80015b8 <setvbuf+0x114>
 80015b2:	4638      	mov	r0, r7
 80015b4:	f000 fa12 	bl	80019dc <__sinit>
 80015b8:	f1b8 0f01 	cmp.w	r8, #1
 80015bc:	bf08      	it	eq
 80015be:	89a3      	ldrheq	r3, [r4, #12]
 80015c0:	6026      	str	r6, [r4, #0]
 80015c2:	bf04      	itt	eq
 80015c4:	f043 0301 	orreq.w	r3, r3, #1
 80015c8:	81a3      	strheq	r3, [r4, #12]
 80015ca:	89a2      	ldrh	r2, [r4, #12]
 80015cc:	f012 0308 	ands.w	r3, r2, #8
 80015d0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80015d4:	d01c      	beq.n	8001610 <setvbuf+0x16c>
 80015d6:	07d3      	lsls	r3, r2, #31
 80015d8:	bf41      	itttt	mi
 80015da:	2300      	movmi	r3, #0
 80015dc:	426d      	negmi	r5, r5
 80015de:	60a3      	strmi	r3, [r4, #8]
 80015e0:	61a5      	strmi	r5, [r4, #24]
 80015e2:	bf58      	it	pl
 80015e4:	60a5      	strpl	r5, [r4, #8]
 80015e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80015e8:	f015 0501 	ands.w	r5, r5, #1
 80015ec:	d115      	bne.n	800161a <setvbuf+0x176>
 80015ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80015f2:	e7c8      	b.n	8001586 <setvbuf+0xe2>
 80015f4:	4648      	mov	r0, r9
 80015f6:	f000 faf7 	bl	8001be8 <malloc>
 80015fa:	4606      	mov	r6, r0
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d0ae      	beq.n	800155e <setvbuf+0xba>
 8001600:	464d      	mov	r5, r9
 8001602:	89a3      	ldrh	r3, [r4, #12]
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	81a3      	strh	r3, [r4, #12]
 800160a:	e7d0      	b.n	80015ae <setvbuf+0x10a>
 800160c:	2500      	movs	r5, #0
 800160e:	e7a8      	b.n	8001562 <setvbuf+0xbe>
 8001610:	60a3      	str	r3, [r4, #8]
 8001612:	e7e8      	b.n	80015e6 <setvbuf+0x142>
 8001614:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001618:	e7b9      	b.n	800158e <setvbuf+0xea>
 800161a:	2500      	movs	r5, #0
 800161c:	e7b7      	b.n	800158e <setvbuf+0xea>
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	08002034 	.word	0x08002034
 8001628:	08002054 	.word	0x08002054
 800162c:	08002014 	.word	0x08002014

08001630 <__swbuf_r>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	460e      	mov	r6, r1
 8001634:	4614      	mov	r4, r2
 8001636:	4605      	mov	r5, r0
 8001638:	b118      	cbz	r0, 8001642 <__swbuf_r+0x12>
 800163a:	6983      	ldr	r3, [r0, #24]
 800163c:	b90b      	cbnz	r3, 8001642 <__swbuf_r+0x12>
 800163e:	f000 f9cd 	bl	80019dc <__sinit>
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <__swbuf_r+0x98>)
 8001644:	429c      	cmp	r4, r3
 8001646:	d12b      	bne.n	80016a0 <__swbuf_r+0x70>
 8001648:	686c      	ldr	r4, [r5, #4]
 800164a:	69a3      	ldr	r3, [r4, #24]
 800164c:	60a3      	str	r3, [r4, #8]
 800164e:	89a3      	ldrh	r3, [r4, #12]
 8001650:	071a      	lsls	r2, r3, #28
 8001652:	d52f      	bpl.n	80016b4 <__swbuf_r+0x84>
 8001654:	6923      	ldr	r3, [r4, #16]
 8001656:	b36b      	cbz	r3, 80016b4 <__swbuf_r+0x84>
 8001658:	6923      	ldr	r3, [r4, #16]
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	1ac0      	subs	r0, r0, r3
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	b2f6      	uxtb	r6, r6
 8001662:	4283      	cmp	r3, r0
 8001664:	4637      	mov	r7, r6
 8001666:	dc04      	bgt.n	8001672 <__swbuf_r+0x42>
 8001668:	4621      	mov	r1, r4
 800166a:	4628      	mov	r0, r5
 800166c:	f000 f922 	bl	80018b4 <_fflush_r>
 8001670:	bb30      	cbnz	r0, 80016c0 <__swbuf_r+0x90>
 8001672:	68a3      	ldr	r3, [r4, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60a3      	str	r3, [r4, #8]
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	6022      	str	r2, [r4, #0]
 800167e:	701e      	strb	r6, [r3, #0]
 8001680:	6963      	ldr	r3, [r4, #20]
 8001682:	3001      	adds	r0, #1
 8001684:	4283      	cmp	r3, r0
 8001686:	d004      	beq.n	8001692 <__swbuf_r+0x62>
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	07db      	lsls	r3, r3, #31
 800168c:	d506      	bpl.n	800169c <__swbuf_r+0x6c>
 800168e:	2e0a      	cmp	r6, #10
 8001690:	d104      	bne.n	800169c <__swbuf_r+0x6c>
 8001692:	4621      	mov	r1, r4
 8001694:	4628      	mov	r0, r5
 8001696:	f000 f90d 	bl	80018b4 <_fflush_r>
 800169a:	b988      	cbnz	r0, 80016c0 <__swbuf_r+0x90>
 800169c:	4638      	mov	r0, r7
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <__swbuf_r+0x9c>)
 80016a2:	429c      	cmp	r4, r3
 80016a4:	d101      	bne.n	80016aa <__swbuf_r+0x7a>
 80016a6:	68ac      	ldr	r4, [r5, #8]
 80016a8:	e7cf      	b.n	800164a <__swbuf_r+0x1a>
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <__swbuf_r+0xa0>)
 80016ac:	429c      	cmp	r4, r3
 80016ae:	bf08      	it	eq
 80016b0:	68ec      	ldreq	r4, [r5, #12]
 80016b2:	e7ca      	b.n	800164a <__swbuf_r+0x1a>
 80016b4:	4621      	mov	r1, r4
 80016b6:	4628      	mov	r0, r5
 80016b8:	f000 f80c 	bl	80016d4 <__swsetup_r>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0cb      	beq.n	8001658 <__swbuf_r+0x28>
 80016c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80016c4:	e7ea      	b.n	800169c <__swbuf_r+0x6c>
 80016c6:	bf00      	nop
 80016c8:	08002034 	.word	0x08002034
 80016cc:	08002054 	.word	0x08002054
 80016d0:	08002014 	.word	0x08002014

080016d4 <__swsetup_r>:
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <__swsetup_r+0xcc>)
 80016d6:	b570      	push	{r4, r5, r6, lr}
 80016d8:	681d      	ldr	r5, [r3, #0]
 80016da:	4606      	mov	r6, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	b125      	cbz	r5, 80016ea <__swsetup_r+0x16>
 80016e0:	69ab      	ldr	r3, [r5, #24]
 80016e2:	b913      	cbnz	r3, 80016ea <__swsetup_r+0x16>
 80016e4:	4628      	mov	r0, r5
 80016e6:	f000 f979 	bl	80019dc <__sinit>
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <__swsetup_r+0xd0>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	d10f      	bne.n	8001710 <__swsetup_r+0x3c>
 80016f0:	686c      	ldr	r4, [r5, #4]
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016f8:	0719      	lsls	r1, r3, #28
 80016fa:	d42c      	bmi.n	8001756 <__swsetup_r+0x82>
 80016fc:	06dd      	lsls	r5, r3, #27
 80016fe:	d411      	bmi.n	8001724 <__swsetup_r+0x50>
 8001700:	2309      	movs	r3, #9
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170e:	e03e      	b.n	800178e <__swsetup_r+0xba>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <__swsetup_r+0xd4>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <__swsetup_r+0x46>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7eb      	b.n	80016f2 <__swsetup_r+0x1e>
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <__swsetup_r+0xd8>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7e6      	b.n	80016f2 <__swsetup_r+0x1e>
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	d512      	bpl.n	800174e <__swsetup_r+0x7a>
 8001728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172a:	b141      	cbz	r1, 800173e <__swsetup_r+0x6a>
 800172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001730:	4299      	cmp	r1, r3
 8001732:	d002      	beq.n	800173a <__swsetup_r+0x66>
 8001734:	4630      	mov	r0, r6
 8001736:	f000 fa5f 	bl	8001bf8 <_free_r>
 800173a:	2300      	movs	r3, #0
 800173c:	6363      	str	r3, [r4, #52]	; 0x34
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	2300      	movs	r3, #0
 8001748:	6063      	str	r3, [r4, #4]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	b94b      	cbnz	r3, 800176e <__swsetup_r+0x9a>
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d003      	beq.n	800176e <__swsetup_r+0x9a>
 8001766:	4621      	mov	r1, r4
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f9fd 	bl	8001b68 <__smakebuf_r>
 800176e:	89a0      	ldrh	r0, [r4, #12]
 8001770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001774:	f010 0301 	ands.w	r3, r0, #1
 8001778:	d00a      	beq.n	8001790 <__swsetup_r+0xbc>
 800177a:	2300      	movs	r3, #0
 800177c:	60a3      	str	r3, [r4, #8]
 800177e:	6963      	ldr	r3, [r4, #20]
 8001780:	425b      	negs	r3, r3
 8001782:	61a3      	str	r3, [r4, #24]
 8001784:	6923      	ldr	r3, [r4, #16]
 8001786:	b943      	cbnz	r3, 800179a <__swsetup_r+0xc6>
 8001788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800178c:	d1ba      	bne.n	8001704 <__swsetup_r+0x30>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	0781      	lsls	r1, r0, #30
 8001792:	bf58      	it	pl
 8001794:	6963      	ldrpl	r3, [r4, #20]
 8001796:	60a3      	str	r3, [r4, #8]
 8001798:	e7f4      	b.n	8001784 <__swsetup_r+0xb0>
 800179a:	2000      	movs	r0, #0
 800179c:	e7f7      	b.n	800178e <__swsetup_r+0xba>
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008
 80017a4:	08002034 	.word	0x08002034
 80017a8:	08002054 	.word	0x08002054
 80017ac:	08002014 	.word	0x08002014

080017b0 <__sflush_r>:
 80017b0:	898a      	ldrh	r2, [r1, #12]
 80017b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b4:	4605      	mov	r5, r0
 80017b6:	0710      	lsls	r0, r2, #28
 80017b8:	460c      	mov	r4, r1
 80017ba:	d457      	bmi.n	800186c <__sflush_r+0xbc>
 80017bc:	684b      	ldr	r3, [r1, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dc04      	bgt.n	80017cc <__sflush_r+0x1c>
 80017c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dc01      	bgt.n	80017cc <__sflush_r+0x1c>
 80017c8:	2000      	movs	r0, #0
 80017ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ce:	2e00      	cmp	r6, #0
 80017d0:	d0fa      	beq.n	80017c8 <__sflush_r+0x18>
 80017d2:	2300      	movs	r3, #0
 80017d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017d8:	682f      	ldr	r7, [r5, #0]
 80017da:	602b      	str	r3, [r5, #0]
 80017dc:	d032      	beq.n	8001844 <__sflush_r+0x94>
 80017de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	075a      	lsls	r2, r3, #29
 80017e4:	d505      	bpl.n	80017f2 <__sflush_r+0x42>
 80017e6:	6863      	ldr	r3, [r4, #4]
 80017e8:	1ac0      	subs	r0, r0, r3
 80017ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017ec:	b10b      	cbz	r3, 80017f2 <__sflush_r+0x42>
 80017ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017f0:	1ac0      	subs	r0, r0, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	4602      	mov	r2, r0
 80017f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f8:	6a21      	ldr	r1, [r4, #32]
 80017fa:	4628      	mov	r0, r5
 80017fc:	47b0      	blx	r6
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	d106      	bne.n	8001812 <__sflush_r+0x62>
 8001804:	6829      	ldr	r1, [r5, #0]
 8001806:	291d      	cmp	r1, #29
 8001808:	d82c      	bhi.n	8001864 <__sflush_r+0xb4>
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <__sflush_r+0x100>)
 800180c:	40ca      	lsrs	r2, r1
 800180e:	07d6      	lsls	r6, r2, #31
 8001810:	d528      	bpl.n	8001864 <__sflush_r+0xb4>
 8001812:	2200      	movs	r2, #0
 8001814:	6062      	str	r2, [r4, #4]
 8001816:	04d9      	lsls	r1, r3, #19
 8001818:	6922      	ldr	r2, [r4, #16]
 800181a:	6022      	str	r2, [r4, #0]
 800181c:	d504      	bpl.n	8001828 <__sflush_r+0x78>
 800181e:	1c42      	adds	r2, r0, #1
 8001820:	d101      	bne.n	8001826 <__sflush_r+0x76>
 8001822:	682b      	ldr	r3, [r5, #0]
 8001824:	b903      	cbnz	r3, 8001828 <__sflush_r+0x78>
 8001826:	6560      	str	r0, [r4, #84]	; 0x54
 8001828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800182a:	602f      	str	r7, [r5, #0]
 800182c:	2900      	cmp	r1, #0
 800182e:	d0cb      	beq.n	80017c8 <__sflush_r+0x18>
 8001830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001834:	4299      	cmp	r1, r3
 8001836:	d002      	beq.n	800183e <__sflush_r+0x8e>
 8001838:	4628      	mov	r0, r5
 800183a:	f000 f9dd 	bl	8001bf8 <_free_r>
 800183e:	2000      	movs	r0, #0
 8001840:	6360      	str	r0, [r4, #52]	; 0x34
 8001842:	e7c2      	b.n	80017ca <__sflush_r+0x1a>
 8001844:	6a21      	ldr	r1, [r4, #32]
 8001846:	2301      	movs	r3, #1
 8001848:	4628      	mov	r0, r5
 800184a:	47b0      	blx	r6
 800184c:	1c41      	adds	r1, r0, #1
 800184e:	d1c7      	bne.n	80017e0 <__sflush_r+0x30>
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0c4      	beq.n	80017e0 <__sflush_r+0x30>
 8001856:	2b1d      	cmp	r3, #29
 8001858:	d001      	beq.n	800185e <__sflush_r+0xae>
 800185a:	2b16      	cmp	r3, #22
 800185c:	d101      	bne.n	8001862 <__sflush_r+0xb2>
 800185e:	602f      	str	r7, [r5, #0]
 8001860:	e7b2      	b.n	80017c8 <__sflush_r+0x18>
 8001862:	89a3      	ldrh	r3, [r4, #12]
 8001864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001868:	81a3      	strh	r3, [r4, #12]
 800186a:	e7ae      	b.n	80017ca <__sflush_r+0x1a>
 800186c:	690f      	ldr	r7, [r1, #16]
 800186e:	2f00      	cmp	r7, #0
 8001870:	d0aa      	beq.n	80017c8 <__sflush_r+0x18>
 8001872:	0793      	lsls	r3, r2, #30
 8001874:	680e      	ldr	r6, [r1, #0]
 8001876:	bf08      	it	eq
 8001878:	694b      	ldreq	r3, [r1, #20]
 800187a:	600f      	str	r7, [r1, #0]
 800187c:	bf18      	it	ne
 800187e:	2300      	movne	r3, #0
 8001880:	1bf6      	subs	r6, r6, r7
 8001882:	608b      	str	r3, [r1, #8]
 8001884:	2e00      	cmp	r6, #0
 8001886:	dd9f      	ble.n	80017c8 <__sflush_r+0x18>
 8001888:	6a21      	ldr	r1, [r4, #32]
 800188a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800188e:	4633      	mov	r3, r6
 8001890:	463a      	mov	r2, r7
 8001892:	4628      	mov	r0, r5
 8001894:	47e0      	blx	ip
 8001896:	2800      	cmp	r0, #0
 8001898:	dc06      	bgt.n	80018a8 <__sflush_r+0xf8>
 800189a:	89a3      	ldrh	r3, [r4, #12]
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	81a3      	strh	r3, [r4, #12]
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a6:	e790      	b.n	80017ca <__sflush_r+0x1a>
 80018a8:	4407      	add	r7, r0
 80018aa:	1a36      	subs	r6, r6, r0
 80018ac:	e7ea      	b.n	8001884 <__sflush_r+0xd4>
 80018ae:	bf00      	nop
 80018b0:	20400001 	.word	0x20400001

080018b4 <_fflush_r>:
 80018b4:	b538      	push	{r3, r4, r5, lr}
 80018b6:	690b      	ldr	r3, [r1, #16]
 80018b8:	4605      	mov	r5, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	b913      	cbnz	r3, 80018c4 <_fflush_r+0x10>
 80018be:	2500      	movs	r5, #0
 80018c0:	4628      	mov	r0, r5
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	b118      	cbz	r0, 80018ce <_fflush_r+0x1a>
 80018c6:	6983      	ldr	r3, [r0, #24]
 80018c8:	b90b      	cbnz	r3, 80018ce <_fflush_r+0x1a>
 80018ca:	f000 f887 	bl	80019dc <__sinit>
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <_fflush_r+0x6c>)
 80018d0:	429c      	cmp	r4, r3
 80018d2:	d11b      	bne.n	800190c <_fflush_r+0x58>
 80018d4:	686c      	ldr	r4, [r5, #4]
 80018d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0ef      	beq.n	80018be <_fflush_r+0xa>
 80018de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018e0:	07d0      	lsls	r0, r2, #31
 80018e2:	d404      	bmi.n	80018ee <_fflush_r+0x3a>
 80018e4:	0599      	lsls	r1, r3, #22
 80018e6:	d402      	bmi.n	80018ee <_fflush_r+0x3a>
 80018e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018ea:	f000 f915 	bl	8001b18 <__retarget_lock_acquire_recursive>
 80018ee:	4628      	mov	r0, r5
 80018f0:	4621      	mov	r1, r4
 80018f2:	f7ff ff5d 	bl	80017b0 <__sflush_r>
 80018f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018f8:	07da      	lsls	r2, r3, #31
 80018fa:	4605      	mov	r5, r0
 80018fc:	d4e0      	bmi.n	80018c0 <_fflush_r+0xc>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	059b      	lsls	r3, r3, #22
 8001902:	d4dd      	bmi.n	80018c0 <_fflush_r+0xc>
 8001904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001906:	f000 f908 	bl	8001b1a <__retarget_lock_release_recursive>
 800190a:	e7d9      	b.n	80018c0 <_fflush_r+0xc>
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <_fflush_r+0x70>)
 800190e:	429c      	cmp	r4, r3
 8001910:	d101      	bne.n	8001916 <_fflush_r+0x62>
 8001912:	68ac      	ldr	r4, [r5, #8]
 8001914:	e7df      	b.n	80018d6 <_fflush_r+0x22>
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <_fflush_r+0x74>)
 8001918:	429c      	cmp	r4, r3
 800191a:	bf08      	it	eq
 800191c:	68ec      	ldreq	r4, [r5, #12]
 800191e:	e7da      	b.n	80018d6 <_fflush_r+0x22>
 8001920:	08002034 	.word	0x08002034
 8001924:	08002054 	.word	0x08002054
 8001928:	08002014 	.word	0x08002014

0800192c <std>:
 800192c:	2300      	movs	r3, #0
 800192e:	b510      	push	{r4, lr}
 8001930:	4604      	mov	r4, r0
 8001932:	e9c0 3300 	strd	r3, r3, [r0]
 8001936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800193a:	6083      	str	r3, [r0, #8]
 800193c:	8181      	strh	r1, [r0, #12]
 800193e:	6643      	str	r3, [r0, #100]	; 0x64
 8001940:	81c2      	strh	r2, [r0, #14]
 8001942:	6183      	str	r3, [r0, #24]
 8001944:	4619      	mov	r1, r3
 8001946:	2208      	movs	r2, #8
 8001948:	305c      	adds	r0, #92	; 0x5c
 800194a:	f7ff fd87 	bl	800145c <memset>
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <std+0x38>)
 8001950:	6263      	str	r3, [r4, #36]	; 0x24
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <std+0x3c>)
 8001954:	62a3      	str	r3, [r4, #40]	; 0x28
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <std+0x40>)
 8001958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <std+0x44>)
 800195c:	6224      	str	r4, [r4, #32]
 800195e:	6323      	str	r3, [r4, #48]	; 0x30
 8001960:	bd10      	pop	{r4, pc}
 8001962:	bf00      	nop
 8001964:	08001e65 	.word	0x08001e65
 8001968:	08001e87 	.word	0x08001e87
 800196c:	08001ebf 	.word	0x08001ebf
 8001970:	08001ee3 	.word	0x08001ee3

08001974 <_cleanup_r>:
 8001974:	4901      	ldr	r1, [pc, #4]	; (800197c <_cleanup_r+0x8>)
 8001976:	f000 b8af 	b.w	8001ad8 <_fwalk_reent>
 800197a:	bf00      	nop
 800197c:	080018b5 	.word	0x080018b5

08001980 <__sfmoreglue>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2268      	movs	r2, #104	; 0x68
 8001984:	1e4d      	subs	r5, r1, #1
 8001986:	4355      	muls	r5, r2
 8001988:	460e      	mov	r6, r1
 800198a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800198e:	f000 f99d 	bl	8001ccc <_malloc_r>
 8001992:	4604      	mov	r4, r0
 8001994:	b140      	cbz	r0, 80019a8 <__sfmoreglue+0x28>
 8001996:	2100      	movs	r1, #0
 8001998:	e9c0 1600 	strd	r1, r6, [r0]
 800199c:	300c      	adds	r0, #12
 800199e:	60a0      	str	r0, [r4, #8]
 80019a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019a4:	f7ff fd5a 	bl	800145c <memset>
 80019a8:	4620      	mov	r0, r4
 80019aa:	bd70      	pop	{r4, r5, r6, pc}

080019ac <__sfp_lock_acquire>:
 80019ac:	4801      	ldr	r0, [pc, #4]	; (80019b4 <__sfp_lock_acquire+0x8>)
 80019ae:	f000 b8b3 	b.w	8001b18 <__retarget_lock_acquire_recursive>
 80019b2:	bf00      	nop
 80019b4:	200000b9 	.word	0x200000b9

080019b8 <__sfp_lock_release>:
 80019b8:	4801      	ldr	r0, [pc, #4]	; (80019c0 <__sfp_lock_release+0x8>)
 80019ba:	f000 b8ae 	b.w	8001b1a <__retarget_lock_release_recursive>
 80019be:	bf00      	nop
 80019c0:	200000b9 	.word	0x200000b9

080019c4 <__sinit_lock_acquire>:
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <__sinit_lock_acquire+0x8>)
 80019c6:	f000 b8a7 	b.w	8001b18 <__retarget_lock_acquire_recursive>
 80019ca:	bf00      	nop
 80019cc:	200000ba 	.word	0x200000ba

080019d0 <__sinit_lock_release>:
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <__sinit_lock_release+0x8>)
 80019d2:	f000 b8a2 	b.w	8001b1a <__retarget_lock_release_recursive>
 80019d6:	bf00      	nop
 80019d8:	200000ba 	.word	0x200000ba

080019dc <__sinit>:
 80019dc:	b510      	push	{r4, lr}
 80019de:	4604      	mov	r4, r0
 80019e0:	f7ff fff0 	bl	80019c4 <__sinit_lock_acquire>
 80019e4:	69a3      	ldr	r3, [r4, #24]
 80019e6:	b11b      	cbz	r3, 80019f0 <__sinit+0x14>
 80019e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019ec:	f7ff bff0 	b.w	80019d0 <__sinit_lock_release>
 80019f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80019f4:	6523      	str	r3, [r4, #80]	; 0x50
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <__sinit+0x68>)
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <__sinit+0x6c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	bf04      	itt	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	61a3      	streq	r3, [r4, #24]
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 f820 	bl	8001a4c <__sfp>
 8001a0c:	6060      	str	r0, [r4, #4]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f000 f81c 	bl	8001a4c <__sfp>
 8001a14:	60a0      	str	r0, [r4, #8]
 8001a16:	4620      	mov	r0, r4
 8001a18:	f000 f818 	bl	8001a4c <__sfp>
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60e0      	str	r0, [r4, #12]
 8001a20:	2104      	movs	r1, #4
 8001a22:	6860      	ldr	r0, [r4, #4]
 8001a24:	f7ff ff82 	bl	800192c <std>
 8001a28:	68a0      	ldr	r0, [r4, #8]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2109      	movs	r1, #9
 8001a2e:	f7ff ff7d 	bl	800192c <std>
 8001a32:	68e0      	ldr	r0, [r4, #12]
 8001a34:	2202      	movs	r2, #2
 8001a36:	2112      	movs	r1, #18
 8001a38:	f7ff ff78 	bl	800192c <std>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61a3      	str	r3, [r4, #24]
 8001a40:	e7d2      	b.n	80019e8 <__sinit+0xc>
 8001a42:	bf00      	nop
 8001a44:	08002010 	.word	0x08002010
 8001a48:	08001975 	.word	0x08001975

08001a4c <__sfp>:
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	4607      	mov	r7, r0
 8001a50:	f7ff ffac 	bl	80019ac <__sfp_lock_acquire>
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <__sfp+0x84>)
 8001a56:	681e      	ldr	r6, [r3, #0]
 8001a58:	69b3      	ldr	r3, [r6, #24]
 8001a5a:	b913      	cbnz	r3, 8001a62 <__sfp+0x16>
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f7ff ffbd 	bl	80019dc <__sinit>
 8001a62:	3648      	adds	r6, #72	; 0x48
 8001a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	d503      	bpl.n	8001a74 <__sfp+0x28>
 8001a6c:	6833      	ldr	r3, [r6, #0]
 8001a6e:	b30b      	cbz	r3, 8001ab4 <__sfp+0x68>
 8001a70:	6836      	ldr	r6, [r6, #0]
 8001a72:	e7f7      	b.n	8001a64 <__sfp+0x18>
 8001a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a78:	b9d5      	cbnz	r5, 8001ab0 <__sfp+0x64>
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <__sfp+0x88>)
 8001a7c:	60e3      	str	r3, [r4, #12]
 8001a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a82:	6665      	str	r5, [r4, #100]	; 0x64
 8001a84:	f000 f847 	bl	8001b16 <__retarget_lock_init_recursive>
 8001a88:	f7ff ff96 	bl	80019b8 <__sfp_lock_release>
 8001a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a94:	6025      	str	r5, [r4, #0]
 8001a96:	61a5      	str	r5, [r4, #24]
 8001a98:	2208      	movs	r2, #8
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001aa0:	f7ff fcdc 	bl	800145c <memset>
 8001aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001aac:	4620      	mov	r0, r4
 8001aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab0:	3468      	adds	r4, #104	; 0x68
 8001ab2:	e7d9      	b.n	8001a68 <__sfp+0x1c>
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	f7ff ff62 	bl	8001980 <__sfmoreglue>
 8001abc:	4604      	mov	r4, r0
 8001abe:	6030      	str	r0, [r6, #0]
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d1d5      	bne.n	8001a70 <__sfp+0x24>
 8001ac4:	f7ff ff78 	bl	80019b8 <__sfp_lock_release>
 8001ac8:	230c      	movs	r3, #12
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	e7ee      	b.n	8001aac <__sfp+0x60>
 8001ace:	bf00      	nop
 8001ad0:	08002010 	.word	0x08002010
 8001ad4:	ffff0001 	.word	0xffff0001

08001ad8 <_fwalk_reent>:
 8001ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001adc:	4606      	mov	r6, r0
 8001ade:	4688      	mov	r8, r1
 8001ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001aea:	f1b9 0901 	subs.w	r9, r9, #1
 8001aee:	d505      	bpl.n	8001afc <_fwalk_reent+0x24>
 8001af0:	6824      	ldr	r4, [r4, #0]
 8001af2:	2c00      	cmp	r4, #0
 8001af4:	d1f7      	bne.n	8001ae6 <_fwalk_reent+0xe>
 8001af6:	4638      	mov	r0, r7
 8001af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001afc:	89ab      	ldrh	r3, [r5, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d907      	bls.n	8001b12 <_fwalk_reent+0x3a>
 8001b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b06:	3301      	adds	r3, #1
 8001b08:	d003      	beq.n	8001b12 <_fwalk_reent+0x3a>
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	47c0      	blx	r8
 8001b10:	4307      	orrs	r7, r0
 8001b12:	3568      	adds	r5, #104	; 0x68
 8001b14:	e7e9      	b.n	8001aea <_fwalk_reent+0x12>

08001b16 <__retarget_lock_init_recursive>:
 8001b16:	4770      	bx	lr

08001b18 <__retarget_lock_acquire_recursive>:
 8001b18:	4770      	bx	lr

08001b1a <__retarget_lock_release_recursive>:
 8001b1a:	4770      	bx	lr

08001b1c <__swhatbuf_r>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	460e      	mov	r6, r1
 8001b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b24:	2900      	cmp	r1, #0
 8001b26:	b096      	sub	sp, #88	; 0x58
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	da08      	bge.n	8001b40 <__swhatbuf_r+0x24>
 8001b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	602a      	str	r2, [r5, #0]
 8001b36:	061a      	lsls	r2, r3, #24
 8001b38:	d410      	bmi.n	8001b5c <__swhatbuf_r+0x40>
 8001b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3e:	e00e      	b.n	8001b5e <__swhatbuf_r+0x42>
 8001b40:	466a      	mov	r2, sp
 8001b42:	f000 f9f5 	bl	8001f30 <_fstat_r>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	dbf1      	blt.n	8001b2e <__swhatbuf_r+0x12>
 8001b4a:	9a01      	ldr	r2, [sp, #4]
 8001b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b54:	425a      	negs	r2, r3
 8001b56:	415a      	adcs	r2, r3
 8001b58:	602a      	str	r2, [r5, #0]
 8001b5a:	e7ee      	b.n	8001b3a <__swhatbuf_r+0x1e>
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	2000      	movs	r0, #0
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	b016      	add	sp, #88	; 0x58
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b68 <__smakebuf_r>:
 8001b68:	898b      	ldrh	r3, [r1, #12]
 8001b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b6c:	079d      	lsls	r5, r3, #30
 8001b6e:	4606      	mov	r6, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	d507      	bpl.n	8001b84 <__smakebuf_r+0x1c>
 8001b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	6123      	str	r3, [r4, #16]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	6163      	str	r3, [r4, #20]
 8001b80:	b002      	add	sp, #8
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	ab01      	add	r3, sp, #4
 8001b86:	466a      	mov	r2, sp
 8001b88:	f7ff ffc8 	bl	8001b1c <__swhatbuf_r>
 8001b8c:	9900      	ldr	r1, [sp, #0]
 8001b8e:	4605      	mov	r5, r0
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 f89b 	bl	8001ccc <_malloc_r>
 8001b96:	b948      	cbnz	r0, 8001bac <__smakebuf_r+0x44>
 8001b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b9c:	059a      	lsls	r2, r3, #22
 8001b9e:	d4ef      	bmi.n	8001b80 <__smakebuf_r+0x18>
 8001ba0:	f023 0303 	bic.w	r3, r3, #3
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	81a3      	strh	r3, [r4, #12]
 8001baa:	e7e3      	b.n	8001b74 <__smakebuf_r+0xc>
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <__smakebuf_r+0x7c>)
 8001bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8001bb0:	89a3      	ldrh	r3, [r4, #12]
 8001bb2:	6020      	str	r0, [r4, #0]
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	81a3      	strh	r3, [r4, #12]
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	6163      	str	r3, [r4, #20]
 8001bbe:	9b01      	ldr	r3, [sp, #4]
 8001bc0:	6120      	str	r0, [r4, #16]
 8001bc2:	b15b      	cbz	r3, 8001bdc <__smakebuf_r+0x74>
 8001bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f000 f9c3 	bl	8001f54 <_isatty_r>
 8001bce:	b128      	cbz	r0, 8001bdc <__smakebuf_r+0x74>
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	81a3      	strh	r3, [r4, #12]
 8001bdc:	89a0      	ldrh	r0, [r4, #12]
 8001bde:	4305      	orrs	r5, r0
 8001be0:	81a5      	strh	r5, [r4, #12]
 8001be2:	e7cd      	b.n	8001b80 <__smakebuf_r+0x18>
 8001be4:	08001975 	.word	0x08001975

08001be8 <malloc>:
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <malloc+0xc>)
 8001bea:	4601      	mov	r1, r0
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	f000 b86d 	b.w	8001ccc <_malloc_r>
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <_free_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	d041      	beq.n	8001c84 <_free_r+0x8c>
 8001c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c04:	1f0c      	subs	r4, r1, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bfb8      	it	lt
 8001c0a:	18e4      	addlt	r4, r4, r3
 8001c0c:	f000 f9c4 	bl	8001f98 <__malloc_lock>
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <_free_r+0x90>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	b933      	cbnz	r3, 8001c24 <_free_r+0x2c>
 8001c16:	6063      	str	r3, [r4, #4]
 8001c18:	6014      	str	r4, [r2, #0]
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c20:	f000 b9c0 	b.w	8001fa4 <__malloc_unlock>
 8001c24:	42a3      	cmp	r3, r4
 8001c26:	d908      	bls.n	8001c3a <_free_r+0x42>
 8001c28:	6820      	ldr	r0, [r4, #0]
 8001c2a:	1821      	adds	r1, r4, r0
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	bf01      	itttt	eq
 8001c30:	6819      	ldreq	r1, [r3, #0]
 8001c32:	685b      	ldreq	r3, [r3, #4]
 8001c34:	1809      	addeq	r1, r1, r0
 8001c36:	6021      	streq	r1, [r4, #0]
 8001c38:	e7ed      	b.n	8001c16 <_free_r+0x1e>
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	b10b      	cbz	r3, 8001c44 <_free_r+0x4c>
 8001c40:	42a3      	cmp	r3, r4
 8001c42:	d9fa      	bls.n	8001c3a <_free_r+0x42>
 8001c44:	6811      	ldr	r1, [r2, #0]
 8001c46:	1850      	adds	r0, r2, r1
 8001c48:	42a0      	cmp	r0, r4
 8001c4a:	d10b      	bne.n	8001c64 <_free_r+0x6c>
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	4401      	add	r1, r0
 8001c50:	1850      	adds	r0, r2, r1
 8001c52:	4283      	cmp	r3, r0
 8001c54:	6011      	str	r1, [r2, #0]
 8001c56:	d1e0      	bne.n	8001c1a <_free_r+0x22>
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	6053      	str	r3, [r2, #4]
 8001c5e:	4401      	add	r1, r0
 8001c60:	6011      	str	r1, [r2, #0]
 8001c62:	e7da      	b.n	8001c1a <_free_r+0x22>
 8001c64:	d902      	bls.n	8001c6c <_free_r+0x74>
 8001c66:	230c      	movs	r3, #12
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	e7d6      	b.n	8001c1a <_free_r+0x22>
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	1821      	adds	r1, r4, r0
 8001c70:	428b      	cmp	r3, r1
 8001c72:	bf04      	itt	eq
 8001c74:	6819      	ldreq	r1, [r3, #0]
 8001c76:	685b      	ldreq	r3, [r3, #4]
 8001c78:	6063      	str	r3, [r4, #4]
 8001c7a:	bf04      	itt	eq
 8001c7c:	1809      	addeq	r1, r1, r0
 8001c7e:	6021      	streq	r1, [r4, #0]
 8001c80:	6054      	str	r4, [r2, #4]
 8001c82:	e7ca      	b.n	8001c1a <_free_r+0x22>
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	200000bc 	.word	0x200000bc

08001c8c <sbrk_aligned>:
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	4e0e      	ldr	r6, [pc, #56]	; (8001cc8 <sbrk_aligned+0x3c>)
 8001c90:	460c      	mov	r4, r1
 8001c92:	6831      	ldr	r1, [r6, #0]
 8001c94:	4605      	mov	r5, r0
 8001c96:	b911      	cbnz	r1, 8001c9e <sbrk_aligned+0x12>
 8001c98:	f000 f8d4 	bl	8001e44 <_sbrk_r>
 8001c9c:	6030      	str	r0, [r6, #0]
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f000 f8cf 	bl	8001e44 <_sbrk_r>
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	d00a      	beq.n	8001cc0 <sbrk_aligned+0x34>
 8001caa:	1cc4      	adds	r4, r0, #3
 8001cac:	f024 0403 	bic.w	r4, r4, #3
 8001cb0:	42a0      	cmp	r0, r4
 8001cb2:	d007      	beq.n	8001cc4 <sbrk_aligned+0x38>
 8001cb4:	1a21      	subs	r1, r4, r0
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f000 f8c4 	bl	8001e44 <_sbrk_r>
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	d101      	bne.n	8001cc4 <sbrk_aligned+0x38>
 8001cc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	200000c0 	.word	0x200000c0

08001ccc <_malloc_r>:
 8001ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd0:	1ccd      	adds	r5, r1, #3
 8001cd2:	f025 0503 	bic.w	r5, r5, #3
 8001cd6:	3508      	adds	r5, #8
 8001cd8:	2d0c      	cmp	r5, #12
 8001cda:	bf38      	it	cc
 8001cdc:	250c      	movcc	r5, #12
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	db01      	blt.n	8001ce8 <_malloc_r+0x1c>
 8001ce4:	42a9      	cmp	r1, r5
 8001ce6:	d905      	bls.n	8001cf4 <_malloc_r+0x28>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	2600      	movs	r6, #0
 8001cee:	4630      	mov	r0, r6
 8001cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf4:	4e2e      	ldr	r6, [pc, #184]	; (8001db0 <_malloc_r+0xe4>)
 8001cf6:	f000 f94f 	bl	8001f98 <__malloc_lock>
 8001cfa:	6833      	ldr	r3, [r6, #0]
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	bb34      	cbnz	r4, 8001d4e <_malloc_r+0x82>
 8001d00:	4629      	mov	r1, r5
 8001d02:	4638      	mov	r0, r7
 8001d04:	f7ff ffc2 	bl	8001c8c <sbrk_aligned>
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	d14d      	bne.n	8001daa <_malloc_r+0xde>
 8001d0e:	6834      	ldr	r4, [r6, #0]
 8001d10:	4626      	mov	r6, r4
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	d140      	bne.n	8001d98 <_malloc_r+0xcc>
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	4631      	mov	r1, r6
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	eb04 0803 	add.w	r8, r4, r3
 8001d20:	f000 f890 	bl	8001e44 <_sbrk_r>
 8001d24:	4580      	cmp	r8, r0
 8001d26:	d13a      	bne.n	8001d9e <_malloc_r+0xd2>
 8001d28:	6821      	ldr	r1, [r4, #0]
 8001d2a:	3503      	adds	r5, #3
 8001d2c:	1a6d      	subs	r5, r5, r1
 8001d2e:	f025 0503 	bic.w	r5, r5, #3
 8001d32:	3508      	adds	r5, #8
 8001d34:	2d0c      	cmp	r5, #12
 8001d36:	bf38      	it	cc
 8001d38:	250c      	movcc	r5, #12
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	f7ff ffa5 	bl	8001c8c <sbrk_aligned>
 8001d42:	3001      	adds	r0, #1
 8001d44:	d02b      	beq.n	8001d9e <_malloc_r+0xd2>
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	442b      	add	r3, r5
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	e00e      	b.n	8001d6c <_malloc_r+0xa0>
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	1b52      	subs	r2, r2, r5
 8001d52:	d41e      	bmi.n	8001d92 <_malloc_r+0xc6>
 8001d54:	2a0b      	cmp	r2, #11
 8001d56:	d916      	bls.n	8001d86 <_malloc_r+0xba>
 8001d58:	1961      	adds	r1, r4, r5
 8001d5a:	42a3      	cmp	r3, r4
 8001d5c:	6025      	str	r5, [r4, #0]
 8001d5e:	bf18      	it	ne
 8001d60:	6059      	strne	r1, [r3, #4]
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	bf08      	it	eq
 8001d66:	6031      	streq	r1, [r6, #0]
 8001d68:	5162      	str	r2, [r4, r5]
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	f104 060b 	add.w	r6, r4, #11
 8001d72:	f000 f917 	bl	8001fa4 <__malloc_unlock>
 8001d76:	f026 0607 	bic.w	r6, r6, #7
 8001d7a:	1d23      	adds	r3, r4, #4
 8001d7c:	1af2      	subs	r2, r6, r3
 8001d7e:	d0b6      	beq.n	8001cee <_malloc_r+0x22>
 8001d80:	1b9b      	subs	r3, r3, r6
 8001d82:	50a3      	str	r3, [r4, r2]
 8001d84:	e7b3      	b.n	8001cee <_malloc_r+0x22>
 8001d86:	6862      	ldr	r2, [r4, #4]
 8001d88:	42a3      	cmp	r3, r4
 8001d8a:	bf0c      	ite	eq
 8001d8c:	6032      	streq	r2, [r6, #0]
 8001d8e:	605a      	strne	r2, [r3, #4]
 8001d90:	e7ec      	b.n	8001d6c <_malloc_r+0xa0>
 8001d92:	4623      	mov	r3, r4
 8001d94:	6864      	ldr	r4, [r4, #4]
 8001d96:	e7b2      	b.n	8001cfe <_malloc_r+0x32>
 8001d98:	4634      	mov	r4, r6
 8001d9a:	6876      	ldr	r6, [r6, #4]
 8001d9c:	e7b9      	b.n	8001d12 <_malloc_r+0x46>
 8001d9e:	230c      	movs	r3, #12
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4638      	mov	r0, r7
 8001da4:	f000 f8fe 	bl	8001fa4 <__malloc_unlock>
 8001da8:	e7a1      	b.n	8001cee <_malloc_r+0x22>
 8001daa:	6025      	str	r5, [r4, #0]
 8001dac:	e7de      	b.n	8001d6c <_malloc_r+0xa0>
 8001dae:	bf00      	nop
 8001db0:	200000bc 	.word	0x200000bc

08001db4 <_putc_r>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	460d      	mov	r5, r1
 8001db8:	4614      	mov	r4, r2
 8001dba:	4606      	mov	r6, r0
 8001dbc:	b118      	cbz	r0, 8001dc6 <_putc_r+0x12>
 8001dbe:	6983      	ldr	r3, [r0, #24]
 8001dc0:	b90b      	cbnz	r3, 8001dc6 <_putc_r+0x12>
 8001dc2:	f7ff fe0b 	bl	80019dc <__sinit>
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <_putc_r+0x84>)
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	d124      	bne.n	8001e16 <_putc_r+0x62>
 8001dcc:	6874      	ldr	r4, [r6, #4]
 8001dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dd0:	07d8      	lsls	r0, r3, #31
 8001dd2:	d405      	bmi.n	8001de0 <_putc_r+0x2c>
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	0599      	lsls	r1, r3, #22
 8001dd8:	d402      	bmi.n	8001de0 <_putc_r+0x2c>
 8001dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ddc:	f7ff fe9c 	bl	8001b18 <__retarget_lock_acquire_recursive>
 8001de0:	68a3      	ldr	r3, [r4, #8]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	60a3      	str	r3, [r4, #8]
 8001de8:	da05      	bge.n	8001df6 <_putc_r+0x42>
 8001dea:	69a2      	ldr	r2, [r4, #24]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	db1c      	blt.n	8001e2a <_putc_r+0x76>
 8001df0:	b2eb      	uxtb	r3, r5
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d019      	beq.n	8001e2a <_putc_r+0x76>
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	6022      	str	r2, [r4, #0]
 8001dfc:	701d      	strb	r5, [r3, #0]
 8001dfe:	b2ed      	uxtb	r5, r5
 8001e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e02:	07da      	lsls	r2, r3, #31
 8001e04:	d405      	bmi.n	8001e12 <_putc_r+0x5e>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	059b      	lsls	r3, r3, #22
 8001e0a:	d402      	bmi.n	8001e12 <_putc_r+0x5e>
 8001e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e0e:	f7ff fe84 	bl	8001b1a <__retarget_lock_release_recursive>
 8001e12:	4628      	mov	r0, r5
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <_putc_r+0x88>)
 8001e18:	429c      	cmp	r4, r3
 8001e1a:	d101      	bne.n	8001e20 <_putc_r+0x6c>
 8001e1c:	68b4      	ldr	r4, [r6, #8]
 8001e1e:	e7d6      	b.n	8001dce <_putc_r+0x1a>
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_putc_r+0x8c>)
 8001e22:	429c      	cmp	r4, r3
 8001e24:	bf08      	it	eq
 8001e26:	68f4      	ldreq	r4, [r6, #12]
 8001e28:	e7d1      	b.n	8001dce <_putc_r+0x1a>
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff fbfe 	bl	8001630 <__swbuf_r>
 8001e34:	4605      	mov	r5, r0
 8001e36:	e7e3      	b.n	8001e00 <_putc_r+0x4c>
 8001e38:	08002034 	.word	0x08002034
 8001e3c:	08002054 	.word	0x08002054
 8001e40:	08002014 	.word	0x08002014

08001e44 <_sbrk_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4d06      	ldr	r5, [pc, #24]	; (8001e60 <_sbrk_r+0x1c>)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	f7ff fa7a 	bl	8001348 <_sbrk>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	d102      	bne.n	8001e5e <_sbrk_r+0x1a>
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	b103      	cbz	r3, 8001e5e <_sbrk_r+0x1a>
 8001e5c:	6023      	str	r3, [r4, #0]
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
 8001e60:	200000c4 	.word	0x200000c4

08001e64 <__sread>:
 8001e64:	b510      	push	{r4, lr}
 8001e66:	460c      	mov	r4, r1
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	f000 f8a0 	bl	8001fb0 <_read_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	bfab      	itete	ge
 8001e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e76:	89a3      	ldrhlt	r3, [r4, #12]
 8001e78:	181b      	addge	r3, r3, r0
 8001e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e7e:	bfac      	ite	ge
 8001e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e82:	81a3      	strhlt	r3, [r4, #12]
 8001e84:	bd10      	pop	{r4, pc}

08001e86 <__swrite>:
 8001e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8a:	461f      	mov	r7, r3
 8001e8c:	898b      	ldrh	r3, [r1, #12]
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	4605      	mov	r5, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4616      	mov	r6, r2
 8001e96:	d505      	bpl.n	8001ea4 <__swrite+0x1e>
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f000 f868 	bl	8001f74 <_lseek_r>
 8001ea4:	89a3      	ldrh	r3, [r4, #12]
 8001ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eae:	81a3      	strh	r3, [r4, #12]
 8001eb0:	4632      	mov	r2, r6
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eba:	f000 b817 	b.w	8001eec <_write_r>

08001ebe <__sseek>:
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec6:	f000 f855 	bl	8001f74 <_lseek_r>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	bf15      	itete	ne
 8001ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001eda:	81a3      	strheq	r3, [r4, #12]
 8001edc:	bf18      	it	ne
 8001ede:	81a3      	strhne	r3, [r4, #12]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <__sclose>:
 8001ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee6:	f000 b813 	b.w	8001f10 <_close_r>
	...

08001eec <_write_r>:
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4d07      	ldr	r5, [pc, #28]	; (8001f0c <_write_r+0x20>)
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	602a      	str	r2, [r5, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff f9d8 	bl	80012b0 <_write>
 8001f00:	1c43      	adds	r3, r0, #1
 8001f02:	d102      	bne.n	8001f0a <_write_r+0x1e>
 8001f04:	682b      	ldr	r3, [r5, #0]
 8001f06:	b103      	cbz	r3, 8001f0a <_write_r+0x1e>
 8001f08:	6023      	str	r3, [r4, #0]
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
 8001f0c:	200000c4 	.word	0x200000c4

08001f10 <_close_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4d06      	ldr	r5, [pc, #24]	; (8001f2c <_close_r+0x1c>)
 8001f14:	2300      	movs	r3, #0
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	602b      	str	r3, [r5, #0]
 8001f1c:	f7ff f9e4 	bl	80012e8 <_close>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d102      	bne.n	8001f2a <_close_r+0x1a>
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	b103      	cbz	r3, 8001f2a <_close_r+0x1a>
 8001f28:	6023      	str	r3, [r4, #0]
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	200000c4 	.word	0x200000c4

08001f30 <_fstat_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d07      	ldr	r5, [pc, #28]	; (8001f50 <_fstat_r+0x20>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	602b      	str	r3, [r5, #0]
 8001f3e:	f7ff f9de 	bl	80012fe <_fstat>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	d102      	bne.n	8001f4c <_fstat_r+0x1c>
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	b103      	cbz	r3, 8001f4c <_fstat_r+0x1c>
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000c4 	.word	0x200000c4

08001f54 <_isatty_r>:
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4d06      	ldr	r5, [pc, #24]	; (8001f70 <_isatty_r+0x1c>)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	602b      	str	r3, [r5, #0]
 8001f60:	f7ff f9dc 	bl	800131c <_isatty>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_isatty_r+0x1a>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_isatty_r+0x1a>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	200000c4 	.word	0x200000c4

08001f74 <_lseek_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4d07      	ldr	r5, [pc, #28]	; (8001f94 <_lseek_r+0x20>)
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	602a      	str	r2, [r5, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f7ff f9d4 	bl	8001330 <_lseek>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d102      	bne.n	8001f92 <_lseek_r+0x1e>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	b103      	cbz	r3, 8001f92 <_lseek_r+0x1e>
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	200000c4 	.word	0x200000c4

08001f98 <__malloc_lock>:
 8001f98:	4801      	ldr	r0, [pc, #4]	; (8001fa0 <__malloc_lock+0x8>)
 8001f9a:	f7ff bdbd 	b.w	8001b18 <__retarget_lock_acquire_recursive>
 8001f9e:	bf00      	nop
 8001fa0:	200000b8 	.word	0x200000b8

08001fa4 <__malloc_unlock>:
 8001fa4:	4801      	ldr	r0, [pc, #4]	; (8001fac <__malloc_unlock+0x8>)
 8001fa6:	f7ff bdb8 	b.w	8001b1a <__retarget_lock_release_recursive>
 8001faa:	bf00      	nop
 8001fac:	200000b8 	.word	0x200000b8

08001fb0 <_read_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4d07      	ldr	r5, [pc, #28]	; (8001fd0 <_read_r+0x20>)
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	4608      	mov	r0, r1
 8001fb8:	4611      	mov	r1, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	602a      	str	r2, [r5, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff f959 	bl	8001276 <_read>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_read_r+0x1e>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_read_r+0x1e>
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	200000c4 	.word	0x200000c4

08001fd4 <_init>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr

08001fe0 <_fini>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr
