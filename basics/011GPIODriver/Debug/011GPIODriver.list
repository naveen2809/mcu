
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f8  080032f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080032f8  080032f8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f8  080032f8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000084  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004068  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f17  00000000  00000000  000240f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  00025010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004e8  00000000  00000000  000255c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c98  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006812  00000000  00000000  00028740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ed6e  00000000  00000000  0002ef52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003dcc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dcc  00000000  00000000  0003dd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003114 	.word	0x08003114

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08003114 	.word	0x08003114

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_LM75A = I2C2;
uint8_t SlaveAddressLM75A = 0x68;							//LM75A I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000080 	.word	0x20000080

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 ff1b 	bl	800210c <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f000 fdca 	bl	8000e80 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f8cb 	bl	8000488 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fb09 	bl	800090a <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000080 	.word	0x20000080
 8000300:	20000084 	.word	0x20000084

08000304 <configure_spi>:

void configure_spi(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800030a:	4825      	ldr	r0, [pc, #148]	; (80003a0 <configure_spi+0x9c>)
 800030c:	f000 fdb8 	bl	8000e80 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000310:	2202      	movs	r2, #2
 8000312:	210f      	movs	r1, #15
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <configure_spi+0x9c>)
 8000316:	f000 fb09 	bl	800092c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800031a:	2202      	movs	r2, #2
 800031c:	210e      	movs	r1, #14
 800031e:	4820      	ldr	r0, [pc, #128]	; (80003a0 <configure_spi+0x9c>)
 8000320:	f000 fb04 	bl	800092c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 8000324:	2202      	movs	r2, #2
 8000326:	210d      	movs	r1, #13
 8000328:	481d      	ldr	r0, [pc, #116]	; (80003a0 <configure_spi+0x9c>)
 800032a:	f000 faff 	bl	800092c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 800032e:	2202      	movs	r2, #2
 8000330:	210c      	movs	r1, #12
 8000332:	481b      	ldr	r0, [pc, #108]	; (80003a0 <configure_spi+0x9c>)
 8000334:	f000 fafa 	bl	800092c <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 8000338:	2205      	movs	r2, #5
 800033a:	210f      	movs	r1, #15
 800033c:	4818      	ldr	r0, [pc, #96]	; (80003a0 <configure_spi+0x9c>)
 800033e:	f000 fb3b 	bl	80009b8 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000342:	2205      	movs	r2, #5
 8000344:	210e      	movs	r1, #14
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <configure_spi+0x9c>)
 8000348:	f000 fb36 	bl	80009b8 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 800034c:	2205      	movs	r2, #5
 800034e:	210d      	movs	r1, #13
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <configure_spi+0x9c>)
 8000352:	f000 fb31 	bl	80009b8 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 8000356:	2205      	movs	r2, #5
 8000358:	210c      	movs	r1, #12
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <configure_spi+0x9c>)
 800035c:	f000 fb2c 	bl	80009b8 <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 8000360:	2301      	movs	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 8000364:	2300      	movs	r3, #0
 8000366:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 8000368:	2300      	movs	r3, #0
 800036a:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV4;
 800036c:	2301      	movs	r3, #1
 800036e:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 8000370:	2300      	movs	r3, #0
 8000372:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000374:	2300      	movs	r3, #0
 8000376:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 8000378:	2301      	movs	r3, #1
 800037a:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 800037c:	2301      	movs	r3, #1
 800037e:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 8000380:	4808      	ldr	r0, [pc, #32]	; (80003a4 <configure_spi+0xa0>)
 8000382:	f000 fd7d 	bl	8000e80 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	; (80003a4 <configure_spi+0xa0>)
 800038c:	f000 fc60 	bl	8000c50 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <configure_spi+0xa0>)
 8000392:	f000 fcd8 	bl	8000d46 <SPIEnable>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40003800 	.word	0x40003800

080003a8 <configure_uart>:

void configure_uart(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80003ac:	482a      	ldr	r0, [pc, #168]	; (8000458 <configure_uart+0xb0>)
 80003ae:	f000 fd67 	bl	8000e80 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80003b2:	2202      	movs	r2, #2
 80003b4:	2105      	movs	r1, #5
 80003b6:	4828      	ldr	r0, [pc, #160]	; (8000458 <configure_uart+0xb0>)
 80003b8:	f000 fab8 	bl	800092c <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80003bc:	2202      	movs	r2, #2
 80003be:	2106      	movs	r1, #6
 80003c0:	4825      	ldr	r0, [pc, #148]	; (8000458 <configure_uart+0xb0>)
 80003c2:	f000 fab3 	bl	800092c <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80003c6:	2207      	movs	r2, #7
 80003c8:	2105      	movs	r1, #5
 80003ca:	4823      	ldr	r0, [pc, #140]	; (8000458 <configure_uart+0xb0>)
 80003cc:	f000 faf4 	bl	80009b8 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80003d0:	2207      	movs	r2, #7
 80003d2:	2106      	movs	r1, #6
 80003d4:	4820      	ldr	r0, [pc, #128]	; (8000458 <configure_uart+0xb0>)
 80003d6:	f000 faef 	bl	80009b8 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 80003da:	2200      	movs	r2, #0
 80003dc:	2105      	movs	r1, #5
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <configure_uart+0xb0>)
 80003e0:	f000 fb23 	bl	8000a2a <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2106      	movs	r1, #6
 80003e8:	481b      	ldr	r0, [pc, #108]	; (8000458 <configure_uart+0xb0>)
 80003ea:	f000 fb1e 	bl	8000a2a <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80003ee:	2202      	movs	r2, #2
 80003f0:	2105      	movs	r1, #5
 80003f2:	4819      	ldr	r0, [pc, #100]	; (8000458 <configure_uart+0xb0>)
 80003f4:	f000 fb5f 	bl	8000ab6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80003f8:	2202      	movs	r2, #2
 80003fa:	2106      	movs	r1, #6
 80003fc:	4816      	ldr	r0, [pc, #88]	; (8000458 <configure_uart+0xb0>)
 80003fe:	f000 fb5a 	bl	8000ab6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000402:	2201      	movs	r2, #1
 8000404:	2105      	movs	r1, #5
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <configure_uart+0xb0>)
 8000408:	f000 fb31 	bl	8000a6e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 800040c:	2201      	movs	r2, #1
 800040e:	2106      	movs	r1, #6
 8000410:	4811      	ldr	r0, [pc, #68]	; (8000458 <configure_uart+0xb0>)
 8000412:	f000 fb2c 	bl	8000a6e <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <configure_uart+0xb4>)
 8000418:	4a11      	ldr	r2, [pc, #68]	; (8000460 <configure_uart+0xb8>)
 800041a:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <configure_uart+0xb4>)
 800041e:	2202      	movs	r2, #2
 8000420:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <configure_uart+0xb4>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <configure_uart+0xb4>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <configure_uart+0xb4>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <configure_uart+0xb4>)
 8000436:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800043a:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <configure_uart+0xb4>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <configure_uart+0xb8>)
 8000444:	f000 fd1c 	bl	8000e80 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <configure_uart+0xb4>)
 800044a:	f000 fedd 	bl	8001208 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <configure_uart+0xb4>)
 8000450:	f000 ffda 	bl	8001408 <USART_PeripheralEnable>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40020c00 	.word	0x40020c00
 800045c:	200000ac 	.word	0x200000ac
 8000460:	40004400 	.word	0x40004400

08000464 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <UART_SendChar+0x20>)
 8000476:	f000 ffed 	bl	8001454 <USART_SendData>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000ac 	.word	0x200000ac

08000488 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	6852      	ldr	r2, [r2, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	6892      	ldr	r2, [r2, #8]
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	7b5b      	ldrb	r3, [r3, #13]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d16a      	bne.n	8000582 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6a1a      	ldr	r2, [r3, #32]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f042 0201 	orr.w	r2, r2, #1
 80004ba:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7b9b      	ldrb	r3, [r3, #14]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d11c      	bne.n	80004fe <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f022 0203 	bic.w	r2, r2, #3
 80004d2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	6912      	ldr	r2, [r2, #16]
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80004ec:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80004fc:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7b9b      	ldrb	r3, [r3, #14]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d11c      	bne.n	8000540 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f022 0203 	bic.w	r2, r2, #3
 8000514:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	6912      	ldr	r2, [r2, #16]
 800051e:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800052e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	699a      	ldr	r2, [r3, #24]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800053e:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	7b9b      	ldrb	r3, [r3, #14]
 8000544:	2b04      	cmp	r3, #4
 8000546:	d11c      	bne.n	8000582 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f022 0203 	bic.w	r2, r2, #3
 8000556:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	6912      	ldr	r2, [r2, #16]
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	699a      	ldr	r2, [r3, #24]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000570:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000580:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7d1b      	ldrb	r3, [r3, #20]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f040 80bf 	bne.w	800070a <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7d5b      	ldrb	r3, [r3, #21]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d124      	bne.n	80005de <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005a2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6992      	ldr	r2, [r2, #24]
 80005ac:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	699a      	ldr	r2, [r3, #24]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80005bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	699a      	ldr	r2, [r3, #24]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80005cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a1a      	ldr	r2, [r3, #32]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 0210 	orr.w	r2, r2, #16
 80005dc:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7d5b      	ldrb	r3, [r3, #21]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d124      	bne.n	8000630 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	699a      	ldr	r2, [r3, #24]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005f4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6992      	ldr	r2, [r2, #24]
 80005fe:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800060e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800061e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a1a      	ldr	r2, [r3, #32]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0210 	orr.w	r2, r2, #16
 800062e:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	7d5b      	ldrb	r3, [r3, #21]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d124      	bne.n	8000682 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000646:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	6992      	ldr	r2, [r2, #24]
 8000650:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	699a      	ldr	r2, [r3, #24]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000660:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	699a      	ldr	r2, [r3, #24]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000670:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6a1a      	ldr	r2, [r3, #32]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f042 0210 	orr.w	r2, r2, #16
 8000680:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7d5b      	ldrb	r3, [r3, #21]
 8000686:	2b08      	cmp	r3, #8
 8000688:	d13f      	bne.n	800070a <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000698:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	699a      	ldr	r2, [r3, #24]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006a8:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80006b8:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6a1a      	ldr	r2, [r3, #32]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f022 0220 	bic.w	r2, r2, #32
 80006c8:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6a1a      	ldr	r2, [r3, #32]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d8:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	699a      	ldr	r2, [r3, #24]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80006e8:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68da      	ldr	r2, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 0204 	orr.w	r2, r2, #4
 80006f8:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a1a      	ldr	r2, [r3, #32]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f042 0210 	orr.w	r2, r2, #16
 8000708:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7f1b      	ldrb	r3, [r3, #28]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d16a      	bne.n	80007e8 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a1a      	ldr	r2, [r3, #32]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000720:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7f5b      	ldrb	r3, [r3, #29]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d11c      	bne.n	8000764 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0203 	bic.w	r2, r2, #3
 8000738:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6a12      	ldr	r2, [r2, #32]
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000752:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	69da      	ldr	r2, [r3, #28]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000762:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7f5b      	ldrb	r3, [r3, #29]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d11c      	bne.n	80007a6 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	69da      	ldr	r2, [r3, #28]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0203 	bic.w	r2, r2, #3
 800077a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6a12      	ldr	r2, [r2, #32]
 8000784:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000794:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80007a4:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7f5b      	ldrb	r3, [r3, #29]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d11c      	bne.n	80007e8 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69da      	ldr	r2, [r3, #28]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0203 	bic.w	r2, r2, #3
 80007bc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	6a12      	ldr	r2, [r2, #32]
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007d6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80007e6:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d16d      	bne.n	80008ce <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6a1a      	ldr	r2, [r3, #32]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000800:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000808:	2b02      	cmp	r3, #2
 800080a:	d11c      	bne.n	8000846 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800081a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000834:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000844:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800084c:	2b03      	cmp	r3, #3
 800084e:	d11c      	bne.n	800088a <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800085e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000878:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000888:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000890:	2b04      	cmp	r3, #4
 8000892:	d11c      	bne.n	80008ce <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008a2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008bc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80008cc:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7b1b      	ldrb	r3, [r3, #12]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d108      	bne.n	80008e8 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f042 0201 	orr.w	r2, r2, #1
 80008e4:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 80008e6:	e00b      	b.n	8000900 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7b1b      	ldrb	r3, [r3, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d107      	bne.n	8000900 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68da      	ldr	r2, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f042 0201 	orr.w	r2, r2, #1
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
 8000938:	4613      	mov	r3, r2
 800093a:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	78fa      	ldrb	r2, [r7, #3]
 8000946:	0052      	lsls	r2, r2, #1
 8000948:	2103      	movs	r1, #3
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	43d2      	mvns	r2, r2
 8000950:	401a      	ands	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	78b9      	ldrb	r1, [r7, #2]
 800095c:	78fa      	ldrb	r2, [r7, #3]
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	431a      	orrs	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	601a      	str	r2, [r3, #0]

}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
 8000980:	4613      	mov	r3, r2
 8000982:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	78fa      	ldrb	r2, [r7, #3]
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	43d2      	mvns	r2, r2
 8000996:	401a      	ands	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	78b9      	ldrb	r1, [r7, #2]
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	431a      	orrs	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
 80009c4:	4613      	mov	r3, r2
 80009c6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80009da:	7afa      	ldrb	r2, [r7, #11]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3208      	adds	r2, #8
 80009e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e4:	7aba      	ldrb	r2, [r7, #10]
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	210f      	movs	r1, #15
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	43d2      	mvns	r2, r2
 80009f0:	4611      	mov	r1, r2
 80009f2:	7afa      	ldrb	r2, [r7, #11]
 80009f4:	4019      	ands	r1, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80009fe:	7afa      	ldrb	r2, [r7, #11]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3208      	adds	r2, #8
 8000a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a08:	78b9      	ldrb	r1, [r7, #2]
 8000a0a:	7aba      	ldrb	r2, [r7, #10]
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	4611      	mov	r1, r2
 8000a14:	7afa      	ldrb	r2, [r7, #11]
 8000a16:	4319      	orrs	r1, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
 8000a36:	4613      	mov	r3, r2
 8000a38:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	2101      	movs	r1, #1
 8000a46:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4a:	43d2      	mvns	r2, r2
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	78b9      	ldrb	r1, [r7, #2]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	605a      	str	r2, [r3, #4]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	78fa      	ldrb	r2, [r7, #3]
 8000a88:	0052      	lsls	r2, r2, #1
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	78b9      	ldrb	r1, [r7, #2]
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	60da      	str	r2, [r3, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	70fb      	strb	r3, [r7, #3]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	0052      	lsls	r2, r2, #1
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	78b9      	ldrb	r1, [r7, #2]
 8000ae6:	78fa      	ldrb	r2, [r7, #3]
 8000ae8:	0052      	lsls	r2, r2, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	431a      	orrs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	609a      	str	r2, [r3, #8]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Handler>:

	*pSYT_CFGR |= 0x1;
}

void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SysTick_Handler+0x30>)
 8000b08:	607b      	str	r3, [r7, #4]

	tick_count++;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SysTick_Handler+0x34>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <SysTick_Handler+0x34>)
 8000b12:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 8000b14:	f000 f82c 	bl	8000b70 <update_sleep_status>

	update_next_task();
 8000b18:	f000 f848 	bl	8000bac <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	e000ed04 	.word	0xe000ed04
 8000b34:	200000c8 	.word	0x200000c8

08000b38 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 8000b38:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 8000b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 8000b40:	4909      	ldr	r1, [pc, #36]	; (8000b68 <PendSV_Handler+0x30>)
	__asm volatile ("LDR R1, [R1]");
 8000b42:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("STR R0, [R1]");
 8000b44:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 8000b46:	4909      	ldr	r1, [pc, #36]	; (8000b6c <PendSV_Handler+0x34>)
	__asm volatile ("LDR R1, [R1]");
 8000b48:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("LDR R0, [R1]");
 8000b4a:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 8000b4c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8000b50:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <PendSV_Handler+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a02      	ldr	r2, [pc, #8]	; (8000b64 <PendSV_Handler+0x2c>)
 8000b5a:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 8000b5c:	4770      	bx	lr
}
 8000b5e:	bf00      	nop
 8000b60:	200000d0 	.word	0x200000d0
 8000b64:	200000cc 	.word	0x200000cc
 8000b68:	200000cc 	.word	0x200000cc
 8000b6c:	200000d0 	.word	0x200000d0

08000b70 <update_sleep_status>:

	return;
}

void update_sleep_status(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
	struct TCB *present_task;

	present_task = current_task;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <update_sleep_status+0x38>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	607b      	str	r3, [r7, #4]

	do
	{
		if(present_task->sleep_count > 0)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d004      	beq.n	8000b8e <update_sleep_status+0x1e>
		{
			present_task->sleep_count--;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
		}
		present_task = present_task->next;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	607b      	str	r3, [r7, #4]
	}
	while(present_task != current_task);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <update_sleep_status+0x38>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d1ee      	bne.n	8000b7c <update_sleep_status+0xc>

	return;
 8000b9e:	bf00      	nop
}
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	200000cc 	.word	0x200000cc

08000bac <update_next_task>:

void update_next_task(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 8000bb2:	23ff      	movs	r3, #255	; 0xff
 8000bb4:	71fb      	strb	r3, [r7, #7]
	struct TCB *best_task;

	next_task = current_task;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <update_next_task+0x5c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <update_next_task+0x60>)
 8000bbc:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = next_task->next;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <update_next_task+0x60>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <update_next_task+0x60>)
 8000bc6:	6013      	str	r3, [r2, #0]

		if(next_task->priority < max_priority && next_task->sleep_count==0)
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <update_next_task+0x60>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d90b      	bls.n	8000bec <update_next_task+0x40>
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <update_next_task+0x60>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d106      	bne.n	8000bec <update_next_task+0x40>
		{
			max_priority = next_task->priority;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <update_next_task+0x60>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	791b      	ldrb	r3, [r3, #4]
 8000be4:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <update_next_task+0x60>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <update_next_task+0x60>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <update_next_task+0x5c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d1e2      	bne.n	8000bbe <update_next_task+0x12>

	next_task = best_task;
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <update_next_task+0x60>)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	6013      	str	r3, [r2, #0]

	return;
 8000bfe:	bf00      	nop
}
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	200000cc 	.word	0x200000cc
 8000c0c:	200000d0 	.word	0x200000d0

08000c10 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <RTC_Alarm_IRQHandler+0x24>)
 8000c18:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000c1a:	f000 f80d 	bl	8000c38 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]

	return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013c14 	.word	0x40013c14

08000c38 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	210f      	movs	r1, #15
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <RTC_Alarm_Interrupt_Callback+0x14>)
 8000c42:	f7ff fe97 	bl	8000974 <GPIOWritePin>

	return;
 8000c46:	bf00      	nop
}
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 0201 	bic.w	r2, r3, #1
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	7852      	ldrb	r2, [r2, #1]
 8000c72:	431a      	orrs	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f023 0202 	bic.w	r2, r3, #2
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	0052      	lsls	r2, r2, #1
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0204 	bic.w	r2, r3, #4
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	7892      	ldrb	r2, [r2, #2]
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	431a      	orrs	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	7912      	ldrb	r2, [r2, #4]
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	7952      	ldrb	r2, [r2, #5]
 8000ce0:	02d2      	lsls	r2, r2, #11
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	7992      	ldrb	r2, [r2, #6]
 8000cfc:	0252      	lsls	r2, r2, #9
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	79d2      	ldrb	r2, [r2, #7]
 8000d18:	0212      	lsls	r2, r2, #8
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f023 0204 	bic.w	r2, r3, #4
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	7a12      	ldrb	r2, [r2, #8]
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	431a      	orrs	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	605a      	str	r2, [r3, #4]


}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3

}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint32_t len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 8000da4:	e012      	b.n	8000dcc <SPISendData+0x38>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000da6:	bf00      	nop
 8000da8:	2101      	movs	r1, #1
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff ffdc 	bl	8000d68 <SPIGetFlags>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f8      	beq.n	8000da8 <SPISendData+0x14>

		pSPI->SPI_DR = *TxBuf;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
		len--;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
	while(len > 0) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1e9      	bne.n	8000da6 <SPISendData+0x12>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 8000dd2:	bf00      	nop
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff ffc6 	bl	8000d68 <SPIGetFlags>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f8      	beq.n	8000dd4 <SPISendData+0x40>
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint32_t len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000dfe:	bf00      	nop
 8000e00:	2101      	movs	r1, #1
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ffb0 	bl	8000d68 <SPIGetFlags>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f8      	beq.n	8000e00 <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000e0e:	e004      	b.n	8000e1a <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff ffa3 	bl	8000d68 <SPIGetFlags>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f3      	bne.n	8000e10 <SPIMasterRecvData+0x24>

	while(len > 0) {
 8000e28:	e022      	b.n	8000e70 <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000e2a:	bf00      	nop
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff ff9a 	bl	8000d68 <SPIGetFlags>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f8      	beq.n	8000e2c <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 8000e4a:	bf00      	nop
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff ff8a 	bl	8000d68 <SPIGetFlags>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f8      	beq.n	8000e4c <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3301      	adds	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
		len--;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
	while(len > 0) {
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1d9      	bne.n	8000e2a <SPIMasterRecvData+0x3e>
	}

	return;
 8000e76:	bf00      	nop
}
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a88      	ldr	r2, [pc, #544]	; (80010ac <EnablePeriClk+0x22c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d108      	bne.n	8000ea2 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e90:	4b87      	ldr	r3, [pc, #540]	; (80010b0 <EnablePeriClk+0x230>)
 8000e92:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000ea0:	e19b      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a83      	ldr	r2, [pc, #524]	; (80010b4 <EnablePeriClk+0x234>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d108      	bne.n	8000ebc <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000eaa:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <EnablePeriClk+0x230>)
 8000eac:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f043 0202 	orr.w	r2, r3, #2
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	e18e      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a7e      	ldr	r2, [pc, #504]	; (80010b8 <EnablePeriClk+0x238>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d108      	bne.n	8000ed6 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <EnablePeriClk+0x230>)
 8000ec6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f043 0204 	orr.w	r2, r3, #4
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	e181      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a78      	ldr	r2, [pc, #480]	; (80010bc <EnablePeriClk+0x23c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d108      	bne.n	8000ef0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ede:	4b74      	ldr	r3, [pc, #464]	; (80010b0 <EnablePeriClk+0x230>)
 8000ee0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f043 0208 	orr.w	r2, r3, #8
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	e174      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a73      	ldr	r2, [pc, #460]	; (80010c0 <EnablePeriClk+0x240>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d108      	bne.n	8000f0a <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ef8:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <EnablePeriClk+0x230>)
 8000efa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f043 0210 	orr.w	r2, r3, #16
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	e167      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a6d      	ldr	r2, [pc, #436]	; (80010c4 <EnablePeriClk+0x244>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d108      	bne.n	8000f24 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <EnablePeriClk+0x230>)
 8000f14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f043 0220 	orr.w	r2, r3, #32
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	e15a      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a68      	ldr	r2, [pc, #416]	; (80010c8 <EnablePeriClk+0x248>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d108      	bne.n	8000f3e <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <EnablePeriClk+0x230>)
 8000f2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	e14d      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a62      	ldr	r2, [pc, #392]	; (80010cc <EnablePeriClk+0x24c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d108      	bne.n	8000f58 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f46:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <EnablePeriClk+0x230>)
 8000f48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	601a      	str	r2, [r3, #0]
}
 8000f56:	e140      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a5d      	ldr	r2, [pc, #372]	; (80010d0 <EnablePeriClk+0x250>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d108      	bne.n	8000f72 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <EnablePeriClk+0x230>)
 8000f62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	e133      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <EnablePeriClk+0x254>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d108      	bne.n	8000f8c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <EnablePeriClk+0x258>)
 8000f7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	e126      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a53      	ldr	r2, [pc, #332]	; (80010dc <EnablePeriClk+0x25c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d108      	bne.n	8000fa6 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f94:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <EnablePeriClk+0x260>)
 8000f96:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	e119      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <EnablePeriClk+0x264>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d108      	bne.n	8000fc0 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <EnablePeriClk+0x260>)
 8000fb0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	e10c      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <EnablePeriClk+0x268>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d108      	bne.n	8000fda <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <EnablePeriClk+0x260>)
 8000fca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	e0ff      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a43      	ldr	r2, [pc, #268]	; (80010ec <EnablePeriClk+0x26c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d108      	bne.n	8000ff4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <EnablePeriClk+0x260>)
 8000fe4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	e0f2      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <EnablePeriClk+0x270>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d108      	bne.n	800100e <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <EnablePeriClk+0x260>)
 8000ffe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	e0e5      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <EnablePeriClk+0x274>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d108      	bne.n	8001028 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <EnablePeriClk+0x258>)
 8001018:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	e0d8      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <EnablePeriClk+0x278>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d108      	bne.n	8001042 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <EnablePeriClk+0x260>)
 8001032:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	e0cb      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <EnablePeriClk+0x27c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d108      	bne.n	800105c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <EnablePeriClk+0x260>)
 800104c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	e0be      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <EnablePeriClk+0x280>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d108      	bne.n	8001076 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <EnablePeriClk+0x260>)
 8001066:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	e0b1      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <EnablePeriClk+0x284>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d108      	bne.n	8001090 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <EnablePeriClk+0x260>)
 8001080:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	e0a4      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <EnablePeriClk+0x288>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d139      	bne.n	800110c <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <EnablePeriClk+0x258>)
 800109a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f043 0220 	orr.w	r2, r3, #32
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	e097      	b.n	80011da <EnablePeriClk+0x35a>
 80010aa:	bf00      	nop
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40023830 	.word	0x40023830
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40013000 	.word	0x40013000
 80010d8:	40023844 	.word	0x40023844
 80010dc:	40003800 	.word	0x40003800
 80010e0:	40023840 	.word	0x40023840
 80010e4:	40003c00 	.word	0x40003c00
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40005800 	.word	0x40005800
 80010f0:	40005c00 	.word	0x40005c00
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40004800 	.word	0x40004800
 8001100:	40004c00 	.word	0x40004c00
 8001104:	40005000 	.word	0x40005000
 8001108:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <EnablePeriClk+0x364>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d108      	bne.n	8001126 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <EnablePeriClk+0x368>)
 8001116:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0210 	orr.w	r2, r3, #16
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	e059      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a30      	ldr	r2, [pc, #192]	; (80011ec <EnablePeriClk+0x36c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d108      	bne.n	8001140 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <EnablePeriClk+0x368>)
 8001130:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f043 0220 	orr.w	r2, r3, #32
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	e04c      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <EnablePeriClk+0x370>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d108      	bne.n	800115a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <EnablePeriClk+0x374>)
 800114a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	e03f      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <EnablePeriClk+0x378>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d108      	bne.n	8001174 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <EnablePeriClk+0x374>)
 8001164:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	e032      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117a:	d108      	bne.n	800118e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <EnablePeriClk+0x368>)
 800117e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	e025      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <EnablePeriClk+0x37c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d108      	bne.n	80011a8 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <EnablePeriClk+0x368>)
 8001198:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	e018      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <EnablePeriClk+0x380>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d108      	bne.n	80011c2 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <EnablePeriClk+0x368>)
 80011b2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f043 0204 	orr.w	r2, r3, #4
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	e00b      	b.n	80011da <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <EnablePeriClk+0x384>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d107      	bne.n	80011da <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <EnablePeriClk+0x368>)
 80011cc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f043 0208 	orr.w	r2, r3, #8
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40001000 	.word	0x40001000
 80011e8:	40023840 	.word	0x40023840
 80011ec:	40001400 	.word	0x40001400
 80011f0:	40026000 	.word	0x40026000
 80011f4:	40023830 	.word	0x40023830
 80011f8:	40026400 	.word	0x40026400
 80011fc:	40000400 	.word	0x40000400
 8001200:	40000800 	.word	0x40000800
 8001204:	40000c00 	.word	0x40000c00

08001208 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d110      	bne.n	800123a <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0204 	bic.w	r2, r2, #4
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	e028      	b.n	800128c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d110      	bne.n	8001264 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0208 	bic.w	r2, r2, #8
 8001250:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0204 	orr.w	r2, r2, #4
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	e013      	b.n	800128c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d10f      	bne.n	800128c <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0204 	orr.w	r2, r2, #4
 800128a:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d108      	bne.n	80012a6 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	e00b      	b.n	80012be <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012bc:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012cc:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6919      	ldr	r1, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	031a      	lsls	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d108      	bne.n	80012fc <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	e028      	b.n	800134e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d110      	bne.n	8001326 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001312:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	e013      	b.n	800134e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d10f      	bne.n	800134e <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800133c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134c:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f8a7 	bl	80014a8 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d110      	bne.n	8001384 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001370:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001380:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8001382:	e03d      	b.n	8001400 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d110      	bne.n	80013ae <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800139a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013aa:	615a      	str	r2, [r3, #20]
}
 80013ac:	e028      	b.n	8001400 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d110      	bne.n	80013d8 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c4:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d4:	615a      	str	r2, [r3, #20]
}
 80013d6:	e013      	b.n	8001400 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d10f      	bne.n	8001400 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ee:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141e:	60da      	str	r2, [r3, #12]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001460:	e012      	b.n	8001488 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8001462:	bf00      	nop
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff ffdf 	bl	800142a <USART_GetFlagStatus>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f8      	beq.n	8001464 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
		Len--;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3b01      	subs	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e9      	bne.n	8001462 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 800148e:	bf00      	nop
 8001490:	2140      	movs	r1, #64	; 0x40
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff ffc9 	bl	800142a <USART_GetFlagStatus>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f8      	beq.n	8001490 <USART_SendData+0x3c>
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <USART_SetBaudRate>:

	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 80014b2:	f240 6383 	movw	r3, #1667	; 0x683
 80014b6:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <w5500_configure_pins>:
#include "spi_driver.h"
#include "common_utils.h"
#include "w5500_driver.h"

void w5500_configure_pins(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	//Configure the GPIO Pin for Slave Select Pin of FLASH Module
	EnablePeriClk(W5500_PORT);
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <w5500_configure_pins+0x24>)
 80014d2:	f7ff fcd5 	bl	8000e80 <EnablePeriClk>
	GPIOSetMode(W5500_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2104      	movs	r1, #4
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <w5500_configure_pins+0x24>)
 80014dc:	f7ff fa26 	bl	800092c <GPIOSetMode>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2104      	movs	r1, #4
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <w5500_configure_pins+0x24>)
 80014e6:	f7ff fa45 	bl	8000974 <GPIOWritePin>

	return;
 80014ea:	bf00      	nop
}
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000

080014f4 <w5500_get_chip_version>:

uint8_t w5500_get_chip_version(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x39;
 80014fe:	2339      	movs	r3, #57	; 0x39
 8001500:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800150a:	2200      	movs	r2, #0
 800150c:	2104      	movs	r1, #4
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <w5500_get_chip_version+0x40>)
 8001510:	f7ff fa30 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 8001514:	463a      	mov	r2, r7
 8001516:	1d39      	adds	r1, r7, #4
 8001518:	2304      	movs	r3, #4
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <w5500_get_chip_version+0x44>)
 800151c:	f7ff fc66 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001520:	2201      	movs	r2, #1
 8001522:	2104      	movs	r1, #4
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <w5500_get_chip_version+0x40>)
 8001526:	f7ff fa25 	bl	8000974 <GPIOWritePin>

	return rx_buf[3];
 800152a:	78fb      	ldrb	r3, [r7, #3]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020000 	.word	0x40020000
 8001538:	40003800 	.word	0x40003800

0800153c <w5500_read_phy_cfgr>:

uint8_t w5500_read_phy_cfgr(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x2E;
 8001546:	232e      	movs	r3, #46	; 0x2e
 8001548:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001552:	2200      	movs	r2, #0
 8001554:	2104      	movs	r1, #4
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <w5500_read_phy_cfgr+0x40>)
 8001558:	f7ff fa0c 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 800155c:	463a      	mov	r2, r7
 800155e:	1d39      	adds	r1, r7, #4
 8001560:	2304      	movs	r3, #4
 8001562:	4807      	ldr	r0, [pc, #28]	; (8001580 <w5500_read_phy_cfgr+0x44>)
 8001564:	f7ff fc42 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001568:	2201      	movs	r2, #1
 800156a:	2104      	movs	r1, #4
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <w5500_read_phy_cfgr+0x40>)
 800156e:	f7ff fa01 	bl	8000974 <GPIOWritePin>

	return rx_buf[3];
 8001572:	78fb      	ldrb	r3, [r7, #3]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020000 	.word	0x40020000
 8001580:	40003800 	.word	0x40003800

08001584 <w5500_configure_phy>:

void w5500_configure_phy(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x2E;
 800158e:	232e      	movs	r3, #46	; 0x2e
 8001590:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x04;
 8001592:	2304      	movs	r3, #4
 8001594:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0xF8;
 8001596:	23f8      	movs	r3, #248	; 0xf8
 8001598:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800159a:	2200      	movs	r2, #0
 800159c:	2104      	movs	r1, #4
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <w5500_configure_phy+0x40>)
 80015a0:	f7ff f9e8 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,4);
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <w5500_configure_phy+0x44>)
 80015ac:	f7ff fbf2 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2104      	movs	r1, #4
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <w5500_configure_phy+0x40>)
 80015b6:	f7ff f9dd 	bl	8000974 <GPIOWritePin>

	return;
 80015ba:	bf00      	nop
}
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40003800 	.word	0x40003800

080015cc <w5500_set_common_mode_reg>:

	return rx_buf[3];
}

void w5500_set_common_mode_reg(uint8_t value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	737b      	strb	r3, [r7, #13]
	tx_buf[2] = 0x04;
 80015de:	2304      	movs	r3, #4
 80015e0:	73bb      	strb	r3, [r7, #14]
	tx_buf[3] = value;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	73fb      	strb	r3, [r7, #15]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2104      	movs	r1, #4
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <w5500_set_common_mode_reg+0x44>)
 80015ec:	f7ff f9c2 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,4);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2204      	movs	r2, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <w5500_set_common_mode_reg+0x48>)
 80015fa:	f7ff fbcb 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80015fe:	2201      	movs	r2, #1
 8001600:	2104      	movs	r1, #4
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <w5500_set_common_mode_reg+0x44>)
 8001604:	f7ff f9b6 	bl	8000974 <GPIOWritePin>

	return;
 8001608:	bf00      	nop
}
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	40003800 	.word	0x40003800

08001618 <w5500_configure_gw_ip_address>:

void w5500_configure_gw_ip_address(uint8_t *addr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x01;
 8001624:	2301      	movs	r3, #1
 8001626:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 8001628:	2304      	movs	r3, #4
 800162a:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = addr[0];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = addr[1];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = addr[2];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = addr[3];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001644:	2200      	movs	r2, #0
 8001646:	2104      	movs	r1, #4
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <w5500_configure_gw_ip_address+0x58>)
 800164a:	f7ff f993 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2207      	movs	r2, #7
 8001654:	4619      	mov	r1, r3
 8001656:	4807      	ldr	r0, [pc, #28]	; (8001674 <w5500_configure_gw_ip_address+0x5c>)
 8001658:	f7ff fb9c 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800165c:	2201      	movs	r2, #1
 800165e:	2104      	movs	r1, #4
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <w5500_configure_gw_ip_address+0x58>)
 8001662:	f7ff f987 	bl	8000974 <GPIOWritePin>

	return;
 8001666:	bf00      	nop
}
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020000 	.word	0x40020000
 8001674:	40003800 	.word	0x40003800

08001678 <w5500_get_gw_ip_address>:

void w5500_get_gw_ip_address(uint8_t *addr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x01;
 8001684:	2301      	movs	r3, #1
 8001686:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 8001688:	2300      	movs	r3, #0
 800168a:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 8001698:	2300      	movs	r3, #0
 800169a:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800169c:	2200      	movs	r2, #0
 800169e:	2104      	movs	r1, #4
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <w5500_get_gw_ip_address+0x78>)
 80016a2:	f7ff f967 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 80016a6:	f107 0208 	add.w	r2, r7, #8
 80016aa:	f107 0110 	add.w	r1, r7, #16
 80016ae:	2307      	movs	r3, #7
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <w5500_get_gw_ip_address+0x7c>)
 80016b2:	f7ff fb9b 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2104      	movs	r1, #4
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <w5500_get_gw_ip_address+0x78>)
 80016bc:	f7ff f95a 	bl	8000974 <GPIOWritePin>

	for(i=0;i<4;i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	75fb      	strb	r3, [r7, #23]
 80016c4:	e00c      	b.n	80016e0 <w5500_get_gw_ip_address+0x68>
	{
		addr[i] = rx_buf[i+3];
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	1cda      	adds	r2, r3, #3
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	440b      	add	r3, r1
 80016d0:	3218      	adds	r2, #24
 80016d2:	443a      	add	r2, r7
 80016d4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80016d8:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	3301      	adds	r3, #1
 80016de:	75fb      	strb	r3, [r7, #23]
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d9ef      	bls.n	80016c6 <w5500_get_gw_ip_address+0x4e>
	}

	return;
 80016e6:	bf00      	nop
}
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40003800 	.word	0x40003800

080016f8 <w5500_configure_subnet_mask>:

void w5500_configure_subnet_mask(uint8_t *subnet_mask)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x05;
 8001704:	2305      	movs	r3, #5
 8001706:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 8001708:	2304      	movs	r3, #4
 800170a:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = subnet_mask[0];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = subnet_mask[1];
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = subnet_mask[2];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = subnet_mask[3];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	78db      	ldrb	r3, [r3, #3]
 8001722:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001724:	2200      	movs	r2, #0
 8001726:	2104      	movs	r1, #4
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <w5500_configure_subnet_mask+0x58>)
 800172a:	f7ff f923 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2207      	movs	r2, #7
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <w5500_configure_subnet_mask+0x5c>)
 8001738:	f7ff fb2c 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800173c:	2201      	movs	r2, #1
 800173e:	2104      	movs	r1, #4
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <w5500_configure_subnet_mask+0x58>)
 8001742:	f7ff f917 	bl	8000974 <GPIOWritePin>

	return;
 8001746:	bf00      	nop
}
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40020000 	.word	0x40020000
 8001754:	40003800 	.word	0x40003800

08001758 <w5500_get_subnet_mask>:

void w5500_get_subnet_mask(uint8_t *subnet_mask)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001760:	2300      	movs	r3, #0
 8001762:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x05;
 8001764:	2305      	movs	r3, #5
 8001766:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001770:	2300      	movs	r3, #0
 8001772:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001774:	2300      	movs	r3, #0
 8001776:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 8001778:	2300      	movs	r3, #0
 800177a:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <w5500_get_subnet_mask+0x78>)
 8001782:	f7ff f8f7 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 8001786:	f107 0208 	add.w	r2, r7, #8
 800178a:	f107 0110 	add.w	r1, r7, #16
 800178e:	2307      	movs	r3, #7
 8001790:	4810      	ldr	r0, [pc, #64]	; (80017d4 <w5500_get_subnet_mask+0x7c>)
 8001792:	f7ff fb2b 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001796:	2201      	movs	r2, #1
 8001798:	2104      	movs	r1, #4
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <w5500_get_subnet_mask+0x78>)
 800179c:	f7ff f8ea 	bl	8000974 <GPIOWritePin>

	for(i=0;i<4;i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	e00c      	b.n	80017c0 <w5500_get_subnet_mask+0x68>
	{
		subnet_mask[i] = rx_buf[i+3];
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	1cda      	adds	r2, r3, #3
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	440b      	add	r3, r1
 80017b0:	3218      	adds	r2, #24
 80017b2:	443a      	add	r2, r7
 80017b4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80017b8:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	3301      	adds	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d9ef      	bls.n	80017a6 <w5500_get_subnet_mask+0x4e>
	}

	return;
 80017c6:	bf00      	nop
}
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40003800 	.word	0x40003800

080017d8 <w5500_configure_ip_address>:

void w5500_configure_ip_address(uint8_t *addr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x0F;
 80017e4:	230f      	movs	r3, #15
 80017e6:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 80017e8:	2304      	movs	r3, #4
 80017ea:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = addr[0];
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = addr[1];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = addr[2];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = addr[3];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <w5500_configure_ip_address+0x58>)
 800180a:	f7ff f8b3 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2207      	movs	r2, #7
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <w5500_configure_ip_address+0x5c>)
 8001818:	f7ff fabc 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800181c:	2201      	movs	r2, #1
 800181e:	2104      	movs	r1, #4
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <w5500_configure_ip_address+0x58>)
 8001822:	f7ff f8a7 	bl	8000974 <GPIOWritePin>

	return;
 8001826:	bf00      	nop
}
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40020000 	.word	0x40020000
 8001834:	40003800 	.word	0x40003800

08001838 <w5500_get_ip_address>:

void w5500_get_ip_address(uint8_t *addr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x0F;
 8001844:	230f      	movs	r3, #15
 8001846:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 8001848:	2300      	movs	r3, #0
 800184a:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 800184c:	2300      	movs	r3, #0
 800184e:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001854:	2300      	movs	r3, #0
 8001856:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 8001858:	2300      	movs	r3, #0
 800185a:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800185c:	2200      	movs	r2, #0
 800185e:	2104      	movs	r1, #4
 8001860:	4813      	ldr	r0, [pc, #76]	; (80018b0 <w5500_get_ip_address+0x78>)
 8001862:	f7ff f887 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 8001866:	f107 0208 	add.w	r2, r7, #8
 800186a:	f107 0110 	add.w	r1, r7, #16
 800186e:	2307      	movs	r3, #7
 8001870:	4810      	ldr	r0, [pc, #64]	; (80018b4 <w5500_get_ip_address+0x7c>)
 8001872:	f7ff fabb 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001876:	2201      	movs	r2, #1
 8001878:	2104      	movs	r1, #4
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <w5500_get_ip_address+0x78>)
 800187c:	f7ff f87a 	bl	8000974 <GPIOWritePin>

	for(i=0;i<4;i++)
 8001880:	2300      	movs	r3, #0
 8001882:	75fb      	strb	r3, [r7, #23]
 8001884:	e00c      	b.n	80018a0 <w5500_get_ip_address+0x68>
	{
		addr[i] = rx_buf[i+3];
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	1cda      	adds	r2, r3, #3
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	440b      	add	r3, r1
 8001890:	3218      	adds	r2, #24
 8001892:	443a      	add	r2, r7
 8001894:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001898:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	3301      	adds	r3, #1
 800189e:	75fb      	strb	r3, [r7, #23]
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d9ef      	bls.n	8001886 <w5500_get_ip_address+0x4e>
	}

	return;
 80018a6:	bf00      	nop
}
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40003800 	.word	0x40003800

080018b8 <w5500_configure_mac_address>:

void w5500_configure_mac_address(uint8_t *addr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[9];

	tx_buf[0] = 0x00;
 80018c0:	2300      	movs	r3, #0
 80018c2:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0x09;
 80018c4:	2309      	movs	r3, #9
 80018c6:	737b      	strb	r3, [r7, #13]
	tx_buf[2] = 0x04;
 80018c8:	2304      	movs	r3, #4
 80018ca:	73bb      	strb	r3, [r7, #14]

	tx_buf[3] = addr[0];
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	73fb      	strb	r3, [r7, #15]
	tx_buf[4] = addr[1];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	743b      	strb	r3, [r7, #16]
	tx_buf[5] = addr[2];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	747b      	strb	r3, [r7, #17]
	tx_buf[6] = addr[3];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	74bb      	strb	r3, [r7, #18]
	tx_buf[7] = addr[4];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	74fb      	strb	r3, [r7, #19]
	tx_buf[8] = addr[5];
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	795b      	ldrb	r3, [r3, #5]
 80018ee:	753b      	strb	r3, [r7, #20]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2104      	movs	r1, #4
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <w5500_configure_mac_address+0x64>)
 80018f6:	f7ff f83d 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,9);
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2209      	movs	r2, #9
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <w5500_configure_mac_address+0x68>)
 8001904:	f7ff fa46 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001908:	2201      	movs	r2, #1
 800190a:	2104      	movs	r1, #4
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <w5500_configure_mac_address+0x64>)
 800190e:	f7ff f831 	bl	8000974 <GPIOWritePin>

	return;
 8001912:	bf00      	nop
}
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40020000 	.word	0x40020000
 8001920:	40003800 	.word	0x40003800

08001924 <w5500_get_mac_address>:

void w5500_get_mac_address(uint8_t *addr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[9];
	uint8_t rx_buf[9];
	uint8_t i;

	tx_buf[0] = 0x00;
 800192c:	2300      	movs	r3, #0
 800192e:	753b      	strb	r3, [r7, #20]
	tx_buf[1] = 0x09;
 8001930:	2309      	movs	r3, #9
 8001932:	757b      	strb	r3, [r7, #21]
	tx_buf[2] = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	75bb      	strb	r3, [r7, #22]

	tx_buf[3] = 0x00;
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]
	tx_buf[4] = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	763b      	strb	r3, [r7, #24]
	tx_buf[5] = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	767b      	strb	r3, [r7, #25]
	tx_buf[6] = 0x00;
 8001944:	2300      	movs	r3, #0
 8001946:	76bb      	strb	r3, [r7, #26]
	tx_buf[7] = 0x00;
 8001948:	2300      	movs	r3, #0
 800194a:	76fb      	strb	r3, [r7, #27]
	tx_buf[8] = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	773b      	strb	r3, [r7, #28]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001950:	2200      	movs	r2, #0
 8001952:	2104      	movs	r1, #4
 8001954:	4813      	ldr	r0, [pc, #76]	; (80019a4 <w5500_get_mac_address+0x80>)
 8001956:	f7ff f80d 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,9);
 800195a:	f107 0208 	add.w	r2, r7, #8
 800195e:	f107 0114 	add.w	r1, r7, #20
 8001962:	2309      	movs	r3, #9
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <w5500_get_mac_address+0x84>)
 8001966:	f7ff fa41 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800196a:	2201      	movs	r2, #1
 800196c:	2104      	movs	r1, #4
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <w5500_get_mac_address+0x80>)
 8001970:	f7ff f800 	bl	8000974 <GPIOWritePin>

	for(i=0;i<6;i++)
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e00c      	b.n	8001994 <w5500_get_mac_address+0x70>
	{
		addr[i] = rx_buf[i+3];
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	1cda      	adds	r2, r3, #3
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	440b      	add	r3, r1
 8001984:	3220      	adds	r2, #32
 8001986:	443a      	add	r2, r7
 8001988:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800198c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++)
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	3301      	adds	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d9ef      	bls.n	800197a <w5500_get_mac_address+0x56>
	}

	return;
 800199a:	bf00      	nop
}
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40003800 	.word	0x40003800

080019ac <w5500_set_socket0_mode_register>:

	return rx_buf[3];
}

void w5500_set_socket0_mode_register(uint8_t value)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	737b      	strb	r3, [r7, #13]
	tx_buf[2] = 0x0C;
 80019be:	230c      	movs	r3, #12
 80019c0:	73bb      	strb	r3, [r7, #14]
	tx_buf[3] = value;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	73fb      	strb	r3, [r7, #15]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2104      	movs	r1, #4
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <w5500_set_socket0_mode_register+0x44>)
 80019cc:	f7fe ffd2 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,4);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2204      	movs	r2, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <w5500_set_socket0_mode_register+0x48>)
 80019da:	f7ff f9db 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80019de:	2201      	movs	r2, #1
 80019e0:	2104      	movs	r1, #4
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <w5500_set_socket0_mode_register+0x44>)
 80019e4:	f7fe ffc6 	bl	8000974 <GPIOWritePin>

	return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40003800 	.word	0x40003800

080019f8 <w5500_set_socket0_control_register>:

	return rx_buf[3];
}

void w5500_set_socket0_control_register(uint8_t value)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0x01;
 8001a06:	2301      	movs	r3, #1
 8001a08:	737b      	strb	r3, [r7, #13]
	tx_buf[2] = 0x0C;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	73bb      	strb	r3, [r7, #14]
	tx_buf[3] = value;
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	73fb      	strb	r3, [r7, #15]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2104      	movs	r1, #4
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <w5500_set_socket0_control_register+0x44>)
 8001a18:	f7fe ffac 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,4);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2204      	movs	r2, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <w5500_set_socket0_control_register+0x48>)
 8001a26:	f7ff f9b5 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <w5500_set_socket0_control_register+0x44>)
 8001a30:	f7fe ffa0 	bl	8000974 <GPIOWritePin>

	return;
 8001a34:	bf00      	nop
}
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40003800 	.word	0x40003800

08001a44 <w5500_read_socket0_status_register>:

	return rx_buf[3];
}

uint8_t w5500_read_socket0_status_register(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x03;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x08;
 8001a52:	2308      	movs	r3, #8
 8001a54:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <w5500_read_socket0_status_register+0x40>)
 8001a60:	f7fe ff88 	bl	8000974 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 8001a64:	463a      	mov	r2, r7
 8001a66:	1d39      	adds	r1, r7, #4
 8001a68:	2304      	movs	r3, #4
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <w5500_read_socket0_status_register+0x44>)
 8001a6c:	f7ff f9be 	bl	8000dec <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2104      	movs	r1, #4
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <w5500_read_socket0_status_register+0x40>)
 8001a76:	f7fe ff7d 	bl	8000974 <GPIOWritePin>

	return rx_buf[3];
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40003800 	.word	0x40003800

08001a8c <w5500_set_socket0_source_port>:

void w5500_set_socket0_source_port(uint16_t value)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_buf[5];

	tx_buf[0] = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x04;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x0C;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	72bb      	strb	r3, [r7, #10]
	tx_buf[3] = (uint8_t) (value >> 8);
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = (uint8_t) (value & 0x00FF);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	733b      	strb	r3, [r7, #12]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <w5500_set_socket0_source_port+0x50>)
 8001ab8:	f7fe ff5c 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,5);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <w5500_set_socket0_source_port+0x54>)
 8001ac6:	f7ff f965 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2104      	movs	r1, #4
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <w5500_set_socket0_source_port+0x50>)
 8001ad0:	f7fe ff50 	bl	8000974 <GPIOWritePin>

	return;
 8001ad4:	bf00      	nop
}
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40003800 	.word	0x40003800

08001ae4 <w5500_set_socket0_destination_port>:

	return value;
}

void w5500_set_socket0_destination_port(uint16_t value)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_buf[5];

	tx_buf[0] = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x10;
 8001af2:	2310      	movs	r3, #16
 8001af4:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x0C;
 8001af6:	230c      	movs	r3, #12
 8001af8:	72bb      	strb	r3, [r7, #10]
	tx_buf[3] = (uint8_t) (value >> 8);
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = (uint8_t) (value & 0x00FF);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	733b      	strb	r3, [r7, #12]

	printf("tx_buf[3]: 0x%X\r\n",tx_buf[3]);
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <w5500_set_socket0_destination_port+0x64>)
 8001b10:	f000 fbe2 	bl	80022d8 <iprintf>
	printf("tx_buf[4]: 0x%X\r\n",tx_buf[4]);
 8001b14:	7b3b      	ldrb	r3, [r7, #12]
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <w5500_set_socket0_destination_port+0x68>)
 8001b1a:	f000 fbdd 	bl	80022d8 <iprintf>

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2104      	movs	r1, #4
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <w5500_set_socket0_destination_port+0x6c>)
 8001b24:	f7fe ff26 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,5);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <w5500_set_socket0_destination_port+0x70>)
 8001b32:	f7ff f92f 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2104      	movs	r1, #4
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <w5500_set_socket0_destination_port+0x6c>)
 8001b3c:	f7fe ff1a 	bl	8000974 <GPIOWritePin>

	return;
 8001b40:	bf00      	nop
}
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0800312c 	.word	0x0800312c
 8001b4c:	08003140 	.word	0x08003140
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40003800 	.word	0x40003800

08001b58 <w5500_set_socket0_destination_ip_address>:

	return value;
}

void w5500_set_socket0_destination_ip_address(uint8_t *addr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 8001b60:	2300      	movs	r3, #0
 8001b62:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x0C;
 8001b64:	230c      	movs	r3, #12
 8001b66:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x0C;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = addr[0];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = addr[1];
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = addr[2];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = addr[3];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	78db      	ldrb	r3, [r3, #3]
 8001b82:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2104      	movs	r1, #4
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <w5500_set_socket0_destination_ip_address+0x58>)
 8001b8a:	f7fe fef3 	bl	8000974 <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2207      	movs	r2, #7
 8001b94:	4619      	mov	r1, r3
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <w5500_set_socket0_destination_ip_address+0x5c>)
 8001b98:	f7ff f8fc 	bl	8000d94 <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <w5500_set_socket0_destination_ip_address+0x58>)
 8001ba2:	f7fe fee7 	bl	8000974 <GPIOWritePin>

	return;
 8001ba6:	bf00      	nop
}
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40003800 	.word	0x40003800

08001bb8 <w5500_socket0_write_data>:

void w5500_socket0_write_data(uint8_t *addr,uint32_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	uint8_t * tx_buf;
	uint32_t i;
	tx_buf = (uint8_t *) malloc(len+3);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa98 	bl	80020fc <malloc>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60bb      	str	r3, [r7, #8]

	if(tx_buf != NULL)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d02f      	beq.n	8001c36 <w5500_socket0_write_data+0x7e>
	{
		tx_buf[0] = 0x00;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
		tx_buf[1] = 0x00;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3301      	adds	r3, #1
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
		tx_buf[2] = 0x14;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3302      	adds	r3, #2
 8001be8:	2214      	movs	r2, #20
 8001bea:	701a      	strb	r2, [r3, #0]

		for(i=0;i<len;i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e00b      	b.n	8001c0a <w5500_socket0_write_data+0x52>
		{
			tx_buf[i+3] = addr[i];
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	440b      	add	r3, r1
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
		for(i=0;i<len;i++)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3ef      	bcc.n	8001bf2 <w5500_socket0_write_data+0x3a>
		}

		GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	480a      	ldr	r0, [pc, #40]	; (8001c40 <w5500_socket0_write_data+0x88>)
 8001c18:	f7fe feac 	bl	8000974 <GPIOWritePin>
		SPISendData(SPI_DEV,tx_buf,(len+3));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3303      	adds	r3, #3
 8001c20:	461a      	mov	r2, r3
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <w5500_socket0_write_data+0x8c>)
 8001c26:	f7ff f8b5 	bl	8000d94 <SPISendData>
		GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <w5500_socket0_write_data+0x88>)
 8001c30:	f7fe fea0 	bl	8000974 <GPIOWritePin>
	}

	return;
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
}
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40003800 	.word	0x40003800

08001c48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fbe1 	bl	8000464 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <_isatty>:

int _isatty(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f000 f9ac 	bl	80020a8 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200000d4 	.word	0x200000d4
 8001d84:	200000e8 	.word	0x200000e8

08001d88 <main>:
#include "general_purpose_timer.h"
#include "common_utils.h"
#include "w5500_driver.h"

int main(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
	uint8_t w5500_chip_ver;
	uint8_t w5500_phy_cfgr;
	uint8_t w5500_common_mode_reg;
	uint8_t ip_addr[4] = {192,168,1,150};
 8001d8e:	4b9f      	ldr	r3, [pc, #636]	; (800200c <main+0x284>)
 8001d90:	623b      	str	r3, [r7, #32]
	uint8_t nw_sub_mask[4] = {255,255,255,0};
 8001d92:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001d96:	61fb      	str	r3, [r7, #28]
	uint8_t gw_ip_addr[4] = {192,168,1,1};
 8001d98:	4b9d      	ldr	r3, [pc, #628]	; (8002010 <main+0x288>)
 8001d9a:	61bb      	str	r3, [r7, #24]
	uint8_t mac_addr[6] = {0x00,0x02,0x73,0x90,0x11,0x22};
 8001d9c:	4a9d      	ldr	r2, [pc, #628]	; (8002014 <main+0x28c>)
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da6:	6018      	str	r0, [r3, #0]
 8001da8:	3304      	adds	r3, #4
 8001daa:	8019      	strh	r1, [r3, #0]

	uint8_t dest_ip_addr[4] = {192,168,1,2};
 8001dac:	4b9a      	ldr	r3, [pc, #616]	; (8002018 <main+0x290>)
 8001dae:	60fb      	str	r3, [r7, #12]
	uint8_t socket_interrupt_register;

	uint16_t port_value;

	//Configure the Timer
	configure_delay_timer();
 8001db0:	f7fe fa86 	bl	80002c0 <configure_delay_timer>

	configure_uart();
 8001db4:	f7fe faf8 	bl	80003a8 <configure_uart>
	configure_spi();
 8001db8:	f7fe faa4 	bl	8000304 <configure_spi>
	w5500_configure_pins();
 8001dbc:	f7ff fb86 	bl	80014cc <w5500_configure_pins>
	delay_us(100000);
 8001dc0:	4896      	ldr	r0, [pc, #600]	; (800201c <main+0x294>)
 8001dc2:	f7fe fa65 	bl	8000290 <delay_us>

	//Reset the interface
	w5500_set_common_mode_reg(0x80);
 8001dc6:	2080      	movs	r0, #128	; 0x80
 8001dc8:	f7ff fc00 	bl	80015cc <w5500_set_common_mode_reg>
	delay_us(1000000);
 8001dcc:	4894      	ldr	r0, [pc, #592]	; (8002020 <main+0x298>)
 8001dce:	f7fe fa5f 	bl	8000290 <delay_us>

	w5500_chip_ver = w5500_get_chip_version();
 8001dd2:	f7ff fb8f 	bl	80014f4 <w5500_get_chip_version>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("W5500 Chip Version: 0x%X\r\n",w5500_chip_ver);
 8001ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001de0:	4619      	mov	r1, r3
 8001de2:	4890      	ldr	r0, [pc, #576]	; (8002024 <main+0x29c>)
 8001de4:	f000 fa78 	bl	80022d8 <iprintf>

	delay_us(100000);
 8001de8:	488c      	ldr	r0, [pc, #560]	; (800201c <main+0x294>)
 8001dea:	f7fe fa51 	bl	8000290 <delay_us>

	//Configure the Eth PHY as 100Mbps/Full Duplex
	w5500_configure_phy();
 8001dee:	f7ff fbc9 	bl	8001584 <w5500_configure_phy>
	delay_us(100000);
 8001df2:	488a      	ldr	r0, [pc, #552]	; (800201c <main+0x294>)
 8001df4:	f7fe fa4c 	bl	8000290 <delay_us>

	w5500_phy_cfgr = w5500_read_phy_cfgr();
 8001df8:	f7ff fba0 	bl	800153c <w5500_read_phy_cfgr>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	printf("PHYCFGR: 0x%X\r\n", w5500_phy_cfgr);
 8001e02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e06:	4619      	mov	r1, r3
 8001e08:	4887      	ldr	r0, [pc, #540]	; (8002028 <main+0x2a0>)
 8001e0a:	f000 fa65 	bl	80022d8 <iprintf>
	delay_us(100000);
 8001e0e:	4883      	ldr	r0, [pc, #524]	; (800201c <main+0x294>)
 8001e10:	f7fe fa3e 	bl	8000290 <delay_us>

	w5500_configure_ip_address(ip_addr);
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fcdd 	bl	80017d8 <w5500_configure_ip_address>
	delay_us(100000);
 8001e1e:	487f      	ldr	r0, [pc, #508]	; (800201c <main+0x294>)
 8001e20:	f7fe fa36 	bl	8000290 <delay_us>
	w5500_configure_subnet_mask(nw_sub_mask);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc65 	bl	80016f8 <w5500_configure_subnet_mask>
	delay_us(100000);
 8001e2e:	487b      	ldr	r0, [pc, #492]	; (800201c <main+0x294>)
 8001e30:	f7fe fa2e 	bl	8000290 <delay_us>
	w5500_configure_gw_ip_address(gw_ip_addr);
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fbed 	bl	8001618 <w5500_configure_gw_ip_address>
	delay_us(100000);
 8001e3e:	4877      	ldr	r0, [pc, #476]	; (800201c <main+0x294>)
 8001e40:	f7fe fa26 	bl	8000290 <delay_us>
	w5500_configure_mac_address(mac_addr);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd35 	bl	80018b8 <w5500_configure_mac_address>
	delay_us(100000);
 8001e4e:	4873      	ldr	r0, [pc, #460]	; (800201c <main+0x294>)
 8001e50:	f7fe fa1e 	bl	8000290 <delay_us>

	w5500_get_ip_address(buf);
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fcee 	bl	8001838 <w5500_get_ip_address>
	delay_us(100000);
 8001e5c:	486f      	ldr	r0, [pc, #444]	; (800201c <main+0x294>)
 8001e5e:	f7fe fa17 	bl	8000290 <delay_us>
	printf("IP Address: ");
 8001e62:	4872      	ldr	r0, [pc, #456]	; (800202c <main+0x2a4>)
 8001e64:	f000 fa38 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e6e:	e00e      	b.n	8001e8e <main+0x106>
		printf("%d ",buf[i]);
 8001e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e74:	3328      	adds	r3, #40	; 0x28
 8001e76:	443b      	add	r3, r7
 8001e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	486c      	ldr	r0, [pc, #432]	; (8002030 <main+0x2a8>)
 8001e80:	f000 fa2a 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d9ec      	bls.n	8001e70 <main+0xe8>
	printf("\r\n");
 8001e96:	4867      	ldr	r0, [pc, #412]	; (8002034 <main+0x2ac>)
 8001e98:	f000 faa4 	bl	80023e4 <puts>

	w5500_get_subnet_mask(buf);
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fc5a 	bl	8001758 <w5500_get_subnet_mask>
	delay_us(100000);
 8001ea4:	485d      	ldr	r0, [pc, #372]	; (800201c <main+0x294>)
 8001ea6:	f7fe f9f3 	bl	8000290 <delay_us>
	printf("Subnet Mask: ");
 8001eaa:	4863      	ldr	r0, [pc, #396]	; (8002038 <main+0x2b0>)
 8001eac:	f000 fa14 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001eb6:	e00e      	b.n	8001ed6 <main+0x14e>
		printf("%d ",buf[i]);
 8001eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebc:	3328      	adds	r3, #40	; 0x28
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	485a      	ldr	r0, [pc, #360]	; (8002030 <main+0x2a8>)
 8001ec8:	f000 fa06 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9ec      	bls.n	8001eb8 <main+0x130>
	printf("\r\n");
 8001ede:	4855      	ldr	r0, [pc, #340]	; (8002034 <main+0x2ac>)
 8001ee0:	f000 fa80 	bl	80023e4 <puts>

	w5500_get_gw_ip_address(buf);
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fbc6 	bl	8001678 <w5500_get_gw_ip_address>
	delay_us(100000);
 8001eec:	484b      	ldr	r0, [pc, #300]	; (800201c <main+0x294>)
 8001eee:	f7fe f9cf 	bl	8000290 <delay_us>
	printf("Gateway IP: ");
 8001ef2:	4852      	ldr	r0, [pc, #328]	; (800203c <main+0x2b4>)
 8001ef4:	f000 f9f0 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001efe:	e00e      	b.n	8001f1e <main+0x196>
		printf("%d ",buf[i]);
 8001f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f04:	3328      	adds	r3, #40	; 0x28
 8001f06:	443b      	add	r3, r7
 8001f08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4848      	ldr	r0, [pc, #288]	; (8002030 <main+0x2a8>)
 8001f10:	f000 f9e2 	bl	80022d8 <iprintf>
	for(i=0;i<4;i++)
 8001f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d9ec      	bls.n	8001f00 <main+0x178>
	printf("\r\n");
 8001f26:	4843      	ldr	r0, [pc, #268]	; (8002034 <main+0x2ac>)
 8001f28:	f000 fa5c 	bl	80023e4 <puts>

	w5500_get_mac_address(buf);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fcf8 	bl	8001924 <w5500_get_mac_address>
	delay_us(100000);
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <main+0x294>)
 8001f36:	f7fe f9ab 	bl	8000290 <delay_us>
	printf("MAC Address: ");
 8001f3a:	4841      	ldr	r0, [pc, #260]	; (8002040 <main+0x2b8>)
 8001f3c:	f000 f9cc 	bl	80022d8 <iprintf>
	for(i=0;i<6;i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f46:	e00e      	b.n	8001f66 <main+0x1de>
		printf("%X ",buf[i]);
 8001f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4c:	3328      	adds	r3, #40	; 0x28
 8001f4e:	443b      	add	r3, r7
 8001f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f54:	4619      	mov	r1, r3
 8001f56:	483b      	ldr	r0, [pc, #236]	; (8002044 <main+0x2bc>)
 8001f58:	f000 f9be 	bl	80022d8 <iprintf>
	for(i=0;i<6;i++)
 8001f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f60:	3301      	adds	r3, #1
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d9ec      	bls.n	8001f48 <main+0x1c0>
	printf("\r\n");
 8001f6e:	4831      	ldr	r0, [pc, #196]	; (8002034 <main+0x2ac>)
 8001f70:	f000 fa38 	bl	80023e4 <puts>
	printf("Socket 0 Status Register: 0x%X\r\n",value);
	delay_us(100000);
*/


	w5500_set_socket0_source_port(45000);
 8001f74:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8001f78:	f7ff fd88 	bl	8001a8c <w5500_set_socket0_source_port>
	delay_us(100000);
 8001f7c:	4827      	ldr	r0, [pc, #156]	; (800201c <main+0x294>)
 8001f7e:	f7fe f987 	bl	8000290 <delay_us>
	port_value = w5500_read_socket0_source_port();
	printf("Socket 0 Source Port: %d\r\n",port_value);
	delay_us(100000);
	*/

	printf("\r\nConfiguring Socket 0 in TCP Mode\r\n");
 8001f82:	4831      	ldr	r0, [pc, #196]	; (8002048 <main+0x2c0>)
 8001f84:	f000 fa2e 	bl	80023e4 <puts>
	w5500_set_socket0_mode_register(0x01);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff fd0f 	bl	80019ac <w5500_set_socket0_mode_register>
	delay_us(100000);
 8001f8e:	4823      	ldr	r0, [pc, #140]	; (800201c <main+0x294>)
 8001f90:	f7fe f97e 	bl	8000290 <delay_us>

	//Socket Open
	w5500_set_socket0_control_register(0x01);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fd2f 	bl	80019f8 <w5500_set_socket0_control_register>

	value = w5500_read_socket0_status_register();
 8001f9a:	f7ff fd53 	bl	8001a44 <w5500_read_socket0_status_register>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	printf("Socket 0 Status Register: 0x%X\r\n",value);
 8001fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4828      	ldr	r0, [pc, #160]	; (800204c <main+0x2c4>)
 8001fac:	f000 f994 	bl	80022d8 <iprintf>
	delay_us(100000);
 8001fb0:	481a      	ldr	r0, [pc, #104]	; (800201c <main+0x294>)
 8001fb2:	f7fe f96d 	bl	8000290 <delay_us>

	w5500_set_socket0_destination_port(50000);
 8001fb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fba:	f7ff fd93 	bl	8001ae4 <w5500_set_socket0_destination_port>
	delay_us(1000000);
 8001fbe:	4818      	ldr	r0, [pc, #96]	; (8002020 <main+0x298>)
 8001fc0:	f7fe f966 	bl	8000290 <delay_us>

	w5500_set_socket0_destination_ip_address(dest_ip_addr);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fdc5 	bl	8001b58 <w5500_set_socket0_destination_ip_address>
	delay_us(1000000);
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <main+0x298>)
 8001fd0:	f7fe f95e 	bl	8000290 <delay_us>

	//Socket Connect
	w5500_set_socket0_control_register(0x04);
 8001fd4:	2004      	movs	r0, #4
 8001fd6:	f7ff fd0f 	bl	80019f8 <w5500_set_socket0_control_register>
	delay_us(1000000);
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <main+0x298>)
 8001fdc:	f7fe f958 	bl	8000290 <delay_us>

	value = w5500_read_socket0_status_register();
 8001fe0:	f7ff fd30 	bl	8001a44 <w5500_read_socket0_status_register>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	printf("Socket 0 Status Register: 0x%X\r\n",value);
 8001fea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4816      	ldr	r0, [pc, #88]	; (800204c <main+0x2c4>)
 8001ff2:	f000 f971 	bl	80022d8 <iprintf>
	delay_us(100000);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <main+0x294>)
 8001ff8:	f7fe f94a 	bl	8000290 <delay_us>

	//Write data to buffer
	w5500_socket0_write_data((uint8_t*)"Hello World\n",12);
 8001ffc:	210c      	movs	r1, #12
 8001ffe:	4814      	ldr	r0, [pc, #80]	; (8002050 <main+0x2c8>)
 8002000:	f7ff fdda 	bl	8001bb8 <w5500_socket0_write_data>

	//Send data
	w5500_set_socket0_control_register(0x20);
 8002004:	2020      	movs	r0, #32
 8002006:	f7ff fcf7 	bl	80019f8 <w5500_set_socket0_control_register>

	while(1)
 800200a:	e7fe      	b.n	800200a <main+0x282>
 800200c:	9601a8c0 	.word	0x9601a8c0
 8002010:	0101a8c0 	.word	0x0101a8c0
 8002014:	08003258 	.word	0x08003258
 8002018:	0201a8c0 	.word	0x0201a8c0
 800201c:	000186a0 	.word	0x000186a0
 8002020:	000f4240 	.word	0x000f4240
 8002024:	08003188 	.word	0x08003188
 8002028:	080031a4 	.word	0x080031a4
 800202c:	080031b4 	.word	0x080031b4
 8002030:	080031c4 	.word	0x080031c4
 8002034:	080031c8 	.word	0x080031c8
 8002038:	080031cc 	.word	0x080031cc
 800203c:	080031dc 	.word	0x080031dc
 8002040:	080031ec 	.word	0x080031ec
 8002044:	080031fc 	.word	0x080031fc
 8002048:	08003200 	.word	0x08003200
 800204c:	08003224 	.word	0x08003224
 8002050:	08003248 	.word	0x08003248

08002054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002056:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002058:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <LoopForever+0x6>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	; (8002094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <LoopForever+0xe>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	; (80020a0 <LoopForever+0x16>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002082:	f000 f817 	bl	80020b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002086:	f7ff fe7f 	bl	8001d88 <main>

0800208a <LoopForever>:

LoopForever:
  b LoopForever
 800208a:	e7fe      	b.n	800208a <LoopForever>
  ldr   r0, =_estack
 800208c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002098:	08003300 	.word	0x08003300
  ldr r2, =_sbss
 800209c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80020a0:	200000e8 	.word	0x200000e8

080020a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <__errno>:
 80020a8:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <__errno+0x8>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <__libc_init_array>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	4d0d      	ldr	r5, [pc, #52]	; (80020ec <__libc_init_array+0x38>)
 80020b8:	4c0d      	ldr	r4, [pc, #52]	; (80020f0 <__libc_init_array+0x3c>)
 80020ba:	1b64      	subs	r4, r4, r5
 80020bc:	10a4      	asrs	r4, r4, #2
 80020be:	2600      	movs	r6, #0
 80020c0:	42a6      	cmp	r6, r4
 80020c2:	d109      	bne.n	80020d8 <__libc_init_array+0x24>
 80020c4:	4d0b      	ldr	r5, [pc, #44]	; (80020f4 <__libc_init_array+0x40>)
 80020c6:	4c0c      	ldr	r4, [pc, #48]	; (80020f8 <__libc_init_array+0x44>)
 80020c8:	f001 f824 	bl	8003114 <_init>
 80020cc:	1b64      	subs	r4, r4, r5
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	2600      	movs	r6, #0
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d105      	bne.n	80020e2 <__libc_init_array+0x2e>
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020dc:	4798      	blx	r3
 80020de:	3601      	adds	r6, #1
 80020e0:	e7ee      	b.n	80020c0 <__libc_init_array+0xc>
 80020e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e6:	4798      	blx	r3
 80020e8:	3601      	adds	r6, #1
 80020ea:	e7f2      	b.n	80020d2 <__libc_init_array+0x1e>
 80020ec:	080032f8 	.word	0x080032f8
 80020f0:	080032f8 	.word	0x080032f8
 80020f4:	080032f8 	.word	0x080032f8
 80020f8:	080032fc 	.word	0x080032fc

080020fc <malloc>:
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <malloc+0xc>)
 80020fe:	4601      	mov	r1, r0
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	f000 b875 	b.w	80021f0 <_malloc_r>
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <memset>:
 800210c:	4402      	add	r2, r0
 800210e:	4603      	mov	r3, r0
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	f803 1b01 	strb.w	r1, [r3], #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <_free_r>:
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	4605      	mov	r5, r0
 8002120:	2900      	cmp	r1, #0
 8002122:	d041      	beq.n	80021a8 <_free_r+0x8c>
 8002124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002128:	1f0c      	subs	r4, r1, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	bfb8      	it	lt
 800212e:	18e4      	addlt	r4, r4, r3
 8002130:	f000 fc4c 	bl	80029cc <__malloc_lock>
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <_free_r+0x90>)
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	b933      	cbnz	r3, 8002148 <_free_r+0x2c>
 800213a:	6063      	str	r3, [r4, #4]
 800213c:	6014      	str	r4, [r2, #0]
 800213e:	4628      	mov	r0, r5
 8002140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002144:	f000 bc48 	b.w	80029d8 <__malloc_unlock>
 8002148:	42a3      	cmp	r3, r4
 800214a:	d908      	bls.n	800215e <_free_r+0x42>
 800214c:	6820      	ldr	r0, [r4, #0]
 800214e:	1821      	adds	r1, r4, r0
 8002150:	428b      	cmp	r3, r1
 8002152:	bf01      	itttt	eq
 8002154:	6819      	ldreq	r1, [r3, #0]
 8002156:	685b      	ldreq	r3, [r3, #4]
 8002158:	1809      	addeq	r1, r1, r0
 800215a:	6021      	streq	r1, [r4, #0]
 800215c:	e7ed      	b.n	800213a <_free_r+0x1e>
 800215e:	461a      	mov	r2, r3
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	b10b      	cbz	r3, 8002168 <_free_r+0x4c>
 8002164:	42a3      	cmp	r3, r4
 8002166:	d9fa      	bls.n	800215e <_free_r+0x42>
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	1850      	adds	r0, r2, r1
 800216c:	42a0      	cmp	r0, r4
 800216e:	d10b      	bne.n	8002188 <_free_r+0x6c>
 8002170:	6820      	ldr	r0, [r4, #0]
 8002172:	4401      	add	r1, r0
 8002174:	1850      	adds	r0, r2, r1
 8002176:	4283      	cmp	r3, r0
 8002178:	6011      	str	r1, [r2, #0]
 800217a:	d1e0      	bne.n	800213e <_free_r+0x22>
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	6053      	str	r3, [r2, #4]
 8002182:	4401      	add	r1, r0
 8002184:	6011      	str	r1, [r2, #0]
 8002186:	e7da      	b.n	800213e <_free_r+0x22>
 8002188:	d902      	bls.n	8002190 <_free_r+0x74>
 800218a:	230c      	movs	r3, #12
 800218c:	602b      	str	r3, [r5, #0]
 800218e:	e7d6      	b.n	800213e <_free_r+0x22>
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	1821      	adds	r1, r4, r0
 8002194:	428b      	cmp	r3, r1
 8002196:	bf04      	itt	eq
 8002198:	6819      	ldreq	r1, [r3, #0]
 800219a:	685b      	ldreq	r3, [r3, #4]
 800219c:	6063      	str	r3, [r4, #4]
 800219e:	bf04      	itt	eq
 80021a0:	1809      	addeq	r1, r1, r0
 80021a2:	6021      	streq	r1, [r4, #0]
 80021a4:	6054      	str	r4, [r2, #4]
 80021a6:	e7ca      	b.n	800213e <_free_r+0x22>
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
 80021aa:	bf00      	nop
 80021ac:	200000d8 	.word	0x200000d8

080021b0 <sbrk_aligned>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	4e0e      	ldr	r6, [pc, #56]	; (80021ec <sbrk_aligned+0x3c>)
 80021b4:	460c      	mov	r4, r1
 80021b6:	6831      	ldr	r1, [r6, #0]
 80021b8:	4605      	mov	r5, r0
 80021ba:	b911      	cbnz	r1, 80021c2 <sbrk_aligned+0x12>
 80021bc:	f000 f91a 	bl	80023f4 <_sbrk_r>
 80021c0:	6030      	str	r0, [r6, #0]
 80021c2:	4621      	mov	r1, r4
 80021c4:	4628      	mov	r0, r5
 80021c6:	f000 f915 	bl	80023f4 <_sbrk_r>
 80021ca:	1c43      	adds	r3, r0, #1
 80021cc:	d00a      	beq.n	80021e4 <sbrk_aligned+0x34>
 80021ce:	1cc4      	adds	r4, r0, #3
 80021d0:	f024 0403 	bic.w	r4, r4, #3
 80021d4:	42a0      	cmp	r0, r4
 80021d6:	d007      	beq.n	80021e8 <sbrk_aligned+0x38>
 80021d8:	1a21      	subs	r1, r4, r0
 80021da:	4628      	mov	r0, r5
 80021dc:	f000 f90a 	bl	80023f4 <_sbrk_r>
 80021e0:	3001      	adds	r0, #1
 80021e2:	d101      	bne.n	80021e8 <sbrk_aligned+0x38>
 80021e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021e8:	4620      	mov	r0, r4
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
 80021ec:	200000dc 	.word	0x200000dc

080021f0 <_malloc_r>:
 80021f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f4:	1ccd      	adds	r5, r1, #3
 80021f6:	f025 0503 	bic.w	r5, r5, #3
 80021fa:	3508      	adds	r5, #8
 80021fc:	2d0c      	cmp	r5, #12
 80021fe:	bf38      	it	cc
 8002200:	250c      	movcc	r5, #12
 8002202:	2d00      	cmp	r5, #0
 8002204:	4607      	mov	r7, r0
 8002206:	db01      	blt.n	800220c <_malloc_r+0x1c>
 8002208:	42a9      	cmp	r1, r5
 800220a:	d905      	bls.n	8002218 <_malloc_r+0x28>
 800220c:	230c      	movs	r3, #12
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	2600      	movs	r6, #0
 8002212:	4630      	mov	r0, r6
 8002214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002218:	4e2e      	ldr	r6, [pc, #184]	; (80022d4 <_malloc_r+0xe4>)
 800221a:	f000 fbd7 	bl	80029cc <__malloc_lock>
 800221e:	6833      	ldr	r3, [r6, #0]
 8002220:	461c      	mov	r4, r3
 8002222:	bb34      	cbnz	r4, 8002272 <_malloc_r+0x82>
 8002224:	4629      	mov	r1, r5
 8002226:	4638      	mov	r0, r7
 8002228:	f7ff ffc2 	bl	80021b0 <sbrk_aligned>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	4604      	mov	r4, r0
 8002230:	d14d      	bne.n	80022ce <_malloc_r+0xde>
 8002232:	6834      	ldr	r4, [r6, #0]
 8002234:	4626      	mov	r6, r4
 8002236:	2e00      	cmp	r6, #0
 8002238:	d140      	bne.n	80022bc <_malloc_r+0xcc>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	4631      	mov	r1, r6
 800223e:	4638      	mov	r0, r7
 8002240:	eb04 0803 	add.w	r8, r4, r3
 8002244:	f000 f8d6 	bl	80023f4 <_sbrk_r>
 8002248:	4580      	cmp	r8, r0
 800224a:	d13a      	bne.n	80022c2 <_malloc_r+0xd2>
 800224c:	6821      	ldr	r1, [r4, #0]
 800224e:	3503      	adds	r5, #3
 8002250:	1a6d      	subs	r5, r5, r1
 8002252:	f025 0503 	bic.w	r5, r5, #3
 8002256:	3508      	adds	r5, #8
 8002258:	2d0c      	cmp	r5, #12
 800225a:	bf38      	it	cc
 800225c:	250c      	movcc	r5, #12
 800225e:	4629      	mov	r1, r5
 8002260:	4638      	mov	r0, r7
 8002262:	f7ff ffa5 	bl	80021b0 <sbrk_aligned>
 8002266:	3001      	adds	r0, #1
 8002268:	d02b      	beq.n	80022c2 <_malloc_r+0xd2>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	442b      	add	r3, r5
 800226e:	6023      	str	r3, [r4, #0]
 8002270:	e00e      	b.n	8002290 <_malloc_r+0xa0>
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	1b52      	subs	r2, r2, r5
 8002276:	d41e      	bmi.n	80022b6 <_malloc_r+0xc6>
 8002278:	2a0b      	cmp	r2, #11
 800227a:	d916      	bls.n	80022aa <_malloc_r+0xba>
 800227c:	1961      	adds	r1, r4, r5
 800227e:	42a3      	cmp	r3, r4
 8002280:	6025      	str	r5, [r4, #0]
 8002282:	bf18      	it	ne
 8002284:	6059      	strne	r1, [r3, #4]
 8002286:	6863      	ldr	r3, [r4, #4]
 8002288:	bf08      	it	eq
 800228a:	6031      	streq	r1, [r6, #0]
 800228c:	5162      	str	r2, [r4, r5]
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	4638      	mov	r0, r7
 8002292:	f104 060b 	add.w	r6, r4, #11
 8002296:	f000 fb9f 	bl	80029d8 <__malloc_unlock>
 800229a:	f026 0607 	bic.w	r6, r6, #7
 800229e:	1d23      	adds	r3, r4, #4
 80022a0:	1af2      	subs	r2, r6, r3
 80022a2:	d0b6      	beq.n	8002212 <_malloc_r+0x22>
 80022a4:	1b9b      	subs	r3, r3, r6
 80022a6:	50a3      	str	r3, [r4, r2]
 80022a8:	e7b3      	b.n	8002212 <_malloc_r+0x22>
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	42a3      	cmp	r3, r4
 80022ae:	bf0c      	ite	eq
 80022b0:	6032      	streq	r2, [r6, #0]
 80022b2:	605a      	strne	r2, [r3, #4]
 80022b4:	e7ec      	b.n	8002290 <_malloc_r+0xa0>
 80022b6:	4623      	mov	r3, r4
 80022b8:	6864      	ldr	r4, [r4, #4]
 80022ba:	e7b2      	b.n	8002222 <_malloc_r+0x32>
 80022bc:	4634      	mov	r4, r6
 80022be:	6876      	ldr	r6, [r6, #4]
 80022c0:	e7b9      	b.n	8002236 <_malloc_r+0x46>
 80022c2:	230c      	movs	r3, #12
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	4638      	mov	r0, r7
 80022c8:	f000 fb86 	bl	80029d8 <__malloc_unlock>
 80022cc:	e7a1      	b.n	8002212 <_malloc_r+0x22>
 80022ce:	6025      	str	r5, [r4, #0]
 80022d0:	e7de      	b.n	8002290 <_malloc_r+0xa0>
 80022d2:	bf00      	nop
 80022d4:	200000d8 	.word	0x200000d8

080022d8 <iprintf>:
 80022d8:	b40f      	push	{r0, r1, r2, r3}
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <iprintf+0x2c>)
 80022dc:	b513      	push	{r0, r1, r4, lr}
 80022de:	681c      	ldr	r4, [r3, #0]
 80022e0:	b124      	cbz	r4, 80022ec <iprintf+0x14>
 80022e2:	69a3      	ldr	r3, [r4, #24]
 80022e4:	b913      	cbnz	r3, 80022ec <iprintf+0x14>
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 fa6a 	bl	80027c0 <__sinit>
 80022ec:	ab05      	add	r3, sp, #20
 80022ee:	9a04      	ldr	r2, [sp, #16]
 80022f0:	68a1      	ldr	r1, [r4, #8]
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 fb9d 	bl	8002a34 <_vfiprintf_r>
 80022fa:	b002      	add	sp, #8
 80022fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002300:	b004      	add	sp, #16
 8002302:	4770      	bx	lr
 8002304:	20000000 	.word	0x20000000

08002308 <_puts_r>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	460e      	mov	r6, r1
 800230c:	4605      	mov	r5, r0
 800230e:	b118      	cbz	r0, 8002318 <_puts_r+0x10>
 8002310:	6983      	ldr	r3, [r0, #24]
 8002312:	b90b      	cbnz	r3, 8002318 <_puts_r+0x10>
 8002314:	f000 fa54 	bl	80027c0 <__sinit>
 8002318:	69ab      	ldr	r3, [r5, #24]
 800231a:	68ac      	ldr	r4, [r5, #8]
 800231c:	b913      	cbnz	r3, 8002324 <_puts_r+0x1c>
 800231e:	4628      	mov	r0, r5
 8002320:	f000 fa4e 	bl	80027c0 <__sinit>
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <_puts_r+0xd0>)
 8002326:	429c      	cmp	r4, r3
 8002328:	d120      	bne.n	800236c <_puts_r+0x64>
 800232a:	686c      	ldr	r4, [r5, #4]
 800232c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800232e:	07db      	lsls	r3, r3, #31
 8002330:	d405      	bmi.n	800233e <_puts_r+0x36>
 8002332:	89a3      	ldrh	r3, [r4, #12]
 8002334:	0598      	lsls	r0, r3, #22
 8002336:	d402      	bmi.n	800233e <_puts_r+0x36>
 8002338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800233a:	f000 fadf 	bl	80028fc <__retarget_lock_acquire_recursive>
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	0719      	lsls	r1, r3, #28
 8002342:	d51d      	bpl.n	8002380 <_puts_r+0x78>
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b1db      	cbz	r3, 8002380 <_puts_r+0x78>
 8002348:	3e01      	subs	r6, #1
 800234a:	68a3      	ldr	r3, [r4, #8]
 800234c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002350:	3b01      	subs	r3, #1
 8002352:	60a3      	str	r3, [r4, #8]
 8002354:	bb39      	cbnz	r1, 80023a6 <_puts_r+0x9e>
 8002356:	2b00      	cmp	r3, #0
 8002358:	da38      	bge.n	80023cc <_puts_r+0xc4>
 800235a:	4622      	mov	r2, r4
 800235c:	210a      	movs	r1, #10
 800235e:	4628      	mov	r0, r5
 8002360:	f000 f858 	bl	8002414 <__swbuf_r>
 8002364:	3001      	adds	r0, #1
 8002366:	d011      	beq.n	800238c <_puts_r+0x84>
 8002368:	250a      	movs	r5, #10
 800236a:	e011      	b.n	8002390 <_puts_r+0x88>
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <_puts_r+0xd4>)
 800236e:	429c      	cmp	r4, r3
 8002370:	d101      	bne.n	8002376 <_puts_r+0x6e>
 8002372:	68ac      	ldr	r4, [r5, #8]
 8002374:	e7da      	b.n	800232c <_puts_r+0x24>
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <_puts_r+0xd8>)
 8002378:	429c      	cmp	r4, r3
 800237a:	bf08      	it	eq
 800237c:	68ec      	ldreq	r4, [r5, #12]
 800237e:	e7d5      	b.n	800232c <_puts_r+0x24>
 8002380:	4621      	mov	r1, r4
 8002382:	4628      	mov	r0, r5
 8002384:	f000 f898 	bl	80024b8 <__swsetup_r>
 8002388:	2800      	cmp	r0, #0
 800238a:	d0dd      	beq.n	8002348 <_puts_r+0x40>
 800238c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002392:	07da      	lsls	r2, r3, #31
 8002394:	d405      	bmi.n	80023a2 <_puts_r+0x9a>
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	059b      	lsls	r3, r3, #22
 800239a:	d402      	bmi.n	80023a2 <_puts_r+0x9a>
 800239c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800239e:	f000 faae 	bl	80028fe <__retarget_lock_release_recursive>
 80023a2:	4628      	mov	r0, r5
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da04      	bge.n	80023b4 <_puts_r+0xac>
 80023aa:	69a2      	ldr	r2, [r4, #24]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dc06      	bgt.n	80023be <_puts_r+0xb6>
 80023b0:	290a      	cmp	r1, #10
 80023b2:	d004      	beq.n	80023be <_puts_r+0xb6>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	6022      	str	r2, [r4, #0]
 80023ba:	7019      	strb	r1, [r3, #0]
 80023bc:	e7c5      	b.n	800234a <_puts_r+0x42>
 80023be:	4622      	mov	r2, r4
 80023c0:	4628      	mov	r0, r5
 80023c2:	f000 f827 	bl	8002414 <__swbuf_r>
 80023c6:	3001      	adds	r0, #1
 80023c8:	d1bf      	bne.n	800234a <_puts_r+0x42>
 80023ca:	e7df      	b.n	800238c <_puts_r+0x84>
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	250a      	movs	r5, #10
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	6022      	str	r2, [r4, #0]
 80023d4:	701d      	strb	r5, [r3, #0]
 80023d6:	e7db      	b.n	8002390 <_puts_r+0x88>
 80023d8:	08003284 	.word	0x08003284
 80023dc:	080032a4 	.word	0x080032a4
 80023e0:	08003264 	.word	0x08003264

080023e4 <puts>:
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <puts+0xc>)
 80023e6:	4601      	mov	r1, r0
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	f7ff bf8d 	b.w	8002308 <_puts_r>
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000

080023f4 <_sbrk_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4d06      	ldr	r5, [pc, #24]	; (8002410 <_sbrk_r+0x1c>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	602b      	str	r3, [r5, #0]
 8002400:	f7ff fc8c 	bl	8001d1c <_sbrk>
 8002404:	1c43      	adds	r3, r0, #1
 8002406:	d102      	bne.n	800240e <_sbrk_r+0x1a>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	b103      	cbz	r3, 800240e <_sbrk_r+0x1a>
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	200000e4 	.word	0x200000e4

08002414 <__swbuf_r>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	460e      	mov	r6, r1
 8002418:	4614      	mov	r4, r2
 800241a:	4605      	mov	r5, r0
 800241c:	b118      	cbz	r0, 8002426 <__swbuf_r+0x12>
 800241e:	6983      	ldr	r3, [r0, #24]
 8002420:	b90b      	cbnz	r3, 8002426 <__swbuf_r+0x12>
 8002422:	f000 f9cd 	bl	80027c0 <__sinit>
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <__swbuf_r+0x98>)
 8002428:	429c      	cmp	r4, r3
 800242a:	d12b      	bne.n	8002484 <__swbuf_r+0x70>
 800242c:	686c      	ldr	r4, [r5, #4]
 800242e:	69a3      	ldr	r3, [r4, #24]
 8002430:	60a3      	str	r3, [r4, #8]
 8002432:	89a3      	ldrh	r3, [r4, #12]
 8002434:	071a      	lsls	r2, r3, #28
 8002436:	d52f      	bpl.n	8002498 <__swbuf_r+0x84>
 8002438:	6923      	ldr	r3, [r4, #16]
 800243a:	b36b      	cbz	r3, 8002498 <__swbuf_r+0x84>
 800243c:	6923      	ldr	r3, [r4, #16]
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	1ac0      	subs	r0, r0, r3
 8002442:	6963      	ldr	r3, [r4, #20]
 8002444:	b2f6      	uxtb	r6, r6
 8002446:	4283      	cmp	r3, r0
 8002448:	4637      	mov	r7, r6
 800244a:	dc04      	bgt.n	8002456 <__swbuf_r+0x42>
 800244c:	4621      	mov	r1, r4
 800244e:	4628      	mov	r0, r5
 8002450:	f000 f922 	bl	8002698 <_fflush_r>
 8002454:	bb30      	cbnz	r0, 80024a4 <__swbuf_r+0x90>
 8002456:	68a3      	ldr	r3, [r4, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60a3      	str	r3, [r4, #8]
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	6022      	str	r2, [r4, #0]
 8002462:	701e      	strb	r6, [r3, #0]
 8002464:	6963      	ldr	r3, [r4, #20]
 8002466:	3001      	adds	r0, #1
 8002468:	4283      	cmp	r3, r0
 800246a:	d004      	beq.n	8002476 <__swbuf_r+0x62>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	07db      	lsls	r3, r3, #31
 8002470:	d506      	bpl.n	8002480 <__swbuf_r+0x6c>
 8002472:	2e0a      	cmp	r6, #10
 8002474:	d104      	bne.n	8002480 <__swbuf_r+0x6c>
 8002476:	4621      	mov	r1, r4
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f90d 	bl	8002698 <_fflush_r>
 800247e:	b988      	cbnz	r0, 80024a4 <__swbuf_r+0x90>
 8002480:	4638      	mov	r0, r7
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <__swbuf_r+0x9c>)
 8002486:	429c      	cmp	r4, r3
 8002488:	d101      	bne.n	800248e <__swbuf_r+0x7a>
 800248a:	68ac      	ldr	r4, [r5, #8]
 800248c:	e7cf      	b.n	800242e <__swbuf_r+0x1a>
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <__swbuf_r+0xa0>)
 8002490:	429c      	cmp	r4, r3
 8002492:	bf08      	it	eq
 8002494:	68ec      	ldreq	r4, [r5, #12]
 8002496:	e7ca      	b.n	800242e <__swbuf_r+0x1a>
 8002498:	4621      	mov	r1, r4
 800249a:	4628      	mov	r0, r5
 800249c:	f000 f80c 	bl	80024b8 <__swsetup_r>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d0cb      	beq.n	800243c <__swbuf_r+0x28>
 80024a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80024a8:	e7ea      	b.n	8002480 <__swbuf_r+0x6c>
 80024aa:	bf00      	nop
 80024ac:	08003284 	.word	0x08003284
 80024b0:	080032a4 	.word	0x080032a4
 80024b4:	08003264 	.word	0x08003264

080024b8 <__swsetup_r>:
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <__swsetup_r+0xcc>)
 80024ba:	b570      	push	{r4, r5, r6, lr}
 80024bc:	681d      	ldr	r5, [r3, #0]
 80024be:	4606      	mov	r6, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	b125      	cbz	r5, 80024ce <__swsetup_r+0x16>
 80024c4:	69ab      	ldr	r3, [r5, #24]
 80024c6:	b913      	cbnz	r3, 80024ce <__swsetup_r+0x16>
 80024c8:	4628      	mov	r0, r5
 80024ca:	f000 f979 	bl	80027c0 <__sinit>
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <__swsetup_r+0xd0>)
 80024d0:	429c      	cmp	r4, r3
 80024d2:	d10f      	bne.n	80024f4 <__swsetup_r+0x3c>
 80024d4:	686c      	ldr	r4, [r5, #4]
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024dc:	0719      	lsls	r1, r3, #28
 80024de:	d42c      	bmi.n	800253a <__swsetup_r+0x82>
 80024e0:	06dd      	lsls	r5, r3, #27
 80024e2:	d411      	bmi.n	8002508 <__swsetup_r+0x50>
 80024e4:	2309      	movs	r3, #9
 80024e6:	6033      	str	r3, [r6, #0]
 80024e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024ec:	81a3      	strh	r3, [r4, #12]
 80024ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f2:	e03e      	b.n	8002572 <__swsetup_r+0xba>
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <__swsetup_r+0xd4>)
 80024f6:	429c      	cmp	r4, r3
 80024f8:	d101      	bne.n	80024fe <__swsetup_r+0x46>
 80024fa:	68ac      	ldr	r4, [r5, #8]
 80024fc:	e7eb      	b.n	80024d6 <__swsetup_r+0x1e>
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <__swsetup_r+0xd8>)
 8002500:	429c      	cmp	r4, r3
 8002502:	bf08      	it	eq
 8002504:	68ec      	ldreq	r4, [r5, #12]
 8002506:	e7e6      	b.n	80024d6 <__swsetup_r+0x1e>
 8002508:	0758      	lsls	r0, r3, #29
 800250a:	d512      	bpl.n	8002532 <__swsetup_r+0x7a>
 800250c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800250e:	b141      	cbz	r1, 8002522 <__swsetup_r+0x6a>
 8002510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002514:	4299      	cmp	r1, r3
 8002516:	d002      	beq.n	800251e <__swsetup_r+0x66>
 8002518:	4630      	mov	r0, r6
 800251a:	f7ff fdff 	bl	800211c <_free_r>
 800251e:	2300      	movs	r3, #0
 8002520:	6363      	str	r3, [r4, #52]	; 0x34
 8002522:	89a3      	ldrh	r3, [r4, #12]
 8002524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002528:	81a3      	strh	r3, [r4, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	6063      	str	r3, [r4, #4]
 800252e:	6923      	ldr	r3, [r4, #16]
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	81a3      	strh	r3, [r4, #12]
 800253a:	6923      	ldr	r3, [r4, #16]
 800253c:	b94b      	cbnz	r3, 8002552 <__swsetup_r+0x9a>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002548:	d003      	beq.n	8002552 <__swsetup_r+0x9a>
 800254a:	4621      	mov	r1, r4
 800254c:	4630      	mov	r0, r6
 800254e:	f000 f9fd 	bl	800294c <__smakebuf_r>
 8002552:	89a0      	ldrh	r0, [r4, #12]
 8002554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002558:	f010 0301 	ands.w	r3, r0, #1
 800255c:	d00a      	beq.n	8002574 <__swsetup_r+0xbc>
 800255e:	2300      	movs	r3, #0
 8002560:	60a3      	str	r3, [r4, #8]
 8002562:	6963      	ldr	r3, [r4, #20]
 8002564:	425b      	negs	r3, r3
 8002566:	61a3      	str	r3, [r4, #24]
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	b943      	cbnz	r3, 800257e <__swsetup_r+0xc6>
 800256c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002570:	d1ba      	bne.n	80024e8 <__swsetup_r+0x30>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	0781      	lsls	r1, r0, #30
 8002576:	bf58      	it	pl
 8002578:	6963      	ldrpl	r3, [r4, #20]
 800257a:	60a3      	str	r3, [r4, #8]
 800257c:	e7f4      	b.n	8002568 <__swsetup_r+0xb0>
 800257e:	2000      	movs	r0, #0
 8002580:	e7f7      	b.n	8002572 <__swsetup_r+0xba>
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	08003284 	.word	0x08003284
 800258c:	080032a4 	.word	0x080032a4
 8002590:	08003264 	.word	0x08003264

08002594 <__sflush_r>:
 8002594:	898a      	ldrh	r2, [r1, #12]
 8002596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002598:	4605      	mov	r5, r0
 800259a:	0710      	lsls	r0, r2, #28
 800259c:	460c      	mov	r4, r1
 800259e:	d457      	bmi.n	8002650 <__sflush_r+0xbc>
 80025a0:	684b      	ldr	r3, [r1, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	dc04      	bgt.n	80025b0 <__sflush_r+0x1c>
 80025a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	dc01      	bgt.n	80025b0 <__sflush_r+0x1c>
 80025ac:	2000      	movs	r0, #0
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d0fa      	beq.n	80025ac <__sflush_r+0x18>
 80025b6:	2300      	movs	r3, #0
 80025b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025bc:	682f      	ldr	r7, [r5, #0]
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	d032      	beq.n	8002628 <__sflush_r+0x94>
 80025c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	075a      	lsls	r2, r3, #29
 80025c8:	d505      	bpl.n	80025d6 <__sflush_r+0x42>
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	1ac0      	subs	r0, r0, r3
 80025ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025d0:	b10b      	cbz	r3, 80025d6 <__sflush_r+0x42>
 80025d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d4:	1ac0      	subs	r0, r0, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	4602      	mov	r2, r0
 80025da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025dc:	6a21      	ldr	r1, [r4, #32]
 80025de:	4628      	mov	r0, r5
 80025e0:	47b0      	blx	r6
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	d106      	bne.n	80025f6 <__sflush_r+0x62>
 80025e8:	6829      	ldr	r1, [r5, #0]
 80025ea:	291d      	cmp	r1, #29
 80025ec:	d82c      	bhi.n	8002648 <__sflush_r+0xb4>
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <__sflush_r+0x100>)
 80025f0:	40ca      	lsrs	r2, r1
 80025f2:	07d6      	lsls	r6, r2, #31
 80025f4:	d528      	bpl.n	8002648 <__sflush_r+0xb4>
 80025f6:	2200      	movs	r2, #0
 80025f8:	6062      	str	r2, [r4, #4]
 80025fa:	04d9      	lsls	r1, r3, #19
 80025fc:	6922      	ldr	r2, [r4, #16]
 80025fe:	6022      	str	r2, [r4, #0]
 8002600:	d504      	bpl.n	800260c <__sflush_r+0x78>
 8002602:	1c42      	adds	r2, r0, #1
 8002604:	d101      	bne.n	800260a <__sflush_r+0x76>
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	b903      	cbnz	r3, 800260c <__sflush_r+0x78>
 800260a:	6560      	str	r0, [r4, #84]	; 0x54
 800260c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800260e:	602f      	str	r7, [r5, #0]
 8002610:	2900      	cmp	r1, #0
 8002612:	d0cb      	beq.n	80025ac <__sflush_r+0x18>
 8002614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002618:	4299      	cmp	r1, r3
 800261a:	d002      	beq.n	8002622 <__sflush_r+0x8e>
 800261c:	4628      	mov	r0, r5
 800261e:	f7ff fd7d 	bl	800211c <_free_r>
 8002622:	2000      	movs	r0, #0
 8002624:	6360      	str	r0, [r4, #52]	; 0x34
 8002626:	e7c2      	b.n	80025ae <__sflush_r+0x1a>
 8002628:	6a21      	ldr	r1, [r4, #32]
 800262a:	2301      	movs	r3, #1
 800262c:	4628      	mov	r0, r5
 800262e:	47b0      	blx	r6
 8002630:	1c41      	adds	r1, r0, #1
 8002632:	d1c7      	bne.n	80025c4 <__sflush_r+0x30>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0c4      	beq.n	80025c4 <__sflush_r+0x30>
 800263a:	2b1d      	cmp	r3, #29
 800263c:	d001      	beq.n	8002642 <__sflush_r+0xae>
 800263e:	2b16      	cmp	r3, #22
 8002640:	d101      	bne.n	8002646 <__sflush_r+0xb2>
 8002642:	602f      	str	r7, [r5, #0]
 8002644:	e7b2      	b.n	80025ac <__sflush_r+0x18>
 8002646:	89a3      	ldrh	r3, [r4, #12]
 8002648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264c:	81a3      	strh	r3, [r4, #12]
 800264e:	e7ae      	b.n	80025ae <__sflush_r+0x1a>
 8002650:	690f      	ldr	r7, [r1, #16]
 8002652:	2f00      	cmp	r7, #0
 8002654:	d0aa      	beq.n	80025ac <__sflush_r+0x18>
 8002656:	0793      	lsls	r3, r2, #30
 8002658:	680e      	ldr	r6, [r1, #0]
 800265a:	bf08      	it	eq
 800265c:	694b      	ldreq	r3, [r1, #20]
 800265e:	600f      	str	r7, [r1, #0]
 8002660:	bf18      	it	ne
 8002662:	2300      	movne	r3, #0
 8002664:	1bf6      	subs	r6, r6, r7
 8002666:	608b      	str	r3, [r1, #8]
 8002668:	2e00      	cmp	r6, #0
 800266a:	dd9f      	ble.n	80025ac <__sflush_r+0x18>
 800266c:	6a21      	ldr	r1, [r4, #32]
 800266e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002672:	4633      	mov	r3, r6
 8002674:	463a      	mov	r2, r7
 8002676:	4628      	mov	r0, r5
 8002678:	47e0      	blx	ip
 800267a:	2800      	cmp	r0, #0
 800267c:	dc06      	bgt.n	800268c <__sflush_r+0xf8>
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002684:	81a3      	strh	r3, [r4, #12]
 8002686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800268a:	e790      	b.n	80025ae <__sflush_r+0x1a>
 800268c:	4407      	add	r7, r0
 800268e:	1a36      	subs	r6, r6, r0
 8002690:	e7ea      	b.n	8002668 <__sflush_r+0xd4>
 8002692:	bf00      	nop
 8002694:	20400001 	.word	0x20400001

08002698 <_fflush_r>:
 8002698:	b538      	push	{r3, r4, r5, lr}
 800269a:	690b      	ldr	r3, [r1, #16]
 800269c:	4605      	mov	r5, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	b913      	cbnz	r3, 80026a8 <_fflush_r+0x10>
 80026a2:	2500      	movs	r5, #0
 80026a4:	4628      	mov	r0, r5
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	b118      	cbz	r0, 80026b2 <_fflush_r+0x1a>
 80026aa:	6983      	ldr	r3, [r0, #24]
 80026ac:	b90b      	cbnz	r3, 80026b2 <_fflush_r+0x1a>
 80026ae:	f000 f887 	bl	80027c0 <__sinit>
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <_fflush_r+0x6c>)
 80026b4:	429c      	cmp	r4, r3
 80026b6:	d11b      	bne.n	80026f0 <_fflush_r+0x58>
 80026b8:	686c      	ldr	r4, [r5, #4]
 80026ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ef      	beq.n	80026a2 <_fflush_r+0xa>
 80026c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026c4:	07d0      	lsls	r0, r2, #31
 80026c6:	d404      	bmi.n	80026d2 <_fflush_r+0x3a>
 80026c8:	0599      	lsls	r1, r3, #22
 80026ca:	d402      	bmi.n	80026d2 <_fflush_r+0x3a>
 80026cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ce:	f000 f915 	bl	80028fc <__retarget_lock_acquire_recursive>
 80026d2:	4628      	mov	r0, r5
 80026d4:	4621      	mov	r1, r4
 80026d6:	f7ff ff5d 	bl	8002594 <__sflush_r>
 80026da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026dc:	07da      	lsls	r2, r3, #31
 80026de:	4605      	mov	r5, r0
 80026e0:	d4e0      	bmi.n	80026a4 <_fflush_r+0xc>
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	059b      	lsls	r3, r3, #22
 80026e6:	d4dd      	bmi.n	80026a4 <_fflush_r+0xc>
 80026e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ea:	f000 f908 	bl	80028fe <__retarget_lock_release_recursive>
 80026ee:	e7d9      	b.n	80026a4 <_fflush_r+0xc>
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <_fflush_r+0x70>)
 80026f2:	429c      	cmp	r4, r3
 80026f4:	d101      	bne.n	80026fa <_fflush_r+0x62>
 80026f6:	68ac      	ldr	r4, [r5, #8]
 80026f8:	e7df      	b.n	80026ba <_fflush_r+0x22>
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <_fflush_r+0x74>)
 80026fc:	429c      	cmp	r4, r3
 80026fe:	bf08      	it	eq
 8002700:	68ec      	ldreq	r4, [r5, #12]
 8002702:	e7da      	b.n	80026ba <_fflush_r+0x22>
 8002704:	08003284 	.word	0x08003284
 8002708:	080032a4 	.word	0x080032a4
 800270c:	08003264 	.word	0x08003264

08002710 <std>:
 8002710:	2300      	movs	r3, #0
 8002712:	b510      	push	{r4, lr}
 8002714:	4604      	mov	r4, r0
 8002716:	e9c0 3300 	strd	r3, r3, [r0]
 800271a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800271e:	6083      	str	r3, [r0, #8]
 8002720:	8181      	strh	r1, [r0, #12]
 8002722:	6643      	str	r3, [r0, #100]	; 0x64
 8002724:	81c2      	strh	r2, [r0, #14]
 8002726:	6183      	str	r3, [r0, #24]
 8002728:	4619      	mov	r1, r3
 800272a:	2208      	movs	r2, #8
 800272c:	305c      	adds	r0, #92	; 0x5c
 800272e:	f7ff fced 	bl	800210c <memset>
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <std+0x38>)
 8002734:	6263      	str	r3, [r4, #36]	; 0x24
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <std+0x3c>)
 8002738:	62a3      	str	r3, [r4, #40]	; 0x28
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <std+0x40>)
 800273c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <std+0x44>)
 8002740:	6224      	str	r4, [r4, #32]
 8002742:	6323      	str	r3, [r4, #48]	; 0x30
 8002744:	bd10      	pop	{r4, pc}
 8002746:	bf00      	nop
 8002748:	08002fbd 	.word	0x08002fbd
 800274c:	08002fdf 	.word	0x08002fdf
 8002750:	08003017 	.word	0x08003017
 8002754:	0800303b 	.word	0x0800303b

08002758 <_cleanup_r>:
 8002758:	4901      	ldr	r1, [pc, #4]	; (8002760 <_cleanup_r+0x8>)
 800275a:	f000 b8af 	b.w	80028bc <_fwalk_reent>
 800275e:	bf00      	nop
 8002760:	08002699 	.word	0x08002699

08002764 <__sfmoreglue>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	2268      	movs	r2, #104	; 0x68
 8002768:	1e4d      	subs	r5, r1, #1
 800276a:	4355      	muls	r5, r2
 800276c:	460e      	mov	r6, r1
 800276e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002772:	f7ff fd3d 	bl	80021f0 <_malloc_r>
 8002776:	4604      	mov	r4, r0
 8002778:	b140      	cbz	r0, 800278c <__sfmoreglue+0x28>
 800277a:	2100      	movs	r1, #0
 800277c:	e9c0 1600 	strd	r1, r6, [r0]
 8002780:	300c      	adds	r0, #12
 8002782:	60a0      	str	r0, [r4, #8]
 8002784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002788:	f7ff fcc0 	bl	800210c <memset>
 800278c:	4620      	mov	r0, r4
 800278e:	bd70      	pop	{r4, r5, r6, pc}

08002790 <__sfp_lock_acquire>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__sfp_lock_acquire+0x8>)
 8002792:	f000 b8b3 	b.w	80028fc <__retarget_lock_acquire_recursive>
 8002796:	bf00      	nop
 8002798:	200000e1 	.word	0x200000e1

0800279c <__sfp_lock_release>:
 800279c:	4801      	ldr	r0, [pc, #4]	; (80027a4 <__sfp_lock_release+0x8>)
 800279e:	f000 b8ae 	b.w	80028fe <__retarget_lock_release_recursive>
 80027a2:	bf00      	nop
 80027a4:	200000e1 	.word	0x200000e1

080027a8 <__sinit_lock_acquire>:
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <__sinit_lock_acquire+0x8>)
 80027aa:	f000 b8a7 	b.w	80028fc <__retarget_lock_acquire_recursive>
 80027ae:	bf00      	nop
 80027b0:	200000e2 	.word	0x200000e2

080027b4 <__sinit_lock_release>:
 80027b4:	4801      	ldr	r0, [pc, #4]	; (80027bc <__sinit_lock_release+0x8>)
 80027b6:	f000 b8a2 	b.w	80028fe <__retarget_lock_release_recursive>
 80027ba:	bf00      	nop
 80027bc:	200000e2 	.word	0x200000e2

080027c0 <__sinit>:
 80027c0:	b510      	push	{r4, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	f7ff fff0 	bl	80027a8 <__sinit_lock_acquire>
 80027c8:	69a3      	ldr	r3, [r4, #24]
 80027ca:	b11b      	cbz	r3, 80027d4 <__sinit+0x14>
 80027cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d0:	f7ff bff0 	b.w	80027b4 <__sinit_lock_release>
 80027d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027d8:	6523      	str	r3, [r4, #80]	; 0x50
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <__sinit+0x68>)
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <__sinit+0x6c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80027e2:	42a3      	cmp	r3, r4
 80027e4:	bf04      	itt	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	61a3      	streq	r3, [r4, #24]
 80027ea:	4620      	mov	r0, r4
 80027ec:	f000 f820 	bl	8002830 <__sfp>
 80027f0:	6060      	str	r0, [r4, #4]
 80027f2:	4620      	mov	r0, r4
 80027f4:	f000 f81c 	bl	8002830 <__sfp>
 80027f8:	60a0      	str	r0, [r4, #8]
 80027fa:	4620      	mov	r0, r4
 80027fc:	f000 f818 	bl	8002830 <__sfp>
 8002800:	2200      	movs	r2, #0
 8002802:	60e0      	str	r0, [r4, #12]
 8002804:	2104      	movs	r1, #4
 8002806:	6860      	ldr	r0, [r4, #4]
 8002808:	f7ff ff82 	bl	8002710 <std>
 800280c:	68a0      	ldr	r0, [r4, #8]
 800280e:	2201      	movs	r2, #1
 8002810:	2109      	movs	r1, #9
 8002812:	f7ff ff7d 	bl	8002710 <std>
 8002816:	68e0      	ldr	r0, [r4, #12]
 8002818:	2202      	movs	r2, #2
 800281a:	2112      	movs	r1, #18
 800281c:	f7ff ff78 	bl	8002710 <std>
 8002820:	2301      	movs	r3, #1
 8002822:	61a3      	str	r3, [r4, #24]
 8002824:	e7d2      	b.n	80027cc <__sinit+0xc>
 8002826:	bf00      	nop
 8002828:	08003260 	.word	0x08003260
 800282c:	08002759 	.word	0x08002759

08002830 <__sfp>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	4607      	mov	r7, r0
 8002834:	f7ff ffac 	bl	8002790 <__sfp_lock_acquire>
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <__sfp+0x84>)
 800283a:	681e      	ldr	r6, [r3, #0]
 800283c:	69b3      	ldr	r3, [r6, #24]
 800283e:	b913      	cbnz	r3, 8002846 <__sfp+0x16>
 8002840:	4630      	mov	r0, r6
 8002842:	f7ff ffbd 	bl	80027c0 <__sinit>
 8002846:	3648      	adds	r6, #72	; 0x48
 8002848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	d503      	bpl.n	8002858 <__sfp+0x28>
 8002850:	6833      	ldr	r3, [r6, #0]
 8002852:	b30b      	cbz	r3, 8002898 <__sfp+0x68>
 8002854:	6836      	ldr	r6, [r6, #0]
 8002856:	e7f7      	b.n	8002848 <__sfp+0x18>
 8002858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800285c:	b9d5      	cbnz	r5, 8002894 <__sfp+0x64>
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <__sfp+0x88>)
 8002860:	60e3      	str	r3, [r4, #12]
 8002862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002866:	6665      	str	r5, [r4, #100]	; 0x64
 8002868:	f000 f847 	bl	80028fa <__retarget_lock_init_recursive>
 800286c:	f7ff ff96 	bl	800279c <__sfp_lock_release>
 8002870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002878:	6025      	str	r5, [r4, #0]
 800287a:	61a5      	str	r5, [r4, #24]
 800287c:	2208      	movs	r2, #8
 800287e:	4629      	mov	r1, r5
 8002880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002884:	f7ff fc42 	bl	800210c <memset>
 8002888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800288c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002890:	4620      	mov	r0, r4
 8002892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002894:	3468      	adds	r4, #104	; 0x68
 8002896:	e7d9      	b.n	800284c <__sfp+0x1c>
 8002898:	2104      	movs	r1, #4
 800289a:	4638      	mov	r0, r7
 800289c:	f7ff ff62 	bl	8002764 <__sfmoreglue>
 80028a0:	4604      	mov	r4, r0
 80028a2:	6030      	str	r0, [r6, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1d5      	bne.n	8002854 <__sfp+0x24>
 80028a8:	f7ff ff78 	bl	800279c <__sfp_lock_release>
 80028ac:	230c      	movs	r3, #12
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	e7ee      	b.n	8002890 <__sfp+0x60>
 80028b2:	bf00      	nop
 80028b4:	08003260 	.word	0x08003260
 80028b8:	ffff0001 	.word	0xffff0001

080028bc <_fwalk_reent>:
 80028bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028c0:	4606      	mov	r6, r0
 80028c2:	4688      	mov	r8, r1
 80028c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028c8:	2700      	movs	r7, #0
 80028ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028ce:	f1b9 0901 	subs.w	r9, r9, #1
 80028d2:	d505      	bpl.n	80028e0 <_fwalk_reent+0x24>
 80028d4:	6824      	ldr	r4, [r4, #0]
 80028d6:	2c00      	cmp	r4, #0
 80028d8:	d1f7      	bne.n	80028ca <_fwalk_reent+0xe>
 80028da:	4638      	mov	r0, r7
 80028dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028e0:	89ab      	ldrh	r3, [r5, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d907      	bls.n	80028f6 <_fwalk_reent+0x3a>
 80028e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028ea:	3301      	adds	r3, #1
 80028ec:	d003      	beq.n	80028f6 <_fwalk_reent+0x3a>
 80028ee:	4629      	mov	r1, r5
 80028f0:	4630      	mov	r0, r6
 80028f2:	47c0      	blx	r8
 80028f4:	4307      	orrs	r7, r0
 80028f6:	3568      	adds	r5, #104	; 0x68
 80028f8:	e7e9      	b.n	80028ce <_fwalk_reent+0x12>

080028fa <__retarget_lock_init_recursive>:
 80028fa:	4770      	bx	lr

080028fc <__retarget_lock_acquire_recursive>:
 80028fc:	4770      	bx	lr

080028fe <__retarget_lock_release_recursive>:
 80028fe:	4770      	bx	lr

08002900 <__swhatbuf_r>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	460e      	mov	r6, r1
 8002904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002908:	2900      	cmp	r1, #0
 800290a:	b096      	sub	sp, #88	; 0x58
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	da08      	bge.n	8002924 <__swhatbuf_r+0x24>
 8002912:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	061a      	lsls	r2, r3, #24
 800291c:	d410      	bmi.n	8002940 <__swhatbuf_r+0x40>
 800291e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002922:	e00e      	b.n	8002942 <__swhatbuf_r+0x42>
 8002924:	466a      	mov	r2, sp
 8002926:	f000 fbaf 	bl	8003088 <_fstat_r>
 800292a:	2800      	cmp	r0, #0
 800292c:	dbf1      	blt.n	8002912 <__swhatbuf_r+0x12>
 800292e:	9a01      	ldr	r2, [sp, #4]
 8002930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002938:	425a      	negs	r2, r3
 800293a:	415a      	adcs	r2, r3
 800293c:	602a      	str	r2, [r5, #0]
 800293e:	e7ee      	b.n	800291e <__swhatbuf_r+0x1e>
 8002940:	2340      	movs	r3, #64	; 0x40
 8002942:	2000      	movs	r0, #0
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	b016      	add	sp, #88	; 0x58
 8002948:	bd70      	pop	{r4, r5, r6, pc}
	...

0800294c <__smakebuf_r>:
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002950:	079d      	lsls	r5, r3, #30
 8002952:	4606      	mov	r6, r0
 8002954:	460c      	mov	r4, r1
 8002956:	d507      	bpl.n	8002968 <__smakebuf_r+0x1c>
 8002958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	6123      	str	r3, [r4, #16]
 8002960:	2301      	movs	r3, #1
 8002962:	6163      	str	r3, [r4, #20]
 8002964:	b002      	add	sp, #8
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	ab01      	add	r3, sp, #4
 800296a:	466a      	mov	r2, sp
 800296c:	f7ff ffc8 	bl	8002900 <__swhatbuf_r>
 8002970:	9900      	ldr	r1, [sp, #0]
 8002972:	4605      	mov	r5, r0
 8002974:	4630      	mov	r0, r6
 8002976:	f7ff fc3b 	bl	80021f0 <_malloc_r>
 800297a:	b948      	cbnz	r0, 8002990 <__smakebuf_r+0x44>
 800297c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002980:	059a      	lsls	r2, r3, #22
 8002982:	d4ef      	bmi.n	8002964 <__smakebuf_r+0x18>
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	81a3      	strh	r3, [r4, #12]
 800298e:	e7e3      	b.n	8002958 <__smakebuf_r+0xc>
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <__smakebuf_r+0x7c>)
 8002992:	62b3      	str	r3, [r6, #40]	; 0x28
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	6020      	str	r0, [r4, #0]
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	81a3      	strh	r3, [r4, #12]
 800299e:	9b00      	ldr	r3, [sp, #0]
 80029a0:	6163      	str	r3, [r4, #20]
 80029a2:	9b01      	ldr	r3, [sp, #4]
 80029a4:	6120      	str	r0, [r4, #16]
 80029a6:	b15b      	cbz	r3, 80029c0 <__smakebuf_r+0x74>
 80029a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029ac:	4630      	mov	r0, r6
 80029ae:	f000 fb7d 	bl	80030ac <_isatty_r>
 80029b2:	b128      	cbz	r0, 80029c0 <__smakebuf_r+0x74>
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	89a0      	ldrh	r0, [r4, #12]
 80029c2:	4305      	orrs	r5, r0
 80029c4:	81a5      	strh	r5, [r4, #12]
 80029c6:	e7cd      	b.n	8002964 <__smakebuf_r+0x18>
 80029c8:	08002759 	.word	0x08002759

080029cc <__malloc_lock>:
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <__malloc_lock+0x8>)
 80029ce:	f7ff bf95 	b.w	80028fc <__retarget_lock_acquire_recursive>
 80029d2:	bf00      	nop
 80029d4:	200000e0 	.word	0x200000e0

080029d8 <__malloc_unlock>:
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <__malloc_unlock+0x8>)
 80029da:	f7ff bf90 	b.w	80028fe <__retarget_lock_release_recursive>
 80029de:	bf00      	nop
 80029e0:	200000e0 	.word	0x200000e0

080029e4 <__sfputc_r>:
 80029e4:	6893      	ldr	r3, [r2, #8]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	b410      	push	{r4}
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	da07      	bge.n	8002a00 <__sfputc_r+0x1c>
 80029f0:	6994      	ldr	r4, [r2, #24]
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	db01      	blt.n	80029fa <__sfputc_r+0x16>
 80029f6:	290a      	cmp	r1, #10
 80029f8:	d102      	bne.n	8002a00 <__sfputc_r+0x1c>
 80029fa:	bc10      	pop	{r4}
 80029fc:	f7ff bd0a 	b.w	8002414 <__swbuf_r>
 8002a00:	6813      	ldr	r3, [r2, #0]
 8002a02:	1c58      	adds	r0, r3, #1
 8002a04:	6010      	str	r0, [r2, #0]
 8002a06:	7019      	strb	r1, [r3, #0]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	bc10      	pop	{r4}
 8002a0c:	4770      	bx	lr

08002a0e <__sfputs_r>:
 8002a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a10:	4606      	mov	r6, r0
 8002a12:	460f      	mov	r7, r1
 8002a14:	4614      	mov	r4, r2
 8002a16:	18d5      	adds	r5, r2, r3
 8002a18:	42ac      	cmp	r4, r5
 8002a1a:	d101      	bne.n	8002a20 <__sfputs_r+0x12>
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e007      	b.n	8002a30 <__sfputs_r+0x22>
 8002a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a24:	463a      	mov	r2, r7
 8002a26:	4630      	mov	r0, r6
 8002a28:	f7ff ffdc 	bl	80029e4 <__sfputc_r>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d1f3      	bne.n	8002a18 <__sfputs_r+0xa>
 8002a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a34 <_vfiprintf_r>:
 8002a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a38:	460d      	mov	r5, r1
 8002a3a:	b09d      	sub	sp, #116	; 0x74
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	4698      	mov	r8, r3
 8002a40:	4606      	mov	r6, r0
 8002a42:	b118      	cbz	r0, 8002a4c <_vfiprintf_r+0x18>
 8002a44:	6983      	ldr	r3, [r0, #24]
 8002a46:	b90b      	cbnz	r3, 8002a4c <_vfiprintf_r+0x18>
 8002a48:	f7ff feba 	bl	80027c0 <__sinit>
 8002a4c:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <_vfiprintf_r+0x240>)
 8002a4e:	429d      	cmp	r5, r3
 8002a50:	d11b      	bne.n	8002a8a <_vfiprintf_r+0x56>
 8002a52:	6875      	ldr	r5, [r6, #4]
 8002a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a56:	07d9      	lsls	r1, r3, #31
 8002a58:	d405      	bmi.n	8002a66 <_vfiprintf_r+0x32>
 8002a5a:	89ab      	ldrh	r3, [r5, #12]
 8002a5c:	059a      	lsls	r2, r3, #22
 8002a5e:	d402      	bmi.n	8002a66 <_vfiprintf_r+0x32>
 8002a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a62:	f7ff ff4b 	bl	80028fc <__retarget_lock_acquire_recursive>
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	d501      	bpl.n	8002a70 <_vfiprintf_r+0x3c>
 8002a6c:	692b      	ldr	r3, [r5, #16]
 8002a6e:	b9eb      	cbnz	r3, 8002aac <_vfiprintf_r+0x78>
 8002a70:	4629      	mov	r1, r5
 8002a72:	4630      	mov	r0, r6
 8002a74:	f7ff fd20 	bl	80024b8 <__swsetup_r>
 8002a78:	b1c0      	cbz	r0, 8002aac <_vfiprintf_r+0x78>
 8002a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a7c:	07dc      	lsls	r4, r3, #31
 8002a7e:	d50e      	bpl.n	8002a9e <_vfiprintf_r+0x6a>
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a84:	b01d      	add	sp, #116	; 0x74
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <_vfiprintf_r+0x244>)
 8002a8c:	429d      	cmp	r5, r3
 8002a8e:	d101      	bne.n	8002a94 <_vfiprintf_r+0x60>
 8002a90:	68b5      	ldr	r5, [r6, #8]
 8002a92:	e7df      	b.n	8002a54 <_vfiprintf_r+0x20>
 8002a94:	4b79      	ldr	r3, [pc, #484]	; (8002c7c <_vfiprintf_r+0x248>)
 8002a96:	429d      	cmp	r5, r3
 8002a98:	bf08      	it	eq
 8002a9a:	68f5      	ldreq	r5, [r6, #12]
 8002a9c:	e7da      	b.n	8002a54 <_vfiprintf_r+0x20>
 8002a9e:	89ab      	ldrh	r3, [r5, #12]
 8002aa0:	0598      	lsls	r0, r3, #22
 8002aa2:	d4ed      	bmi.n	8002a80 <_vfiprintf_r+0x4c>
 8002aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aa6:	f7ff ff2a 	bl	80028fe <__retarget_lock_release_recursive>
 8002aaa:	e7e9      	b.n	8002a80 <_vfiprintf_r+0x4c>
 8002aac:	2300      	movs	r3, #0
 8002aae:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aba:	2330      	movs	r3, #48	; 0x30
 8002abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002c80 <_vfiprintf_r+0x24c>
 8002ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac4:	f04f 0901 	mov.w	r9, #1
 8002ac8:	4623      	mov	r3, r4
 8002aca:	469a      	mov	sl, r3
 8002acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad0:	b10a      	cbz	r2, 8002ad6 <_vfiprintf_r+0xa2>
 8002ad2:	2a25      	cmp	r2, #37	; 0x25
 8002ad4:	d1f9      	bne.n	8002aca <_vfiprintf_r+0x96>
 8002ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8002ada:	d00b      	beq.n	8002af4 <_vfiprintf_r+0xc0>
 8002adc:	465b      	mov	r3, fp
 8002ade:	4622      	mov	r2, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f7ff ff93 	bl	8002a0e <__sfputs_r>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	f000 80aa 	beq.w	8002c42 <_vfiprintf_r+0x20e>
 8002aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002af0:	445a      	add	r2, fp
 8002af2:	9209      	str	r2, [sp, #36]	; 0x24
 8002af4:	f89a 3000 	ldrb.w	r3, [sl]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a2 	beq.w	8002c42 <_vfiprintf_r+0x20e>
 8002afe:	2300      	movs	r3, #0
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b08:	f10a 0a01 	add.w	sl, sl, #1
 8002b0c:	9304      	str	r3, [sp, #16]
 8002b0e:	9307      	str	r3, [sp, #28]
 8002b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b14:	931a      	str	r3, [sp, #104]	; 0x68
 8002b16:	4654      	mov	r4, sl
 8002b18:	2205      	movs	r2, #5
 8002b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b1e:	4858      	ldr	r0, [pc, #352]	; (8002c80 <_vfiprintf_r+0x24c>)
 8002b20:	f7fd fb66 	bl	80001f0 <memchr>
 8002b24:	9a04      	ldr	r2, [sp, #16]
 8002b26:	b9d8      	cbnz	r0, 8002b60 <_vfiprintf_r+0x12c>
 8002b28:	06d1      	lsls	r1, r2, #27
 8002b2a:	bf44      	itt	mi
 8002b2c:	2320      	movmi	r3, #32
 8002b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b32:	0713      	lsls	r3, r2, #28
 8002b34:	bf44      	itt	mi
 8002b36:	232b      	movmi	r3, #43	; 0x2b
 8002b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b40:	2b2a      	cmp	r3, #42	; 0x2a
 8002b42:	d015      	beq.n	8002b70 <_vfiprintf_r+0x13c>
 8002b44:	9a07      	ldr	r2, [sp, #28]
 8002b46:	4654      	mov	r4, sl
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f04f 0c0a 	mov.w	ip, #10
 8002b4e:	4621      	mov	r1, r4
 8002b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b54:	3b30      	subs	r3, #48	; 0x30
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	d94e      	bls.n	8002bf8 <_vfiprintf_r+0x1c4>
 8002b5a:	b1b0      	cbz	r0, 8002b8a <_vfiprintf_r+0x156>
 8002b5c:	9207      	str	r2, [sp, #28]
 8002b5e:	e014      	b.n	8002b8a <_vfiprintf_r+0x156>
 8002b60:	eba0 0308 	sub.w	r3, r0, r8
 8002b64:	fa09 f303 	lsl.w	r3, r9, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	9304      	str	r3, [sp, #16]
 8002b6c:	46a2      	mov	sl, r4
 8002b6e:	e7d2      	b.n	8002b16 <_vfiprintf_r+0xe2>
 8002b70:	9b03      	ldr	r3, [sp, #12]
 8002b72:	1d19      	adds	r1, r3, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	9103      	str	r1, [sp, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bfbb      	ittet	lt
 8002b7c:	425b      	neglt	r3, r3
 8002b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b82:	9307      	strge	r3, [sp, #28]
 8002b84:	9307      	strlt	r3, [sp, #28]
 8002b86:	bfb8      	it	lt
 8002b88:	9204      	strlt	r2, [sp, #16]
 8002b8a:	7823      	ldrb	r3, [r4, #0]
 8002b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b8e:	d10c      	bne.n	8002baa <_vfiprintf_r+0x176>
 8002b90:	7863      	ldrb	r3, [r4, #1]
 8002b92:	2b2a      	cmp	r3, #42	; 0x2a
 8002b94:	d135      	bne.n	8002c02 <_vfiprintf_r+0x1ce>
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9203      	str	r2, [sp, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bfb8      	it	lt
 8002ba2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ba6:	3402      	adds	r4, #2
 8002ba8:	9305      	str	r3, [sp, #20]
 8002baa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c84 <_vfiprintf_r+0x250>
 8002bae:	7821      	ldrb	r1, [r4, #0]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4650      	mov	r0, sl
 8002bb4:	f7fd fb1c 	bl	80001f0 <memchr>
 8002bb8:	b140      	cbz	r0, 8002bcc <_vfiprintf_r+0x198>
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	eba0 000a 	sub.w	r0, r0, sl
 8002bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc4:	9b04      	ldr	r3, [sp, #16]
 8002bc6:	4303      	orrs	r3, r0
 8002bc8:	3401      	adds	r4, #1
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd0:	482d      	ldr	r0, [pc, #180]	; (8002c88 <_vfiprintf_r+0x254>)
 8002bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd6:	2206      	movs	r2, #6
 8002bd8:	f7fd fb0a 	bl	80001f0 <memchr>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d03f      	beq.n	8002c60 <_vfiprintf_r+0x22c>
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <_vfiprintf_r+0x258>)
 8002be2:	bb1b      	cbnz	r3, 8002c2c <_vfiprintf_r+0x1f8>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	3307      	adds	r3, #7
 8002be8:	f023 0307 	bic.w	r3, r3, #7
 8002bec:	3308      	adds	r3, #8
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf2:	443b      	add	r3, r7
 8002bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf6:	e767      	b.n	8002ac8 <_vfiprintf_r+0x94>
 8002bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e7a5      	b.n	8002b4e <_vfiprintf_r+0x11a>
 8002c02:	2300      	movs	r3, #0
 8002c04:	3401      	adds	r4, #1
 8002c06:	9305      	str	r3, [sp, #20]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0c0a 	mov.w	ip, #10
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c14:	3a30      	subs	r2, #48	; 0x30
 8002c16:	2a09      	cmp	r2, #9
 8002c18:	d903      	bls.n	8002c22 <_vfiprintf_r+0x1ee>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0c5      	beq.n	8002baa <_vfiprintf_r+0x176>
 8002c1e:	9105      	str	r1, [sp, #20]
 8002c20:	e7c3      	b.n	8002baa <_vfiprintf_r+0x176>
 8002c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c26:	4604      	mov	r4, r0
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e7f0      	b.n	8002c0e <_vfiprintf_r+0x1da>
 8002c2c:	ab03      	add	r3, sp, #12
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <_vfiprintf_r+0x25c>)
 8002c34:	a904      	add	r1, sp, #16
 8002c36:	4630      	mov	r0, r6
 8002c38:	f3af 8000 	nop.w
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	1c78      	adds	r0, r7, #1
 8002c40:	d1d6      	bne.n	8002bf0 <_vfiprintf_r+0x1bc>
 8002c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c44:	07d9      	lsls	r1, r3, #31
 8002c46:	d405      	bmi.n	8002c54 <_vfiprintf_r+0x220>
 8002c48:	89ab      	ldrh	r3, [r5, #12]
 8002c4a:	059a      	lsls	r2, r3, #22
 8002c4c:	d402      	bmi.n	8002c54 <_vfiprintf_r+0x220>
 8002c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c50:	f7ff fe55 	bl	80028fe <__retarget_lock_release_recursive>
 8002c54:	89ab      	ldrh	r3, [r5, #12]
 8002c56:	065b      	lsls	r3, r3, #25
 8002c58:	f53f af12 	bmi.w	8002a80 <_vfiprintf_r+0x4c>
 8002c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c5e:	e711      	b.n	8002a84 <_vfiprintf_r+0x50>
 8002c60:	ab03      	add	r3, sp, #12
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	462a      	mov	r2, r5
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <_vfiprintf_r+0x25c>)
 8002c68:	a904      	add	r1, sp, #16
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f000 f880 	bl	8002d70 <_printf_i>
 8002c70:	e7e4      	b.n	8002c3c <_vfiprintf_r+0x208>
 8002c72:	bf00      	nop
 8002c74:	08003284 	.word	0x08003284
 8002c78:	080032a4 	.word	0x080032a4
 8002c7c:	08003264 	.word	0x08003264
 8002c80:	080032c4 	.word	0x080032c4
 8002c84:	080032ca 	.word	0x080032ca
 8002c88:	080032ce 	.word	0x080032ce
 8002c8c:	00000000 	.word	0x00000000
 8002c90:	08002a0f 	.word	0x08002a0f

08002c94 <_printf_common>:
 8002c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c98:	4616      	mov	r6, r2
 8002c9a:	4699      	mov	r9, r3
 8002c9c:	688a      	ldr	r2, [r1, #8]
 8002c9e:	690b      	ldr	r3, [r1, #16]
 8002ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bfb8      	it	lt
 8002ca8:	4613      	movlt	r3, r2
 8002caa:	6033      	str	r3, [r6, #0]
 8002cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cb0:	4607      	mov	r7, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	b10a      	cbz	r2, 8002cba <_printf_common+0x26>
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6033      	str	r3, [r6, #0]
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	0699      	lsls	r1, r3, #26
 8002cbe:	bf42      	ittt	mi
 8002cc0:	6833      	ldrmi	r3, [r6, #0]
 8002cc2:	3302      	addmi	r3, #2
 8002cc4:	6033      	strmi	r3, [r6, #0]
 8002cc6:	6825      	ldr	r5, [r4, #0]
 8002cc8:	f015 0506 	ands.w	r5, r5, #6
 8002ccc:	d106      	bne.n	8002cdc <_printf_common+0x48>
 8002cce:	f104 0a19 	add.w	sl, r4, #25
 8002cd2:	68e3      	ldr	r3, [r4, #12]
 8002cd4:	6832      	ldr	r2, [r6, #0]
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	dc26      	bgt.n	8002d2a <_printf_common+0x96>
 8002cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ce0:	1e13      	subs	r3, r2, #0
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	bf18      	it	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	0692      	lsls	r2, r2, #26
 8002cea:	d42b      	bmi.n	8002d44 <_printf_common+0xb0>
 8002cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	47c0      	blx	r8
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d01e      	beq.n	8002d38 <_printf_common+0xa4>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	68e5      	ldr	r5, [r4, #12]
 8002cfe:	6832      	ldr	r2, [r6, #0]
 8002d00:	f003 0306 	and.w	r3, r3, #6
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	bf08      	it	eq
 8002d08:	1aad      	subeq	r5, r5, r2
 8002d0a:	68a3      	ldr	r3, [r4, #8]
 8002d0c:	6922      	ldr	r2, [r4, #16]
 8002d0e:	bf0c      	ite	eq
 8002d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d14:	2500      	movne	r5, #0
 8002d16:	4293      	cmp	r3, r2
 8002d18:	bfc4      	itt	gt
 8002d1a:	1a9b      	subgt	r3, r3, r2
 8002d1c:	18ed      	addgt	r5, r5, r3
 8002d1e:	2600      	movs	r6, #0
 8002d20:	341a      	adds	r4, #26
 8002d22:	42b5      	cmp	r5, r6
 8002d24:	d11a      	bne.n	8002d5c <_printf_common+0xc8>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e008      	b.n	8002d3c <_printf_common+0xa8>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4652      	mov	r2, sl
 8002d2e:	4649      	mov	r1, r9
 8002d30:	4638      	mov	r0, r7
 8002d32:	47c0      	blx	r8
 8002d34:	3001      	adds	r0, #1
 8002d36:	d103      	bne.n	8002d40 <_printf_common+0xac>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7c6      	b.n	8002cd2 <_printf_common+0x3e>
 8002d44:	18e1      	adds	r1, r4, r3
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	2030      	movs	r0, #48	; 0x30
 8002d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d4e:	4422      	add	r2, r4
 8002d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d58:	3302      	adds	r3, #2
 8002d5a:	e7c7      	b.n	8002cec <_printf_common+0x58>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4622      	mov	r2, r4
 8002d60:	4649      	mov	r1, r9
 8002d62:	4638      	mov	r0, r7
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d0e6      	beq.n	8002d38 <_printf_common+0xa4>
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7d9      	b.n	8002d22 <_printf_common+0x8e>
	...

08002d70 <_printf_i>:
 8002d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	7e0f      	ldrb	r7, [r1, #24]
 8002d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d78:	2f78      	cmp	r7, #120	; 0x78
 8002d7a:	4691      	mov	r9, r2
 8002d7c:	4680      	mov	r8, r0
 8002d7e:	460c      	mov	r4, r1
 8002d80:	469a      	mov	sl, r3
 8002d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d86:	d807      	bhi.n	8002d98 <_printf_i+0x28>
 8002d88:	2f62      	cmp	r7, #98	; 0x62
 8002d8a:	d80a      	bhi.n	8002da2 <_printf_i+0x32>
 8002d8c:	2f00      	cmp	r7, #0
 8002d8e:	f000 80d8 	beq.w	8002f42 <_printf_i+0x1d2>
 8002d92:	2f58      	cmp	r7, #88	; 0x58
 8002d94:	f000 80a3 	beq.w	8002ede <_printf_i+0x16e>
 8002d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002da0:	e03a      	b.n	8002e18 <_printf_i+0xa8>
 8002da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002da6:	2b15      	cmp	r3, #21
 8002da8:	d8f6      	bhi.n	8002d98 <_printf_i+0x28>
 8002daa:	a101      	add	r1, pc, #4	; (adr r1, 8002db0 <_printf_i+0x40>)
 8002dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e1d 	.word	0x08002e1d
 8002db8:	08002d99 	.word	0x08002d99
 8002dbc:	08002d99 	.word	0x08002d99
 8002dc0:	08002d99 	.word	0x08002d99
 8002dc4:	08002d99 	.word	0x08002d99
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002d99 	.word	0x08002d99
 8002dd0:	08002d99 	.word	0x08002d99
 8002dd4:	08002d99 	.word	0x08002d99
 8002dd8:	08002d99 	.word	0x08002d99
 8002ddc:	08002f29 	.word	0x08002f29
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002f0b 	.word	0x08002f0b
 8002de8:	08002d99 	.word	0x08002d99
 8002dec:	08002d99 	.word	0x08002d99
 8002df0:	08002f4b 	.word	0x08002f4b
 8002df4:	08002d99 	.word	0x08002d99
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002d99 	.word	0x08002d99
 8002e00:	08002d99 	.word	0x08002d99
 8002e04:	08002f13 	.word	0x08002f13
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	1d1a      	adds	r2, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	602a      	str	r2, [r5, #0]
 8002e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0a3      	b.n	8002f64 <_printf_i+0x1f4>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	6829      	ldr	r1, [r5, #0]
 8002e20:	0606      	lsls	r6, r0, #24
 8002e22:	f101 0304 	add.w	r3, r1, #4
 8002e26:	d50a      	bpl.n	8002e3e <_printf_i+0xce>
 8002e28:	680e      	ldr	r6, [r1, #0]
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	2e00      	cmp	r6, #0
 8002e2e:	da03      	bge.n	8002e38 <_printf_i+0xc8>
 8002e30:	232d      	movs	r3, #45	; 0x2d
 8002e32:	4276      	negs	r6, r6
 8002e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e38:	485e      	ldr	r0, [pc, #376]	; (8002fb4 <_printf_i+0x244>)
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	e019      	b.n	8002e72 <_printf_i+0x102>
 8002e3e:	680e      	ldr	r6, [r1, #0]
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e46:	bf18      	it	ne
 8002e48:	b236      	sxthne	r6, r6
 8002e4a:	e7ef      	b.n	8002e2c <_printf_i+0xbc>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1d19      	adds	r1, r3, #4
 8002e52:	6029      	str	r1, [r5, #0]
 8002e54:	0601      	lsls	r1, r0, #24
 8002e56:	d501      	bpl.n	8002e5c <_printf_i+0xec>
 8002e58:	681e      	ldr	r6, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <_printf_i+0xf2>
 8002e5c:	0646      	lsls	r6, r0, #25
 8002e5e:	d5fb      	bpl.n	8002e58 <_printf_i+0xe8>
 8002e60:	881e      	ldrh	r6, [r3, #0]
 8002e62:	4854      	ldr	r0, [pc, #336]	; (8002fb4 <_printf_i+0x244>)
 8002e64:	2f6f      	cmp	r7, #111	; 0x6f
 8002e66:	bf0c      	ite	eq
 8002e68:	2308      	moveq	r3, #8
 8002e6a:	230a      	movne	r3, #10
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e72:	6865      	ldr	r5, [r4, #4]
 8002e74:	60a5      	str	r5, [r4, #8]
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	bfa2      	ittt	ge
 8002e7a:	6821      	ldrge	r1, [r4, #0]
 8002e7c:	f021 0104 	bicge.w	r1, r1, #4
 8002e80:	6021      	strge	r1, [r4, #0]
 8002e82:	b90e      	cbnz	r6, 8002e88 <_printf_i+0x118>
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	d04d      	beq.n	8002f24 <_printf_i+0x1b4>
 8002e88:	4615      	mov	r5, r2
 8002e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8002e92:	5dc7      	ldrb	r7, [r0, r7]
 8002e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e98:	4637      	mov	r7, r6
 8002e9a:	42bb      	cmp	r3, r7
 8002e9c:	460e      	mov	r6, r1
 8002e9e:	d9f4      	bls.n	8002e8a <_printf_i+0x11a>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d10b      	bne.n	8002ebc <_printf_i+0x14c>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	07de      	lsls	r6, r3, #31
 8002ea8:	d508      	bpl.n	8002ebc <_printf_i+0x14c>
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	6861      	ldr	r1, [r4, #4]
 8002eae:	4299      	cmp	r1, r3
 8002eb0:	bfde      	ittt	le
 8002eb2:	2330      	movle	r3, #48	; 0x30
 8002eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ebc:	1b52      	subs	r2, r2, r5
 8002ebe:	6122      	str	r2, [r4, #16]
 8002ec0:	f8cd a000 	str.w	sl, [sp]
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	aa03      	add	r2, sp, #12
 8002ec8:	4621      	mov	r1, r4
 8002eca:	4640      	mov	r0, r8
 8002ecc:	f7ff fee2 	bl	8002c94 <_printf_common>
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d14c      	bne.n	8002f6e <_printf_i+0x1fe>
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	b004      	add	sp, #16
 8002eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ede:	4835      	ldr	r0, [pc, #212]	; (8002fb4 <_printf_i+0x244>)
 8002ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ee4:	6829      	ldr	r1, [r5, #0]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eec:	6029      	str	r1, [r5, #0]
 8002eee:	061d      	lsls	r5, r3, #24
 8002ef0:	d514      	bpl.n	8002f1c <_printf_i+0x1ac>
 8002ef2:	07df      	lsls	r7, r3, #31
 8002ef4:	bf44      	itt	mi
 8002ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8002efa:	6023      	strmi	r3, [r4, #0]
 8002efc:	b91e      	cbnz	r6, 8002f06 <_printf_i+0x196>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	f023 0320 	bic.w	r3, r3, #32
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	2310      	movs	r3, #16
 8002f08:	e7b0      	b.n	8002e6c <_printf_i+0xfc>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	2378      	movs	r3, #120	; 0x78
 8002f14:	4828      	ldr	r0, [pc, #160]	; (8002fb8 <_printf_i+0x248>)
 8002f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1a:	e7e3      	b.n	8002ee4 <_printf_i+0x174>
 8002f1c:	0659      	lsls	r1, r3, #25
 8002f1e:	bf48      	it	mi
 8002f20:	b2b6      	uxthmi	r6, r6
 8002f22:	e7e6      	b.n	8002ef2 <_printf_i+0x182>
 8002f24:	4615      	mov	r5, r2
 8002f26:	e7bb      	b.n	8002ea0 <_printf_i+0x130>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	6826      	ldr	r6, [r4, #0]
 8002f2c:	6961      	ldr	r1, [r4, #20]
 8002f2e:	1d18      	adds	r0, r3, #4
 8002f30:	6028      	str	r0, [r5, #0]
 8002f32:	0635      	lsls	r5, r6, #24
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	d501      	bpl.n	8002f3c <_printf_i+0x1cc>
 8002f38:	6019      	str	r1, [r3, #0]
 8002f3a:	e002      	b.n	8002f42 <_printf_i+0x1d2>
 8002f3c:	0670      	lsls	r0, r6, #25
 8002f3e:	d5fb      	bpl.n	8002f38 <_printf_i+0x1c8>
 8002f40:	8019      	strh	r1, [r3, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	6123      	str	r3, [r4, #16]
 8002f46:	4615      	mov	r5, r2
 8002f48:	e7ba      	b.n	8002ec0 <_printf_i+0x150>
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	602a      	str	r2, [r5, #0]
 8002f50:	681d      	ldr	r5, [r3, #0]
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4628      	mov	r0, r5
 8002f58:	f7fd f94a 	bl	80001f0 <memchr>
 8002f5c:	b108      	cbz	r0, 8002f62 <_printf_i+0x1f2>
 8002f5e:	1b40      	subs	r0, r0, r5
 8002f60:	6060      	str	r0, [r4, #4]
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	2300      	movs	r3, #0
 8002f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f6c:	e7a8      	b.n	8002ec0 <_printf_i+0x150>
 8002f6e:	6923      	ldr	r3, [r4, #16]
 8002f70:	462a      	mov	r2, r5
 8002f72:	4649      	mov	r1, r9
 8002f74:	4640      	mov	r0, r8
 8002f76:	47d0      	blx	sl
 8002f78:	3001      	adds	r0, #1
 8002f7a:	d0ab      	beq.n	8002ed4 <_printf_i+0x164>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	079b      	lsls	r3, r3, #30
 8002f80:	d413      	bmi.n	8002faa <_printf_i+0x23a>
 8002f82:	68e0      	ldr	r0, [r4, #12]
 8002f84:	9b03      	ldr	r3, [sp, #12]
 8002f86:	4298      	cmp	r0, r3
 8002f88:	bfb8      	it	lt
 8002f8a:	4618      	movlt	r0, r3
 8002f8c:	e7a4      	b.n	8002ed8 <_printf_i+0x168>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4632      	mov	r2, r6
 8002f92:	4649      	mov	r1, r9
 8002f94:	4640      	mov	r0, r8
 8002f96:	47d0      	blx	sl
 8002f98:	3001      	adds	r0, #1
 8002f9a:	d09b      	beq.n	8002ed4 <_printf_i+0x164>
 8002f9c:	3501      	adds	r5, #1
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	9903      	ldr	r1, [sp, #12]
 8002fa2:	1a5b      	subs	r3, r3, r1
 8002fa4:	42ab      	cmp	r3, r5
 8002fa6:	dcf2      	bgt.n	8002f8e <_printf_i+0x21e>
 8002fa8:	e7eb      	b.n	8002f82 <_printf_i+0x212>
 8002faa:	2500      	movs	r5, #0
 8002fac:	f104 0619 	add.w	r6, r4, #25
 8002fb0:	e7f5      	b.n	8002f9e <_printf_i+0x22e>
 8002fb2:	bf00      	nop
 8002fb4:	080032d5 	.word	0x080032d5
 8002fb8:	080032e6 	.word	0x080032e6

08002fbc <__sread>:
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc4:	f000 f894 	bl	80030f0 <_read_r>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	bfab      	itete	ge
 8002fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fce:	89a3      	ldrhlt	r3, [r4, #12]
 8002fd0:	181b      	addge	r3, r3, r0
 8002fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fd6:	bfac      	ite	ge
 8002fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fda:	81a3      	strhlt	r3, [r4, #12]
 8002fdc:	bd10      	pop	{r4, pc}

08002fde <__swrite>:
 8002fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	898b      	ldrh	r3, [r1, #12]
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	4605      	mov	r5, r0
 8002fea:	460c      	mov	r4, r1
 8002fec:	4616      	mov	r6, r2
 8002fee:	d505      	bpl.n	8002ffc <__swrite+0x1e>
 8002ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f000 f868 	bl	80030cc <_lseek_r>
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003006:	81a3      	strh	r3, [r4, #12]
 8003008:	4632      	mov	r2, r6
 800300a:	463b      	mov	r3, r7
 800300c:	4628      	mov	r0, r5
 800300e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003012:	f000 b817 	b.w	8003044 <_write_r>

08003016 <__sseek>:
 8003016:	b510      	push	{r4, lr}
 8003018:	460c      	mov	r4, r1
 800301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301e:	f000 f855 	bl	80030cc <_lseek_r>
 8003022:	1c43      	adds	r3, r0, #1
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	bf15      	itete	ne
 8003028:	6560      	strne	r0, [r4, #84]	; 0x54
 800302a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800302e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003032:	81a3      	strheq	r3, [r4, #12]
 8003034:	bf18      	it	ne
 8003036:	81a3      	strhne	r3, [r4, #12]
 8003038:	bd10      	pop	{r4, pc}

0800303a <__sclose>:
 800303a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303e:	f000 b813 	b.w	8003068 <_close_r>
	...

08003044 <_write_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d07      	ldr	r5, [pc, #28]	; (8003064 <_write_r+0x20>)
 8003048:	4604      	mov	r4, r0
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	2200      	movs	r2, #0
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fe fe15 	bl	8001c82 <_write>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_write_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_write_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	200000e4 	.word	0x200000e4

08003068 <_close_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d06      	ldr	r5, [pc, #24]	; (8003084 <_close_r+0x1c>)
 800306c:	2300      	movs	r3, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	f7fe fe21 	bl	8001cba <_close>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_close_r+0x1a>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_close_r+0x1a>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	200000e4 	.word	0x200000e4

08003088 <_fstat_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	; (80030a8 <_fstat_r+0x20>)
 800308c:	2300      	movs	r3, #0
 800308e:	4604      	mov	r4, r0
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	f7fe fe1b 	bl	8001cd0 <_fstat>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d102      	bne.n	80030a4 <_fstat_r+0x1c>
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	b103      	cbz	r3, 80030a4 <_fstat_r+0x1c>
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
 80030a6:	bf00      	nop
 80030a8:	200000e4 	.word	0x200000e4

080030ac <_isatty_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d06      	ldr	r5, [pc, #24]	; (80030c8 <_isatty_r+0x1c>)
 80030b0:	2300      	movs	r3, #0
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	f7fe fe19 	bl	8001cee <_isatty>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d102      	bne.n	80030c6 <_isatty_r+0x1a>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	b103      	cbz	r3, 80030c6 <_isatty_r+0x1a>
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	200000e4 	.word	0x200000e4

080030cc <_lseek_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4d07      	ldr	r5, [pc, #28]	; (80030ec <_lseek_r+0x20>)
 80030d0:	4604      	mov	r4, r0
 80030d2:	4608      	mov	r0, r1
 80030d4:	4611      	mov	r1, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	602a      	str	r2, [r5, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	f7fe fe11 	bl	8001d02 <_lseek>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_lseek_r+0x1e>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_lseek_r+0x1e>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	200000e4 	.word	0x200000e4

080030f0 <_read_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d07      	ldr	r5, [pc, #28]	; (8003110 <_read_r+0x20>)
 80030f4:	4604      	mov	r4, r0
 80030f6:	4608      	mov	r0, r1
 80030f8:	4611      	mov	r1, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	602a      	str	r2, [r5, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	f7fe fda2 	bl	8001c48 <_read>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d102      	bne.n	800310e <_read_r+0x1e>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	b103      	cbz	r3, 800310e <_read_r+0x1e>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	200000e4 	.word	0x200000e4

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
