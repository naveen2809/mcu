
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002d64  08002d64  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d64  08002d64  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000068  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035be  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ca9  00000000  00000000  0002366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00024318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000310  00000000  00000000  000246d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023b3  00000000  00000000  000249e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ce7  00000000  00000000  00026d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dd14  00000000  00000000  0002ba7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003978e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015a4  00000000  00000000  000397e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002c34 	.word	0x08002c34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002c34 	.word	0x08002c34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;								//PCF8574 I/O Expander Address
//uint8_t SlaveAddress = 0x50;								//AT24CXX EEPROM Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fc53 	bl	8001b7c <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 f92c 	bl	8001544 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f87e 	bl	80003ee <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 faa3 	bl	800083e <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	200000a4 	.word	0x200000a4

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fc33 	bl	8001b7c <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 f914 	bl	8001544 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fa9d 	bl	8000860 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fa98 	bl	8000860 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fab7 	bl	80008a8 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fab2 	bl	80008a8 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fae6 	bl	800091a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fae1 	bl	800091a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fb22 	bl	80009a6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fb1d 	bl	80009a6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 faf4 	bl	800095e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 faef 	bl	800095e <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f8d3 	bl	8001544 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fb21 	bl	80009ee <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc32 	bl	8000c1c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fb6c 	bl	8000a9a <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fcab 	bl	8000d3c <lcd_pcf8574_send_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	6852      	ldr	r2, [r2, #4]
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	6892      	ldr	r2, [r2, #8]
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7b1b      	ldrb	r3, [r3, #12]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d16a      	bne.n	80004e8 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a1a      	ldr	r2, [r3, #32]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f042 0201 	orr.w	r2, r2, #1
 8000420:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7b5b      	ldrb	r3, [r3, #13]
 8000426:	2b02      	cmp	r3, #2
 8000428:	d11c      	bne.n	8000464 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	699a      	ldr	r2, [r3, #24]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f022 0203 	bic.w	r2, r2, #3
 8000438:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	6912      	ldr	r2, [r2, #16]
 8000442:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000452:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000462:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7b5b      	ldrb	r3, [r3, #13]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d11c      	bne.n	80004a6 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f022 0203 	bic.w	r2, r2, #3
 800047a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	6912      	ldr	r2, [r2, #16]
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	699a      	ldr	r2, [r3, #24]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000494:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80004a4:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7b5b      	ldrb	r3, [r3, #13]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d11c      	bne.n	80004e8 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f022 0203 	bic.w	r2, r2, #3
 80004bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	6912      	ldr	r2, [r2, #16]
 80004c6:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	699a      	ldr	r2, [r3, #24]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80004d6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80004e6:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7d1b      	ldrb	r3, [r3, #20]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	f040 80bf 	bne.w	8000670 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7d5b      	ldrb	r3, [r3, #21]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d124      	bne.n	8000544 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000508:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	6992      	ldr	r2, [r2, #24]
 8000512:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000522:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000532:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a1a      	ldr	r2, [r3, #32]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0210 	orr.w	r2, r2, #16
 8000542:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7d5b      	ldrb	r3, [r3, #21]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d124      	bne.n	8000596 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800055a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	6992      	ldr	r2, [r2, #24]
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000574:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000584:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6a1a      	ldr	r2, [r3, #32]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0210 	orr.w	r2, r2, #16
 8000594:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7d5b      	ldrb	r3, [r3, #21]
 800059a:	2b04      	cmp	r3, #4
 800059c:	d124      	bne.n	80005e8 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005ac:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6992      	ldr	r2, [r2, #24]
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80005c6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80005d6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6a1a      	ldr	r2, [r3, #32]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f042 0210 	orr.w	r2, r2, #16
 80005e6:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7d5b      	ldrb	r3, [r3, #21]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d13f      	bne.n	8000670 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800060e:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800061e:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a1a      	ldr	r2, [r3, #32]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f022 0220 	bic.w	r2, r2, #32
 800062e:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6a1a      	ldr	r2, [r3, #32]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800063e:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800064e:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f042 0204 	orr.w	r2, r2, #4
 800065e:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f042 0210 	orr.w	r2, r2, #16
 800066e:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7f1b      	ldrb	r3, [r3, #28]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d16a      	bne.n	800074e <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000686:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7f5b      	ldrb	r3, [r3, #29]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d11c      	bne.n	80006ca <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	69da      	ldr	r2, [r3, #28]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f022 0203 	bic.w	r2, r2, #3
 800069e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	6a12      	ldr	r2, [r2, #32]
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006b8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	69da      	ldr	r2, [r3, #28]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80006c8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7f5b      	ldrb	r3, [r3, #29]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d11c      	bne.n	800070c <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69da      	ldr	r2, [r3, #28]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f022 0203 	bic.w	r2, r2, #3
 80006e0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6a12      	ldr	r2, [r2, #32]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006fa:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	69da      	ldr	r2, [r3, #28]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800070a:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7f5b      	ldrb	r3, [r3, #29]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d11c      	bne.n	800074e <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69da      	ldr	r2, [r3, #28]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0203 	bic.w	r2, r2, #3
 8000722:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	6a12      	ldr	r2, [r2, #32]
 800072c:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	69da      	ldr	r2, [r3, #28]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800073c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69da      	ldr	r2, [r3, #28]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800074c:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000754:	2b00      	cmp	r3, #0
 8000756:	d16d      	bne.n	8000834 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6a1a      	ldr	r2, [r3, #32]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000766:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800076e:	2b02      	cmp	r3, #2
 8000770:	d11c      	bne.n	80007ac <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69da      	ldr	r2, [r3, #28]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000780:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800079a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	69da      	ldr	r2, [r3, #28]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80007aa:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d11c      	bne.n	80007f0 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007c4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	69da      	ldr	r2, [r3, #28]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007de:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007ee:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d11c      	bne.n	8000834 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000808:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000822:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000832:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f042 0201 	orr.w	r2, r2, #1
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
 800086c:	4613      	mov	r3, r2
 800086e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	43d2      	mvns	r2, r2
 8000884:	401a      	ands	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	78b9      	ldrb	r1, [r7, #2]
 8000890:	78fa      	ldrb	r2, [r7, #3]
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	431a      	orrs	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
 80008b4:	4613      	mov	r3, r2
 80008b6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80008ca:	7afa      	ldrb	r2, [r7, #11]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3208      	adds	r2, #8
 80008d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d4:	7aba      	ldrb	r2, [r7, #10]
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	210f      	movs	r1, #15
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	43d2      	mvns	r2, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	7afa      	ldrb	r2, [r7, #11]
 80008e4:	4019      	ands	r1, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3208      	adds	r2, #8
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80008ee:	7afa      	ldrb	r2, [r7, #11]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3208      	adds	r2, #8
 80008f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f8:	78b9      	ldrb	r1, [r7, #2]
 80008fa:	7aba      	ldrb	r2, [r7, #10]
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	7afa      	ldrb	r2, [r7, #11]
 8000906:	4319      	orrs	r1, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3208      	adds	r2, #8
 800090c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
 8000926:	4613      	mov	r3, r2
 8000928:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	43d2      	mvns	r2, r2
 800093c:	401a      	ands	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	78b9      	ldrb	r1, [r7, #2]
 8000948:	78fa      	ldrb	r2, [r7, #3]
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	431a      	orrs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	605a      	str	r2, [r3, #4]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
 800096a:	4613      	mov	r3, r2
 800096c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	0052      	lsls	r2, r2, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	401a      	ands	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	78b9      	ldrb	r1, [r7, #2]
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	0052      	lsls	r2, r2, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	60da      	str	r2, [r3, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70fb      	strb	r3, [r7, #3]
 80009b2:	4613      	mov	r3, r2
 80009b4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	78fa      	ldrb	r2, [r7, #3]
 80009c0:	0052      	lsls	r2, r2, #1
 80009c2:	2103      	movs	r1, #3
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	78b9      	ldrb	r1, [r7, #2]
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	0052      	lsls	r2, r2, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	431a      	orrs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	609a      	str	r2, [r3, #8]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	03db      	lsls	r3, r3, #15
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10d      	bne.n	8000a56 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	69da      	ldr	r2, [r3, #28]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	039b      	lsls	r3, r3, #14
 8000a50:	431a      	orrs	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a5e:	f023 030f 	bic.w	r3, r3, #15
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	029b      	lsls	r3, r3, #10
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]

}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f043 0201 	orr.w	r2, r3, #1
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 f84c 	bl	8000b6c <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000ad4:	bf00      	nop
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 f869 	bl	8000bb0 <I2C_GetFlagStatus>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f8      	beq.n	8000ad6 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	4619      	mov	r1, r3
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f000 f86f 	bl	8000bda <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000afc:	bf00      	nop
 8000afe:	2102      	movs	r1, #2
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 f855 	bl	8000bb0 <I2C_GetFlagStatus>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f8      	beq.n	8000afe <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f874 	bl	8000bfa <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000b12:	e012      	b.n	8000b3a <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000b14:	bf00      	nop
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f849 	bl	8000bb0 <I2C_GetFlagStatus>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f8      	beq.n	8000b16 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1e9      	bne.n	8000b14 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000b40:	bf00      	nop
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f000 f833 	bl	8000bb0 <I2C_GetFlagStatus>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d1f8      	bne.n	8000b42 <I2CMasterSendData+0x86>
 8000b50:	2104      	movs	r1, #4
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f82c 	bl	8000bb0 <I2C_GetFlagStatus>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d1f1      	bne.n	8000b42 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 f815 	bl	8000b8e <I2C_SendStopBit>

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	601a      	str	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000c2c:	78fa      	ldrb	r2, [r7, #3]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	621a      	str	r2, [r3, #32]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c44:	f7ff fb24 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000c48:	2030      	movs	r0, #48	; 0x30
 8000c4a:	f000 f845 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000c4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c52:	f7ff fb1d 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000c56:	2030      	movs	r0, #48	; 0x30
 8000c58:	f000 f83e 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000c5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c60:	f7ff fb16 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000c64:	2030      	movs	r0, #48	; 0x30
 8000c66:	f000 f837 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000c6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c6e:	f7ff fb0f 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000c72:	2020      	movs	r0, #32
 8000c74:	f000 f830 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000c78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c7c:	f7ff fb08 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f000 f829 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000c86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c8a:	f7ff fb01 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c8e:	2008      	movs	r0, #8
 8000c90:	f000 f822 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000c94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c98:	f7ff fafa 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 f81b 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ca2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ca6:	f7ff faf3 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 f814 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000cb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cb4:	f7ff faec 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f000 f80d 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000cbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cc2:	f7ff fae5 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cc6:	200c      	movs	r0, #12
 8000cc8:	f000 f806 	bl	8000cd8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ccc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cd0:	f7ff fade 	bl	8000290 <delay_us>

	return;
 8000cd4:	bf00      	nop
}
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f023 030f 	bic.w	r3, r3, #15
 8000ce8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f043 030c 	orr.w	r3, r3, #12
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f043 030c 	orr.w	r3, r3, #12
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <lcd_pcf8574_send_cmd+0x5c>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <lcd_pcf8574_send_cmd+0x60>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	2204      	movs	r2, #4
 8000d26:	f7ff fec9 	bl	8000abc <I2CMasterSendData>

	return;
 8000d2a:	bf00      	nop
}
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f023 030f 	bic.w	r3, r3, #15
 8000d4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	f043 030d 	orr.w	r3, r3, #13
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	f043 0309 	orr.w	r3, r3, #9
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	f043 030d 	orr.w	r3, r3, #13
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	f043 0309 	orr.w	r3, r3, #9
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <lcd_pcf8574_send_data+0x5c>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <lcd_pcf8574_send_data+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f107 0108 	add.w	r1, r7, #8
 8000d88:	2204      	movs	r2, #4
 8000d8a:	f7ff fe97 	bl	8000abc <I2CMasterSendData>

	return;
 8000d8e:	bf00      	nop
}
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000004 	.word	0x20000004

08000da0 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff ff97 	bl	8000cd8 <lcd_pcf8574_send_cmd>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}

08000dae <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000db2:	2002      	movs	r0, #2
 8000db4:	f7ff ff90 	bl	8000cd8 <lcd_pcf8574_send_cmd>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d108      	bne.n	8000de4 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	2b27      	cmp	r3, #39	; 0x27
 8000dd6:	d802      	bhi.n	8000dde <lcd_pcf8574_set_position+0x22>
			position = col;
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e011      	b.n	8000e02 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	e00e      	b.n	8000e02 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d109      	bne.n	8000dfe <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	2b27      	cmp	r3, #39	; 0x27
 8000dee:	d803      	bhi.n	8000df8 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	3340      	adds	r3, #64	; 0x40
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e004      	b.n	8000e02 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e08:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff63 	bl	8000cd8 <lcd_pcf8574_send_cmd>

	return;
 8000e12:	bf00      	nop
}
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <RTC_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_Config_Calendar(struct RTC_Config_t *pRTCConfig)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint32_t time_value = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	uint32_t date_value = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]

	//1. Configure and Enable the RTC Clock
	//1.a Enable Write Access to the RTC Registers by enabling DBP bit in PWR_CR Register
	*pRCCPeriClkReg |= (1 << RCC_APB1ENR_PWR);
 8000e2c:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <RTC_Config_Calendar+0x1d0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b6e      	ldr	r3, [pc, #440]	; (8000fec <RTC_Config_Calendar+0x1d0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e3a:	601a      	str	r2, [r3, #0]
	*pPWR_CR |= (1 << PWR_CR_DBP);
 8000e3c:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <RTC_Config_Calendar+0x1d4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b6b      	ldr	r3, [pc, #428]	; (8000ff0 <RTC_Config_Calendar+0x1d4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e4a:	601a      	str	r2, [r3, #0]

	stm32_rtc->RTC_WPR = 0xCA;
 8000e4c:	4b69      	ldr	r3, [pc, #420]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	22ca      	movs	r2, #202	; 0xca
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
	stm32_rtc->RTC_WPR = 0x53;
 8000e54:	4b67      	ldr	r3, [pc, #412]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2253      	movs	r2, #83	; 0x53
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24

	//1.a Configure the RTC Clock Source in in RCC_BDCR

	*pRCC_BDCR &= ~(3 << RCC_BDCR_RTCSEL);
 8000e5c:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e6a:	601a      	str	r2, [r3, #0]
	*pRCC_BDCR |= (pRTCConfig->RTCClockSource << RCC_BDCR_RTCSEL);
 8000e6c:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

	//1.b If the RTC Clock Source is HSE, Turn On the HSE Oscillator
	//Also, configure the HSE PreScaler to generate 1 MHz RTCCLK
	if(pRTCConfig->RTCClockSource == RTC_CLK_SRC_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d122      	bne.n	8000ed0 <RTC_Config_Calendar+0xb4>
	{
		//Turning on the HSE Oscillator
		*pRCC_CR |= (1 << HSE_ON_BITPOS);					//Turning on the HSE Oscillator
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <RTC_Config_Calendar+0x1e0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <RTC_Config_Calendar+0x1e0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e98:	601a      	str	r2, [r3, #0]
		while(!(*pRCC_CR & (1 << HSE_CHECK_BITPOS)));		//Checking whether HSE Oscillator is turned on and is stable
 8000e9a:	bf00      	nop
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <RTC_Config_Calendar+0x1e0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f8      	beq.n	8000e9c <RTC_Config_Calendar+0x80>

		//Configure the HSE PreScaler to generate 1 MHz RTCCLK
		*pRCC_CFGR &= ~(31 << RCC_CFGR_RTCPRE);
 8000eaa:	4b55      	ldr	r3, [pc, #340]	; (8001000 <RTC_Config_Calendar+0x1e4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b53      	ldr	r3, [pc, #332]	; (8001000 <RTC_Config_Calendar+0x1e4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8000eb8:	601a      	str	r2, [r3, #0]
		*pRCC_CFGR |= (pRTCConfig->RTCClockHSEPrescaler << RCC_CFGR_RTCPRE);
 8000eba:	4b51      	ldr	r3, [pc, #324]	; (8001000 <RTC_Config_Calendar+0x1e4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <RTC_Config_Calendar+0x1e4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
	}

	//1.c Enable the RTC Clock in RCC_BDCR
	*pRCC_BDCR |= (1 << RCC_BDCR_RTCEN);
 8000ed0:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <RTC_Config_Calendar+0x1dc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ede:	601a      	str	r2, [r3, #0]

	//2. Configure the RTC Calendar Parameters

	//2.b Enable the Initialization Mode
	stm32_rtc->RTC_ISR |= (1 << RTC_ISR_INIT);
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eee:	60da      	str	r2, [r3, #12]
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_INITF) & 0x1));
 8000ef0:	bf00      	nop
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	099b      	lsrs	r3, r3, #6
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f7      	beq.n	8000ef2 <RTC_Config_Calendar+0xd6>

	//2.c Configure the PreScaler Values in RTC_PRER Register
	stm32_rtc->RTC_PRER &= ~(0x7FFF << RTC_PRER_PREDIV_S);
 8000f02:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	4a3a      	ldr	r2, [pc, #232]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f14:	6113      	str	r3, [r2, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerS << RTC_PRER_PREDIV_S);
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	889b      	ldrh	r3, [r3, #4]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	611a      	str	r2, [r3, #16]

	stm32_rtc->RTC_PRER &= ~(0x7F << RTC_PRER_PREDIV_A);
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f38:	611a      	str	r2, [r3, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerA << RTC_PRER_PREDIV_A);
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	611a      	str	r2, [r3, #16]

	//2.d Configure the Time Parameters in RTC_TR Register
	time_value = (pRTCConfig->RTCClockSecondsUnits << RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << RTC_TR_ST) | (pRTCConfig->RTCClockMinutesUnits << RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << RTC_TR_MNT) | (pRTCConfig->RTCClockHoursUnits << RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << RTC_TR_PM);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	799b      	ldrb	r3, [r3, #6]
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	79db      	ldrb	r3, [r3, #7]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a5b      	ldrb	r3, [r3, #9]
 8000f6a:	031b      	lsls	r3, r3, #12
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7a9b      	ldrb	r3, [r3, #10]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7adb      	ldrb	r3, [r3, #11]
 8000f7a:	051b      	lsls	r3, r3, #20
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7b1b      	ldrb	r3, [r3, #12]
 8000f82:	059b      	lsls	r3, r3, #22
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
	stm32_rtc->RTC_TR = time_value;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	601a      	str	r2, [r3, #0]

	//2.e Configure the Date Parameters in RTC_DR Register
	date_value = (pRTCConfig->RTCClockDateUnits << RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << RTC_DR_DT) | (pRTCConfig->RTCClockMonthUnits << RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << RTC_DR_MT) | (pRTCConfig->RTCClockYearUnits << RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << RTC_DR_YT) | (pRTCConfig->RTCClockDayOfWeek << RTC_DR_WDU);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7b5b      	ldrb	r3, [r3, #13]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7b9b      	ldrb	r3, [r3, #14]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7bdb      	ldrb	r3, [r3, #15]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7c1b      	ldrb	r3, [r3, #16]
 8000faa:	031b      	lsls	r3, r3, #12
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7c5b      	ldrb	r3, [r3, #17]
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7c9b      	ldrb	r3, [r3, #18]
 8000fba:	051b      	lsls	r3, r3, #20
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7cdb      	ldrb	r3, [r3, #19]
 8000fc2:	035b      	lsls	r3, r3, #13
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
	stm32_rtc->RTC_DR = date_value;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	605a      	str	r2, [r3, #4]

	//2.f Exit the Initialization Mode
	stm32_rtc->RTC_ISR &= ~(1 << RTC_ISR_INIT);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <RTC_Config_Calendar+0x1d8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fde:	60da      	str	r2, [r3, #12]

	return;
 8000fe0:	bf00      	nop
}
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000018 	.word	0x20000018
 8000ff0:	20000014 	.word	0x20000014
 8000ff4:	2000001c 	.word	0x2000001c
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	20000008 	.word	0x20000008
 8001000:	2000000c 	.word	0x2000000c

08001004 <RTC_Read_Calendar>:

void RTC_Read_Calendar(struct Date *date, struct Time *time)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	uint32_t time_value, date_value;

	//1. Wait for the RSF bit to be set in RTC_ISR register
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_RSF) & 0x1));
 800100e:	bf00      	nop
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <RTC_Read_Calendar+0x150>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <RTC_Read_Calendar+0xc>

	//2. Read the current time value
	time_value = stm32_rtc->RTC_TR;
 8001020:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <RTC_Read_Calendar+0x150>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]

	//3. Read the current date value
	date_value = stm32_rtc->RTC_DR;
 8001028:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <RTC_Read_Calendar+0x150>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60bb      	str	r3, [r7, #8]

	//4. Format the time and date values
	//4.a Format the time values
	time->seconds = ((time_value >> RTC_TR_ST) & 0x7)*10 + ((time_value >> RTC_TR_SU) & 0xF);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4413      	add	r3, r2
 8001052:	b2da      	uxtb	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	701a      	strb	r2, [r3, #0]
	time->minutes = ((time_value >> RTC_TR_MNT) & 0x7)*10 + ((time_value >> RTC_TR_MNU) & 0xF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	0b1b      	lsrs	r3, r3, #12
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	705a      	strb	r2, [r3, #1]
	time->hours = ((time_value >> RTC_TR_HT) & 0x3)*10 + ((time_value >> RTC_TR_HU) & 0xF);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	0d1b      	lsrs	r3, r3, #20
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	709a      	strb	r2, [r3, #2]
	time->timeformat = ((time_value >> RTC_TR_PM) & 0x1);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	0d9b      	lsrs	r3, r3, #22
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	70da      	strb	r2, [r3, #3]

	//4.b Format the date values
	date->date = ((date_value >> RTC_DR_DT) & 0x3)*10 + ((date_value >> RTC_DR_DU) & 0xF);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4413      	add	r3, r2
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	701a      	strb	r2, [r3, #0]
	date->month = ((date_value >> RTC_DR_MT) & 0x1)*10 + ((date_value >> RTC_DR_MU) & 0xF);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	0b1b      	lsrs	r3, r3, #12
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b2da      	uxtb	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	705a      	strb	r2, [r3, #1]
	date->year = ((date_value >> RTC_DR_YT) & 0xF)*10 + ((date_value >> RTC_DR_YU) & 0xF);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	0d1b      	lsrs	r3, r3, #20
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4413      	add	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	709a      	strb	r2, [r3, #2]
	date->dayofweek = ((date_value >> RTC_DR_WDU) & 0x7);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0b5b      	lsrs	r3, r3, #13
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	b2da      	uxtb	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	70da      	strb	r2, [r3, #3]

	return;
 8001148:	bf00      	nop
}
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000001c 	.word	0x2000001c

08001158 <RTC_Display_Calendar_LCD>:

void RTC_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	struct Time saved_time;
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(count == 0)
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <RTC_Display_Calendar_LCD+0x230>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d162      	bne.n	8001230 <RTC_Display_Calendar_LCD+0xd8>
	{
		//Print the Time Information
		lcd_pcf8574_clear_screen();
 800116a:	f7ff fe19 	bl	8000da0 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 800116e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001172:	f7ff f88d 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 8001176:	f7ff fe1a 	bl	8000dae <lcd_pcf8574_return_home>
		delay_us(3000);
 800117a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800117e:	f7ff f887 	bl	8000290 <delay_us>
		printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	4619      	mov	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	461a      	mov	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	487e      	ldr	r0, [pc, #504]	; (800138c <RTC_Display_Calendar_LCD+0x234>)
 8001194:	f000 fdd8 	bl	8001d48 <iprintf>

		//Saving the time information
		memset(&saved_time,0,sizeof(struct Time));
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2204      	movs	r2, #4
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fceb 	bl	8001b7c <memset>
		saved_time.seconds = time->seconds;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	743b      	strb	r3, [r7, #16]
		saved_time.minutes = time->minutes;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	747b      	strb	r3, [r7, #17]
		saved_time.hours = time->hours;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	74bb      	strb	r3, [r7, #18]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fdfe 	bl	8000dbc <lcd_pcf8574_set_position>
		delay_us(3000);
 80011c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c4:	f7ff f864 	bl	8000290 <delay_us>
		format_dow(date,dow);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8e4 	bl	800139c <format_dow>
		format_mon(date,mon);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f932 	bl	8001444 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	4602      	mov	r2, r0
 80011f8:	4865      	ldr	r0, [pc, #404]	; (8001390 <RTC_Display_Calendar_LCD+0x238>)
 80011fa:	f000 fda5 	bl	8001d48 <iprintf>

		//Saving the date information
		memset(&saved_date,0,sizeof(struct Date));
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2204      	movs	r2, #4
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fcb8 	bl	8001b7c <memset>
		saved_date.date = date->date;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	753b      	strb	r3, [r7, #20]
		saved_date.month = date->month;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	757b      	strb	r3, [r7, #21]
		saved_date.year = date->year;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	75bb      	strb	r3, [r7, #22]
		saved_date.dayofweek = date->dayofweek;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	75fb      	strb	r3, [r7, #23]

		//Update count value
		count++;
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <RTC_Display_Calendar_LCD+0x230>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a57      	ldr	r2, [pc, #348]	; (8001388 <RTC_Display_Calendar_LCD+0x230>)
 800122c:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 800122e:	e0a6      	b.n	800137e <RTC_Display_Calendar_LCD+0x226>
		if(saved_time.seconds != time->seconds)
 8001230:	7c3a      	ldrb	r2, [r7, #16]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d010      	beq.n	800125c <RTC_Display_Calendar_LCD+0x104>
			lcd_pcf8574_set_position(0,10);
 800123a:	210a      	movs	r1, #10
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fdbd 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 8001242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001246:	f7ff f823 	bl	8000290 <delay_us>
			printf("%02d",time->seconds);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4850      	ldr	r0, [pc, #320]	; (8001394 <RTC_Display_Calendar_LCD+0x23c>)
 8001252:	f000 fd79 	bl	8001d48 <iprintf>
			saved_time.seconds = time->seconds;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	743b      	strb	r3, [r7, #16]
		if(saved_time.minutes != time->minutes)
 800125c:	7c7a      	ldrb	r2, [r7, #17]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	429a      	cmp	r2, r3
 8001264:	d010      	beq.n	8001288 <RTC_Display_Calendar_LCD+0x130>
			lcd_pcf8574_set_position(0,7);
 8001266:	2107      	movs	r1, #7
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fda7 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f7ff f80d 	bl	8000290 <delay_us>
			printf("%02d",time->minutes);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	4619      	mov	r1, r3
 800127c:	4845      	ldr	r0, [pc, #276]	; (8001394 <RTC_Display_Calendar_LCD+0x23c>)
 800127e:	f000 fd63 	bl	8001d48 <iprintf>
			saved_time.minutes = time->minutes;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	747b      	strb	r3, [r7, #17]
		if(saved_time.hours != time->hours)
 8001288:	7cba      	ldrb	r2, [r7, #18]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	429a      	cmp	r2, r3
 8001290:	d010      	beq.n	80012b4 <RTC_Display_Calendar_LCD+0x15c>
			lcd_pcf8574_set_position(0,4);
 8001292:	2104      	movs	r1, #4
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fd91 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129e:	f7fe fff7 	bl	8000290 <delay_us>
			printf("%02d",time->hours);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	4619      	mov	r1, r3
 80012a8:	483a      	ldr	r0, [pc, #232]	; (8001394 <RTC_Display_Calendar_LCD+0x23c>)
 80012aa:	f000 fd4d 	bl	8001d48 <iprintf>
			saved_time.hours = time->hours;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	74bb      	strb	r3, [r7, #18]
		if(saved_date.date != date->date)
 80012b4:	7d3a      	ldrb	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d010      	beq.n	80012e0 <RTC_Display_Calendar_LCD+0x188>
			lcd_pcf8574_set_position(1,6);
 80012be:	2106      	movs	r1, #6
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fd7b 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ca:	f7fe ffe1 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	482f      	ldr	r0, [pc, #188]	; (8001394 <RTC_Display_Calendar_LCD+0x23c>)
 80012d6:	f000 fd37 	bl	8001d48 <iprintf>
			saved_date.date = date->date;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	753b      	strb	r3, [r7, #20]
		if(saved_date.month != date->month)
 80012e0:	7d7a      	ldrb	r2, [r7, #21]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d016      	beq.n	8001318 <RTC_Display_Calendar_LCD+0x1c0>
			lcd_pcf8574_set_position(1,9);
 80012ea:	2109      	movs	r1, #9
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fd65 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 80012f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f6:	f7fe ffcb 	bl	8000290 <delay_us>
			format_mon(date,mon);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f89f 	bl	8001444 <format_mon>
			printf("%s",mon);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4619      	mov	r1, r3
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <RTC_Display_Calendar_LCD+0x240>)
 800130e:	f000 fd1b 	bl	8001d48 <iprintf>
			saved_date.month = date->month;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	757b      	strb	r3, [r7, #21]
		if(saved_date.year != date->year)
 8001318:	7dba      	ldrb	r2, [r7, #22]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	429a      	cmp	r2, r3
 8001320:	d010      	beq.n	8001344 <RTC_Display_Calendar_LCD+0x1ec>
			lcd_pcf8574_set_position(1,13);
 8001322:	210d      	movs	r1, #13
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fd49 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f7fe ffaf 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	4619      	mov	r1, r3
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <RTC_Display_Calendar_LCD+0x23c>)
 800133a:	f000 fd05 	bl	8001d48 <iprintf>
			saved_date.year = date->year;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	75bb      	strb	r3, [r7, #22]
		if(saved_date.dayofweek != date->dayofweek)
 8001344:	7dfa      	ldrb	r2, [r7, #23]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	78db      	ldrb	r3, [r3, #3]
 800134a:	429a      	cmp	r2, r3
 800134c:	d017      	beq.n	800137e <RTC_Display_Calendar_LCD+0x226>
			lcd_pcf8574_set_position(1,2);
 800134e:	2102      	movs	r1, #2
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fd33 	bl	8000dbc <lcd_pcf8574_set_position>
			delay_us(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f7fe ff99 	bl	8000290 <delay_us>
			format_dow(date,dow);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f819 	bl	800139c <format_dow>
			printf("%s",dow);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <RTC_Display_Calendar_LCD+0x240>)
 8001372:	f000 fce9 	bl	8001d48 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	78db      	ldrb	r3, [r3, #3]
 800137a:	75fb      	strb	r3, [r7, #23]
	return;
 800137c:	bf00      	nop
 800137e:	bf00      	nop
}
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000cc 	.word	0x200000cc
 800138c:	08002c4c 	.word	0x08002c4c
 8001390:	08002c60 	.word	0x08002c60
 8001394:	08002c74 	.word	0x08002c74
 8001398:	08002c7c 	.word	0x08002c7c

0800139c <format_dow>:

void format_dow(struct Date *date,char *dow)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d834      	bhi.n	800141a <format_dow+0x7e>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <format_dow+0x1c>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013d5 	.word	0x080013d5
 80013bc:	080013df 	.word	0x080013df
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	080013f3 	.word	0x080013f3
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	08001407 	.word	0x08001407
 80013d0:	08001411 	.word	0x08001411
	{
		case 1:
			strcpy(dow,"Mon");
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <format_dow+0x8c>)
 80013d8:	6810      	ldr	r0, [r2, #0]
 80013da:	6018      	str	r0, [r3, #0]
			break;
 80013dc:	e01e      	b.n	800141c <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <format_dow+0x90>)
 80013e2:	6810      	ldr	r0, [r2, #0]
 80013e4:	6018      	str	r0, [r3, #0]
			break;
 80013e6:	e019      	b.n	800141c <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <format_dow+0x94>)
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	6018      	str	r0, [r3, #0]
			break;
 80013f0:	e014      	b.n	800141c <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <format_dow+0x98>)
 80013f6:	6810      	ldr	r0, [r2, #0]
 80013f8:	6018      	str	r0, [r3, #0]
			break;
 80013fa:	e00f      	b.n	800141c <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <format_dow+0x9c>)
 8001400:	6810      	ldr	r0, [r2, #0]
 8001402:	6018      	str	r0, [r3, #0]
			break;
 8001404:	e00a      	b.n	800141c <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <format_dow+0xa0>)
 800140a:	6810      	ldr	r0, [r2, #0]
 800140c:	6018      	str	r0, [r3, #0]
			break;
 800140e:	e005      	b.n	800141c <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <format_dow+0xa4>)
 8001414:	6810      	ldr	r0, [r2, #0]
 8001416:	6018      	str	r0, [r3, #0]
			break;
 8001418:	e000      	b.n	800141c <format_dow+0x80>
		default:
			break;
 800141a:	bf00      	nop
	}

	return;
 800141c:	bf00      	nop
}
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	08002c80 	.word	0x08002c80
 800142c:	08002c84 	.word	0x08002c84
 8001430:	08002c88 	.word	0x08002c88
 8001434:	08002c8c 	.word	0x08002c8c
 8001438:	08002c90 	.word	0x08002c90
 800143c:	08002c94 	.word	0x08002c94
 8001440:	08002c98 	.word	0x08002c98

08001444 <format_mon>:

void format_mon(struct Date *date,char *mon)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	switch(date->month)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	3b01      	subs	r3, #1
 8001454:	2b0b      	cmp	r3, #11
 8001456:	d857      	bhi.n	8001508 <format_mon+0xc4>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <format_mon+0x1c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001491 	.word	0x08001491
 8001464:	0800149b 	.word	0x0800149b
 8001468:	080014a5 	.word	0x080014a5
 800146c:	080014af 	.word	0x080014af
 8001470:	080014b9 	.word	0x080014b9
 8001474:	080014c3 	.word	0x080014c3
 8001478:	080014cd 	.word	0x080014cd
 800147c:	080014d7 	.word	0x080014d7
 8001480:	080014e1 	.word	0x080014e1
 8001484:	080014eb 	.word	0x080014eb
 8001488:	080014f5 	.word	0x080014f5
 800148c:	080014ff 	.word	0x080014ff
	{
		case 1:
			strcpy(mon,"Jan");
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <format_mon+0xd0>)
 8001494:	6810      	ldr	r0, [r2, #0]
 8001496:	6018      	str	r0, [r3, #0]
			break;
 8001498:	e037      	b.n	800150a <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <format_mon+0xd4>)
 800149e:	6810      	ldr	r0, [r2, #0]
 80014a0:	6018      	str	r0, [r3, #0]
			break;
 80014a2:	e032      	b.n	800150a <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4a1d      	ldr	r2, [pc, #116]	; (800151c <format_mon+0xd8>)
 80014a8:	6810      	ldr	r0, [r2, #0]
 80014aa:	6018      	str	r0, [r3, #0]
			break;
 80014ac:	e02d      	b.n	800150a <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <format_mon+0xdc>)
 80014b2:	6810      	ldr	r0, [r2, #0]
 80014b4:	6018      	str	r0, [r3, #0]
			break;
 80014b6:	e028      	b.n	800150a <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <format_mon+0xe0>)
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	6018      	str	r0, [r3, #0]
			break;
 80014c0:	e023      	b.n	800150a <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <format_mon+0xe4>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	6018      	str	r0, [r3, #0]
			break;
 80014ca:	e01e      	b.n	800150a <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <format_mon+0xe8>)
 80014d0:	6810      	ldr	r0, [r2, #0]
 80014d2:	6018      	str	r0, [r3, #0]
			break;
 80014d4:	e019      	b.n	800150a <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <format_mon+0xec>)
 80014da:	6810      	ldr	r0, [r2, #0]
 80014dc:	6018      	str	r0, [r3, #0]
			break;
 80014de:	e014      	b.n	800150a <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <format_mon+0xf0>)
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	6018      	str	r0, [r3, #0]
			break;
 80014e8:	e00f      	b.n	800150a <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <format_mon+0xf4>)
 80014ee:	6810      	ldr	r0, [r2, #0]
 80014f0:	6018      	str	r0, [r3, #0]
			break;
 80014f2:	e00a      	b.n	800150a <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <format_mon+0xf8>)
 80014f8:	6810      	ldr	r0, [r2, #0]
 80014fa:	6018      	str	r0, [r3, #0]
			break;
 80014fc:	e005      	b.n	800150a <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <format_mon+0xfc>)
 8001502:	6810      	ldr	r0, [r2, #0]
 8001504:	6018      	str	r0, [r3, #0]
			break;
 8001506:	e000      	b.n	800150a <format_mon+0xc6>
		default:
			break;
 8001508:	bf00      	nop
	}

	return;
 800150a:	bf00      	nop
}
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	08002c9c 	.word	0x08002c9c
 8001518:	08002ca0 	.word	0x08002ca0
 800151c:	08002ca4 	.word	0x08002ca4
 8001520:	08002ca8 	.word	0x08002ca8
 8001524:	08002cac 	.word	0x08002cac
 8001528:	08002cb0 	.word	0x08002cb0
 800152c:	08002cb4 	.word	0x08002cb4
 8001530:	08002cb8 	.word	0x08002cb8
 8001534:	08002cbc 	.word	0x08002cbc
 8001538:	08002cc0 	.word	0x08002cc0
 800153c:	08002cc4 	.word	0x08002cc4
 8001540:	08002cc8 	.word	0x08002cc8

08001544 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a88      	ldr	r2, [pc, #544]	; (8001770 <EnablePeriClk+0x22c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d108      	bne.n	8001566 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001554:	4b87      	ldr	r3, [pc, #540]	; (8001774 <EnablePeriClk+0x230>)
 8001556:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001564:	e19b      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <EnablePeriClk+0x234>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d108      	bne.n	8001580 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <EnablePeriClk+0x230>)
 8001570:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f043 0202 	orr.w	r2, r3, #2
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	e18e      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a7e      	ldr	r2, [pc, #504]	; (800177c <EnablePeriClk+0x238>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d108      	bne.n	800159a <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001588:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <EnablePeriClk+0x230>)
 800158a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f043 0204 	orr.w	r2, r3, #4
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	e181      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a78      	ldr	r2, [pc, #480]	; (8001780 <EnablePeriClk+0x23c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d108      	bne.n	80015b4 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015a2:	4b74      	ldr	r3, [pc, #464]	; (8001774 <EnablePeriClk+0x230>)
 80015a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f043 0208 	orr.w	r2, r3, #8
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	e174      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a73      	ldr	r2, [pc, #460]	; (8001784 <EnablePeriClk+0x240>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d108      	bne.n	80015ce <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015bc:	4b6d      	ldr	r3, [pc, #436]	; (8001774 <EnablePeriClk+0x230>)
 80015be:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f043 0210 	orr.w	r2, r3, #16
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	e167      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a6d      	ldr	r2, [pc, #436]	; (8001788 <EnablePeriClk+0x244>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d108      	bne.n	80015e8 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <EnablePeriClk+0x230>)
 80015d8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]
}
 80015e6:	e15a      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a68      	ldr	r2, [pc, #416]	; (800178c <EnablePeriClk+0x248>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d108      	bne.n	8001602 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015f0:	4b60      	ldr	r3, [pc, #384]	; (8001774 <EnablePeriClk+0x230>)
 80015f2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	e14d      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a62      	ldr	r2, [pc, #392]	; (8001790 <EnablePeriClk+0x24c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d108      	bne.n	800161c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800160a:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <EnablePeriClk+0x230>)
 800160c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	e140      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <EnablePeriClk+0x250>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d108      	bne.n	8001636 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <EnablePeriClk+0x230>)
 8001626:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	e133      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a57      	ldr	r2, [pc, #348]	; (8001798 <EnablePeriClk+0x254>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d108      	bne.n	8001650 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <EnablePeriClk+0x258>)
 8001640:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	e126      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a53      	ldr	r2, [pc, #332]	; (80017a0 <EnablePeriClk+0x25c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d108      	bne.n	800166a <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <EnablePeriClk+0x260>)
 800165a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	e119      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <EnablePeriClk+0x264>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d108      	bne.n	8001684 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <EnablePeriClk+0x260>)
 8001674:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	e10c      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a49      	ldr	r2, [pc, #292]	; (80017ac <EnablePeriClk+0x268>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d108      	bne.n	800169e <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <EnablePeriClk+0x260>)
 800168e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	e0ff      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <EnablePeriClk+0x26c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d108      	bne.n	80016b8 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <EnablePeriClk+0x260>)
 80016a8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	e0f2      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	; (80017b4 <EnablePeriClk+0x270>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d108      	bne.n	80016d2 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <EnablePeriClk+0x260>)
 80016c2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	e0e5      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <EnablePeriClk+0x274>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d108      	bne.n	80016ec <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <EnablePeriClk+0x258>)
 80016dc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	e0d8      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a33      	ldr	r2, [pc, #204]	; (80017bc <EnablePeriClk+0x278>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d108      	bne.n	8001706 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <EnablePeriClk+0x260>)
 80016f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	e0cb      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <EnablePeriClk+0x27c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d108      	bne.n	8001720 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <EnablePeriClk+0x260>)
 8001710:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	e0be      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <EnablePeriClk+0x280>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d108      	bne.n	800173a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <EnablePeriClk+0x260>)
 800172a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	e0b1      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <EnablePeriClk+0x284>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <EnablePeriClk+0x260>)
 8001744:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	e0a4      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <EnablePeriClk+0x288>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d139      	bne.n	80017d0 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <EnablePeriClk+0x258>)
 800175e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	e097      	b.n	800189e <EnablePeriClk+0x35a>
 800176e:	bf00      	nop
 8001770:	40020000 	.word	0x40020000
 8001774:	40023830 	.word	0x40023830
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40013000 	.word	0x40013000
 800179c:	40023844 	.word	0x40023844
 80017a0:	40003800 	.word	0x40003800
 80017a4:	40023840 	.word	0x40023840
 80017a8:	40003c00 	.word	0x40003c00
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40005800 	.word	0x40005800
 80017b4:	40005c00 	.word	0x40005c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40004400 	.word	0x40004400
 80017c0:	40004800 	.word	0x40004800
 80017c4:	40004c00 	.word	0x40004c00
 80017c8:	40005000 	.word	0x40005000
 80017cc:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <EnablePeriClk+0x364>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d108      	bne.n	80017ea <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <EnablePeriClk+0x368>)
 80017da:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	e059      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <EnablePeriClk+0x36c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d108      	bne.n	8001804 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <EnablePeriClk+0x368>)
 80017f4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f043 0220 	orr.w	r2, r3, #32
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	e04c      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <EnablePeriClk+0x370>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d108      	bne.n	800181e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <EnablePeriClk+0x374>)
 800180e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	e03f      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <EnablePeriClk+0x378>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d108      	bne.n	8001838 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <EnablePeriClk+0x374>)
 8001828:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	e032      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d108      	bne.n	8001852 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <EnablePeriClk+0x368>)
 8001842:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	e025      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <EnablePeriClk+0x37c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <EnablePeriClk+0x368>)
 800185c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	e018      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <EnablePeriClk+0x380>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d108      	bne.n	8001886 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <EnablePeriClk+0x368>)
 8001876:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	e00b      	b.n	800189e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <EnablePeriClk+0x384>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d107      	bne.n	800189e <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <EnablePeriClk+0x368>)
 8001890:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f043 0208 	orr.w	r2, r3, #8
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40001000 	.word	0x40001000
 80018ac:	40023840 	.word	0x40023840
 80018b0:	40001400 	.word	0x40001400
 80018b4:	40026000 	.word	0x40026000
 80018b8:	40023830 	.word	0x40023830
 80018bc:	40026400 	.word	0x40026400
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40000c00 	.word	0x40000c00

080018cc <main>:

struct Date date;
struct Time time;

int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

	struct RTC_Config_t stm32_rtc_config;

	//Configure the Timer
	configure_delay_timer();
 80018d2:	f7fe fcf5 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 80018d6:	f7fe fd15 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <main+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fa58 	bl	8001d98 <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 80018e8:	4822      	ldr	r0, [pc, #136]	; (8001974 <main+0xa8>)
 80018ea:	f7fe fcd1 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 80018ee:	f7ff f9a5 	bl	8000c3c <lcd_pcf8574_init>
	delay_us(100000);
 80018f2:	4821      	ldr	r0, [pc, #132]	; (8001978 <main+0xac>)
 80018f4:	f7fe fccc 	bl	8000290 <delay_us>

	//Configure STM32 RTC Peripheral
	memset(&stm32_rtc_config,0,sizeof(stm32_rtc_config));
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2214      	movs	r2, #20
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93c 	bl	8001b7c <memset>
	stm32_rtc_config.RTCClockSource = RTC_CLK_SRC_HSE;
 8001904:	2303      	movs	r3, #3
 8001906:	713b      	strb	r3, [r7, #4]
	stm32_rtc_config.RTCClockHSEPrescaler = RTC_CLK_PRESCALER_DIV_8;
 8001908:	2308      	movs	r3, #8
 800190a:	717b      	strb	r3, [r7, #5]
	stm32_rtc_config.RTCClockPrescalerA = 99;
 800190c:	2363      	movs	r3, #99	; 0x63
 800190e:	71bb      	strb	r3, [r7, #6]
	stm32_rtc_config.RTCClockPrescalerS = 9999;
 8001910:	f242 730f 	movw	r3, #9999	; 0x270f
 8001914:	813b      	strh	r3, [r7, #8]
	stm32_rtc_config.RTCClockSecondsUnits = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	72bb      	strb	r3, [r7, #10]
	stm32_rtc_config.RTCClockSecondsTens = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	72fb      	strb	r3, [r7, #11]
	stm32_rtc_config.RTCClockMinutesUnits = 9;
 800191e:	2309      	movs	r3, #9
 8001920:	733b      	strb	r3, [r7, #12]
	stm32_rtc_config.RTCClockMinutesTens = 3;
 8001922:	2303      	movs	r3, #3
 8001924:	737b      	strb	r3, [r7, #13]
	stm32_rtc_config.RTCClockHoursUnits = 5;
 8001926:	2305      	movs	r3, #5
 8001928:	73bb      	strb	r3, [r7, #14]
	stm32_rtc_config.RTCClockHoursTens = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
	stm32_rtc_config.RTCClockAMPM = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	743b      	strb	r3, [r7, #16]
	stm32_rtc_config.RTCClockDateUnits = 6;
 8001932:	2306      	movs	r3, #6
 8001934:	747b      	strb	r3, [r7, #17]
	stm32_rtc_config.RTCClockDateTens = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	74bb      	strb	r3, [r7, #18]
	stm32_rtc_config.RTCClockMonthUnits = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	74fb      	strb	r3, [r7, #19]
	stm32_rtc_config.RTCClockMonthTens = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	753b      	strb	r3, [r7, #20]
	stm32_rtc_config.RTCClockYearUnits = 4;
 8001942:	2304      	movs	r3, #4
 8001944:	757b      	strb	r3, [r7, #21]
	stm32_rtc_config.RTCClockYearTens = 2;
 8001946:	2302      	movs	r3, #2
 8001948:	75bb      	strb	r3, [r7, #22]
	stm32_rtc_config.RTCClockDayOfWeek = 6;
 800194a:	2306      	movs	r3, #6
 800194c:	75fb      	strb	r3, [r7, #23]

	RTC_Config_Calendar(&stm32_rtc_config);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fa63 	bl	8000e1c <RTC_Config_Calendar>
	delay_us(10000);
 8001956:	f242 7010 	movw	r0, #10000	; 0x2710
 800195a:	f7fe fc99 	bl	8000290 <delay_us>

	while(1)
	{
		RTC_Read_Calendar(&date,&time);
 800195e:	4907      	ldr	r1, [pc, #28]	; (800197c <main+0xb0>)
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <main+0xb4>)
 8001962:	f7ff fb4f 	bl	8001004 <RTC_Read_Calendar>
		RTC_Display_Calendar_LCD(&date,&time);
 8001966:	4905      	ldr	r1, [pc, #20]	; (800197c <main+0xb0>)
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <main+0xb4>)
 800196a:	f7ff fbf5 	bl	8001158 <RTC_Display_Calendar_LCD>
		RTC_Read_Calendar(&date,&time);
 800196e:	e7f6      	b.n	800195e <main+0x92>
 8001970:	20000020 	.word	0x20000020
 8001974:	000f4240 	.word	0x000f4240
 8001978:	000186a0 	.word	0x000186a0
 800197c:	200000d4 	.word	0x200000d4
 8001980:	200000d0 	.word	0x200000d0

08001984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fcfb 	bl	80003d4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_isatty>:

int _isatty(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a88:	f000 f846 	bl	8001b18 <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20020000 	.word	0x20020000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	200000d8 	.word	0x200000d8
 8001ac0:	200000f0 	.word	0x200000f0

08001ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ac6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ac8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <LoopForever+0xe>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <LoopForever+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001af2:	f000 f817 	bl	8001b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af6:	f7ff fee9 	bl	80018cc <main>

08001afa <LoopForever>:

LoopForever:
  b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   r0, =_estack
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b08:	08002d6c 	.word	0x08002d6c
  ldr r2, =_sbss
 8001b0c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001b10:	200000ec 	.word	0x200000ec

08001b14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <__errno>:
 8001b18:	4b01      	ldr	r3, [pc, #4]	; (8001b20 <__errno+0x8>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000020 	.word	0x20000020

08001b24 <__libc_init_array>:
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	4d0d      	ldr	r5, [pc, #52]	; (8001b5c <__libc_init_array+0x38>)
 8001b28:	4c0d      	ldr	r4, [pc, #52]	; (8001b60 <__libc_init_array+0x3c>)
 8001b2a:	1b64      	subs	r4, r4, r5
 8001b2c:	10a4      	asrs	r4, r4, #2
 8001b2e:	2600      	movs	r6, #0
 8001b30:	42a6      	cmp	r6, r4
 8001b32:	d109      	bne.n	8001b48 <__libc_init_array+0x24>
 8001b34:	4d0b      	ldr	r5, [pc, #44]	; (8001b64 <__libc_init_array+0x40>)
 8001b36:	4c0c      	ldr	r4, [pc, #48]	; (8001b68 <__libc_init_array+0x44>)
 8001b38:	f001 f87c 	bl	8002c34 <_init>
 8001b3c:	1b64      	subs	r4, r4, r5
 8001b3e:	10a4      	asrs	r4, r4, #2
 8001b40:	2600      	movs	r6, #0
 8001b42:	42a6      	cmp	r6, r4
 8001b44:	d105      	bne.n	8001b52 <__libc_init_array+0x2e>
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4c:	4798      	blx	r3
 8001b4e:	3601      	adds	r6, #1
 8001b50:	e7ee      	b.n	8001b30 <__libc_init_array+0xc>
 8001b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b56:	4798      	blx	r3
 8001b58:	3601      	adds	r6, #1
 8001b5a:	e7f2      	b.n	8001b42 <__libc_init_array+0x1e>
 8001b5c:	08002d64 	.word	0x08002d64
 8001b60:	08002d64 	.word	0x08002d64
 8001b64:	08002d64 	.word	0x08002d64
 8001b68:	08002d68 	.word	0x08002d68

08001b6c <malloc>:
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <malloc+0xc>)
 8001b6e:	4601      	mov	r1, r0
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f000 b875 	b.w	8001c60 <_malloc_r>
 8001b76:	bf00      	nop
 8001b78:	20000020 	.word	0x20000020

08001b7c <memset>:
 8001b7c:	4402      	add	r2, r0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d100      	bne.n	8001b86 <memset+0xa>
 8001b84:	4770      	bx	lr
 8001b86:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8a:	e7f9      	b.n	8001b80 <memset+0x4>

08001b8c <_free_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d041      	beq.n	8001c18 <_free_r+0x8c>
 8001b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b98:	1f0c      	subs	r4, r1, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bfb8      	it	lt
 8001b9e:	18e4      	addlt	r4, r4, r3
 8001ba0:	f000 fca4 	bl	80024ec <__malloc_lock>
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <_free_r+0x90>)
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	b933      	cbnz	r3, 8001bb8 <_free_r+0x2c>
 8001baa:	6063      	str	r3, [r4, #4]
 8001bac:	6014      	str	r4, [r2, #0]
 8001bae:	4628      	mov	r0, r5
 8001bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bb4:	f000 bca0 	b.w	80024f8 <__malloc_unlock>
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d908      	bls.n	8001bce <_free_r+0x42>
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	1821      	adds	r1, r4, r0
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	bf01      	itttt	eq
 8001bc4:	6819      	ldreq	r1, [r3, #0]
 8001bc6:	685b      	ldreq	r3, [r3, #4]
 8001bc8:	1809      	addeq	r1, r1, r0
 8001bca:	6021      	streq	r1, [r4, #0]
 8001bcc:	e7ed      	b.n	8001baa <_free_r+0x1e>
 8001bce:	461a      	mov	r2, r3
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	b10b      	cbz	r3, 8001bd8 <_free_r+0x4c>
 8001bd4:	42a3      	cmp	r3, r4
 8001bd6:	d9fa      	bls.n	8001bce <_free_r+0x42>
 8001bd8:	6811      	ldr	r1, [r2, #0]
 8001bda:	1850      	adds	r0, r2, r1
 8001bdc:	42a0      	cmp	r0, r4
 8001bde:	d10b      	bne.n	8001bf8 <_free_r+0x6c>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	4401      	add	r1, r0
 8001be4:	1850      	adds	r0, r2, r1
 8001be6:	4283      	cmp	r3, r0
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	d1e0      	bne.n	8001bae <_free_r+0x22>
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	6053      	str	r3, [r2, #4]
 8001bf2:	4401      	add	r1, r0
 8001bf4:	6011      	str	r1, [r2, #0]
 8001bf6:	e7da      	b.n	8001bae <_free_r+0x22>
 8001bf8:	d902      	bls.n	8001c00 <_free_r+0x74>
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	602b      	str	r3, [r5, #0]
 8001bfe:	e7d6      	b.n	8001bae <_free_r+0x22>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	1821      	adds	r1, r4, r0
 8001c04:	428b      	cmp	r3, r1
 8001c06:	bf04      	itt	eq
 8001c08:	6819      	ldreq	r1, [r3, #0]
 8001c0a:	685b      	ldreq	r3, [r3, #4]
 8001c0c:	6063      	str	r3, [r4, #4]
 8001c0e:	bf04      	itt	eq
 8001c10:	1809      	addeq	r1, r1, r0
 8001c12:	6021      	streq	r1, [r4, #0]
 8001c14:	6054      	str	r4, [r2, #4]
 8001c16:	e7ca      	b.n	8001bae <_free_r+0x22>
 8001c18:	bd38      	pop	{r3, r4, r5, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000dc 	.word	0x200000dc

08001c20 <sbrk_aligned>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	4e0e      	ldr	r6, [pc, #56]	; (8001c5c <sbrk_aligned+0x3c>)
 8001c24:	460c      	mov	r4, r1
 8001c26:	6831      	ldr	r1, [r6, #0]
 8001c28:	4605      	mov	r5, r0
 8001c2a:	b911      	cbnz	r1, 8001c32 <sbrk_aligned+0x12>
 8001c2c:	f000 f8a4 	bl	8001d78 <_sbrk_r>
 8001c30:	6030      	str	r0, [r6, #0]
 8001c32:	4621      	mov	r1, r4
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 f89f 	bl	8001d78 <_sbrk_r>
 8001c3a:	1c43      	adds	r3, r0, #1
 8001c3c:	d00a      	beq.n	8001c54 <sbrk_aligned+0x34>
 8001c3e:	1cc4      	adds	r4, r0, #3
 8001c40:	f024 0403 	bic.w	r4, r4, #3
 8001c44:	42a0      	cmp	r0, r4
 8001c46:	d007      	beq.n	8001c58 <sbrk_aligned+0x38>
 8001c48:	1a21      	subs	r1, r4, r0
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f000 f894 	bl	8001d78 <_sbrk_r>
 8001c50:	3001      	adds	r0, #1
 8001c52:	d101      	bne.n	8001c58 <sbrk_aligned+0x38>
 8001c54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c58:	4620      	mov	r0, r4
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	200000e0 	.word	0x200000e0

08001c60 <_malloc_r>:
 8001c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c64:	1ccd      	adds	r5, r1, #3
 8001c66:	f025 0503 	bic.w	r5, r5, #3
 8001c6a:	3508      	adds	r5, #8
 8001c6c:	2d0c      	cmp	r5, #12
 8001c6e:	bf38      	it	cc
 8001c70:	250c      	movcc	r5, #12
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	4607      	mov	r7, r0
 8001c76:	db01      	blt.n	8001c7c <_malloc_r+0x1c>
 8001c78:	42a9      	cmp	r1, r5
 8001c7a:	d905      	bls.n	8001c88 <_malloc_r+0x28>
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	2600      	movs	r6, #0
 8001c82:	4630      	mov	r0, r6
 8001c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c88:	4e2e      	ldr	r6, [pc, #184]	; (8001d44 <_malloc_r+0xe4>)
 8001c8a:	f000 fc2f 	bl	80024ec <__malloc_lock>
 8001c8e:	6833      	ldr	r3, [r6, #0]
 8001c90:	461c      	mov	r4, r3
 8001c92:	bb34      	cbnz	r4, 8001ce2 <_malloc_r+0x82>
 8001c94:	4629      	mov	r1, r5
 8001c96:	4638      	mov	r0, r7
 8001c98:	f7ff ffc2 	bl	8001c20 <sbrk_aligned>
 8001c9c:	1c43      	adds	r3, r0, #1
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	d14d      	bne.n	8001d3e <_malloc_r+0xde>
 8001ca2:	6834      	ldr	r4, [r6, #0]
 8001ca4:	4626      	mov	r6, r4
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	d140      	bne.n	8001d2c <_malloc_r+0xcc>
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	4631      	mov	r1, r6
 8001cae:	4638      	mov	r0, r7
 8001cb0:	eb04 0803 	add.w	r8, r4, r3
 8001cb4:	f000 f860 	bl	8001d78 <_sbrk_r>
 8001cb8:	4580      	cmp	r8, r0
 8001cba:	d13a      	bne.n	8001d32 <_malloc_r+0xd2>
 8001cbc:	6821      	ldr	r1, [r4, #0]
 8001cbe:	3503      	adds	r5, #3
 8001cc0:	1a6d      	subs	r5, r5, r1
 8001cc2:	f025 0503 	bic.w	r5, r5, #3
 8001cc6:	3508      	adds	r5, #8
 8001cc8:	2d0c      	cmp	r5, #12
 8001cca:	bf38      	it	cc
 8001ccc:	250c      	movcc	r5, #12
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	f7ff ffa5 	bl	8001c20 <sbrk_aligned>
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	d02b      	beq.n	8001d32 <_malloc_r+0xd2>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	442b      	add	r3, r5
 8001cde:	6023      	str	r3, [r4, #0]
 8001ce0:	e00e      	b.n	8001d00 <_malloc_r+0xa0>
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	1b52      	subs	r2, r2, r5
 8001ce6:	d41e      	bmi.n	8001d26 <_malloc_r+0xc6>
 8001ce8:	2a0b      	cmp	r2, #11
 8001cea:	d916      	bls.n	8001d1a <_malloc_r+0xba>
 8001cec:	1961      	adds	r1, r4, r5
 8001cee:	42a3      	cmp	r3, r4
 8001cf0:	6025      	str	r5, [r4, #0]
 8001cf2:	bf18      	it	ne
 8001cf4:	6059      	strne	r1, [r3, #4]
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	bf08      	it	eq
 8001cfa:	6031      	streq	r1, [r6, #0]
 8001cfc:	5162      	str	r2, [r4, r5]
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	4638      	mov	r0, r7
 8001d02:	f104 060b 	add.w	r6, r4, #11
 8001d06:	f000 fbf7 	bl	80024f8 <__malloc_unlock>
 8001d0a:	f026 0607 	bic.w	r6, r6, #7
 8001d0e:	1d23      	adds	r3, r4, #4
 8001d10:	1af2      	subs	r2, r6, r3
 8001d12:	d0b6      	beq.n	8001c82 <_malloc_r+0x22>
 8001d14:	1b9b      	subs	r3, r3, r6
 8001d16:	50a3      	str	r3, [r4, r2]
 8001d18:	e7b3      	b.n	8001c82 <_malloc_r+0x22>
 8001d1a:	6862      	ldr	r2, [r4, #4]
 8001d1c:	42a3      	cmp	r3, r4
 8001d1e:	bf0c      	ite	eq
 8001d20:	6032      	streq	r2, [r6, #0]
 8001d22:	605a      	strne	r2, [r3, #4]
 8001d24:	e7ec      	b.n	8001d00 <_malloc_r+0xa0>
 8001d26:	4623      	mov	r3, r4
 8001d28:	6864      	ldr	r4, [r4, #4]
 8001d2a:	e7b2      	b.n	8001c92 <_malloc_r+0x32>
 8001d2c:	4634      	mov	r4, r6
 8001d2e:	6876      	ldr	r6, [r6, #4]
 8001d30:	e7b9      	b.n	8001ca6 <_malloc_r+0x46>
 8001d32:	230c      	movs	r3, #12
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4638      	mov	r0, r7
 8001d38:	f000 fbde 	bl	80024f8 <__malloc_unlock>
 8001d3c:	e7a1      	b.n	8001c82 <_malloc_r+0x22>
 8001d3e:	6025      	str	r5, [r4, #0]
 8001d40:	e7de      	b.n	8001d00 <_malloc_r+0xa0>
 8001d42:	bf00      	nop
 8001d44:	200000dc 	.word	0x200000dc

08001d48 <iprintf>:
 8001d48:	b40f      	push	{r0, r1, r2, r3}
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <iprintf+0x2c>)
 8001d4c:	b513      	push	{r0, r1, r4, lr}
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	b124      	cbz	r4, 8001d5c <iprintf+0x14>
 8001d52:	69a3      	ldr	r3, [r4, #24]
 8001d54:	b913      	cbnz	r3, 8001d5c <iprintf+0x14>
 8001d56:	4620      	mov	r0, r4
 8001d58:	f000 fac2 	bl	80022e0 <__sinit>
 8001d5c:	ab05      	add	r3, sp, #20
 8001d5e:	9a04      	ldr	r2, [sp, #16]
 8001d60:	68a1      	ldr	r1, [r4, #8]
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	4620      	mov	r0, r4
 8001d66:	f000 fbf5 	bl	8002554 <_vfiprintf_r>
 8001d6a:	b002      	add	sp, #8
 8001d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d70:	b004      	add	sp, #16
 8001d72:	4770      	bx	lr
 8001d74:	20000020 	.word	0x20000020

08001d78 <_sbrk_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	4d06      	ldr	r5, [pc, #24]	; (8001d94 <_sbrk_r+0x1c>)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	602b      	str	r3, [r5, #0]
 8001d84:	f7ff fe68 	bl	8001a58 <_sbrk>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d102      	bne.n	8001d92 <_sbrk_r+0x1a>
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	b103      	cbz	r3, 8001d92 <_sbrk_r+0x1a>
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
 8001d94:	200000e8 	.word	0x200000e8

08001d98 <setbuf>:
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9e:	bf0c      	ite	eq
 8001da0:	2202      	moveq	r2, #2
 8001da2:	2200      	movne	r2, #0
 8001da4:	f000 b800 	b.w	8001da8 <setvbuf>

08001da8 <setvbuf>:
 8001da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001dac:	461d      	mov	r5, r3
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <setvbuf+0x17c>)
 8001db0:	681f      	ldr	r7, [r3, #0]
 8001db2:	4604      	mov	r4, r0
 8001db4:	460e      	mov	r6, r1
 8001db6:	4690      	mov	r8, r2
 8001db8:	b127      	cbz	r7, 8001dc4 <setvbuf+0x1c>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	b913      	cbnz	r3, 8001dc4 <setvbuf+0x1c>
 8001dbe:	4638      	mov	r0, r7
 8001dc0:	f000 fa8e 	bl	80022e0 <__sinit>
 8001dc4:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <setvbuf+0x180>)
 8001dc6:	429c      	cmp	r4, r3
 8001dc8:	d167      	bne.n	8001e9a <setvbuf+0xf2>
 8001dca:	687c      	ldr	r4, [r7, #4]
 8001dcc:	f1b8 0f02 	cmp.w	r8, #2
 8001dd0:	d006      	beq.n	8001de0 <setvbuf+0x38>
 8001dd2:	f1b8 0f01 	cmp.w	r8, #1
 8001dd6:	f200 809f 	bhi.w	8001f18 <setvbuf+0x170>
 8001dda:	2d00      	cmp	r5, #0
 8001ddc:	f2c0 809c 	blt.w	8001f18 <setvbuf+0x170>
 8001de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001de2:	07db      	lsls	r3, r3, #31
 8001de4:	d405      	bmi.n	8001df2 <setvbuf+0x4a>
 8001de6:	89a3      	ldrh	r3, [r4, #12]
 8001de8:	0598      	lsls	r0, r3, #22
 8001dea:	d402      	bmi.n	8001df2 <setvbuf+0x4a>
 8001dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dee:	f000 fb15 	bl	800241c <__retarget_lock_acquire_recursive>
 8001df2:	4621      	mov	r1, r4
 8001df4:	4638      	mov	r0, r7
 8001df6:	f000 f9df 	bl	80021b8 <_fflush_r>
 8001dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dfc:	b141      	cbz	r1, 8001e10 <setvbuf+0x68>
 8001dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e02:	4299      	cmp	r1, r3
 8001e04:	d002      	beq.n	8001e0c <setvbuf+0x64>
 8001e06:	4638      	mov	r0, r7
 8001e08:	f7ff fec0 	bl	8001b8c <_free_r>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8001e10:	2300      	movs	r3, #0
 8001e12:	61a3      	str	r3, [r4, #24]
 8001e14:	6063      	str	r3, [r4, #4]
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	0619      	lsls	r1, r3, #24
 8001e1a:	d503      	bpl.n	8001e24 <setvbuf+0x7c>
 8001e1c:	6921      	ldr	r1, [r4, #16]
 8001e1e:	4638      	mov	r0, r7
 8001e20:	f7ff feb4 	bl	8001b8c <_free_r>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	f1b8 0f02 	cmp.w	r8, #2
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	d06c      	beq.n	8001f10 <setvbuf+0x168>
 8001e36:	ab01      	add	r3, sp, #4
 8001e38:	466a      	mov	r2, sp
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4638      	mov	r0, r7
 8001e3e:	f000 faef 	bl	8002420 <__swhatbuf_r>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	4318      	orrs	r0, r3
 8001e46:	81a0      	strh	r0, [r4, #12]
 8001e48:	2d00      	cmp	r5, #0
 8001e4a:	d130      	bne.n	8001eae <setvbuf+0x106>
 8001e4c:	9d00      	ldr	r5, [sp, #0]
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f7ff fe8c 	bl	8001b6c <malloc>
 8001e54:	4606      	mov	r6, r0
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d155      	bne.n	8001f06 <setvbuf+0x15e>
 8001e5a:	f8dd 9000 	ldr.w	r9, [sp]
 8001e5e:	45a9      	cmp	r9, r5
 8001e60:	d14a      	bne.n	8001ef8 <setvbuf+0x150>
 8001e62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e66:	2200      	movs	r2, #0
 8001e68:	60a2      	str	r2, [r4, #8]
 8001e6a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001e6e:	6022      	str	r2, [r4, #0]
 8001e70:	6122      	str	r2, [r4, #16]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e78:	6162      	str	r2, [r4, #20]
 8001e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	07d2      	lsls	r2, r2, #31
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	d405      	bmi.n	8001e92 <setvbuf+0xea>
 8001e86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e8a:	d102      	bne.n	8001e92 <setvbuf+0xea>
 8001e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e8e:	f000 fac6 	bl	800241e <__retarget_lock_release_recursive>
 8001e92:	4628      	mov	r0, r5
 8001e94:	b003      	add	sp, #12
 8001e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <setvbuf+0x184>)
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	d101      	bne.n	8001ea4 <setvbuf+0xfc>
 8001ea0:	68bc      	ldr	r4, [r7, #8]
 8001ea2:	e793      	b.n	8001dcc <setvbuf+0x24>
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <setvbuf+0x188>)
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	bf08      	it	eq
 8001eaa:	68fc      	ldreq	r4, [r7, #12]
 8001eac:	e78e      	b.n	8001dcc <setvbuf+0x24>
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d0cd      	beq.n	8001e4e <setvbuf+0xa6>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	b913      	cbnz	r3, 8001ebc <setvbuf+0x114>
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	f000 fa12 	bl	80022e0 <__sinit>
 8001ebc:	f1b8 0f01 	cmp.w	r8, #1
 8001ec0:	bf08      	it	eq
 8001ec2:	89a3      	ldrheq	r3, [r4, #12]
 8001ec4:	6026      	str	r6, [r4, #0]
 8001ec6:	bf04      	itt	eq
 8001ec8:	f043 0301 	orreq.w	r3, r3, #1
 8001ecc:	81a3      	strheq	r3, [r4, #12]
 8001ece:	89a2      	ldrh	r2, [r4, #12]
 8001ed0:	f012 0308 	ands.w	r3, r2, #8
 8001ed4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001ed8:	d01c      	beq.n	8001f14 <setvbuf+0x16c>
 8001eda:	07d3      	lsls	r3, r2, #31
 8001edc:	bf41      	itttt	mi
 8001ede:	2300      	movmi	r3, #0
 8001ee0:	426d      	negmi	r5, r5
 8001ee2:	60a3      	strmi	r3, [r4, #8]
 8001ee4:	61a5      	strmi	r5, [r4, #24]
 8001ee6:	bf58      	it	pl
 8001ee8:	60a5      	strpl	r5, [r4, #8]
 8001eea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001eec:	f015 0501 	ands.w	r5, r5, #1
 8001ef0:	d115      	bne.n	8001f1e <setvbuf+0x176>
 8001ef2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001ef6:	e7c8      	b.n	8001e8a <setvbuf+0xe2>
 8001ef8:	4648      	mov	r0, r9
 8001efa:	f7ff fe37 	bl	8001b6c <malloc>
 8001efe:	4606      	mov	r6, r0
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d0ae      	beq.n	8001e62 <setvbuf+0xba>
 8001f04:	464d      	mov	r5, r9
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	e7d0      	b.n	8001eb2 <setvbuf+0x10a>
 8001f10:	2500      	movs	r5, #0
 8001f12:	e7a8      	b.n	8001e66 <setvbuf+0xbe>
 8001f14:	60a3      	str	r3, [r4, #8]
 8001f16:	e7e8      	b.n	8001eea <setvbuf+0x142>
 8001f18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f1c:	e7b9      	b.n	8001e92 <setvbuf+0xea>
 8001f1e:	2500      	movs	r5, #0
 8001f20:	e7b7      	b.n	8001e92 <setvbuf+0xea>
 8001f22:	bf00      	nop
 8001f24:	20000020 	.word	0x20000020
 8001f28:	08002cf0 	.word	0x08002cf0
 8001f2c:	08002d10 	.word	0x08002d10
 8001f30:	08002cd0 	.word	0x08002cd0

08001f34 <__swbuf_r>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	460e      	mov	r6, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	b118      	cbz	r0, 8001f46 <__swbuf_r+0x12>
 8001f3e:	6983      	ldr	r3, [r0, #24]
 8001f40:	b90b      	cbnz	r3, 8001f46 <__swbuf_r+0x12>
 8001f42:	f000 f9cd 	bl	80022e0 <__sinit>
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <__swbuf_r+0x98>)
 8001f48:	429c      	cmp	r4, r3
 8001f4a:	d12b      	bne.n	8001fa4 <__swbuf_r+0x70>
 8001f4c:	686c      	ldr	r4, [r5, #4]
 8001f4e:	69a3      	ldr	r3, [r4, #24]
 8001f50:	60a3      	str	r3, [r4, #8]
 8001f52:	89a3      	ldrh	r3, [r4, #12]
 8001f54:	071a      	lsls	r2, r3, #28
 8001f56:	d52f      	bpl.n	8001fb8 <__swbuf_r+0x84>
 8001f58:	6923      	ldr	r3, [r4, #16]
 8001f5a:	b36b      	cbz	r3, 8001fb8 <__swbuf_r+0x84>
 8001f5c:	6923      	ldr	r3, [r4, #16]
 8001f5e:	6820      	ldr	r0, [r4, #0]
 8001f60:	1ac0      	subs	r0, r0, r3
 8001f62:	6963      	ldr	r3, [r4, #20]
 8001f64:	b2f6      	uxtb	r6, r6
 8001f66:	4283      	cmp	r3, r0
 8001f68:	4637      	mov	r7, r6
 8001f6a:	dc04      	bgt.n	8001f76 <__swbuf_r+0x42>
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f000 f922 	bl	80021b8 <_fflush_r>
 8001f74:	bb30      	cbnz	r0, 8001fc4 <__swbuf_r+0x90>
 8001f76:	68a3      	ldr	r3, [r4, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60a3      	str	r3, [r4, #8]
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	6022      	str	r2, [r4, #0]
 8001f82:	701e      	strb	r6, [r3, #0]
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	3001      	adds	r0, #1
 8001f88:	4283      	cmp	r3, r0
 8001f8a:	d004      	beq.n	8001f96 <__swbuf_r+0x62>
 8001f8c:	89a3      	ldrh	r3, [r4, #12]
 8001f8e:	07db      	lsls	r3, r3, #31
 8001f90:	d506      	bpl.n	8001fa0 <__swbuf_r+0x6c>
 8001f92:	2e0a      	cmp	r6, #10
 8001f94:	d104      	bne.n	8001fa0 <__swbuf_r+0x6c>
 8001f96:	4621      	mov	r1, r4
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f000 f90d 	bl	80021b8 <_fflush_r>
 8001f9e:	b988      	cbnz	r0, 8001fc4 <__swbuf_r+0x90>
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <__swbuf_r+0x9c>)
 8001fa6:	429c      	cmp	r4, r3
 8001fa8:	d101      	bne.n	8001fae <__swbuf_r+0x7a>
 8001faa:	68ac      	ldr	r4, [r5, #8]
 8001fac:	e7cf      	b.n	8001f4e <__swbuf_r+0x1a>
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <__swbuf_r+0xa0>)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	bf08      	it	eq
 8001fb4:	68ec      	ldreq	r4, [r5, #12]
 8001fb6:	e7ca      	b.n	8001f4e <__swbuf_r+0x1a>
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f000 f80c 	bl	8001fd8 <__swsetup_r>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d0cb      	beq.n	8001f5c <__swbuf_r+0x28>
 8001fc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001fc8:	e7ea      	b.n	8001fa0 <__swbuf_r+0x6c>
 8001fca:	bf00      	nop
 8001fcc:	08002cf0 	.word	0x08002cf0
 8001fd0:	08002d10 	.word	0x08002d10
 8001fd4:	08002cd0 	.word	0x08002cd0

08001fd8 <__swsetup_r>:
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <__swsetup_r+0xcc>)
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	681d      	ldr	r5, [r3, #0]
 8001fde:	4606      	mov	r6, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	b125      	cbz	r5, 8001fee <__swsetup_r+0x16>
 8001fe4:	69ab      	ldr	r3, [r5, #24]
 8001fe6:	b913      	cbnz	r3, 8001fee <__swsetup_r+0x16>
 8001fe8:	4628      	mov	r0, r5
 8001fea:	f000 f979 	bl	80022e0 <__sinit>
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <__swsetup_r+0xd0>)
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d10f      	bne.n	8002014 <__swsetup_r+0x3c>
 8001ff4:	686c      	ldr	r4, [r5, #4]
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ffc:	0719      	lsls	r1, r3, #28
 8001ffe:	d42c      	bmi.n	800205a <__swsetup_r+0x82>
 8002000:	06dd      	lsls	r5, r3, #27
 8002002:	d411      	bmi.n	8002028 <__swsetup_r+0x50>
 8002004:	2309      	movs	r3, #9
 8002006:	6033      	str	r3, [r6, #0]
 8002008:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800200c:	81a3      	strh	r3, [r4, #12]
 800200e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002012:	e03e      	b.n	8002092 <__swsetup_r+0xba>
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <__swsetup_r+0xd4>)
 8002016:	429c      	cmp	r4, r3
 8002018:	d101      	bne.n	800201e <__swsetup_r+0x46>
 800201a:	68ac      	ldr	r4, [r5, #8]
 800201c:	e7eb      	b.n	8001ff6 <__swsetup_r+0x1e>
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <__swsetup_r+0xd8>)
 8002020:	429c      	cmp	r4, r3
 8002022:	bf08      	it	eq
 8002024:	68ec      	ldreq	r4, [r5, #12]
 8002026:	e7e6      	b.n	8001ff6 <__swsetup_r+0x1e>
 8002028:	0758      	lsls	r0, r3, #29
 800202a:	d512      	bpl.n	8002052 <__swsetup_r+0x7a>
 800202c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800202e:	b141      	cbz	r1, 8002042 <__swsetup_r+0x6a>
 8002030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002034:	4299      	cmp	r1, r3
 8002036:	d002      	beq.n	800203e <__swsetup_r+0x66>
 8002038:	4630      	mov	r0, r6
 800203a:	f7ff fda7 	bl	8001b8c <_free_r>
 800203e:	2300      	movs	r3, #0
 8002040:	6363      	str	r3, [r4, #52]	; 0x34
 8002042:	89a3      	ldrh	r3, [r4, #12]
 8002044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002048:	81a3      	strh	r3, [r4, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	6063      	str	r3, [r4, #4]
 800204e:	6923      	ldr	r3, [r4, #16]
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	89a3      	ldrh	r3, [r4, #12]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	6923      	ldr	r3, [r4, #16]
 800205c:	b94b      	cbnz	r3, 8002072 <__swsetup_r+0x9a>
 800205e:	89a3      	ldrh	r3, [r4, #12]
 8002060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002068:	d003      	beq.n	8002072 <__swsetup_r+0x9a>
 800206a:	4621      	mov	r1, r4
 800206c:	4630      	mov	r0, r6
 800206e:	f000 f9fd 	bl	800246c <__smakebuf_r>
 8002072:	89a0      	ldrh	r0, [r4, #12]
 8002074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002078:	f010 0301 	ands.w	r3, r0, #1
 800207c:	d00a      	beq.n	8002094 <__swsetup_r+0xbc>
 800207e:	2300      	movs	r3, #0
 8002080:	60a3      	str	r3, [r4, #8]
 8002082:	6963      	ldr	r3, [r4, #20]
 8002084:	425b      	negs	r3, r3
 8002086:	61a3      	str	r3, [r4, #24]
 8002088:	6923      	ldr	r3, [r4, #16]
 800208a:	b943      	cbnz	r3, 800209e <__swsetup_r+0xc6>
 800208c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002090:	d1ba      	bne.n	8002008 <__swsetup_r+0x30>
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	0781      	lsls	r1, r0, #30
 8002096:	bf58      	it	pl
 8002098:	6963      	ldrpl	r3, [r4, #20]
 800209a:	60a3      	str	r3, [r4, #8]
 800209c:	e7f4      	b.n	8002088 <__swsetup_r+0xb0>
 800209e:	2000      	movs	r0, #0
 80020a0:	e7f7      	b.n	8002092 <__swsetup_r+0xba>
 80020a2:	bf00      	nop
 80020a4:	20000020 	.word	0x20000020
 80020a8:	08002cf0 	.word	0x08002cf0
 80020ac:	08002d10 	.word	0x08002d10
 80020b0:	08002cd0 	.word	0x08002cd0

080020b4 <__sflush_r>:
 80020b4:	898a      	ldrh	r2, [r1, #12]
 80020b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b8:	4605      	mov	r5, r0
 80020ba:	0710      	lsls	r0, r2, #28
 80020bc:	460c      	mov	r4, r1
 80020be:	d457      	bmi.n	8002170 <__sflush_r+0xbc>
 80020c0:	684b      	ldr	r3, [r1, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dc04      	bgt.n	80020d0 <__sflush_r+0x1c>
 80020c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	dc01      	bgt.n	80020d0 <__sflush_r+0x1c>
 80020cc:	2000      	movs	r0, #0
 80020ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020d2:	2e00      	cmp	r6, #0
 80020d4:	d0fa      	beq.n	80020cc <__sflush_r+0x18>
 80020d6:	2300      	movs	r3, #0
 80020d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020dc:	682f      	ldr	r7, [r5, #0]
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	d032      	beq.n	8002148 <__sflush_r+0x94>
 80020e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	075a      	lsls	r2, r3, #29
 80020e8:	d505      	bpl.n	80020f6 <__sflush_r+0x42>
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	1ac0      	subs	r0, r0, r3
 80020ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020f0:	b10b      	cbz	r3, 80020f6 <__sflush_r+0x42>
 80020f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	4602      	mov	r2, r0
 80020fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020fc:	6a21      	ldr	r1, [r4, #32]
 80020fe:	4628      	mov	r0, r5
 8002100:	47b0      	blx	r6
 8002102:	1c43      	adds	r3, r0, #1
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	d106      	bne.n	8002116 <__sflush_r+0x62>
 8002108:	6829      	ldr	r1, [r5, #0]
 800210a:	291d      	cmp	r1, #29
 800210c:	d82c      	bhi.n	8002168 <__sflush_r+0xb4>
 800210e:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <__sflush_r+0x100>)
 8002110:	40ca      	lsrs	r2, r1
 8002112:	07d6      	lsls	r6, r2, #31
 8002114:	d528      	bpl.n	8002168 <__sflush_r+0xb4>
 8002116:	2200      	movs	r2, #0
 8002118:	6062      	str	r2, [r4, #4]
 800211a:	04d9      	lsls	r1, r3, #19
 800211c:	6922      	ldr	r2, [r4, #16]
 800211e:	6022      	str	r2, [r4, #0]
 8002120:	d504      	bpl.n	800212c <__sflush_r+0x78>
 8002122:	1c42      	adds	r2, r0, #1
 8002124:	d101      	bne.n	800212a <__sflush_r+0x76>
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	b903      	cbnz	r3, 800212c <__sflush_r+0x78>
 800212a:	6560      	str	r0, [r4, #84]	; 0x54
 800212c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800212e:	602f      	str	r7, [r5, #0]
 8002130:	2900      	cmp	r1, #0
 8002132:	d0cb      	beq.n	80020cc <__sflush_r+0x18>
 8002134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002138:	4299      	cmp	r1, r3
 800213a:	d002      	beq.n	8002142 <__sflush_r+0x8e>
 800213c:	4628      	mov	r0, r5
 800213e:	f7ff fd25 	bl	8001b8c <_free_r>
 8002142:	2000      	movs	r0, #0
 8002144:	6360      	str	r0, [r4, #52]	; 0x34
 8002146:	e7c2      	b.n	80020ce <__sflush_r+0x1a>
 8002148:	6a21      	ldr	r1, [r4, #32]
 800214a:	2301      	movs	r3, #1
 800214c:	4628      	mov	r0, r5
 800214e:	47b0      	blx	r6
 8002150:	1c41      	adds	r1, r0, #1
 8002152:	d1c7      	bne.n	80020e4 <__sflush_r+0x30>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0c4      	beq.n	80020e4 <__sflush_r+0x30>
 800215a:	2b1d      	cmp	r3, #29
 800215c:	d001      	beq.n	8002162 <__sflush_r+0xae>
 800215e:	2b16      	cmp	r3, #22
 8002160:	d101      	bne.n	8002166 <__sflush_r+0xb2>
 8002162:	602f      	str	r7, [r5, #0]
 8002164:	e7b2      	b.n	80020cc <__sflush_r+0x18>
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	81a3      	strh	r3, [r4, #12]
 800216e:	e7ae      	b.n	80020ce <__sflush_r+0x1a>
 8002170:	690f      	ldr	r7, [r1, #16]
 8002172:	2f00      	cmp	r7, #0
 8002174:	d0aa      	beq.n	80020cc <__sflush_r+0x18>
 8002176:	0793      	lsls	r3, r2, #30
 8002178:	680e      	ldr	r6, [r1, #0]
 800217a:	bf08      	it	eq
 800217c:	694b      	ldreq	r3, [r1, #20]
 800217e:	600f      	str	r7, [r1, #0]
 8002180:	bf18      	it	ne
 8002182:	2300      	movne	r3, #0
 8002184:	1bf6      	subs	r6, r6, r7
 8002186:	608b      	str	r3, [r1, #8]
 8002188:	2e00      	cmp	r6, #0
 800218a:	dd9f      	ble.n	80020cc <__sflush_r+0x18>
 800218c:	6a21      	ldr	r1, [r4, #32]
 800218e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002192:	4633      	mov	r3, r6
 8002194:	463a      	mov	r2, r7
 8002196:	4628      	mov	r0, r5
 8002198:	47e0      	blx	ip
 800219a:	2800      	cmp	r0, #0
 800219c:	dc06      	bgt.n	80021ac <__sflush_r+0xf8>
 800219e:	89a3      	ldrh	r3, [r4, #12]
 80021a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a4:	81a3      	strh	r3, [r4, #12]
 80021a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021aa:	e790      	b.n	80020ce <__sflush_r+0x1a>
 80021ac:	4407      	add	r7, r0
 80021ae:	1a36      	subs	r6, r6, r0
 80021b0:	e7ea      	b.n	8002188 <__sflush_r+0xd4>
 80021b2:	bf00      	nop
 80021b4:	20400001 	.word	0x20400001

080021b8 <_fflush_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	690b      	ldr	r3, [r1, #16]
 80021bc:	4605      	mov	r5, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	b913      	cbnz	r3, 80021c8 <_fflush_r+0x10>
 80021c2:	2500      	movs	r5, #0
 80021c4:	4628      	mov	r0, r5
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	b118      	cbz	r0, 80021d2 <_fflush_r+0x1a>
 80021ca:	6983      	ldr	r3, [r0, #24]
 80021cc:	b90b      	cbnz	r3, 80021d2 <_fflush_r+0x1a>
 80021ce:	f000 f887 	bl	80022e0 <__sinit>
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <_fflush_r+0x6c>)
 80021d4:	429c      	cmp	r4, r3
 80021d6:	d11b      	bne.n	8002210 <_fflush_r+0x58>
 80021d8:	686c      	ldr	r4, [r5, #4]
 80021da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ef      	beq.n	80021c2 <_fflush_r+0xa>
 80021e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021e4:	07d0      	lsls	r0, r2, #31
 80021e6:	d404      	bmi.n	80021f2 <_fflush_r+0x3a>
 80021e8:	0599      	lsls	r1, r3, #22
 80021ea:	d402      	bmi.n	80021f2 <_fflush_r+0x3a>
 80021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ee:	f000 f915 	bl	800241c <__retarget_lock_acquire_recursive>
 80021f2:	4628      	mov	r0, r5
 80021f4:	4621      	mov	r1, r4
 80021f6:	f7ff ff5d 	bl	80020b4 <__sflush_r>
 80021fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021fc:	07da      	lsls	r2, r3, #31
 80021fe:	4605      	mov	r5, r0
 8002200:	d4e0      	bmi.n	80021c4 <_fflush_r+0xc>
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	059b      	lsls	r3, r3, #22
 8002206:	d4dd      	bmi.n	80021c4 <_fflush_r+0xc>
 8002208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800220a:	f000 f908 	bl	800241e <__retarget_lock_release_recursive>
 800220e:	e7d9      	b.n	80021c4 <_fflush_r+0xc>
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <_fflush_r+0x70>)
 8002212:	429c      	cmp	r4, r3
 8002214:	d101      	bne.n	800221a <_fflush_r+0x62>
 8002216:	68ac      	ldr	r4, [r5, #8]
 8002218:	e7df      	b.n	80021da <_fflush_r+0x22>
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <_fflush_r+0x74>)
 800221c:	429c      	cmp	r4, r3
 800221e:	bf08      	it	eq
 8002220:	68ec      	ldreq	r4, [r5, #12]
 8002222:	e7da      	b.n	80021da <_fflush_r+0x22>
 8002224:	08002cf0 	.word	0x08002cf0
 8002228:	08002d10 	.word	0x08002d10
 800222c:	08002cd0 	.word	0x08002cd0

08002230 <std>:
 8002230:	2300      	movs	r3, #0
 8002232:	b510      	push	{r4, lr}
 8002234:	4604      	mov	r4, r0
 8002236:	e9c0 3300 	strd	r3, r3, [r0]
 800223a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800223e:	6083      	str	r3, [r0, #8]
 8002240:	8181      	strh	r1, [r0, #12]
 8002242:	6643      	str	r3, [r0, #100]	; 0x64
 8002244:	81c2      	strh	r2, [r0, #14]
 8002246:	6183      	str	r3, [r0, #24]
 8002248:	4619      	mov	r1, r3
 800224a:	2208      	movs	r2, #8
 800224c:	305c      	adds	r0, #92	; 0x5c
 800224e:	f7ff fc95 	bl	8001b7c <memset>
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <std+0x38>)
 8002254:	6263      	str	r3, [r4, #36]	; 0x24
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <std+0x3c>)
 8002258:	62a3      	str	r3, [r4, #40]	; 0x28
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <std+0x40>)
 800225c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <std+0x44>)
 8002260:	6224      	str	r4, [r4, #32]
 8002262:	6323      	str	r3, [r4, #48]	; 0x30
 8002264:	bd10      	pop	{r4, pc}
 8002266:	bf00      	nop
 8002268:	08002add 	.word	0x08002add
 800226c:	08002aff 	.word	0x08002aff
 8002270:	08002b37 	.word	0x08002b37
 8002274:	08002b5b 	.word	0x08002b5b

08002278 <_cleanup_r>:
 8002278:	4901      	ldr	r1, [pc, #4]	; (8002280 <_cleanup_r+0x8>)
 800227a:	f000 b8af 	b.w	80023dc <_fwalk_reent>
 800227e:	bf00      	nop
 8002280:	080021b9 	.word	0x080021b9

08002284 <__sfmoreglue>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2268      	movs	r2, #104	; 0x68
 8002288:	1e4d      	subs	r5, r1, #1
 800228a:	4355      	muls	r5, r2
 800228c:	460e      	mov	r6, r1
 800228e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002292:	f7ff fce5 	bl	8001c60 <_malloc_r>
 8002296:	4604      	mov	r4, r0
 8002298:	b140      	cbz	r0, 80022ac <__sfmoreglue+0x28>
 800229a:	2100      	movs	r1, #0
 800229c:	e9c0 1600 	strd	r1, r6, [r0]
 80022a0:	300c      	adds	r0, #12
 80022a2:	60a0      	str	r0, [r4, #8]
 80022a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022a8:	f7ff fc68 	bl	8001b7c <memset>
 80022ac:	4620      	mov	r0, r4
 80022ae:	bd70      	pop	{r4, r5, r6, pc}

080022b0 <__sfp_lock_acquire>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__sfp_lock_acquire+0x8>)
 80022b2:	f000 b8b3 	b.w	800241c <__retarget_lock_acquire_recursive>
 80022b6:	bf00      	nop
 80022b8:	200000e5 	.word	0x200000e5

080022bc <__sfp_lock_release>:
 80022bc:	4801      	ldr	r0, [pc, #4]	; (80022c4 <__sfp_lock_release+0x8>)
 80022be:	f000 b8ae 	b.w	800241e <__retarget_lock_release_recursive>
 80022c2:	bf00      	nop
 80022c4:	200000e5 	.word	0x200000e5

080022c8 <__sinit_lock_acquire>:
 80022c8:	4801      	ldr	r0, [pc, #4]	; (80022d0 <__sinit_lock_acquire+0x8>)
 80022ca:	f000 b8a7 	b.w	800241c <__retarget_lock_acquire_recursive>
 80022ce:	bf00      	nop
 80022d0:	200000e6 	.word	0x200000e6

080022d4 <__sinit_lock_release>:
 80022d4:	4801      	ldr	r0, [pc, #4]	; (80022dc <__sinit_lock_release+0x8>)
 80022d6:	f000 b8a2 	b.w	800241e <__retarget_lock_release_recursive>
 80022da:	bf00      	nop
 80022dc:	200000e6 	.word	0x200000e6

080022e0 <__sinit>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	f7ff fff0 	bl	80022c8 <__sinit_lock_acquire>
 80022e8:	69a3      	ldr	r3, [r4, #24]
 80022ea:	b11b      	cbz	r3, 80022f4 <__sinit+0x14>
 80022ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f0:	f7ff bff0 	b.w	80022d4 <__sinit_lock_release>
 80022f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022f8:	6523      	str	r3, [r4, #80]	; 0x50
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <__sinit+0x68>)
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <__sinit+0x6c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	62a2      	str	r2, [r4, #40]	; 0x28
 8002302:	42a3      	cmp	r3, r4
 8002304:	bf04      	itt	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	61a3      	streq	r3, [r4, #24]
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f820 	bl	8002350 <__sfp>
 8002310:	6060      	str	r0, [r4, #4]
 8002312:	4620      	mov	r0, r4
 8002314:	f000 f81c 	bl	8002350 <__sfp>
 8002318:	60a0      	str	r0, [r4, #8]
 800231a:	4620      	mov	r0, r4
 800231c:	f000 f818 	bl	8002350 <__sfp>
 8002320:	2200      	movs	r2, #0
 8002322:	60e0      	str	r0, [r4, #12]
 8002324:	2104      	movs	r1, #4
 8002326:	6860      	ldr	r0, [r4, #4]
 8002328:	f7ff ff82 	bl	8002230 <std>
 800232c:	68a0      	ldr	r0, [r4, #8]
 800232e:	2201      	movs	r2, #1
 8002330:	2109      	movs	r1, #9
 8002332:	f7ff ff7d 	bl	8002230 <std>
 8002336:	68e0      	ldr	r0, [r4, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	2112      	movs	r1, #18
 800233c:	f7ff ff78 	bl	8002230 <std>
 8002340:	2301      	movs	r3, #1
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	e7d2      	b.n	80022ec <__sinit+0xc>
 8002346:	bf00      	nop
 8002348:	08002ccc 	.word	0x08002ccc
 800234c:	08002279 	.word	0x08002279

08002350 <__sfp>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4607      	mov	r7, r0
 8002354:	f7ff ffac 	bl	80022b0 <__sfp_lock_acquire>
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <__sfp+0x84>)
 800235a:	681e      	ldr	r6, [r3, #0]
 800235c:	69b3      	ldr	r3, [r6, #24]
 800235e:	b913      	cbnz	r3, 8002366 <__sfp+0x16>
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff ffbd 	bl	80022e0 <__sinit>
 8002366:	3648      	adds	r6, #72	; 0x48
 8002368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800236c:	3b01      	subs	r3, #1
 800236e:	d503      	bpl.n	8002378 <__sfp+0x28>
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	b30b      	cbz	r3, 80023b8 <__sfp+0x68>
 8002374:	6836      	ldr	r6, [r6, #0]
 8002376:	e7f7      	b.n	8002368 <__sfp+0x18>
 8002378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800237c:	b9d5      	cbnz	r5, 80023b4 <__sfp+0x64>
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <__sfp+0x88>)
 8002380:	60e3      	str	r3, [r4, #12]
 8002382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002386:	6665      	str	r5, [r4, #100]	; 0x64
 8002388:	f000 f847 	bl	800241a <__retarget_lock_init_recursive>
 800238c:	f7ff ff96 	bl	80022bc <__sfp_lock_release>
 8002390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002398:	6025      	str	r5, [r4, #0]
 800239a:	61a5      	str	r5, [r4, #24]
 800239c:	2208      	movs	r2, #8
 800239e:	4629      	mov	r1, r5
 80023a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023a4:	f7ff fbea 	bl	8001b7c <memset>
 80023a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023b0:	4620      	mov	r0, r4
 80023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b4:	3468      	adds	r4, #104	; 0x68
 80023b6:	e7d9      	b.n	800236c <__sfp+0x1c>
 80023b8:	2104      	movs	r1, #4
 80023ba:	4638      	mov	r0, r7
 80023bc:	f7ff ff62 	bl	8002284 <__sfmoreglue>
 80023c0:	4604      	mov	r4, r0
 80023c2:	6030      	str	r0, [r6, #0]
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d1d5      	bne.n	8002374 <__sfp+0x24>
 80023c8:	f7ff ff78 	bl	80022bc <__sfp_lock_release>
 80023cc:	230c      	movs	r3, #12
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	e7ee      	b.n	80023b0 <__sfp+0x60>
 80023d2:	bf00      	nop
 80023d4:	08002ccc 	.word	0x08002ccc
 80023d8:	ffff0001 	.word	0xffff0001

080023dc <_fwalk_reent>:
 80023dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e0:	4606      	mov	r6, r0
 80023e2:	4688      	mov	r8, r1
 80023e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023e8:	2700      	movs	r7, #0
 80023ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023ee:	f1b9 0901 	subs.w	r9, r9, #1
 80023f2:	d505      	bpl.n	8002400 <_fwalk_reent+0x24>
 80023f4:	6824      	ldr	r4, [r4, #0]
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	d1f7      	bne.n	80023ea <_fwalk_reent+0xe>
 80023fa:	4638      	mov	r0, r7
 80023fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002400:	89ab      	ldrh	r3, [r5, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d907      	bls.n	8002416 <_fwalk_reent+0x3a>
 8002406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800240a:	3301      	adds	r3, #1
 800240c:	d003      	beq.n	8002416 <_fwalk_reent+0x3a>
 800240e:	4629      	mov	r1, r5
 8002410:	4630      	mov	r0, r6
 8002412:	47c0      	blx	r8
 8002414:	4307      	orrs	r7, r0
 8002416:	3568      	adds	r5, #104	; 0x68
 8002418:	e7e9      	b.n	80023ee <_fwalk_reent+0x12>

0800241a <__retarget_lock_init_recursive>:
 800241a:	4770      	bx	lr

0800241c <__retarget_lock_acquire_recursive>:
 800241c:	4770      	bx	lr

0800241e <__retarget_lock_release_recursive>:
 800241e:	4770      	bx	lr

08002420 <__swhatbuf_r>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	460e      	mov	r6, r1
 8002424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002428:	2900      	cmp	r1, #0
 800242a:	b096      	sub	sp, #88	; 0x58
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
 8002430:	da08      	bge.n	8002444 <__swhatbuf_r+0x24>
 8002432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	602a      	str	r2, [r5, #0]
 800243a:	061a      	lsls	r2, r3, #24
 800243c:	d410      	bmi.n	8002460 <__swhatbuf_r+0x40>
 800243e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002442:	e00e      	b.n	8002462 <__swhatbuf_r+0x42>
 8002444:	466a      	mov	r2, sp
 8002446:	f000 fbaf 	bl	8002ba8 <_fstat_r>
 800244a:	2800      	cmp	r0, #0
 800244c:	dbf1      	blt.n	8002432 <__swhatbuf_r+0x12>
 800244e:	9a01      	ldr	r2, [sp, #4]
 8002450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002458:	425a      	negs	r2, r3
 800245a:	415a      	adcs	r2, r3
 800245c:	602a      	str	r2, [r5, #0]
 800245e:	e7ee      	b.n	800243e <__swhatbuf_r+0x1e>
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	2000      	movs	r0, #0
 8002464:	6023      	str	r3, [r4, #0]
 8002466:	b016      	add	sp, #88	; 0x58
 8002468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800246c <__smakebuf_r>:
 800246c:	898b      	ldrh	r3, [r1, #12]
 800246e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002470:	079d      	lsls	r5, r3, #30
 8002472:	4606      	mov	r6, r0
 8002474:	460c      	mov	r4, r1
 8002476:	d507      	bpl.n	8002488 <__smakebuf_r+0x1c>
 8002478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	6123      	str	r3, [r4, #16]
 8002480:	2301      	movs	r3, #1
 8002482:	6163      	str	r3, [r4, #20]
 8002484:	b002      	add	sp, #8
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	ab01      	add	r3, sp, #4
 800248a:	466a      	mov	r2, sp
 800248c:	f7ff ffc8 	bl	8002420 <__swhatbuf_r>
 8002490:	9900      	ldr	r1, [sp, #0]
 8002492:	4605      	mov	r5, r0
 8002494:	4630      	mov	r0, r6
 8002496:	f7ff fbe3 	bl	8001c60 <_malloc_r>
 800249a:	b948      	cbnz	r0, 80024b0 <__smakebuf_r+0x44>
 800249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024a0:	059a      	lsls	r2, r3, #22
 80024a2:	d4ef      	bmi.n	8002484 <__smakebuf_r+0x18>
 80024a4:	f023 0303 	bic.w	r3, r3, #3
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	e7e3      	b.n	8002478 <__smakebuf_r+0xc>
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <__smakebuf_r+0x7c>)
 80024b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	6020      	str	r0, [r4, #0]
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	9b00      	ldr	r3, [sp, #0]
 80024c0:	6163      	str	r3, [r4, #20]
 80024c2:	9b01      	ldr	r3, [sp, #4]
 80024c4:	6120      	str	r0, [r4, #16]
 80024c6:	b15b      	cbz	r3, 80024e0 <__smakebuf_r+0x74>
 80024c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024cc:	4630      	mov	r0, r6
 80024ce:	f000 fb7d 	bl	8002bcc <_isatty_r>
 80024d2:	b128      	cbz	r0, 80024e0 <__smakebuf_r+0x74>
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	81a3      	strh	r3, [r4, #12]
 80024e0:	89a0      	ldrh	r0, [r4, #12]
 80024e2:	4305      	orrs	r5, r0
 80024e4:	81a5      	strh	r5, [r4, #12]
 80024e6:	e7cd      	b.n	8002484 <__smakebuf_r+0x18>
 80024e8:	08002279 	.word	0x08002279

080024ec <__malloc_lock>:
 80024ec:	4801      	ldr	r0, [pc, #4]	; (80024f4 <__malloc_lock+0x8>)
 80024ee:	f7ff bf95 	b.w	800241c <__retarget_lock_acquire_recursive>
 80024f2:	bf00      	nop
 80024f4:	200000e4 	.word	0x200000e4

080024f8 <__malloc_unlock>:
 80024f8:	4801      	ldr	r0, [pc, #4]	; (8002500 <__malloc_unlock+0x8>)
 80024fa:	f7ff bf90 	b.w	800241e <__retarget_lock_release_recursive>
 80024fe:	bf00      	nop
 8002500:	200000e4 	.word	0x200000e4

08002504 <__sfputc_r>:
 8002504:	6893      	ldr	r3, [r2, #8]
 8002506:	3b01      	subs	r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	b410      	push	{r4}
 800250c:	6093      	str	r3, [r2, #8]
 800250e:	da07      	bge.n	8002520 <__sfputc_r+0x1c>
 8002510:	6994      	ldr	r4, [r2, #24]
 8002512:	42a3      	cmp	r3, r4
 8002514:	db01      	blt.n	800251a <__sfputc_r+0x16>
 8002516:	290a      	cmp	r1, #10
 8002518:	d102      	bne.n	8002520 <__sfputc_r+0x1c>
 800251a:	bc10      	pop	{r4}
 800251c:	f7ff bd0a 	b.w	8001f34 <__swbuf_r>
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	1c58      	adds	r0, r3, #1
 8002524:	6010      	str	r0, [r2, #0]
 8002526:	7019      	strb	r1, [r3, #0]
 8002528:	4608      	mov	r0, r1
 800252a:	bc10      	pop	{r4}
 800252c:	4770      	bx	lr

0800252e <__sfputs_r>:
 800252e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002530:	4606      	mov	r6, r0
 8002532:	460f      	mov	r7, r1
 8002534:	4614      	mov	r4, r2
 8002536:	18d5      	adds	r5, r2, r3
 8002538:	42ac      	cmp	r4, r5
 800253a:	d101      	bne.n	8002540 <__sfputs_r+0x12>
 800253c:	2000      	movs	r0, #0
 800253e:	e007      	b.n	8002550 <__sfputs_r+0x22>
 8002540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002544:	463a      	mov	r2, r7
 8002546:	4630      	mov	r0, r6
 8002548:	f7ff ffdc 	bl	8002504 <__sfputc_r>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d1f3      	bne.n	8002538 <__sfputs_r+0xa>
 8002550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002554 <_vfiprintf_r>:
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	460d      	mov	r5, r1
 800255a:	b09d      	sub	sp, #116	; 0x74
 800255c:	4614      	mov	r4, r2
 800255e:	4698      	mov	r8, r3
 8002560:	4606      	mov	r6, r0
 8002562:	b118      	cbz	r0, 800256c <_vfiprintf_r+0x18>
 8002564:	6983      	ldr	r3, [r0, #24]
 8002566:	b90b      	cbnz	r3, 800256c <_vfiprintf_r+0x18>
 8002568:	f7ff feba 	bl	80022e0 <__sinit>
 800256c:	4b89      	ldr	r3, [pc, #548]	; (8002794 <_vfiprintf_r+0x240>)
 800256e:	429d      	cmp	r5, r3
 8002570:	d11b      	bne.n	80025aa <_vfiprintf_r+0x56>
 8002572:	6875      	ldr	r5, [r6, #4]
 8002574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002576:	07d9      	lsls	r1, r3, #31
 8002578:	d405      	bmi.n	8002586 <_vfiprintf_r+0x32>
 800257a:	89ab      	ldrh	r3, [r5, #12]
 800257c:	059a      	lsls	r2, r3, #22
 800257e:	d402      	bmi.n	8002586 <_vfiprintf_r+0x32>
 8002580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002582:	f7ff ff4b 	bl	800241c <__retarget_lock_acquire_recursive>
 8002586:	89ab      	ldrh	r3, [r5, #12]
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	d501      	bpl.n	8002590 <_vfiprintf_r+0x3c>
 800258c:	692b      	ldr	r3, [r5, #16]
 800258e:	b9eb      	cbnz	r3, 80025cc <_vfiprintf_r+0x78>
 8002590:	4629      	mov	r1, r5
 8002592:	4630      	mov	r0, r6
 8002594:	f7ff fd20 	bl	8001fd8 <__swsetup_r>
 8002598:	b1c0      	cbz	r0, 80025cc <_vfiprintf_r+0x78>
 800259a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800259c:	07dc      	lsls	r4, r3, #31
 800259e:	d50e      	bpl.n	80025be <_vfiprintf_r+0x6a>
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a4:	b01d      	add	sp, #116	; 0x74
 80025a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025aa:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <_vfiprintf_r+0x244>)
 80025ac:	429d      	cmp	r5, r3
 80025ae:	d101      	bne.n	80025b4 <_vfiprintf_r+0x60>
 80025b0:	68b5      	ldr	r5, [r6, #8]
 80025b2:	e7df      	b.n	8002574 <_vfiprintf_r+0x20>
 80025b4:	4b79      	ldr	r3, [pc, #484]	; (800279c <_vfiprintf_r+0x248>)
 80025b6:	429d      	cmp	r5, r3
 80025b8:	bf08      	it	eq
 80025ba:	68f5      	ldreq	r5, [r6, #12]
 80025bc:	e7da      	b.n	8002574 <_vfiprintf_r+0x20>
 80025be:	89ab      	ldrh	r3, [r5, #12]
 80025c0:	0598      	lsls	r0, r3, #22
 80025c2:	d4ed      	bmi.n	80025a0 <_vfiprintf_r+0x4c>
 80025c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025c6:	f7ff ff2a 	bl	800241e <__retarget_lock_release_recursive>
 80025ca:	e7e9      	b.n	80025a0 <_vfiprintf_r+0x4c>
 80025cc:	2300      	movs	r3, #0
 80025ce:	9309      	str	r3, [sp, #36]	; 0x24
 80025d0:	2320      	movs	r3, #32
 80025d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80025da:	2330      	movs	r3, #48	; 0x30
 80025dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80027a0 <_vfiprintf_r+0x24c>
 80025e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025e4:	f04f 0901 	mov.w	r9, #1
 80025e8:	4623      	mov	r3, r4
 80025ea:	469a      	mov	sl, r3
 80025ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025f0:	b10a      	cbz	r2, 80025f6 <_vfiprintf_r+0xa2>
 80025f2:	2a25      	cmp	r2, #37	; 0x25
 80025f4:	d1f9      	bne.n	80025ea <_vfiprintf_r+0x96>
 80025f6:	ebba 0b04 	subs.w	fp, sl, r4
 80025fa:	d00b      	beq.n	8002614 <_vfiprintf_r+0xc0>
 80025fc:	465b      	mov	r3, fp
 80025fe:	4622      	mov	r2, r4
 8002600:	4629      	mov	r1, r5
 8002602:	4630      	mov	r0, r6
 8002604:	f7ff ff93 	bl	800252e <__sfputs_r>
 8002608:	3001      	adds	r0, #1
 800260a:	f000 80aa 	beq.w	8002762 <_vfiprintf_r+0x20e>
 800260e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002610:	445a      	add	r2, fp
 8002612:	9209      	str	r2, [sp, #36]	; 0x24
 8002614:	f89a 3000 	ldrb.w	r3, [sl]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a2 	beq.w	8002762 <_vfiprintf_r+0x20e>
 800261e:	2300      	movs	r3, #0
 8002620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002628:	f10a 0a01 	add.w	sl, sl, #1
 800262c:	9304      	str	r3, [sp, #16]
 800262e:	9307      	str	r3, [sp, #28]
 8002630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002634:	931a      	str	r3, [sp, #104]	; 0x68
 8002636:	4654      	mov	r4, sl
 8002638:	2205      	movs	r2, #5
 800263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800263e:	4858      	ldr	r0, [pc, #352]	; (80027a0 <_vfiprintf_r+0x24c>)
 8002640:	f7fd fdd6 	bl	80001f0 <memchr>
 8002644:	9a04      	ldr	r2, [sp, #16]
 8002646:	b9d8      	cbnz	r0, 8002680 <_vfiprintf_r+0x12c>
 8002648:	06d1      	lsls	r1, r2, #27
 800264a:	bf44      	itt	mi
 800264c:	2320      	movmi	r3, #32
 800264e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002652:	0713      	lsls	r3, r2, #28
 8002654:	bf44      	itt	mi
 8002656:	232b      	movmi	r3, #43	; 0x2b
 8002658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800265c:	f89a 3000 	ldrb.w	r3, [sl]
 8002660:	2b2a      	cmp	r3, #42	; 0x2a
 8002662:	d015      	beq.n	8002690 <_vfiprintf_r+0x13c>
 8002664:	9a07      	ldr	r2, [sp, #28]
 8002666:	4654      	mov	r4, sl
 8002668:	2000      	movs	r0, #0
 800266a:	f04f 0c0a 	mov.w	ip, #10
 800266e:	4621      	mov	r1, r4
 8002670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002674:	3b30      	subs	r3, #48	; 0x30
 8002676:	2b09      	cmp	r3, #9
 8002678:	d94e      	bls.n	8002718 <_vfiprintf_r+0x1c4>
 800267a:	b1b0      	cbz	r0, 80026aa <_vfiprintf_r+0x156>
 800267c:	9207      	str	r2, [sp, #28]
 800267e:	e014      	b.n	80026aa <_vfiprintf_r+0x156>
 8002680:	eba0 0308 	sub.w	r3, r0, r8
 8002684:	fa09 f303 	lsl.w	r3, r9, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	46a2      	mov	sl, r4
 800268e:	e7d2      	b.n	8002636 <_vfiprintf_r+0xe2>
 8002690:	9b03      	ldr	r3, [sp, #12]
 8002692:	1d19      	adds	r1, r3, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	9103      	str	r1, [sp, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	bfbb      	ittet	lt
 800269c:	425b      	neglt	r3, r3
 800269e:	f042 0202 	orrlt.w	r2, r2, #2
 80026a2:	9307      	strge	r3, [sp, #28]
 80026a4:	9307      	strlt	r3, [sp, #28]
 80026a6:	bfb8      	it	lt
 80026a8:	9204      	strlt	r2, [sp, #16]
 80026aa:	7823      	ldrb	r3, [r4, #0]
 80026ac:	2b2e      	cmp	r3, #46	; 0x2e
 80026ae:	d10c      	bne.n	80026ca <_vfiprintf_r+0x176>
 80026b0:	7863      	ldrb	r3, [r4, #1]
 80026b2:	2b2a      	cmp	r3, #42	; 0x2a
 80026b4:	d135      	bne.n	8002722 <_vfiprintf_r+0x1ce>
 80026b6:	9b03      	ldr	r3, [sp, #12]
 80026b8:	1d1a      	adds	r2, r3, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	9203      	str	r2, [sp, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bfb8      	it	lt
 80026c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80026c6:	3402      	adds	r4, #2
 80026c8:	9305      	str	r3, [sp, #20]
 80026ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80027a4 <_vfiprintf_r+0x250>
 80026ce:	7821      	ldrb	r1, [r4, #0]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4650      	mov	r0, sl
 80026d4:	f7fd fd8c 	bl	80001f0 <memchr>
 80026d8:	b140      	cbz	r0, 80026ec <_vfiprintf_r+0x198>
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	eba0 000a 	sub.w	r0, r0, sl
 80026e0:	fa03 f000 	lsl.w	r0, r3, r0
 80026e4:	9b04      	ldr	r3, [sp, #16]
 80026e6:	4303      	orrs	r3, r0
 80026e8:	3401      	adds	r4, #1
 80026ea:	9304      	str	r3, [sp, #16]
 80026ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026f0:	482d      	ldr	r0, [pc, #180]	; (80027a8 <_vfiprintf_r+0x254>)
 80026f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026f6:	2206      	movs	r2, #6
 80026f8:	f7fd fd7a 	bl	80001f0 <memchr>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d03f      	beq.n	8002780 <_vfiprintf_r+0x22c>
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <_vfiprintf_r+0x258>)
 8002702:	bb1b      	cbnz	r3, 800274c <_vfiprintf_r+0x1f8>
 8002704:	9b03      	ldr	r3, [sp, #12]
 8002706:	3307      	adds	r3, #7
 8002708:	f023 0307 	bic.w	r3, r3, #7
 800270c:	3308      	adds	r3, #8
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002712:	443b      	add	r3, r7
 8002714:	9309      	str	r3, [sp, #36]	; 0x24
 8002716:	e767      	b.n	80025e8 <_vfiprintf_r+0x94>
 8002718:	fb0c 3202 	mla	r2, ip, r2, r3
 800271c:	460c      	mov	r4, r1
 800271e:	2001      	movs	r0, #1
 8002720:	e7a5      	b.n	800266e <_vfiprintf_r+0x11a>
 8002722:	2300      	movs	r3, #0
 8002724:	3401      	adds	r4, #1
 8002726:	9305      	str	r3, [sp, #20]
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0c0a 	mov.w	ip, #10
 800272e:	4620      	mov	r0, r4
 8002730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002734:	3a30      	subs	r2, #48	; 0x30
 8002736:	2a09      	cmp	r2, #9
 8002738:	d903      	bls.n	8002742 <_vfiprintf_r+0x1ee>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0c5      	beq.n	80026ca <_vfiprintf_r+0x176>
 800273e:	9105      	str	r1, [sp, #20]
 8002740:	e7c3      	b.n	80026ca <_vfiprintf_r+0x176>
 8002742:	fb0c 2101 	mla	r1, ip, r1, r2
 8002746:	4604      	mov	r4, r0
 8002748:	2301      	movs	r3, #1
 800274a:	e7f0      	b.n	800272e <_vfiprintf_r+0x1da>
 800274c:	ab03      	add	r3, sp, #12
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	462a      	mov	r2, r5
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <_vfiprintf_r+0x25c>)
 8002754:	a904      	add	r1, sp, #16
 8002756:	4630      	mov	r0, r6
 8002758:	f3af 8000 	nop.w
 800275c:	4607      	mov	r7, r0
 800275e:	1c78      	adds	r0, r7, #1
 8002760:	d1d6      	bne.n	8002710 <_vfiprintf_r+0x1bc>
 8002762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002764:	07d9      	lsls	r1, r3, #31
 8002766:	d405      	bmi.n	8002774 <_vfiprintf_r+0x220>
 8002768:	89ab      	ldrh	r3, [r5, #12]
 800276a:	059a      	lsls	r2, r3, #22
 800276c:	d402      	bmi.n	8002774 <_vfiprintf_r+0x220>
 800276e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002770:	f7ff fe55 	bl	800241e <__retarget_lock_release_recursive>
 8002774:	89ab      	ldrh	r3, [r5, #12]
 8002776:	065b      	lsls	r3, r3, #25
 8002778:	f53f af12 	bmi.w	80025a0 <_vfiprintf_r+0x4c>
 800277c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800277e:	e711      	b.n	80025a4 <_vfiprintf_r+0x50>
 8002780:	ab03      	add	r3, sp, #12
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	462a      	mov	r2, r5
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <_vfiprintf_r+0x25c>)
 8002788:	a904      	add	r1, sp, #16
 800278a:	4630      	mov	r0, r6
 800278c:	f000 f880 	bl	8002890 <_printf_i>
 8002790:	e7e4      	b.n	800275c <_vfiprintf_r+0x208>
 8002792:	bf00      	nop
 8002794:	08002cf0 	.word	0x08002cf0
 8002798:	08002d10 	.word	0x08002d10
 800279c:	08002cd0 	.word	0x08002cd0
 80027a0:	08002d30 	.word	0x08002d30
 80027a4:	08002d36 	.word	0x08002d36
 80027a8:	08002d3a 	.word	0x08002d3a
 80027ac:	00000000 	.word	0x00000000
 80027b0:	0800252f 	.word	0x0800252f

080027b4 <_printf_common>:
 80027b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	4616      	mov	r6, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	688a      	ldr	r2, [r1, #8]
 80027be:	690b      	ldr	r3, [r1, #16]
 80027c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bfb8      	it	lt
 80027c8:	4613      	movlt	r3, r2
 80027ca:	6033      	str	r3, [r6, #0]
 80027cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027d0:	4607      	mov	r7, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	b10a      	cbz	r2, 80027da <_printf_common+0x26>
 80027d6:	3301      	adds	r3, #1
 80027d8:	6033      	str	r3, [r6, #0]
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	0699      	lsls	r1, r3, #26
 80027de:	bf42      	ittt	mi
 80027e0:	6833      	ldrmi	r3, [r6, #0]
 80027e2:	3302      	addmi	r3, #2
 80027e4:	6033      	strmi	r3, [r6, #0]
 80027e6:	6825      	ldr	r5, [r4, #0]
 80027e8:	f015 0506 	ands.w	r5, r5, #6
 80027ec:	d106      	bne.n	80027fc <_printf_common+0x48>
 80027ee:	f104 0a19 	add.w	sl, r4, #25
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	6832      	ldr	r2, [r6, #0]
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	dc26      	bgt.n	800284a <_printf_common+0x96>
 80027fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002800:	1e13      	subs	r3, r2, #0
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	bf18      	it	ne
 8002806:	2301      	movne	r3, #1
 8002808:	0692      	lsls	r2, r2, #26
 800280a:	d42b      	bmi.n	8002864 <_printf_common+0xb0>
 800280c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002810:	4649      	mov	r1, r9
 8002812:	4638      	mov	r0, r7
 8002814:	47c0      	blx	r8
 8002816:	3001      	adds	r0, #1
 8002818:	d01e      	beq.n	8002858 <_printf_common+0xa4>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	68e5      	ldr	r5, [r4, #12]
 800281e:	6832      	ldr	r2, [r6, #0]
 8002820:	f003 0306 	and.w	r3, r3, #6
 8002824:	2b04      	cmp	r3, #4
 8002826:	bf08      	it	eq
 8002828:	1aad      	subeq	r5, r5, r2
 800282a:	68a3      	ldr	r3, [r4, #8]
 800282c:	6922      	ldr	r2, [r4, #16]
 800282e:	bf0c      	ite	eq
 8002830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002834:	2500      	movne	r5, #0
 8002836:	4293      	cmp	r3, r2
 8002838:	bfc4      	itt	gt
 800283a:	1a9b      	subgt	r3, r3, r2
 800283c:	18ed      	addgt	r5, r5, r3
 800283e:	2600      	movs	r6, #0
 8002840:	341a      	adds	r4, #26
 8002842:	42b5      	cmp	r5, r6
 8002844:	d11a      	bne.n	800287c <_printf_common+0xc8>
 8002846:	2000      	movs	r0, #0
 8002848:	e008      	b.n	800285c <_printf_common+0xa8>
 800284a:	2301      	movs	r3, #1
 800284c:	4652      	mov	r2, sl
 800284e:	4649      	mov	r1, r9
 8002850:	4638      	mov	r0, r7
 8002852:	47c0      	blx	r8
 8002854:	3001      	adds	r0, #1
 8002856:	d103      	bne.n	8002860 <_printf_common+0xac>
 8002858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002860:	3501      	adds	r5, #1
 8002862:	e7c6      	b.n	80027f2 <_printf_common+0x3e>
 8002864:	18e1      	adds	r1, r4, r3
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	2030      	movs	r0, #48	; 0x30
 800286a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800286e:	4422      	add	r2, r4
 8002870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002878:	3302      	adds	r3, #2
 800287a:	e7c7      	b.n	800280c <_printf_common+0x58>
 800287c:	2301      	movs	r3, #1
 800287e:	4622      	mov	r2, r4
 8002880:	4649      	mov	r1, r9
 8002882:	4638      	mov	r0, r7
 8002884:	47c0      	blx	r8
 8002886:	3001      	adds	r0, #1
 8002888:	d0e6      	beq.n	8002858 <_printf_common+0xa4>
 800288a:	3601      	adds	r6, #1
 800288c:	e7d9      	b.n	8002842 <_printf_common+0x8e>
	...

08002890 <_printf_i>:
 8002890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002894:	7e0f      	ldrb	r7, [r1, #24]
 8002896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002898:	2f78      	cmp	r7, #120	; 0x78
 800289a:	4691      	mov	r9, r2
 800289c:	4680      	mov	r8, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	469a      	mov	sl, r3
 80028a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028a6:	d807      	bhi.n	80028b8 <_printf_i+0x28>
 80028a8:	2f62      	cmp	r7, #98	; 0x62
 80028aa:	d80a      	bhi.n	80028c2 <_printf_i+0x32>
 80028ac:	2f00      	cmp	r7, #0
 80028ae:	f000 80d8 	beq.w	8002a62 <_printf_i+0x1d2>
 80028b2:	2f58      	cmp	r7, #88	; 0x58
 80028b4:	f000 80a3 	beq.w	80029fe <_printf_i+0x16e>
 80028b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028c0:	e03a      	b.n	8002938 <_printf_i+0xa8>
 80028c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028c6:	2b15      	cmp	r3, #21
 80028c8:	d8f6      	bhi.n	80028b8 <_printf_i+0x28>
 80028ca:	a101      	add	r1, pc, #4	; (adr r1, 80028d0 <_printf_i+0x40>)
 80028cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028d0:	08002929 	.word	0x08002929
 80028d4:	0800293d 	.word	0x0800293d
 80028d8:	080028b9 	.word	0x080028b9
 80028dc:	080028b9 	.word	0x080028b9
 80028e0:	080028b9 	.word	0x080028b9
 80028e4:	080028b9 	.word	0x080028b9
 80028e8:	0800293d 	.word	0x0800293d
 80028ec:	080028b9 	.word	0x080028b9
 80028f0:	080028b9 	.word	0x080028b9
 80028f4:	080028b9 	.word	0x080028b9
 80028f8:	080028b9 	.word	0x080028b9
 80028fc:	08002a49 	.word	0x08002a49
 8002900:	0800296d 	.word	0x0800296d
 8002904:	08002a2b 	.word	0x08002a2b
 8002908:	080028b9 	.word	0x080028b9
 800290c:	080028b9 	.word	0x080028b9
 8002910:	08002a6b 	.word	0x08002a6b
 8002914:	080028b9 	.word	0x080028b9
 8002918:	0800296d 	.word	0x0800296d
 800291c:	080028b9 	.word	0x080028b9
 8002920:	080028b9 	.word	0x080028b9
 8002924:	08002a33 	.word	0x08002a33
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	602a      	str	r2, [r5, #0]
 8002930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002938:	2301      	movs	r3, #1
 800293a:	e0a3      	b.n	8002a84 <_printf_i+0x1f4>
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	6829      	ldr	r1, [r5, #0]
 8002940:	0606      	lsls	r6, r0, #24
 8002942:	f101 0304 	add.w	r3, r1, #4
 8002946:	d50a      	bpl.n	800295e <_printf_i+0xce>
 8002948:	680e      	ldr	r6, [r1, #0]
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	2e00      	cmp	r6, #0
 800294e:	da03      	bge.n	8002958 <_printf_i+0xc8>
 8002950:	232d      	movs	r3, #45	; 0x2d
 8002952:	4276      	negs	r6, r6
 8002954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002958:	485e      	ldr	r0, [pc, #376]	; (8002ad4 <_printf_i+0x244>)
 800295a:	230a      	movs	r3, #10
 800295c:	e019      	b.n	8002992 <_printf_i+0x102>
 800295e:	680e      	ldr	r6, [r1, #0]
 8002960:	602b      	str	r3, [r5, #0]
 8002962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002966:	bf18      	it	ne
 8002968:	b236      	sxthne	r6, r6
 800296a:	e7ef      	b.n	800294c <_printf_i+0xbc>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	1d19      	adds	r1, r3, #4
 8002972:	6029      	str	r1, [r5, #0]
 8002974:	0601      	lsls	r1, r0, #24
 8002976:	d501      	bpl.n	800297c <_printf_i+0xec>
 8002978:	681e      	ldr	r6, [r3, #0]
 800297a:	e002      	b.n	8002982 <_printf_i+0xf2>
 800297c:	0646      	lsls	r6, r0, #25
 800297e:	d5fb      	bpl.n	8002978 <_printf_i+0xe8>
 8002980:	881e      	ldrh	r6, [r3, #0]
 8002982:	4854      	ldr	r0, [pc, #336]	; (8002ad4 <_printf_i+0x244>)
 8002984:	2f6f      	cmp	r7, #111	; 0x6f
 8002986:	bf0c      	ite	eq
 8002988:	2308      	moveq	r3, #8
 800298a:	230a      	movne	r3, #10
 800298c:	2100      	movs	r1, #0
 800298e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002992:	6865      	ldr	r5, [r4, #4]
 8002994:	60a5      	str	r5, [r4, #8]
 8002996:	2d00      	cmp	r5, #0
 8002998:	bfa2      	ittt	ge
 800299a:	6821      	ldrge	r1, [r4, #0]
 800299c:	f021 0104 	bicge.w	r1, r1, #4
 80029a0:	6021      	strge	r1, [r4, #0]
 80029a2:	b90e      	cbnz	r6, 80029a8 <_printf_i+0x118>
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d04d      	beq.n	8002a44 <_printf_i+0x1b4>
 80029a8:	4615      	mov	r5, r2
 80029aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80029ae:	fb03 6711 	mls	r7, r3, r1, r6
 80029b2:	5dc7      	ldrb	r7, [r0, r7]
 80029b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029b8:	4637      	mov	r7, r6
 80029ba:	42bb      	cmp	r3, r7
 80029bc:	460e      	mov	r6, r1
 80029be:	d9f4      	bls.n	80029aa <_printf_i+0x11a>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d10b      	bne.n	80029dc <_printf_i+0x14c>
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	07de      	lsls	r6, r3, #31
 80029c8:	d508      	bpl.n	80029dc <_printf_i+0x14c>
 80029ca:	6923      	ldr	r3, [r4, #16]
 80029cc:	6861      	ldr	r1, [r4, #4]
 80029ce:	4299      	cmp	r1, r3
 80029d0:	bfde      	ittt	le
 80029d2:	2330      	movle	r3, #48	; 0x30
 80029d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029dc:	1b52      	subs	r2, r2, r5
 80029de:	6122      	str	r2, [r4, #16]
 80029e0:	f8cd a000 	str.w	sl, [sp]
 80029e4:	464b      	mov	r3, r9
 80029e6:	aa03      	add	r2, sp, #12
 80029e8:	4621      	mov	r1, r4
 80029ea:	4640      	mov	r0, r8
 80029ec:	f7ff fee2 	bl	80027b4 <_printf_common>
 80029f0:	3001      	adds	r0, #1
 80029f2:	d14c      	bne.n	8002a8e <_printf_i+0x1fe>
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f8:	b004      	add	sp, #16
 80029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fe:	4835      	ldr	r0, [pc, #212]	; (8002ad4 <_printf_i+0x244>)
 8002a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a04:	6829      	ldr	r1, [r5, #0]
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a0c:	6029      	str	r1, [r5, #0]
 8002a0e:	061d      	lsls	r5, r3, #24
 8002a10:	d514      	bpl.n	8002a3c <_printf_i+0x1ac>
 8002a12:	07df      	lsls	r7, r3, #31
 8002a14:	bf44      	itt	mi
 8002a16:	f043 0320 	orrmi.w	r3, r3, #32
 8002a1a:	6023      	strmi	r3, [r4, #0]
 8002a1c:	b91e      	cbnz	r6, 8002a26 <_printf_i+0x196>
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	f023 0320 	bic.w	r3, r3, #32
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	2310      	movs	r3, #16
 8002a28:	e7b0      	b.n	800298c <_printf_i+0xfc>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f043 0320 	orr.w	r3, r3, #32
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	2378      	movs	r3, #120	; 0x78
 8002a34:	4828      	ldr	r0, [pc, #160]	; (8002ad8 <_printf_i+0x248>)
 8002a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a3a:	e7e3      	b.n	8002a04 <_printf_i+0x174>
 8002a3c:	0659      	lsls	r1, r3, #25
 8002a3e:	bf48      	it	mi
 8002a40:	b2b6      	uxthmi	r6, r6
 8002a42:	e7e6      	b.n	8002a12 <_printf_i+0x182>
 8002a44:	4615      	mov	r5, r2
 8002a46:	e7bb      	b.n	80029c0 <_printf_i+0x130>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	6826      	ldr	r6, [r4, #0]
 8002a4c:	6961      	ldr	r1, [r4, #20]
 8002a4e:	1d18      	adds	r0, r3, #4
 8002a50:	6028      	str	r0, [r5, #0]
 8002a52:	0635      	lsls	r5, r6, #24
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	d501      	bpl.n	8002a5c <_printf_i+0x1cc>
 8002a58:	6019      	str	r1, [r3, #0]
 8002a5a:	e002      	b.n	8002a62 <_printf_i+0x1d2>
 8002a5c:	0670      	lsls	r0, r6, #25
 8002a5e:	d5fb      	bpl.n	8002a58 <_printf_i+0x1c8>
 8002a60:	8019      	strh	r1, [r3, #0]
 8002a62:	2300      	movs	r3, #0
 8002a64:	6123      	str	r3, [r4, #16]
 8002a66:	4615      	mov	r5, r2
 8002a68:	e7ba      	b.n	80029e0 <_printf_i+0x150>
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	1d1a      	adds	r2, r3, #4
 8002a6e:	602a      	str	r2, [r5, #0]
 8002a70:	681d      	ldr	r5, [r3, #0]
 8002a72:	6862      	ldr	r2, [r4, #4]
 8002a74:	2100      	movs	r1, #0
 8002a76:	4628      	mov	r0, r5
 8002a78:	f7fd fbba 	bl	80001f0 <memchr>
 8002a7c:	b108      	cbz	r0, 8002a82 <_printf_i+0x1f2>
 8002a7e:	1b40      	subs	r0, r0, r5
 8002a80:	6060      	str	r0, [r4, #4]
 8002a82:	6863      	ldr	r3, [r4, #4]
 8002a84:	6123      	str	r3, [r4, #16]
 8002a86:	2300      	movs	r3, #0
 8002a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a8c:	e7a8      	b.n	80029e0 <_printf_i+0x150>
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	462a      	mov	r2, r5
 8002a92:	4649      	mov	r1, r9
 8002a94:	4640      	mov	r0, r8
 8002a96:	47d0      	blx	sl
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d0ab      	beq.n	80029f4 <_printf_i+0x164>
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	079b      	lsls	r3, r3, #30
 8002aa0:	d413      	bmi.n	8002aca <_printf_i+0x23a>
 8002aa2:	68e0      	ldr	r0, [r4, #12]
 8002aa4:	9b03      	ldr	r3, [sp, #12]
 8002aa6:	4298      	cmp	r0, r3
 8002aa8:	bfb8      	it	lt
 8002aaa:	4618      	movlt	r0, r3
 8002aac:	e7a4      	b.n	80029f8 <_printf_i+0x168>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	4632      	mov	r2, r6
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	47d0      	blx	sl
 8002ab8:	3001      	adds	r0, #1
 8002aba:	d09b      	beq.n	80029f4 <_printf_i+0x164>
 8002abc:	3501      	adds	r5, #1
 8002abe:	68e3      	ldr	r3, [r4, #12]
 8002ac0:	9903      	ldr	r1, [sp, #12]
 8002ac2:	1a5b      	subs	r3, r3, r1
 8002ac4:	42ab      	cmp	r3, r5
 8002ac6:	dcf2      	bgt.n	8002aae <_printf_i+0x21e>
 8002ac8:	e7eb      	b.n	8002aa2 <_printf_i+0x212>
 8002aca:	2500      	movs	r5, #0
 8002acc:	f104 0619 	add.w	r6, r4, #25
 8002ad0:	e7f5      	b.n	8002abe <_printf_i+0x22e>
 8002ad2:	bf00      	nop
 8002ad4:	08002d41 	.word	0x08002d41
 8002ad8:	08002d52 	.word	0x08002d52

08002adc <__sread>:
 8002adc:	b510      	push	{r4, lr}
 8002ade:	460c      	mov	r4, r1
 8002ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae4:	f000 f894 	bl	8002c10 <_read_r>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	bfab      	itete	ge
 8002aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002aee:	89a3      	ldrhlt	r3, [r4, #12]
 8002af0:	181b      	addge	r3, r3, r0
 8002af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002af6:	bfac      	ite	ge
 8002af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002afa:	81a3      	strhlt	r3, [r4, #12]
 8002afc:	bd10      	pop	{r4, pc}

08002afe <__swrite>:
 8002afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b02:	461f      	mov	r7, r3
 8002b04:	898b      	ldrh	r3, [r1, #12]
 8002b06:	05db      	lsls	r3, r3, #23
 8002b08:	4605      	mov	r5, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	4616      	mov	r6, r2
 8002b0e:	d505      	bpl.n	8002b1c <__swrite+0x1e>
 8002b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b14:	2302      	movs	r3, #2
 8002b16:	2200      	movs	r2, #0
 8002b18:	f000 f868 	bl	8002bec <_lseek_r>
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	4632      	mov	r2, r6
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b32:	f000 b817 	b.w	8002b64 <_write_r>

08002b36 <__sseek>:
 8002b36:	b510      	push	{r4, lr}
 8002b38:	460c      	mov	r4, r1
 8002b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b3e:	f000 f855 	bl	8002bec <_lseek_r>
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	bf15      	itete	ne
 8002b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b52:	81a3      	strheq	r3, [r4, #12]
 8002b54:	bf18      	it	ne
 8002b56:	81a3      	strhne	r3, [r4, #12]
 8002b58:	bd10      	pop	{r4, pc}

08002b5a <__sclose>:
 8002b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b5e:	f000 b813 	b.w	8002b88 <_close_r>
	...

08002b64 <_write_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4d07      	ldr	r5, [pc, #28]	; (8002b84 <_write_r+0x20>)
 8002b68:	4604      	mov	r4, r0
 8002b6a:	4608      	mov	r0, r1
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	2200      	movs	r2, #0
 8002b70:	602a      	str	r2, [r5, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f7fe ff23 	bl	80019be <_write>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_write_r+0x1e>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_write_r+0x1e>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	200000e8 	.word	0x200000e8

08002b88 <_close_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	4d06      	ldr	r5, [pc, #24]	; (8002ba4 <_close_r+0x1c>)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4608      	mov	r0, r1
 8002b92:	602b      	str	r3, [r5, #0]
 8002b94:	f7fe ff2f 	bl	80019f6 <_close>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_close_r+0x1a>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_close_r+0x1a>
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	200000e8 	.word	0x200000e8

08002ba8 <_fstat_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4d07      	ldr	r5, [pc, #28]	; (8002bc8 <_fstat_r+0x20>)
 8002bac:	2300      	movs	r3, #0
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	f7fe ff29 	bl	8001a0c <_fstat>
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	d102      	bne.n	8002bc4 <_fstat_r+0x1c>
 8002bbe:	682b      	ldr	r3, [r5, #0]
 8002bc0:	b103      	cbz	r3, 8002bc4 <_fstat_r+0x1c>
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200000e8 	.word	0x200000e8

08002bcc <_isatty_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4d06      	ldr	r5, [pc, #24]	; (8002be8 <_isatty_r+0x1c>)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	602b      	str	r3, [r5, #0]
 8002bd8:	f7fe ff27 	bl	8001a2a <_isatty>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d102      	bne.n	8002be6 <_isatty_r+0x1a>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	b103      	cbz	r3, 8002be6 <_isatty_r+0x1a>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
 8002be8:	200000e8 	.word	0x200000e8

08002bec <_lseek_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4d07      	ldr	r5, [pc, #28]	; (8002c0c <_lseek_r+0x20>)
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	602a      	str	r2, [r5, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f7fe ff1f 	bl	8001a3e <_lseek>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_lseek_r+0x1e>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_lseek_r+0x1e>
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	200000e8 	.word	0x200000e8

08002c10 <_read_r>:
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	4d07      	ldr	r5, [pc, #28]	; (8002c30 <_read_r+0x20>)
 8002c14:	4604      	mov	r4, r0
 8002c16:	4608      	mov	r0, r1
 8002c18:	4611      	mov	r1, r2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	602a      	str	r2, [r5, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f7fe feb0 	bl	8001984 <_read>
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	d102      	bne.n	8002c2e <_read_r+0x1e>
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	b103      	cbz	r3, 8002c2e <_read_r+0x1e>
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
 8002c30:	200000e8 	.word	0x200000e8

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
