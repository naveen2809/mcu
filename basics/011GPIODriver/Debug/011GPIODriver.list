
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002690  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a8  080029a8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080029a8  080029a8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a8  080029a8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000058  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036ca  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dd4  00000000  00000000  00023758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d0  00000000  00000000  00024530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00024a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a87  00000000  00000000  00024e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ccc  00000000  00000000  0002789f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e9d2  00000000  00000000  0002d56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003bf3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019ec  00000000  00000000  0003bf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002828 	.word	0x08002828

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002828 	.word	0x08002828

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <configure_spi>:
	General_Purpose_Timer_Init(&TIM2_Handle);
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
}

void configure_spi(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 8000296:	4825      	ldr	r0, [pc, #148]	; (800032c <configure_spi+0x9c>)
 8000298:	f000 fb66 	bl	8000968 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 800029c:	2202      	movs	r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	4822      	ldr	r0, [pc, #136]	; (800032c <configure_spi+0x9c>)
 80002a2:	f000 f8b7 	bl	8000414 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 80002a6:	2202      	movs	r2, #2
 80002a8:	210e      	movs	r1, #14
 80002aa:	4820      	ldr	r0, [pc, #128]	; (800032c <configure_spi+0x9c>)
 80002ac:	f000 f8b2 	bl	8000414 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 80002b0:	2202      	movs	r2, #2
 80002b2:	210d      	movs	r1, #13
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <configure_spi+0x9c>)
 80002b6:	f000 f8ad 	bl	8000414 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 80002ba:	2202      	movs	r2, #2
 80002bc:	210c      	movs	r1, #12
 80002be:	481b      	ldr	r0, [pc, #108]	; (800032c <configure_spi+0x9c>)
 80002c0:	f000 f8a8 	bl	8000414 <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 80002c4:	2205      	movs	r2, #5
 80002c6:	210f      	movs	r1, #15
 80002c8:	4818      	ldr	r0, [pc, #96]	; (800032c <configure_spi+0x9c>)
 80002ca:	f000 f8e9 	bl	80004a0 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 80002ce:	2205      	movs	r2, #5
 80002d0:	210e      	movs	r1, #14
 80002d2:	4816      	ldr	r0, [pc, #88]	; (800032c <configure_spi+0x9c>)
 80002d4:	f000 f8e4 	bl	80004a0 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 80002d8:	2205      	movs	r2, #5
 80002da:	210d      	movs	r1, #13
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <configure_spi+0x9c>)
 80002de:	f000 f8df 	bl	80004a0 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 80002e2:	2205      	movs	r2, #5
 80002e4:	210c      	movs	r1, #12
 80002e6:	4811      	ldr	r0, [pc, #68]	; (800032c <configure_spi+0x9c>)
 80002e8:	f000 f8da 	bl	80004a0 <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 80002ec:	2301      	movs	r3, #1
 80002ee:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV4;
 80002f8:	2301      	movs	r3, #1
 80002fa:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 80002fc:	2300      	movs	r3, #0
 80002fe:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000300:	2300      	movs	r3, #0
 8000302:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 8000304:	2301      	movs	r3, #1
 8000306:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 8000308:	2301      	movs	r3, #1
 800030a:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <configure_spi+0xa0>)
 800030e:	f000 fb2b 	bl	8000968 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4619      	mov	r1, r3
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <configure_spi+0xa0>)
 8000318:	f000 fa0e 	bl	8000738 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <configure_spi+0xa0>)
 800031e:	f000 fa86 	bl	800082e <SPIEnable>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020400 	.word	0x40020400
 8000330:	40003800 	.word	0x40003800

08000334 <configure_uart>:

void configure_uart(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000338:	482a      	ldr	r0, [pc, #168]	; (80003e4 <configure_uart+0xb0>)
 800033a:	f000 fb15 	bl	8000968 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 800033e:	2202      	movs	r2, #2
 8000340:	2105      	movs	r1, #5
 8000342:	4828      	ldr	r0, [pc, #160]	; (80003e4 <configure_uart+0xb0>)
 8000344:	f000 f866 	bl	8000414 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000348:	2202      	movs	r2, #2
 800034a:	2106      	movs	r1, #6
 800034c:	4825      	ldr	r0, [pc, #148]	; (80003e4 <configure_uart+0xb0>)
 800034e:	f000 f861 	bl	8000414 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 8000352:	2207      	movs	r2, #7
 8000354:	2105      	movs	r1, #5
 8000356:	4823      	ldr	r0, [pc, #140]	; (80003e4 <configure_uart+0xb0>)
 8000358:	f000 f8a2 	bl	80004a0 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 800035c:	2207      	movs	r2, #7
 800035e:	2106      	movs	r1, #6
 8000360:	4820      	ldr	r0, [pc, #128]	; (80003e4 <configure_uart+0xb0>)
 8000362:	f000 f89d 	bl	80004a0 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 8000366:	2200      	movs	r2, #0
 8000368:	2105      	movs	r1, #5
 800036a:	481e      	ldr	r0, [pc, #120]	; (80003e4 <configure_uart+0xb0>)
 800036c:	f000 f8d1 	bl	8000512 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000370:	2200      	movs	r2, #0
 8000372:	2106      	movs	r1, #6
 8000374:	481b      	ldr	r0, [pc, #108]	; (80003e4 <configure_uart+0xb0>)
 8000376:	f000 f8cc 	bl	8000512 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800037a:	2202      	movs	r2, #2
 800037c:	2105      	movs	r1, #5
 800037e:	4819      	ldr	r0, [pc, #100]	; (80003e4 <configure_uart+0xb0>)
 8000380:	f000 f90d 	bl	800059e <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000384:	2202      	movs	r2, #2
 8000386:	2106      	movs	r1, #6
 8000388:	4816      	ldr	r0, [pc, #88]	; (80003e4 <configure_uart+0xb0>)
 800038a:	f000 f908 	bl	800059e <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 800038e:	2201      	movs	r2, #1
 8000390:	2105      	movs	r1, #5
 8000392:	4814      	ldr	r0, [pc, #80]	; (80003e4 <configure_uart+0xb0>)
 8000394:	f000 f8df 	bl	8000556 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 8000398:	2201      	movs	r2, #1
 800039a:	2106      	movs	r1, #6
 800039c:	4811      	ldr	r0, [pc, #68]	; (80003e4 <configure_uart+0xb0>)
 800039e:	f000 f8da 	bl	8000556 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <configure_uart+0xb4>)
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <configure_uart+0xb8>)
 80003a6:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <configure_uart+0xb4>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <configure_uart+0xb4>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <configure_uart+0xb4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <configure_uart+0xb4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <configure_uart+0xb4>)
 80003c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c6:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <configure_uart+0xb4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <configure_uart+0xb8>)
 80003d0:	f000 faca 	bl	8000968 <EnablePeriClk>
	USART_Init(&Test_USART);
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <configure_uart+0xb4>)
 80003d6:	f000 fc8b 	bl	8000cf0 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <configure_uart+0xb4>)
 80003dc:	f000 fd88 	bl	8000ef0 <USART_PeripheralEnable>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40020c00 	.word	0x40020c00
 80003e8:	20000080 	.word	0x20000080
 80003ec:	40004400 	.word	0x40004400

080003f0 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <UART_SendChar+0x20>)
 8000402:	f000 fd9b 	bl	8000f3c <USART_SendData>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000080 	.word	0x20000080

08000414 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	78fa      	ldrb	r2, [r7, #3]
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	2103      	movs	r1, #3
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	401a      	ands	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	78b9      	ldrb	r1, [r7, #2]
 8000444:	78fa      	ldrb	r2, [r7, #3]
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	431a      	orrs	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	601a      	str	r2, [r3, #0]

}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
 8000468:	4613      	mov	r3, r2
 800046a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	43d2      	mvns	r2, r2
 800047e:	401a      	ands	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	78b9      	ldrb	r1, [r7, #2]
 800048a:	78fa      	ldrb	r2, [r7, #3]
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	431a      	orrs	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	615a      	str	r2, [r3, #20]
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
 80004ac:	4613      	mov	r3, r2
 80004ae:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	f003 0307 	and.w	r3, r3, #7
 80004c0:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80004c2:	7afa      	ldrb	r2, [r7, #11]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3208      	adds	r2, #8
 80004c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004cc:	7aba      	ldrb	r2, [r7, #10]
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	210f      	movs	r1, #15
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	7afa      	ldrb	r2, [r7, #11]
 80004dc:	4019      	ands	r1, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3208      	adds	r2, #8
 80004e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80004e6:	7afa      	ldrb	r2, [r7, #11]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	78b9      	ldrb	r1, [r7, #2]
 80004f2:	7aba      	ldrb	r2, [r7, #10]
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	7afa      	ldrb	r2, [r7, #11]
 80004fe:	4319      	orrs	r1, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3208      	adds	r2, #8
 8000504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000512:	b480      	push	{r7}
 8000514:	b085      	sub	sp, #20
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	70fb      	strb	r3, [r7, #3]
 800051e:	4613      	mov	r3, r2
 8000520:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	78fa      	ldrb	r2, [r7, #3]
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	78b9      	ldrb	r1, [r7, #2]
 8000540:	78fa      	ldrb	r2, [r7, #3]
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	605a      	str	r2, [r3, #4]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	70fb      	strb	r3, [r7, #3]
 8000562:	4613      	mov	r3, r2
 8000564:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	78fa      	ldrb	r2, [r7, #3]
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	43d2      	mvns	r2, r2
 800057a:	401a      	ands	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	78b9      	ldrb	r1, [r7, #2]
 8000586:	78fa      	ldrb	r2, [r7, #3]
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	431a      	orrs	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	70fb      	strb	r3, [r7, #3]
 80005aa:	4613      	mov	r3, r2
 80005ac:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	401a      	ands	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	78b9      	ldrb	r1, [r7, #2]
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	0052      	lsls	r2, r2, #1
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	431a      	orrs	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	609a      	str	r2, [r3, #8]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <SysTick_Handler>:

	*pSYT_CFGR |= 0x1;
}

void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SysTick_Handler+0x30>)
 80005f0:	607b      	str	r3, [r7, #4]

	tick_count++;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <SysTick_Handler+0x34>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a08      	ldr	r2, [pc, #32]	; (800061c <SysTick_Handler+0x34>)
 80005fa:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 80005fc:	f000 f82c 	bl	8000658 <update_sleep_status>

	update_next_task();
 8000600:	f000 f848 	bl	8000694 <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	e000ed04 	.word	0xe000ed04
 800061c:	2000009c 	.word	0x2000009c

08000620 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 8000620:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 8000624:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <PendSV_Handler+0x30>)
	__asm volatile ("LDR R1, [R1]");
 800062a:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("STR R0, [R1]");
 800062c:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 800062e:	4909      	ldr	r1, [pc, #36]	; (8000654 <PendSV_Handler+0x34>)
	__asm volatile ("LDR R1, [R1]");
 8000630:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("LDR R0, [R1]");
 8000632:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 8000634:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8000638:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <PendSV_Handler+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a02      	ldr	r2, [pc, #8]	; (800064c <PendSV_Handler+0x2c>)
 8000642:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 8000644:	4770      	bx	lr
}
 8000646:	bf00      	nop
 8000648:	200000a4 	.word	0x200000a4
 800064c:	200000a0 	.word	0x200000a0
 8000650:	200000a0 	.word	0x200000a0
 8000654:	200000a4 	.word	0x200000a4

08000658 <update_sleep_status>:

	return;
}

void update_sleep_status(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
	struct TCB *present_task;

	present_task = current_task;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <update_sleep_status+0x38>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	607b      	str	r3, [r7, #4]

	do
	{
		if(present_task->sleep_count > 0)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <update_sleep_status+0x1e>
		{
			present_task->sleep_count--;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
		}
		present_task = present_task->next;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	607b      	str	r3, [r7, #4]
	}
	while(present_task != current_task);
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <update_sleep_status+0x38>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	429a      	cmp	r2, r3
 8000684:	d1ee      	bne.n	8000664 <update_sleep_status+0xc>

	return;
 8000686:	bf00      	nop
}
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	200000a0 	.word	0x200000a0

08000694 <update_next_task>:

void update_next_task(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 800069a:	23ff      	movs	r3, #255	; 0xff
 800069c:	71fb      	strb	r3, [r7, #7]
	struct TCB *best_task;

	next_task = current_task;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <update_next_task+0x5c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <update_next_task+0x60>)
 80006a4:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = next_task->next;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <update_next_task+0x60>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <update_next_task+0x60>)
 80006ae:	6013      	str	r3, [r2, #0]

		if(next_task->priority < max_priority && next_task->sleep_count==0)
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <update_next_task+0x60>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d90b      	bls.n	80006d4 <update_next_task+0x40>
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <update_next_task+0x60>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d106      	bne.n	80006d4 <update_next_task+0x40>
		{
			max_priority = next_task->priority;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <update_next_task+0x60>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <update_next_task+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <update_next_task+0x60>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <update_next_task+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d1e2      	bne.n	80006a6 <update_next_task+0x12>

	next_task = best_task;
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <update_next_task+0x60>)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	6013      	str	r3, [r2, #0]

	return;
 80006e6:	bf00      	nop
}
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	200000a4 	.word	0x200000a4

080006f8 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <RTC_Alarm_IRQHandler+0x24>)
 8000700:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000702:	f000 f80d 	bl	8000720 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]

	return;
 8000712:	bf00      	nop
}
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40013c14 	.word	0x40013c14

08000720 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8000724:	2201      	movs	r2, #1
 8000726:	210f      	movs	r1, #15
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <RTC_Alarm_Interrupt_Callback+0x14>)
 800072a:	f7ff fe97 	bl	800045c <GPIOWritePin>

	return;
 800072e:	bf00      	nop
}
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00

08000738 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f023 0201 	bic.w	r2, r3, #1
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	7852      	ldrb	r2, [r2, #1]
 800075a:	431a      	orrs	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 0202 	bic.w	r2, r3, #2
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	431a      	orrs	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f023 0204 	bic.w	r2, r3, #4
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	7892      	ldrb	r2, [r2, #2]
 8000790:	0092      	lsls	r2, r2, #2
 8000792:	431a      	orrs	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	00d2      	lsls	r2, r2, #3
 80007ae:	431a      	orrs	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	7952      	ldrb	r2, [r2, #5]
 80007c8:	02d2      	lsls	r2, r2, #11
 80007ca:	431a      	orrs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	7992      	ldrb	r2, [r2, #6]
 80007e4:	0252      	lsls	r2, r2, #9
 80007e6:	431a      	orrs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	79d2      	ldrb	r2, [r2, #7]
 8000800:	0212      	lsls	r2, r2, #8
 8000802:	431a      	orrs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f023 0204 	bic.w	r2, r3, #4
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	7a12      	ldrb	r2, [r2, #8]
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	431a      	orrs	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	605a      	str	r2, [r3, #4]


}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3

}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint32_t len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 800088c:	e012      	b.n	80008b4 <SPISendData+0x38>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 800088e:	bf00      	nop
 8000890:	2101      	movs	r1, #1
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff ffdc 	bl	8000850 <SPIGetFlags>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f8      	beq.n	8000890 <SPISendData+0x14>

		pSPI->SPI_DR = *TxBuf;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	60da      	str	r2, [r3, #12]
		TxBuf++;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
		len--;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
	while(len > 0) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1e9      	bne.n	800088e <SPISendData+0x12>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 80008ba:	bf00      	nop
 80008bc:	2101      	movs	r1, #1
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff ffc6 	bl	8000850 <SPIGetFlags>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f8      	beq.n	80008bc <SPISendData+0x40>
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint32_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 80008e6:	bf00      	nop
 80008e8:	2101      	movs	r1, #1
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ffb0 	bl	8000850 <SPIGetFlags>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f8      	beq.n	80008e8 <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 80008f6:	e004      	b.n	8000902 <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8000902:	2100      	movs	r1, #0
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ffa3 	bl	8000850 <SPIGetFlags>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f3      	bne.n	80008f8 <SPIMasterRecvData+0x24>

	while(len > 0) {
 8000910:	e022      	b.n	8000958 <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8000912:	bf00      	nop
 8000914:	2101      	movs	r1, #1
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f7ff ff9a 	bl	8000850 <SPIGetFlags>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f8      	beq.n	8000914 <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	60da      	str	r2, [r3, #12]
		TxBuf++;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 8000932:	bf00      	nop
 8000934:	2100      	movs	r1, #0
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff ff8a 	bl	8000850 <SPIGetFlags>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f8      	beq.n	8000934 <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
		len--;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	603b      	str	r3, [r7, #0]
	while(len > 0) {
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1d9      	bne.n	8000912 <SPIMasterRecvData+0x3e>
	}

	return;
 800095e:	bf00      	nop
}
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a88      	ldr	r2, [pc, #544]	; (8000b94 <EnablePeriClk+0x22c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d108      	bne.n	800098a <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000978:	4b87      	ldr	r3, [pc, #540]	; (8000b98 <EnablePeriClk+0x230>)
 800097a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000988:	e19b      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a83      	ldr	r2, [pc, #524]	; (8000b9c <EnablePeriClk+0x234>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d108      	bne.n	80009a4 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000992:	4b81      	ldr	r3, [pc, #516]	; (8000b98 <EnablePeriClk+0x230>)
 8000994:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f043 0202 	orr.w	r2, r3, #2
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	e18e      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a7e      	ldr	r2, [pc, #504]	; (8000ba0 <EnablePeriClk+0x238>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d108      	bne.n	80009be <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009ac:	4b7a      	ldr	r3, [pc, #488]	; (8000b98 <EnablePeriClk+0x230>)
 80009ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f043 0204 	orr.w	r2, r3, #4
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	e181      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a78      	ldr	r2, [pc, #480]	; (8000ba4 <EnablePeriClk+0x23c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d108      	bne.n	80009d8 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009c6:	4b74      	ldr	r3, [pc, #464]	; (8000b98 <EnablePeriClk+0x230>)
 80009c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f043 0208 	orr.w	r2, r3, #8
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	e174      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a73      	ldr	r2, [pc, #460]	; (8000ba8 <EnablePeriClk+0x240>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d108      	bne.n	80009f2 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009e0:	4b6d      	ldr	r3, [pc, #436]	; (8000b98 <EnablePeriClk+0x230>)
 80009e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f043 0210 	orr.w	r2, r3, #16
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	e167      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a6d      	ldr	r2, [pc, #436]	; (8000bac <EnablePeriClk+0x244>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d108      	bne.n	8000a0c <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009fa:	4b67      	ldr	r3, [pc, #412]	; (8000b98 <EnablePeriClk+0x230>)
 80009fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f043 0220 	orr.w	r2, r3, #32
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	e15a      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a68      	ldr	r2, [pc, #416]	; (8000bb0 <EnablePeriClk+0x248>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d108      	bne.n	8000a26 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a14:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <EnablePeriClk+0x230>)
 8000a16:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	e14d      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a62      	ldr	r2, [pc, #392]	; (8000bb4 <EnablePeriClk+0x24c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d108      	bne.n	8000a40 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <EnablePeriClk+0x230>)
 8000a30:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	e140      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a5d      	ldr	r2, [pc, #372]	; (8000bb8 <EnablePeriClk+0x250>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d108      	bne.n	8000a5a <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a48:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <EnablePeriClk+0x230>)
 8000a4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	e133      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a57      	ldr	r2, [pc, #348]	; (8000bbc <EnablePeriClk+0x254>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d108      	bne.n	8000a74 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000a62:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <EnablePeriClk+0x258>)
 8000a64:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	e126      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <EnablePeriClk+0x25c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d108      	bne.n	8000a8e <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a7c:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <EnablePeriClk+0x260>)
 8000a7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	e119      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a4e      	ldr	r2, [pc, #312]	; (8000bcc <EnablePeriClk+0x264>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d108      	bne.n	8000aa8 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <EnablePeriClk+0x260>)
 8000a98:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	e10c      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a49      	ldr	r2, [pc, #292]	; (8000bd0 <EnablePeriClk+0x268>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d108      	bne.n	8000ac2 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <EnablePeriClk+0x260>)
 8000ab2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	e0ff      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <EnablePeriClk+0x26c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d108      	bne.n	8000adc <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <EnablePeriClk+0x260>)
 8000acc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	e0f2      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3e      	ldr	r2, [pc, #248]	; (8000bd8 <EnablePeriClk+0x270>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d108      	bne.n	8000af6 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <EnablePeriClk+0x260>)
 8000ae6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	e0e5      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <EnablePeriClk+0x274>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d108      	bne.n	8000b10 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <EnablePeriClk+0x258>)
 8000b00:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f043 0210 	orr.w	r2, r3, #16
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	e0d8      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <EnablePeriClk+0x278>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d108      	bne.n	8000b2a <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <EnablePeriClk+0x260>)
 8000b1a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	e0cb      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <EnablePeriClk+0x27c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d108      	bne.n	8000b44 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <EnablePeriClk+0x260>)
 8000b34:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	e0be      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <EnablePeriClk+0x280>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d108      	bne.n	8000b5e <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <EnablePeriClk+0x260>)
 8000b4e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	e0b1      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <EnablePeriClk+0x284>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d108      	bne.n	8000b78 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <EnablePeriClk+0x260>)
 8000b68:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e0a4      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <EnablePeriClk+0x288>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d139      	bne.n	8000bf4 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <EnablePeriClk+0x258>)
 8000b82:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f043 0220 	orr.w	r2, r3, #32
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	e097      	b.n	8000cc2 <EnablePeriClk+0x35a>
 8000b92:	bf00      	nop
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40023830 	.word	0x40023830
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40021c00 	.word	0x40021c00
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023844 	.word	0x40023844
 8000bc4:	40003800 	.word	0x40003800
 8000bc8:	40023840 	.word	0x40023840
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40005800 	.word	0x40005800
 8000bd8:	40005c00 	.word	0x40005c00
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40004800 	.word	0x40004800
 8000be8:	40004c00 	.word	0x40004c00
 8000bec:	40005000 	.word	0x40005000
 8000bf0:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a35      	ldr	r2, [pc, #212]	; (8000ccc <EnablePeriClk+0x364>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d108      	bne.n	8000c0e <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <EnablePeriClk+0x368>)
 8000bfe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f043 0210 	orr.w	r2, r3, #16
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	e059      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <EnablePeriClk+0x36c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d108      	bne.n	8000c28 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <EnablePeriClk+0x368>)
 8000c18:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f043 0220 	orr.w	r2, r3, #32
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	e04c      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <EnablePeriClk+0x370>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d108      	bne.n	8000c42 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <EnablePeriClk+0x374>)
 8000c32:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	e03f      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <EnablePeriClk+0x378>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d108      	bne.n	8000c5c <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <EnablePeriClk+0x374>)
 8000c4c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	e032      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c62:	d108      	bne.n	8000c76 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <EnablePeriClk+0x368>)
 8000c66:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	e025      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <EnablePeriClk+0x37c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d108      	bne.n	8000c90 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <EnablePeriClk+0x368>)
 8000c80:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f043 0202 	orr.w	r2, r3, #2
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	e018      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <EnablePeriClk+0x380>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d108      	bne.n	8000caa <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <EnablePeriClk+0x368>)
 8000c9a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f043 0204 	orr.w	r2, r3, #4
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	e00b      	b.n	8000cc2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <EnablePeriClk+0x384>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d107      	bne.n	8000cc2 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <EnablePeriClk+0x368>)
 8000cb4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f043 0208 	orr.w	r2, r3, #8
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	40023840 	.word	0x40023840
 8000cd4:	40001400 	.word	0x40001400
 8000cd8:	40026000 	.word	0x40026000
 8000cdc:	40023830 	.word	0x40023830
 8000ce0:	40026400 	.word	0x40026400
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40000800 	.word	0x40000800
 8000cec:	40000c00 	.word	0x40000c00

08000cf0 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d110      	bne.n	8000d22 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0208 	orr.w	r2, r2, #8
 8000d0e:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0204 	bic.w	r2, r2, #4
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	e028      	b.n	8000d74 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d110      	bne.n	8000d4c <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0208 	bic.w	r2, r2, #8
 8000d38:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f042 0204 	orr.w	r2, r2, #4
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	e013      	b.n	8000d74 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d10f      	bne.n	8000d74 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0208 	orr.w	r2, r2, #8
 8000d62:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0204 	orr.w	r2, r2, #4
 8000d72:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d108      	bne.n	8000d8e <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	e00b      	b.n	8000da6 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d107      	bne.n	8000da6 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000da4:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000db4:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6919      	ldr	r1, [r3, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	031a      	lsls	r2, r3, #12
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d108      	bne.n	8000de4 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	e028      	b.n	8000e36 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d110      	bne.n	8000e0e <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dfa:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	e013      	b.n	8000e36 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d10f      	bne.n	8000e36 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e24:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e34:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f8a7 	bl	8000f90 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d110      	bne.n	8000e6c <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e58:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e68:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000e6a:	e03d      	b.n	8000ee8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d110      	bne.n	8000e96 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e82:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e92:	615a      	str	r2, [r3, #20]
}
 8000e94:	e028      	b.n	8000ee8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d110      	bne.n	8000ec0 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eac:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebc:	615a      	str	r2, [r3, #20]
}
 8000ebe:	e013      	b.n	8000ee8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d10f      	bne.n	8000ee8 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ed6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee6:	615a      	str	r2, [r3, #20]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f06:	60da      	str	r2, [r3, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000f48:	e012      	b.n	8000f70 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8000f4a:	bf00      	nop
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffdf 	bl	8000f12 <USART_GetFlagStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f8      	beq.n	8000f4c <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
		Len--;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1e9      	bne.n	8000f4a <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8000f76:	bf00      	nop
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff ffc9 	bl	8000f12 <USART_GetFlagStatus>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f8      	beq.n	8000f78 <USART_SendData+0x3c>
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <USART_SetBaudRate>:

	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000f9a:	f240 6383 	movw	r3, #1667	; 0x683
 8000f9e:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <w5500_configure_pins>:
#include "spi_driver.h"
#include "common_utils.h"
#include "w5500_driver.h"

void w5500_configure_pins(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	//Configure the GPIO Pin for Slave Select Pin of FLASH Module
	EnablePeriClk(W5500_PORT);
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <w5500_configure_pins+0x24>)
 8000fba:	f7ff fcd5 	bl	8000968 <EnablePeriClk>
	GPIOSetMode(W5500_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <w5500_configure_pins+0x24>)
 8000fc4:	f7ff fa26 	bl	8000414 <GPIOSetMode>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <w5500_configure_pins+0x24>)
 8000fce:	f7ff fa45 	bl	800045c <GPIOWritePin>

	return;
 8000fd2:	bf00      	nop
}
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000

08000fdc <w5500_get_chip_version>:

uint8_t w5500_get_chip_version(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x39;
 8000fe6:	2339      	movs	r3, #57	; 0x39
 8000fe8:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <w5500_get_chip_version+0x40>)
 8000ff8:	f7ff fa30 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 8000ffc:	463a      	mov	r2, r7
 8000ffe:	1d39      	adds	r1, r7, #4
 8001000:	2304      	movs	r3, #4
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <w5500_get_chip_version+0x44>)
 8001004:	f7ff fc66 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001008:	2201      	movs	r2, #1
 800100a:	2104      	movs	r1, #4
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <w5500_get_chip_version+0x40>)
 800100e:	f7ff fa25 	bl	800045c <GPIOWritePin>

	return rx_buf[3];
 8001012:	78fb      	ldrb	r3, [r7, #3]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	40003800 	.word	0x40003800

08001024 <w5500_read_phy_cfgr>:

uint8_t w5500_read_phy_cfgr(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x2E;
 800102e:	232e      	movs	r3, #46	; 0x2e
 8001030:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 800103a:	2200      	movs	r2, #0
 800103c:	2104      	movs	r1, #4
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <w5500_read_phy_cfgr+0x40>)
 8001040:	f7ff fa0c 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 8001044:	463a      	mov	r2, r7
 8001046:	1d39      	adds	r1, r7, #4
 8001048:	2304      	movs	r3, #4
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <w5500_read_phy_cfgr+0x44>)
 800104c:	f7ff fc42 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <w5500_read_phy_cfgr+0x40>)
 8001056:	f7ff fa01 	bl	800045c <GPIOWritePin>

	return rx_buf[3];
 800105a:	78fb      	ldrb	r3, [r7, #3]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020000 	.word	0x40020000
 8001068:	40003800 	.word	0x40003800

0800106c <w5500_configure_phy>:

void w5500_configure_phy(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];

	tx_buf[0] = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x2E;
 8001076:	232e      	movs	r3, #46	; 0x2e
 8001078:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x04;
 800107a:	2304      	movs	r3, #4
 800107c:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0xF8;
 800107e:	23f8      	movs	r3, #248	; 0xf8
 8001080:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001082:	2200      	movs	r2, #0
 8001084:	2104      	movs	r1, #4
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <w5500_configure_phy+0x40>)
 8001088:	f7ff f9e8 	bl	800045c <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,4);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2204      	movs	r2, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <w5500_configure_phy+0x44>)
 8001094:	f7ff fbf2 	bl	800087c <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001098:	2201      	movs	r2, #1
 800109a:	2104      	movs	r1, #4
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <w5500_configure_phy+0x40>)
 800109e:	f7ff f9dd 	bl	800045c <GPIOWritePin>

	return;
 80010a2:	bf00      	nop
}
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40003800 	.word	0x40003800

080010b4 <w5500_read_common_mode_reg>:

uint8_t w5500_read_common_mode_reg(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	uint8_t tx_buf[4];
	uint8_t rx_buf[4];

	tx_buf[0] = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	717b      	strb	r3, [r7, #5]
	tx_buf[2] = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71bb      	strb	r3, [r7, #6]
	tx_buf[3] = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <w5500_read_common_mode_reg+0x40>)
 80010d0:	f7ff f9c4 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,4);
 80010d4:	463a      	mov	r2, r7
 80010d6:	1d39      	adds	r1, r7, #4
 80010d8:	2304      	movs	r3, #4
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <w5500_read_common_mode_reg+0x44>)
 80010dc:	f7ff fbfa 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2104      	movs	r1, #4
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <w5500_read_common_mode_reg+0x40>)
 80010e6:	f7ff f9b9 	bl	800045c <GPIOWritePin>

	return rx_buf[3];
 80010ea:	78fb      	ldrb	r3, [r7, #3]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40003800 	.word	0x40003800

080010fc <w5500_configure_gw_ip_address>:

void w5500_configure_gw_ip_address(uint8_t *addr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x01;
 8001108:	2301      	movs	r3, #1
 800110a:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 800110c:	2304      	movs	r3, #4
 800110e:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = addr[0];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = addr[1];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = addr[2];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = addr[3];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	78db      	ldrb	r3, [r3, #3]
 8001126:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <w5500_configure_gw_ip_address+0x58>)
 800112e:	f7ff f995 	bl	800045c <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2207      	movs	r2, #7
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <w5500_configure_gw_ip_address+0x5c>)
 800113c:	f7ff fb9e 	bl	800087c <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001140:	2201      	movs	r2, #1
 8001142:	2104      	movs	r1, #4
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <w5500_configure_gw_ip_address+0x58>)
 8001146:	f7ff f989 	bl	800045c <GPIOWritePin>

	return;
 800114a:	bf00      	nop
}
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020000 	.word	0x40020000
 8001158:	40003800 	.word	0x40003800

0800115c <w5500_get_gw_ip_address>:

void w5500_get_gw_ip_address(uint8_t *addr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x01;
 8001168:	2301      	movs	r3, #1
 800116a:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001180:	2200      	movs	r2, #0
 8001182:	2104      	movs	r1, #4
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <w5500_get_gw_ip_address+0x78>)
 8001186:	f7ff f969 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	f107 0110 	add.w	r1, r7, #16
 8001192:	2307      	movs	r3, #7
 8001194:	4810      	ldr	r0, [pc, #64]	; (80011d8 <w5500_get_gw_ip_address+0x7c>)
 8001196:	f7ff fb9d 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800119a:	2201      	movs	r2, #1
 800119c:	2104      	movs	r1, #4
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <w5500_get_gw_ip_address+0x78>)
 80011a0:	f7ff f95c 	bl	800045c <GPIOWritePin>

	for(i=0;i<4;i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
 80011a8:	e00c      	b.n	80011c4 <w5500_get_gw_ip_address+0x68>
	{
		addr[i] = rx_buf[i+3];
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	1cda      	adds	r2, r3, #3
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	440b      	add	r3, r1
 80011b4:	3218      	adds	r2, #24
 80011b6:	443a      	add	r2, r7
 80011b8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80011bc:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	3301      	adds	r3, #1
 80011c2:	75fb      	strb	r3, [r7, #23]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d9ef      	bls.n	80011aa <w5500_get_gw_ip_address+0x4e>
	}

	return;
 80011ca:	bf00      	nop
}
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40003800 	.word	0x40003800

080011dc <w5500_configure_subnet_mask>:

void w5500_configure_subnet_mask(uint8_t *subnet_mask)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x05;
 80011e8:	2305      	movs	r3, #5
 80011ea:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 80011ec:	2304      	movs	r3, #4
 80011ee:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = subnet_mask[0];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = subnet_mask[1];
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = subnet_mask[2];
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = subnet_mask[3];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001208:	2200      	movs	r2, #0
 800120a:	2104      	movs	r1, #4
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <w5500_configure_subnet_mask+0x58>)
 800120e:	f7ff f925 	bl	800045c <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2207      	movs	r2, #7
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <w5500_configure_subnet_mask+0x5c>)
 800121c:	f7ff fb2e 	bl	800087c <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001220:	2201      	movs	r2, #1
 8001222:	2104      	movs	r1, #4
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <w5500_configure_subnet_mask+0x58>)
 8001226:	f7ff f919 	bl	800045c <GPIOWritePin>

	return;
 800122a:	bf00      	nop
}
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020000 	.word	0x40020000
 8001238:	40003800 	.word	0x40003800

0800123c <w5500_get_subnet_mask>:

void w5500_get_subnet_mask(uint8_t *subnet_mask)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x05;
 8001248:	2305      	movs	r3, #5
 800124a:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001258:	2300      	movs	r3, #0
 800125a:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001260:	2200      	movs	r2, #0
 8001262:	2104      	movs	r1, #4
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <w5500_get_subnet_mask+0x78>)
 8001266:	f7ff f8f9 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 800126a:	f107 0208 	add.w	r2, r7, #8
 800126e:	f107 0110 	add.w	r1, r7, #16
 8001272:	2307      	movs	r3, #7
 8001274:	4810      	ldr	r0, [pc, #64]	; (80012b8 <w5500_get_subnet_mask+0x7c>)
 8001276:	f7ff fb2d 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <w5500_get_subnet_mask+0x78>)
 8001280:	f7ff f8ec 	bl	800045c <GPIOWritePin>

	for(i=0;i<4;i++)
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]
 8001288:	e00c      	b.n	80012a4 <w5500_get_subnet_mask+0x68>
	{
		subnet_mask[i] = rx_buf[i+3];
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	1cda      	adds	r2, r3, #3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	440b      	add	r3, r1
 8001294:	3218      	adds	r2, #24
 8001296:	443a      	add	r2, r7
 8001298:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800129c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	3301      	adds	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d9ef      	bls.n	800128a <w5500_get_subnet_mask+0x4e>
	}

	return;
 80012aa:	bf00      	nop
}
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40003800 	.word	0x40003800

080012bc <w5500_configure_ip_address>:

void w5500_configure_ip_address(uint8_t *addr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];

	tx_buf[0] = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = 0x0F;
 80012c8:	230f      	movs	r3, #15
 80012ca:	727b      	strb	r3, [r7, #9]
	tx_buf[2] = 0x04;
 80012cc:	2304      	movs	r3, #4
 80012ce:	72bb      	strb	r3, [r7, #10]

	tx_buf[3] = addr[0];
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	72fb      	strb	r3, [r7, #11]
	tx_buf[4] = addr[1];
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	733b      	strb	r3, [r7, #12]
	tx_buf[5] = addr[2];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	737b      	strb	r3, [r7, #13]
	tx_buf[6] = addr[3];
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	73bb      	strb	r3, [r7, #14]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2104      	movs	r1, #4
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <w5500_configure_ip_address+0x58>)
 80012ee:	f7ff f8b5 	bl	800045c <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,7);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2207      	movs	r2, #7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <w5500_configure_ip_address+0x5c>)
 80012fc:	f7ff fabe 	bl	800087c <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 8001300:	2201      	movs	r2, #1
 8001302:	2104      	movs	r1, #4
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <w5500_configure_ip_address+0x58>)
 8001306:	f7ff f8a9 	bl	800045c <GPIOWritePin>

	return;
 800130a:	bf00      	nop
}
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020000 	.word	0x40020000
 8001318:	40003800 	.word	0x40003800

0800131c <w5500_get_ip_address>:

void w5500_get_ip_address(uint8_t *addr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[7];
	uint8_t rx_buf[7];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	743b      	strb	r3, [r7, #16]
	tx_buf[1] = 0x0F;
 8001328:	230f      	movs	r3, #15
 800132a:	747b      	strb	r3, [r7, #17]
	tx_buf[2] = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	74bb      	strb	r3, [r7, #18]

	tx_buf[3] = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	74fb      	strb	r3, [r7, #19]
	tx_buf[4] = 0x00;
 8001334:	2300      	movs	r3, #0
 8001336:	753b      	strb	r3, [r7, #20]
	tx_buf[5] = 0x00;
 8001338:	2300      	movs	r3, #0
 800133a:	757b      	strb	r3, [r7, #21]
	tx_buf[6] = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	75bb      	strb	r3, [r7, #22]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001340:	2200      	movs	r2, #0
 8001342:	2104      	movs	r1, #4
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <w5500_get_ip_address+0x78>)
 8001346:	f7ff f889 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,7);
 800134a:	f107 0208 	add.w	r2, r7, #8
 800134e:	f107 0110 	add.w	r1, r7, #16
 8001352:	2307      	movs	r3, #7
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <w5500_get_ip_address+0x7c>)
 8001356:	f7ff fabd 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800135a:	2201      	movs	r2, #1
 800135c:	2104      	movs	r1, #4
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <w5500_get_ip_address+0x78>)
 8001360:	f7ff f87c 	bl	800045c <GPIOWritePin>

	for(i=0;i<4;i++)
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
 8001368:	e00c      	b.n	8001384 <w5500_get_ip_address+0x68>
	{
		addr[i] = rx_buf[i+3];
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	1cda      	adds	r2, r3, #3
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	3218      	adds	r2, #24
 8001376:	443a      	add	r2, r7
 8001378:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800137c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<4;i++)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	3301      	adds	r3, #1
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d9ef      	bls.n	800136a <w5500_get_ip_address+0x4e>
	}

	return;
 800138a:	bf00      	nop
}
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020000 	.word	0x40020000
 8001398:	40003800 	.word	0x40003800

0800139c <w5500_configure_mac_address>:

void w5500_configure_mac_address(uint8_t *addr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[9];

	tx_buf[0] = 0x00;
 80013a4:	2300      	movs	r3, #0
 80013a6:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0x09;
 80013a8:	2309      	movs	r3, #9
 80013aa:	737b      	strb	r3, [r7, #13]
	tx_buf[2] = 0x04;
 80013ac:	2304      	movs	r3, #4
 80013ae:	73bb      	strb	r3, [r7, #14]

	tx_buf[3] = addr[0];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	73fb      	strb	r3, [r7, #15]
	tx_buf[4] = addr[1];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	743b      	strb	r3, [r7, #16]
	tx_buf[5] = addr[2];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	747b      	strb	r3, [r7, #17]
	tx_buf[6] = addr[3];
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	74bb      	strb	r3, [r7, #18]
	tx_buf[7] = addr[4];
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	791b      	ldrb	r3, [r3, #4]
 80013cc:	74fb      	strb	r3, [r7, #19]
	tx_buf[8] = addr[5];
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	753b      	strb	r3, [r7, #20]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2104      	movs	r1, #4
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <w5500_configure_mac_address+0x64>)
 80013da:	f7ff f83f 	bl	800045c <GPIOWritePin>
	SPISendData(SPI_DEV,tx_buf,9);
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2209      	movs	r2, #9
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <w5500_configure_mac_address+0x68>)
 80013e8:	f7ff fa48 	bl	800087c <SPISendData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2104      	movs	r1, #4
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <w5500_configure_mac_address+0x64>)
 80013f2:	f7ff f833 	bl	800045c <GPIOWritePin>

	return;
 80013f6:	bf00      	nop
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40020000 	.word	0x40020000
 8001404:	40003800 	.word	0x40003800

08001408 <w5500_get_mac_address>:

void w5500_get_mac_address(uint8_t *addr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	uint8_t tx_buf[9];
	uint8_t rx_buf[9];
	uint8_t i;

	tx_buf[0] = 0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	753b      	strb	r3, [r7, #20]
	tx_buf[1] = 0x09;
 8001414:	2309      	movs	r3, #9
 8001416:	757b      	strb	r3, [r7, #21]
	tx_buf[2] = 0x00;
 8001418:	2300      	movs	r3, #0
 800141a:	75bb      	strb	r3, [r7, #22]

	tx_buf[3] = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
	tx_buf[4] = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	763b      	strb	r3, [r7, #24]
	tx_buf[5] = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	767b      	strb	r3, [r7, #25]
	tx_buf[6] = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	76bb      	strb	r3, [r7, #26]
	tx_buf[7] = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	76fb      	strb	r3, [r7, #27]
	tx_buf[8] = 0x00;
 8001430:	2300      	movs	r3, #0
 8001432:	773b      	strb	r3, [r7, #28]

	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_LOW);
 8001434:	2200      	movs	r2, #0
 8001436:	2104      	movs	r1, #4
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <w5500_get_mac_address+0x80>)
 800143a:	f7ff f80f 	bl	800045c <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,tx_buf,rx_buf,9);
 800143e:	f107 0208 	add.w	r2, r7, #8
 8001442:	f107 0114 	add.w	r1, r7, #20
 8001446:	2309      	movs	r3, #9
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <w5500_get_mac_address+0x84>)
 800144a:	f7ff fa43 	bl	80008d4 <SPIMasterRecvData>
	GPIOWritePin(W5500_PORT,SS_PIN,GPIO_HIGH);
 800144e:	2201      	movs	r2, #1
 8001450:	2104      	movs	r1, #4
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <w5500_get_mac_address+0x80>)
 8001454:	f7ff f802 	bl	800045c <GPIOWritePin>

	for(i=0;i<6;i++)
 8001458:	2300      	movs	r3, #0
 800145a:	77fb      	strb	r3, [r7, #31]
 800145c:	e00c      	b.n	8001478 <w5500_get_mac_address+0x70>
	{
		addr[i] = rx_buf[i+3];
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	1cda      	adds	r2, r3, #3
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	440b      	add	r3, r1
 8001468:	3220      	adds	r2, #32
 800146a:	443a      	add	r2, r7
 800146c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001470:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++)
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	3301      	adds	r3, #1
 8001476:	77fb      	strb	r3, [r7, #31]
 8001478:	7ffb      	ldrb	r3, [r7, #31]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d9ef      	bls.n	800145e <w5500_get_mac_address+0x56>
	}

	return;
 800147e:	bf00      	nop
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020000 	.word	0x40020000
 800148c:	40003800 	.word	0x40003800

08001490 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
  }

  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff83 	bl	80003f0 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	605a      	str	r2, [r3, #4]
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f000 f91a 	bl	80017cc <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	200000c0 	.word	0x200000c0

080015d0 <main>:
#include "general_purpose_timer.h"
#include "common_utils.h"
#include "w5500_driver.h"

int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
	uint8_t w5500_chip_ver;
	uint8_t w5500_phy_cfgr;
	uint8_t w5500_common_mode_reg;
	uint8_t gw_ip_addr[4] = {192,168,1,1};
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <main+0x174>)
 80015d8:	61bb      	str	r3, [r7, #24]
	uint8_t nw_sub_mask[4] = {255,255,255,0};
 80015da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015de:	617b      	str	r3, [r7, #20]
	uint8_t ip_addr[4] = {192,168,1,150};
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <main+0x178>)
 80015e2:	613b      	str	r3, [r7, #16]
	uint8_t mac_addr[6] = {0x00,0x02,0x73,0x90,0x11,0x22};
 80015e4:	4a59      	ldr	r2, [pc, #356]	; (800174c <main+0x17c>)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ee:	6018      	str	r0, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	8019      	strh	r1, [r3, #0]

	uint8_t buf[6];
	uint8_t i;

	configure_uart();
 80015f4:	f7fe fe9e 	bl	8000334 <configure_uart>
	configure_spi();
 80015f8:	f7fe fe4a 	bl	8000290 <configure_spi>
	w5500_configure_pins();
 80015fc:	f7ff fcda 	bl	8000fb4 <w5500_configure_pins>

	w5500_chip_ver = w5500_get_chip_version();
 8001600:	f7ff fcec 	bl	8000fdc <w5500_get_chip_version>
 8001604:	4603      	mov	r3, r0
 8001606:	77bb      	strb	r3, [r7, #30]
	printf("W5500 Chip Version: 0x%X\r\n",w5500_chip_ver);
 8001608:	7fbb      	ldrb	r3, [r7, #30]
 800160a:	4619      	mov	r1, r3
 800160c:	4850      	ldr	r0, [pc, #320]	; (8001750 <main+0x180>)
 800160e:	f000 f9ed 	bl	80019ec <iprintf>

	w5500_configure_phy();
 8001612:	f7ff fd2b 	bl	800106c <w5500_configure_phy>

	w5500_phy_cfgr = w5500_read_phy_cfgr();
 8001616:	f7ff fd05 	bl	8001024 <w5500_read_phy_cfgr>
 800161a:	4603      	mov	r3, r0
 800161c:	777b      	strb	r3, [r7, #29]
	printf("The current value of PHYCFGR: 0x%X\r\n", w5500_phy_cfgr);
 800161e:	7f7b      	ldrb	r3, [r7, #29]
 8001620:	4619      	mov	r1, r3
 8001622:	484c      	ldr	r0, [pc, #304]	; (8001754 <main+0x184>)
 8001624:	f000 f9e2 	bl	80019ec <iprintf>

	w5500_common_mode_reg = w5500_read_common_mode_reg();
 8001628:	f7ff fd44 	bl	80010b4 <w5500_read_common_mode_reg>
 800162c:	4603      	mov	r3, r0
 800162e:	773b      	strb	r3, [r7, #28]
	printf("The current value of Common Mode Register (MR): 0x%X\r\n", w5500_common_mode_reg);
 8001630:	7f3b      	ldrb	r3, [r7, #28]
 8001632:	4619      	mov	r1, r3
 8001634:	4848      	ldr	r0, [pc, #288]	; (8001758 <main+0x188>)
 8001636:	f000 f9d9 	bl	80019ec <iprintf>

	w5500_configure_gw_ip_address(gw_ip_addr);
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd5c 	bl	80010fc <w5500_configure_gw_ip_address>
	w5500_configure_subnet_mask(nw_sub_mask);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fdc7 	bl	80011dc <w5500_configure_subnet_mask>
	w5500_configure_ip_address(ip_addr);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe32 	bl	80012bc <w5500_configure_ip_address>
	w5500_configure_mac_address(mac_addr);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe9d 	bl	800139c <w5500_configure_mac_address>

	w5500_get_ip_address(buf);
 8001662:	463b      	mov	r3, r7
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe59 	bl	800131c <w5500_get_ip_address>
	printf("IP Address: ");
 800166a:	483c      	ldr	r0, [pc, #240]	; (800175c <main+0x18c>)
 800166c:	f000 f9be 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 8001670:	2300      	movs	r3, #0
 8001672:	77fb      	strb	r3, [r7, #31]
 8001674:	e00b      	b.n	800168e <main+0xbe>
		printf("%d ",buf[i]);
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	3320      	adds	r3, #32
 800167a:	443b      	add	r3, r7
 800167c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001680:	4619      	mov	r1, r3
 8001682:	4837      	ldr	r0, [pc, #220]	; (8001760 <main+0x190>)
 8001684:	f000 f9b2 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	3301      	adds	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d9f0      	bls.n	8001676 <main+0xa6>
	printf("\r\n");
 8001694:	4833      	ldr	r0, [pc, #204]	; (8001764 <main+0x194>)
 8001696:	f000 fa2f 	bl	8001af8 <puts>

	w5500_get_subnet_mask(buf);
 800169a:	463b      	mov	r3, r7
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fdcd 	bl	800123c <w5500_get_subnet_mask>
	printf("Subnet Mask: ");
 80016a2:	4831      	ldr	r0, [pc, #196]	; (8001768 <main+0x198>)
 80016a4:	f000 f9a2 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	77fb      	strb	r3, [r7, #31]
 80016ac:	e00b      	b.n	80016c6 <main+0xf6>
		printf("%d ",buf[i]);
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	3320      	adds	r3, #32
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4829      	ldr	r0, [pc, #164]	; (8001760 <main+0x190>)
 80016bc:	f000 f996 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 80016c0:	7ffb      	ldrb	r3, [r7, #31]
 80016c2:	3301      	adds	r3, #1
 80016c4:	77fb      	strb	r3, [r7, #31]
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d9f0      	bls.n	80016ae <main+0xde>
	printf("\r\n");
 80016cc:	4825      	ldr	r0, [pc, #148]	; (8001764 <main+0x194>)
 80016ce:	f000 fa13 	bl	8001af8 <puts>

	w5500_get_gw_ip_address(buf);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd41 	bl	800115c <w5500_get_gw_ip_address>
	printf("Gateway IP: ");
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <main+0x19c>)
 80016dc:	f000 f986 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	77fb      	strb	r3, [r7, #31]
 80016e4:	e00b      	b.n	80016fe <main+0x12e>
		printf("%d ",buf[i]);
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	3320      	adds	r3, #32
 80016ea:	443b      	add	r3, r7
 80016ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80016f0:	4619      	mov	r1, r3
 80016f2:	481b      	ldr	r0, [pc, #108]	; (8001760 <main+0x190>)
 80016f4:	f000 f97a 	bl	80019ec <iprintf>
	for(i=0;i<4;i++)
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	3301      	adds	r3, #1
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d9f0      	bls.n	80016e6 <main+0x116>
	printf("\r\n");
 8001704:	4817      	ldr	r0, [pc, #92]	; (8001764 <main+0x194>)
 8001706:	f000 f9f7 	bl	8001af8 <puts>

	w5500_get_mac_address(buf);
 800170a:	463b      	mov	r3, r7
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fe7b 	bl	8001408 <w5500_get_mac_address>
	printf("MAC Address: ");
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <main+0x1a0>)
 8001714:	f000 f96a 	bl	80019ec <iprintf>
	for(i=0;i<6;i++)
 8001718:	2300      	movs	r3, #0
 800171a:	77fb      	strb	r3, [r7, #31]
 800171c:	e00b      	b.n	8001736 <main+0x166>
		printf("%X ",buf[i]);
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	3320      	adds	r3, #32
 8001722:	443b      	add	r3, r7
 8001724:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001728:	4619      	mov	r1, r3
 800172a:	4812      	ldr	r0, [pc, #72]	; (8001774 <main+0x1a4>)
 800172c:	f000 f95e 	bl	80019ec <iprintf>
	for(i=0;i<6;i++)
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	3301      	adds	r3, #1
 8001734:	77fb      	strb	r3, [r7, #31]
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d9f0      	bls.n	800171e <main+0x14e>
	printf("\r\n");
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <main+0x194>)
 800173e:	f000 f9db 	bl	8001af8 <puts>

	while(1)
 8001742:	e7fe      	b.n	8001742 <main+0x172>
 8001744:	0101a8c0 	.word	0x0101a8c0
 8001748:	9601a8c0 	.word	0x9601a8c0
 800174c:	08002908 	.word	0x08002908
 8001750:	08002840 	.word	0x08002840
 8001754:	0800285c 	.word	0x0800285c
 8001758:	08002884 	.word	0x08002884
 800175c:	080028bc 	.word	0x080028bc
 8001760:	080028cc 	.word	0x080028cc
 8001764:	080028d0 	.word	0x080028d0
 8001768:	080028d4 	.word	0x080028d4
 800176c:	080028e4 	.word	0x080028e4
 8001770:	080028f4 	.word	0x080028f4
 8001774:	08002904 	.word	0x08002904

08001778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800177a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800177c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017a6:	f000 f817 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017aa:	f7ff ff11 	bl	80015d0 <main>

080017ae <LoopForever>:

LoopForever:
  b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   r0, =_estack
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017bc:	080029b0 	.word	0x080029b0
  ldr r2, =_sbss
 80017c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017c4:	200000bc 	.word	0x200000bc

080017c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <__errno>:
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <__errno+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4d0d      	ldr	r5, [pc, #52]	; (8001810 <__libc_init_array+0x38>)
 80017dc:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <__libc_init_array+0x3c>)
 80017de:	1b64      	subs	r4, r4, r5
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	2600      	movs	r6, #0
 80017e4:	42a6      	cmp	r6, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	4d0b      	ldr	r5, [pc, #44]	; (8001818 <__libc_init_array+0x40>)
 80017ea:	4c0c      	ldr	r4, [pc, #48]	; (800181c <__libc_init_array+0x44>)
 80017ec:	f001 f81c 	bl	8002828 <_init>
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	2600      	movs	r6, #0
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001800:	4798      	blx	r3
 8001802:	3601      	adds	r6, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	f855 3b04 	ldr.w	r3, [r5], #4
 800180a:	4798      	blx	r3
 800180c:	3601      	adds	r6, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	080029a8 	.word	0x080029a8
 8001814:	080029a8 	.word	0x080029a8
 8001818:	080029a8 	.word	0x080029a8
 800181c:	080029ac 	.word	0x080029ac

08001820 <memset>:
 8001820:	4402      	add	r2, r0
 8001822:	4603      	mov	r3, r0
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	f803 1b01 	strb.w	r1, [r3], #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <_free_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4605      	mov	r5, r0
 8001834:	2900      	cmp	r1, #0
 8001836:	d041      	beq.n	80018bc <_free_r+0x8c>
 8001838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800183c:	1f0c      	subs	r4, r1, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	bfb8      	it	lt
 8001842:	18e4      	addlt	r4, r4, r3
 8001844:	f000 fc4c 	bl	80020e0 <__malloc_lock>
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <_free_r+0x90>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	b933      	cbnz	r3, 800185c <_free_r+0x2c>
 800184e:	6063      	str	r3, [r4, #4]
 8001850:	6014      	str	r4, [r2, #0]
 8001852:	4628      	mov	r0, r5
 8001854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001858:	f000 bc48 	b.w	80020ec <__malloc_unlock>
 800185c:	42a3      	cmp	r3, r4
 800185e:	d908      	bls.n	8001872 <_free_r+0x42>
 8001860:	6820      	ldr	r0, [r4, #0]
 8001862:	1821      	adds	r1, r4, r0
 8001864:	428b      	cmp	r3, r1
 8001866:	bf01      	itttt	eq
 8001868:	6819      	ldreq	r1, [r3, #0]
 800186a:	685b      	ldreq	r3, [r3, #4]
 800186c:	1809      	addeq	r1, r1, r0
 800186e:	6021      	streq	r1, [r4, #0]
 8001870:	e7ed      	b.n	800184e <_free_r+0x1e>
 8001872:	461a      	mov	r2, r3
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	b10b      	cbz	r3, 800187c <_free_r+0x4c>
 8001878:	42a3      	cmp	r3, r4
 800187a:	d9fa      	bls.n	8001872 <_free_r+0x42>
 800187c:	6811      	ldr	r1, [r2, #0]
 800187e:	1850      	adds	r0, r2, r1
 8001880:	42a0      	cmp	r0, r4
 8001882:	d10b      	bne.n	800189c <_free_r+0x6c>
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	4401      	add	r1, r0
 8001888:	1850      	adds	r0, r2, r1
 800188a:	4283      	cmp	r3, r0
 800188c:	6011      	str	r1, [r2, #0]
 800188e:	d1e0      	bne.n	8001852 <_free_r+0x22>
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6053      	str	r3, [r2, #4]
 8001896:	4401      	add	r1, r0
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	e7da      	b.n	8001852 <_free_r+0x22>
 800189c:	d902      	bls.n	80018a4 <_free_r+0x74>
 800189e:	230c      	movs	r3, #12
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	e7d6      	b.n	8001852 <_free_r+0x22>
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	1821      	adds	r1, r4, r0
 80018a8:	428b      	cmp	r3, r1
 80018aa:	bf04      	itt	eq
 80018ac:	6819      	ldreq	r1, [r3, #0]
 80018ae:	685b      	ldreq	r3, [r3, #4]
 80018b0:	6063      	str	r3, [r4, #4]
 80018b2:	bf04      	itt	eq
 80018b4:	1809      	addeq	r1, r1, r0
 80018b6:	6021      	streq	r1, [r4, #0]
 80018b8:	6054      	str	r4, [r2, #4]
 80018ba:	e7ca      	b.n	8001852 <_free_r+0x22>
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
 80018be:	bf00      	nop
 80018c0:	200000ac 	.word	0x200000ac

080018c4 <sbrk_aligned>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	4e0e      	ldr	r6, [pc, #56]	; (8001900 <sbrk_aligned+0x3c>)
 80018c8:	460c      	mov	r4, r1
 80018ca:	6831      	ldr	r1, [r6, #0]
 80018cc:	4605      	mov	r5, r0
 80018ce:	b911      	cbnz	r1, 80018d6 <sbrk_aligned+0x12>
 80018d0:	f000 f91a 	bl	8001b08 <_sbrk_r>
 80018d4:	6030      	str	r0, [r6, #0]
 80018d6:	4621      	mov	r1, r4
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f915 	bl	8001b08 <_sbrk_r>
 80018de:	1c43      	adds	r3, r0, #1
 80018e0:	d00a      	beq.n	80018f8 <sbrk_aligned+0x34>
 80018e2:	1cc4      	adds	r4, r0, #3
 80018e4:	f024 0403 	bic.w	r4, r4, #3
 80018e8:	42a0      	cmp	r0, r4
 80018ea:	d007      	beq.n	80018fc <sbrk_aligned+0x38>
 80018ec:	1a21      	subs	r1, r4, r0
 80018ee:	4628      	mov	r0, r5
 80018f0:	f000 f90a 	bl	8001b08 <_sbrk_r>
 80018f4:	3001      	adds	r0, #1
 80018f6:	d101      	bne.n	80018fc <sbrk_aligned+0x38>
 80018f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80018fc:	4620      	mov	r0, r4
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
 8001900:	200000b0 	.word	0x200000b0

08001904 <_malloc_r>:
 8001904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001908:	1ccd      	adds	r5, r1, #3
 800190a:	f025 0503 	bic.w	r5, r5, #3
 800190e:	3508      	adds	r5, #8
 8001910:	2d0c      	cmp	r5, #12
 8001912:	bf38      	it	cc
 8001914:	250c      	movcc	r5, #12
 8001916:	2d00      	cmp	r5, #0
 8001918:	4607      	mov	r7, r0
 800191a:	db01      	blt.n	8001920 <_malloc_r+0x1c>
 800191c:	42a9      	cmp	r1, r5
 800191e:	d905      	bls.n	800192c <_malloc_r+0x28>
 8001920:	230c      	movs	r3, #12
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	2600      	movs	r6, #0
 8001926:	4630      	mov	r0, r6
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192c:	4e2e      	ldr	r6, [pc, #184]	; (80019e8 <_malloc_r+0xe4>)
 800192e:	f000 fbd7 	bl	80020e0 <__malloc_lock>
 8001932:	6833      	ldr	r3, [r6, #0]
 8001934:	461c      	mov	r4, r3
 8001936:	bb34      	cbnz	r4, 8001986 <_malloc_r+0x82>
 8001938:	4629      	mov	r1, r5
 800193a:	4638      	mov	r0, r7
 800193c:	f7ff ffc2 	bl	80018c4 <sbrk_aligned>
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	4604      	mov	r4, r0
 8001944:	d14d      	bne.n	80019e2 <_malloc_r+0xde>
 8001946:	6834      	ldr	r4, [r6, #0]
 8001948:	4626      	mov	r6, r4
 800194a:	2e00      	cmp	r6, #0
 800194c:	d140      	bne.n	80019d0 <_malloc_r+0xcc>
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	4631      	mov	r1, r6
 8001952:	4638      	mov	r0, r7
 8001954:	eb04 0803 	add.w	r8, r4, r3
 8001958:	f000 f8d6 	bl	8001b08 <_sbrk_r>
 800195c:	4580      	cmp	r8, r0
 800195e:	d13a      	bne.n	80019d6 <_malloc_r+0xd2>
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	3503      	adds	r5, #3
 8001964:	1a6d      	subs	r5, r5, r1
 8001966:	f025 0503 	bic.w	r5, r5, #3
 800196a:	3508      	adds	r5, #8
 800196c:	2d0c      	cmp	r5, #12
 800196e:	bf38      	it	cc
 8001970:	250c      	movcc	r5, #12
 8001972:	4629      	mov	r1, r5
 8001974:	4638      	mov	r0, r7
 8001976:	f7ff ffa5 	bl	80018c4 <sbrk_aligned>
 800197a:	3001      	adds	r0, #1
 800197c:	d02b      	beq.n	80019d6 <_malloc_r+0xd2>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	442b      	add	r3, r5
 8001982:	6023      	str	r3, [r4, #0]
 8001984:	e00e      	b.n	80019a4 <_malloc_r+0xa0>
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	1b52      	subs	r2, r2, r5
 800198a:	d41e      	bmi.n	80019ca <_malloc_r+0xc6>
 800198c:	2a0b      	cmp	r2, #11
 800198e:	d916      	bls.n	80019be <_malloc_r+0xba>
 8001990:	1961      	adds	r1, r4, r5
 8001992:	42a3      	cmp	r3, r4
 8001994:	6025      	str	r5, [r4, #0]
 8001996:	bf18      	it	ne
 8001998:	6059      	strne	r1, [r3, #4]
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	bf08      	it	eq
 800199e:	6031      	streq	r1, [r6, #0]
 80019a0:	5162      	str	r2, [r4, r5]
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	4638      	mov	r0, r7
 80019a6:	f104 060b 	add.w	r6, r4, #11
 80019aa:	f000 fb9f 	bl	80020ec <__malloc_unlock>
 80019ae:	f026 0607 	bic.w	r6, r6, #7
 80019b2:	1d23      	adds	r3, r4, #4
 80019b4:	1af2      	subs	r2, r6, r3
 80019b6:	d0b6      	beq.n	8001926 <_malloc_r+0x22>
 80019b8:	1b9b      	subs	r3, r3, r6
 80019ba:	50a3      	str	r3, [r4, r2]
 80019bc:	e7b3      	b.n	8001926 <_malloc_r+0x22>
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	bf0c      	ite	eq
 80019c4:	6032      	streq	r2, [r6, #0]
 80019c6:	605a      	strne	r2, [r3, #4]
 80019c8:	e7ec      	b.n	80019a4 <_malloc_r+0xa0>
 80019ca:	4623      	mov	r3, r4
 80019cc:	6864      	ldr	r4, [r4, #4]
 80019ce:	e7b2      	b.n	8001936 <_malloc_r+0x32>
 80019d0:	4634      	mov	r4, r6
 80019d2:	6876      	ldr	r6, [r6, #4]
 80019d4:	e7b9      	b.n	800194a <_malloc_r+0x46>
 80019d6:	230c      	movs	r3, #12
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4638      	mov	r0, r7
 80019dc:	f000 fb86 	bl	80020ec <__malloc_unlock>
 80019e0:	e7a1      	b.n	8001926 <_malloc_r+0x22>
 80019e2:	6025      	str	r5, [r4, #0]
 80019e4:	e7de      	b.n	80019a4 <_malloc_r+0xa0>
 80019e6:	bf00      	nop
 80019e8:	200000ac 	.word	0x200000ac

080019ec <iprintf>:
 80019ec:	b40f      	push	{r0, r1, r2, r3}
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <iprintf+0x2c>)
 80019f0:	b513      	push	{r0, r1, r4, lr}
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	b124      	cbz	r4, 8001a00 <iprintf+0x14>
 80019f6:	69a3      	ldr	r3, [r4, #24]
 80019f8:	b913      	cbnz	r3, 8001a00 <iprintf+0x14>
 80019fa:	4620      	mov	r0, r4
 80019fc:	f000 fa6a 	bl	8001ed4 <__sinit>
 8001a00:	ab05      	add	r3, sp, #20
 8001a02:	9a04      	ldr	r2, [sp, #16]
 8001a04:	68a1      	ldr	r1, [r4, #8]
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 fb9d 	bl	8002148 <_vfiprintf_r>
 8001a0e:	b002      	add	sp, #8
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a14:	b004      	add	sp, #16
 8001a16:	4770      	bx	lr
 8001a18:	20000000 	.word	0x20000000

08001a1c <_puts_r>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	460e      	mov	r6, r1
 8001a20:	4605      	mov	r5, r0
 8001a22:	b118      	cbz	r0, 8001a2c <_puts_r+0x10>
 8001a24:	6983      	ldr	r3, [r0, #24]
 8001a26:	b90b      	cbnz	r3, 8001a2c <_puts_r+0x10>
 8001a28:	f000 fa54 	bl	8001ed4 <__sinit>
 8001a2c:	69ab      	ldr	r3, [r5, #24]
 8001a2e:	68ac      	ldr	r4, [r5, #8]
 8001a30:	b913      	cbnz	r3, 8001a38 <_puts_r+0x1c>
 8001a32:	4628      	mov	r0, r5
 8001a34:	f000 fa4e 	bl	8001ed4 <__sinit>
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <_puts_r+0xd0>)
 8001a3a:	429c      	cmp	r4, r3
 8001a3c:	d120      	bne.n	8001a80 <_puts_r+0x64>
 8001a3e:	686c      	ldr	r4, [r5, #4]
 8001a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a42:	07db      	lsls	r3, r3, #31
 8001a44:	d405      	bmi.n	8001a52 <_puts_r+0x36>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	0598      	lsls	r0, r3, #22
 8001a4a:	d402      	bmi.n	8001a52 <_puts_r+0x36>
 8001a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a4e:	f000 fadf 	bl	8002010 <__retarget_lock_acquire_recursive>
 8001a52:	89a3      	ldrh	r3, [r4, #12]
 8001a54:	0719      	lsls	r1, r3, #28
 8001a56:	d51d      	bpl.n	8001a94 <_puts_r+0x78>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	b1db      	cbz	r3, 8001a94 <_puts_r+0x78>
 8001a5c:	3e01      	subs	r6, #1
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60a3      	str	r3, [r4, #8]
 8001a68:	bb39      	cbnz	r1, 8001aba <_puts_r+0x9e>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da38      	bge.n	8001ae0 <_puts_r+0xc4>
 8001a6e:	4622      	mov	r2, r4
 8001a70:	210a      	movs	r1, #10
 8001a72:	4628      	mov	r0, r5
 8001a74:	f000 f858 	bl	8001b28 <__swbuf_r>
 8001a78:	3001      	adds	r0, #1
 8001a7a:	d011      	beq.n	8001aa0 <_puts_r+0x84>
 8001a7c:	250a      	movs	r5, #10
 8001a7e:	e011      	b.n	8001aa4 <_puts_r+0x88>
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <_puts_r+0xd4>)
 8001a82:	429c      	cmp	r4, r3
 8001a84:	d101      	bne.n	8001a8a <_puts_r+0x6e>
 8001a86:	68ac      	ldr	r4, [r5, #8]
 8001a88:	e7da      	b.n	8001a40 <_puts_r+0x24>
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <_puts_r+0xd8>)
 8001a8c:	429c      	cmp	r4, r3
 8001a8e:	bf08      	it	eq
 8001a90:	68ec      	ldreq	r4, [r5, #12]
 8001a92:	e7d5      	b.n	8001a40 <_puts_r+0x24>
 8001a94:	4621      	mov	r1, r4
 8001a96:	4628      	mov	r0, r5
 8001a98:	f000 f898 	bl	8001bcc <__swsetup_r>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d0dd      	beq.n	8001a5c <_puts_r+0x40>
 8001aa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa6:	07da      	lsls	r2, r3, #31
 8001aa8:	d405      	bmi.n	8001ab6 <_puts_r+0x9a>
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	059b      	lsls	r3, r3, #22
 8001aae:	d402      	bmi.n	8001ab6 <_puts_r+0x9a>
 8001ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ab2:	f000 faae 	bl	8002012 <__retarget_lock_release_recursive>
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da04      	bge.n	8001ac8 <_puts_r+0xac>
 8001abe:	69a2      	ldr	r2, [r4, #24]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dc06      	bgt.n	8001ad2 <_puts_r+0xb6>
 8001ac4:	290a      	cmp	r1, #10
 8001ac6:	d004      	beq.n	8001ad2 <_puts_r+0xb6>
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	6022      	str	r2, [r4, #0]
 8001ace:	7019      	strb	r1, [r3, #0]
 8001ad0:	e7c5      	b.n	8001a5e <_puts_r+0x42>
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f000 f827 	bl	8001b28 <__swbuf_r>
 8001ada:	3001      	adds	r0, #1
 8001adc:	d1bf      	bne.n	8001a5e <_puts_r+0x42>
 8001ade:	e7df      	b.n	8001aa0 <_puts_r+0x84>
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	250a      	movs	r5, #10
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	6022      	str	r2, [r4, #0]
 8001ae8:	701d      	strb	r5, [r3, #0]
 8001aea:	e7db      	b.n	8001aa4 <_puts_r+0x88>
 8001aec:	08002934 	.word	0x08002934
 8001af0:	08002954 	.word	0x08002954
 8001af4:	08002914 	.word	0x08002914

08001af8 <puts>:
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <puts+0xc>)
 8001afa:	4601      	mov	r1, r0
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f7ff bf8d 	b.w	8001a1c <_puts_r>
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <_sbrk_r>:
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4d06      	ldr	r5, [pc, #24]	; (8001b24 <_sbrk_r+0x1c>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
 8001b12:	602b      	str	r3, [r5, #0]
 8001b14:	f7ff fd26 	bl	8001564 <_sbrk>
 8001b18:	1c43      	adds	r3, r0, #1
 8001b1a:	d102      	bne.n	8001b22 <_sbrk_r+0x1a>
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	b103      	cbz	r3, 8001b22 <_sbrk_r+0x1a>
 8001b20:	6023      	str	r3, [r4, #0]
 8001b22:	bd38      	pop	{r3, r4, r5, pc}
 8001b24:	200000b8 	.word	0x200000b8

08001b28 <__swbuf_r>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	460e      	mov	r6, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	4605      	mov	r5, r0
 8001b30:	b118      	cbz	r0, 8001b3a <__swbuf_r+0x12>
 8001b32:	6983      	ldr	r3, [r0, #24]
 8001b34:	b90b      	cbnz	r3, 8001b3a <__swbuf_r+0x12>
 8001b36:	f000 f9cd 	bl	8001ed4 <__sinit>
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <__swbuf_r+0x98>)
 8001b3c:	429c      	cmp	r4, r3
 8001b3e:	d12b      	bne.n	8001b98 <__swbuf_r+0x70>
 8001b40:	686c      	ldr	r4, [r5, #4]
 8001b42:	69a3      	ldr	r3, [r4, #24]
 8001b44:	60a3      	str	r3, [r4, #8]
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	071a      	lsls	r2, r3, #28
 8001b4a:	d52f      	bpl.n	8001bac <__swbuf_r+0x84>
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	b36b      	cbz	r3, 8001bac <__swbuf_r+0x84>
 8001b50:	6923      	ldr	r3, [r4, #16]
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	1ac0      	subs	r0, r0, r3
 8001b56:	6963      	ldr	r3, [r4, #20]
 8001b58:	b2f6      	uxtb	r6, r6
 8001b5a:	4283      	cmp	r3, r0
 8001b5c:	4637      	mov	r7, r6
 8001b5e:	dc04      	bgt.n	8001b6a <__swbuf_r+0x42>
 8001b60:	4621      	mov	r1, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f922 	bl	8001dac <_fflush_r>
 8001b68:	bb30      	cbnz	r0, 8001bb8 <__swbuf_r+0x90>
 8001b6a:	68a3      	ldr	r3, [r4, #8]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	60a3      	str	r3, [r4, #8]
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	6022      	str	r2, [r4, #0]
 8001b76:	701e      	strb	r6, [r3, #0]
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	4283      	cmp	r3, r0
 8001b7e:	d004      	beq.n	8001b8a <__swbuf_r+0x62>
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	07db      	lsls	r3, r3, #31
 8001b84:	d506      	bpl.n	8001b94 <__swbuf_r+0x6c>
 8001b86:	2e0a      	cmp	r6, #10
 8001b88:	d104      	bne.n	8001b94 <__swbuf_r+0x6c>
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 f90d 	bl	8001dac <_fflush_r>
 8001b92:	b988      	cbnz	r0, 8001bb8 <__swbuf_r+0x90>
 8001b94:	4638      	mov	r0, r7
 8001b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <__swbuf_r+0x9c>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <__swbuf_r+0x7a>
 8001b9e:	68ac      	ldr	r4, [r5, #8]
 8001ba0:	e7cf      	b.n	8001b42 <__swbuf_r+0x1a>
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <__swbuf_r+0xa0>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	68ec      	ldreq	r4, [r5, #12]
 8001baa:	e7ca      	b.n	8001b42 <__swbuf_r+0x1a>
 8001bac:	4621      	mov	r1, r4
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 f80c 	bl	8001bcc <__swsetup_r>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d0cb      	beq.n	8001b50 <__swbuf_r+0x28>
 8001bb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001bbc:	e7ea      	b.n	8001b94 <__swbuf_r+0x6c>
 8001bbe:	bf00      	nop
 8001bc0:	08002934 	.word	0x08002934
 8001bc4:	08002954 	.word	0x08002954
 8001bc8:	08002914 	.word	0x08002914

08001bcc <__swsetup_r>:
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <__swsetup_r+0xcc>)
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	b125      	cbz	r5, 8001be2 <__swsetup_r+0x16>
 8001bd8:	69ab      	ldr	r3, [r5, #24]
 8001bda:	b913      	cbnz	r3, 8001be2 <__swsetup_r+0x16>
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 f979 	bl	8001ed4 <__sinit>
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <__swsetup_r+0xd0>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	d10f      	bne.n	8001c08 <__swsetup_r+0x3c>
 8001be8:	686c      	ldr	r4, [r5, #4]
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf0:	0719      	lsls	r1, r3, #28
 8001bf2:	d42c      	bmi.n	8001c4e <__swsetup_r+0x82>
 8001bf4:	06dd      	lsls	r5, r3, #27
 8001bf6:	d411      	bmi.n	8001c1c <__swsetup_r+0x50>
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	6033      	str	r3, [r6, #0]
 8001bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c06:	e03e      	b.n	8001c86 <__swsetup_r+0xba>
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <__swsetup_r+0xd4>)
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d101      	bne.n	8001c12 <__swsetup_r+0x46>
 8001c0e:	68ac      	ldr	r4, [r5, #8]
 8001c10:	e7eb      	b.n	8001bea <__swsetup_r+0x1e>
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <__swsetup_r+0xd8>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	bf08      	it	eq
 8001c18:	68ec      	ldreq	r4, [r5, #12]
 8001c1a:	e7e6      	b.n	8001bea <__swsetup_r+0x1e>
 8001c1c:	0758      	lsls	r0, r3, #29
 8001c1e:	d512      	bpl.n	8001c46 <__swsetup_r+0x7a>
 8001c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c22:	b141      	cbz	r1, 8001c36 <__swsetup_r+0x6a>
 8001c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c28:	4299      	cmp	r1, r3
 8001c2a:	d002      	beq.n	8001c32 <__swsetup_r+0x66>
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f7ff fdff 	bl	8001830 <_free_r>
 8001c32:	2300      	movs	r3, #0
 8001c34:	6363      	str	r3, [r4, #52]	; 0x34
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c3c:	81a3      	strh	r3, [r4, #12]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6063      	str	r3, [r4, #4]
 8001c42:	6923      	ldr	r3, [r4, #16]
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	81a3      	strh	r3, [r4, #12]
 8001c4e:	6923      	ldr	r3, [r4, #16]
 8001c50:	b94b      	cbnz	r3, 8001c66 <__swsetup_r+0x9a>
 8001c52:	89a3      	ldrh	r3, [r4, #12]
 8001c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d003      	beq.n	8001c66 <__swsetup_r+0x9a>
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4630      	mov	r0, r6
 8001c62:	f000 f9fd 	bl	8002060 <__smakebuf_r>
 8001c66:	89a0      	ldrh	r0, [r4, #12]
 8001c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c6c:	f010 0301 	ands.w	r3, r0, #1
 8001c70:	d00a      	beq.n	8001c88 <__swsetup_r+0xbc>
 8001c72:	2300      	movs	r3, #0
 8001c74:	60a3      	str	r3, [r4, #8]
 8001c76:	6963      	ldr	r3, [r4, #20]
 8001c78:	425b      	negs	r3, r3
 8001c7a:	61a3      	str	r3, [r4, #24]
 8001c7c:	6923      	ldr	r3, [r4, #16]
 8001c7e:	b943      	cbnz	r3, 8001c92 <__swsetup_r+0xc6>
 8001c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c84:	d1ba      	bne.n	8001bfc <__swsetup_r+0x30>
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	0781      	lsls	r1, r0, #30
 8001c8a:	bf58      	it	pl
 8001c8c:	6963      	ldrpl	r3, [r4, #20]
 8001c8e:	60a3      	str	r3, [r4, #8]
 8001c90:	e7f4      	b.n	8001c7c <__swsetup_r+0xb0>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7f7      	b.n	8001c86 <__swsetup_r+0xba>
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	08002934 	.word	0x08002934
 8001ca0:	08002954 	.word	0x08002954
 8001ca4:	08002914 	.word	0x08002914

08001ca8 <__sflush_r>:
 8001ca8:	898a      	ldrh	r2, [r1, #12]
 8001caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cac:	4605      	mov	r5, r0
 8001cae:	0710      	lsls	r0, r2, #28
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	d457      	bmi.n	8001d64 <__sflush_r+0xbc>
 8001cb4:	684b      	ldr	r3, [r1, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dc04      	bgt.n	8001cc4 <__sflush_r+0x1c>
 8001cba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dc01      	bgt.n	8001cc4 <__sflush_r+0x1c>
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc6:	2e00      	cmp	r6, #0
 8001cc8:	d0fa      	beq.n	8001cc0 <__sflush_r+0x18>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cd0:	682f      	ldr	r7, [r5, #0]
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	d032      	beq.n	8001d3c <__sflush_r+0x94>
 8001cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cd8:	89a3      	ldrh	r3, [r4, #12]
 8001cda:	075a      	lsls	r2, r3, #29
 8001cdc:	d505      	bpl.n	8001cea <__sflush_r+0x42>
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	1ac0      	subs	r0, r0, r3
 8001ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ce4:	b10b      	cbz	r3, 8001cea <__sflush_r+0x42>
 8001ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce8:	1ac0      	subs	r0, r0, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	4602      	mov	r2, r0
 8001cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cf0:	6a21      	ldr	r1, [r4, #32]
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	47b0      	blx	r6
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	d106      	bne.n	8001d0a <__sflush_r+0x62>
 8001cfc:	6829      	ldr	r1, [r5, #0]
 8001cfe:	291d      	cmp	r1, #29
 8001d00:	d82c      	bhi.n	8001d5c <__sflush_r+0xb4>
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <__sflush_r+0x100>)
 8001d04:	40ca      	lsrs	r2, r1
 8001d06:	07d6      	lsls	r6, r2, #31
 8001d08:	d528      	bpl.n	8001d5c <__sflush_r+0xb4>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	6062      	str	r2, [r4, #4]
 8001d0e:	04d9      	lsls	r1, r3, #19
 8001d10:	6922      	ldr	r2, [r4, #16]
 8001d12:	6022      	str	r2, [r4, #0]
 8001d14:	d504      	bpl.n	8001d20 <__sflush_r+0x78>
 8001d16:	1c42      	adds	r2, r0, #1
 8001d18:	d101      	bne.n	8001d1e <__sflush_r+0x76>
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	b903      	cbnz	r3, 8001d20 <__sflush_r+0x78>
 8001d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8001d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d22:	602f      	str	r7, [r5, #0]
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d0cb      	beq.n	8001cc0 <__sflush_r+0x18>
 8001d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d2c:	4299      	cmp	r1, r3
 8001d2e:	d002      	beq.n	8001d36 <__sflush_r+0x8e>
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff fd7d 	bl	8001830 <_free_r>
 8001d36:	2000      	movs	r0, #0
 8001d38:	6360      	str	r0, [r4, #52]	; 0x34
 8001d3a:	e7c2      	b.n	8001cc2 <__sflush_r+0x1a>
 8001d3c:	6a21      	ldr	r1, [r4, #32]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4628      	mov	r0, r5
 8001d42:	47b0      	blx	r6
 8001d44:	1c41      	adds	r1, r0, #1
 8001d46:	d1c7      	bne.n	8001cd8 <__sflush_r+0x30>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0c4      	beq.n	8001cd8 <__sflush_r+0x30>
 8001d4e:	2b1d      	cmp	r3, #29
 8001d50:	d001      	beq.n	8001d56 <__sflush_r+0xae>
 8001d52:	2b16      	cmp	r3, #22
 8001d54:	d101      	bne.n	8001d5a <__sflush_r+0xb2>
 8001d56:	602f      	str	r7, [r5, #0]
 8001d58:	e7b2      	b.n	8001cc0 <__sflush_r+0x18>
 8001d5a:	89a3      	ldrh	r3, [r4, #12]
 8001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d60:	81a3      	strh	r3, [r4, #12]
 8001d62:	e7ae      	b.n	8001cc2 <__sflush_r+0x1a>
 8001d64:	690f      	ldr	r7, [r1, #16]
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d0aa      	beq.n	8001cc0 <__sflush_r+0x18>
 8001d6a:	0793      	lsls	r3, r2, #30
 8001d6c:	680e      	ldr	r6, [r1, #0]
 8001d6e:	bf08      	it	eq
 8001d70:	694b      	ldreq	r3, [r1, #20]
 8001d72:	600f      	str	r7, [r1, #0]
 8001d74:	bf18      	it	ne
 8001d76:	2300      	movne	r3, #0
 8001d78:	1bf6      	subs	r6, r6, r7
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	dd9f      	ble.n	8001cc0 <__sflush_r+0x18>
 8001d80:	6a21      	ldr	r1, [r4, #32]
 8001d82:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d86:	4633      	mov	r3, r6
 8001d88:	463a      	mov	r2, r7
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	47e0      	blx	ip
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	dc06      	bgt.n	8001da0 <__sflush_r+0xf8>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d98:	81a3      	strh	r3, [r4, #12]
 8001d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d9e:	e790      	b.n	8001cc2 <__sflush_r+0x1a>
 8001da0:	4407      	add	r7, r0
 8001da2:	1a36      	subs	r6, r6, r0
 8001da4:	e7ea      	b.n	8001d7c <__sflush_r+0xd4>
 8001da6:	bf00      	nop
 8001da8:	20400001 	.word	0x20400001

08001dac <_fflush_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	690b      	ldr	r3, [r1, #16]
 8001db0:	4605      	mov	r5, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	b913      	cbnz	r3, 8001dbc <_fflush_r+0x10>
 8001db6:	2500      	movs	r5, #0
 8001db8:	4628      	mov	r0, r5
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	b118      	cbz	r0, 8001dc6 <_fflush_r+0x1a>
 8001dbe:	6983      	ldr	r3, [r0, #24]
 8001dc0:	b90b      	cbnz	r3, 8001dc6 <_fflush_r+0x1a>
 8001dc2:	f000 f887 	bl	8001ed4 <__sinit>
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <_fflush_r+0x6c>)
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	d11b      	bne.n	8001e04 <_fflush_r+0x58>
 8001dcc:	686c      	ldr	r4, [r5, #4]
 8001dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ef      	beq.n	8001db6 <_fflush_r+0xa>
 8001dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dd8:	07d0      	lsls	r0, r2, #31
 8001dda:	d404      	bmi.n	8001de6 <_fflush_r+0x3a>
 8001ddc:	0599      	lsls	r1, r3, #22
 8001dde:	d402      	bmi.n	8001de6 <_fflush_r+0x3a>
 8001de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001de2:	f000 f915 	bl	8002010 <__retarget_lock_acquire_recursive>
 8001de6:	4628      	mov	r0, r5
 8001de8:	4621      	mov	r1, r4
 8001dea:	f7ff ff5d 	bl	8001ca8 <__sflush_r>
 8001dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001df0:	07da      	lsls	r2, r3, #31
 8001df2:	4605      	mov	r5, r0
 8001df4:	d4e0      	bmi.n	8001db8 <_fflush_r+0xc>
 8001df6:	89a3      	ldrh	r3, [r4, #12]
 8001df8:	059b      	lsls	r3, r3, #22
 8001dfa:	d4dd      	bmi.n	8001db8 <_fflush_r+0xc>
 8001dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfe:	f000 f908 	bl	8002012 <__retarget_lock_release_recursive>
 8001e02:	e7d9      	b.n	8001db8 <_fflush_r+0xc>
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <_fflush_r+0x70>)
 8001e06:	429c      	cmp	r4, r3
 8001e08:	d101      	bne.n	8001e0e <_fflush_r+0x62>
 8001e0a:	68ac      	ldr	r4, [r5, #8]
 8001e0c:	e7df      	b.n	8001dce <_fflush_r+0x22>
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <_fflush_r+0x74>)
 8001e10:	429c      	cmp	r4, r3
 8001e12:	bf08      	it	eq
 8001e14:	68ec      	ldreq	r4, [r5, #12]
 8001e16:	e7da      	b.n	8001dce <_fflush_r+0x22>
 8001e18:	08002934 	.word	0x08002934
 8001e1c:	08002954 	.word	0x08002954
 8001e20:	08002914 	.word	0x08002914

08001e24 <std>:
 8001e24:	2300      	movs	r3, #0
 8001e26:	b510      	push	{r4, lr}
 8001e28:	4604      	mov	r4, r0
 8001e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e32:	6083      	str	r3, [r0, #8]
 8001e34:	8181      	strh	r1, [r0, #12]
 8001e36:	6643      	str	r3, [r0, #100]	; 0x64
 8001e38:	81c2      	strh	r2, [r0, #14]
 8001e3a:	6183      	str	r3, [r0, #24]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2208      	movs	r2, #8
 8001e40:	305c      	adds	r0, #92	; 0x5c
 8001e42:	f7ff fced 	bl	8001820 <memset>
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <std+0x38>)
 8001e48:	6263      	str	r3, [r4, #36]	; 0x24
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <std+0x3c>)
 8001e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <std+0x40>)
 8001e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <std+0x44>)
 8001e54:	6224      	str	r4, [r4, #32]
 8001e56:	6323      	str	r3, [r4, #48]	; 0x30
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop
 8001e5c:	080026d1 	.word	0x080026d1
 8001e60:	080026f3 	.word	0x080026f3
 8001e64:	0800272b 	.word	0x0800272b
 8001e68:	0800274f 	.word	0x0800274f

08001e6c <_cleanup_r>:
 8001e6c:	4901      	ldr	r1, [pc, #4]	; (8001e74 <_cleanup_r+0x8>)
 8001e6e:	f000 b8af 	b.w	8001fd0 <_fwalk_reent>
 8001e72:	bf00      	nop
 8001e74:	08001dad 	.word	0x08001dad

08001e78 <__sfmoreglue>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	2268      	movs	r2, #104	; 0x68
 8001e7c:	1e4d      	subs	r5, r1, #1
 8001e7e:	4355      	muls	r5, r2
 8001e80:	460e      	mov	r6, r1
 8001e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e86:	f7ff fd3d 	bl	8001904 <_malloc_r>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	b140      	cbz	r0, 8001ea0 <__sfmoreglue+0x28>
 8001e8e:	2100      	movs	r1, #0
 8001e90:	e9c0 1600 	strd	r1, r6, [r0]
 8001e94:	300c      	adds	r0, #12
 8001e96:	60a0      	str	r0, [r4, #8]
 8001e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e9c:	f7ff fcc0 	bl	8001820 <memset>
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}

08001ea4 <__sfp_lock_acquire>:
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <__sfp_lock_acquire+0x8>)
 8001ea6:	f000 b8b3 	b.w	8002010 <__retarget_lock_acquire_recursive>
 8001eaa:	bf00      	nop
 8001eac:	200000b5 	.word	0x200000b5

08001eb0 <__sfp_lock_release>:
 8001eb0:	4801      	ldr	r0, [pc, #4]	; (8001eb8 <__sfp_lock_release+0x8>)
 8001eb2:	f000 b8ae 	b.w	8002012 <__retarget_lock_release_recursive>
 8001eb6:	bf00      	nop
 8001eb8:	200000b5 	.word	0x200000b5

08001ebc <__sinit_lock_acquire>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <__sinit_lock_acquire+0x8>)
 8001ebe:	f000 b8a7 	b.w	8002010 <__retarget_lock_acquire_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	200000b6 	.word	0x200000b6

08001ec8 <__sinit_lock_release>:
 8001ec8:	4801      	ldr	r0, [pc, #4]	; (8001ed0 <__sinit_lock_release+0x8>)
 8001eca:	f000 b8a2 	b.w	8002012 <__retarget_lock_release_recursive>
 8001ece:	bf00      	nop
 8001ed0:	200000b6 	.word	0x200000b6

08001ed4 <__sinit>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	f7ff fff0 	bl	8001ebc <__sinit_lock_acquire>
 8001edc:	69a3      	ldr	r3, [r4, #24]
 8001ede:	b11b      	cbz	r3, 8001ee8 <__sinit+0x14>
 8001ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee4:	f7ff bff0 	b.w	8001ec8 <__sinit_lock_release>
 8001ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001eec:	6523      	str	r3, [r4, #80]	; 0x50
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <__sinit+0x68>)
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <__sinit+0x6c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ef6:	42a3      	cmp	r3, r4
 8001ef8:	bf04      	itt	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	61a3      	streq	r3, [r4, #24]
 8001efe:	4620      	mov	r0, r4
 8001f00:	f000 f820 	bl	8001f44 <__sfp>
 8001f04:	6060      	str	r0, [r4, #4]
 8001f06:	4620      	mov	r0, r4
 8001f08:	f000 f81c 	bl	8001f44 <__sfp>
 8001f0c:	60a0      	str	r0, [r4, #8]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 f818 	bl	8001f44 <__sfp>
 8001f14:	2200      	movs	r2, #0
 8001f16:	60e0      	str	r0, [r4, #12]
 8001f18:	2104      	movs	r1, #4
 8001f1a:	6860      	ldr	r0, [r4, #4]
 8001f1c:	f7ff ff82 	bl	8001e24 <std>
 8001f20:	68a0      	ldr	r0, [r4, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	2109      	movs	r1, #9
 8001f26:	f7ff ff7d 	bl	8001e24 <std>
 8001f2a:	68e0      	ldr	r0, [r4, #12]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	2112      	movs	r1, #18
 8001f30:	f7ff ff78 	bl	8001e24 <std>
 8001f34:	2301      	movs	r3, #1
 8001f36:	61a3      	str	r3, [r4, #24]
 8001f38:	e7d2      	b.n	8001ee0 <__sinit+0xc>
 8001f3a:	bf00      	nop
 8001f3c:	08002910 	.word	0x08002910
 8001f40:	08001e6d 	.word	0x08001e6d

08001f44 <__sfp>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	4607      	mov	r7, r0
 8001f48:	f7ff ffac 	bl	8001ea4 <__sfp_lock_acquire>
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <__sfp+0x84>)
 8001f4e:	681e      	ldr	r6, [r3, #0]
 8001f50:	69b3      	ldr	r3, [r6, #24]
 8001f52:	b913      	cbnz	r3, 8001f5a <__sfp+0x16>
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ffbd 	bl	8001ed4 <__sinit>
 8001f5a:	3648      	adds	r6, #72	; 0x48
 8001f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	d503      	bpl.n	8001f6c <__sfp+0x28>
 8001f64:	6833      	ldr	r3, [r6, #0]
 8001f66:	b30b      	cbz	r3, 8001fac <__sfp+0x68>
 8001f68:	6836      	ldr	r6, [r6, #0]
 8001f6a:	e7f7      	b.n	8001f5c <__sfp+0x18>
 8001f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f70:	b9d5      	cbnz	r5, 8001fa8 <__sfp+0x64>
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <__sfp+0x88>)
 8001f74:	60e3      	str	r3, [r4, #12]
 8001f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8001f7c:	f000 f847 	bl	800200e <__retarget_lock_init_recursive>
 8001f80:	f7ff ff96 	bl	8001eb0 <__sfp_lock_release>
 8001f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f8c:	6025      	str	r5, [r4, #0]
 8001f8e:	61a5      	str	r5, [r4, #24]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4629      	mov	r1, r5
 8001f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f98:	f7ff fc42 	bl	8001820 <memset>
 8001f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	3468      	adds	r4, #104	; 0x68
 8001faa:	e7d9      	b.n	8001f60 <__sfp+0x1c>
 8001fac:	2104      	movs	r1, #4
 8001fae:	4638      	mov	r0, r7
 8001fb0:	f7ff ff62 	bl	8001e78 <__sfmoreglue>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	6030      	str	r0, [r6, #0]
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d1d5      	bne.n	8001f68 <__sfp+0x24>
 8001fbc:	f7ff ff78 	bl	8001eb0 <__sfp_lock_release>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	e7ee      	b.n	8001fa4 <__sfp+0x60>
 8001fc6:	bf00      	nop
 8001fc8:	08002910 	.word	0x08002910
 8001fcc:	ffff0001 	.word	0xffff0001

08001fd0 <_fwalk_reent>:
 8001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	4606      	mov	r6, r0
 8001fd6:	4688      	mov	r8, r1
 8001fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fdc:	2700      	movs	r7, #0
 8001fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8001fe6:	d505      	bpl.n	8001ff4 <_fwalk_reent+0x24>
 8001fe8:	6824      	ldr	r4, [r4, #0]
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	d1f7      	bne.n	8001fde <_fwalk_reent+0xe>
 8001fee:	4638      	mov	r0, r7
 8001ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff4:	89ab      	ldrh	r3, [r5, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d907      	bls.n	800200a <_fwalk_reent+0x3a>
 8001ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ffe:	3301      	adds	r3, #1
 8002000:	d003      	beq.n	800200a <_fwalk_reent+0x3a>
 8002002:	4629      	mov	r1, r5
 8002004:	4630      	mov	r0, r6
 8002006:	47c0      	blx	r8
 8002008:	4307      	orrs	r7, r0
 800200a:	3568      	adds	r5, #104	; 0x68
 800200c:	e7e9      	b.n	8001fe2 <_fwalk_reent+0x12>

0800200e <__retarget_lock_init_recursive>:
 800200e:	4770      	bx	lr

08002010 <__retarget_lock_acquire_recursive>:
 8002010:	4770      	bx	lr

08002012 <__retarget_lock_release_recursive>:
 8002012:	4770      	bx	lr

08002014 <__swhatbuf_r>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	460e      	mov	r6, r1
 8002018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201c:	2900      	cmp	r1, #0
 800201e:	b096      	sub	sp, #88	; 0x58
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	da08      	bge.n	8002038 <__swhatbuf_r+0x24>
 8002026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	602a      	str	r2, [r5, #0]
 800202e:	061a      	lsls	r2, r3, #24
 8002030:	d410      	bmi.n	8002054 <__swhatbuf_r+0x40>
 8002032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002036:	e00e      	b.n	8002056 <__swhatbuf_r+0x42>
 8002038:	466a      	mov	r2, sp
 800203a:	f000 fbaf 	bl	800279c <_fstat_r>
 800203e:	2800      	cmp	r0, #0
 8002040:	dbf1      	blt.n	8002026 <__swhatbuf_r+0x12>
 8002042:	9a01      	ldr	r2, [sp, #4]
 8002044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800204c:	425a      	negs	r2, r3
 800204e:	415a      	adcs	r2, r3
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	e7ee      	b.n	8002032 <__swhatbuf_r+0x1e>
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	2000      	movs	r0, #0
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	b016      	add	sp, #88	; 0x58
 800205c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002060 <__smakebuf_r>:
 8002060:	898b      	ldrh	r3, [r1, #12]
 8002062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002064:	079d      	lsls	r5, r3, #30
 8002066:	4606      	mov	r6, r0
 8002068:	460c      	mov	r4, r1
 800206a:	d507      	bpl.n	800207c <__smakebuf_r+0x1c>
 800206c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	6123      	str	r3, [r4, #16]
 8002074:	2301      	movs	r3, #1
 8002076:	6163      	str	r3, [r4, #20]
 8002078:	b002      	add	sp, #8
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	ab01      	add	r3, sp, #4
 800207e:	466a      	mov	r2, sp
 8002080:	f7ff ffc8 	bl	8002014 <__swhatbuf_r>
 8002084:	9900      	ldr	r1, [sp, #0]
 8002086:	4605      	mov	r5, r0
 8002088:	4630      	mov	r0, r6
 800208a:	f7ff fc3b 	bl	8001904 <_malloc_r>
 800208e:	b948      	cbnz	r0, 80020a4 <__smakebuf_r+0x44>
 8002090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002094:	059a      	lsls	r2, r3, #22
 8002096:	d4ef      	bmi.n	8002078 <__smakebuf_r+0x18>
 8002098:	f023 0303 	bic.w	r3, r3, #3
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	81a3      	strh	r3, [r4, #12]
 80020a2:	e7e3      	b.n	800206c <__smakebuf_r+0xc>
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <__smakebuf_r+0x7c>)
 80020a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	6020      	str	r0, [r4, #0]
 80020ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	9b00      	ldr	r3, [sp, #0]
 80020b4:	6163      	str	r3, [r4, #20]
 80020b6:	9b01      	ldr	r3, [sp, #4]
 80020b8:	6120      	str	r0, [r4, #16]
 80020ba:	b15b      	cbz	r3, 80020d4 <__smakebuf_r+0x74>
 80020bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020c0:	4630      	mov	r0, r6
 80020c2:	f000 fb7d 	bl	80027c0 <_isatty_r>
 80020c6:	b128      	cbz	r0, 80020d4 <__smakebuf_r+0x74>
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	89a0      	ldrh	r0, [r4, #12]
 80020d6:	4305      	orrs	r5, r0
 80020d8:	81a5      	strh	r5, [r4, #12]
 80020da:	e7cd      	b.n	8002078 <__smakebuf_r+0x18>
 80020dc:	08001e6d 	.word	0x08001e6d

080020e0 <__malloc_lock>:
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <__malloc_lock+0x8>)
 80020e2:	f7ff bf95 	b.w	8002010 <__retarget_lock_acquire_recursive>
 80020e6:	bf00      	nop
 80020e8:	200000b4 	.word	0x200000b4

080020ec <__malloc_unlock>:
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <__malloc_unlock+0x8>)
 80020ee:	f7ff bf90 	b.w	8002012 <__retarget_lock_release_recursive>
 80020f2:	bf00      	nop
 80020f4:	200000b4 	.word	0x200000b4

080020f8 <__sfputc_r>:
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	b410      	push	{r4}
 8002100:	6093      	str	r3, [r2, #8]
 8002102:	da07      	bge.n	8002114 <__sfputc_r+0x1c>
 8002104:	6994      	ldr	r4, [r2, #24]
 8002106:	42a3      	cmp	r3, r4
 8002108:	db01      	blt.n	800210e <__sfputc_r+0x16>
 800210a:	290a      	cmp	r1, #10
 800210c:	d102      	bne.n	8002114 <__sfputc_r+0x1c>
 800210e:	bc10      	pop	{r4}
 8002110:	f7ff bd0a 	b.w	8001b28 <__swbuf_r>
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	1c58      	adds	r0, r3, #1
 8002118:	6010      	str	r0, [r2, #0]
 800211a:	7019      	strb	r1, [r3, #0]
 800211c:	4608      	mov	r0, r1
 800211e:	bc10      	pop	{r4}
 8002120:	4770      	bx	lr

08002122 <__sfputs_r>:
 8002122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002124:	4606      	mov	r6, r0
 8002126:	460f      	mov	r7, r1
 8002128:	4614      	mov	r4, r2
 800212a:	18d5      	adds	r5, r2, r3
 800212c:	42ac      	cmp	r4, r5
 800212e:	d101      	bne.n	8002134 <__sfputs_r+0x12>
 8002130:	2000      	movs	r0, #0
 8002132:	e007      	b.n	8002144 <__sfputs_r+0x22>
 8002134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002138:	463a      	mov	r2, r7
 800213a:	4630      	mov	r0, r6
 800213c:	f7ff ffdc 	bl	80020f8 <__sfputc_r>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d1f3      	bne.n	800212c <__sfputs_r+0xa>
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002148 <_vfiprintf_r>:
 8002148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800214c:	460d      	mov	r5, r1
 800214e:	b09d      	sub	sp, #116	; 0x74
 8002150:	4614      	mov	r4, r2
 8002152:	4698      	mov	r8, r3
 8002154:	4606      	mov	r6, r0
 8002156:	b118      	cbz	r0, 8002160 <_vfiprintf_r+0x18>
 8002158:	6983      	ldr	r3, [r0, #24]
 800215a:	b90b      	cbnz	r3, 8002160 <_vfiprintf_r+0x18>
 800215c:	f7ff feba 	bl	8001ed4 <__sinit>
 8002160:	4b89      	ldr	r3, [pc, #548]	; (8002388 <_vfiprintf_r+0x240>)
 8002162:	429d      	cmp	r5, r3
 8002164:	d11b      	bne.n	800219e <_vfiprintf_r+0x56>
 8002166:	6875      	ldr	r5, [r6, #4]
 8002168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800216a:	07d9      	lsls	r1, r3, #31
 800216c:	d405      	bmi.n	800217a <_vfiprintf_r+0x32>
 800216e:	89ab      	ldrh	r3, [r5, #12]
 8002170:	059a      	lsls	r2, r3, #22
 8002172:	d402      	bmi.n	800217a <_vfiprintf_r+0x32>
 8002174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002176:	f7ff ff4b 	bl	8002010 <__retarget_lock_acquire_recursive>
 800217a:	89ab      	ldrh	r3, [r5, #12]
 800217c:	071b      	lsls	r3, r3, #28
 800217e:	d501      	bpl.n	8002184 <_vfiprintf_r+0x3c>
 8002180:	692b      	ldr	r3, [r5, #16]
 8002182:	b9eb      	cbnz	r3, 80021c0 <_vfiprintf_r+0x78>
 8002184:	4629      	mov	r1, r5
 8002186:	4630      	mov	r0, r6
 8002188:	f7ff fd20 	bl	8001bcc <__swsetup_r>
 800218c:	b1c0      	cbz	r0, 80021c0 <_vfiprintf_r+0x78>
 800218e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002190:	07dc      	lsls	r4, r3, #31
 8002192:	d50e      	bpl.n	80021b2 <_vfiprintf_r+0x6a>
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	b01d      	add	sp, #116	; 0x74
 800219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <_vfiprintf_r+0x244>)
 80021a0:	429d      	cmp	r5, r3
 80021a2:	d101      	bne.n	80021a8 <_vfiprintf_r+0x60>
 80021a4:	68b5      	ldr	r5, [r6, #8]
 80021a6:	e7df      	b.n	8002168 <_vfiprintf_r+0x20>
 80021a8:	4b79      	ldr	r3, [pc, #484]	; (8002390 <_vfiprintf_r+0x248>)
 80021aa:	429d      	cmp	r5, r3
 80021ac:	bf08      	it	eq
 80021ae:	68f5      	ldreq	r5, [r6, #12]
 80021b0:	e7da      	b.n	8002168 <_vfiprintf_r+0x20>
 80021b2:	89ab      	ldrh	r3, [r5, #12]
 80021b4:	0598      	lsls	r0, r3, #22
 80021b6:	d4ed      	bmi.n	8002194 <_vfiprintf_r+0x4c>
 80021b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021ba:	f7ff ff2a 	bl	8002012 <__retarget_lock_release_recursive>
 80021be:	e7e9      	b.n	8002194 <_vfiprintf_r+0x4c>
 80021c0:	2300      	movs	r3, #0
 80021c2:	9309      	str	r3, [sp, #36]	; 0x24
 80021c4:	2320      	movs	r3, #32
 80021c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ce:	2330      	movs	r3, #48	; 0x30
 80021d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002394 <_vfiprintf_r+0x24c>
 80021d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021d8:	f04f 0901 	mov.w	r9, #1
 80021dc:	4623      	mov	r3, r4
 80021de:	469a      	mov	sl, r3
 80021e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021e4:	b10a      	cbz	r2, 80021ea <_vfiprintf_r+0xa2>
 80021e6:	2a25      	cmp	r2, #37	; 0x25
 80021e8:	d1f9      	bne.n	80021de <_vfiprintf_r+0x96>
 80021ea:	ebba 0b04 	subs.w	fp, sl, r4
 80021ee:	d00b      	beq.n	8002208 <_vfiprintf_r+0xc0>
 80021f0:	465b      	mov	r3, fp
 80021f2:	4622      	mov	r2, r4
 80021f4:	4629      	mov	r1, r5
 80021f6:	4630      	mov	r0, r6
 80021f8:	f7ff ff93 	bl	8002122 <__sfputs_r>
 80021fc:	3001      	adds	r0, #1
 80021fe:	f000 80aa 	beq.w	8002356 <_vfiprintf_r+0x20e>
 8002202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002204:	445a      	add	r2, fp
 8002206:	9209      	str	r2, [sp, #36]	; 0x24
 8002208:	f89a 3000 	ldrb.w	r3, [sl]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a2 	beq.w	8002356 <_vfiprintf_r+0x20e>
 8002212:	2300      	movs	r3, #0
 8002214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800221c:	f10a 0a01 	add.w	sl, sl, #1
 8002220:	9304      	str	r3, [sp, #16]
 8002222:	9307      	str	r3, [sp, #28]
 8002224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002228:	931a      	str	r3, [sp, #104]	; 0x68
 800222a:	4654      	mov	r4, sl
 800222c:	2205      	movs	r2, #5
 800222e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002232:	4858      	ldr	r0, [pc, #352]	; (8002394 <_vfiprintf_r+0x24c>)
 8002234:	f7fd ffdc 	bl	80001f0 <memchr>
 8002238:	9a04      	ldr	r2, [sp, #16]
 800223a:	b9d8      	cbnz	r0, 8002274 <_vfiprintf_r+0x12c>
 800223c:	06d1      	lsls	r1, r2, #27
 800223e:	bf44      	itt	mi
 8002240:	2320      	movmi	r3, #32
 8002242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002246:	0713      	lsls	r3, r2, #28
 8002248:	bf44      	itt	mi
 800224a:	232b      	movmi	r3, #43	; 0x2b
 800224c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002250:	f89a 3000 	ldrb.w	r3, [sl]
 8002254:	2b2a      	cmp	r3, #42	; 0x2a
 8002256:	d015      	beq.n	8002284 <_vfiprintf_r+0x13c>
 8002258:	9a07      	ldr	r2, [sp, #28]
 800225a:	4654      	mov	r4, sl
 800225c:	2000      	movs	r0, #0
 800225e:	f04f 0c0a 	mov.w	ip, #10
 8002262:	4621      	mov	r1, r4
 8002264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002268:	3b30      	subs	r3, #48	; 0x30
 800226a:	2b09      	cmp	r3, #9
 800226c:	d94e      	bls.n	800230c <_vfiprintf_r+0x1c4>
 800226e:	b1b0      	cbz	r0, 800229e <_vfiprintf_r+0x156>
 8002270:	9207      	str	r2, [sp, #28]
 8002272:	e014      	b.n	800229e <_vfiprintf_r+0x156>
 8002274:	eba0 0308 	sub.w	r3, r0, r8
 8002278:	fa09 f303 	lsl.w	r3, r9, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	9304      	str	r3, [sp, #16]
 8002280:	46a2      	mov	sl, r4
 8002282:	e7d2      	b.n	800222a <_vfiprintf_r+0xe2>
 8002284:	9b03      	ldr	r3, [sp, #12]
 8002286:	1d19      	adds	r1, r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	9103      	str	r1, [sp, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	bfbb      	ittet	lt
 8002290:	425b      	neglt	r3, r3
 8002292:	f042 0202 	orrlt.w	r2, r2, #2
 8002296:	9307      	strge	r3, [sp, #28]
 8002298:	9307      	strlt	r3, [sp, #28]
 800229a:	bfb8      	it	lt
 800229c:	9204      	strlt	r2, [sp, #16]
 800229e:	7823      	ldrb	r3, [r4, #0]
 80022a0:	2b2e      	cmp	r3, #46	; 0x2e
 80022a2:	d10c      	bne.n	80022be <_vfiprintf_r+0x176>
 80022a4:	7863      	ldrb	r3, [r4, #1]
 80022a6:	2b2a      	cmp	r3, #42	; 0x2a
 80022a8:	d135      	bne.n	8002316 <_vfiprintf_r+0x1ce>
 80022aa:	9b03      	ldr	r3, [sp, #12]
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	9203      	str	r2, [sp, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb8      	it	lt
 80022b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022ba:	3402      	adds	r4, #2
 80022bc:	9305      	str	r3, [sp, #20]
 80022be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002398 <_vfiprintf_r+0x250>
 80022c2:	7821      	ldrb	r1, [r4, #0]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4650      	mov	r0, sl
 80022c8:	f7fd ff92 	bl	80001f0 <memchr>
 80022cc:	b140      	cbz	r0, 80022e0 <_vfiprintf_r+0x198>
 80022ce:	2340      	movs	r3, #64	; 0x40
 80022d0:	eba0 000a 	sub.w	r0, r0, sl
 80022d4:	fa03 f000 	lsl.w	r0, r3, r0
 80022d8:	9b04      	ldr	r3, [sp, #16]
 80022da:	4303      	orrs	r3, r0
 80022dc:	3401      	adds	r4, #1
 80022de:	9304      	str	r3, [sp, #16]
 80022e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e4:	482d      	ldr	r0, [pc, #180]	; (800239c <_vfiprintf_r+0x254>)
 80022e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022ea:	2206      	movs	r2, #6
 80022ec:	f7fd ff80 	bl	80001f0 <memchr>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d03f      	beq.n	8002374 <_vfiprintf_r+0x22c>
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <_vfiprintf_r+0x258>)
 80022f6:	bb1b      	cbnz	r3, 8002340 <_vfiprintf_r+0x1f8>
 80022f8:	9b03      	ldr	r3, [sp, #12]
 80022fa:	3307      	adds	r3, #7
 80022fc:	f023 0307 	bic.w	r3, r3, #7
 8002300:	3308      	adds	r3, #8
 8002302:	9303      	str	r3, [sp, #12]
 8002304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002306:	443b      	add	r3, r7
 8002308:	9309      	str	r3, [sp, #36]	; 0x24
 800230a:	e767      	b.n	80021dc <_vfiprintf_r+0x94>
 800230c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002310:	460c      	mov	r4, r1
 8002312:	2001      	movs	r0, #1
 8002314:	e7a5      	b.n	8002262 <_vfiprintf_r+0x11a>
 8002316:	2300      	movs	r3, #0
 8002318:	3401      	adds	r4, #1
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 0c0a 	mov.w	ip, #10
 8002322:	4620      	mov	r0, r4
 8002324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002328:	3a30      	subs	r2, #48	; 0x30
 800232a:	2a09      	cmp	r2, #9
 800232c:	d903      	bls.n	8002336 <_vfiprintf_r+0x1ee>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0c5      	beq.n	80022be <_vfiprintf_r+0x176>
 8002332:	9105      	str	r1, [sp, #20]
 8002334:	e7c3      	b.n	80022be <_vfiprintf_r+0x176>
 8002336:	fb0c 2101 	mla	r1, ip, r1, r2
 800233a:	4604      	mov	r4, r0
 800233c:	2301      	movs	r3, #1
 800233e:	e7f0      	b.n	8002322 <_vfiprintf_r+0x1da>
 8002340:	ab03      	add	r3, sp, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	462a      	mov	r2, r5
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <_vfiprintf_r+0x25c>)
 8002348:	a904      	add	r1, sp, #16
 800234a:	4630      	mov	r0, r6
 800234c:	f3af 8000 	nop.w
 8002350:	4607      	mov	r7, r0
 8002352:	1c78      	adds	r0, r7, #1
 8002354:	d1d6      	bne.n	8002304 <_vfiprintf_r+0x1bc>
 8002356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002358:	07d9      	lsls	r1, r3, #31
 800235a:	d405      	bmi.n	8002368 <_vfiprintf_r+0x220>
 800235c:	89ab      	ldrh	r3, [r5, #12]
 800235e:	059a      	lsls	r2, r3, #22
 8002360:	d402      	bmi.n	8002368 <_vfiprintf_r+0x220>
 8002362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002364:	f7ff fe55 	bl	8002012 <__retarget_lock_release_recursive>
 8002368:	89ab      	ldrh	r3, [r5, #12]
 800236a:	065b      	lsls	r3, r3, #25
 800236c:	f53f af12 	bmi.w	8002194 <_vfiprintf_r+0x4c>
 8002370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002372:	e711      	b.n	8002198 <_vfiprintf_r+0x50>
 8002374:	ab03      	add	r3, sp, #12
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	462a      	mov	r2, r5
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <_vfiprintf_r+0x25c>)
 800237c:	a904      	add	r1, sp, #16
 800237e:	4630      	mov	r0, r6
 8002380:	f000 f880 	bl	8002484 <_printf_i>
 8002384:	e7e4      	b.n	8002350 <_vfiprintf_r+0x208>
 8002386:	bf00      	nop
 8002388:	08002934 	.word	0x08002934
 800238c:	08002954 	.word	0x08002954
 8002390:	08002914 	.word	0x08002914
 8002394:	08002974 	.word	0x08002974
 8002398:	0800297a 	.word	0x0800297a
 800239c:	0800297e 	.word	0x0800297e
 80023a0:	00000000 	.word	0x00000000
 80023a4:	08002123 	.word	0x08002123

080023a8 <_printf_common>:
 80023a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ac:	4616      	mov	r6, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	688a      	ldr	r2, [r1, #8]
 80023b2:	690b      	ldr	r3, [r1, #16]
 80023b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bfb8      	it	lt
 80023bc:	4613      	movlt	r3, r2
 80023be:	6033      	str	r3, [r6, #0]
 80023c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023c4:	4607      	mov	r7, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	b10a      	cbz	r2, 80023ce <_printf_common+0x26>
 80023ca:	3301      	adds	r3, #1
 80023cc:	6033      	str	r3, [r6, #0]
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	0699      	lsls	r1, r3, #26
 80023d2:	bf42      	ittt	mi
 80023d4:	6833      	ldrmi	r3, [r6, #0]
 80023d6:	3302      	addmi	r3, #2
 80023d8:	6033      	strmi	r3, [r6, #0]
 80023da:	6825      	ldr	r5, [r4, #0]
 80023dc:	f015 0506 	ands.w	r5, r5, #6
 80023e0:	d106      	bne.n	80023f0 <_printf_common+0x48>
 80023e2:	f104 0a19 	add.w	sl, r4, #25
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	6832      	ldr	r2, [r6, #0]
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	42ab      	cmp	r3, r5
 80023ee:	dc26      	bgt.n	800243e <_printf_common+0x96>
 80023f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023f4:	1e13      	subs	r3, r2, #0
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	bf18      	it	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	0692      	lsls	r2, r2, #26
 80023fe:	d42b      	bmi.n	8002458 <_printf_common+0xb0>
 8002400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002404:	4649      	mov	r1, r9
 8002406:	4638      	mov	r0, r7
 8002408:	47c0      	blx	r8
 800240a:	3001      	adds	r0, #1
 800240c:	d01e      	beq.n	800244c <_printf_common+0xa4>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	68e5      	ldr	r5, [r4, #12]
 8002412:	6832      	ldr	r2, [r6, #0]
 8002414:	f003 0306 	and.w	r3, r3, #6
 8002418:	2b04      	cmp	r3, #4
 800241a:	bf08      	it	eq
 800241c:	1aad      	subeq	r5, r5, r2
 800241e:	68a3      	ldr	r3, [r4, #8]
 8002420:	6922      	ldr	r2, [r4, #16]
 8002422:	bf0c      	ite	eq
 8002424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002428:	2500      	movne	r5, #0
 800242a:	4293      	cmp	r3, r2
 800242c:	bfc4      	itt	gt
 800242e:	1a9b      	subgt	r3, r3, r2
 8002430:	18ed      	addgt	r5, r5, r3
 8002432:	2600      	movs	r6, #0
 8002434:	341a      	adds	r4, #26
 8002436:	42b5      	cmp	r5, r6
 8002438:	d11a      	bne.n	8002470 <_printf_common+0xc8>
 800243a:	2000      	movs	r0, #0
 800243c:	e008      	b.n	8002450 <_printf_common+0xa8>
 800243e:	2301      	movs	r3, #1
 8002440:	4652      	mov	r2, sl
 8002442:	4649      	mov	r1, r9
 8002444:	4638      	mov	r0, r7
 8002446:	47c0      	blx	r8
 8002448:	3001      	adds	r0, #1
 800244a:	d103      	bne.n	8002454 <_printf_common+0xac>
 800244c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002454:	3501      	adds	r5, #1
 8002456:	e7c6      	b.n	80023e6 <_printf_common+0x3e>
 8002458:	18e1      	adds	r1, r4, r3
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	2030      	movs	r0, #48	; 0x30
 800245e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002462:	4422      	add	r2, r4
 8002464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800246c:	3302      	adds	r3, #2
 800246e:	e7c7      	b.n	8002400 <_printf_common+0x58>
 8002470:	2301      	movs	r3, #1
 8002472:	4622      	mov	r2, r4
 8002474:	4649      	mov	r1, r9
 8002476:	4638      	mov	r0, r7
 8002478:	47c0      	blx	r8
 800247a:	3001      	adds	r0, #1
 800247c:	d0e6      	beq.n	800244c <_printf_common+0xa4>
 800247e:	3601      	adds	r6, #1
 8002480:	e7d9      	b.n	8002436 <_printf_common+0x8e>
	...

08002484 <_printf_i>:
 8002484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	7e0f      	ldrb	r7, [r1, #24]
 800248a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800248c:	2f78      	cmp	r7, #120	; 0x78
 800248e:	4691      	mov	r9, r2
 8002490:	4680      	mov	r8, r0
 8002492:	460c      	mov	r4, r1
 8002494:	469a      	mov	sl, r3
 8002496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800249a:	d807      	bhi.n	80024ac <_printf_i+0x28>
 800249c:	2f62      	cmp	r7, #98	; 0x62
 800249e:	d80a      	bhi.n	80024b6 <_printf_i+0x32>
 80024a0:	2f00      	cmp	r7, #0
 80024a2:	f000 80d8 	beq.w	8002656 <_printf_i+0x1d2>
 80024a6:	2f58      	cmp	r7, #88	; 0x58
 80024a8:	f000 80a3 	beq.w	80025f2 <_printf_i+0x16e>
 80024ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024b4:	e03a      	b.n	800252c <_printf_i+0xa8>
 80024b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024ba:	2b15      	cmp	r3, #21
 80024bc:	d8f6      	bhi.n	80024ac <_printf_i+0x28>
 80024be:	a101      	add	r1, pc, #4	; (adr r1, 80024c4 <_printf_i+0x40>)
 80024c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024c4:	0800251d 	.word	0x0800251d
 80024c8:	08002531 	.word	0x08002531
 80024cc:	080024ad 	.word	0x080024ad
 80024d0:	080024ad 	.word	0x080024ad
 80024d4:	080024ad 	.word	0x080024ad
 80024d8:	080024ad 	.word	0x080024ad
 80024dc:	08002531 	.word	0x08002531
 80024e0:	080024ad 	.word	0x080024ad
 80024e4:	080024ad 	.word	0x080024ad
 80024e8:	080024ad 	.word	0x080024ad
 80024ec:	080024ad 	.word	0x080024ad
 80024f0:	0800263d 	.word	0x0800263d
 80024f4:	08002561 	.word	0x08002561
 80024f8:	0800261f 	.word	0x0800261f
 80024fc:	080024ad 	.word	0x080024ad
 8002500:	080024ad 	.word	0x080024ad
 8002504:	0800265f 	.word	0x0800265f
 8002508:	080024ad 	.word	0x080024ad
 800250c:	08002561 	.word	0x08002561
 8002510:	080024ad 	.word	0x080024ad
 8002514:	080024ad 	.word	0x080024ad
 8002518:	08002627 	.word	0x08002627
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	1d1a      	adds	r2, r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	602a      	str	r2, [r5, #0]
 8002524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800252c:	2301      	movs	r3, #1
 800252e:	e0a3      	b.n	8002678 <_printf_i+0x1f4>
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	6829      	ldr	r1, [r5, #0]
 8002534:	0606      	lsls	r6, r0, #24
 8002536:	f101 0304 	add.w	r3, r1, #4
 800253a:	d50a      	bpl.n	8002552 <_printf_i+0xce>
 800253c:	680e      	ldr	r6, [r1, #0]
 800253e:	602b      	str	r3, [r5, #0]
 8002540:	2e00      	cmp	r6, #0
 8002542:	da03      	bge.n	800254c <_printf_i+0xc8>
 8002544:	232d      	movs	r3, #45	; 0x2d
 8002546:	4276      	negs	r6, r6
 8002548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800254c:	485e      	ldr	r0, [pc, #376]	; (80026c8 <_printf_i+0x244>)
 800254e:	230a      	movs	r3, #10
 8002550:	e019      	b.n	8002586 <_printf_i+0x102>
 8002552:	680e      	ldr	r6, [r1, #0]
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800255a:	bf18      	it	ne
 800255c:	b236      	sxthne	r6, r6
 800255e:	e7ef      	b.n	8002540 <_printf_i+0xbc>
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	6820      	ldr	r0, [r4, #0]
 8002564:	1d19      	adds	r1, r3, #4
 8002566:	6029      	str	r1, [r5, #0]
 8002568:	0601      	lsls	r1, r0, #24
 800256a:	d501      	bpl.n	8002570 <_printf_i+0xec>
 800256c:	681e      	ldr	r6, [r3, #0]
 800256e:	e002      	b.n	8002576 <_printf_i+0xf2>
 8002570:	0646      	lsls	r6, r0, #25
 8002572:	d5fb      	bpl.n	800256c <_printf_i+0xe8>
 8002574:	881e      	ldrh	r6, [r3, #0]
 8002576:	4854      	ldr	r0, [pc, #336]	; (80026c8 <_printf_i+0x244>)
 8002578:	2f6f      	cmp	r7, #111	; 0x6f
 800257a:	bf0c      	ite	eq
 800257c:	2308      	moveq	r3, #8
 800257e:	230a      	movne	r3, #10
 8002580:	2100      	movs	r1, #0
 8002582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002586:	6865      	ldr	r5, [r4, #4]
 8002588:	60a5      	str	r5, [r4, #8]
 800258a:	2d00      	cmp	r5, #0
 800258c:	bfa2      	ittt	ge
 800258e:	6821      	ldrge	r1, [r4, #0]
 8002590:	f021 0104 	bicge.w	r1, r1, #4
 8002594:	6021      	strge	r1, [r4, #0]
 8002596:	b90e      	cbnz	r6, 800259c <_printf_i+0x118>
 8002598:	2d00      	cmp	r5, #0
 800259a:	d04d      	beq.n	8002638 <_printf_i+0x1b4>
 800259c:	4615      	mov	r5, r2
 800259e:	fbb6 f1f3 	udiv	r1, r6, r3
 80025a2:	fb03 6711 	mls	r7, r3, r1, r6
 80025a6:	5dc7      	ldrb	r7, [r0, r7]
 80025a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025ac:	4637      	mov	r7, r6
 80025ae:	42bb      	cmp	r3, r7
 80025b0:	460e      	mov	r6, r1
 80025b2:	d9f4      	bls.n	800259e <_printf_i+0x11a>
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d10b      	bne.n	80025d0 <_printf_i+0x14c>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	07de      	lsls	r6, r3, #31
 80025bc:	d508      	bpl.n	80025d0 <_printf_i+0x14c>
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	6861      	ldr	r1, [r4, #4]
 80025c2:	4299      	cmp	r1, r3
 80025c4:	bfde      	ittt	le
 80025c6:	2330      	movle	r3, #48	; 0x30
 80025c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80025d0:	1b52      	subs	r2, r2, r5
 80025d2:	6122      	str	r2, [r4, #16]
 80025d4:	f8cd a000 	str.w	sl, [sp]
 80025d8:	464b      	mov	r3, r9
 80025da:	aa03      	add	r2, sp, #12
 80025dc:	4621      	mov	r1, r4
 80025de:	4640      	mov	r0, r8
 80025e0:	f7ff fee2 	bl	80023a8 <_printf_common>
 80025e4:	3001      	adds	r0, #1
 80025e6:	d14c      	bne.n	8002682 <_printf_i+0x1fe>
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	b004      	add	sp, #16
 80025ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f2:	4835      	ldr	r0, [pc, #212]	; (80026c8 <_printf_i+0x244>)
 80025f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025f8:	6829      	ldr	r1, [r5, #0]
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8002600:	6029      	str	r1, [r5, #0]
 8002602:	061d      	lsls	r5, r3, #24
 8002604:	d514      	bpl.n	8002630 <_printf_i+0x1ac>
 8002606:	07df      	lsls	r7, r3, #31
 8002608:	bf44      	itt	mi
 800260a:	f043 0320 	orrmi.w	r3, r3, #32
 800260e:	6023      	strmi	r3, [r4, #0]
 8002610:	b91e      	cbnz	r6, 800261a <_printf_i+0x196>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f023 0320 	bic.w	r3, r3, #32
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	2310      	movs	r3, #16
 800261c:	e7b0      	b.n	8002580 <_printf_i+0xfc>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	f043 0320 	orr.w	r3, r3, #32
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	2378      	movs	r3, #120	; 0x78
 8002628:	4828      	ldr	r0, [pc, #160]	; (80026cc <_printf_i+0x248>)
 800262a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800262e:	e7e3      	b.n	80025f8 <_printf_i+0x174>
 8002630:	0659      	lsls	r1, r3, #25
 8002632:	bf48      	it	mi
 8002634:	b2b6      	uxthmi	r6, r6
 8002636:	e7e6      	b.n	8002606 <_printf_i+0x182>
 8002638:	4615      	mov	r5, r2
 800263a:	e7bb      	b.n	80025b4 <_printf_i+0x130>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	6826      	ldr	r6, [r4, #0]
 8002640:	6961      	ldr	r1, [r4, #20]
 8002642:	1d18      	adds	r0, r3, #4
 8002644:	6028      	str	r0, [r5, #0]
 8002646:	0635      	lsls	r5, r6, #24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	d501      	bpl.n	8002650 <_printf_i+0x1cc>
 800264c:	6019      	str	r1, [r3, #0]
 800264e:	e002      	b.n	8002656 <_printf_i+0x1d2>
 8002650:	0670      	lsls	r0, r6, #25
 8002652:	d5fb      	bpl.n	800264c <_printf_i+0x1c8>
 8002654:	8019      	strh	r1, [r3, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	6123      	str	r3, [r4, #16]
 800265a:	4615      	mov	r5, r2
 800265c:	e7ba      	b.n	80025d4 <_printf_i+0x150>
 800265e:	682b      	ldr	r3, [r5, #0]
 8002660:	1d1a      	adds	r2, r3, #4
 8002662:	602a      	str	r2, [r5, #0]
 8002664:	681d      	ldr	r5, [r3, #0]
 8002666:	6862      	ldr	r2, [r4, #4]
 8002668:	2100      	movs	r1, #0
 800266a:	4628      	mov	r0, r5
 800266c:	f7fd fdc0 	bl	80001f0 <memchr>
 8002670:	b108      	cbz	r0, 8002676 <_printf_i+0x1f2>
 8002672:	1b40      	subs	r0, r0, r5
 8002674:	6060      	str	r0, [r4, #4]
 8002676:	6863      	ldr	r3, [r4, #4]
 8002678:	6123      	str	r3, [r4, #16]
 800267a:	2300      	movs	r3, #0
 800267c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002680:	e7a8      	b.n	80025d4 <_printf_i+0x150>
 8002682:	6923      	ldr	r3, [r4, #16]
 8002684:	462a      	mov	r2, r5
 8002686:	4649      	mov	r1, r9
 8002688:	4640      	mov	r0, r8
 800268a:	47d0      	blx	sl
 800268c:	3001      	adds	r0, #1
 800268e:	d0ab      	beq.n	80025e8 <_printf_i+0x164>
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	079b      	lsls	r3, r3, #30
 8002694:	d413      	bmi.n	80026be <_printf_i+0x23a>
 8002696:	68e0      	ldr	r0, [r4, #12]
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	4298      	cmp	r0, r3
 800269c:	bfb8      	it	lt
 800269e:	4618      	movlt	r0, r3
 80026a0:	e7a4      	b.n	80025ec <_printf_i+0x168>
 80026a2:	2301      	movs	r3, #1
 80026a4:	4632      	mov	r2, r6
 80026a6:	4649      	mov	r1, r9
 80026a8:	4640      	mov	r0, r8
 80026aa:	47d0      	blx	sl
 80026ac:	3001      	adds	r0, #1
 80026ae:	d09b      	beq.n	80025e8 <_printf_i+0x164>
 80026b0:	3501      	adds	r5, #1
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	9903      	ldr	r1, [sp, #12]
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	42ab      	cmp	r3, r5
 80026ba:	dcf2      	bgt.n	80026a2 <_printf_i+0x21e>
 80026bc:	e7eb      	b.n	8002696 <_printf_i+0x212>
 80026be:	2500      	movs	r5, #0
 80026c0:	f104 0619 	add.w	r6, r4, #25
 80026c4:	e7f5      	b.n	80026b2 <_printf_i+0x22e>
 80026c6:	bf00      	nop
 80026c8:	08002985 	.word	0x08002985
 80026cc:	08002996 	.word	0x08002996

080026d0 <__sread>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	460c      	mov	r4, r1
 80026d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d8:	f000 f894 	bl	8002804 <_read_r>
 80026dc:	2800      	cmp	r0, #0
 80026de:	bfab      	itete	ge
 80026e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026e2:	89a3      	ldrhlt	r3, [r4, #12]
 80026e4:	181b      	addge	r3, r3, r0
 80026e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026ea:	bfac      	ite	ge
 80026ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80026ee:	81a3      	strhlt	r3, [r4, #12]
 80026f0:	bd10      	pop	{r4, pc}

080026f2 <__swrite>:
 80026f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f6:	461f      	mov	r7, r3
 80026f8:	898b      	ldrh	r3, [r1, #12]
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	4605      	mov	r5, r0
 80026fe:	460c      	mov	r4, r1
 8002700:	4616      	mov	r6, r2
 8002702:	d505      	bpl.n	8002710 <__swrite+0x1e>
 8002704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002708:	2302      	movs	r3, #2
 800270a:	2200      	movs	r2, #0
 800270c:	f000 f868 	bl	80027e0 <_lseek_r>
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800271a:	81a3      	strh	r3, [r4, #12]
 800271c:	4632      	mov	r2, r6
 800271e:	463b      	mov	r3, r7
 8002720:	4628      	mov	r0, r5
 8002722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002726:	f000 b817 	b.w	8002758 <_write_r>

0800272a <__sseek>:
 800272a:	b510      	push	{r4, lr}
 800272c:	460c      	mov	r4, r1
 800272e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002732:	f000 f855 	bl	80027e0 <_lseek_r>
 8002736:	1c43      	adds	r3, r0, #1
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	bf15      	itete	ne
 800273c:	6560      	strne	r0, [r4, #84]	; 0x54
 800273e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002746:	81a3      	strheq	r3, [r4, #12]
 8002748:	bf18      	it	ne
 800274a:	81a3      	strhne	r3, [r4, #12]
 800274c:	bd10      	pop	{r4, pc}

0800274e <__sclose>:
 800274e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002752:	f000 b813 	b.w	800277c <_close_r>
	...

08002758 <_write_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4d07      	ldr	r5, [pc, #28]	; (8002778 <_write_r+0x20>)
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	2200      	movs	r2, #0
 8002764:	602a      	str	r2, [r5, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f7fe feaf 	bl	80014ca <_write>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_write_r+0x1e>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_write_r+0x1e>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200000b8 	.word	0x200000b8

0800277c <_close_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d06      	ldr	r5, [pc, #24]	; (8002798 <_close_r+0x1c>)
 8002780:	2300      	movs	r3, #0
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	602b      	str	r3, [r5, #0]
 8002788:	f7fe febb 	bl	8001502 <_close>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_close_r+0x1a>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_close_r+0x1a>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	200000b8 	.word	0x200000b8

0800279c <_fstat_r>:
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	4d07      	ldr	r5, [pc, #28]	; (80027bc <_fstat_r+0x20>)
 80027a0:	2300      	movs	r3, #0
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	602b      	str	r3, [r5, #0]
 80027aa:	f7fe feb5 	bl	8001518 <_fstat>
 80027ae:	1c43      	adds	r3, r0, #1
 80027b0:	d102      	bne.n	80027b8 <_fstat_r+0x1c>
 80027b2:	682b      	ldr	r3, [r5, #0]
 80027b4:	b103      	cbz	r3, 80027b8 <_fstat_r+0x1c>
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
 80027ba:	bf00      	nop
 80027bc:	200000b8 	.word	0x200000b8

080027c0 <_isatty_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4d06      	ldr	r5, [pc, #24]	; (80027dc <_isatty_r+0x1c>)
 80027c4:	2300      	movs	r3, #0
 80027c6:	4604      	mov	r4, r0
 80027c8:	4608      	mov	r0, r1
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	f7fe feb3 	bl	8001536 <_isatty>
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	d102      	bne.n	80027da <_isatty_r+0x1a>
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	b103      	cbz	r3, 80027da <_isatty_r+0x1a>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	bd38      	pop	{r3, r4, r5, pc}
 80027dc:	200000b8 	.word	0x200000b8

080027e0 <_lseek_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4d07      	ldr	r5, [pc, #28]	; (8002800 <_lseek_r+0x20>)
 80027e4:	4604      	mov	r4, r0
 80027e6:	4608      	mov	r0, r1
 80027e8:	4611      	mov	r1, r2
 80027ea:	2200      	movs	r2, #0
 80027ec:	602a      	str	r2, [r5, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f7fe feab 	bl	800154a <_lseek>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_lseek_r+0x1e>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_lseek_r+0x1e>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	200000b8 	.word	0x200000b8

08002804 <_read_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4d07      	ldr	r5, [pc, #28]	; (8002824 <_read_r+0x20>)
 8002808:	4604      	mov	r4, r0
 800280a:	4608      	mov	r0, r1
 800280c:	4611      	mov	r1, r2
 800280e:	2200      	movs	r2, #0
 8002810:	602a      	str	r2, [r5, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7fe fe3c 	bl	8001490 <_read>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	d102      	bne.n	8002822 <_read_r+0x1e>
 800281c:	682b      	ldr	r3, [r5, #0]
 800281e:	b103      	cbz	r3, 8002822 <_read_r+0x1e>
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	200000b8 	.word	0x200000b8

08002828 <_init>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr

08002834 <_fini>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	bf00      	nop
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr
