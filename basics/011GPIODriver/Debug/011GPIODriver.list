
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe8  08002fe8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe8  08002fe8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000068  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000038a8  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cd8  00000000  00000000  00023956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00024630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000330  00000000  00000000  00024a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023d3  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004e7d  00000000  00000000  0002710b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e106  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003a08e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001630  00000000  00000000  0003a0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002eb8 	.word	0x08002eb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002eb8 	.word	0x08002eb8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;								//PCF8574 I/O Expander Address
//uint8_t SlaveAddress = 0x50;								//AT24CXX EEPROM Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fd95 	bl	8001e00 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 f9f8 	bl	80016dc <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f87e 	bl	80003ee <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 faa3 	bl	800083e <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	200000a4 	.word	0x200000a4

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fd75 	bl	8001e00 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 f9e0 	bl	80016dc <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fa9d 	bl	8000860 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fa98 	bl	8000860 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fad9 	bl	80008ec <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fad4 	bl	80008ec <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fb08 	bl	800095e <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fb03 	bl	800095e <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fb44 	bl	80009ea <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fb3f 	bl	80009ea <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 fb16 	bl	80009a2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 fb11 	bl	80009a2 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f99f 	bl	80016dc <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fb43 	bl	8000a32 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc54 	bl	8000c60 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fb8e 	bl	8000ade <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fccd 	bl	8000d80 <lcd_pcf8574_send_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	6852      	ldr	r2, [r2, #4]
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	6892      	ldr	r2, [r2, #8]
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7b1b      	ldrb	r3, [r3, #12]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d16a      	bne.n	80004e8 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a1a      	ldr	r2, [r3, #32]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f042 0201 	orr.w	r2, r2, #1
 8000420:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7b5b      	ldrb	r3, [r3, #13]
 8000426:	2b02      	cmp	r3, #2
 8000428:	d11c      	bne.n	8000464 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	699a      	ldr	r2, [r3, #24]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f022 0203 	bic.w	r2, r2, #3
 8000438:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	6912      	ldr	r2, [r2, #16]
 8000442:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000452:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000462:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7b5b      	ldrb	r3, [r3, #13]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d11c      	bne.n	80004a6 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f022 0203 	bic.w	r2, r2, #3
 800047a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	6912      	ldr	r2, [r2, #16]
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	699a      	ldr	r2, [r3, #24]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000494:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80004a4:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7b5b      	ldrb	r3, [r3, #13]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d11c      	bne.n	80004e8 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f022 0203 	bic.w	r2, r2, #3
 80004bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	6912      	ldr	r2, [r2, #16]
 80004c6:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	699a      	ldr	r2, [r3, #24]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80004d6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80004e6:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7d1b      	ldrb	r3, [r3, #20]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	f040 80bf 	bne.w	8000670 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7d5b      	ldrb	r3, [r3, #21]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d124      	bne.n	8000544 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000508:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	6992      	ldr	r2, [r2, #24]
 8000512:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000522:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000532:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a1a      	ldr	r2, [r3, #32]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0210 	orr.w	r2, r2, #16
 8000542:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7d5b      	ldrb	r3, [r3, #21]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d124      	bne.n	8000596 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800055a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	6992      	ldr	r2, [r2, #24]
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000574:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000584:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6a1a      	ldr	r2, [r3, #32]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0210 	orr.w	r2, r2, #16
 8000594:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7d5b      	ldrb	r3, [r3, #21]
 800059a:	2b04      	cmp	r3, #4
 800059c:	d124      	bne.n	80005e8 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005ac:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6992      	ldr	r2, [r2, #24]
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80005c6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80005d6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6a1a      	ldr	r2, [r3, #32]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f042 0210 	orr.w	r2, r2, #16
 80005e6:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7d5b      	ldrb	r3, [r3, #21]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d13f      	bne.n	8000670 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800060e:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800061e:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a1a      	ldr	r2, [r3, #32]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f022 0220 	bic.w	r2, r2, #32
 800062e:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6a1a      	ldr	r2, [r3, #32]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800063e:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800064e:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f042 0204 	orr.w	r2, r2, #4
 800065e:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f042 0210 	orr.w	r2, r2, #16
 800066e:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7f1b      	ldrb	r3, [r3, #28]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d16a      	bne.n	800074e <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000686:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7f5b      	ldrb	r3, [r3, #29]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d11c      	bne.n	80006ca <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	69da      	ldr	r2, [r3, #28]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f022 0203 	bic.w	r2, r2, #3
 800069e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	6a12      	ldr	r2, [r2, #32]
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006b8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	69da      	ldr	r2, [r3, #28]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80006c8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7f5b      	ldrb	r3, [r3, #29]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d11c      	bne.n	800070c <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69da      	ldr	r2, [r3, #28]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f022 0203 	bic.w	r2, r2, #3
 80006e0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6a12      	ldr	r2, [r2, #32]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006fa:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	69da      	ldr	r2, [r3, #28]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800070a:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7f5b      	ldrb	r3, [r3, #29]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d11c      	bne.n	800074e <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69da      	ldr	r2, [r3, #28]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0203 	bic.w	r2, r2, #3
 8000722:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	6a12      	ldr	r2, [r2, #32]
 800072c:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	69da      	ldr	r2, [r3, #28]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800073c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69da      	ldr	r2, [r3, #28]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800074c:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000754:	2b00      	cmp	r3, #0
 8000756:	d16d      	bne.n	8000834 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6a1a      	ldr	r2, [r3, #32]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000766:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800076e:	2b02      	cmp	r3, #2
 8000770:	d11c      	bne.n	80007ac <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69da      	ldr	r2, [r3, #28]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000780:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800079a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	69da      	ldr	r2, [r3, #28]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80007aa:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d11c      	bne.n	80007f0 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007c4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	69da      	ldr	r2, [r3, #28]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007de:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007ee:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d11c      	bne.n	8000834 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000808:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000822:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000832:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f042 0201 	orr.w	r2, r2, #1
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
 800086c:	4613      	mov	r3, r2
 800086e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	43d2      	mvns	r2, r2
 8000884:	401a      	ands	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	78b9      	ldrb	r1, [r7, #2]
 8000890:	78fa      	ldrb	r2, [r7, #3]
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	431a      	orrs	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
 80008b4:	4613      	mov	r3, r2
 80008b6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	78fa      	ldrb	r2, [r7, #3]
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	78b9      	ldrb	r1, [r7, #2]
 80008d6:	78fa      	ldrb	r2, [r7, #3]
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	431a      	orrs	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	615a      	str	r2, [r3, #20]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	4613      	mov	r3, r2
 80008fa:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800090e:	7afa      	ldrb	r2, [r7, #11]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3208      	adds	r2, #8
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	7aba      	ldrb	r2, [r7, #10]
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	210f      	movs	r1, #15
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	43d2      	mvns	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	7afa      	ldrb	r2, [r7, #11]
 8000928:	4019      	ands	r1, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3208      	adds	r2, #8
 800092e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000932:	7afa      	ldrb	r2, [r7, #11]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3208      	adds	r2, #8
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	78b9      	ldrb	r1, [r7, #2]
 800093e:	7aba      	ldrb	r2, [r7, #10]
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	7afa      	ldrb	r2, [r7, #11]
 800094a:	4319      	orrs	r1, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3208      	adds	r2, #8
 8000950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
 800096a:	4613      	mov	r3, r2
 800096c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	43d2      	mvns	r2, r2
 8000980:	401a      	ands	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	78b9      	ldrb	r1, [r7, #2]
 800098c:	78fa      	ldrb	r2, [r7, #3]
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	605a      	str	r2, [r3, #4]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b085      	sub	sp, #20
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70fb      	strb	r3, [r7, #3]
 80009ae:	4613      	mov	r3, r2
 80009b0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	78fa      	ldrb	r2, [r7, #3]
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	43d2      	mvns	r2, r2
 80009c6:	401a      	ands	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	78b9      	ldrb	r1, [r7, #2]
 80009d2:	78fa      	ldrb	r2, [r7, #3]
 80009d4:	0052      	lsls	r2, r2, #1
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	431a      	orrs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
 80009f6:	4613      	mov	r3, r2
 80009f8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	78fa      	ldrb	r2, [r7, #3]
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	2103      	movs	r1, #3
 8000a08:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	401a      	ands	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	78b9      	ldrb	r1, [r7, #2]
 8000a1a:	78fa      	ldrb	r2, [r7, #3]
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a22:	431a      	orrs	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	609a      	str	r2, [r3, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	03db      	lsls	r3, r3, #15
 8000a70:	431a      	orrs	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10d      	bne.n	8000a9a <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	039b      	lsls	r3, r3, #14
 8000a94:	431a      	orrs	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000aa2:	f023 030f 	bic.w	r3, r3, #15
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	029b      	lsls	r3, r3, #10
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	601a      	str	r2, [r3, #0]

}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f043 0201 	orr.w	r2, r3, #1
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f000 f84c 	bl	8000bb0 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000b18:	bf00      	nop
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 f869 	bl	8000bf4 <I2C_GetFlagStatus>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f8      	beq.n	8000b1a <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f86f 	bl	8000c1e <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000b40:	bf00      	nop
 8000b42:	2102      	movs	r1, #2
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f000 f855 	bl	8000bf4 <I2C_GetFlagStatus>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f8      	beq.n	8000b42 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f874 	bl	8000c3e <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000b56:	e012      	b.n	8000b7e <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000b58:	bf00      	nop
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f000 f849 	bl	8000bf4 <I2C_GetFlagStatus>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f8      	beq.n	8000b5a <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000b84:	bf00      	nop
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f833 	bl	8000bf4 <I2C_GetFlagStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d1f8      	bne.n	8000b86 <I2CMasterSendData+0x86>
 8000b94:	2104      	movs	r1, #4
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f82c 	bl	8000bf4 <I2C_GetFlagStatus>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d1f1      	bne.n	8000b86 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f815 	bl	8000bd2 <I2C_SendStopBit>

}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	621a      	str	r2, [r3, #32]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c88:	f7ff fb02 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000c8c:	2030      	movs	r0, #48	; 0x30
 8000c8e:	f000 f845 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000c92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c96:	f7ff fafb 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000c9a:	2030      	movs	r0, #48	; 0x30
 8000c9c:	f000 f83e 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000ca0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ca4:	f7ff faf4 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ca8:	2030      	movs	r0, #48	; 0x30
 8000caa:	f000 f837 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000cae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cb2:	f7ff faed 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f000 f830 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000cbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cc0:	f7ff fae6 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f000 f829 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cce:	f7ff fadf 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000cd2:	2008      	movs	r0, #8
 8000cd4:	f000 f822 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cdc:	f7ff fad8 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 f81b 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ce6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cea:	f7ff fad1 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 f814 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000cf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cf8:	f7ff faca 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cfc:	2006      	movs	r0, #6
 8000cfe:	f000 f80d 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000d02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d06:	f7ff fac3 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f000 f806 	bl	8000d1c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000d10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d14:	f7ff fabc 	bl	8000290 <delay_us>

	return;
 8000d18:	bf00      	nop
}
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f023 030f 	bic.w	r3, r3, #15
 8000d2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	f043 030c 	orr.w	r3, r3, #12
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	f043 030c 	orr.w	r3, r3, #12
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <lcd_pcf8574_send_cmd+0x5c>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <lcd_pcf8574_send_cmd+0x60>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f107 0108 	add.w	r1, r7, #8
 8000d68:	2204      	movs	r2, #4
 8000d6a:	f7ff fec9 	bl	8000b00 <I2CMasterSendData>

	return;
 8000d6e:	bf00      	nop
}
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f043 030d 	orr.w	r3, r3, #13
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f043 0309 	orr.w	r3, r3, #9
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	f043 030d 	orr.w	r3, r3, #13
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	f043 0309 	orr.w	r3, r3, #9
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <lcd_pcf8574_send_data+0x5c>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <lcd_pcf8574_send_data+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f107 0108 	add.w	r1, r7, #8
 8000dcc:	2204      	movs	r2, #4
 8000dce:	f7ff fe97 	bl	8000b00 <I2CMasterSendData>

	return;
 8000dd2:	bf00      	nop
}
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff ff97 	bl	8000d1c <lcd_pcf8574_send_cmd>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff ff90 	bl	8000d1c <lcd_pcf8574_send_cmd>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	2b27      	cmp	r3, #39	; 0x27
 8000e1a:	d802      	bhi.n	8000e22 <lcd_pcf8574_set_position+0x22>
			position = col;
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e011      	b.n	8000e46 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e00e      	b.n	8000e46 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d109      	bne.n	8000e42 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	2b27      	cmp	r3, #39	; 0x27
 8000e32:	d803      	bhi.n	8000e3c <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	3340      	adds	r3, #64	; 0x40
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e004      	b.n	8000e46 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e001      	b.n	8000e46 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e4c:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff63 	bl	8000d1c <lcd_pcf8574_send_cmd>

	return;
 8000e56:	bf00      	nop
}
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <RTC_Config_Calendar>:
extern void RTC_Alarm_Interrupt_Callback(void);
static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_Config_Calendar(struct RTC_Config_t *pRTCConfig)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint32_t time_value = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
	uint32_t date_value = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]

	//1. Configure and Enable the RTC Clock
	//1.a Enable Write Access to the RTC Registers by enabling DBP bit in PWR_CR Register
	*pRCCPeriClkReg |= (1 << RCC_APB1ENR_PWR);
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <RTC_Config_Calendar+0x1d0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b6e      	ldr	r3, [pc, #440]	; (8001030 <RTC_Config_Calendar+0x1d0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e7e:	601a      	str	r2, [r3, #0]
	*pPWR_CR |= (1 << PWR_CR_DBP);
 8000e80:	4b6c      	ldr	r3, [pc, #432]	; (8001034 <RTC_Config_Calendar+0x1d4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <RTC_Config_Calendar+0x1d4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e8e:	601a      	str	r2, [r3, #0]

	stm32_rtc->RTC_WPR = 0xCA;
 8000e90:	4b69      	ldr	r3, [pc, #420]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	22ca      	movs	r2, #202	; 0xca
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
	stm32_rtc->RTC_WPR = 0x53;
 8000e98:	4b67      	ldr	r3, [pc, #412]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2253      	movs	r2, #83	; 0x53
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24

	//1.a Configure the RTC Clock Source in in RCC_BDCR

	*pRCC_BDCR &= ~(3 << RCC_BDCR_RTCSEL);
 8000ea0:	4b66      	ldr	r3, [pc, #408]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b65      	ldr	r3, [pc, #404]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000eae:	601a      	str	r2, [r3, #0]
	*pRCC_BDCR |= (pRTCConfig->RTCClockSource << RCC_BDCR_RTCSEL);
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

	//1.b If the RTC Clock Source is HSE, Turn On the HSE Oscillator
	//Also, configure the HSE PreScaler to generate 1 MHz RTCCLK
	if(pRTCConfig->RTCClockSource == RTC_CLK_SRC_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d122      	bne.n	8000f14 <RTC_Config_Calendar+0xb4>
	{
		//Turning on the HSE Oscillator
		*pRCC_CR |= (1 << HSE_ON_BITPOS);					//Turning on the HSE Oscillator
 8000ece:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <RTC_Config_Calendar+0x1e0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <RTC_Config_Calendar+0x1e0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000edc:	601a      	str	r2, [r3, #0]
		while(!(*pRCC_CR & (1 << HSE_CHECK_BITPOS)));		//Checking whether HSE Oscillator is turned on and is stable
 8000ede:	bf00      	nop
 8000ee0:	4b57      	ldr	r3, [pc, #348]	; (8001040 <RTC_Config_Calendar+0x1e0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f8      	beq.n	8000ee0 <RTC_Config_Calendar+0x80>

		//Configure the HSE PreScaler to generate 1 MHz RTCCLK
		*pRCC_CFGR &= ~(31 << RCC_CFGR_RTCPRE);
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <RTC_Config_Calendar+0x1e4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <RTC_Config_Calendar+0x1e4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8000efc:	601a      	str	r2, [r3, #0]
		*pRCC_CFGR |= (pRTCConfig->RTCClockHSEPrescaler << RCC_CFGR_RTCPRE);
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <RTC_Config_Calendar+0x1e4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	041b      	lsls	r3, r3, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <RTC_Config_Calendar+0x1e4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
	}

	//1.c Enable the RTC Clock in RCC_BDCR
	*pRCC_BDCR |= (1 << RCC_BDCR_RTCEN);
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <RTC_Config_Calendar+0x1dc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f22:	601a      	str	r2, [r3, #0]

	//2. Configure the RTC Calendar Parameters

	//2.b Enable the Initialization Mode
	stm32_rtc->RTC_ISR |= (1 << RTC_ISR_INIT);
 8000f24:	4b44      	ldr	r3, [pc, #272]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f32:	60da      	str	r2, [r3, #12]
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_INITF) & 0x1));
 8000f34:	bf00      	nop
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	099b      	lsrs	r3, r3, #6
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f7      	beq.n	8000f36 <RTC_Config_Calendar+0xd6>

	//2.c Configure the PreScaler Values in RTC_PRER Register
	stm32_rtc->RTC_PRER &= ~(0x7FFF << RTC_PRER_PREDIV_S);
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4a3a      	ldr	r2, [pc, #232]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f58:	6113      	str	r3, [r2, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerS << RTC_PRER_PREDIV_S);
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	889b      	ldrh	r3, [r3, #4]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	611a      	str	r2, [r3, #16]

	stm32_rtc->RTC_PRER &= ~(0x7F << RTC_PRER_PREDIV_A);
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f7c:	611a      	str	r2, [r3, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerA << RTC_PRER_PREDIV_A);
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	611a      	str	r2, [r3, #16]

	//2.d Configure the Time Parameters in RTC_TR Register
	time_value = (pRTCConfig->RTCClockSecondsUnits << RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << RTC_TR_ST) | (pRTCConfig->RTCClockMinutesUnits << RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << RTC_TR_MNT) | (pRTCConfig->RTCClockHoursUnits << RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << RTC_TR_PM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	799b      	ldrb	r3, [r3, #6]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	79db      	ldrb	r3, [r3, #7]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7a1b      	ldrb	r3, [r3, #8]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	031b      	lsls	r3, r3, #12
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	051b      	lsls	r3, r3, #20
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7b1b      	ldrb	r3, [r3, #12]
 8000fc6:	059b      	lsls	r3, r3, #22
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
	stm32_rtc->RTC_TR = time_value;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	601a      	str	r2, [r3, #0]

	//2.e Configure the Date Parameters in RTC_DR Register
	date_value = (pRTCConfig->RTCClockDateUnits << RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << RTC_DR_DT) | (pRTCConfig->RTCClockMonthUnits << RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << RTC_DR_MT) | (pRTCConfig->RTCClockYearUnits << RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << RTC_DR_YT) | (pRTCConfig->RTCClockDayOfWeek << RTC_DR_WDU);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b5b      	ldrb	r3, [r3, #13]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7bdb      	ldrb	r3, [r3, #15]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7c1b      	ldrb	r3, [r3, #16]
 8000fee:	031b      	lsls	r3, r3, #12
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7c5b      	ldrb	r3, [r3, #17]
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7c9b      	ldrb	r3, [r3, #18]
 8000ffe:	051b      	lsls	r3, r3, #20
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7cdb      	ldrb	r3, [r3, #19]
 8001006:	035b      	lsls	r3, r3, #13
 8001008:	4313      	orrs	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
	stm32_rtc->RTC_DR = date_value;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	605a      	str	r2, [r3, #4]

	//2.f Exit the Initialization Mode
	stm32_rtc->RTC_ISR &= ~(1 << RTC_ISR_INIT);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <RTC_Config_Calendar+0x1d8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001022:	60da      	str	r2, [r3, #12]

	return;
 8001024:	bf00      	nop
}
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000018 	.word	0x20000018
 8001034:	20000014 	.word	0x20000014
 8001038:	2000001c 	.word	0x2000001c
 800103c:	20000010 	.word	0x20000010
 8001040:	20000008 	.word	0x20000008
 8001044:	2000000c 	.word	0x2000000c

08001048 <RTC_Read_Calendar>:

void RTC_Read_Calendar(struct Date *date, struct Time *time)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	uint32_t time_value, date_value;

	//1. Wait for the RSF bit to be set in RTC_ISR register
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_RSF) & 0x1));
 8001052:	bf00      	nop
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <RTC_Read_Calendar+0x150>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f7      	beq.n	8001054 <RTC_Read_Calendar+0xc>

	//2. Read the current time value
	time_value = stm32_rtc->RTC_TR;
 8001064:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <RTC_Read_Calendar+0x150>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]

	//3. Read the current date value
	date_value = stm32_rtc->RTC_DR;
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <RTC_Read_Calendar+0x150>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60bb      	str	r3, [r7, #8]

	//4. Format the time and date values
	//4.a Format the time values
	time->seconds = ((time_value >> RTC_TR_ST) & 0x7)*10 + ((time_value >> RTC_TR_SU) & 0xF);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b2da      	uxtb	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	701a      	strb	r2, [r3, #0]
	time->minutes = ((time_value >> RTC_TR_MNT) & 0x7)*10 + ((time_value >> RTC_TR_MNU) & 0xF);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	0b1b      	lsrs	r3, r3, #12
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4413      	add	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	705a      	strb	r2, [r3, #1]
	time->hours = ((time_value >> RTC_TR_HT) & 0x3)*10 + ((time_value >> RTC_TR_HU) & 0xF);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	0d1b      	lsrs	r3, r3, #20
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	709a      	strb	r2, [r3, #2]
	time->timeformat = ((time_value >> RTC_TR_PM) & 0x1);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	0d9b      	lsrs	r3, r3, #22
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	70da      	strb	r2, [r3, #3]

	//4.b Format the date values
	date->date = ((date_value >> RTC_DR_DT) & 0x3)*10 + ((date_value >> RTC_DR_DU) & 0xF);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	701a      	strb	r2, [r3, #0]
	date->month = ((date_value >> RTC_DR_MT) & 0x1)*10 + ((date_value >> RTC_DR_MU) & 0xF);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	0b1b      	lsrs	r3, r3, #12
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	705a      	strb	r2, [r3, #1]
	date->year = ((date_value >> RTC_DR_YT) & 0xF)*10 + ((date_value >> RTC_DR_YU) & 0xF);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	0d1b      	lsrs	r3, r3, #20
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4413      	add	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	709a      	strb	r2, [r3, #2]
	date->dayofweek = ((date_value >> RTC_DR_WDU) & 0x7);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	0b5b      	lsrs	r3, r3, #13
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	b2da      	uxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	70da      	strb	r2, [r3, #3]

	return;
 800118c:	bf00      	nop
}
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c

0800119c <RTC_Display_Calendar_LCD>:

void RTC_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	struct Time saved_time;
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(count == 0)
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <RTC_Display_Calendar_LCD+0x230>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d162      	bne.n	8001274 <RTC_Display_Calendar_LCD+0xd8>
	{
		//Print the Time Information
		lcd_pcf8574_clear_screen();
 80011ae:	f7ff fe19 	bl	8000de4 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 80011b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011b6:	f7ff f86b 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 80011ba:	f7ff fe1a 	bl	8000df2 <lcd_pcf8574_return_home>
		delay_us(3000);
 80011be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c2:	f7ff f865 	bl	8000290 <delay_us>
		printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	4619      	mov	r1, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	487e      	ldr	r0, [pc, #504]	; (80013d0 <RTC_Display_Calendar_LCD+0x234>)
 80011d8:	f000 fef8 	bl	8001fcc <iprintf>

		//Saving the time information
		memset(&saved_time,0,sizeof(struct Time));
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2204      	movs	r2, #4
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fe0b 	bl	8001e00 <memset>
		saved_time.seconds = time->seconds;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	743b      	strb	r3, [r7, #16]
		saved_time.minutes = time->minutes;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	785b      	ldrb	r3, [r3, #1]
 80011f4:	747b      	strb	r3, [r7, #17]
		saved_time.hours = time->hours;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	789b      	ldrb	r3, [r3, #2]
 80011fa:	74bb      	strb	r3, [r7, #18]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fdfe 	bl	8000e00 <lcd_pcf8574_set_position>
		delay_us(3000);
 8001204:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001208:	f7ff f842 	bl	8000290 <delay_us>
		format_dow(date,dow);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f98e 	bl	8001534 <format_dow>
		format_mon(date,mon);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f9dc 	bl	80015dc <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	461a      	mov	r2, r3
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	f107 010c 	add.w	r1, r7, #12
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	4602      	mov	r2, r0
 800123c:	4865      	ldr	r0, [pc, #404]	; (80013d4 <RTC_Display_Calendar_LCD+0x238>)
 800123e:	f000 fec5 	bl	8001fcc <iprintf>

		//Saving the date information
		memset(&saved_date,0,sizeof(struct Date));
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2204      	movs	r2, #4
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fdd8 	bl	8001e00 <memset>
		saved_date.date = date->date;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	753b      	strb	r3, [r7, #20]
		saved_date.month = date->month;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	757b      	strb	r3, [r7, #21]
		saved_date.year = date->year;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	75bb      	strb	r3, [r7, #22]
		saved_date.dayofweek = date->dayofweek;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	75fb      	strb	r3, [r7, #23]

		//Update count value
		count++;
 8001268:	4b58      	ldr	r3, [pc, #352]	; (80013cc <RTC_Display_Calendar_LCD+0x230>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <RTC_Display_Calendar_LCD+0x230>)
 8001270:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 8001272:	e0a6      	b.n	80013c2 <RTC_Display_Calendar_LCD+0x226>
		if(saved_time.seconds != time->seconds)
 8001274:	7c3a      	ldrb	r2, [r7, #16]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d010      	beq.n	80012a0 <RTC_Display_Calendar_LCD+0x104>
			lcd_pcf8574_set_position(0,10);
 800127e:	210a      	movs	r1, #10
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fdbd 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 8001286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128a:	f7ff f801 	bl	8000290 <delay_us>
			printf("%02d",time->seconds);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4850      	ldr	r0, [pc, #320]	; (80013d8 <RTC_Display_Calendar_LCD+0x23c>)
 8001296:	f000 fe99 	bl	8001fcc <iprintf>
			saved_time.seconds = time->seconds;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	743b      	strb	r3, [r7, #16]
		if(saved_time.minutes != time->minutes)
 80012a0:	7c7a      	ldrb	r2, [r7, #17]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d010      	beq.n	80012cc <RTC_Display_Calendar_LCD+0x130>
			lcd_pcf8574_set_position(0,7);
 80012aa:	2107      	movs	r1, #7
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fda7 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 80012b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b6:	f7fe ffeb 	bl	8000290 <delay_us>
			printf("%02d",time->minutes);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	4619      	mov	r1, r3
 80012c0:	4845      	ldr	r0, [pc, #276]	; (80013d8 <RTC_Display_Calendar_LCD+0x23c>)
 80012c2:	f000 fe83 	bl	8001fcc <iprintf>
			saved_time.minutes = time->minutes;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	747b      	strb	r3, [r7, #17]
		if(saved_time.hours != time->hours)
 80012cc:	7cba      	ldrb	r2, [r7, #18]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d010      	beq.n	80012f8 <RTC_Display_Calendar_LCD+0x15c>
			lcd_pcf8574_set_position(0,4);
 80012d6:	2104      	movs	r1, #4
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fd91 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 80012de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e2:	f7fe ffd5 	bl	8000290 <delay_us>
			printf("%02d",time->hours);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	4619      	mov	r1, r3
 80012ec:	483a      	ldr	r0, [pc, #232]	; (80013d8 <RTC_Display_Calendar_LCD+0x23c>)
 80012ee:	f000 fe6d 	bl	8001fcc <iprintf>
			saved_time.hours = time->hours;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	74bb      	strb	r3, [r7, #18]
		if(saved_date.date != date->date)
 80012f8:	7d3a      	ldrb	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d010      	beq.n	8001324 <RTC_Display_Calendar_LCD+0x188>
			lcd_pcf8574_set_position(1,6);
 8001302:	2106      	movs	r1, #6
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fd7b 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f7fe ffbf 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	482f      	ldr	r0, [pc, #188]	; (80013d8 <RTC_Display_Calendar_LCD+0x23c>)
 800131a:	f000 fe57 	bl	8001fcc <iprintf>
			saved_date.date = date->date;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	753b      	strb	r3, [r7, #20]
		if(saved_date.month != date->month)
 8001324:	7d7a      	ldrb	r2, [r7, #21]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	429a      	cmp	r2, r3
 800132c:	d016      	beq.n	800135c <RTC_Display_Calendar_LCD+0x1c0>
			lcd_pcf8574_set_position(1,9);
 800132e:	2109      	movs	r1, #9
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fd65 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 8001336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133a:	f7fe ffa9 	bl	8000290 <delay_us>
			format_mon(date,mon);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f949 	bl	80015dc <format_mon>
			printf("%s",mon);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <RTC_Display_Calendar_LCD+0x240>)
 8001352:	f000 fe3b 	bl	8001fcc <iprintf>
			saved_date.month = date->month;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	757b      	strb	r3, [r7, #21]
		if(saved_date.year != date->year)
 800135c:	7dba      	ldrb	r2, [r7, #22]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	789b      	ldrb	r3, [r3, #2]
 8001362:	429a      	cmp	r2, r3
 8001364:	d010      	beq.n	8001388 <RTC_Display_Calendar_LCD+0x1ec>
			lcd_pcf8574_set_position(1,13);
 8001366:	210d      	movs	r1, #13
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fd49 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 800136e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001372:	f7fe ff8d 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	4619      	mov	r1, r3
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <RTC_Display_Calendar_LCD+0x23c>)
 800137e:	f000 fe25 	bl	8001fcc <iprintf>
			saved_date.year = date->year;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	75bb      	strb	r3, [r7, #22]
		if(saved_date.dayofweek != date->dayofweek)
 8001388:	7dfa      	ldrb	r2, [r7, #23]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	429a      	cmp	r2, r3
 8001390:	d017      	beq.n	80013c2 <RTC_Display_Calendar_LCD+0x226>
			lcd_pcf8574_set_position(1,2);
 8001392:	2102      	movs	r1, #2
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fd33 	bl	8000e00 <lcd_pcf8574_set_position>
			delay_us(500);
 800139a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139e:	f7fe ff77 	bl	8000290 <delay_us>
			format_dow(date,dow);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f8c3 	bl	8001534 <format_dow>
			printf("%s",dow);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <RTC_Display_Calendar_LCD+0x240>)
 80013b6:	f000 fe09 	bl	8001fcc <iprintf>
			saved_date.dayofweek = date->dayofweek;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	78db      	ldrb	r3, [r3, #3]
 80013be:	75fb      	strb	r3, [r7, #23]
	return;
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
}
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000cc 	.word	0x200000cc
 80013d0:	08002ed0 	.word	0x08002ed0
 80013d4:	08002ee4 	.word	0x08002ee4
 80013d8:	08002ef8 	.word	0x08002ef8
 80013dc:	08002f00 	.word	0x08002f00

080013e0 <RTC_Config_Alarm>:

void RTC_Config_Alarm(struct RTC_AlarmConfig_t *pRTCAlarmConfig)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	uint32_t alarm_value = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]

	//1a. Configure the ALARM Parameters in the appropriate ALARM Register
	//1b. Enable the ALARM Interrupt in the RTC_CR Register
	//1c. Enable the ALARM in RTC_CR Register
	alarm_value = (pRTCAlarmConfig->RTCAlarmSecondsUnits << RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << RTC_ALRMR_MSK1) | (pRTCAlarmConfig->RTCAlarmMinutesUnits << RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << RTC_ALRMR_MSK2) | (pRTCAlarmConfig->RTCAlarmHoursUnits << RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << RTC_ALRMR_PM) | (pRTCAlarmConfig->RTCAlarmConsiderHours << RTC_ALRMR_MSK3) | (pRTCAlarmConfig->RTCAlarmDateUnits << RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << RTC_ALRMR_DT) | (pRTCAlarmConfig->RTCAlarmWeekDaySelection << RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << RTC_ALRMR_MSK4);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	78db      	ldrb	r3, [r3, #3]
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	791b      	ldrb	r3, [r3, #4]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	031b      	lsls	r3, r3, #12
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	799b      	ldrb	r3, [r3, #6]
 8001416:	03db      	lsls	r3, r3, #15
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	79db      	ldrb	r3, [r3, #7]
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7a1b      	ldrb	r3, [r3, #8]
 8001426:	051b      	lsls	r3, r3, #20
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7a5b      	ldrb	r3, [r3, #9]
 800142e:	059b      	lsls	r3, r3, #22
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a9b      	ldrb	r3, [r3, #10]
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7adb      	ldrb	r3, [r3, #11]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7b1b      	ldrb	r3, [r3, #12]
 8001446:	071b      	lsls	r3, r3, #28
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7b5b      	ldrb	r3, [r3, #13]
 800144e:	079b      	lsls	r3, r3, #30
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	07db      	lsls	r3, r3, #31
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

	if(pRTCAlarmConfig->RTCAlarmSelection == RTC_ALARM_A)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d114      	bne.n	800148e <RTC_Config_Alarm+0xae>
	{
		stm32_rtc->RTC_ALRMAR = alarm_value;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <RTC_Config_Alarm+0xec>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	61da      	str	r2, [r3, #28]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRAIE);
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <RTC_Config_Alarm+0xec>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <RTC_Config_Alarm+0xec>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800147a:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRAE);
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <RTC_Config_Alarm+0xec>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <RTC_Config_Alarm+0xec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148a:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_ALRMBR = alarm_value;
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBIE);
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBE);
	}

	return;
 800148c:	e018      	b.n	80014c0 <RTC_Config_Alarm+0xe0>
	else if(pRTCAlarmConfig->RTCAlarmSelection == RTC_ALARM_B)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d114      	bne.n	80014c0 <RTC_Config_Alarm+0xe0>
		stm32_rtc->RTC_ALRMBR = alarm_value;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <RTC_Config_Alarm+0xec>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	621a      	str	r2, [r3, #32]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBIE);
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <RTC_Config_Alarm+0xec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <RTC_Config_Alarm+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ac:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBE);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <RTC_Config_Alarm+0xec>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <RTC_Config_Alarm+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014bc:	609a      	str	r2, [r3, #8]
	return;
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
}
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000001c 	.word	0x2000001c

080014d0 <RTC_Config_Alarm_Interrupt>:

void RTC_Config_Alarm_Interrupt(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <RTC_Config_Alarm_Interrupt+0x34>)
 80014d8:	607b      	str	r3, [r7, #4]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <RTC_Config_Alarm_Interrupt+0x38>)
 80014dc:	603b      	str	r3, [r7, #0]

	// 1. Configuring the EXTI Controller (External Interrupt Controller)
	*pEXTI_IMR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);  	// Setting the Interrupt Mask Register
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
	*pEXTI_RTSR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN); 	// Setting the Rising Trigger Set Register
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt in NVIC
	NVIC_EnableIRQ(RTC_ALARM_INTERRUPT_IRQ_NO);				// Enabling the interrupt
 80014f6:	2029      	movs	r0, #41	; 0x29
 80014f8:	f000 fab4 	bl	8001a64 <NVIC_EnableIRQ>

	return;
 80014fc:	bf00      	nop
}
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013c00 	.word	0x40013c00
 8001508:	40013c08 	.word	0x40013c08

0800150c <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <RTC_Alarm_IRQHandler+0x24>)
 8001514:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001516:	f000 fb6b 	bl	8001bf0 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]

	return;
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40013c14 	.word	0x40013c14

08001534 <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	3b01      	subs	r3, #1
 8001544:	2b06      	cmp	r3, #6
 8001546:	d834      	bhi.n	80015b2 <format_dow+0x7e>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <format_dow+0x1c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	0800156d 	.word	0x0800156d
 8001554:	08001577 	.word	0x08001577
 8001558:	08001581 	.word	0x08001581
 800155c:	0800158b 	.word	0x0800158b
 8001560:	08001595 	.word	0x08001595
 8001564:	0800159f 	.word	0x0800159f
 8001568:	080015a9 	.word	0x080015a9
	{
		case 1:
			strcpy(dow,"Mon");
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <format_dow+0x8c>)
 8001570:	6810      	ldr	r0, [r2, #0]
 8001572:	6018      	str	r0, [r3, #0]
			break;
 8001574:	e01e      	b.n	80015b4 <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <format_dow+0x90>)
 800157a:	6810      	ldr	r0, [r2, #0]
 800157c:	6018      	str	r0, [r3, #0]
			break;
 800157e:	e019      	b.n	80015b4 <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <format_dow+0x94>)
 8001584:	6810      	ldr	r0, [r2, #0]
 8001586:	6018      	str	r0, [r3, #0]
			break;
 8001588:	e014      	b.n	80015b4 <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <format_dow+0x98>)
 800158e:	6810      	ldr	r0, [r2, #0]
 8001590:	6018      	str	r0, [r3, #0]
			break;
 8001592:	e00f      	b.n	80015b4 <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <format_dow+0x9c>)
 8001598:	6810      	ldr	r0, [r2, #0]
 800159a:	6018      	str	r0, [r3, #0]
			break;
 800159c:	e00a      	b.n	80015b4 <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <format_dow+0xa0>)
 80015a2:	6810      	ldr	r0, [r2, #0]
 80015a4:	6018      	str	r0, [r3, #0]
			break;
 80015a6:	e005      	b.n	80015b4 <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <format_dow+0xa4>)
 80015ac:	6810      	ldr	r0, [r2, #0]
 80015ae:	6018      	str	r0, [r3, #0]
			break;
 80015b0:	e000      	b.n	80015b4 <format_dow+0x80>
		default:
			break;
 80015b2:	bf00      	nop
	}

	return;
 80015b4:	bf00      	nop
}
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	08002f04 	.word	0x08002f04
 80015c4:	08002f08 	.word	0x08002f08
 80015c8:	08002f0c 	.word	0x08002f0c
 80015cc:	08002f10 	.word	0x08002f10
 80015d0:	08002f14 	.word	0x08002f14
 80015d4:	08002f18 	.word	0x08002f18
 80015d8:	08002f1c 	.word	0x08002f1c

080015dc <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	switch(date->month)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	2b0b      	cmp	r3, #11
 80015ee:	d857      	bhi.n	80016a0 <format_mon+0xc4>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <format_mon+0x1c>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001629 	.word	0x08001629
 80015fc:	08001633 	.word	0x08001633
 8001600:	0800163d 	.word	0x0800163d
 8001604:	08001647 	.word	0x08001647
 8001608:	08001651 	.word	0x08001651
 800160c:	0800165b 	.word	0x0800165b
 8001610:	08001665 	.word	0x08001665
 8001614:	0800166f 	.word	0x0800166f
 8001618:	08001679 	.word	0x08001679
 800161c:	08001683 	.word	0x08001683
 8001620:	0800168d 	.word	0x0800168d
 8001624:	08001697 	.word	0x08001697
	{
		case 1:
			strcpy(mon,"Jan");
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <format_mon+0xd0>)
 800162c:	6810      	ldr	r0, [r2, #0]
 800162e:	6018      	str	r0, [r3, #0]
			break;
 8001630:	e037      	b.n	80016a2 <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <format_mon+0xd4>)
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	6018      	str	r0, [r3, #0]
			break;
 800163a:	e032      	b.n	80016a2 <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <format_mon+0xd8>)
 8001640:	6810      	ldr	r0, [r2, #0]
 8001642:	6018      	str	r0, [r3, #0]
			break;
 8001644:	e02d      	b.n	80016a2 <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <format_mon+0xdc>)
 800164a:	6810      	ldr	r0, [r2, #0]
 800164c:	6018      	str	r0, [r3, #0]
			break;
 800164e:	e028      	b.n	80016a2 <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <format_mon+0xe0>)
 8001654:	6810      	ldr	r0, [r2, #0]
 8001656:	6018      	str	r0, [r3, #0]
			break;
 8001658:	e023      	b.n	80016a2 <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <format_mon+0xe4>)
 800165e:	6810      	ldr	r0, [r2, #0]
 8001660:	6018      	str	r0, [r3, #0]
			break;
 8001662:	e01e      	b.n	80016a2 <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <format_mon+0xe8>)
 8001668:	6810      	ldr	r0, [r2, #0]
 800166a:	6018      	str	r0, [r3, #0]
			break;
 800166c:	e019      	b.n	80016a2 <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <format_mon+0xec>)
 8001672:	6810      	ldr	r0, [r2, #0]
 8001674:	6018      	str	r0, [r3, #0]
			break;
 8001676:	e014      	b.n	80016a2 <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <format_mon+0xf0>)
 800167c:	6810      	ldr	r0, [r2, #0]
 800167e:	6018      	str	r0, [r3, #0]
			break;
 8001680:	e00f      	b.n	80016a2 <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <format_mon+0xf4>)
 8001686:	6810      	ldr	r0, [r2, #0]
 8001688:	6018      	str	r0, [r3, #0]
			break;
 800168a:	e00a      	b.n	80016a2 <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <format_mon+0xf8>)
 8001690:	6810      	ldr	r0, [r2, #0]
 8001692:	6018      	str	r0, [r3, #0]
			break;
 8001694:	e005      	b.n	80016a2 <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <format_mon+0xfc>)
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	6018      	str	r0, [r3, #0]
			break;
 800169e:	e000      	b.n	80016a2 <format_mon+0xc6>
		default:
			break;
 80016a0:	bf00      	nop
	}

	return;
 80016a2:	bf00      	nop
}
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	08002f20 	.word	0x08002f20
 80016b0:	08002f24 	.word	0x08002f24
 80016b4:	08002f28 	.word	0x08002f28
 80016b8:	08002f2c 	.word	0x08002f2c
 80016bc:	08002f30 	.word	0x08002f30
 80016c0:	08002f34 	.word	0x08002f34
 80016c4:	08002f38 	.word	0x08002f38
 80016c8:	08002f3c 	.word	0x08002f3c
 80016cc:	08002f40 	.word	0x08002f40
 80016d0:	08002f44 	.word	0x08002f44
 80016d4:	08002f48 	.word	0x08002f48
 80016d8:	08002f4c 	.word	0x08002f4c

080016dc <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a88      	ldr	r2, [pc, #544]	; (8001908 <EnablePeriClk+0x22c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d108      	bne.n	80016fe <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80016ec:	4b87      	ldr	r3, [pc, #540]	; (800190c <EnablePeriClk+0x230>)
 80016ee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80016fc:	e19b      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a83      	ldr	r2, [pc, #524]	; (8001910 <EnablePeriClk+0x234>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d108      	bne.n	8001718 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001706:	4b81      	ldr	r3, [pc, #516]	; (800190c <EnablePeriClk+0x230>)
 8001708:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	e18e      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <EnablePeriClk+0x238>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d108      	bne.n	8001732 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001720:	4b7a      	ldr	r3, [pc, #488]	; (800190c <EnablePeriClk+0x230>)
 8001722:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f043 0204 	orr.w	r2, r3, #4
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	e181      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a78      	ldr	r2, [pc, #480]	; (8001918 <EnablePeriClk+0x23c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d108      	bne.n	800174c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <EnablePeriClk+0x230>)
 800173c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f043 0208 	orr.w	r2, r3, #8
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	e174      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <EnablePeriClk+0x240>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d108      	bne.n	8001766 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <EnablePeriClk+0x230>)
 8001756:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f043 0210 	orr.w	r2, r3, #16
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	e167      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a6d      	ldr	r2, [pc, #436]	; (8001920 <EnablePeriClk+0x244>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d108      	bne.n	8001780 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <EnablePeriClk+0x230>)
 8001770:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	e15a      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a68      	ldr	r2, [pc, #416]	; (8001924 <EnablePeriClk+0x248>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d108      	bne.n	800179a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001788:	4b60      	ldr	r3, [pc, #384]	; (800190c <EnablePeriClk+0x230>)
 800178a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	601a      	str	r2, [r3, #0]
}
 8001798:	e14d      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a62      	ldr	r2, [pc, #392]	; (8001928 <EnablePeriClk+0x24c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d108      	bne.n	80017b4 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <EnablePeriClk+0x230>)
 80017a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	e140      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a5d      	ldr	r2, [pc, #372]	; (800192c <EnablePeriClk+0x250>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d108      	bne.n	80017ce <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <EnablePeriClk+0x230>)
 80017be:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	e133      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a57      	ldr	r2, [pc, #348]	; (8001930 <EnablePeriClk+0x254>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80017d6:	4b57      	ldr	r3, [pc, #348]	; (8001934 <EnablePeriClk+0x258>)
 80017d8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	e126      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a53      	ldr	r2, [pc, #332]	; (8001938 <EnablePeriClk+0x25c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d108      	bne.n	8001802 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <EnablePeriClk+0x260>)
 80017f2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	e119      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <EnablePeriClk+0x264>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d108      	bne.n	800181c <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <EnablePeriClk+0x260>)
 800180c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	e10c      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a49      	ldr	r2, [pc, #292]	; (8001944 <EnablePeriClk+0x268>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d108      	bne.n	8001836 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <EnablePeriClk+0x260>)
 8001826:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	e0ff      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <EnablePeriClk+0x26c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d108      	bne.n	8001850 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <EnablePeriClk+0x260>)
 8001840:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]
}
 800184e:	e0f2      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <EnablePeriClk+0x270>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d108      	bne.n	800186a <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <EnablePeriClk+0x260>)
 800185a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	e0e5      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <EnablePeriClk+0x274>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d108      	bne.n	8001884 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <EnablePeriClk+0x258>)
 8001874:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f043 0210 	orr.w	r2, r3, #16
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]
}
 8001882:	e0d8      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <EnablePeriClk+0x278>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <EnablePeriClk+0x260>)
 800188e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	e0cb      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <EnablePeriClk+0x27c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d108      	bne.n	80018b8 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <EnablePeriClk+0x260>)
 80018a8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	e0be      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a28      	ldr	r2, [pc, #160]	; (800195c <EnablePeriClk+0x280>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d108      	bne.n	80018d2 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <EnablePeriClk+0x260>)
 80018c2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	e0b1      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <EnablePeriClk+0x284>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d108      	bne.n	80018ec <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <EnablePeriClk+0x260>)
 80018dc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	e0a4      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <EnablePeriClk+0x288>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d139      	bne.n	8001968 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <EnablePeriClk+0x258>)
 80018f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f043 0220 	orr.w	r2, r3, #32
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	e097      	b.n	8001a36 <EnablePeriClk+0x35a>
 8001906:	bf00      	nop
 8001908:	40020000 	.word	0x40020000
 800190c:	40023830 	.word	0x40023830
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40021400 	.word	0x40021400
 8001924:	40021800 	.word	0x40021800
 8001928:	40021c00 	.word	0x40021c00
 800192c:	40022000 	.word	0x40022000
 8001930:	40013000 	.word	0x40013000
 8001934:	40023844 	.word	0x40023844
 8001938:	40003800 	.word	0x40003800
 800193c:	40023840 	.word	0x40023840
 8001940:	40003c00 	.word	0x40003c00
 8001944:	40005400 	.word	0x40005400
 8001948:	40005800 	.word	0x40005800
 800194c:	40005c00 	.word	0x40005c00
 8001950:	40011000 	.word	0x40011000
 8001954:	40004400 	.word	0x40004400
 8001958:	40004800 	.word	0x40004800
 800195c:	40004c00 	.word	0x40004c00
 8001960:	40005000 	.word	0x40005000
 8001964:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <EnablePeriClk+0x364>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d108      	bne.n	8001982 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <EnablePeriClk+0x368>)
 8001972:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f043 0210 	orr.w	r2, r3, #16
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	e059      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <EnablePeriClk+0x36c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d108      	bne.n	800199c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <EnablePeriClk+0x368>)
 800198c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	e04c      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <EnablePeriClk+0x370>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d108      	bne.n	80019b6 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <EnablePeriClk+0x374>)
 80019a6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	e03f      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <EnablePeriClk+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d108      	bne.n	80019d0 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <EnablePeriClk+0x374>)
 80019c0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	601a      	str	r2, [r3, #0]
}
 80019ce:	e032      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d6:	d108      	bne.n	80019ea <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <EnablePeriClk+0x368>)
 80019da:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	e025      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <EnablePeriClk+0x37c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <EnablePeriClk+0x368>)
 80019f4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	e018      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <EnablePeriClk+0x380>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d108      	bne.n	8001a1e <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <EnablePeriClk+0x368>)
 8001a0e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	e00b      	b.n	8001a36 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <EnablePeriClk+0x384>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d107      	bne.n	8001a36 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <EnablePeriClk+0x368>)
 8001a28:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f043 0208 	orr.w	r2, r3, #8
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40001000 	.word	0x40001000
 8001a44:	40023840 	.word	0x40023840
 8001a48:	40001400 	.word	0x40001400
 8001a4c:	40026000 	.word	0x40026000
 8001a50:	40023830 	.word	0x40023830
 8001a54:	40026400 	.word	0x40026400
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	40000c00 	.word	0x40000c00

08001a64 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a86:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001a8a:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <main>:
struct Time time;

void RTC_Alarm_Interrupt_Callback(void);

int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
	struct RTC_Config_t stm32_rtc_config;
	struct RTC_AlarmConfig_t stm32_rtc_alarm_config;


	//Configure the Timer
	configure_delay_timer();
 8001aae:	f7fe fc07 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 8001ab2:	f7fe fc27 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <main+0x130>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 faac 	bl	800201c <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 8001ac4:	4845      	ldr	r0, [pc, #276]	; (8001bdc <main+0x134>)
 8001ac6:	f7fe fbe3 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001aca:	f7ff f8d9 	bl	8000c80 <lcd_pcf8574_init>
	delay_us(100000);
 8001ace:	4844      	ldr	r0, [pc, #272]	; (8001be0 <main+0x138>)
 8001ad0:	f7fe fbde 	bl	8000290 <delay_us>

	//Configure STM32 RTC Peripheral
	memset(&stm32_rtc_config,0,sizeof(stm32_rtc_config));
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2214      	movs	r2, #20
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f98f 	bl	8001e00 <memset>
	stm32_rtc_config.RTCClockSource = RTC_CLK_SRC_HSE;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	753b      	strb	r3, [r7, #20]
	stm32_rtc_config.RTCClockHSEPrescaler = RTC_CLK_PRESCALER_DIV_8;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	757b      	strb	r3, [r7, #21]
	stm32_rtc_config.RTCClockPrescalerA = 99;
 8001aea:	2363      	movs	r3, #99	; 0x63
 8001aec:	75bb      	strb	r3, [r7, #22]
	stm32_rtc_config.RTCClockPrescalerS = 9999;
 8001aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8001af2:	833b      	strh	r3, [r7, #24]
	stm32_rtc_config.RTCClockSecondsUnits = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	76bb      	strb	r3, [r7, #26]
	stm32_rtc_config.RTCClockSecondsTens = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	76fb      	strb	r3, [r7, #27]
	stm32_rtc_config.RTCClockMinutesUnits = 5;
 8001afc:	2305      	movs	r3, #5
 8001afe:	773b      	strb	r3, [r7, #28]
	stm32_rtc_config.RTCClockMinutesTens = 3;
 8001b00:	2303      	movs	r3, #3
 8001b02:	777b      	strb	r3, [r7, #29]
	stm32_rtc_config.RTCClockHoursUnits = 7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	77bb      	strb	r3, [r7, #30]
	stm32_rtc_config.RTCClockHoursTens = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
	stm32_rtc_config.RTCClockAMPM = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3020 	strb.w	r3, [r7, #32]
	stm32_rtc_config.RTCClockDateUnits = 7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	stm32_rtc_config.RTCClockDateTens = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	stm32_rtc_config.RTCClockMonthUnits = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	stm32_rtc_config.RTCClockMonthTens = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	stm32_rtc_config.RTCClockYearUnits = 4;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	stm32_rtc_config.RTCClockYearTens = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	stm32_rtc_config.RTCClockDayOfWeek = 7;
 8001b36:	2307      	movs	r3, #7
 8001b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RTC_Config_Calendar(&stm32_rtc_config);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f98d 	bl	8000e60 <RTC_Config_Calendar>
	delay_us(10000);
 8001b46:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b4a:	f7fe fba1 	bl	8000290 <delay_us>

	//Configure the STM32 RTC Alarm
	memset(&stm32_rtc_alarm_config,0,sizeof(stm32_rtc_alarm_config));
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	220f      	movs	r2, #15
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f953 	bl	8001e00 <memset>
	stm32_rtc_alarm_config.RTCAlarmSelection = RTC_ALARM_A;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	713b      	strb	r3, [r7, #4]
	stm32_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	717b      	strb	r3, [r7, #5]
	stm32_rtc_alarm_config.RTCAlarmSecondsTens = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71bb      	strb	r3, [r7, #6]
	stm32_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_YES;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
	stm32_rtc_alarm_config.RTCAlarmMinutesUnits = 7;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	723b      	strb	r3, [r7, #8]
	stm32_rtc_alarm_config.RTCAlarmMinutesTens = 3;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	727b      	strb	r3, [r7, #9]
	stm32_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_YES;
 8001b72:	2300      	movs	r3, #0
 8001b74:	72bb      	strb	r3, [r7, #10]
	stm32_rtc_alarm_config.RTCAlarmHoursUnits = 7;
 8001b76:	2307      	movs	r3, #7
 8001b78:	72fb      	strb	r3, [r7, #11]
	stm32_rtc_alarm_config.RTCAlarmHoursTens = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	733b      	strb	r3, [r7, #12]
	stm32_rtc_alarm_config.RTCAlarmAMPM = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	737b      	strb	r3, [r7, #13]
	stm32_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_YES;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73bb      	strb	r3, [r7, #14]
	stm32_rtc_alarm_config.RTCAlarmDateUnits = 7;
 8001b86:	2307      	movs	r3, #7
 8001b88:	73fb      	strb	r3, [r7, #15]
	stm32_rtc_alarm_config.RTCAlarmDateTens = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	743b      	strb	r3, [r7, #16]
	stm32_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	747b      	strb	r3, [r7, #17]
	stm32_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8001b92:	2301      	movs	r3, #1
 8001b94:	74bb      	strb	r3, [r7, #18]

	RTC_Config_Alarm(&stm32_rtc_alarm_config);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fc21 	bl	80013e0 <RTC_Config_Alarm>
	RTC_Config_Alarm_Interrupt();
 8001b9e:	f7ff fc97 	bl	80014d0 <RTC_Config_Alarm_Interrupt>

	//Configure the GPIO Related to RTC Alarm
	EnablePeriClk(RTC_ALARM_GPIO_PORT);
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <main+0x13c>)
 8001ba4:	f7ff fd9a 	bl	80016dc <EnablePeriClk>
	GPIOSetMode(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_MODE_OUTPUT);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	210f      	movs	r1, #15
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <main+0x13c>)
 8001bae:	f7fe fe57 	bl	8000860 <GPIOSetMode>
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_LOW);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <main+0x13c>)
 8001bb8:	f7fe fe76 	bl	80008a8 <GPIOWritePin>

	delay_us(10000);
 8001bbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001bc0:	f7fe fb66 	bl	8000290 <delay_us>

	while(1)
	{
		RTC_Read_Calendar(&date,&time);
 8001bc4:	4908      	ldr	r1, [pc, #32]	; (8001be8 <main+0x140>)
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <main+0x144>)
 8001bc8:	f7ff fa3e 	bl	8001048 <RTC_Read_Calendar>
		RTC_Display_Calendar_LCD(&date,&time);
 8001bcc:	4906      	ldr	r1, [pc, #24]	; (8001be8 <main+0x140>)
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <main+0x144>)
 8001bd0:	f7ff fae4 	bl	800119c <RTC_Display_Calendar_LCD>
		RTC_Read_Calendar(&date,&time);
 8001bd4:	e7f6      	b.n	8001bc4 <main+0x11c>
 8001bd6:	bf00      	nop
 8001bd8:	20000020 	.word	0x20000020
 8001bdc:	000f4240 	.word	0x000f4240
 8001be0:	000186a0 	.word	0x000186a0
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	200000d4 	.word	0x200000d4
 8001bec:	200000d0 	.word	0x200000d0

08001bf0 <RTC_Alarm_Interrupt_Callback>:

	return 0;
}

void RTC_Alarm_Interrupt_Callback(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001bfa:	f7fe fe55 	bl	80008a8 <GPIOWritePin>

	return;
 8001bfe:	bf00      	nop
}
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020c00 	.word	0x40020c00

08001c08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00a      	b.n	8001c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1a:	f3af 8000 	nop.w
 8001c1e:	4601      	mov	r1, r0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf0      	blt.n	8001c1a <_read+0x12>
  }

  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e009      	b.n	8001c68 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fbb9 	bl	80003d4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf1      	blt.n	8001c54 <_write+0x12>
  }
  return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_close>:

int _close(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f000 f846 	bl	8001d9c <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20020000 	.word	0x20020000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	200000d8 	.word	0x200000d8
 8001d44:	200000f0 	.word	0x200000f0

08001d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <LoopForever+0xe>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <LoopForever+0x16>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d76:	f000 f817 	bl	8001da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7a:	f7ff fe95 	bl	8001aa8 <main>

08001d7e <LoopForever>:

LoopForever:
  b LoopForever
 8001d7e:	e7fe      	b.n	8001d7e <LoopForever>
  ldr   r0, =_estack
 8001d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d8c:	08002ff0 	.word	0x08002ff0
  ldr r2, =_sbss
 8001d90:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d94:	200000ec 	.word	0x200000ec

08001d98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <__errno>:
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <__errno+0x8>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000020 	.word	0x20000020

08001da8 <__libc_init_array>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	4d0d      	ldr	r5, [pc, #52]	; (8001de0 <__libc_init_array+0x38>)
 8001dac:	4c0d      	ldr	r4, [pc, #52]	; (8001de4 <__libc_init_array+0x3c>)
 8001dae:	1b64      	subs	r4, r4, r5
 8001db0:	10a4      	asrs	r4, r4, #2
 8001db2:	2600      	movs	r6, #0
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d109      	bne.n	8001dcc <__libc_init_array+0x24>
 8001db8:	4d0b      	ldr	r5, [pc, #44]	; (8001de8 <__libc_init_array+0x40>)
 8001dba:	4c0c      	ldr	r4, [pc, #48]	; (8001dec <__libc_init_array+0x44>)
 8001dbc:	f001 f87c 	bl	8002eb8 <_init>
 8001dc0:	1b64      	subs	r4, r4, r5
 8001dc2:	10a4      	asrs	r4, r4, #2
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	42a6      	cmp	r6, r4
 8001dc8:	d105      	bne.n	8001dd6 <__libc_init_array+0x2e>
 8001dca:	bd70      	pop	{r4, r5, r6, pc}
 8001dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd0:	4798      	blx	r3
 8001dd2:	3601      	adds	r6, #1
 8001dd4:	e7ee      	b.n	8001db4 <__libc_init_array+0xc>
 8001dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dda:	4798      	blx	r3
 8001ddc:	3601      	adds	r6, #1
 8001dde:	e7f2      	b.n	8001dc6 <__libc_init_array+0x1e>
 8001de0:	08002fe8 	.word	0x08002fe8
 8001de4:	08002fe8 	.word	0x08002fe8
 8001de8:	08002fe8 	.word	0x08002fe8
 8001dec:	08002fec 	.word	0x08002fec

08001df0 <malloc>:
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <malloc+0xc>)
 8001df2:	4601      	mov	r1, r0
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f000 b875 	b.w	8001ee4 <_malloc_r>
 8001dfa:	bf00      	nop
 8001dfc:	20000020 	.word	0x20000020

08001e00 <memset>:
 8001e00:	4402      	add	r2, r0
 8001e02:	4603      	mov	r3, r0
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d100      	bne.n	8001e0a <memset+0xa>
 8001e08:	4770      	bx	lr
 8001e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e0e:	e7f9      	b.n	8001e04 <memset+0x4>

08001e10 <_free_r>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4605      	mov	r5, r0
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d041      	beq.n	8001e9c <_free_r+0x8c>
 8001e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e1c:	1f0c      	subs	r4, r1, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bfb8      	it	lt
 8001e22:	18e4      	addlt	r4, r4, r3
 8001e24:	f000 fca4 	bl	8002770 <__malloc_lock>
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <_free_r+0x90>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	b933      	cbnz	r3, 8001e3c <_free_r+0x2c>
 8001e2e:	6063      	str	r3, [r4, #4]
 8001e30:	6014      	str	r4, [r2, #0]
 8001e32:	4628      	mov	r0, r5
 8001e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e38:	f000 bca0 	b.w	800277c <__malloc_unlock>
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	d908      	bls.n	8001e52 <_free_r+0x42>
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	1821      	adds	r1, r4, r0
 8001e44:	428b      	cmp	r3, r1
 8001e46:	bf01      	itttt	eq
 8001e48:	6819      	ldreq	r1, [r3, #0]
 8001e4a:	685b      	ldreq	r3, [r3, #4]
 8001e4c:	1809      	addeq	r1, r1, r0
 8001e4e:	6021      	streq	r1, [r4, #0]
 8001e50:	e7ed      	b.n	8001e2e <_free_r+0x1e>
 8001e52:	461a      	mov	r2, r3
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	b10b      	cbz	r3, 8001e5c <_free_r+0x4c>
 8001e58:	42a3      	cmp	r3, r4
 8001e5a:	d9fa      	bls.n	8001e52 <_free_r+0x42>
 8001e5c:	6811      	ldr	r1, [r2, #0]
 8001e5e:	1850      	adds	r0, r2, r1
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	d10b      	bne.n	8001e7c <_free_r+0x6c>
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	4401      	add	r1, r0
 8001e68:	1850      	adds	r0, r2, r1
 8001e6a:	4283      	cmp	r3, r0
 8001e6c:	6011      	str	r1, [r2, #0]
 8001e6e:	d1e0      	bne.n	8001e32 <_free_r+0x22>
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	6053      	str	r3, [r2, #4]
 8001e76:	4401      	add	r1, r0
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	e7da      	b.n	8001e32 <_free_r+0x22>
 8001e7c:	d902      	bls.n	8001e84 <_free_r+0x74>
 8001e7e:	230c      	movs	r3, #12
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	e7d6      	b.n	8001e32 <_free_r+0x22>
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	1821      	adds	r1, r4, r0
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	bf04      	itt	eq
 8001e8c:	6819      	ldreq	r1, [r3, #0]
 8001e8e:	685b      	ldreq	r3, [r3, #4]
 8001e90:	6063      	str	r3, [r4, #4]
 8001e92:	bf04      	itt	eq
 8001e94:	1809      	addeq	r1, r1, r0
 8001e96:	6021      	streq	r1, [r4, #0]
 8001e98:	6054      	str	r4, [r2, #4]
 8001e9a:	e7ca      	b.n	8001e32 <_free_r+0x22>
 8001e9c:	bd38      	pop	{r3, r4, r5, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200000dc 	.word	0x200000dc

08001ea4 <sbrk_aligned>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	4e0e      	ldr	r6, [pc, #56]	; (8001ee0 <sbrk_aligned+0x3c>)
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	6831      	ldr	r1, [r6, #0]
 8001eac:	4605      	mov	r5, r0
 8001eae:	b911      	cbnz	r1, 8001eb6 <sbrk_aligned+0x12>
 8001eb0:	f000 f8a4 	bl	8001ffc <_sbrk_r>
 8001eb4:	6030      	str	r0, [r6, #0]
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f000 f89f 	bl	8001ffc <_sbrk_r>
 8001ebe:	1c43      	adds	r3, r0, #1
 8001ec0:	d00a      	beq.n	8001ed8 <sbrk_aligned+0x34>
 8001ec2:	1cc4      	adds	r4, r0, #3
 8001ec4:	f024 0403 	bic.w	r4, r4, #3
 8001ec8:	42a0      	cmp	r0, r4
 8001eca:	d007      	beq.n	8001edc <sbrk_aligned+0x38>
 8001ecc:	1a21      	subs	r1, r4, r0
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f000 f894 	bl	8001ffc <_sbrk_r>
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d101      	bne.n	8001edc <sbrk_aligned+0x38>
 8001ed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001edc:	4620      	mov	r0, r4
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
 8001ee0:	200000e0 	.word	0x200000e0

08001ee4 <_malloc_r>:
 8001ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee8:	1ccd      	adds	r5, r1, #3
 8001eea:	f025 0503 	bic.w	r5, r5, #3
 8001eee:	3508      	adds	r5, #8
 8001ef0:	2d0c      	cmp	r5, #12
 8001ef2:	bf38      	it	cc
 8001ef4:	250c      	movcc	r5, #12
 8001ef6:	2d00      	cmp	r5, #0
 8001ef8:	4607      	mov	r7, r0
 8001efa:	db01      	blt.n	8001f00 <_malloc_r+0x1c>
 8001efc:	42a9      	cmp	r1, r5
 8001efe:	d905      	bls.n	8001f0c <_malloc_r+0x28>
 8001f00:	230c      	movs	r3, #12
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	2600      	movs	r6, #0
 8001f06:	4630      	mov	r0, r6
 8001f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f0c:	4e2e      	ldr	r6, [pc, #184]	; (8001fc8 <_malloc_r+0xe4>)
 8001f0e:	f000 fc2f 	bl	8002770 <__malloc_lock>
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	461c      	mov	r4, r3
 8001f16:	bb34      	cbnz	r4, 8001f66 <_malloc_r+0x82>
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4638      	mov	r0, r7
 8001f1c:	f7ff ffc2 	bl	8001ea4 <sbrk_aligned>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	4604      	mov	r4, r0
 8001f24:	d14d      	bne.n	8001fc2 <_malloc_r+0xde>
 8001f26:	6834      	ldr	r4, [r6, #0]
 8001f28:	4626      	mov	r6, r4
 8001f2a:	2e00      	cmp	r6, #0
 8001f2c:	d140      	bne.n	8001fb0 <_malloc_r+0xcc>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	4631      	mov	r1, r6
 8001f32:	4638      	mov	r0, r7
 8001f34:	eb04 0803 	add.w	r8, r4, r3
 8001f38:	f000 f860 	bl	8001ffc <_sbrk_r>
 8001f3c:	4580      	cmp	r8, r0
 8001f3e:	d13a      	bne.n	8001fb6 <_malloc_r+0xd2>
 8001f40:	6821      	ldr	r1, [r4, #0]
 8001f42:	3503      	adds	r5, #3
 8001f44:	1a6d      	subs	r5, r5, r1
 8001f46:	f025 0503 	bic.w	r5, r5, #3
 8001f4a:	3508      	adds	r5, #8
 8001f4c:	2d0c      	cmp	r5, #12
 8001f4e:	bf38      	it	cc
 8001f50:	250c      	movcc	r5, #12
 8001f52:	4629      	mov	r1, r5
 8001f54:	4638      	mov	r0, r7
 8001f56:	f7ff ffa5 	bl	8001ea4 <sbrk_aligned>
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	d02b      	beq.n	8001fb6 <_malloc_r+0xd2>
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	442b      	add	r3, r5
 8001f62:	6023      	str	r3, [r4, #0]
 8001f64:	e00e      	b.n	8001f84 <_malloc_r+0xa0>
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	1b52      	subs	r2, r2, r5
 8001f6a:	d41e      	bmi.n	8001faa <_malloc_r+0xc6>
 8001f6c:	2a0b      	cmp	r2, #11
 8001f6e:	d916      	bls.n	8001f9e <_malloc_r+0xba>
 8001f70:	1961      	adds	r1, r4, r5
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	6025      	str	r5, [r4, #0]
 8001f76:	bf18      	it	ne
 8001f78:	6059      	strne	r1, [r3, #4]
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	bf08      	it	eq
 8001f7e:	6031      	streq	r1, [r6, #0]
 8001f80:	5162      	str	r2, [r4, r5]
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	4638      	mov	r0, r7
 8001f86:	f104 060b 	add.w	r6, r4, #11
 8001f8a:	f000 fbf7 	bl	800277c <__malloc_unlock>
 8001f8e:	f026 0607 	bic.w	r6, r6, #7
 8001f92:	1d23      	adds	r3, r4, #4
 8001f94:	1af2      	subs	r2, r6, r3
 8001f96:	d0b6      	beq.n	8001f06 <_malloc_r+0x22>
 8001f98:	1b9b      	subs	r3, r3, r6
 8001f9a:	50a3      	str	r3, [r4, r2]
 8001f9c:	e7b3      	b.n	8001f06 <_malloc_r+0x22>
 8001f9e:	6862      	ldr	r2, [r4, #4]
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	bf0c      	ite	eq
 8001fa4:	6032      	streq	r2, [r6, #0]
 8001fa6:	605a      	strne	r2, [r3, #4]
 8001fa8:	e7ec      	b.n	8001f84 <_malloc_r+0xa0>
 8001faa:	4623      	mov	r3, r4
 8001fac:	6864      	ldr	r4, [r4, #4]
 8001fae:	e7b2      	b.n	8001f16 <_malloc_r+0x32>
 8001fb0:	4634      	mov	r4, r6
 8001fb2:	6876      	ldr	r6, [r6, #4]
 8001fb4:	e7b9      	b.n	8001f2a <_malloc_r+0x46>
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f000 fbde 	bl	800277c <__malloc_unlock>
 8001fc0:	e7a1      	b.n	8001f06 <_malloc_r+0x22>
 8001fc2:	6025      	str	r5, [r4, #0]
 8001fc4:	e7de      	b.n	8001f84 <_malloc_r+0xa0>
 8001fc6:	bf00      	nop
 8001fc8:	200000dc 	.word	0x200000dc

08001fcc <iprintf>:
 8001fcc:	b40f      	push	{r0, r1, r2, r3}
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <iprintf+0x2c>)
 8001fd0:	b513      	push	{r0, r1, r4, lr}
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	b124      	cbz	r4, 8001fe0 <iprintf+0x14>
 8001fd6:	69a3      	ldr	r3, [r4, #24]
 8001fd8:	b913      	cbnz	r3, 8001fe0 <iprintf+0x14>
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f000 fac2 	bl	8002564 <__sinit>
 8001fe0:	ab05      	add	r3, sp, #20
 8001fe2:	9a04      	ldr	r2, [sp, #16]
 8001fe4:	68a1      	ldr	r1, [r4, #8]
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f000 fbf5 	bl	80027d8 <_vfiprintf_r>
 8001fee:	b002      	add	sp, #8
 8001ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff4:	b004      	add	sp, #16
 8001ff6:	4770      	bx	lr
 8001ff8:	20000020 	.word	0x20000020

08001ffc <_sbrk_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d06      	ldr	r5, [pc, #24]	; (8002018 <_sbrk_r+0x1c>)
 8002000:	2300      	movs	r3, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	602b      	str	r3, [r5, #0]
 8002008:	f7ff fe68 	bl	8001cdc <_sbrk>
 800200c:	1c43      	adds	r3, r0, #1
 800200e:	d102      	bne.n	8002016 <_sbrk_r+0x1a>
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	b103      	cbz	r3, 8002016 <_sbrk_r+0x1a>
 8002014:	6023      	str	r3, [r4, #0]
 8002016:	bd38      	pop	{r3, r4, r5, pc}
 8002018:	200000e8 	.word	0x200000e8

0800201c <setbuf>:
 800201c:	2900      	cmp	r1, #0
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	bf0c      	ite	eq
 8002024:	2202      	moveq	r2, #2
 8002026:	2200      	movne	r2, #0
 8002028:	f000 b800 	b.w	800202c <setvbuf>

0800202c <setvbuf>:
 800202c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002030:	461d      	mov	r5, r3
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <setvbuf+0x17c>)
 8002034:	681f      	ldr	r7, [r3, #0]
 8002036:	4604      	mov	r4, r0
 8002038:	460e      	mov	r6, r1
 800203a:	4690      	mov	r8, r2
 800203c:	b127      	cbz	r7, 8002048 <setvbuf+0x1c>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	b913      	cbnz	r3, 8002048 <setvbuf+0x1c>
 8002042:	4638      	mov	r0, r7
 8002044:	f000 fa8e 	bl	8002564 <__sinit>
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <setvbuf+0x180>)
 800204a:	429c      	cmp	r4, r3
 800204c:	d167      	bne.n	800211e <setvbuf+0xf2>
 800204e:	687c      	ldr	r4, [r7, #4]
 8002050:	f1b8 0f02 	cmp.w	r8, #2
 8002054:	d006      	beq.n	8002064 <setvbuf+0x38>
 8002056:	f1b8 0f01 	cmp.w	r8, #1
 800205a:	f200 809f 	bhi.w	800219c <setvbuf+0x170>
 800205e:	2d00      	cmp	r5, #0
 8002060:	f2c0 809c 	blt.w	800219c <setvbuf+0x170>
 8002064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002066:	07db      	lsls	r3, r3, #31
 8002068:	d405      	bmi.n	8002076 <setvbuf+0x4a>
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	0598      	lsls	r0, r3, #22
 800206e:	d402      	bmi.n	8002076 <setvbuf+0x4a>
 8002070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002072:	f000 fb15 	bl	80026a0 <__retarget_lock_acquire_recursive>
 8002076:	4621      	mov	r1, r4
 8002078:	4638      	mov	r0, r7
 800207a:	f000 f9df 	bl	800243c <_fflush_r>
 800207e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002080:	b141      	cbz	r1, 8002094 <setvbuf+0x68>
 8002082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002086:	4299      	cmp	r1, r3
 8002088:	d002      	beq.n	8002090 <setvbuf+0x64>
 800208a:	4638      	mov	r0, r7
 800208c:	f7ff fec0 	bl	8001e10 <_free_r>
 8002090:	2300      	movs	r3, #0
 8002092:	6363      	str	r3, [r4, #52]	; 0x34
 8002094:	2300      	movs	r3, #0
 8002096:	61a3      	str	r3, [r4, #24]
 8002098:	6063      	str	r3, [r4, #4]
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	0619      	lsls	r1, r3, #24
 800209e:	d503      	bpl.n	80020a8 <setvbuf+0x7c>
 80020a0:	6921      	ldr	r1, [r4, #16]
 80020a2:	4638      	mov	r0, r7
 80020a4:	f7ff feb4 	bl	8001e10 <_free_r>
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	f1b8 0f02 	cmp.w	r8, #2
 80020b6:	81a3      	strh	r3, [r4, #12]
 80020b8:	d06c      	beq.n	8002194 <setvbuf+0x168>
 80020ba:	ab01      	add	r3, sp, #4
 80020bc:	466a      	mov	r2, sp
 80020be:	4621      	mov	r1, r4
 80020c0:	4638      	mov	r0, r7
 80020c2:	f000 faef 	bl	80026a4 <__swhatbuf_r>
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	4318      	orrs	r0, r3
 80020ca:	81a0      	strh	r0, [r4, #12]
 80020cc:	2d00      	cmp	r5, #0
 80020ce:	d130      	bne.n	8002132 <setvbuf+0x106>
 80020d0:	9d00      	ldr	r5, [sp, #0]
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7ff fe8c 	bl	8001df0 <malloc>
 80020d8:	4606      	mov	r6, r0
 80020da:	2800      	cmp	r0, #0
 80020dc:	d155      	bne.n	800218a <setvbuf+0x15e>
 80020de:	f8dd 9000 	ldr.w	r9, [sp]
 80020e2:	45a9      	cmp	r9, r5
 80020e4:	d14a      	bne.n	800217c <setvbuf+0x150>
 80020e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80020ea:	2200      	movs	r2, #0
 80020ec:	60a2      	str	r2, [r4, #8]
 80020ee:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80020f2:	6022      	str	r2, [r4, #0]
 80020f4:	6122      	str	r2, [r4, #16]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020fc:	6162      	str	r2, [r4, #20]
 80020fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	07d2      	lsls	r2, r2, #31
 8002106:	81a3      	strh	r3, [r4, #12]
 8002108:	d405      	bmi.n	8002116 <setvbuf+0xea>
 800210a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800210e:	d102      	bne.n	8002116 <setvbuf+0xea>
 8002110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002112:	f000 fac6 	bl	80026a2 <__retarget_lock_release_recursive>
 8002116:	4628      	mov	r0, r5
 8002118:	b003      	add	sp, #12
 800211a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <setvbuf+0x184>)
 8002120:	429c      	cmp	r4, r3
 8002122:	d101      	bne.n	8002128 <setvbuf+0xfc>
 8002124:	68bc      	ldr	r4, [r7, #8]
 8002126:	e793      	b.n	8002050 <setvbuf+0x24>
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <setvbuf+0x188>)
 800212a:	429c      	cmp	r4, r3
 800212c:	bf08      	it	eq
 800212e:	68fc      	ldreq	r4, [r7, #12]
 8002130:	e78e      	b.n	8002050 <setvbuf+0x24>
 8002132:	2e00      	cmp	r6, #0
 8002134:	d0cd      	beq.n	80020d2 <setvbuf+0xa6>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	b913      	cbnz	r3, 8002140 <setvbuf+0x114>
 800213a:	4638      	mov	r0, r7
 800213c:	f000 fa12 	bl	8002564 <__sinit>
 8002140:	f1b8 0f01 	cmp.w	r8, #1
 8002144:	bf08      	it	eq
 8002146:	89a3      	ldrheq	r3, [r4, #12]
 8002148:	6026      	str	r6, [r4, #0]
 800214a:	bf04      	itt	eq
 800214c:	f043 0301 	orreq.w	r3, r3, #1
 8002150:	81a3      	strheq	r3, [r4, #12]
 8002152:	89a2      	ldrh	r2, [r4, #12]
 8002154:	f012 0308 	ands.w	r3, r2, #8
 8002158:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800215c:	d01c      	beq.n	8002198 <setvbuf+0x16c>
 800215e:	07d3      	lsls	r3, r2, #31
 8002160:	bf41      	itttt	mi
 8002162:	2300      	movmi	r3, #0
 8002164:	426d      	negmi	r5, r5
 8002166:	60a3      	strmi	r3, [r4, #8]
 8002168:	61a5      	strmi	r5, [r4, #24]
 800216a:	bf58      	it	pl
 800216c:	60a5      	strpl	r5, [r4, #8]
 800216e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002170:	f015 0501 	ands.w	r5, r5, #1
 8002174:	d115      	bne.n	80021a2 <setvbuf+0x176>
 8002176:	f412 7f00 	tst.w	r2, #512	; 0x200
 800217a:	e7c8      	b.n	800210e <setvbuf+0xe2>
 800217c:	4648      	mov	r0, r9
 800217e:	f7ff fe37 	bl	8001df0 <malloc>
 8002182:	4606      	mov	r6, r0
 8002184:	2800      	cmp	r0, #0
 8002186:	d0ae      	beq.n	80020e6 <setvbuf+0xba>
 8002188:	464d      	mov	r5, r9
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	81a3      	strh	r3, [r4, #12]
 8002192:	e7d0      	b.n	8002136 <setvbuf+0x10a>
 8002194:	2500      	movs	r5, #0
 8002196:	e7a8      	b.n	80020ea <setvbuf+0xbe>
 8002198:	60a3      	str	r3, [r4, #8]
 800219a:	e7e8      	b.n	800216e <setvbuf+0x142>
 800219c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80021a0:	e7b9      	b.n	8002116 <setvbuf+0xea>
 80021a2:	2500      	movs	r5, #0
 80021a4:	e7b7      	b.n	8002116 <setvbuf+0xea>
 80021a6:	bf00      	nop
 80021a8:	20000020 	.word	0x20000020
 80021ac:	08002f74 	.word	0x08002f74
 80021b0:	08002f94 	.word	0x08002f94
 80021b4:	08002f54 	.word	0x08002f54

080021b8 <__swbuf_r>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	460e      	mov	r6, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	4605      	mov	r5, r0
 80021c0:	b118      	cbz	r0, 80021ca <__swbuf_r+0x12>
 80021c2:	6983      	ldr	r3, [r0, #24]
 80021c4:	b90b      	cbnz	r3, 80021ca <__swbuf_r+0x12>
 80021c6:	f000 f9cd 	bl	8002564 <__sinit>
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <__swbuf_r+0x98>)
 80021cc:	429c      	cmp	r4, r3
 80021ce:	d12b      	bne.n	8002228 <__swbuf_r+0x70>
 80021d0:	686c      	ldr	r4, [r5, #4]
 80021d2:	69a3      	ldr	r3, [r4, #24]
 80021d4:	60a3      	str	r3, [r4, #8]
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	071a      	lsls	r2, r3, #28
 80021da:	d52f      	bpl.n	800223c <__swbuf_r+0x84>
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	b36b      	cbz	r3, 800223c <__swbuf_r+0x84>
 80021e0:	6923      	ldr	r3, [r4, #16]
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	1ac0      	subs	r0, r0, r3
 80021e6:	6963      	ldr	r3, [r4, #20]
 80021e8:	b2f6      	uxtb	r6, r6
 80021ea:	4283      	cmp	r3, r0
 80021ec:	4637      	mov	r7, r6
 80021ee:	dc04      	bgt.n	80021fa <__swbuf_r+0x42>
 80021f0:	4621      	mov	r1, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 f922 	bl	800243c <_fflush_r>
 80021f8:	bb30      	cbnz	r0, 8002248 <__swbuf_r+0x90>
 80021fa:	68a3      	ldr	r3, [r4, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60a3      	str	r3, [r4, #8]
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	6022      	str	r2, [r4, #0]
 8002206:	701e      	strb	r6, [r3, #0]
 8002208:	6963      	ldr	r3, [r4, #20]
 800220a:	3001      	adds	r0, #1
 800220c:	4283      	cmp	r3, r0
 800220e:	d004      	beq.n	800221a <__swbuf_r+0x62>
 8002210:	89a3      	ldrh	r3, [r4, #12]
 8002212:	07db      	lsls	r3, r3, #31
 8002214:	d506      	bpl.n	8002224 <__swbuf_r+0x6c>
 8002216:	2e0a      	cmp	r6, #10
 8002218:	d104      	bne.n	8002224 <__swbuf_r+0x6c>
 800221a:	4621      	mov	r1, r4
 800221c:	4628      	mov	r0, r5
 800221e:	f000 f90d 	bl	800243c <_fflush_r>
 8002222:	b988      	cbnz	r0, 8002248 <__swbuf_r+0x90>
 8002224:	4638      	mov	r0, r7
 8002226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <__swbuf_r+0x9c>)
 800222a:	429c      	cmp	r4, r3
 800222c:	d101      	bne.n	8002232 <__swbuf_r+0x7a>
 800222e:	68ac      	ldr	r4, [r5, #8]
 8002230:	e7cf      	b.n	80021d2 <__swbuf_r+0x1a>
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <__swbuf_r+0xa0>)
 8002234:	429c      	cmp	r4, r3
 8002236:	bf08      	it	eq
 8002238:	68ec      	ldreq	r4, [r5, #12]
 800223a:	e7ca      	b.n	80021d2 <__swbuf_r+0x1a>
 800223c:	4621      	mov	r1, r4
 800223e:	4628      	mov	r0, r5
 8002240:	f000 f80c 	bl	800225c <__swsetup_r>
 8002244:	2800      	cmp	r0, #0
 8002246:	d0cb      	beq.n	80021e0 <__swbuf_r+0x28>
 8002248:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800224c:	e7ea      	b.n	8002224 <__swbuf_r+0x6c>
 800224e:	bf00      	nop
 8002250:	08002f74 	.word	0x08002f74
 8002254:	08002f94 	.word	0x08002f94
 8002258:	08002f54 	.word	0x08002f54

0800225c <__swsetup_r>:
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <__swsetup_r+0xcc>)
 800225e:	b570      	push	{r4, r5, r6, lr}
 8002260:	681d      	ldr	r5, [r3, #0]
 8002262:	4606      	mov	r6, r0
 8002264:	460c      	mov	r4, r1
 8002266:	b125      	cbz	r5, 8002272 <__swsetup_r+0x16>
 8002268:	69ab      	ldr	r3, [r5, #24]
 800226a:	b913      	cbnz	r3, 8002272 <__swsetup_r+0x16>
 800226c:	4628      	mov	r0, r5
 800226e:	f000 f979 	bl	8002564 <__sinit>
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <__swsetup_r+0xd0>)
 8002274:	429c      	cmp	r4, r3
 8002276:	d10f      	bne.n	8002298 <__swsetup_r+0x3c>
 8002278:	686c      	ldr	r4, [r5, #4]
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002280:	0719      	lsls	r1, r3, #28
 8002282:	d42c      	bmi.n	80022de <__swsetup_r+0x82>
 8002284:	06dd      	lsls	r5, r3, #27
 8002286:	d411      	bmi.n	80022ac <__swsetup_r+0x50>
 8002288:	2309      	movs	r3, #9
 800228a:	6033      	str	r3, [r6, #0]
 800228c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002290:	81a3      	strh	r3, [r4, #12]
 8002292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002296:	e03e      	b.n	8002316 <__swsetup_r+0xba>
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <__swsetup_r+0xd4>)
 800229a:	429c      	cmp	r4, r3
 800229c:	d101      	bne.n	80022a2 <__swsetup_r+0x46>
 800229e:	68ac      	ldr	r4, [r5, #8]
 80022a0:	e7eb      	b.n	800227a <__swsetup_r+0x1e>
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <__swsetup_r+0xd8>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	bf08      	it	eq
 80022a8:	68ec      	ldreq	r4, [r5, #12]
 80022aa:	e7e6      	b.n	800227a <__swsetup_r+0x1e>
 80022ac:	0758      	lsls	r0, r3, #29
 80022ae:	d512      	bpl.n	80022d6 <__swsetup_r+0x7a>
 80022b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022b2:	b141      	cbz	r1, 80022c6 <__swsetup_r+0x6a>
 80022b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022b8:	4299      	cmp	r1, r3
 80022ba:	d002      	beq.n	80022c2 <__swsetup_r+0x66>
 80022bc:	4630      	mov	r0, r6
 80022be:	f7ff fda7 	bl	8001e10 <_free_r>
 80022c2:	2300      	movs	r3, #0
 80022c4:	6363      	str	r3, [r4, #52]	; 0x34
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022cc:	81a3      	strh	r3, [r4, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	6063      	str	r3, [r4, #4]
 80022d2:	6923      	ldr	r3, [r4, #16]
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	81a3      	strh	r3, [r4, #12]
 80022de:	6923      	ldr	r3, [r4, #16]
 80022e0:	b94b      	cbnz	r3, 80022f6 <__swsetup_r+0x9a>
 80022e2:	89a3      	ldrh	r3, [r4, #12]
 80022e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ec:	d003      	beq.n	80022f6 <__swsetup_r+0x9a>
 80022ee:	4621      	mov	r1, r4
 80022f0:	4630      	mov	r0, r6
 80022f2:	f000 f9fd 	bl	80026f0 <__smakebuf_r>
 80022f6:	89a0      	ldrh	r0, [r4, #12]
 80022f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022fc:	f010 0301 	ands.w	r3, r0, #1
 8002300:	d00a      	beq.n	8002318 <__swsetup_r+0xbc>
 8002302:	2300      	movs	r3, #0
 8002304:	60a3      	str	r3, [r4, #8]
 8002306:	6963      	ldr	r3, [r4, #20]
 8002308:	425b      	negs	r3, r3
 800230a:	61a3      	str	r3, [r4, #24]
 800230c:	6923      	ldr	r3, [r4, #16]
 800230e:	b943      	cbnz	r3, 8002322 <__swsetup_r+0xc6>
 8002310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002314:	d1ba      	bne.n	800228c <__swsetup_r+0x30>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	0781      	lsls	r1, r0, #30
 800231a:	bf58      	it	pl
 800231c:	6963      	ldrpl	r3, [r4, #20]
 800231e:	60a3      	str	r3, [r4, #8]
 8002320:	e7f4      	b.n	800230c <__swsetup_r+0xb0>
 8002322:	2000      	movs	r0, #0
 8002324:	e7f7      	b.n	8002316 <__swsetup_r+0xba>
 8002326:	bf00      	nop
 8002328:	20000020 	.word	0x20000020
 800232c:	08002f74 	.word	0x08002f74
 8002330:	08002f94 	.word	0x08002f94
 8002334:	08002f54 	.word	0x08002f54

08002338 <__sflush_r>:
 8002338:	898a      	ldrh	r2, [r1, #12]
 800233a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233c:	4605      	mov	r5, r0
 800233e:	0710      	lsls	r0, r2, #28
 8002340:	460c      	mov	r4, r1
 8002342:	d457      	bmi.n	80023f4 <__sflush_r+0xbc>
 8002344:	684b      	ldr	r3, [r1, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	dc04      	bgt.n	8002354 <__sflush_r+0x1c>
 800234a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	dc01      	bgt.n	8002354 <__sflush_r+0x1c>
 8002350:	2000      	movs	r0, #0
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002356:	2e00      	cmp	r6, #0
 8002358:	d0fa      	beq.n	8002350 <__sflush_r+0x18>
 800235a:	2300      	movs	r3, #0
 800235c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002360:	682f      	ldr	r7, [r5, #0]
 8002362:	602b      	str	r3, [r5, #0]
 8002364:	d032      	beq.n	80023cc <__sflush_r+0x94>
 8002366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	075a      	lsls	r2, r3, #29
 800236c:	d505      	bpl.n	800237a <__sflush_r+0x42>
 800236e:	6863      	ldr	r3, [r4, #4]
 8002370:	1ac0      	subs	r0, r0, r3
 8002372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002374:	b10b      	cbz	r3, 800237a <__sflush_r+0x42>
 8002376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002378:	1ac0      	subs	r0, r0, r3
 800237a:	2300      	movs	r3, #0
 800237c:	4602      	mov	r2, r0
 800237e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002380:	6a21      	ldr	r1, [r4, #32]
 8002382:	4628      	mov	r0, r5
 8002384:	47b0      	blx	r6
 8002386:	1c43      	adds	r3, r0, #1
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	d106      	bne.n	800239a <__sflush_r+0x62>
 800238c:	6829      	ldr	r1, [r5, #0]
 800238e:	291d      	cmp	r1, #29
 8002390:	d82c      	bhi.n	80023ec <__sflush_r+0xb4>
 8002392:	4a29      	ldr	r2, [pc, #164]	; (8002438 <__sflush_r+0x100>)
 8002394:	40ca      	lsrs	r2, r1
 8002396:	07d6      	lsls	r6, r2, #31
 8002398:	d528      	bpl.n	80023ec <__sflush_r+0xb4>
 800239a:	2200      	movs	r2, #0
 800239c:	6062      	str	r2, [r4, #4]
 800239e:	04d9      	lsls	r1, r3, #19
 80023a0:	6922      	ldr	r2, [r4, #16]
 80023a2:	6022      	str	r2, [r4, #0]
 80023a4:	d504      	bpl.n	80023b0 <__sflush_r+0x78>
 80023a6:	1c42      	adds	r2, r0, #1
 80023a8:	d101      	bne.n	80023ae <__sflush_r+0x76>
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	b903      	cbnz	r3, 80023b0 <__sflush_r+0x78>
 80023ae:	6560      	str	r0, [r4, #84]	; 0x54
 80023b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023b2:	602f      	str	r7, [r5, #0]
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d0cb      	beq.n	8002350 <__sflush_r+0x18>
 80023b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023bc:	4299      	cmp	r1, r3
 80023be:	d002      	beq.n	80023c6 <__sflush_r+0x8e>
 80023c0:	4628      	mov	r0, r5
 80023c2:	f7ff fd25 	bl	8001e10 <_free_r>
 80023c6:	2000      	movs	r0, #0
 80023c8:	6360      	str	r0, [r4, #52]	; 0x34
 80023ca:	e7c2      	b.n	8002352 <__sflush_r+0x1a>
 80023cc:	6a21      	ldr	r1, [r4, #32]
 80023ce:	2301      	movs	r3, #1
 80023d0:	4628      	mov	r0, r5
 80023d2:	47b0      	blx	r6
 80023d4:	1c41      	adds	r1, r0, #1
 80023d6:	d1c7      	bne.n	8002368 <__sflush_r+0x30>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0c4      	beq.n	8002368 <__sflush_r+0x30>
 80023de:	2b1d      	cmp	r3, #29
 80023e0:	d001      	beq.n	80023e6 <__sflush_r+0xae>
 80023e2:	2b16      	cmp	r3, #22
 80023e4:	d101      	bne.n	80023ea <__sflush_r+0xb2>
 80023e6:	602f      	str	r7, [r5, #0]
 80023e8:	e7b2      	b.n	8002350 <__sflush_r+0x18>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	e7ae      	b.n	8002352 <__sflush_r+0x1a>
 80023f4:	690f      	ldr	r7, [r1, #16]
 80023f6:	2f00      	cmp	r7, #0
 80023f8:	d0aa      	beq.n	8002350 <__sflush_r+0x18>
 80023fa:	0793      	lsls	r3, r2, #30
 80023fc:	680e      	ldr	r6, [r1, #0]
 80023fe:	bf08      	it	eq
 8002400:	694b      	ldreq	r3, [r1, #20]
 8002402:	600f      	str	r7, [r1, #0]
 8002404:	bf18      	it	ne
 8002406:	2300      	movne	r3, #0
 8002408:	1bf6      	subs	r6, r6, r7
 800240a:	608b      	str	r3, [r1, #8]
 800240c:	2e00      	cmp	r6, #0
 800240e:	dd9f      	ble.n	8002350 <__sflush_r+0x18>
 8002410:	6a21      	ldr	r1, [r4, #32]
 8002412:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002416:	4633      	mov	r3, r6
 8002418:	463a      	mov	r2, r7
 800241a:	4628      	mov	r0, r5
 800241c:	47e0      	blx	ip
 800241e:	2800      	cmp	r0, #0
 8002420:	dc06      	bgt.n	8002430 <__sflush_r+0xf8>
 8002422:	89a3      	ldrh	r3, [r4, #12]
 8002424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002428:	81a3      	strh	r3, [r4, #12]
 800242a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800242e:	e790      	b.n	8002352 <__sflush_r+0x1a>
 8002430:	4407      	add	r7, r0
 8002432:	1a36      	subs	r6, r6, r0
 8002434:	e7ea      	b.n	800240c <__sflush_r+0xd4>
 8002436:	bf00      	nop
 8002438:	20400001 	.word	0x20400001

0800243c <_fflush_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	690b      	ldr	r3, [r1, #16]
 8002440:	4605      	mov	r5, r0
 8002442:	460c      	mov	r4, r1
 8002444:	b913      	cbnz	r3, 800244c <_fflush_r+0x10>
 8002446:	2500      	movs	r5, #0
 8002448:	4628      	mov	r0, r5
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	b118      	cbz	r0, 8002456 <_fflush_r+0x1a>
 800244e:	6983      	ldr	r3, [r0, #24]
 8002450:	b90b      	cbnz	r3, 8002456 <_fflush_r+0x1a>
 8002452:	f000 f887 	bl	8002564 <__sinit>
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <_fflush_r+0x6c>)
 8002458:	429c      	cmp	r4, r3
 800245a:	d11b      	bne.n	8002494 <_fflush_r+0x58>
 800245c:	686c      	ldr	r4, [r5, #4]
 800245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ef      	beq.n	8002446 <_fflush_r+0xa>
 8002466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002468:	07d0      	lsls	r0, r2, #31
 800246a:	d404      	bmi.n	8002476 <_fflush_r+0x3a>
 800246c:	0599      	lsls	r1, r3, #22
 800246e:	d402      	bmi.n	8002476 <_fflush_r+0x3a>
 8002470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002472:	f000 f915 	bl	80026a0 <__retarget_lock_acquire_recursive>
 8002476:	4628      	mov	r0, r5
 8002478:	4621      	mov	r1, r4
 800247a:	f7ff ff5d 	bl	8002338 <__sflush_r>
 800247e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002480:	07da      	lsls	r2, r3, #31
 8002482:	4605      	mov	r5, r0
 8002484:	d4e0      	bmi.n	8002448 <_fflush_r+0xc>
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	059b      	lsls	r3, r3, #22
 800248a:	d4dd      	bmi.n	8002448 <_fflush_r+0xc>
 800248c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800248e:	f000 f908 	bl	80026a2 <__retarget_lock_release_recursive>
 8002492:	e7d9      	b.n	8002448 <_fflush_r+0xc>
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <_fflush_r+0x70>)
 8002496:	429c      	cmp	r4, r3
 8002498:	d101      	bne.n	800249e <_fflush_r+0x62>
 800249a:	68ac      	ldr	r4, [r5, #8]
 800249c:	e7df      	b.n	800245e <_fflush_r+0x22>
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <_fflush_r+0x74>)
 80024a0:	429c      	cmp	r4, r3
 80024a2:	bf08      	it	eq
 80024a4:	68ec      	ldreq	r4, [r5, #12]
 80024a6:	e7da      	b.n	800245e <_fflush_r+0x22>
 80024a8:	08002f74 	.word	0x08002f74
 80024ac:	08002f94 	.word	0x08002f94
 80024b0:	08002f54 	.word	0x08002f54

080024b4 <std>:
 80024b4:	2300      	movs	r3, #0
 80024b6:	b510      	push	{r4, lr}
 80024b8:	4604      	mov	r4, r0
 80024ba:	e9c0 3300 	strd	r3, r3, [r0]
 80024be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024c2:	6083      	str	r3, [r0, #8]
 80024c4:	8181      	strh	r1, [r0, #12]
 80024c6:	6643      	str	r3, [r0, #100]	; 0x64
 80024c8:	81c2      	strh	r2, [r0, #14]
 80024ca:	6183      	str	r3, [r0, #24]
 80024cc:	4619      	mov	r1, r3
 80024ce:	2208      	movs	r2, #8
 80024d0:	305c      	adds	r0, #92	; 0x5c
 80024d2:	f7ff fc95 	bl	8001e00 <memset>
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <std+0x38>)
 80024d8:	6263      	str	r3, [r4, #36]	; 0x24
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <std+0x3c>)
 80024dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <std+0x40>)
 80024e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <std+0x44>)
 80024e4:	6224      	str	r4, [r4, #32]
 80024e6:	6323      	str	r3, [r4, #48]	; 0x30
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	bf00      	nop
 80024ec:	08002d61 	.word	0x08002d61
 80024f0:	08002d83 	.word	0x08002d83
 80024f4:	08002dbb 	.word	0x08002dbb
 80024f8:	08002ddf 	.word	0x08002ddf

080024fc <_cleanup_r>:
 80024fc:	4901      	ldr	r1, [pc, #4]	; (8002504 <_cleanup_r+0x8>)
 80024fe:	f000 b8af 	b.w	8002660 <_fwalk_reent>
 8002502:	bf00      	nop
 8002504:	0800243d 	.word	0x0800243d

08002508 <__sfmoreglue>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2268      	movs	r2, #104	; 0x68
 800250c:	1e4d      	subs	r5, r1, #1
 800250e:	4355      	muls	r5, r2
 8002510:	460e      	mov	r6, r1
 8002512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002516:	f7ff fce5 	bl	8001ee4 <_malloc_r>
 800251a:	4604      	mov	r4, r0
 800251c:	b140      	cbz	r0, 8002530 <__sfmoreglue+0x28>
 800251e:	2100      	movs	r1, #0
 8002520:	e9c0 1600 	strd	r1, r6, [r0]
 8002524:	300c      	adds	r0, #12
 8002526:	60a0      	str	r0, [r4, #8]
 8002528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800252c:	f7ff fc68 	bl	8001e00 <memset>
 8002530:	4620      	mov	r0, r4
 8002532:	bd70      	pop	{r4, r5, r6, pc}

08002534 <__sfp_lock_acquire>:
 8002534:	4801      	ldr	r0, [pc, #4]	; (800253c <__sfp_lock_acquire+0x8>)
 8002536:	f000 b8b3 	b.w	80026a0 <__retarget_lock_acquire_recursive>
 800253a:	bf00      	nop
 800253c:	200000e5 	.word	0x200000e5

08002540 <__sfp_lock_release>:
 8002540:	4801      	ldr	r0, [pc, #4]	; (8002548 <__sfp_lock_release+0x8>)
 8002542:	f000 b8ae 	b.w	80026a2 <__retarget_lock_release_recursive>
 8002546:	bf00      	nop
 8002548:	200000e5 	.word	0x200000e5

0800254c <__sinit_lock_acquire>:
 800254c:	4801      	ldr	r0, [pc, #4]	; (8002554 <__sinit_lock_acquire+0x8>)
 800254e:	f000 b8a7 	b.w	80026a0 <__retarget_lock_acquire_recursive>
 8002552:	bf00      	nop
 8002554:	200000e6 	.word	0x200000e6

08002558 <__sinit_lock_release>:
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <__sinit_lock_release+0x8>)
 800255a:	f000 b8a2 	b.w	80026a2 <__retarget_lock_release_recursive>
 800255e:	bf00      	nop
 8002560:	200000e6 	.word	0x200000e6

08002564 <__sinit>:
 8002564:	b510      	push	{r4, lr}
 8002566:	4604      	mov	r4, r0
 8002568:	f7ff fff0 	bl	800254c <__sinit_lock_acquire>
 800256c:	69a3      	ldr	r3, [r4, #24]
 800256e:	b11b      	cbz	r3, 8002578 <__sinit+0x14>
 8002570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002574:	f7ff bff0 	b.w	8002558 <__sinit_lock_release>
 8002578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800257c:	6523      	str	r3, [r4, #80]	; 0x50
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <__sinit+0x68>)
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <__sinit+0x6c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	62a2      	str	r2, [r4, #40]	; 0x28
 8002586:	42a3      	cmp	r3, r4
 8002588:	bf04      	itt	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	61a3      	streq	r3, [r4, #24]
 800258e:	4620      	mov	r0, r4
 8002590:	f000 f820 	bl	80025d4 <__sfp>
 8002594:	6060      	str	r0, [r4, #4]
 8002596:	4620      	mov	r0, r4
 8002598:	f000 f81c 	bl	80025d4 <__sfp>
 800259c:	60a0      	str	r0, [r4, #8]
 800259e:	4620      	mov	r0, r4
 80025a0:	f000 f818 	bl	80025d4 <__sfp>
 80025a4:	2200      	movs	r2, #0
 80025a6:	60e0      	str	r0, [r4, #12]
 80025a8:	2104      	movs	r1, #4
 80025aa:	6860      	ldr	r0, [r4, #4]
 80025ac:	f7ff ff82 	bl	80024b4 <std>
 80025b0:	68a0      	ldr	r0, [r4, #8]
 80025b2:	2201      	movs	r2, #1
 80025b4:	2109      	movs	r1, #9
 80025b6:	f7ff ff7d 	bl	80024b4 <std>
 80025ba:	68e0      	ldr	r0, [r4, #12]
 80025bc:	2202      	movs	r2, #2
 80025be:	2112      	movs	r1, #18
 80025c0:	f7ff ff78 	bl	80024b4 <std>
 80025c4:	2301      	movs	r3, #1
 80025c6:	61a3      	str	r3, [r4, #24]
 80025c8:	e7d2      	b.n	8002570 <__sinit+0xc>
 80025ca:	bf00      	nop
 80025cc:	08002f50 	.word	0x08002f50
 80025d0:	080024fd 	.word	0x080024fd

080025d4 <__sfp>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	4607      	mov	r7, r0
 80025d8:	f7ff ffac 	bl	8002534 <__sfp_lock_acquire>
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <__sfp+0x84>)
 80025de:	681e      	ldr	r6, [r3, #0]
 80025e0:	69b3      	ldr	r3, [r6, #24]
 80025e2:	b913      	cbnz	r3, 80025ea <__sfp+0x16>
 80025e4:	4630      	mov	r0, r6
 80025e6:	f7ff ffbd 	bl	8002564 <__sinit>
 80025ea:	3648      	adds	r6, #72	; 0x48
 80025ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	d503      	bpl.n	80025fc <__sfp+0x28>
 80025f4:	6833      	ldr	r3, [r6, #0]
 80025f6:	b30b      	cbz	r3, 800263c <__sfp+0x68>
 80025f8:	6836      	ldr	r6, [r6, #0]
 80025fa:	e7f7      	b.n	80025ec <__sfp+0x18>
 80025fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002600:	b9d5      	cbnz	r5, 8002638 <__sfp+0x64>
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <__sfp+0x88>)
 8002604:	60e3      	str	r3, [r4, #12]
 8002606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800260a:	6665      	str	r5, [r4, #100]	; 0x64
 800260c:	f000 f847 	bl	800269e <__retarget_lock_init_recursive>
 8002610:	f7ff ff96 	bl	8002540 <__sfp_lock_release>
 8002614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800261c:	6025      	str	r5, [r4, #0]
 800261e:	61a5      	str	r5, [r4, #24]
 8002620:	2208      	movs	r2, #8
 8002622:	4629      	mov	r1, r5
 8002624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002628:	f7ff fbea 	bl	8001e00 <memset>
 800262c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002634:	4620      	mov	r0, r4
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002638:	3468      	adds	r4, #104	; 0x68
 800263a:	e7d9      	b.n	80025f0 <__sfp+0x1c>
 800263c:	2104      	movs	r1, #4
 800263e:	4638      	mov	r0, r7
 8002640:	f7ff ff62 	bl	8002508 <__sfmoreglue>
 8002644:	4604      	mov	r4, r0
 8002646:	6030      	str	r0, [r6, #0]
 8002648:	2800      	cmp	r0, #0
 800264a:	d1d5      	bne.n	80025f8 <__sfp+0x24>
 800264c:	f7ff ff78 	bl	8002540 <__sfp_lock_release>
 8002650:	230c      	movs	r3, #12
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e7ee      	b.n	8002634 <__sfp+0x60>
 8002656:	bf00      	nop
 8002658:	08002f50 	.word	0x08002f50
 800265c:	ffff0001 	.word	0xffff0001

08002660 <_fwalk_reent>:
 8002660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002664:	4606      	mov	r6, r0
 8002666:	4688      	mov	r8, r1
 8002668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800266c:	2700      	movs	r7, #0
 800266e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002672:	f1b9 0901 	subs.w	r9, r9, #1
 8002676:	d505      	bpl.n	8002684 <_fwalk_reent+0x24>
 8002678:	6824      	ldr	r4, [r4, #0]
 800267a:	2c00      	cmp	r4, #0
 800267c:	d1f7      	bne.n	800266e <_fwalk_reent+0xe>
 800267e:	4638      	mov	r0, r7
 8002680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002684:	89ab      	ldrh	r3, [r5, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d907      	bls.n	800269a <_fwalk_reent+0x3a>
 800268a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800268e:	3301      	adds	r3, #1
 8002690:	d003      	beq.n	800269a <_fwalk_reent+0x3a>
 8002692:	4629      	mov	r1, r5
 8002694:	4630      	mov	r0, r6
 8002696:	47c0      	blx	r8
 8002698:	4307      	orrs	r7, r0
 800269a:	3568      	adds	r5, #104	; 0x68
 800269c:	e7e9      	b.n	8002672 <_fwalk_reent+0x12>

0800269e <__retarget_lock_init_recursive>:
 800269e:	4770      	bx	lr

080026a0 <__retarget_lock_acquire_recursive>:
 80026a0:	4770      	bx	lr

080026a2 <__retarget_lock_release_recursive>:
 80026a2:	4770      	bx	lr

080026a4 <__swhatbuf_r>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	460e      	mov	r6, r1
 80026a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ac:	2900      	cmp	r1, #0
 80026ae:	b096      	sub	sp, #88	; 0x58
 80026b0:	4614      	mov	r4, r2
 80026b2:	461d      	mov	r5, r3
 80026b4:	da08      	bge.n	80026c8 <__swhatbuf_r+0x24>
 80026b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	602a      	str	r2, [r5, #0]
 80026be:	061a      	lsls	r2, r3, #24
 80026c0:	d410      	bmi.n	80026e4 <__swhatbuf_r+0x40>
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	e00e      	b.n	80026e6 <__swhatbuf_r+0x42>
 80026c8:	466a      	mov	r2, sp
 80026ca:	f000 fbaf 	bl	8002e2c <_fstat_r>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	dbf1      	blt.n	80026b6 <__swhatbuf_r+0x12>
 80026d2:	9a01      	ldr	r2, [sp, #4]
 80026d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026dc:	425a      	negs	r2, r3
 80026de:	415a      	adcs	r2, r3
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	e7ee      	b.n	80026c2 <__swhatbuf_r+0x1e>
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	2000      	movs	r0, #0
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	b016      	add	sp, #88	; 0x58
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080026f0 <__smakebuf_r>:
 80026f0:	898b      	ldrh	r3, [r1, #12]
 80026f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026f4:	079d      	lsls	r5, r3, #30
 80026f6:	4606      	mov	r6, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	d507      	bpl.n	800270c <__smakebuf_r+0x1c>
 80026fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	6123      	str	r3, [r4, #16]
 8002704:	2301      	movs	r3, #1
 8002706:	6163      	str	r3, [r4, #20]
 8002708:	b002      	add	sp, #8
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	ab01      	add	r3, sp, #4
 800270e:	466a      	mov	r2, sp
 8002710:	f7ff ffc8 	bl	80026a4 <__swhatbuf_r>
 8002714:	9900      	ldr	r1, [sp, #0]
 8002716:	4605      	mov	r5, r0
 8002718:	4630      	mov	r0, r6
 800271a:	f7ff fbe3 	bl	8001ee4 <_malloc_r>
 800271e:	b948      	cbnz	r0, 8002734 <__smakebuf_r+0x44>
 8002720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002724:	059a      	lsls	r2, r3, #22
 8002726:	d4ef      	bmi.n	8002708 <__smakebuf_r+0x18>
 8002728:	f023 0303 	bic.w	r3, r3, #3
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	81a3      	strh	r3, [r4, #12]
 8002732:	e7e3      	b.n	80026fc <__smakebuf_r+0xc>
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <__smakebuf_r+0x7c>)
 8002736:	62b3      	str	r3, [r6, #40]	; 0x28
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	6020      	str	r0, [r4, #0]
 800273c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002740:	81a3      	strh	r3, [r4, #12]
 8002742:	9b00      	ldr	r3, [sp, #0]
 8002744:	6163      	str	r3, [r4, #20]
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	6120      	str	r0, [r4, #16]
 800274a:	b15b      	cbz	r3, 8002764 <__smakebuf_r+0x74>
 800274c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fb7d 	bl	8002e50 <_isatty_r>
 8002756:	b128      	cbz	r0, 8002764 <__smakebuf_r+0x74>
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	81a3      	strh	r3, [r4, #12]
 8002764:	89a0      	ldrh	r0, [r4, #12]
 8002766:	4305      	orrs	r5, r0
 8002768:	81a5      	strh	r5, [r4, #12]
 800276a:	e7cd      	b.n	8002708 <__smakebuf_r+0x18>
 800276c:	080024fd 	.word	0x080024fd

08002770 <__malloc_lock>:
 8002770:	4801      	ldr	r0, [pc, #4]	; (8002778 <__malloc_lock+0x8>)
 8002772:	f7ff bf95 	b.w	80026a0 <__retarget_lock_acquire_recursive>
 8002776:	bf00      	nop
 8002778:	200000e4 	.word	0x200000e4

0800277c <__malloc_unlock>:
 800277c:	4801      	ldr	r0, [pc, #4]	; (8002784 <__malloc_unlock+0x8>)
 800277e:	f7ff bf90 	b.w	80026a2 <__retarget_lock_release_recursive>
 8002782:	bf00      	nop
 8002784:	200000e4 	.word	0x200000e4

08002788 <__sfputc_r>:
 8002788:	6893      	ldr	r3, [r2, #8]
 800278a:	3b01      	subs	r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	b410      	push	{r4}
 8002790:	6093      	str	r3, [r2, #8]
 8002792:	da07      	bge.n	80027a4 <__sfputc_r+0x1c>
 8002794:	6994      	ldr	r4, [r2, #24]
 8002796:	42a3      	cmp	r3, r4
 8002798:	db01      	blt.n	800279e <__sfputc_r+0x16>
 800279a:	290a      	cmp	r1, #10
 800279c:	d102      	bne.n	80027a4 <__sfputc_r+0x1c>
 800279e:	bc10      	pop	{r4}
 80027a0:	f7ff bd0a 	b.w	80021b8 <__swbuf_r>
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	1c58      	adds	r0, r3, #1
 80027a8:	6010      	str	r0, [r2, #0]
 80027aa:	7019      	strb	r1, [r3, #0]
 80027ac:	4608      	mov	r0, r1
 80027ae:	bc10      	pop	{r4}
 80027b0:	4770      	bx	lr

080027b2 <__sfputs_r>:
 80027b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b4:	4606      	mov	r6, r0
 80027b6:	460f      	mov	r7, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	18d5      	adds	r5, r2, r3
 80027bc:	42ac      	cmp	r4, r5
 80027be:	d101      	bne.n	80027c4 <__sfputs_r+0x12>
 80027c0:	2000      	movs	r0, #0
 80027c2:	e007      	b.n	80027d4 <__sfputs_r+0x22>
 80027c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c8:	463a      	mov	r2, r7
 80027ca:	4630      	mov	r0, r6
 80027cc:	f7ff ffdc 	bl	8002788 <__sfputc_r>
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	d1f3      	bne.n	80027bc <__sfputs_r+0xa>
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027d8 <_vfiprintf_r>:
 80027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027dc:	460d      	mov	r5, r1
 80027de:	b09d      	sub	sp, #116	; 0x74
 80027e0:	4614      	mov	r4, r2
 80027e2:	4698      	mov	r8, r3
 80027e4:	4606      	mov	r6, r0
 80027e6:	b118      	cbz	r0, 80027f0 <_vfiprintf_r+0x18>
 80027e8:	6983      	ldr	r3, [r0, #24]
 80027ea:	b90b      	cbnz	r3, 80027f0 <_vfiprintf_r+0x18>
 80027ec:	f7ff feba 	bl	8002564 <__sinit>
 80027f0:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <_vfiprintf_r+0x240>)
 80027f2:	429d      	cmp	r5, r3
 80027f4:	d11b      	bne.n	800282e <_vfiprintf_r+0x56>
 80027f6:	6875      	ldr	r5, [r6, #4]
 80027f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027fa:	07d9      	lsls	r1, r3, #31
 80027fc:	d405      	bmi.n	800280a <_vfiprintf_r+0x32>
 80027fe:	89ab      	ldrh	r3, [r5, #12]
 8002800:	059a      	lsls	r2, r3, #22
 8002802:	d402      	bmi.n	800280a <_vfiprintf_r+0x32>
 8002804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002806:	f7ff ff4b 	bl	80026a0 <__retarget_lock_acquire_recursive>
 800280a:	89ab      	ldrh	r3, [r5, #12]
 800280c:	071b      	lsls	r3, r3, #28
 800280e:	d501      	bpl.n	8002814 <_vfiprintf_r+0x3c>
 8002810:	692b      	ldr	r3, [r5, #16]
 8002812:	b9eb      	cbnz	r3, 8002850 <_vfiprintf_r+0x78>
 8002814:	4629      	mov	r1, r5
 8002816:	4630      	mov	r0, r6
 8002818:	f7ff fd20 	bl	800225c <__swsetup_r>
 800281c:	b1c0      	cbz	r0, 8002850 <_vfiprintf_r+0x78>
 800281e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002820:	07dc      	lsls	r4, r3, #31
 8002822:	d50e      	bpl.n	8002842 <_vfiprintf_r+0x6a>
 8002824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002828:	b01d      	add	sp, #116	; 0x74
 800282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <_vfiprintf_r+0x244>)
 8002830:	429d      	cmp	r5, r3
 8002832:	d101      	bne.n	8002838 <_vfiprintf_r+0x60>
 8002834:	68b5      	ldr	r5, [r6, #8]
 8002836:	e7df      	b.n	80027f8 <_vfiprintf_r+0x20>
 8002838:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <_vfiprintf_r+0x248>)
 800283a:	429d      	cmp	r5, r3
 800283c:	bf08      	it	eq
 800283e:	68f5      	ldreq	r5, [r6, #12]
 8002840:	e7da      	b.n	80027f8 <_vfiprintf_r+0x20>
 8002842:	89ab      	ldrh	r3, [r5, #12]
 8002844:	0598      	lsls	r0, r3, #22
 8002846:	d4ed      	bmi.n	8002824 <_vfiprintf_r+0x4c>
 8002848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800284a:	f7ff ff2a 	bl	80026a2 <__retarget_lock_release_recursive>
 800284e:	e7e9      	b.n	8002824 <_vfiprintf_r+0x4c>
 8002850:	2300      	movs	r3, #0
 8002852:	9309      	str	r3, [sp, #36]	; 0x24
 8002854:	2320      	movs	r3, #32
 8002856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800285a:	f8cd 800c 	str.w	r8, [sp, #12]
 800285e:	2330      	movs	r3, #48	; 0x30
 8002860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a24 <_vfiprintf_r+0x24c>
 8002864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002868:	f04f 0901 	mov.w	r9, #1
 800286c:	4623      	mov	r3, r4
 800286e:	469a      	mov	sl, r3
 8002870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002874:	b10a      	cbz	r2, 800287a <_vfiprintf_r+0xa2>
 8002876:	2a25      	cmp	r2, #37	; 0x25
 8002878:	d1f9      	bne.n	800286e <_vfiprintf_r+0x96>
 800287a:	ebba 0b04 	subs.w	fp, sl, r4
 800287e:	d00b      	beq.n	8002898 <_vfiprintf_r+0xc0>
 8002880:	465b      	mov	r3, fp
 8002882:	4622      	mov	r2, r4
 8002884:	4629      	mov	r1, r5
 8002886:	4630      	mov	r0, r6
 8002888:	f7ff ff93 	bl	80027b2 <__sfputs_r>
 800288c:	3001      	adds	r0, #1
 800288e:	f000 80aa 	beq.w	80029e6 <_vfiprintf_r+0x20e>
 8002892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002894:	445a      	add	r2, fp
 8002896:	9209      	str	r2, [sp, #36]	; 0x24
 8002898:	f89a 3000 	ldrb.w	r3, [sl]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a2 	beq.w	80029e6 <_vfiprintf_r+0x20e>
 80028a2:	2300      	movs	r3, #0
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028ac:	f10a 0a01 	add.w	sl, sl, #1
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	9307      	str	r3, [sp, #28]
 80028b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028b8:	931a      	str	r3, [sp, #104]	; 0x68
 80028ba:	4654      	mov	r4, sl
 80028bc:	2205      	movs	r2, #5
 80028be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028c2:	4858      	ldr	r0, [pc, #352]	; (8002a24 <_vfiprintf_r+0x24c>)
 80028c4:	f7fd fc94 	bl	80001f0 <memchr>
 80028c8:	9a04      	ldr	r2, [sp, #16]
 80028ca:	b9d8      	cbnz	r0, 8002904 <_vfiprintf_r+0x12c>
 80028cc:	06d1      	lsls	r1, r2, #27
 80028ce:	bf44      	itt	mi
 80028d0:	2320      	movmi	r3, #32
 80028d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d6:	0713      	lsls	r3, r2, #28
 80028d8:	bf44      	itt	mi
 80028da:	232b      	movmi	r3, #43	; 0x2b
 80028dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028e0:	f89a 3000 	ldrb.w	r3, [sl]
 80028e4:	2b2a      	cmp	r3, #42	; 0x2a
 80028e6:	d015      	beq.n	8002914 <_vfiprintf_r+0x13c>
 80028e8:	9a07      	ldr	r2, [sp, #28]
 80028ea:	4654      	mov	r4, sl
 80028ec:	2000      	movs	r0, #0
 80028ee:	f04f 0c0a 	mov.w	ip, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f8:	3b30      	subs	r3, #48	; 0x30
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	d94e      	bls.n	800299c <_vfiprintf_r+0x1c4>
 80028fe:	b1b0      	cbz	r0, 800292e <_vfiprintf_r+0x156>
 8002900:	9207      	str	r2, [sp, #28]
 8002902:	e014      	b.n	800292e <_vfiprintf_r+0x156>
 8002904:	eba0 0308 	sub.w	r3, r0, r8
 8002908:	fa09 f303 	lsl.w	r3, r9, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	9304      	str	r3, [sp, #16]
 8002910:	46a2      	mov	sl, r4
 8002912:	e7d2      	b.n	80028ba <_vfiprintf_r+0xe2>
 8002914:	9b03      	ldr	r3, [sp, #12]
 8002916:	1d19      	adds	r1, r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	9103      	str	r1, [sp, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	bfbb      	ittet	lt
 8002920:	425b      	neglt	r3, r3
 8002922:	f042 0202 	orrlt.w	r2, r2, #2
 8002926:	9307      	strge	r3, [sp, #28]
 8002928:	9307      	strlt	r3, [sp, #28]
 800292a:	bfb8      	it	lt
 800292c:	9204      	strlt	r2, [sp, #16]
 800292e:	7823      	ldrb	r3, [r4, #0]
 8002930:	2b2e      	cmp	r3, #46	; 0x2e
 8002932:	d10c      	bne.n	800294e <_vfiprintf_r+0x176>
 8002934:	7863      	ldrb	r3, [r4, #1]
 8002936:	2b2a      	cmp	r3, #42	; 0x2a
 8002938:	d135      	bne.n	80029a6 <_vfiprintf_r+0x1ce>
 800293a:	9b03      	ldr	r3, [sp, #12]
 800293c:	1d1a      	adds	r2, r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	9203      	str	r2, [sp, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfb8      	it	lt
 8002946:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800294a:	3402      	adds	r4, #2
 800294c:	9305      	str	r3, [sp, #20]
 800294e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a28 <_vfiprintf_r+0x250>
 8002952:	7821      	ldrb	r1, [r4, #0]
 8002954:	2203      	movs	r2, #3
 8002956:	4650      	mov	r0, sl
 8002958:	f7fd fc4a 	bl	80001f0 <memchr>
 800295c:	b140      	cbz	r0, 8002970 <_vfiprintf_r+0x198>
 800295e:	2340      	movs	r3, #64	; 0x40
 8002960:	eba0 000a 	sub.w	r0, r0, sl
 8002964:	fa03 f000 	lsl.w	r0, r3, r0
 8002968:	9b04      	ldr	r3, [sp, #16]
 800296a:	4303      	orrs	r3, r0
 800296c:	3401      	adds	r4, #1
 800296e:	9304      	str	r3, [sp, #16]
 8002970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002974:	482d      	ldr	r0, [pc, #180]	; (8002a2c <_vfiprintf_r+0x254>)
 8002976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800297a:	2206      	movs	r2, #6
 800297c:	f7fd fc38 	bl	80001f0 <memchr>
 8002980:	2800      	cmp	r0, #0
 8002982:	d03f      	beq.n	8002a04 <_vfiprintf_r+0x22c>
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <_vfiprintf_r+0x258>)
 8002986:	bb1b      	cbnz	r3, 80029d0 <_vfiprintf_r+0x1f8>
 8002988:	9b03      	ldr	r3, [sp, #12]
 800298a:	3307      	adds	r3, #7
 800298c:	f023 0307 	bic.w	r3, r3, #7
 8002990:	3308      	adds	r3, #8
 8002992:	9303      	str	r3, [sp, #12]
 8002994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002996:	443b      	add	r3, r7
 8002998:	9309      	str	r3, [sp, #36]	; 0x24
 800299a:	e767      	b.n	800286c <_vfiprintf_r+0x94>
 800299c:	fb0c 3202 	mla	r2, ip, r2, r3
 80029a0:	460c      	mov	r4, r1
 80029a2:	2001      	movs	r0, #1
 80029a4:	e7a5      	b.n	80028f2 <_vfiprintf_r+0x11a>
 80029a6:	2300      	movs	r3, #0
 80029a8:	3401      	adds	r4, #1
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0c0a 	mov.w	ip, #10
 80029b2:	4620      	mov	r0, r4
 80029b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b8:	3a30      	subs	r2, #48	; 0x30
 80029ba:	2a09      	cmp	r2, #9
 80029bc:	d903      	bls.n	80029c6 <_vfiprintf_r+0x1ee>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0c5      	beq.n	800294e <_vfiprintf_r+0x176>
 80029c2:	9105      	str	r1, [sp, #20]
 80029c4:	e7c3      	b.n	800294e <_vfiprintf_r+0x176>
 80029c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80029ca:	4604      	mov	r4, r0
 80029cc:	2301      	movs	r3, #1
 80029ce:	e7f0      	b.n	80029b2 <_vfiprintf_r+0x1da>
 80029d0:	ab03      	add	r3, sp, #12
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	462a      	mov	r2, r5
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <_vfiprintf_r+0x25c>)
 80029d8:	a904      	add	r1, sp, #16
 80029da:	4630      	mov	r0, r6
 80029dc:	f3af 8000 	nop.w
 80029e0:	4607      	mov	r7, r0
 80029e2:	1c78      	adds	r0, r7, #1
 80029e4:	d1d6      	bne.n	8002994 <_vfiprintf_r+0x1bc>
 80029e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029e8:	07d9      	lsls	r1, r3, #31
 80029ea:	d405      	bmi.n	80029f8 <_vfiprintf_r+0x220>
 80029ec:	89ab      	ldrh	r3, [r5, #12]
 80029ee:	059a      	lsls	r2, r3, #22
 80029f0:	d402      	bmi.n	80029f8 <_vfiprintf_r+0x220>
 80029f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029f4:	f7ff fe55 	bl	80026a2 <__retarget_lock_release_recursive>
 80029f8:	89ab      	ldrh	r3, [r5, #12]
 80029fa:	065b      	lsls	r3, r3, #25
 80029fc:	f53f af12 	bmi.w	8002824 <_vfiprintf_r+0x4c>
 8002a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a02:	e711      	b.n	8002828 <_vfiprintf_r+0x50>
 8002a04:	ab03      	add	r3, sp, #12
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	462a      	mov	r2, r5
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <_vfiprintf_r+0x25c>)
 8002a0c:	a904      	add	r1, sp, #16
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f000 f880 	bl	8002b14 <_printf_i>
 8002a14:	e7e4      	b.n	80029e0 <_vfiprintf_r+0x208>
 8002a16:	bf00      	nop
 8002a18:	08002f74 	.word	0x08002f74
 8002a1c:	08002f94 	.word	0x08002f94
 8002a20:	08002f54 	.word	0x08002f54
 8002a24:	08002fb4 	.word	0x08002fb4
 8002a28:	08002fba 	.word	0x08002fba
 8002a2c:	08002fbe 	.word	0x08002fbe
 8002a30:	00000000 	.word	0x00000000
 8002a34:	080027b3 	.word	0x080027b3

08002a38 <_printf_common>:
 8002a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3c:	4616      	mov	r6, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	688a      	ldr	r2, [r1, #8]
 8002a42:	690b      	ldr	r3, [r1, #16]
 8002a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bfb8      	it	lt
 8002a4c:	4613      	movlt	r3, r2
 8002a4e:	6033      	str	r3, [r6, #0]
 8002a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a54:	4607      	mov	r7, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	b10a      	cbz	r2, 8002a5e <_printf_common+0x26>
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	0699      	lsls	r1, r3, #26
 8002a62:	bf42      	ittt	mi
 8002a64:	6833      	ldrmi	r3, [r6, #0]
 8002a66:	3302      	addmi	r3, #2
 8002a68:	6033      	strmi	r3, [r6, #0]
 8002a6a:	6825      	ldr	r5, [r4, #0]
 8002a6c:	f015 0506 	ands.w	r5, r5, #6
 8002a70:	d106      	bne.n	8002a80 <_printf_common+0x48>
 8002a72:	f104 0a19 	add.w	sl, r4, #25
 8002a76:	68e3      	ldr	r3, [r4, #12]
 8002a78:	6832      	ldr	r2, [r6, #0]
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	dc26      	bgt.n	8002ace <_printf_common+0x96>
 8002a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a84:	1e13      	subs	r3, r2, #0
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	bf18      	it	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	0692      	lsls	r2, r2, #26
 8002a8e:	d42b      	bmi.n	8002ae8 <_printf_common+0xb0>
 8002a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a94:	4649      	mov	r1, r9
 8002a96:	4638      	mov	r0, r7
 8002a98:	47c0      	blx	r8
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d01e      	beq.n	8002adc <_printf_common+0xa4>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	68e5      	ldr	r5, [r4, #12]
 8002aa2:	6832      	ldr	r2, [r6, #0]
 8002aa4:	f003 0306 	and.w	r3, r3, #6
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	bf08      	it	eq
 8002aac:	1aad      	subeq	r5, r5, r2
 8002aae:	68a3      	ldr	r3, [r4, #8]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	bf0c      	ite	eq
 8002ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab8:	2500      	movne	r5, #0
 8002aba:	4293      	cmp	r3, r2
 8002abc:	bfc4      	itt	gt
 8002abe:	1a9b      	subgt	r3, r3, r2
 8002ac0:	18ed      	addgt	r5, r5, r3
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	341a      	adds	r4, #26
 8002ac6:	42b5      	cmp	r5, r6
 8002ac8:	d11a      	bne.n	8002b00 <_printf_common+0xc8>
 8002aca:	2000      	movs	r0, #0
 8002acc:	e008      	b.n	8002ae0 <_printf_common+0xa8>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4652      	mov	r2, sl
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	47c0      	blx	r8
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d103      	bne.n	8002ae4 <_printf_common+0xac>
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae4:	3501      	adds	r5, #1
 8002ae6:	e7c6      	b.n	8002a76 <_printf_common+0x3e>
 8002ae8:	18e1      	adds	r1, r4, r3
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	2030      	movs	r0, #48	; 0x30
 8002aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002af2:	4422      	add	r2, r4
 8002af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002afc:	3302      	adds	r3, #2
 8002afe:	e7c7      	b.n	8002a90 <_printf_common+0x58>
 8002b00:	2301      	movs	r3, #1
 8002b02:	4622      	mov	r2, r4
 8002b04:	4649      	mov	r1, r9
 8002b06:	4638      	mov	r0, r7
 8002b08:	47c0      	blx	r8
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d0e6      	beq.n	8002adc <_printf_common+0xa4>
 8002b0e:	3601      	adds	r6, #1
 8002b10:	e7d9      	b.n	8002ac6 <_printf_common+0x8e>
	...

08002b14 <_printf_i>:
 8002b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b18:	7e0f      	ldrb	r7, [r1, #24]
 8002b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b1c:	2f78      	cmp	r7, #120	; 0x78
 8002b1e:	4691      	mov	r9, r2
 8002b20:	4680      	mov	r8, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	469a      	mov	sl, r3
 8002b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b2a:	d807      	bhi.n	8002b3c <_printf_i+0x28>
 8002b2c:	2f62      	cmp	r7, #98	; 0x62
 8002b2e:	d80a      	bhi.n	8002b46 <_printf_i+0x32>
 8002b30:	2f00      	cmp	r7, #0
 8002b32:	f000 80d8 	beq.w	8002ce6 <_printf_i+0x1d2>
 8002b36:	2f58      	cmp	r7, #88	; 0x58
 8002b38:	f000 80a3 	beq.w	8002c82 <_printf_i+0x16e>
 8002b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b44:	e03a      	b.n	8002bbc <_printf_i+0xa8>
 8002b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b4a:	2b15      	cmp	r3, #21
 8002b4c:	d8f6      	bhi.n	8002b3c <_printf_i+0x28>
 8002b4e:	a101      	add	r1, pc, #4	; (adr r1, 8002b54 <_printf_i+0x40>)
 8002b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002bc1 	.word	0x08002bc1
 8002b5c:	08002b3d 	.word	0x08002b3d
 8002b60:	08002b3d 	.word	0x08002b3d
 8002b64:	08002b3d 	.word	0x08002b3d
 8002b68:	08002b3d 	.word	0x08002b3d
 8002b6c:	08002bc1 	.word	0x08002bc1
 8002b70:	08002b3d 	.word	0x08002b3d
 8002b74:	08002b3d 	.word	0x08002b3d
 8002b78:	08002b3d 	.word	0x08002b3d
 8002b7c:	08002b3d 	.word	0x08002b3d
 8002b80:	08002ccd 	.word	0x08002ccd
 8002b84:	08002bf1 	.word	0x08002bf1
 8002b88:	08002caf 	.word	0x08002caf
 8002b8c:	08002b3d 	.word	0x08002b3d
 8002b90:	08002b3d 	.word	0x08002b3d
 8002b94:	08002cef 	.word	0x08002cef
 8002b98:	08002b3d 	.word	0x08002b3d
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002b3d 	.word	0x08002b3d
 8002ba4:	08002b3d 	.word	0x08002b3d
 8002ba8:	08002cb7 	.word	0x08002cb7
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	602a      	str	r2, [r5, #0]
 8002bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0a3      	b.n	8002d08 <_printf_i+0x1f4>
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	6829      	ldr	r1, [r5, #0]
 8002bc4:	0606      	lsls	r6, r0, #24
 8002bc6:	f101 0304 	add.w	r3, r1, #4
 8002bca:	d50a      	bpl.n	8002be2 <_printf_i+0xce>
 8002bcc:	680e      	ldr	r6, [r1, #0]
 8002bce:	602b      	str	r3, [r5, #0]
 8002bd0:	2e00      	cmp	r6, #0
 8002bd2:	da03      	bge.n	8002bdc <_printf_i+0xc8>
 8002bd4:	232d      	movs	r3, #45	; 0x2d
 8002bd6:	4276      	negs	r6, r6
 8002bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bdc:	485e      	ldr	r0, [pc, #376]	; (8002d58 <_printf_i+0x244>)
 8002bde:	230a      	movs	r3, #10
 8002be0:	e019      	b.n	8002c16 <_printf_i+0x102>
 8002be2:	680e      	ldr	r6, [r1, #0]
 8002be4:	602b      	str	r3, [r5, #0]
 8002be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bea:	bf18      	it	ne
 8002bec:	b236      	sxthne	r6, r6
 8002bee:	e7ef      	b.n	8002bd0 <_printf_i+0xbc>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	1d19      	adds	r1, r3, #4
 8002bf6:	6029      	str	r1, [r5, #0]
 8002bf8:	0601      	lsls	r1, r0, #24
 8002bfa:	d501      	bpl.n	8002c00 <_printf_i+0xec>
 8002bfc:	681e      	ldr	r6, [r3, #0]
 8002bfe:	e002      	b.n	8002c06 <_printf_i+0xf2>
 8002c00:	0646      	lsls	r6, r0, #25
 8002c02:	d5fb      	bpl.n	8002bfc <_printf_i+0xe8>
 8002c04:	881e      	ldrh	r6, [r3, #0]
 8002c06:	4854      	ldr	r0, [pc, #336]	; (8002d58 <_printf_i+0x244>)
 8002c08:	2f6f      	cmp	r7, #111	; 0x6f
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2308      	moveq	r3, #8
 8002c0e:	230a      	movne	r3, #10
 8002c10:	2100      	movs	r1, #0
 8002c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c16:	6865      	ldr	r5, [r4, #4]
 8002c18:	60a5      	str	r5, [r4, #8]
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	bfa2      	ittt	ge
 8002c1e:	6821      	ldrge	r1, [r4, #0]
 8002c20:	f021 0104 	bicge.w	r1, r1, #4
 8002c24:	6021      	strge	r1, [r4, #0]
 8002c26:	b90e      	cbnz	r6, 8002c2c <_printf_i+0x118>
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	d04d      	beq.n	8002cc8 <_printf_i+0x1b4>
 8002c2c:	4615      	mov	r5, r2
 8002c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c32:	fb03 6711 	mls	r7, r3, r1, r6
 8002c36:	5dc7      	ldrb	r7, [r0, r7]
 8002c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c3c:	4637      	mov	r7, r6
 8002c3e:	42bb      	cmp	r3, r7
 8002c40:	460e      	mov	r6, r1
 8002c42:	d9f4      	bls.n	8002c2e <_printf_i+0x11a>
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d10b      	bne.n	8002c60 <_printf_i+0x14c>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	07de      	lsls	r6, r3, #31
 8002c4c:	d508      	bpl.n	8002c60 <_printf_i+0x14c>
 8002c4e:	6923      	ldr	r3, [r4, #16]
 8002c50:	6861      	ldr	r1, [r4, #4]
 8002c52:	4299      	cmp	r1, r3
 8002c54:	bfde      	ittt	le
 8002c56:	2330      	movle	r3, #48	; 0x30
 8002c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c60:	1b52      	subs	r2, r2, r5
 8002c62:	6122      	str	r2, [r4, #16]
 8002c64:	f8cd a000 	str.w	sl, [sp]
 8002c68:	464b      	mov	r3, r9
 8002c6a:	aa03      	add	r2, sp, #12
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4640      	mov	r0, r8
 8002c70:	f7ff fee2 	bl	8002a38 <_printf_common>
 8002c74:	3001      	adds	r0, #1
 8002c76:	d14c      	bne.n	8002d12 <_printf_i+0x1fe>
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c7c:	b004      	add	sp, #16
 8002c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c82:	4835      	ldr	r0, [pc, #212]	; (8002d58 <_printf_i+0x244>)
 8002c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c88:	6829      	ldr	r1, [r5, #0]
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c90:	6029      	str	r1, [r5, #0]
 8002c92:	061d      	lsls	r5, r3, #24
 8002c94:	d514      	bpl.n	8002cc0 <_printf_i+0x1ac>
 8002c96:	07df      	lsls	r7, r3, #31
 8002c98:	bf44      	itt	mi
 8002c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c9e:	6023      	strmi	r3, [r4, #0]
 8002ca0:	b91e      	cbnz	r6, 8002caa <_printf_i+0x196>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	f023 0320 	bic.w	r3, r3, #32
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	2310      	movs	r3, #16
 8002cac:	e7b0      	b.n	8002c10 <_printf_i+0xfc>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	2378      	movs	r3, #120	; 0x78
 8002cb8:	4828      	ldr	r0, [pc, #160]	; (8002d5c <_printf_i+0x248>)
 8002cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cbe:	e7e3      	b.n	8002c88 <_printf_i+0x174>
 8002cc0:	0659      	lsls	r1, r3, #25
 8002cc2:	bf48      	it	mi
 8002cc4:	b2b6      	uxthmi	r6, r6
 8002cc6:	e7e6      	b.n	8002c96 <_printf_i+0x182>
 8002cc8:	4615      	mov	r5, r2
 8002cca:	e7bb      	b.n	8002c44 <_printf_i+0x130>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	6826      	ldr	r6, [r4, #0]
 8002cd0:	6961      	ldr	r1, [r4, #20]
 8002cd2:	1d18      	adds	r0, r3, #4
 8002cd4:	6028      	str	r0, [r5, #0]
 8002cd6:	0635      	lsls	r5, r6, #24
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	d501      	bpl.n	8002ce0 <_printf_i+0x1cc>
 8002cdc:	6019      	str	r1, [r3, #0]
 8002cde:	e002      	b.n	8002ce6 <_printf_i+0x1d2>
 8002ce0:	0670      	lsls	r0, r6, #25
 8002ce2:	d5fb      	bpl.n	8002cdc <_printf_i+0x1c8>
 8002ce4:	8019      	strh	r1, [r3, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6123      	str	r3, [r4, #16]
 8002cea:	4615      	mov	r5, r2
 8002cec:	e7ba      	b.n	8002c64 <_printf_i+0x150>
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	1d1a      	adds	r2, r3, #4
 8002cf2:	602a      	str	r2, [r5, #0]
 8002cf4:	681d      	ldr	r5, [r3, #0]
 8002cf6:	6862      	ldr	r2, [r4, #4]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f7fd fa78 	bl	80001f0 <memchr>
 8002d00:	b108      	cbz	r0, 8002d06 <_printf_i+0x1f2>
 8002d02:	1b40      	subs	r0, r0, r5
 8002d04:	6060      	str	r0, [r4, #4]
 8002d06:	6863      	ldr	r3, [r4, #4]
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d10:	e7a8      	b.n	8002c64 <_printf_i+0x150>
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	462a      	mov	r2, r5
 8002d16:	4649      	mov	r1, r9
 8002d18:	4640      	mov	r0, r8
 8002d1a:	47d0      	blx	sl
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d0ab      	beq.n	8002c78 <_printf_i+0x164>
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	079b      	lsls	r3, r3, #30
 8002d24:	d413      	bmi.n	8002d4e <_printf_i+0x23a>
 8002d26:	68e0      	ldr	r0, [r4, #12]
 8002d28:	9b03      	ldr	r3, [sp, #12]
 8002d2a:	4298      	cmp	r0, r3
 8002d2c:	bfb8      	it	lt
 8002d2e:	4618      	movlt	r0, r3
 8002d30:	e7a4      	b.n	8002c7c <_printf_i+0x168>
 8002d32:	2301      	movs	r3, #1
 8002d34:	4632      	mov	r2, r6
 8002d36:	4649      	mov	r1, r9
 8002d38:	4640      	mov	r0, r8
 8002d3a:	47d0      	blx	sl
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d09b      	beq.n	8002c78 <_printf_i+0x164>
 8002d40:	3501      	adds	r5, #1
 8002d42:	68e3      	ldr	r3, [r4, #12]
 8002d44:	9903      	ldr	r1, [sp, #12]
 8002d46:	1a5b      	subs	r3, r3, r1
 8002d48:	42ab      	cmp	r3, r5
 8002d4a:	dcf2      	bgt.n	8002d32 <_printf_i+0x21e>
 8002d4c:	e7eb      	b.n	8002d26 <_printf_i+0x212>
 8002d4e:	2500      	movs	r5, #0
 8002d50:	f104 0619 	add.w	r6, r4, #25
 8002d54:	e7f5      	b.n	8002d42 <_printf_i+0x22e>
 8002d56:	bf00      	nop
 8002d58:	08002fc5 	.word	0x08002fc5
 8002d5c:	08002fd6 	.word	0x08002fd6

08002d60 <__sread>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	460c      	mov	r4, r1
 8002d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d68:	f000 f894 	bl	8002e94 <_read_r>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	bfab      	itete	ge
 8002d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d72:	89a3      	ldrhlt	r3, [r4, #12]
 8002d74:	181b      	addge	r3, r3, r0
 8002d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d7a:	bfac      	ite	ge
 8002d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d7e:	81a3      	strhlt	r3, [r4, #12]
 8002d80:	bd10      	pop	{r4, pc}

08002d82 <__swrite>:
 8002d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d86:	461f      	mov	r7, r3
 8002d88:	898b      	ldrh	r3, [r1, #12]
 8002d8a:	05db      	lsls	r3, r3, #23
 8002d8c:	4605      	mov	r5, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4616      	mov	r6, r2
 8002d92:	d505      	bpl.n	8002da0 <__swrite+0x1e>
 8002d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f000 f868 	bl	8002e70 <_lseek_r>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002daa:	81a3      	strh	r3, [r4, #12]
 8002dac:	4632      	mov	r2, r6
 8002dae:	463b      	mov	r3, r7
 8002db0:	4628      	mov	r0, r5
 8002db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002db6:	f000 b817 	b.w	8002de8 <_write_r>

08002dba <__sseek>:
 8002dba:	b510      	push	{r4, lr}
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc2:	f000 f855 	bl	8002e70 <_lseek_r>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	bf15      	itete	ne
 8002dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dd6:	81a3      	strheq	r3, [r4, #12]
 8002dd8:	bf18      	it	ne
 8002dda:	81a3      	strhne	r3, [r4, #12]
 8002ddc:	bd10      	pop	{r4, pc}

08002dde <__sclose>:
 8002dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de2:	f000 b813 	b.w	8002e0c <_close_r>
	...

08002de8 <_write_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4d07      	ldr	r5, [pc, #28]	; (8002e08 <_write_r+0x20>)
 8002dec:	4604      	mov	r4, r0
 8002dee:	4608      	mov	r0, r1
 8002df0:	4611      	mov	r1, r2
 8002df2:	2200      	movs	r2, #0
 8002df4:	602a      	str	r2, [r5, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7fe ff23 	bl	8001c42 <_write>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d102      	bne.n	8002e06 <_write_r+0x1e>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b103      	cbz	r3, 8002e06 <_write_r+0x1e>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	200000e8 	.word	0x200000e8

08002e0c <_close_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4d06      	ldr	r5, [pc, #24]	; (8002e28 <_close_r+0x1c>)
 8002e10:	2300      	movs	r3, #0
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	602b      	str	r3, [r5, #0]
 8002e18:	f7fe ff2f 	bl	8001c7a <_close>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_close_r+0x1a>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_close_r+0x1a>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	200000e8 	.word	0x200000e8

08002e2c <_fstat_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4d07      	ldr	r5, [pc, #28]	; (8002e4c <_fstat_r+0x20>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	602b      	str	r3, [r5, #0]
 8002e3a:	f7fe ff29 	bl	8001c90 <_fstat>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	d102      	bne.n	8002e48 <_fstat_r+0x1c>
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	b103      	cbz	r3, 8002e48 <_fstat_r+0x1c>
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200000e8 	.word	0x200000e8

08002e50 <_isatty_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d06      	ldr	r5, [pc, #24]	; (8002e6c <_isatty_r+0x1c>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	f7fe ff27 	bl	8001cae <_isatty>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_isatty_r+0x1a>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_isatty_r+0x1a>
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	200000e8 	.word	0x200000e8

08002e70 <_lseek_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4d07      	ldr	r5, [pc, #28]	; (8002e90 <_lseek_r+0x20>)
 8002e74:	4604      	mov	r4, r0
 8002e76:	4608      	mov	r0, r1
 8002e78:	4611      	mov	r1, r2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	602a      	str	r2, [r5, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f7fe ff1f 	bl	8001cc2 <_lseek>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d102      	bne.n	8002e8e <_lseek_r+0x1e>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b103      	cbz	r3, 8002e8e <_lseek_r+0x1e>
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	bd38      	pop	{r3, r4, r5, pc}
 8002e90:	200000e8 	.word	0x200000e8

08002e94 <_read_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4d07      	ldr	r5, [pc, #28]	; (8002eb4 <_read_r+0x20>)
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	602a      	str	r2, [r5, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f7fe feb0 	bl	8001c08 <_read>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_read_r+0x1e>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_read_r+0x1e>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	200000e8 	.word	0x200000e8

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
