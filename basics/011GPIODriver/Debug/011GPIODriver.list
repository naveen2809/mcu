
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080027a8  080027a8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a8  080027a8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080027b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000005c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b87  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aac  00000000  00000000  00022c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000368  00000000  00000000  000236d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002d0  00000000  00000000  00023a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003930  00000000  00000000  00023d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003fd0  00000000  00000000  00027638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c03d  00000000  00000000  0002b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00037645  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000148c  00000000  00000000  00037698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080026c4 	.word	0x080026c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080026c4 	.word	0x080026c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:
#include "common_utilities.h"

struct General_Purpose_Timer_Handle_t TIM2_Handle;

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000088 	.word	0x20000088

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 f993 	bl	80015fc <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f000 fd42 	bl	8000d70 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f809 	bl	8000304 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fa2e 	bl	8000754 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000088 	.word	0x20000088
 8000300:	2000008c 	.word	0x2000008c

08000304 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6852      	ldr	r2, [r2, #4]
 8000314:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6892      	ldr	r2, [r2, #8]
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7b1b      	ldrb	r3, [r3, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d16a      	bne.n	80003fe <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6a1a      	ldr	r2, [r3, #32]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f042 0201 	orr.w	r2, r2, #1
 8000336:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b5b      	ldrb	r3, [r3, #13]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d11c      	bne.n	800037a <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f022 0203 	bic.w	r2, r2, #3
 800034e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	6912      	ldr	r2, [r2, #16]
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	699a      	ldr	r2, [r3, #24]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000368:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000378:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7b5b      	ldrb	r3, [r3, #13]
 800037e:	2b03      	cmp	r3, #3
 8000380:	d11c      	bne.n	80003bc <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	699a      	ldr	r2, [r3, #24]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f022 0203 	bic.w	r2, r2, #3
 8000390:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	6912      	ldr	r2, [r2, #16]
 800039a:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	699a      	ldr	r2, [r3, #24]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003aa:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80003ba:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7b5b      	ldrb	r3, [r3, #13]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d11c      	bne.n	80003fe <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f022 0203 	bic.w	r2, r2, #3
 80003d2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	6912      	ldr	r2, [r2, #16]
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003ec:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80003fc:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	7d1b      	ldrb	r3, [r3, #20]
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 80bf 	bne.w	8000586 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7d5b      	ldrb	r3, [r3, #21]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d124      	bne.n	800045a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	699a      	ldr	r2, [r3, #24]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800041e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	6992      	ldr	r2, [r2, #24]
 8000428:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	699a      	ldr	r2, [r3, #24]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000438:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	699a      	ldr	r2, [r3, #24]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000448:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	6a1a      	ldr	r2, [r3, #32]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f042 0210 	orr.w	r2, r2, #16
 8000458:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7d5b      	ldrb	r3, [r3, #21]
 800045e:	2b03      	cmp	r3, #3
 8000460:	d124      	bne.n	80004ac <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	699a      	ldr	r2, [r3, #24]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000470:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	6992      	ldr	r2, [r2, #24]
 800047a:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800048a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800049a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6a1a      	ldr	r2, [r3, #32]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f042 0210 	orr.w	r2, r2, #16
 80004aa:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	7d5b      	ldrb	r3, [r3, #21]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d124      	bne.n	80004fe <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80004c2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	6992      	ldr	r2, [r2, #24]
 80004cc:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80004dc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80004ec:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a1a      	ldr	r2, [r3, #32]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f042 0210 	orr.w	r2, r2, #16
 80004fc:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7d5b      	ldrb	r3, [r3, #21]
 8000502:	2b08      	cmp	r3, #8
 8000504:	d13f      	bne.n	8000586 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000514:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	699a      	ldr	r2, [r3, #24]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000524:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000534:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a1a      	ldr	r2, [r3, #32]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f022 0220 	bic.w	r2, r2, #32
 8000544:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a1a      	ldr	r2, [r3, #32]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000554:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000564:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0204 	orr.w	r2, r2, #4
 8000574:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a1a      	ldr	r2, [r3, #32]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0210 	orr.w	r2, r2, #16
 8000584:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7f1b      	ldrb	r3, [r3, #28]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d16a      	bne.n	8000664 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6a1a      	ldr	r2, [r3, #32]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7f5b      	ldrb	r3, [r3, #29]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d11c      	bne.n	80005e0 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f022 0203 	bic.w	r2, r2, #3
 80005b4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	6a12      	ldr	r2, [r2, #32]
 80005be:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005ce:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80005de:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7f5b      	ldrb	r3, [r3, #29]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d11c      	bne.n	8000622 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f022 0203 	bic.w	r2, r2, #3
 80005f6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	6a12      	ldr	r2, [r2, #32]
 8000600:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000610:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000620:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7f5b      	ldrb	r3, [r3, #29]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d11c      	bne.n	8000664 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f022 0203 	bic.w	r2, r2, #3
 8000638:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6a12      	ldr	r2, [r2, #32]
 8000642:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	69da      	ldr	r2, [r3, #28]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000652:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000662:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800066a:	2b00      	cmp	r3, #0
 800066c:	d16d      	bne.n	800074a <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6a1a      	ldr	r2, [r3, #32]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800067c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000684:	2b02      	cmp	r3, #2
 8000686:	d11c      	bne.n	80006c2 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000696:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006b0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80006c0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d11c      	bne.n	8000706 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	69da      	ldr	r2, [r3, #28]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80006da:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	69da      	ldr	r2, [r3, #28]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006f4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000704:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800070c:	2b04      	cmp	r3, #4
 800070e:	d11c      	bne.n	800074a <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800071e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000738:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000748:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0201 	orr.w	r2, r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	70fb      	strb	r3, [r7, #3]
 8000782:	4613      	mov	r3, r2
 8000784:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	78fa      	ldrb	r2, [r7, #3]
 8000790:	0052      	lsls	r2, r2, #1
 8000792:	2103      	movs	r1, #3
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	43d2      	mvns	r2, r2
 800079a:	401a      	ands	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	78b9      	ldrb	r1, [r7, #2]
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	431a      	orrs	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	601a      	str	r2, [r3, #0]

}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 80007be:	b480      	push	{r7}
 80007c0:	b087      	sub	sp, #28
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2201      	movs	r2, #1
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	fa22 f303 	lsr.w	r3, r2, r3
 80007ec:	60fb      	str	r3, [r7, #12]

	return value;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	b2db      	uxtb	r3, r3
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	371c      	adds	r7, #28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
 8000808:	4613      	mov	r3, r2
 800080a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	f003 0307 	and.w	r3, r3, #7
 800081c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800081e:	7afa      	ldrb	r2, [r7, #11]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3208      	adds	r2, #8
 8000824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000828:	7aba      	ldrb	r2, [r7, #10]
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	210f      	movs	r1, #15
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	43d2      	mvns	r2, r2
 8000834:	4611      	mov	r1, r2
 8000836:	7afa      	ldrb	r2, [r7, #11]
 8000838:	4019      	ands	r1, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3208      	adds	r2, #8
 800083e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000842:	7afa      	ldrb	r2, [r7, #11]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3208      	adds	r2, #8
 8000848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084c:	78b9      	ldrb	r1, [r7, #2]
 800084e:	7aba      	ldrb	r2, [r7, #10]
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	4611      	mov	r1, r2
 8000858:	7afa      	ldrb	r2, [r7, #11]
 800085a:	4319      	orrs	r1, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3208      	adds	r2, #8
 8000860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	4613      	mov	r3, r2
 800087c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	43d2      	mvns	r2, r2
 8000890:	401a      	ands	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	78b9      	ldrb	r1, [r7, #2]
 800089c:	78fa      	ldrb	r2, [r7, #3]
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	431a      	orrs	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	605a      	str	r2, [r3, #4]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	0052      	lsls	r2, r2, #1
 80008ce:	2103      	movs	r1, #3
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	401a      	ands	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	78b9      	ldrb	r1, [r7, #2]
 80008e2:	78fa      	ldrb	r2, [r7, #3]
 80008e4:	0052      	lsls	r2, r2, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	431a      	orrs	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	60da      	str	r2, [r3, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
 8000906:	4613      	mov	r3, r2
 8000908:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	0052      	lsls	r2, r2, #1
 8000916:	2103      	movs	r1, #3
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	43d2      	mvns	r2, r2
 800091e:	401a      	ands	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	78b9      	ldrb	r1, [r7, #2]
 800092a:	78fa      	ldrb	r2, [r7, #3]
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	431a      	orrs	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	609a      	str	r2, [r3, #8]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	431a      	orrs	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	69da      	ldr	r2, [r3, #28]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	03db      	lsls	r3, r3, #15
 8000980:	431a      	orrs	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10d      	bne.n	80009aa <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	69da      	ldr	r2, [r3, #28]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	039b      	lsls	r3, r3, #14
 80009a4:	431a      	orrs	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	431a      	orrs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	029b      	lsls	r3, r3, #10
 80009de:	431a      	orrs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	601a      	str	r2, [r3, #0]

}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f043 0201 	orr.w	r2, r3, #1
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	601a      	str	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f84c 	bl	8000ac0 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000a28:	bf00      	nop
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f000 f869 	bl	8000b04 <I2C_GetFlagStatus>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f8      	beq.n	8000a2a <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 f86f 	bl	8000b2e <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000a50:	bf00      	nop
 8000a52:	2102      	movs	r1, #2
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f855 	bl	8000b04 <I2C_GetFlagStatus>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f8      	beq.n	8000a52 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 f874 	bl	8000b4e <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000a66:	e012      	b.n	8000a8e <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000a68:	bf00      	nop
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f849 	bl	8000b04 <I2C_GetFlagStatus>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f8      	beq.n	8000a6a <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
		Len--;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1e9      	bne.n	8000a68 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000a94:	bf00      	nop
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f000 f833 	bl	8000b04 <I2C_GetFlagStatus>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d1f8      	bne.n	8000a96 <I2CMasterSendData+0x86>
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f000 f82c 	bl	8000b04 <I2C_GetFlagStatus>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d1f1      	bne.n	8000a96 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f815 	bl	8000ae2 <I2C_SendStopBit>

}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000b3e:	78fa      	ldrb	r2, [r7, #3]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b085      	sub	sp, #20
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000b80:	78fa      	ldrb	r2, [r7, #3]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	621a      	str	r2, [r3, #32]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b98:	f7ff fb7a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000b9c:	2030      	movs	r0, #48	; 0x30
 8000b9e:	f000 f845 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ba6:	f7ff fb73 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000baa:	2030      	movs	r0, #48	; 0x30
 8000bac:	f000 f83e 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb4:	f7ff fb6c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000bb8:	2030      	movs	r0, #48	; 0x30
 8000bba:	f000 f837 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc2:	f7ff fb65 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000bc6:	2020      	movs	r0, #32
 8000bc8:	f000 f830 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000bcc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bd0:	f7ff fb5e 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bd4:	2028      	movs	r0, #40	; 0x28
 8000bd6:	f000 f829 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000bda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bde:	f7ff fb57 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000be2:	2008      	movs	r0, #8
 8000be4:	f000 f822 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000be8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bec:	f7ff fb50 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 f81b 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000bf6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bfa:	f7ff fb49 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f814 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000c04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c08:	f7ff fb42 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 f80d 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000c12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c16:	f7ff fb3b 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f000 f806 	bl	8000c2c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000c20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c24:	f7ff fb34 	bl	8000290 <delay_us>

	return;
 8000c28:	bf00      	nop
}
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f023 030f 	bic.w	r3, r3, #15
 8000c3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	f043 030c 	orr.w	r3, r3, #12
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	f043 030c 	orr.w	r3, r3, #12
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <lcd_pcf8574_send_cmd+0x5c>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <lcd_pcf8574_send_cmd+0x60>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f107 0108 	add.w	r1, r7, #8
 8000c78:	2204      	movs	r2, #4
 8000c7a:	f7ff fec9 	bl	8000a10 <I2CMasterSendData>

	return;
 8000c7e:	bf00      	nop
}
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f023 030f 	bic.w	r3, r3, #15
 8000ca0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 030d 	orr.w	r3, r3, #13
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	f043 0309 	orr.w	r3, r3, #9
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 030d 	orr.w	r3, r3, #13
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f043 0309 	orr.w	r3, r3, #9
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <lcd_pcf8574_send_data+0x5c>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <lcd_pcf8574_send_data+0x60>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f107 0108 	add.w	r1, r7, #8
 8000cdc:	2204      	movs	r2, #4
 8000cde:	f7ff fe97 	bl	8000a10 <I2CMasterSendData>

	return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ff97 	bl	8000c2c <lcd_pcf8574_send_cmd>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff ff90 	bl	8000c2c <lcd_pcf8574_send_cmd>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d108      	bne.n	8000d38 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	2b27      	cmp	r3, #39	; 0x27
 8000d2a:	d802      	bhi.n	8000d32 <lcd_pcf8574_set_position+0x22>
			position = col;
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e011      	b.n	8000d56 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e00e      	b.n	8000d56 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d109      	bne.n	8000d52 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b27      	cmp	r3, #39	; 0x27
 8000d42:	d803      	bhi.n	8000d4c <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	3340      	adds	r3, #64	; 0x40
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e004      	b.n	8000d56 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e001      	b.n	8000d56 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d5c:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff63 	bl	8000c2c <lcd_pcf8574_send_cmd>

	return;
 8000d66:	bf00      	nop
}
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a88      	ldr	r2, [pc, #544]	; (8000f9c <EnablePeriClk+0x22c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d108      	bne.n	8000d92 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d80:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <EnablePeriClk+0x230>)
 8000d82:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f043 0201 	orr.w	r2, r3, #1
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000d90:	e19b      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a83      	ldr	r2, [pc, #524]	; (8000fa4 <EnablePeriClk+0x234>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d108      	bne.n	8000dac <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d9a:	4b81      	ldr	r3, [pc, #516]	; (8000fa0 <EnablePeriClk+0x230>)
 8000d9c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f043 0202 	orr.w	r2, r3, #2
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	e18e      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a7e      	ldr	r2, [pc, #504]	; (8000fa8 <EnablePeriClk+0x238>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d108      	bne.n	8000dc6 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000db4:	4b7a      	ldr	r3, [pc, #488]	; (8000fa0 <EnablePeriClk+0x230>)
 8000db6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f043 0204 	orr.w	r2, r3, #4
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	e181      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a78      	ldr	r2, [pc, #480]	; (8000fac <EnablePeriClk+0x23c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d108      	bne.n	8000de0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000dce:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <EnablePeriClk+0x230>)
 8000dd0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f043 0208 	orr.w	r2, r3, #8
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	e174      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a73      	ldr	r2, [pc, #460]	; (8000fb0 <EnablePeriClk+0x240>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d108      	bne.n	8000dfa <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000de8:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <EnablePeriClk+0x230>)
 8000dea:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f043 0210 	orr.w	r2, r3, #16
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	e167      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a6d      	ldr	r2, [pc, #436]	; (8000fb4 <EnablePeriClk+0x244>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d108      	bne.n	8000e14 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e02:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <EnablePeriClk+0x230>)
 8000e04:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f043 0220 	orr.w	r2, r3, #32
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	e15a      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a68      	ldr	r2, [pc, #416]	; (8000fb8 <EnablePeriClk+0x248>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d108      	bne.n	8000e2e <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <EnablePeriClk+0x230>)
 8000e1e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	e14d      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a62      	ldr	r2, [pc, #392]	; (8000fbc <EnablePeriClk+0x24c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d108      	bne.n	8000e48 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e36:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <EnablePeriClk+0x230>)
 8000e38:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	e140      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a5d      	ldr	r2, [pc, #372]	; (8000fc0 <EnablePeriClk+0x250>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d108      	bne.n	8000e62 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <EnablePeriClk+0x230>)
 8000e52:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	e133      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <EnablePeriClk+0x254>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d108      	bne.n	8000e7c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <EnablePeriClk+0x258>)
 8000e6c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	e126      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a53      	ldr	r2, [pc, #332]	; (8000fcc <EnablePeriClk+0x25c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d108      	bne.n	8000e96 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e84:	4b52      	ldr	r3, [pc, #328]	; (8000fd0 <EnablePeriClk+0x260>)
 8000e86:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	e119      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <EnablePeriClk+0x264>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d108      	bne.n	8000eb0 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <EnablePeriClk+0x260>)
 8000ea0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	e10c      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <EnablePeriClk+0x268>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d108      	bne.n	8000eca <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <EnablePeriClk+0x260>)
 8000eba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	e0ff      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <EnablePeriClk+0x26c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d108      	bne.n	8000ee4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <EnablePeriClk+0x260>)
 8000ed4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	e0f2      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <EnablePeriClk+0x270>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d108      	bne.n	8000efe <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <EnablePeriClk+0x260>)
 8000eee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	e0e5      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a38      	ldr	r2, [pc, #224]	; (8000fe4 <EnablePeriClk+0x274>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d108      	bne.n	8000f18 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <EnablePeriClk+0x258>)
 8000f08:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f043 0210 	orr.w	r2, r3, #16
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	e0d8      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <EnablePeriClk+0x278>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d108      	bne.n	8000f32 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <EnablePeriClk+0x260>)
 8000f22:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	e0cb      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <EnablePeriClk+0x27c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d108      	bne.n	8000f4c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <EnablePeriClk+0x260>)
 8000f3c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	e0be      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <EnablePeriClk+0x280>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d108      	bne.n	8000f66 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <EnablePeriClk+0x260>)
 8000f56:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	e0b1      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <EnablePeriClk+0x284>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d108      	bne.n	8000f80 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <EnablePeriClk+0x260>)
 8000f70:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	e0a4      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <EnablePeriClk+0x288>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d139      	bne.n	8000ffc <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <EnablePeriClk+0x258>)
 8000f8a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f043 0220 	orr.w	r2, r3, #32
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	e097      	b.n	80010ca <EnablePeriClk+0x35a>
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40023830 	.word	0x40023830
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40021400 	.word	0x40021400
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40021c00 	.word	0x40021c00
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40023844 	.word	0x40023844
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	40023840 	.word	0x40023840
 8000fd4:	40003c00 	.word	0x40003c00
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	40005c00 	.word	0x40005c00
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40004800 	.word	0x40004800
 8000ff0:	40004c00 	.word	0x40004c00
 8000ff4:	40005000 	.word	0x40005000
 8000ff8:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <EnablePeriClk+0x364>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d108      	bne.n	8001016 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <EnablePeriClk+0x368>)
 8001006:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f043 0210 	orr.w	r2, r3, #16
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	e059      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a30      	ldr	r2, [pc, #192]	; (80010dc <EnablePeriClk+0x36c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d108      	bne.n	8001030 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <EnablePeriClk+0x368>)
 8001020:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f043 0220 	orr.w	r2, r3, #32
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	e04c      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <EnablePeriClk+0x370>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d108      	bne.n	800104a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <EnablePeriClk+0x374>)
 800103a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	e03f      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <EnablePeriClk+0x378>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d108      	bne.n	8001064 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <EnablePeriClk+0x374>)
 8001054:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	e032      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106a:	d108      	bne.n	800107e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <EnablePeriClk+0x368>)
 800106e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	e025      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <EnablePeriClk+0x37c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d108      	bne.n	8001098 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <EnablePeriClk+0x368>)
 8001088:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]
}
 8001096:	e018      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <EnablePeriClk+0x380>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d108      	bne.n	80010b2 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <EnablePeriClk+0x368>)
 80010a2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f043 0204 	orr.w	r2, r3, #4
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	e00b      	b.n	80010ca <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <EnablePeriClk+0x384>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d107      	bne.n	80010ca <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <EnablePeriClk+0x368>)
 80010bc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f043 0208 	orr.w	r2, r3, #8
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40001000 	.word	0x40001000
 80010d8:	40023840 	.word	0x40023840
 80010dc:	40001400 	.word	0x40001400
 80010e0:	40026000 	.word	0x40026000
 80010e4:	40023830 	.word	0x40023830
 80010e8:	40026400 	.word	0x40026400
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40000800 	.word	0x40000800
 80010f4:	40000c00 	.word	0x40000c00

080010f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e00a      	b.n	8001120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110a:	f3af 8000 	nop.w
 800110e:	4601      	mov	r1, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf0      	blt.n	800110a <_read+0x12>
  }

  return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e009      	b.n	8001158 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f9f3 	bl	8001538 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf1      	blt.n	8001144 <_write+0x12>
  }
  return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	605a      	str	r2, [r3, #4]
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f000 f9d4 	bl	80015a8 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20020000 	.word	0x20020000
 800122c:	00000400 	.word	0x00000400
 8001230:	200000b4 	.word	0x200000b4
 8001234:	200000c8 	.word	0x200000c8

08001238 <main>:

uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;

int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint8_t dht11_sensor_response;
	uint8_t dht11_sensor_data[5];

	//Configure the Timer
	configure_delay_timer();
 800123e:	f7ff f83f 	bl	80002c0 <configure_delay_timer>

	//Configure the I2C Peripheral
	configure_i2c();
 8001242:	f000 f911 	bl	8001468 <configure_i2c>

	//Disable printf() buffering
	setbuf(stdout, NULL);
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <main+0xac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f9f4 	bl	800163c <setbuf>

	//Initialize the LCD module
	delay_us(1000000);
 8001254:	4824      	ldr	r0, [pc, #144]	; (80012e8 <main+0xb0>)
 8001256:	f7ff f81b 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 800125a:	f7ff fc99 	bl	8000b90 <lcd_pcf8574_init>
	delay_us(100000);
 800125e:	4823      	ldr	r0, [pc, #140]	; (80012ec <main+0xb4>)
 8001260:	f7ff f816 	bl	8000290 <delay_us>

	while(1)
	{
		//Read the DHT11 Sensor
		dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 8001264:	463b      	mov	r3, r7
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f876 	bl	8001358 <read_dht11_sensor>
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]

		if(dht11_sensor_response)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d022      	beq.n	80012bc <main+0x84>
		{
			//Print RH Data
			lcd_pcf8574_clear_screen();
 8001276:	f7ff fd3d 	bl	8000cf4 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 800127a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800127e:	f7ff f807 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8001282:	f7ff fd3e 	bl	8000d02 <lcd_pcf8574_return_home>
			delay_us(3000);
 8001286:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800128a:	f7ff f801 	bl	8000290 <delay_us>
			printf("RH:   %2d.%2d",dht11_sensor_data[0],dht11_sensor_data[1]);
 800128e:	783b      	ldrb	r3, [r7, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	787b      	ldrb	r3, [r7, #1]
 8001294:	461a      	mov	r2, r3
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <main+0xb8>)
 8001298:	f000 f9b8 	bl	800160c <iprintf>

			//Print TEMP Data
			lcd_pcf8574_set_position(1,0);
 800129c:	2100      	movs	r1, #0
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fd36 	bl	8000d10 <lcd_pcf8574_set_position>
			delay_us(3000);
 80012a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012a8:	f7fe fff2 	bl	8000290 <delay_us>
			printf("TEMP: %2d.%2d C",dht11_sensor_data[2],dht11_sensor_data[3]);
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	4619      	mov	r1, r3
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	461a      	mov	r2, r3
 80012b4:	480f      	ldr	r0, [pc, #60]	; (80012f4 <main+0xbc>)
 80012b6:	f000 f9a9 	bl	800160c <iprintf>
 80012ba:	e00e      	b.n	80012da <main+0xa2>
		}
		else
		{
			lcd_pcf8574_clear_screen();
 80012bc:	f7ff fd1a 	bl	8000cf4 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 80012c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012c4:	f7fe ffe4 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 80012c8:	f7ff fd1b 	bl	8000d02 <lcd_pcf8574_return_home>
			delay_us(3000);
 80012cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012d0:	f7fe ffde 	bl	8000290 <delay_us>
			printf("Sensor Read Failed");
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <main+0xc0>)
 80012d6:	f000 f999 	bl	800160c <iprintf>
		}

		delay_us(5000000);
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <main+0xc4>)
 80012dc:	f7fe ffd8 	bl	8000290 <delay_us>
		dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 80012e0:	e7c0      	b.n	8001264 <main+0x2c>
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	000f4240 	.word	0x000f4240
 80012ec:	000186a0 	.word	0x000186a0
 80012f0:	080026dc 	.word	0x080026dc
 80012f4:	080026ec 	.word	0x080026ec
 80012f8:	080026fc 	.word	0x080026fc
 80012fc:	004c4b40 	.word	0x004c4b40

08001300 <check_sensor_response>:

	return 0;
}

uint8_t check_sensor_response(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	uint8_t sample[2];

	//Read First Sample
	delay_us(40);
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f7fe ffc2 	bl	8000290 <delay_us>
	sample[0] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 800130c:	2100      	movs	r1, #0
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <check_sensor_response+0x54>)
 8001310:	f7ff fa55 	bl	80007be <GPIOReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	713b      	strb	r3, [r7, #4]

	//Read Second Sample
	delay_us(80);
 8001318:	2050      	movs	r0, #80	; 0x50
 800131a:	f7fe ffb9 	bl	8000290 <delay_us>
	sample[1] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 800131e:	2100      	movs	r1, #0
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <check_sensor_response+0x54>)
 8001322:	f7ff fa4c 	bl	80007be <GPIOReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	717b      	strb	r3, [r7, #5]

	//Wait till the end of the response
	while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 800132a:	bf00      	nop
 800132c:	2100      	movs	r1, #0
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <check_sensor_response+0x54>)
 8001330:	f7ff fa45 	bl	80007be <GPIOReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f8      	bne.n	800132c <check_sensor_response+0x2c>

	if(sample[0]==GPIO_LOW && sample[1]==GPIO_HIGH)
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <check_sensor_response+0x4a>
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <check_sensor_response+0x4a>
	{
		return 1;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <check_sensor_response+0x4c>
	}
	else
	{
		return 0;
 800134a:	2300      	movs	r3, #0
	}
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40020000 	.word	0x40020000

08001358 <read_dht11_sensor>:

uint8_t read_dht11_sensor(uint8_t *data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint8_t sensor_response;
	uint8_t current_bit;
	uint8_t i;

	//GPIO Configuration for Sensor Data Pin
	EnablePeriClk(DHT11_SENSOR_PORT);
 8001360:	4840      	ldr	r0, [pc, #256]	; (8001464 <read_dht11_sensor+0x10c>)
 8001362:	f7ff fd05 	bl	8000d70 <EnablePeriClk>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_OUTPUT);
 8001366:	2201      	movs	r2, #1
 8001368:	2100      	movs	r1, #0
 800136a:	483e      	ldr	r0, [pc, #248]	; (8001464 <read_dht11_sensor+0x10c>)
 800136c:	f7ff fa03 	bl	8000776 <GPIOSetMode>
	GPIOSetOutputType(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPTYPE_OD);
 8001370:	2201      	movs	r2, #1
 8001372:	2100      	movs	r1, #0
 8001374:	483b      	ldr	r0, [pc, #236]	; (8001464 <read_dht11_sensor+0x10c>)
 8001376:	f7ff fa7a 	bl	800086e <GPIOSetOutputType>
	GPIOSetOutputSpeed(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPSPEED_HIGH);
 800137a:	2202      	movs	r2, #2
 800137c:	2100      	movs	r1, #0
 800137e:	4839      	ldr	r0, [pc, #228]	; (8001464 <read_dht11_sensor+0x10c>)
 8001380:	f7ff fabb 	bl	80008fa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_PULL_UP);
 8001384:	2201      	movs	r2, #1
 8001386:	2100      	movs	r1, #0
 8001388:	4836      	ldr	r0, [pc, #216]	; (8001464 <read_dht11_sensor+0x10c>)
 800138a:	f7ff fa92 	bl	80008b2 <GPIOSetPullUpDownConfig>

	//Triggering the Sensor
	delay_us(18000);
 800138e:	f244 6050 	movw	r0, #18000	; 0x4650
 8001392:	f7fe ff7d 	bl	8000290 <delay_us>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_INPUT);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	4832      	ldr	r0, [pc, #200]	; (8001464 <read_dht11_sensor+0x10c>)
 800139c:	f7ff f9eb 	bl	8000776 <GPIOSetMode>

	//Checking for Sensor Response
	sensor_response = check_sensor_response();
 80013a0:	f7ff ffae 	bl	8001300 <check_sensor_response>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73bb      	strb	r3, [r7, #14]

	//Reading the Sensor Data
	if(sensor_response == 1)
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d155      	bne.n	800145a <read_dht11_sensor+0x102>
	{
		for(i=0;i<40;i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e04f      	b.n	8001454 <read_dht11_sensor+0xfc>
		{
			while(!(GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80013b4:	bf00      	nop
 80013b6:	2100      	movs	r1, #0
 80013b8:	482a      	ldr	r0, [pc, #168]	; (8001464 <read_dht11_sensor+0x10c>)
 80013ba:	f7ff fa00 	bl	80007be <GPIOReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f8      	beq.n	80013b6 <read_dht11_sensor+0x5e>
			delay_us(40);
 80013c4:	2028      	movs	r0, #40	; 0x28
 80013c6:	f7fe ff63 	bl	8000290 <delay_us>
			current_bit = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4825      	ldr	r0, [pc, #148]	; (8001464 <read_dht11_sensor+0x10c>)
 80013ce:	f7ff f9f6 	bl	80007be <GPIOReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	737b      	strb	r3, [r7, #13]
			if(current_bit == GPIO_HIGH)
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d117      	bne.n	800140c <read_dht11_sensor+0xb4>
			{
				data[(i/8)] |= (1 << (7-(i%8)));
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	4602      	mov	r2, r0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	4601      	mov	r1, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	440b      	add	r3, r1
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e018      	b.n	800143e <read_dht11_sensor+0xe6>
			}
			else
			{
				data[(i/8)] &= ~(1 << (7-(i%8)));
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25a      	sxtb	r2, r3
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	43db      	mvns	r3, r3
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	b25b      	sxtb	r3, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4013      	ands	r3, r2
 8001432:	b25a      	sxtb	r2, r3
 8001434:	4601      	mov	r1, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	440b      	add	r3, r1
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
			}
			while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 800143e:	bf00      	nop
 8001440:	2100      	movs	r1, #0
 8001442:	4808      	ldr	r0, [pc, #32]	; (8001464 <read_dht11_sensor+0x10c>)
 8001444:	f7ff f9bb 	bl	80007be <GPIOReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f8      	bne.n	8001440 <read_dht11_sensor+0xe8>
		for(i=0;i<40;i++)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b27      	cmp	r3, #39	; 0x27
 8001458:	d9ac      	bls.n	80013b4 <read_dht11_sensor+0x5c>
		}
	}

	return sensor_response;
 800145a:	7bbb      	ldrb	r3, [r7, #14]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020000 	.word	0x40020000

08001468 <configure_i2c>:

void configure_i2c(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800146e:	463b      	mov	r3, r7
 8001470:	2218      	movs	r2, #24
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8c1 	bl	80015fc <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 800147a:	482d      	ldr	r0, [pc, #180]	; (8001530 <configure_i2c+0xc8>)
 800147c:	f7ff fc78 	bl	8000d70 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 8001480:	2202      	movs	r2, #2
 8001482:	2107      	movs	r1, #7
 8001484:	482a      	ldr	r0, [pc, #168]	; (8001530 <configure_i2c+0xc8>)
 8001486:	f7ff f976 	bl	8000776 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 800148a:	2202      	movs	r2, #2
 800148c:	2106      	movs	r1, #6
 800148e:	4828      	ldr	r0, [pc, #160]	; (8001530 <configure_i2c+0xc8>)
 8001490:	f7ff f971 	bl	8000776 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8001494:	2204      	movs	r2, #4
 8001496:	2107      	movs	r1, #7
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <configure_i2c+0xc8>)
 800149a:	f7ff f9af 	bl	80007fc <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800149e:	2204      	movs	r2, #4
 80014a0:	2106      	movs	r1, #6
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <configure_i2c+0xc8>)
 80014a4:	f7ff f9aa 	bl	80007fc <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2107      	movs	r1, #7
 80014ac:	4820      	ldr	r0, [pc, #128]	; (8001530 <configure_i2c+0xc8>)
 80014ae:	f7ff f9de 	bl	800086e <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2106      	movs	r1, #6
 80014b6:	481e      	ldr	r0, [pc, #120]	; (8001530 <configure_i2c+0xc8>)
 80014b8:	f7ff f9d9 	bl	800086e <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 80014bc:	2202      	movs	r2, #2
 80014be:	2107      	movs	r1, #7
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <configure_i2c+0xc8>)
 80014c2:	f7ff fa1a 	bl	80008fa <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 80014c6:	2202      	movs	r2, #2
 80014c8:	2106      	movs	r1, #6
 80014ca:	4819      	ldr	r0, [pc, #100]	; (8001530 <configure_i2c+0xc8>)
 80014cc:	f7ff fa15 	bl	80008fa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2107      	movs	r1, #7
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <configure_i2c+0xc8>)
 80014d6:	f7ff f9ec 	bl	80008b2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 80014da:	2201      	movs	r2, #1
 80014dc:	2106      	movs	r1, #6
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <configure_i2c+0xc8>)
 80014e0:	f7ff f9e7 	bl	80008b2 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 80014e4:	2310      	movs	r3, #16
 80014e6:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 80014f0:	2350      	movs	r3, #80	; 0x50
 80014f2:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <configure_i2c+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fc37 	bl	8000d70 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <configure_i2c+0xcc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	463a      	mov	r2, r7
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fa19 	bl	8000942 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <configure_i2c+0xcc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2111      	movs	r1, #17
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb2a 	bl	8000b70 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <configure_i2c+0xcc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fa64 	bl	80009ee <I2CEnable>

	return;
 8001526:	bf00      	nop
}
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020400 	.word	0x40020400
 8001534:	20000000 	.word	0x20000000

08001538 <LCD_SendChar>:

void LCD_SendChar(uint8_t ch)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fba3 	bl	8000c90 <lcd_pcf8574_send_data>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <LoopForever+0x6>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LoopForever+0xe>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	; (80015a0 <LoopForever+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001582:	f000 f817 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001586:	f7ff fe57 	bl	8001238 <main>

0800158a <LoopForever>:

LoopForever:
  b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   r0, =_estack
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001598:	080027b0 	.word	0x080027b0
  ldr r2, =_sbss
 800159c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015a0:	200000c8 	.word	0x200000c8

080015a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <__errno>:
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <__errno+0x8>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__libc_init_array>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	4d0d      	ldr	r5, [pc, #52]	; (80015ec <__libc_init_array+0x38>)
 80015b8:	4c0d      	ldr	r4, [pc, #52]	; (80015f0 <__libc_init_array+0x3c>)
 80015ba:	1b64      	subs	r4, r4, r5
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	2600      	movs	r6, #0
 80015c0:	42a6      	cmp	r6, r4
 80015c2:	d109      	bne.n	80015d8 <__libc_init_array+0x24>
 80015c4:	4d0b      	ldr	r5, [pc, #44]	; (80015f4 <__libc_init_array+0x40>)
 80015c6:	4c0c      	ldr	r4, [pc, #48]	; (80015f8 <__libc_init_array+0x44>)
 80015c8:	f001 f87c 	bl	80026c4 <_init>
 80015cc:	1b64      	subs	r4, r4, r5
 80015ce:	10a4      	asrs	r4, r4, #2
 80015d0:	2600      	movs	r6, #0
 80015d2:	42a6      	cmp	r6, r4
 80015d4:	d105      	bne.n	80015e2 <__libc_init_array+0x2e>
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015dc:	4798      	blx	r3
 80015de:	3601      	adds	r6, #1
 80015e0:	e7ee      	b.n	80015c0 <__libc_init_array+0xc>
 80015e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e6:	4798      	blx	r3
 80015e8:	3601      	adds	r6, #1
 80015ea:	e7f2      	b.n	80015d2 <__libc_init_array+0x1e>
 80015ec:	080027a8 	.word	0x080027a8
 80015f0:	080027a8 	.word	0x080027a8
 80015f4:	080027a8 	.word	0x080027a8
 80015f8:	080027ac 	.word	0x080027ac

080015fc <memset>:
 80015fc:	4402      	add	r2, r0
 80015fe:	4603      	mov	r3, r0
 8001600:	4293      	cmp	r3, r2
 8001602:	d100      	bne.n	8001606 <memset+0xa>
 8001604:	4770      	bx	lr
 8001606:	f803 1b01 	strb.w	r1, [r3], #1
 800160a:	e7f9      	b.n	8001600 <memset+0x4>

0800160c <iprintf>:
 800160c:	b40f      	push	{r0, r1, r2, r3}
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <iprintf+0x2c>)
 8001610:	b513      	push	{r0, r1, r4, lr}
 8001612:	681c      	ldr	r4, [r3, #0]
 8001614:	b124      	cbz	r4, 8001620 <iprintf+0x14>
 8001616:	69a3      	ldr	r3, [r4, #24]
 8001618:	b913      	cbnz	r3, 8001620 <iprintf+0x14>
 800161a:	4620      	mov	r0, r4
 800161c:	f000 fab2 	bl	8001b84 <__sinit>
 8001620:	ab05      	add	r3, sp, #20
 8001622:	9a04      	ldr	r2, [sp, #16]
 8001624:	68a1      	ldr	r1, [r4, #8]
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fcbf 	bl	8001fac <_vfiprintf_r>
 800162e:	b002      	add	sp, #8
 8001630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001634:	b004      	add	sp, #16
 8001636:	4770      	bx	lr
 8001638:	20000008 	.word	0x20000008

0800163c <setbuf>:
 800163c:	2900      	cmp	r1, #0
 800163e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001642:	bf0c      	ite	eq
 8001644:	2202      	moveq	r2, #2
 8001646:	2200      	movne	r2, #0
 8001648:	f000 b800 	b.w	800164c <setvbuf>

0800164c <setvbuf>:
 800164c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001650:	461d      	mov	r5, r3
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <setvbuf+0x17c>)
 8001654:	681f      	ldr	r7, [r3, #0]
 8001656:	4604      	mov	r4, r0
 8001658:	460e      	mov	r6, r1
 800165a:	4690      	mov	r8, r2
 800165c:	b127      	cbz	r7, 8001668 <setvbuf+0x1c>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	b913      	cbnz	r3, 8001668 <setvbuf+0x1c>
 8001662:	4638      	mov	r0, r7
 8001664:	f000 fa8e 	bl	8001b84 <__sinit>
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <setvbuf+0x180>)
 800166a:	429c      	cmp	r4, r3
 800166c:	d167      	bne.n	800173e <setvbuf+0xf2>
 800166e:	687c      	ldr	r4, [r7, #4]
 8001670:	f1b8 0f02 	cmp.w	r8, #2
 8001674:	d006      	beq.n	8001684 <setvbuf+0x38>
 8001676:	f1b8 0f01 	cmp.w	r8, #1
 800167a:	f200 809f 	bhi.w	80017bc <setvbuf+0x170>
 800167e:	2d00      	cmp	r5, #0
 8001680:	f2c0 809c 	blt.w	80017bc <setvbuf+0x170>
 8001684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001686:	07db      	lsls	r3, r3, #31
 8001688:	d405      	bmi.n	8001696 <setvbuf+0x4a>
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	0598      	lsls	r0, r3, #22
 800168e:	d402      	bmi.n	8001696 <setvbuf+0x4a>
 8001690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001692:	f000 fb15 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 8001696:	4621      	mov	r1, r4
 8001698:	4638      	mov	r0, r7
 800169a:	f000 f9df 	bl	8001a5c <_fflush_r>
 800169e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016a0:	b141      	cbz	r1, 80016b4 <setvbuf+0x68>
 80016a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016a6:	4299      	cmp	r1, r3
 80016a8:	d002      	beq.n	80016b0 <setvbuf+0x64>
 80016aa:	4638      	mov	r0, r7
 80016ac:	f000 fb78 	bl	8001da0 <_free_r>
 80016b0:	2300      	movs	r3, #0
 80016b2:	6363      	str	r3, [r4, #52]	; 0x34
 80016b4:	2300      	movs	r3, #0
 80016b6:	61a3      	str	r3, [r4, #24]
 80016b8:	6063      	str	r3, [r4, #4]
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	0619      	lsls	r1, r3, #24
 80016be:	d503      	bpl.n	80016c8 <setvbuf+0x7c>
 80016c0:	6921      	ldr	r1, [r4, #16]
 80016c2:	4638      	mov	r0, r7
 80016c4:	f000 fb6c 	bl	8001da0 <_free_r>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f1b8 0f02 	cmp.w	r8, #2
 80016d6:	81a3      	strh	r3, [r4, #12]
 80016d8:	d06c      	beq.n	80017b4 <setvbuf+0x168>
 80016da:	ab01      	add	r3, sp, #4
 80016dc:	466a      	mov	r2, sp
 80016de:	4621      	mov	r1, r4
 80016e0:	4638      	mov	r0, r7
 80016e2:	f000 faef 	bl	8001cc4 <__swhatbuf_r>
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	4318      	orrs	r0, r3
 80016ea:	81a0      	strh	r0, [r4, #12]
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d130      	bne.n	8001752 <setvbuf+0x106>
 80016f0:	9d00      	ldr	r5, [sp, #0]
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 fb4c 	bl	8001d90 <malloc>
 80016f8:	4606      	mov	r6, r0
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d155      	bne.n	80017aa <setvbuf+0x15e>
 80016fe:	f8dd 9000 	ldr.w	r9, [sp]
 8001702:	45a9      	cmp	r9, r5
 8001704:	d14a      	bne.n	800179c <setvbuf+0x150>
 8001706:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800170a:	2200      	movs	r2, #0
 800170c:	60a2      	str	r2, [r4, #8]
 800170e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001712:	6022      	str	r2, [r4, #0]
 8001714:	6122      	str	r2, [r4, #16]
 8001716:	2201      	movs	r2, #1
 8001718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800171c:	6162      	str	r2, [r4, #20]
 800171e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	07d2      	lsls	r2, r2, #31
 8001726:	81a3      	strh	r3, [r4, #12]
 8001728:	d405      	bmi.n	8001736 <setvbuf+0xea>
 800172a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800172e:	d102      	bne.n	8001736 <setvbuf+0xea>
 8001730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001732:	f000 fac6 	bl	8001cc2 <__retarget_lock_release_recursive>
 8001736:	4628      	mov	r0, r5
 8001738:	b003      	add	sp, #12
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <setvbuf+0x184>)
 8001740:	429c      	cmp	r4, r3
 8001742:	d101      	bne.n	8001748 <setvbuf+0xfc>
 8001744:	68bc      	ldr	r4, [r7, #8]
 8001746:	e793      	b.n	8001670 <setvbuf+0x24>
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <setvbuf+0x188>)
 800174a:	429c      	cmp	r4, r3
 800174c:	bf08      	it	eq
 800174e:	68fc      	ldreq	r4, [r7, #12]
 8001750:	e78e      	b.n	8001670 <setvbuf+0x24>
 8001752:	2e00      	cmp	r6, #0
 8001754:	d0cd      	beq.n	80016f2 <setvbuf+0xa6>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	b913      	cbnz	r3, 8001760 <setvbuf+0x114>
 800175a:	4638      	mov	r0, r7
 800175c:	f000 fa12 	bl	8001b84 <__sinit>
 8001760:	f1b8 0f01 	cmp.w	r8, #1
 8001764:	bf08      	it	eq
 8001766:	89a3      	ldrheq	r3, [r4, #12]
 8001768:	6026      	str	r6, [r4, #0]
 800176a:	bf04      	itt	eq
 800176c:	f043 0301 	orreq.w	r3, r3, #1
 8001770:	81a3      	strheq	r3, [r4, #12]
 8001772:	89a2      	ldrh	r2, [r4, #12]
 8001774:	f012 0308 	ands.w	r3, r2, #8
 8001778:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800177c:	d01c      	beq.n	80017b8 <setvbuf+0x16c>
 800177e:	07d3      	lsls	r3, r2, #31
 8001780:	bf41      	itttt	mi
 8001782:	2300      	movmi	r3, #0
 8001784:	426d      	negmi	r5, r5
 8001786:	60a3      	strmi	r3, [r4, #8]
 8001788:	61a5      	strmi	r5, [r4, #24]
 800178a:	bf58      	it	pl
 800178c:	60a5      	strpl	r5, [r4, #8]
 800178e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001790:	f015 0501 	ands.w	r5, r5, #1
 8001794:	d115      	bne.n	80017c2 <setvbuf+0x176>
 8001796:	f412 7f00 	tst.w	r2, #512	; 0x200
 800179a:	e7c8      	b.n	800172e <setvbuf+0xe2>
 800179c:	4648      	mov	r0, r9
 800179e:	f000 faf7 	bl	8001d90 <malloc>
 80017a2:	4606      	mov	r6, r0
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d0ae      	beq.n	8001706 <setvbuf+0xba>
 80017a8:	464d      	mov	r5, r9
 80017aa:	89a3      	ldrh	r3, [r4, #12]
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	81a3      	strh	r3, [r4, #12]
 80017b2:	e7d0      	b.n	8001756 <setvbuf+0x10a>
 80017b4:	2500      	movs	r5, #0
 80017b6:	e7a8      	b.n	800170a <setvbuf+0xbe>
 80017b8:	60a3      	str	r3, [r4, #8]
 80017ba:	e7e8      	b.n	800178e <setvbuf+0x142>
 80017bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80017c0:	e7b9      	b.n	8001736 <setvbuf+0xea>
 80017c2:	2500      	movs	r5, #0
 80017c4:	e7b7      	b.n	8001736 <setvbuf+0xea>
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	08002734 	.word	0x08002734
 80017d0:	08002754 	.word	0x08002754
 80017d4:	08002714 	.word	0x08002714

080017d8 <__swbuf_r>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	460e      	mov	r6, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	4605      	mov	r5, r0
 80017e0:	b118      	cbz	r0, 80017ea <__swbuf_r+0x12>
 80017e2:	6983      	ldr	r3, [r0, #24]
 80017e4:	b90b      	cbnz	r3, 80017ea <__swbuf_r+0x12>
 80017e6:	f000 f9cd 	bl	8001b84 <__sinit>
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <__swbuf_r+0x98>)
 80017ec:	429c      	cmp	r4, r3
 80017ee:	d12b      	bne.n	8001848 <__swbuf_r+0x70>
 80017f0:	686c      	ldr	r4, [r5, #4]
 80017f2:	69a3      	ldr	r3, [r4, #24]
 80017f4:	60a3      	str	r3, [r4, #8]
 80017f6:	89a3      	ldrh	r3, [r4, #12]
 80017f8:	071a      	lsls	r2, r3, #28
 80017fa:	d52f      	bpl.n	800185c <__swbuf_r+0x84>
 80017fc:	6923      	ldr	r3, [r4, #16]
 80017fe:	b36b      	cbz	r3, 800185c <__swbuf_r+0x84>
 8001800:	6923      	ldr	r3, [r4, #16]
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	1ac0      	subs	r0, r0, r3
 8001806:	6963      	ldr	r3, [r4, #20]
 8001808:	b2f6      	uxtb	r6, r6
 800180a:	4283      	cmp	r3, r0
 800180c:	4637      	mov	r7, r6
 800180e:	dc04      	bgt.n	800181a <__swbuf_r+0x42>
 8001810:	4621      	mov	r1, r4
 8001812:	4628      	mov	r0, r5
 8001814:	f000 f922 	bl	8001a5c <_fflush_r>
 8001818:	bb30      	cbnz	r0, 8001868 <__swbuf_r+0x90>
 800181a:	68a3      	ldr	r3, [r4, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60a3      	str	r3, [r4, #8]
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	6022      	str	r2, [r4, #0]
 8001826:	701e      	strb	r6, [r3, #0]
 8001828:	6963      	ldr	r3, [r4, #20]
 800182a:	3001      	adds	r0, #1
 800182c:	4283      	cmp	r3, r0
 800182e:	d004      	beq.n	800183a <__swbuf_r+0x62>
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	07db      	lsls	r3, r3, #31
 8001834:	d506      	bpl.n	8001844 <__swbuf_r+0x6c>
 8001836:	2e0a      	cmp	r6, #10
 8001838:	d104      	bne.n	8001844 <__swbuf_r+0x6c>
 800183a:	4621      	mov	r1, r4
 800183c:	4628      	mov	r0, r5
 800183e:	f000 f90d 	bl	8001a5c <_fflush_r>
 8001842:	b988      	cbnz	r0, 8001868 <__swbuf_r+0x90>
 8001844:	4638      	mov	r0, r7
 8001846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <__swbuf_r+0x9c>)
 800184a:	429c      	cmp	r4, r3
 800184c:	d101      	bne.n	8001852 <__swbuf_r+0x7a>
 800184e:	68ac      	ldr	r4, [r5, #8]
 8001850:	e7cf      	b.n	80017f2 <__swbuf_r+0x1a>
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <__swbuf_r+0xa0>)
 8001854:	429c      	cmp	r4, r3
 8001856:	bf08      	it	eq
 8001858:	68ec      	ldreq	r4, [r5, #12]
 800185a:	e7ca      	b.n	80017f2 <__swbuf_r+0x1a>
 800185c:	4621      	mov	r1, r4
 800185e:	4628      	mov	r0, r5
 8001860:	f000 f80c 	bl	800187c <__swsetup_r>
 8001864:	2800      	cmp	r0, #0
 8001866:	d0cb      	beq.n	8001800 <__swbuf_r+0x28>
 8001868:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800186c:	e7ea      	b.n	8001844 <__swbuf_r+0x6c>
 800186e:	bf00      	nop
 8001870:	08002734 	.word	0x08002734
 8001874:	08002754 	.word	0x08002754
 8001878:	08002714 	.word	0x08002714

0800187c <__swsetup_r>:
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <__swsetup_r+0xcc>)
 800187e:	b570      	push	{r4, r5, r6, lr}
 8001880:	681d      	ldr	r5, [r3, #0]
 8001882:	4606      	mov	r6, r0
 8001884:	460c      	mov	r4, r1
 8001886:	b125      	cbz	r5, 8001892 <__swsetup_r+0x16>
 8001888:	69ab      	ldr	r3, [r5, #24]
 800188a:	b913      	cbnz	r3, 8001892 <__swsetup_r+0x16>
 800188c:	4628      	mov	r0, r5
 800188e:	f000 f979 	bl	8001b84 <__sinit>
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <__swsetup_r+0xd0>)
 8001894:	429c      	cmp	r4, r3
 8001896:	d10f      	bne.n	80018b8 <__swsetup_r+0x3c>
 8001898:	686c      	ldr	r4, [r5, #4]
 800189a:	89a3      	ldrh	r3, [r4, #12]
 800189c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018a0:	0719      	lsls	r1, r3, #28
 80018a2:	d42c      	bmi.n	80018fe <__swsetup_r+0x82>
 80018a4:	06dd      	lsls	r5, r3, #27
 80018a6:	d411      	bmi.n	80018cc <__swsetup_r+0x50>
 80018a8:	2309      	movs	r3, #9
 80018aa:	6033      	str	r3, [r6, #0]
 80018ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018b0:	81a3      	strh	r3, [r4, #12]
 80018b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b6:	e03e      	b.n	8001936 <__swsetup_r+0xba>
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <__swsetup_r+0xd4>)
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d101      	bne.n	80018c2 <__swsetup_r+0x46>
 80018be:	68ac      	ldr	r4, [r5, #8]
 80018c0:	e7eb      	b.n	800189a <__swsetup_r+0x1e>
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <__swsetup_r+0xd8>)
 80018c4:	429c      	cmp	r4, r3
 80018c6:	bf08      	it	eq
 80018c8:	68ec      	ldreq	r4, [r5, #12]
 80018ca:	e7e6      	b.n	800189a <__swsetup_r+0x1e>
 80018cc:	0758      	lsls	r0, r3, #29
 80018ce:	d512      	bpl.n	80018f6 <__swsetup_r+0x7a>
 80018d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018d2:	b141      	cbz	r1, 80018e6 <__swsetup_r+0x6a>
 80018d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018d8:	4299      	cmp	r1, r3
 80018da:	d002      	beq.n	80018e2 <__swsetup_r+0x66>
 80018dc:	4630      	mov	r0, r6
 80018de:	f000 fa5f 	bl	8001da0 <_free_r>
 80018e2:	2300      	movs	r3, #0
 80018e4:	6363      	str	r3, [r4, #52]	; 0x34
 80018e6:	89a3      	ldrh	r3, [r4, #12]
 80018e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	2300      	movs	r3, #0
 80018f0:	6063      	str	r3, [r4, #4]
 80018f2:	6923      	ldr	r3, [r4, #16]
 80018f4:	6023      	str	r3, [r4, #0]
 80018f6:	89a3      	ldrh	r3, [r4, #12]
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	81a3      	strh	r3, [r4, #12]
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	b94b      	cbnz	r3, 8001916 <__swsetup_r+0x9a>
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190c:	d003      	beq.n	8001916 <__swsetup_r+0x9a>
 800190e:	4621      	mov	r1, r4
 8001910:	4630      	mov	r0, r6
 8001912:	f000 f9fd 	bl	8001d10 <__smakebuf_r>
 8001916:	89a0      	ldrh	r0, [r4, #12]
 8001918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800191c:	f010 0301 	ands.w	r3, r0, #1
 8001920:	d00a      	beq.n	8001938 <__swsetup_r+0xbc>
 8001922:	2300      	movs	r3, #0
 8001924:	60a3      	str	r3, [r4, #8]
 8001926:	6963      	ldr	r3, [r4, #20]
 8001928:	425b      	negs	r3, r3
 800192a:	61a3      	str	r3, [r4, #24]
 800192c:	6923      	ldr	r3, [r4, #16]
 800192e:	b943      	cbnz	r3, 8001942 <__swsetup_r+0xc6>
 8001930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001934:	d1ba      	bne.n	80018ac <__swsetup_r+0x30>
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	0781      	lsls	r1, r0, #30
 800193a:	bf58      	it	pl
 800193c:	6963      	ldrpl	r3, [r4, #20]
 800193e:	60a3      	str	r3, [r4, #8]
 8001940:	e7f4      	b.n	800192c <__swsetup_r+0xb0>
 8001942:	2000      	movs	r0, #0
 8001944:	e7f7      	b.n	8001936 <__swsetup_r+0xba>
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	08002734 	.word	0x08002734
 8001950:	08002754 	.word	0x08002754
 8001954:	08002714 	.word	0x08002714

08001958 <__sflush_r>:
 8001958:	898a      	ldrh	r2, [r1, #12]
 800195a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195c:	4605      	mov	r5, r0
 800195e:	0710      	lsls	r0, r2, #28
 8001960:	460c      	mov	r4, r1
 8001962:	d457      	bmi.n	8001a14 <__sflush_r+0xbc>
 8001964:	684b      	ldr	r3, [r1, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	dc04      	bgt.n	8001974 <__sflush_r+0x1c>
 800196a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	dc01      	bgt.n	8001974 <__sflush_r+0x1c>
 8001970:	2000      	movs	r0, #0
 8001972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001976:	2e00      	cmp	r6, #0
 8001978:	d0fa      	beq.n	8001970 <__sflush_r+0x18>
 800197a:	2300      	movs	r3, #0
 800197c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001980:	682f      	ldr	r7, [r5, #0]
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	d032      	beq.n	80019ec <__sflush_r+0x94>
 8001986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001988:	89a3      	ldrh	r3, [r4, #12]
 800198a:	075a      	lsls	r2, r3, #29
 800198c:	d505      	bpl.n	800199a <__sflush_r+0x42>
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	1ac0      	subs	r0, r0, r3
 8001992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001994:	b10b      	cbz	r3, 800199a <__sflush_r+0x42>
 8001996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001998:	1ac0      	subs	r0, r0, r3
 800199a:	2300      	movs	r3, #0
 800199c:	4602      	mov	r2, r0
 800199e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019a0:	6a21      	ldr	r1, [r4, #32]
 80019a2:	4628      	mov	r0, r5
 80019a4:	47b0      	blx	r6
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	89a3      	ldrh	r3, [r4, #12]
 80019aa:	d106      	bne.n	80019ba <__sflush_r+0x62>
 80019ac:	6829      	ldr	r1, [r5, #0]
 80019ae:	291d      	cmp	r1, #29
 80019b0:	d82c      	bhi.n	8001a0c <__sflush_r+0xb4>
 80019b2:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <__sflush_r+0x100>)
 80019b4:	40ca      	lsrs	r2, r1
 80019b6:	07d6      	lsls	r6, r2, #31
 80019b8:	d528      	bpl.n	8001a0c <__sflush_r+0xb4>
 80019ba:	2200      	movs	r2, #0
 80019bc:	6062      	str	r2, [r4, #4]
 80019be:	04d9      	lsls	r1, r3, #19
 80019c0:	6922      	ldr	r2, [r4, #16]
 80019c2:	6022      	str	r2, [r4, #0]
 80019c4:	d504      	bpl.n	80019d0 <__sflush_r+0x78>
 80019c6:	1c42      	adds	r2, r0, #1
 80019c8:	d101      	bne.n	80019ce <__sflush_r+0x76>
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	b903      	cbnz	r3, 80019d0 <__sflush_r+0x78>
 80019ce:	6560      	str	r0, [r4, #84]	; 0x54
 80019d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019d2:	602f      	str	r7, [r5, #0]
 80019d4:	2900      	cmp	r1, #0
 80019d6:	d0cb      	beq.n	8001970 <__sflush_r+0x18>
 80019d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019dc:	4299      	cmp	r1, r3
 80019de:	d002      	beq.n	80019e6 <__sflush_r+0x8e>
 80019e0:	4628      	mov	r0, r5
 80019e2:	f000 f9dd 	bl	8001da0 <_free_r>
 80019e6:	2000      	movs	r0, #0
 80019e8:	6360      	str	r0, [r4, #52]	; 0x34
 80019ea:	e7c2      	b.n	8001972 <__sflush_r+0x1a>
 80019ec:	6a21      	ldr	r1, [r4, #32]
 80019ee:	2301      	movs	r3, #1
 80019f0:	4628      	mov	r0, r5
 80019f2:	47b0      	blx	r6
 80019f4:	1c41      	adds	r1, r0, #1
 80019f6:	d1c7      	bne.n	8001988 <__sflush_r+0x30>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0c4      	beq.n	8001988 <__sflush_r+0x30>
 80019fe:	2b1d      	cmp	r3, #29
 8001a00:	d001      	beq.n	8001a06 <__sflush_r+0xae>
 8001a02:	2b16      	cmp	r3, #22
 8001a04:	d101      	bne.n	8001a0a <__sflush_r+0xb2>
 8001a06:	602f      	str	r7, [r5, #0]
 8001a08:	e7b2      	b.n	8001970 <__sflush_r+0x18>
 8001a0a:	89a3      	ldrh	r3, [r4, #12]
 8001a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a10:	81a3      	strh	r3, [r4, #12]
 8001a12:	e7ae      	b.n	8001972 <__sflush_r+0x1a>
 8001a14:	690f      	ldr	r7, [r1, #16]
 8001a16:	2f00      	cmp	r7, #0
 8001a18:	d0aa      	beq.n	8001970 <__sflush_r+0x18>
 8001a1a:	0793      	lsls	r3, r2, #30
 8001a1c:	680e      	ldr	r6, [r1, #0]
 8001a1e:	bf08      	it	eq
 8001a20:	694b      	ldreq	r3, [r1, #20]
 8001a22:	600f      	str	r7, [r1, #0]
 8001a24:	bf18      	it	ne
 8001a26:	2300      	movne	r3, #0
 8001a28:	1bf6      	subs	r6, r6, r7
 8001a2a:	608b      	str	r3, [r1, #8]
 8001a2c:	2e00      	cmp	r6, #0
 8001a2e:	dd9f      	ble.n	8001970 <__sflush_r+0x18>
 8001a30:	6a21      	ldr	r1, [r4, #32]
 8001a32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001a36:	4633      	mov	r3, r6
 8001a38:	463a      	mov	r2, r7
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	47e0      	blx	ip
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	dc06      	bgt.n	8001a50 <__sflush_r+0xf8>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4e:	e790      	b.n	8001972 <__sflush_r+0x1a>
 8001a50:	4407      	add	r7, r0
 8001a52:	1a36      	subs	r6, r6, r0
 8001a54:	e7ea      	b.n	8001a2c <__sflush_r+0xd4>
 8001a56:	bf00      	nop
 8001a58:	20400001 	.word	0x20400001

08001a5c <_fflush_r>:
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	690b      	ldr	r3, [r1, #16]
 8001a60:	4605      	mov	r5, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	b913      	cbnz	r3, 8001a6c <_fflush_r+0x10>
 8001a66:	2500      	movs	r5, #0
 8001a68:	4628      	mov	r0, r5
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	b118      	cbz	r0, 8001a76 <_fflush_r+0x1a>
 8001a6e:	6983      	ldr	r3, [r0, #24]
 8001a70:	b90b      	cbnz	r3, 8001a76 <_fflush_r+0x1a>
 8001a72:	f000 f887 	bl	8001b84 <__sinit>
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <_fflush_r+0x6c>)
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	d11b      	bne.n	8001ab4 <_fflush_r+0x58>
 8001a7c:	686c      	ldr	r4, [r5, #4]
 8001a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0ef      	beq.n	8001a66 <_fflush_r+0xa>
 8001a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a88:	07d0      	lsls	r0, r2, #31
 8001a8a:	d404      	bmi.n	8001a96 <_fflush_r+0x3a>
 8001a8c:	0599      	lsls	r1, r3, #22
 8001a8e:	d402      	bmi.n	8001a96 <_fflush_r+0x3a>
 8001a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a92:	f000 f915 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 8001a96:	4628      	mov	r0, r5
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f7ff ff5d 	bl	8001958 <__sflush_r>
 8001a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	d4e0      	bmi.n	8001a68 <_fflush_r+0xc>
 8001aa6:	89a3      	ldrh	r3, [r4, #12]
 8001aa8:	059b      	lsls	r3, r3, #22
 8001aaa:	d4dd      	bmi.n	8001a68 <_fflush_r+0xc>
 8001aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aae:	f000 f908 	bl	8001cc2 <__retarget_lock_release_recursive>
 8001ab2:	e7d9      	b.n	8001a68 <_fflush_r+0xc>
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <_fflush_r+0x70>)
 8001ab6:	429c      	cmp	r4, r3
 8001ab8:	d101      	bne.n	8001abe <_fflush_r+0x62>
 8001aba:	68ac      	ldr	r4, [r5, #8]
 8001abc:	e7df      	b.n	8001a7e <_fflush_r+0x22>
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <_fflush_r+0x74>)
 8001ac0:	429c      	cmp	r4, r3
 8001ac2:	bf08      	it	eq
 8001ac4:	68ec      	ldreq	r4, [r5, #12]
 8001ac6:	e7da      	b.n	8001a7e <_fflush_r+0x22>
 8001ac8:	08002734 	.word	0x08002734
 8001acc:	08002754 	.word	0x08002754
 8001ad0:	08002714 	.word	0x08002714

08001ad4 <std>:
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
 8001ada:	e9c0 3300 	strd	r3, r3, [r0]
 8001ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ae2:	6083      	str	r3, [r0, #8]
 8001ae4:	8181      	strh	r1, [r0, #12]
 8001ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ae8:	81c2      	strh	r2, [r0, #14]
 8001aea:	6183      	str	r3, [r0, #24]
 8001aec:	4619      	mov	r1, r3
 8001aee:	2208      	movs	r2, #8
 8001af0:	305c      	adds	r0, #92	; 0x5c
 8001af2:	f7ff fd83 	bl	80015fc <memset>
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <std+0x38>)
 8001af8:	6263      	str	r3, [r4, #36]	; 0x24
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <std+0x3c>)
 8001afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <std+0x40>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <std+0x44>)
 8001b04:	6224      	str	r4, [r4, #32]
 8001b06:	6323      	str	r3, [r4, #48]	; 0x30
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08002555 	.word	0x08002555
 8001b10:	08002577 	.word	0x08002577
 8001b14:	080025af 	.word	0x080025af
 8001b18:	080025d3 	.word	0x080025d3

08001b1c <_cleanup_r>:
 8001b1c:	4901      	ldr	r1, [pc, #4]	; (8001b24 <_cleanup_r+0x8>)
 8001b1e:	f000 b8af 	b.w	8001c80 <_fwalk_reent>
 8001b22:	bf00      	nop
 8001b24:	08001a5d 	.word	0x08001a5d

08001b28 <__sfmoreglue>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	2268      	movs	r2, #104	; 0x68
 8001b2c:	1e4d      	subs	r5, r1, #1
 8001b2e:	4355      	muls	r5, r2
 8001b30:	460e      	mov	r6, r1
 8001b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b36:	f000 f99d 	bl	8001e74 <_malloc_r>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	b140      	cbz	r0, 8001b50 <__sfmoreglue+0x28>
 8001b3e:	2100      	movs	r1, #0
 8001b40:	e9c0 1600 	strd	r1, r6, [r0]
 8001b44:	300c      	adds	r0, #12
 8001b46:	60a0      	str	r0, [r4, #8]
 8001b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b4c:	f7ff fd56 	bl	80015fc <memset>
 8001b50:	4620      	mov	r0, r4
 8001b52:	bd70      	pop	{r4, r5, r6, pc}

08001b54 <__sfp_lock_acquire>:
 8001b54:	4801      	ldr	r0, [pc, #4]	; (8001b5c <__sfp_lock_acquire+0x8>)
 8001b56:	f000 b8b3 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8001b5a:	bf00      	nop
 8001b5c:	200000b9 	.word	0x200000b9

08001b60 <__sfp_lock_release>:
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <__sfp_lock_release+0x8>)
 8001b62:	f000 b8ae 	b.w	8001cc2 <__retarget_lock_release_recursive>
 8001b66:	bf00      	nop
 8001b68:	200000b9 	.word	0x200000b9

08001b6c <__sinit_lock_acquire>:
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <__sinit_lock_acquire+0x8>)
 8001b6e:	f000 b8a7 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8001b72:	bf00      	nop
 8001b74:	200000ba 	.word	0x200000ba

08001b78 <__sinit_lock_release>:
 8001b78:	4801      	ldr	r0, [pc, #4]	; (8001b80 <__sinit_lock_release+0x8>)
 8001b7a:	f000 b8a2 	b.w	8001cc2 <__retarget_lock_release_recursive>
 8001b7e:	bf00      	nop
 8001b80:	200000ba 	.word	0x200000ba

08001b84 <__sinit>:
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
 8001b88:	f7ff fff0 	bl	8001b6c <__sinit_lock_acquire>
 8001b8c:	69a3      	ldr	r3, [r4, #24]
 8001b8e:	b11b      	cbz	r3, 8001b98 <__sinit+0x14>
 8001b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b94:	f7ff bff0 	b.w	8001b78 <__sinit_lock_release>
 8001b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <__sinit+0x68>)
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <__sinit+0x6c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	bf04      	itt	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	61a3      	streq	r3, [r4, #24]
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f000 f820 	bl	8001bf4 <__sfp>
 8001bb4:	6060      	str	r0, [r4, #4]
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 f81c 	bl	8001bf4 <__sfp>
 8001bbc:	60a0      	str	r0, [r4, #8]
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f000 f818 	bl	8001bf4 <__sfp>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60e0      	str	r0, [r4, #12]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	6860      	ldr	r0, [r4, #4]
 8001bcc:	f7ff ff82 	bl	8001ad4 <std>
 8001bd0:	68a0      	ldr	r0, [r4, #8]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2109      	movs	r1, #9
 8001bd6:	f7ff ff7d 	bl	8001ad4 <std>
 8001bda:	68e0      	ldr	r0, [r4, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	2112      	movs	r1, #18
 8001be0:	f7ff ff78 	bl	8001ad4 <std>
 8001be4:	2301      	movs	r3, #1
 8001be6:	61a3      	str	r3, [r4, #24]
 8001be8:	e7d2      	b.n	8001b90 <__sinit+0xc>
 8001bea:	bf00      	nop
 8001bec:	08002710 	.word	0x08002710
 8001bf0:	08001b1d 	.word	0x08001b1d

08001bf4 <__sfp>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	4607      	mov	r7, r0
 8001bf8:	f7ff ffac 	bl	8001b54 <__sfp_lock_acquire>
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <__sfp+0x84>)
 8001bfe:	681e      	ldr	r6, [r3, #0]
 8001c00:	69b3      	ldr	r3, [r6, #24]
 8001c02:	b913      	cbnz	r3, 8001c0a <__sfp+0x16>
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff ffbd 	bl	8001b84 <__sinit>
 8001c0a:	3648      	adds	r6, #72	; 0x48
 8001c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	d503      	bpl.n	8001c1c <__sfp+0x28>
 8001c14:	6833      	ldr	r3, [r6, #0]
 8001c16:	b30b      	cbz	r3, 8001c5c <__sfp+0x68>
 8001c18:	6836      	ldr	r6, [r6, #0]
 8001c1a:	e7f7      	b.n	8001c0c <__sfp+0x18>
 8001c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c20:	b9d5      	cbnz	r5, 8001c58 <__sfp+0x64>
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <__sfp+0x88>)
 8001c24:	60e3      	str	r3, [r4, #12]
 8001c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8001c2c:	f000 f847 	bl	8001cbe <__retarget_lock_init_recursive>
 8001c30:	f7ff ff96 	bl	8001b60 <__sfp_lock_release>
 8001c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c3c:	6025      	str	r5, [r4, #0]
 8001c3e:	61a5      	str	r5, [r4, #24]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4629      	mov	r1, r5
 8001c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c48:	f7ff fcd8 	bl	80015fc <memset>
 8001c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c54:	4620      	mov	r0, r4
 8001c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c58:	3468      	adds	r4, #104	; 0x68
 8001c5a:	e7d9      	b.n	8001c10 <__sfp+0x1c>
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4638      	mov	r0, r7
 8001c60:	f7ff ff62 	bl	8001b28 <__sfmoreglue>
 8001c64:	4604      	mov	r4, r0
 8001c66:	6030      	str	r0, [r6, #0]
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d1d5      	bne.n	8001c18 <__sfp+0x24>
 8001c6c:	f7ff ff78 	bl	8001b60 <__sfp_lock_release>
 8001c70:	230c      	movs	r3, #12
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	e7ee      	b.n	8001c54 <__sfp+0x60>
 8001c76:	bf00      	nop
 8001c78:	08002710 	.word	0x08002710
 8001c7c:	ffff0001 	.word	0xffff0001

08001c80 <_fwalk_reent>:
 8001c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c84:	4606      	mov	r6, r0
 8001c86:	4688      	mov	r8, r1
 8001c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c8c:	2700      	movs	r7, #0
 8001c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c92:	f1b9 0901 	subs.w	r9, r9, #1
 8001c96:	d505      	bpl.n	8001ca4 <_fwalk_reent+0x24>
 8001c98:	6824      	ldr	r4, [r4, #0]
 8001c9a:	2c00      	cmp	r4, #0
 8001c9c:	d1f7      	bne.n	8001c8e <_fwalk_reent+0xe>
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca4:	89ab      	ldrh	r3, [r5, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d907      	bls.n	8001cba <_fwalk_reent+0x3a>
 8001caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	d003      	beq.n	8001cba <_fwalk_reent+0x3a>
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	47c0      	blx	r8
 8001cb8:	4307      	orrs	r7, r0
 8001cba:	3568      	adds	r5, #104	; 0x68
 8001cbc:	e7e9      	b.n	8001c92 <_fwalk_reent+0x12>

08001cbe <__retarget_lock_init_recursive>:
 8001cbe:	4770      	bx	lr

08001cc0 <__retarget_lock_acquire_recursive>:
 8001cc0:	4770      	bx	lr

08001cc2 <__retarget_lock_release_recursive>:
 8001cc2:	4770      	bx	lr

08001cc4 <__swhatbuf_r>:
 8001cc4:	b570      	push	{r4, r5, r6, lr}
 8001cc6:	460e      	mov	r6, r1
 8001cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ccc:	2900      	cmp	r1, #0
 8001cce:	b096      	sub	sp, #88	; 0x58
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	da08      	bge.n	8001ce8 <__swhatbuf_r+0x24>
 8001cd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	602a      	str	r2, [r5, #0]
 8001cde:	061a      	lsls	r2, r3, #24
 8001ce0:	d410      	bmi.n	8001d04 <__swhatbuf_r+0x40>
 8001ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce6:	e00e      	b.n	8001d06 <__swhatbuf_r+0x42>
 8001ce8:	466a      	mov	r2, sp
 8001cea:	f000 fc99 	bl	8002620 <_fstat_r>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	dbf1      	blt.n	8001cd6 <__swhatbuf_r+0x12>
 8001cf2:	9a01      	ldr	r2, [sp, #4]
 8001cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cfc:	425a      	negs	r2, r3
 8001cfe:	415a      	adcs	r2, r3
 8001d00:	602a      	str	r2, [r5, #0]
 8001d02:	e7ee      	b.n	8001ce2 <__swhatbuf_r+0x1e>
 8001d04:	2340      	movs	r3, #64	; 0x40
 8001d06:	2000      	movs	r0, #0
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	b016      	add	sp, #88	; 0x58
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d10 <__smakebuf_r>:
 8001d10:	898b      	ldrh	r3, [r1, #12]
 8001d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d14:	079d      	lsls	r5, r3, #30
 8001d16:	4606      	mov	r6, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	d507      	bpl.n	8001d2c <__smakebuf_r+0x1c>
 8001d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	6123      	str	r3, [r4, #16]
 8001d24:	2301      	movs	r3, #1
 8001d26:	6163      	str	r3, [r4, #20]
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	ab01      	add	r3, sp, #4
 8001d2e:	466a      	mov	r2, sp
 8001d30:	f7ff ffc8 	bl	8001cc4 <__swhatbuf_r>
 8001d34:	9900      	ldr	r1, [sp, #0]
 8001d36:	4605      	mov	r5, r0
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f000 f89b 	bl	8001e74 <_malloc_r>
 8001d3e:	b948      	cbnz	r0, 8001d54 <__smakebuf_r+0x44>
 8001d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d44:	059a      	lsls	r2, r3, #22
 8001d46:	d4ef      	bmi.n	8001d28 <__smakebuf_r+0x18>
 8001d48:	f023 0303 	bic.w	r3, r3, #3
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	81a3      	strh	r3, [r4, #12]
 8001d52:	e7e3      	b.n	8001d1c <__smakebuf_r+0xc>
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <__smakebuf_r+0x7c>)
 8001d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	6020      	str	r0, [r4, #0]
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	81a3      	strh	r3, [r4, #12]
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	6163      	str	r3, [r4, #20]
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	6120      	str	r0, [r4, #16]
 8001d6a:	b15b      	cbz	r3, 8001d84 <__smakebuf_r+0x74>
 8001d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d70:	4630      	mov	r0, r6
 8001d72:	f000 fc67 	bl	8002644 <_isatty_r>
 8001d76:	b128      	cbz	r0, 8001d84 <__smakebuf_r+0x74>
 8001d78:	89a3      	ldrh	r3, [r4, #12]
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	81a3      	strh	r3, [r4, #12]
 8001d84:	89a0      	ldrh	r0, [r4, #12]
 8001d86:	4305      	orrs	r5, r0
 8001d88:	81a5      	strh	r5, [r4, #12]
 8001d8a:	e7cd      	b.n	8001d28 <__smakebuf_r+0x18>
 8001d8c:	08001b1d 	.word	0x08001b1d

08001d90 <malloc>:
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <malloc+0xc>)
 8001d92:	4601      	mov	r1, r0
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f000 b86d 	b.w	8001e74 <_malloc_r>
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <_free_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4605      	mov	r5, r0
 8001da4:	2900      	cmp	r1, #0
 8001da6:	d041      	beq.n	8001e2c <_free_r+0x8c>
 8001da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dac:	1f0c      	subs	r4, r1, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bfb8      	it	lt
 8001db2:	18e4      	addlt	r4, r4, r3
 8001db4:	f000 fc68 	bl	8002688 <__malloc_lock>
 8001db8:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <_free_r+0x90>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	b933      	cbnz	r3, 8001dcc <_free_r+0x2c>
 8001dbe:	6063      	str	r3, [r4, #4]
 8001dc0:	6014      	str	r4, [r2, #0]
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dc8:	f000 bc64 	b.w	8002694 <__malloc_unlock>
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	d908      	bls.n	8001de2 <_free_r+0x42>
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	1821      	adds	r1, r4, r0
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	bf01      	itttt	eq
 8001dd8:	6819      	ldreq	r1, [r3, #0]
 8001dda:	685b      	ldreq	r3, [r3, #4]
 8001ddc:	1809      	addeq	r1, r1, r0
 8001dde:	6021      	streq	r1, [r4, #0]
 8001de0:	e7ed      	b.n	8001dbe <_free_r+0x1e>
 8001de2:	461a      	mov	r2, r3
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	b10b      	cbz	r3, 8001dec <_free_r+0x4c>
 8001de8:	42a3      	cmp	r3, r4
 8001dea:	d9fa      	bls.n	8001de2 <_free_r+0x42>
 8001dec:	6811      	ldr	r1, [r2, #0]
 8001dee:	1850      	adds	r0, r2, r1
 8001df0:	42a0      	cmp	r0, r4
 8001df2:	d10b      	bne.n	8001e0c <_free_r+0x6c>
 8001df4:	6820      	ldr	r0, [r4, #0]
 8001df6:	4401      	add	r1, r0
 8001df8:	1850      	adds	r0, r2, r1
 8001dfa:	4283      	cmp	r3, r0
 8001dfc:	6011      	str	r1, [r2, #0]
 8001dfe:	d1e0      	bne.n	8001dc2 <_free_r+0x22>
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	6053      	str	r3, [r2, #4]
 8001e06:	4401      	add	r1, r0
 8001e08:	6011      	str	r1, [r2, #0]
 8001e0a:	e7da      	b.n	8001dc2 <_free_r+0x22>
 8001e0c:	d902      	bls.n	8001e14 <_free_r+0x74>
 8001e0e:	230c      	movs	r3, #12
 8001e10:	602b      	str	r3, [r5, #0]
 8001e12:	e7d6      	b.n	8001dc2 <_free_r+0x22>
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	1821      	adds	r1, r4, r0
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	bf04      	itt	eq
 8001e1c:	6819      	ldreq	r1, [r3, #0]
 8001e1e:	685b      	ldreq	r3, [r3, #4]
 8001e20:	6063      	str	r3, [r4, #4]
 8001e22:	bf04      	itt	eq
 8001e24:	1809      	addeq	r1, r1, r0
 8001e26:	6021      	streq	r1, [r4, #0]
 8001e28:	6054      	str	r4, [r2, #4]
 8001e2a:	e7ca      	b.n	8001dc2 <_free_r+0x22>
 8001e2c:	bd38      	pop	{r3, r4, r5, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000bc 	.word	0x200000bc

08001e34 <sbrk_aligned>:
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	4e0e      	ldr	r6, [pc, #56]	; (8001e70 <sbrk_aligned+0x3c>)
 8001e38:	460c      	mov	r4, r1
 8001e3a:	6831      	ldr	r1, [r6, #0]
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	b911      	cbnz	r1, 8001e46 <sbrk_aligned+0x12>
 8001e40:	f000 fb78 	bl	8002534 <_sbrk_r>
 8001e44:	6030      	str	r0, [r6, #0]
 8001e46:	4621      	mov	r1, r4
 8001e48:	4628      	mov	r0, r5
 8001e4a:	f000 fb73 	bl	8002534 <_sbrk_r>
 8001e4e:	1c43      	adds	r3, r0, #1
 8001e50:	d00a      	beq.n	8001e68 <sbrk_aligned+0x34>
 8001e52:	1cc4      	adds	r4, r0, #3
 8001e54:	f024 0403 	bic.w	r4, r4, #3
 8001e58:	42a0      	cmp	r0, r4
 8001e5a:	d007      	beq.n	8001e6c <sbrk_aligned+0x38>
 8001e5c:	1a21      	subs	r1, r4, r0
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f000 fb68 	bl	8002534 <_sbrk_r>
 8001e64:	3001      	adds	r0, #1
 8001e66:	d101      	bne.n	8001e6c <sbrk_aligned+0x38>
 8001e68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	200000c0 	.word	0x200000c0

08001e74 <_malloc_r>:
 8001e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e78:	1ccd      	adds	r5, r1, #3
 8001e7a:	f025 0503 	bic.w	r5, r5, #3
 8001e7e:	3508      	adds	r5, #8
 8001e80:	2d0c      	cmp	r5, #12
 8001e82:	bf38      	it	cc
 8001e84:	250c      	movcc	r5, #12
 8001e86:	2d00      	cmp	r5, #0
 8001e88:	4607      	mov	r7, r0
 8001e8a:	db01      	blt.n	8001e90 <_malloc_r+0x1c>
 8001e8c:	42a9      	cmp	r1, r5
 8001e8e:	d905      	bls.n	8001e9c <_malloc_r+0x28>
 8001e90:	230c      	movs	r3, #12
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	2600      	movs	r6, #0
 8001e96:	4630      	mov	r0, r6
 8001e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e9c:	4e2e      	ldr	r6, [pc, #184]	; (8001f58 <_malloc_r+0xe4>)
 8001e9e:	f000 fbf3 	bl	8002688 <__malloc_lock>
 8001ea2:	6833      	ldr	r3, [r6, #0]
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	bb34      	cbnz	r4, 8001ef6 <_malloc_r+0x82>
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	4638      	mov	r0, r7
 8001eac:	f7ff ffc2 	bl	8001e34 <sbrk_aligned>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	d14d      	bne.n	8001f52 <_malloc_r+0xde>
 8001eb6:	6834      	ldr	r4, [r6, #0]
 8001eb8:	4626      	mov	r6, r4
 8001eba:	2e00      	cmp	r6, #0
 8001ebc:	d140      	bne.n	8001f40 <_malloc_r+0xcc>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	4631      	mov	r1, r6
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	eb04 0803 	add.w	r8, r4, r3
 8001ec8:	f000 fb34 	bl	8002534 <_sbrk_r>
 8001ecc:	4580      	cmp	r8, r0
 8001ece:	d13a      	bne.n	8001f46 <_malloc_r+0xd2>
 8001ed0:	6821      	ldr	r1, [r4, #0]
 8001ed2:	3503      	adds	r5, #3
 8001ed4:	1a6d      	subs	r5, r5, r1
 8001ed6:	f025 0503 	bic.w	r5, r5, #3
 8001eda:	3508      	adds	r5, #8
 8001edc:	2d0c      	cmp	r5, #12
 8001ede:	bf38      	it	cc
 8001ee0:	250c      	movcc	r5, #12
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	4638      	mov	r0, r7
 8001ee6:	f7ff ffa5 	bl	8001e34 <sbrk_aligned>
 8001eea:	3001      	adds	r0, #1
 8001eec:	d02b      	beq.n	8001f46 <_malloc_r+0xd2>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	442b      	add	r3, r5
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	e00e      	b.n	8001f14 <_malloc_r+0xa0>
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	1b52      	subs	r2, r2, r5
 8001efa:	d41e      	bmi.n	8001f3a <_malloc_r+0xc6>
 8001efc:	2a0b      	cmp	r2, #11
 8001efe:	d916      	bls.n	8001f2e <_malloc_r+0xba>
 8001f00:	1961      	adds	r1, r4, r5
 8001f02:	42a3      	cmp	r3, r4
 8001f04:	6025      	str	r5, [r4, #0]
 8001f06:	bf18      	it	ne
 8001f08:	6059      	strne	r1, [r3, #4]
 8001f0a:	6863      	ldr	r3, [r4, #4]
 8001f0c:	bf08      	it	eq
 8001f0e:	6031      	streq	r1, [r6, #0]
 8001f10:	5162      	str	r2, [r4, r5]
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	4638      	mov	r0, r7
 8001f16:	f104 060b 	add.w	r6, r4, #11
 8001f1a:	f000 fbbb 	bl	8002694 <__malloc_unlock>
 8001f1e:	f026 0607 	bic.w	r6, r6, #7
 8001f22:	1d23      	adds	r3, r4, #4
 8001f24:	1af2      	subs	r2, r6, r3
 8001f26:	d0b6      	beq.n	8001e96 <_malloc_r+0x22>
 8001f28:	1b9b      	subs	r3, r3, r6
 8001f2a:	50a3      	str	r3, [r4, r2]
 8001f2c:	e7b3      	b.n	8001e96 <_malloc_r+0x22>
 8001f2e:	6862      	ldr	r2, [r4, #4]
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	bf0c      	ite	eq
 8001f34:	6032      	streq	r2, [r6, #0]
 8001f36:	605a      	strne	r2, [r3, #4]
 8001f38:	e7ec      	b.n	8001f14 <_malloc_r+0xa0>
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	6864      	ldr	r4, [r4, #4]
 8001f3e:	e7b2      	b.n	8001ea6 <_malloc_r+0x32>
 8001f40:	4634      	mov	r4, r6
 8001f42:	6876      	ldr	r6, [r6, #4]
 8001f44:	e7b9      	b.n	8001eba <_malloc_r+0x46>
 8001f46:	230c      	movs	r3, #12
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	f000 fba2 	bl	8002694 <__malloc_unlock>
 8001f50:	e7a1      	b.n	8001e96 <_malloc_r+0x22>
 8001f52:	6025      	str	r5, [r4, #0]
 8001f54:	e7de      	b.n	8001f14 <_malloc_r+0xa0>
 8001f56:	bf00      	nop
 8001f58:	200000bc 	.word	0x200000bc

08001f5c <__sfputc_r>:
 8001f5c:	6893      	ldr	r3, [r2, #8]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	b410      	push	{r4}
 8001f64:	6093      	str	r3, [r2, #8]
 8001f66:	da07      	bge.n	8001f78 <__sfputc_r+0x1c>
 8001f68:	6994      	ldr	r4, [r2, #24]
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	db01      	blt.n	8001f72 <__sfputc_r+0x16>
 8001f6e:	290a      	cmp	r1, #10
 8001f70:	d102      	bne.n	8001f78 <__sfputc_r+0x1c>
 8001f72:	bc10      	pop	{r4}
 8001f74:	f7ff bc30 	b.w	80017d8 <__swbuf_r>
 8001f78:	6813      	ldr	r3, [r2, #0]
 8001f7a:	1c58      	adds	r0, r3, #1
 8001f7c:	6010      	str	r0, [r2, #0]
 8001f7e:	7019      	strb	r1, [r3, #0]
 8001f80:	4608      	mov	r0, r1
 8001f82:	bc10      	pop	{r4}
 8001f84:	4770      	bx	lr

08001f86 <__sfputs_r>:
 8001f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f88:	4606      	mov	r6, r0
 8001f8a:	460f      	mov	r7, r1
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	18d5      	adds	r5, r2, r3
 8001f90:	42ac      	cmp	r4, r5
 8001f92:	d101      	bne.n	8001f98 <__sfputs_r+0x12>
 8001f94:	2000      	movs	r0, #0
 8001f96:	e007      	b.n	8001fa8 <__sfputs_r+0x22>
 8001f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	f7ff ffdc 	bl	8001f5c <__sfputc_r>
 8001fa4:	1c43      	adds	r3, r0, #1
 8001fa6:	d1f3      	bne.n	8001f90 <__sfputs_r+0xa>
 8001fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001fac <_vfiprintf_r>:
 8001fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	b09d      	sub	sp, #116	; 0x74
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	4606      	mov	r6, r0
 8001fba:	b118      	cbz	r0, 8001fc4 <_vfiprintf_r+0x18>
 8001fbc:	6983      	ldr	r3, [r0, #24]
 8001fbe:	b90b      	cbnz	r3, 8001fc4 <_vfiprintf_r+0x18>
 8001fc0:	f7ff fde0 	bl	8001b84 <__sinit>
 8001fc4:	4b89      	ldr	r3, [pc, #548]	; (80021ec <_vfiprintf_r+0x240>)
 8001fc6:	429d      	cmp	r5, r3
 8001fc8:	d11b      	bne.n	8002002 <_vfiprintf_r+0x56>
 8001fca:	6875      	ldr	r5, [r6, #4]
 8001fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fce:	07d9      	lsls	r1, r3, #31
 8001fd0:	d405      	bmi.n	8001fde <_vfiprintf_r+0x32>
 8001fd2:	89ab      	ldrh	r3, [r5, #12]
 8001fd4:	059a      	lsls	r2, r3, #22
 8001fd6:	d402      	bmi.n	8001fde <_vfiprintf_r+0x32>
 8001fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fda:	f7ff fe71 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 8001fde:	89ab      	ldrh	r3, [r5, #12]
 8001fe0:	071b      	lsls	r3, r3, #28
 8001fe2:	d501      	bpl.n	8001fe8 <_vfiprintf_r+0x3c>
 8001fe4:	692b      	ldr	r3, [r5, #16]
 8001fe6:	b9eb      	cbnz	r3, 8002024 <_vfiprintf_r+0x78>
 8001fe8:	4629      	mov	r1, r5
 8001fea:	4630      	mov	r0, r6
 8001fec:	f7ff fc46 	bl	800187c <__swsetup_r>
 8001ff0:	b1c0      	cbz	r0, 8002024 <_vfiprintf_r+0x78>
 8001ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ff4:	07dc      	lsls	r4, r3, #31
 8001ff6:	d50e      	bpl.n	8002016 <_vfiprintf_r+0x6a>
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffc:	b01d      	add	sp, #116	; 0x74
 8001ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002002:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <_vfiprintf_r+0x244>)
 8002004:	429d      	cmp	r5, r3
 8002006:	d101      	bne.n	800200c <_vfiprintf_r+0x60>
 8002008:	68b5      	ldr	r5, [r6, #8]
 800200a:	e7df      	b.n	8001fcc <_vfiprintf_r+0x20>
 800200c:	4b79      	ldr	r3, [pc, #484]	; (80021f4 <_vfiprintf_r+0x248>)
 800200e:	429d      	cmp	r5, r3
 8002010:	bf08      	it	eq
 8002012:	68f5      	ldreq	r5, [r6, #12]
 8002014:	e7da      	b.n	8001fcc <_vfiprintf_r+0x20>
 8002016:	89ab      	ldrh	r3, [r5, #12]
 8002018:	0598      	lsls	r0, r3, #22
 800201a:	d4ed      	bmi.n	8001ff8 <_vfiprintf_r+0x4c>
 800201c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800201e:	f7ff fe50 	bl	8001cc2 <__retarget_lock_release_recursive>
 8002022:	e7e9      	b.n	8001ff8 <_vfiprintf_r+0x4c>
 8002024:	2300      	movs	r3, #0
 8002026:	9309      	str	r3, [sp, #36]	; 0x24
 8002028:	2320      	movs	r3, #32
 800202a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800202e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002032:	2330      	movs	r3, #48	; 0x30
 8002034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80021f8 <_vfiprintf_r+0x24c>
 8002038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800203c:	f04f 0901 	mov.w	r9, #1
 8002040:	4623      	mov	r3, r4
 8002042:	469a      	mov	sl, r3
 8002044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002048:	b10a      	cbz	r2, 800204e <_vfiprintf_r+0xa2>
 800204a:	2a25      	cmp	r2, #37	; 0x25
 800204c:	d1f9      	bne.n	8002042 <_vfiprintf_r+0x96>
 800204e:	ebba 0b04 	subs.w	fp, sl, r4
 8002052:	d00b      	beq.n	800206c <_vfiprintf_r+0xc0>
 8002054:	465b      	mov	r3, fp
 8002056:	4622      	mov	r2, r4
 8002058:	4629      	mov	r1, r5
 800205a:	4630      	mov	r0, r6
 800205c:	f7ff ff93 	bl	8001f86 <__sfputs_r>
 8002060:	3001      	adds	r0, #1
 8002062:	f000 80aa 	beq.w	80021ba <_vfiprintf_r+0x20e>
 8002066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002068:	445a      	add	r2, fp
 800206a:	9209      	str	r2, [sp, #36]	; 0x24
 800206c:	f89a 3000 	ldrb.w	r3, [sl]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a2 	beq.w	80021ba <_vfiprintf_r+0x20e>
 8002076:	2300      	movs	r3, #0
 8002078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800207c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002080:	f10a 0a01 	add.w	sl, sl, #1
 8002084:	9304      	str	r3, [sp, #16]
 8002086:	9307      	str	r3, [sp, #28]
 8002088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800208c:	931a      	str	r3, [sp, #104]	; 0x68
 800208e:	4654      	mov	r4, sl
 8002090:	2205      	movs	r2, #5
 8002092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002096:	4858      	ldr	r0, [pc, #352]	; (80021f8 <_vfiprintf_r+0x24c>)
 8002098:	f7fe f8aa 	bl	80001f0 <memchr>
 800209c:	9a04      	ldr	r2, [sp, #16]
 800209e:	b9d8      	cbnz	r0, 80020d8 <_vfiprintf_r+0x12c>
 80020a0:	06d1      	lsls	r1, r2, #27
 80020a2:	bf44      	itt	mi
 80020a4:	2320      	movmi	r3, #32
 80020a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020aa:	0713      	lsls	r3, r2, #28
 80020ac:	bf44      	itt	mi
 80020ae:	232b      	movmi	r3, #43	; 0x2b
 80020b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020b4:	f89a 3000 	ldrb.w	r3, [sl]
 80020b8:	2b2a      	cmp	r3, #42	; 0x2a
 80020ba:	d015      	beq.n	80020e8 <_vfiprintf_r+0x13c>
 80020bc:	9a07      	ldr	r2, [sp, #28]
 80020be:	4654      	mov	r4, sl
 80020c0:	2000      	movs	r0, #0
 80020c2:	f04f 0c0a 	mov.w	ip, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020cc:	3b30      	subs	r3, #48	; 0x30
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	d94e      	bls.n	8002170 <_vfiprintf_r+0x1c4>
 80020d2:	b1b0      	cbz	r0, 8002102 <_vfiprintf_r+0x156>
 80020d4:	9207      	str	r2, [sp, #28]
 80020d6:	e014      	b.n	8002102 <_vfiprintf_r+0x156>
 80020d8:	eba0 0308 	sub.w	r3, r0, r8
 80020dc:	fa09 f303 	lsl.w	r3, r9, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	9304      	str	r3, [sp, #16]
 80020e4:	46a2      	mov	sl, r4
 80020e6:	e7d2      	b.n	800208e <_vfiprintf_r+0xe2>
 80020e8:	9b03      	ldr	r3, [sp, #12]
 80020ea:	1d19      	adds	r1, r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	9103      	str	r1, [sp, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bfbb      	ittet	lt
 80020f4:	425b      	neglt	r3, r3
 80020f6:	f042 0202 	orrlt.w	r2, r2, #2
 80020fa:	9307      	strge	r3, [sp, #28]
 80020fc:	9307      	strlt	r3, [sp, #28]
 80020fe:	bfb8      	it	lt
 8002100:	9204      	strlt	r2, [sp, #16]
 8002102:	7823      	ldrb	r3, [r4, #0]
 8002104:	2b2e      	cmp	r3, #46	; 0x2e
 8002106:	d10c      	bne.n	8002122 <_vfiprintf_r+0x176>
 8002108:	7863      	ldrb	r3, [r4, #1]
 800210a:	2b2a      	cmp	r3, #42	; 0x2a
 800210c:	d135      	bne.n	800217a <_vfiprintf_r+0x1ce>
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	1d1a      	adds	r2, r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	9203      	str	r2, [sp, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	bfb8      	it	lt
 800211a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800211e:	3402      	adds	r4, #2
 8002120:	9305      	str	r3, [sp, #20]
 8002122:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80021fc <_vfiprintf_r+0x250>
 8002126:	7821      	ldrb	r1, [r4, #0]
 8002128:	2203      	movs	r2, #3
 800212a:	4650      	mov	r0, sl
 800212c:	f7fe f860 	bl	80001f0 <memchr>
 8002130:	b140      	cbz	r0, 8002144 <_vfiprintf_r+0x198>
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	eba0 000a 	sub.w	r0, r0, sl
 8002138:	fa03 f000 	lsl.w	r0, r3, r0
 800213c:	9b04      	ldr	r3, [sp, #16]
 800213e:	4303      	orrs	r3, r0
 8002140:	3401      	adds	r4, #1
 8002142:	9304      	str	r3, [sp, #16]
 8002144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002148:	482d      	ldr	r0, [pc, #180]	; (8002200 <_vfiprintf_r+0x254>)
 800214a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800214e:	2206      	movs	r2, #6
 8002150:	f7fe f84e 	bl	80001f0 <memchr>
 8002154:	2800      	cmp	r0, #0
 8002156:	d03f      	beq.n	80021d8 <_vfiprintf_r+0x22c>
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <_vfiprintf_r+0x258>)
 800215a:	bb1b      	cbnz	r3, 80021a4 <_vfiprintf_r+0x1f8>
 800215c:	9b03      	ldr	r3, [sp, #12]
 800215e:	3307      	adds	r3, #7
 8002160:	f023 0307 	bic.w	r3, r3, #7
 8002164:	3308      	adds	r3, #8
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800216a:	443b      	add	r3, r7
 800216c:	9309      	str	r3, [sp, #36]	; 0x24
 800216e:	e767      	b.n	8002040 <_vfiprintf_r+0x94>
 8002170:	fb0c 3202 	mla	r2, ip, r2, r3
 8002174:	460c      	mov	r4, r1
 8002176:	2001      	movs	r0, #1
 8002178:	e7a5      	b.n	80020c6 <_vfiprintf_r+0x11a>
 800217a:	2300      	movs	r3, #0
 800217c:	3401      	adds	r4, #1
 800217e:	9305      	str	r3, [sp, #20]
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 0c0a 	mov.w	ip, #10
 8002186:	4620      	mov	r0, r4
 8002188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800218c:	3a30      	subs	r2, #48	; 0x30
 800218e:	2a09      	cmp	r2, #9
 8002190:	d903      	bls.n	800219a <_vfiprintf_r+0x1ee>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0c5      	beq.n	8002122 <_vfiprintf_r+0x176>
 8002196:	9105      	str	r1, [sp, #20]
 8002198:	e7c3      	b.n	8002122 <_vfiprintf_r+0x176>
 800219a:	fb0c 2101 	mla	r1, ip, r1, r2
 800219e:	4604      	mov	r4, r0
 80021a0:	2301      	movs	r3, #1
 80021a2:	e7f0      	b.n	8002186 <_vfiprintf_r+0x1da>
 80021a4:	ab03      	add	r3, sp, #12
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	462a      	mov	r2, r5
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <_vfiprintf_r+0x25c>)
 80021ac:	a904      	add	r1, sp, #16
 80021ae:	4630      	mov	r0, r6
 80021b0:	f3af 8000 	nop.w
 80021b4:	4607      	mov	r7, r0
 80021b6:	1c78      	adds	r0, r7, #1
 80021b8:	d1d6      	bne.n	8002168 <_vfiprintf_r+0x1bc>
 80021ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021bc:	07d9      	lsls	r1, r3, #31
 80021be:	d405      	bmi.n	80021cc <_vfiprintf_r+0x220>
 80021c0:	89ab      	ldrh	r3, [r5, #12]
 80021c2:	059a      	lsls	r2, r3, #22
 80021c4:	d402      	bmi.n	80021cc <_vfiprintf_r+0x220>
 80021c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021c8:	f7ff fd7b 	bl	8001cc2 <__retarget_lock_release_recursive>
 80021cc:	89ab      	ldrh	r3, [r5, #12]
 80021ce:	065b      	lsls	r3, r3, #25
 80021d0:	f53f af12 	bmi.w	8001ff8 <_vfiprintf_r+0x4c>
 80021d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021d6:	e711      	b.n	8001ffc <_vfiprintf_r+0x50>
 80021d8:	ab03      	add	r3, sp, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	462a      	mov	r2, r5
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <_vfiprintf_r+0x25c>)
 80021e0:	a904      	add	r1, sp, #16
 80021e2:	4630      	mov	r0, r6
 80021e4:	f000 f880 	bl	80022e8 <_printf_i>
 80021e8:	e7e4      	b.n	80021b4 <_vfiprintf_r+0x208>
 80021ea:	bf00      	nop
 80021ec:	08002734 	.word	0x08002734
 80021f0:	08002754 	.word	0x08002754
 80021f4:	08002714 	.word	0x08002714
 80021f8:	08002774 	.word	0x08002774
 80021fc:	0800277a 	.word	0x0800277a
 8002200:	0800277e 	.word	0x0800277e
 8002204:	00000000 	.word	0x00000000
 8002208:	08001f87 	.word	0x08001f87

0800220c <_printf_common>:
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	4616      	mov	r6, r2
 8002212:	4699      	mov	r9, r3
 8002214:	688a      	ldr	r2, [r1, #8]
 8002216:	690b      	ldr	r3, [r1, #16]
 8002218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800221c:	4293      	cmp	r3, r2
 800221e:	bfb8      	it	lt
 8002220:	4613      	movlt	r3, r2
 8002222:	6033      	str	r3, [r6, #0]
 8002224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002228:	4607      	mov	r7, r0
 800222a:	460c      	mov	r4, r1
 800222c:	b10a      	cbz	r2, 8002232 <_printf_common+0x26>
 800222e:	3301      	adds	r3, #1
 8002230:	6033      	str	r3, [r6, #0]
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	0699      	lsls	r1, r3, #26
 8002236:	bf42      	ittt	mi
 8002238:	6833      	ldrmi	r3, [r6, #0]
 800223a:	3302      	addmi	r3, #2
 800223c:	6033      	strmi	r3, [r6, #0]
 800223e:	6825      	ldr	r5, [r4, #0]
 8002240:	f015 0506 	ands.w	r5, r5, #6
 8002244:	d106      	bne.n	8002254 <_printf_common+0x48>
 8002246:	f104 0a19 	add.w	sl, r4, #25
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	6832      	ldr	r2, [r6, #0]
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	42ab      	cmp	r3, r5
 8002252:	dc26      	bgt.n	80022a2 <_printf_common+0x96>
 8002254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002258:	1e13      	subs	r3, r2, #0
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	bf18      	it	ne
 800225e:	2301      	movne	r3, #1
 8002260:	0692      	lsls	r2, r2, #26
 8002262:	d42b      	bmi.n	80022bc <_printf_common+0xb0>
 8002264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002268:	4649      	mov	r1, r9
 800226a:	4638      	mov	r0, r7
 800226c:	47c0      	blx	r8
 800226e:	3001      	adds	r0, #1
 8002270:	d01e      	beq.n	80022b0 <_printf_common+0xa4>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	68e5      	ldr	r5, [r4, #12]
 8002276:	6832      	ldr	r2, [r6, #0]
 8002278:	f003 0306 	and.w	r3, r3, #6
 800227c:	2b04      	cmp	r3, #4
 800227e:	bf08      	it	eq
 8002280:	1aad      	subeq	r5, r5, r2
 8002282:	68a3      	ldr	r3, [r4, #8]
 8002284:	6922      	ldr	r2, [r4, #16]
 8002286:	bf0c      	ite	eq
 8002288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800228c:	2500      	movne	r5, #0
 800228e:	4293      	cmp	r3, r2
 8002290:	bfc4      	itt	gt
 8002292:	1a9b      	subgt	r3, r3, r2
 8002294:	18ed      	addgt	r5, r5, r3
 8002296:	2600      	movs	r6, #0
 8002298:	341a      	adds	r4, #26
 800229a:	42b5      	cmp	r5, r6
 800229c:	d11a      	bne.n	80022d4 <_printf_common+0xc8>
 800229e:	2000      	movs	r0, #0
 80022a0:	e008      	b.n	80022b4 <_printf_common+0xa8>
 80022a2:	2301      	movs	r3, #1
 80022a4:	4652      	mov	r2, sl
 80022a6:	4649      	mov	r1, r9
 80022a8:	4638      	mov	r0, r7
 80022aa:	47c0      	blx	r8
 80022ac:	3001      	adds	r0, #1
 80022ae:	d103      	bne.n	80022b8 <_printf_common+0xac>
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b8:	3501      	adds	r5, #1
 80022ba:	e7c6      	b.n	800224a <_printf_common+0x3e>
 80022bc:	18e1      	adds	r1, r4, r3
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	2030      	movs	r0, #48	; 0x30
 80022c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022c6:	4422      	add	r2, r4
 80022c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022d0:	3302      	adds	r3, #2
 80022d2:	e7c7      	b.n	8002264 <_printf_common+0x58>
 80022d4:	2301      	movs	r3, #1
 80022d6:	4622      	mov	r2, r4
 80022d8:	4649      	mov	r1, r9
 80022da:	4638      	mov	r0, r7
 80022dc:	47c0      	blx	r8
 80022de:	3001      	adds	r0, #1
 80022e0:	d0e6      	beq.n	80022b0 <_printf_common+0xa4>
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7d9      	b.n	800229a <_printf_common+0x8e>
	...

080022e8 <_printf_i>:
 80022e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022ec:	7e0f      	ldrb	r7, [r1, #24]
 80022ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022f0:	2f78      	cmp	r7, #120	; 0x78
 80022f2:	4691      	mov	r9, r2
 80022f4:	4680      	mov	r8, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	469a      	mov	sl, r3
 80022fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022fe:	d807      	bhi.n	8002310 <_printf_i+0x28>
 8002300:	2f62      	cmp	r7, #98	; 0x62
 8002302:	d80a      	bhi.n	800231a <_printf_i+0x32>
 8002304:	2f00      	cmp	r7, #0
 8002306:	f000 80d8 	beq.w	80024ba <_printf_i+0x1d2>
 800230a:	2f58      	cmp	r7, #88	; 0x58
 800230c:	f000 80a3 	beq.w	8002456 <_printf_i+0x16e>
 8002310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002318:	e03a      	b.n	8002390 <_printf_i+0xa8>
 800231a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800231e:	2b15      	cmp	r3, #21
 8002320:	d8f6      	bhi.n	8002310 <_printf_i+0x28>
 8002322:	a101      	add	r1, pc, #4	; (adr r1, 8002328 <_printf_i+0x40>)
 8002324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002328:	08002381 	.word	0x08002381
 800232c:	08002395 	.word	0x08002395
 8002330:	08002311 	.word	0x08002311
 8002334:	08002311 	.word	0x08002311
 8002338:	08002311 	.word	0x08002311
 800233c:	08002311 	.word	0x08002311
 8002340:	08002395 	.word	0x08002395
 8002344:	08002311 	.word	0x08002311
 8002348:	08002311 	.word	0x08002311
 800234c:	08002311 	.word	0x08002311
 8002350:	08002311 	.word	0x08002311
 8002354:	080024a1 	.word	0x080024a1
 8002358:	080023c5 	.word	0x080023c5
 800235c:	08002483 	.word	0x08002483
 8002360:	08002311 	.word	0x08002311
 8002364:	08002311 	.word	0x08002311
 8002368:	080024c3 	.word	0x080024c3
 800236c:	08002311 	.word	0x08002311
 8002370:	080023c5 	.word	0x080023c5
 8002374:	08002311 	.word	0x08002311
 8002378:	08002311 	.word	0x08002311
 800237c:	0800248b 	.word	0x0800248b
 8002380:	682b      	ldr	r3, [r5, #0]
 8002382:	1d1a      	adds	r2, r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800238c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002390:	2301      	movs	r3, #1
 8002392:	e0a3      	b.n	80024dc <_printf_i+0x1f4>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	6829      	ldr	r1, [r5, #0]
 8002398:	0606      	lsls	r6, r0, #24
 800239a:	f101 0304 	add.w	r3, r1, #4
 800239e:	d50a      	bpl.n	80023b6 <_printf_i+0xce>
 80023a0:	680e      	ldr	r6, [r1, #0]
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	2e00      	cmp	r6, #0
 80023a6:	da03      	bge.n	80023b0 <_printf_i+0xc8>
 80023a8:	232d      	movs	r3, #45	; 0x2d
 80023aa:	4276      	negs	r6, r6
 80023ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023b0:	485e      	ldr	r0, [pc, #376]	; (800252c <_printf_i+0x244>)
 80023b2:	230a      	movs	r3, #10
 80023b4:	e019      	b.n	80023ea <_printf_i+0x102>
 80023b6:	680e      	ldr	r6, [r1, #0]
 80023b8:	602b      	str	r3, [r5, #0]
 80023ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023be:	bf18      	it	ne
 80023c0:	b236      	sxthne	r6, r6
 80023c2:	e7ef      	b.n	80023a4 <_printf_i+0xbc>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	6820      	ldr	r0, [r4, #0]
 80023c8:	1d19      	adds	r1, r3, #4
 80023ca:	6029      	str	r1, [r5, #0]
 80023cc:	0601      	lsls	r1, r0, #24
 80023ce:	d501      	bpl.n	80023d4 <_printf_i+0xec>
 80023d0:	681e      	ldr	r6, [r3, #0]
 80023d2:	e002      	b.n	80023da <_printf_i+0xf2>
 80023d4:	0646      	lsls	r6, r0, #25
 80023d6:	d5fb      	bpl.n	80023d0 <_printf_i+0xe8>
 80023d8:	881e      	ldrh	r6, [r3, #0]
 80023da:	4854      	ldr	r0, [pc, #336]	; (800252c <_printf_i+0x244>)
 80023dc:	2f6f      	cmp	r7, #111	; 0x6f
 80023de:	bf0c      	ite	eq
 80023e0:	2308      	moveq	r3, #8
 80023e2:	230a      	movne	r3, #10
 80023e4:	2100      	movs	r1, #0
 80023e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023ea:	6865      	ldr	r5, [r4, #4]
 80023ec:	60a5      	str	r5, [r4, #8]
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	bfa2      	ittt	ge
 80023f2:	6821      	ldrge	r1, [r4, #0]
 80023f4:	f021 0104 	bicge.w	r1, r1, #4
 80023f8:	6021      	strge	r1, [r4, #0]
 80023fa:	b90e      	cbnz	r6, 8002400 <_printf_i+0x118>
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d04d      	beq.n	800249c <_printf_i+0x1b4>
 8002400:	4615      	mov	r5, r2
 8002402:	fbb6 f1f3 	udiv	r1, r6, r3
 8002406:	fb03 6711 	mls	r7, r3, r1, r6
 800240a:	5dc7      	ldrb	r7, [r0, r7]
 800240c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002410:	4637      	mov	r7, r6
 8002412:	42bb      	cmp	r3, r7
 8002414:	460e      	mov	r6, r1
 8002416:	d9f4      	bls.n	8002402 <_printf_i+0x11a>
 8002418:	2b08      	cmp	r3, #8
 800241a:	d10b      	bne.n	8002434 <_printf_i+0x14c>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	07de      	lsls	r6, r3, #31
 8002420:	d508      	bpl.n	8002434 <_printf_i+0x14c>
 8002422:	6923      	ldr	r3, [r4, #16]
 8002424:	6861      	ldr	r1, [r4, #4]
 8002426:	4299      	cmp	r1, r3
 8002428:	bfde      	ittt	le
 800242a:	2330      	movle	r3, #48	; 0x30
 800242c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002434:	1b52      	subs	r2, r2, r5
 8002436:	6122      	str	r2, [r4, #16]
 8002438:	f8cd a000 	str.w	sl, [sp]
 800243c:	464b      	mov	r3, r9
 800243e:	aa03      	add	r2, sp, #12
 8002440:	4621      	mov	r1, r4
 8002442:	4640      	mov	r0, r8
 8002444:	f7ff fee2 	bl	800220c <_printf_common>
 8002448:	3001      	adds	r0, #1
 800244a:	d14c      	bne.n	80024e6 <_printf_i+0x1fe>
 800244c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002450:	b004      	add	sp, #16
 8002452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002456:	4835      	ldr	r0, [pc, #212]	; (800252c <_printf_i+0x244>)
 8002458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800245c:	6829      	ldr	r1, [r5, #0]
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	f851 6b04 	ldr.w	r6, [r1], #4
 8002464:	6029      	str	r1, [r5, #0]
 8002466:	061d      	lsls	r5, r3, #24
 8002468:	d514      	bpl.n	8002494 <_printf_i+0x1ac>
 800246a:	07df      	lsls	r7, r3, #31
 800246c:	bf44      	itt	mi
 800246e:	f043 0320 	orrmi.w	r3, r3, #32
 8002472:	6023      	strmi	r3, [r4, #0]
 8002474:	b91e      	cbnz	r6, 800247e <_printf_i+0x196>
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	f023 0320 	bic.w	r3, r3, #32
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	2310      	movs	r3, #16
 8002480:	e7b0      	b.n	80023e4 <_printf_i+0xfc>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	2378      	movs	r3, #120	; 0x78
 800248c:	4828      	ldr	r0, [pc, #160]	; (8002530 <_printf_i+0x248>)
 800248e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002492:	e7e3      	b.n	800245c <_printf_i+0x174>
 8002494:	0659      	lsls	r1, r3, #25
 8002496:	bf48      	it	mi
 8002498:	b2b6      	uxthmi	r6, r6
 800249a:	e7e6      	b.n	800246a <_printf_i+0x182>
 800249c:	4615      	mov	r5, r2
 800249e:	e7bb      	b.n	8002418 <_printf_i+0x130>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	6826      	ldr	r6, [r4, #0]
 80024a4:	6961      	ldr	r1, [r4, #20]
 80024a6:	1d18      	adds	r0, r3, #4
 80024a8:	6028      	str	r0, [r5, #0]
 80024aa:	0635      	lsls	r5, r6, #24
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	d501      	bpl.n	80024b4 <_printf_i+0x1cc>
 80024b0:	6019      	str	r1, [r3, #0]
 80024b2:	e002      	b.n	80024ba <_printf_i+0x1d2>
 80024b4:	0670      	lsls	r0, r6, #25
 80024b6:	d5fb      	bpl.n	80024b0 <_printf_i+0x1c8>
 80024b8:	8019      	strh	r1, [r3, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	6123      	str	r3, [r4, #16]
 80024be:	4615      	mov	r5, r2
 80024c0:	e7ba      	b.n	8002438 <_printf_i+0x150>
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	602a      	str	r2, [r5, #0]
 80024c8:	681d      	ldr	r5, [r3, #0]
 80024ca:	6862      	ldr	r2, [r4, #4]
 80024cc:	2100      	movs	r1, #0
 80024ce:	4628      	mov	r0, r5
 80024d0:	f7fd fe8e 	bl	80001f0 <memchr>
 80024d4:	b108      	cbz	r0, 80024da <_printf_i+0x1f2>
 80024d6:	1b40      	subs	r0, r0, r5
 80024d8:	6060      	str	r0, [r4, #4]
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	6123      	str	r3, [r4, #16]
 80024de:	2300      	movs	r3, #0
 80024e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e4:	e7a8      	b.n	8002438 <_printf_i+0x150>
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	462a      	mov	r2, r5
 80024ea:	4649      	mov	r1, r9
 80024ec:	4640      	mov	r0, r8
 80024ee:	47d0      	blx	sl
 80024f0:	3001      	adds	r0, #1
 80024f2:	d0ab      	beq.n	800244c <_printf_i+0x164>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	079b      	lsls	r3, r3, #30
 80024f8:	d413      	bmi.n	8002522 <_printf_i+0x23a>
 80024fa:	68e0      	ldr	r0, [r4, #12]
 80024fc:	9b03      	ldr	r3, [sp, #12]
 80024fe:	4298      	cmp	r0, r3
 8002500:	bfb8      	it	lt
 8002502:	4618      	movlt	r0, r3
 8002504:	e7a4      	b.n	8002450 <_printf_i+0x168>
 8002506:	2301      	movs	r3, #1
 8002508:	4632      	mov	r2, r6
 800250a:	4649      	mov	r1, r9
 800250c:	4640      	mov	r0, r8
 800250e:	47d0      	blx	sl
 8002510:	3001      	adds	r0, #1
 8002512:	d09b      	beq.n	800244c <_printf_i+0x164>
 8002514:	3501      	adds	r5, #1
 8002516:	68e3      	ldr	r3, [r4, #12]
 8002518:	9903      	ldr	r1, [sp, #12]
 800251a:	1a5b      	subs	r3, r3, r1
 800251c:	42ab      	cmp	r3, r5
 800251e:	dcf2      	bgt.n	8002506 <_printf_i+0x21e>
 8002520:	e7eb      	b.n	80024fa <_printf_i+0x212>
 8002522:	2500      	movs	r5, #0
 8002524:	f104 0619 	add.w	r6, r4, #25
 8002528:	e7f5      	b.n	8002516 <_printf_i+0x22e>
 800252a:	bf00      	nop
 800252c:	08002785 	.word	0x08002785
 8002530:	08002796 	.word	0x08002796

08002534 <_sbrk_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4d06      	ldr	r5, [pc, #24]	; (8002550 <_sbrk_r+0x1c>)
 8002538:	2300      	movs	r3, #0
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	602b      	str	r3, [r5, #0]
 8002540:	f7fe fe44 	bl	80011cc <_sbrk>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_sbrk_r+0x1a>
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	b103      	cbz	r3, 800254e <_sbrk_r+0x1a>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	200000c4 	.word	0x200000c4

08002554 <__sread>:
 8002554:	b510      	push	{r4, lr}
 8002556:	460c      	mov	r4, r1
 8002558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800255c:	f000 f8a0 	bl	80026a0 <_read_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	bfab      	itete	ge
 8002564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002566:	89a3      	ldrhlt	r3, [r4, #12]
 8002568:	181b      	addge	r3, r3, r0
 800256a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800256e:	bfac      	ite	ge
 8002570:	6563      	strge	r3, [r4, #84]	; 0x54
 8002572:	81a3      	strhlt	r3, [r4, #12]
 8002574:	bd10      	pop	{r4, pc}

08002576 <__swrite>:
 8002576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257a:	461f      	mov	r7, r3
 800257c:	898b      	ldrh	r3, [r1, #12]
 800257e:	05db      	lsls	r3, r3, #23
 8002580:	4605      	mov	r5, r0
 8002582:	460c      	mov	r4, r1
 8002584:	4616      	mov	r6, r2
 8002586:	d505      	bpl.n	8002594 <__swrite+0x1e>
 8002588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800258c:	2302      	movs	r3, #2
 800258e:	2200      	movs	r2, #0
 8002590:	f000 f868 	bl	8002664 <_lseek_r>
 8002594:	89a3      	ldrh	r3, [r4, #12]
 8002596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800259a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800259e:	81a3      	strh	r3, [r4, #12]
 80025a0:	4632      	mov	r2, r6
 80025a2:	463b      	mov	r3, r7
 80025a4:	4628      	mov	r0, r5
 80025a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025aa:	f000 b817 	b.w	80025dc <_write_r>

080025ae <__sseek>:
 80025ae:	b510      	push	{r4, lr}
 80025b0:	460c      	mov	r4, r1
 80025b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b6:	f000 f855 	bl	8002664 <_lseek_r>
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	bf15      	itete	ne
 80025c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80025c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025ca:	81a3      	strheq	r3, [r4, #12]
 80025cc:	bf18      	it	ne
 80025ce:	81a3      	strhne	r3, [r4, #12]
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <__sclose>:
 80025d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d6:	f000 b813 	b.w	8002600 <_close_r>
	...

080025dc <_write_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4d07      	ldr	r5, [pc, #28]	; (80025fc <_write_r+0x20>)
 80025e0:	4604      	mov	r4, r0
 80025e2:	4608      	mov	r0, r1
 80025e4:	4611      	mov	r1, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	602a      	str	r2, [r5, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f7fe fda1 	bl	8001132 <_write>
 80025f0:	1c43      	adds	r3, r0, #1
 80025f2:	d102      	bne.n	80025fa <_write_r+0x1e>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	b103      	cbz	r3, 80025fa <_write_r+0x1e>
 80025f8:	6023      	str	r3, [r4, #0]
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	200000c4 	.word	0x200000c4

08002600 <_close_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4d06      	ldr	r5, [pc, #24]	; (800261c <_close_r+0x1c>)
 8002604:	2300      	movs	r3, #0
 8002606:	4604      	mov	r4, r0
 8002608:	4608      	mov	r0, r1
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	f7fe fdad 	bl	800116a <_close>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d102      	bne.n	800261a <_close_r+0x1a>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	b103      	cbz	r3, 800261a <_close_r+0x1a>
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	bd38      	pop	{r3, r4, r5, pc}
 800261c:	200000c4 	.word	0x200000c4

08002620 <_fstat_r>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4d07      	ldr	r5, [pc, #28]	; (8002640 <_fstat_r+0x20>)
 8002624:	2300      	movs	r3, #0
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	f7fe fda7 	bl	8001180 <_fstat>
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	d102      	bne.n	800263c <_fstat_r+0x1c>
 8002636:	682b      	ldr	r3, [r5, #0]
 8002638:	b103      	cbz	r3, 800263c <_fstat_r+0x1c>
 800263a:	6023      	str	r3, [r4, #0]
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	200000c4 	.word	0x200000c4

08002644 <_isatty_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4d06      	ldr	r5, [pc, #24]	; (8002660 <_isatty_r+0x1c>)
 8002648:	2300      	movs	r3, #0
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	f7fe fda5 	bl	800119e <_isatty>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_isatty_r+0x1a>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_isatty_r+0x1a>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	200000c4 	.word	0x200000c4

08002664 <_lseek_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4d07      	ldr	r5, [pc, #28]	; (8002684 <_lseek_r+0x20>)
 8002668:	4604      	mov	r4, r0
 800266a:	4608      	mov	r0, r1
 800266c:	4611      	mov	r1, r2
 800266e:	2200      	movs	r2, #0
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe fd9d 	bl	80011b2 <_lseek>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_lseek_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_lseek_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	200000c4 	.word	0x200000c4

08002688 <__malloc_lock>:
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <__malloc_lock+0x8>)
 800268a:	f7ff bb19 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 800268e:	bf00      	nop
 8002690:	200000b8 	.word	0x200000b8

08002694 <__malloc_unlock>:
 8002694:	4801      	ldr	r0, [pc, #4]	; (800269c <__malloc_unlock+0x8>)
 8002696:	f7ff bb14 	b.w	8001cc2 <__retarget_lock_release_recursive>
 800269a:	bf00      	nop
 800269c:	200000b8 	.word	0x200000b8

080026a0 <_read_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4d07      	ldr	r5, [pc, #28]	; (80026c0 <_read_r+0x20>)
 80026a4:	4604      	mov	r4, r0
 80026a6:	4608      	mov	r0, r1
 80026a8:	4611      	mov	r1, r2
 80026aa:	2200      	movs	r2, #0
 80026ac:	602a      	str	r2, [r5, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7fe fd22 	bl	80010f8 <_read>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	d102      	bne.n	80026be <_read_r+0x1e>
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	b103      	cbz	r3, 80026be <_read_r+0x1e>
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	200000c4 	.word	0x200000c4

080026c4 <_init>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr

080026d0 <_fini>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr
