
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002740  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000088  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003bfb  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dc9  00000000  00000000  00023c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000428  00000000  00000000  00024a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000370  00000000  00000000  00024e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002800  00000000  00000000  000251f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000057c6  00000000  00000000  000279f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e2f2  00000000  00000000  0002d1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003b4b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001730  00000000  00000000  0003b500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028d8 	.word	0x080028d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080028d8 	.word	0x080028d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000088 	.word	0x20000088

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 faa5 	bl	8001820 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f000 fed8 	bl	800109c <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f933 	bl	8000558 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fb71 	bl	80009da <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000088 	.word	0x20000088
 8000300:	2000008c 	.word	0x2000008c

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fa85 	bl	8001820 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f000 fec0 	bl	800109c <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fb7c 	bl	8000a1e <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fb77 	bl	8000a1e <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fbd7 	bl	8000ae8 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fbd2 	bl	8000ae8 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fc06 	bl	8000b5a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fc01 	bl	8000b5a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fc42 	bl	8000be6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fc3d 	bl	8000be6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 fc14 	bl	8000b9e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 fc0f 	bl	8000b9e <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fe7f 	bl	800109c <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fc41 	bl	8000c2e <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd52 	bl	8000e5c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc8c 	bl	8000cda <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fdcb 	bl	8000f7c <lcd_pcf8574_send_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <check_sensor_response>:
#include "gpio_driver.h"
#include "common_utils.h"
#include "dht11_driver.h"

uint8_t check_sensor_response(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
	uint8_t sample[2];

	//Read First Sample
	delay_us(40);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f7ff ff4a 	bl	8000290 <delay_us>
	sample[0] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80003fc:	2107      	movs	r1, #7
 80003fe:	4811      	ldr	r0, [pc, #68]	; (8000444 <check_sensor_response+0x54>)
 8000400:	f000 fb31 	bl	8000a66 <GPIOReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	713b      	strb	r3, [r7, #4]

	//Read Second Sample
	delay_us(80);
 8000408:	2050      	movs	r0, #80	; 0x50
 800040a:	f7ff ff41 	bl	8000290 <delay_us>
	sample[1] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 800040e:	2107      	movs	r1, #7
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <check_sensor_response+0x54>)
 8000412:	f000 fb28 	bl	8000a66 <GPIOReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	717b      	strb	r3, [r7, #5]

	//Wait till the end of the response
	while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 800041a:	bf00      	nop
 800041c:	2107      	movs	r1, #7
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <check_sensor_response+0x54>)
 8000420:	f000 fb21 	bl	8000a66 <GPIOReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f8      	bne.n	800041c <check_sensor_response+0x2c>

	if(sample[0]==GPIO_LOW && sample[1]==GPIO_HIGH)
 800042a:	793b      	ldrb	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d104      	bne.n	800043a <check_sensor_response+0x4a>
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d101      	bne.n	800043a <check_sensor_response+0x4a>
	{
		return 1;
 8000436:	2301      	movs	r3, #1
 8000438:	e000      	b.n	800043c <check_sensor_response+0x4c>
	}
	else
	{
		return 0;
 800043a:	2300      	movs	r3, #0
	}
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000

08000448 <read_dht11_sensor>:

uint8_t read_dht11_sensor(uint8_t *data)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	uint8_t sensor_response;
	uint8_t current_bit;
	uint8_t i;

	//GPIO Configuration for Sensor Data Pin
	EnablePeriClk(DHT11_SENSOR_PORT);
 8000450:	4840      	ldr	r0, [pc, #256]	; (8000554 <read_dht11_sensor+0x10c>)
 8000452:	f000 fe23 	bl	800109c <EnablePeriClk>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_OUTPUT);
 8000456:	2201      	movs	r2, #1
 8000458:	2107      	movs	r1, #7
 800045a:	483e      	ldr	r0, [pc, #248]	; (8000554 <read_dht11_sensor+0x10c>)
 800045c:	f000 fadf 	bl	8000a1e <GPIOSetMode>
	GPIOSetOutputType(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPTYPE_OD);
 8000460:	2201      	movs	r2, #1
 8000462:	2107      	movs	r1, #7
 8000464:	483b      	ldr	r0, [pc, #236]	; (8000554 <read_dht11_sensor+0x10c>)
 8000466:	f000 fb78 	bl	8000b5a <GPIOSetOutputType>
	GPIOSetOutputSpeed(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPSPEED_HIGH);
 800046a:	2202      	movs	r2, #2
 800046c:	2107      	movs	r1, #7
 800046e:	4839      	ldr	r0, [pc, #228]	; (8000554 <read_dht11_sensor+0x10c>)
 8000470:	f000 fbb9 	bl	8000be6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_PULL_UP);
 8000474:	2201      	movs	r2, #1
 8000476:	2107      	movs	r1, #7
 8000478:	4836      	ldr	r0, [pc, #216]	; (8000554 <read_dht11_sensor+0x10c>)
 800047a:	f000 fb90 	bl	8000b9e <GPIOSetPullUpDownConfig>

	//Triggering the Sensor
	delay_us(18000);
 800047e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000482:	f7ff ff05 	bl	8000290 <delay_us>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_INPUT);
 8000486:	2200      	movs	r2, #0
 8000488:	2107      	movs	r1, #7
 800048a:	4832      	ldr	r0, [pc, #200]	; (8000554 <read_dht11_sensor+0x10c>)
 800048c:	f000 fac7 	bl	8000a1e <GPIOSetMode>

	//Checking for Sensor Response
	sensor_response = check_sensor_response();
 8000490:	f7ff ffae 	bl	80003f0 <check_sensor_response>
 8000494:	4603      	mov	r3, r0
 8000496:	73bb      	strb	r3, [r7, #14]

	//Reading the Sensor Data
	if(sensor_response == 1)
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d155      	bne.n	800054a <read_dht11_sensor+0x102>
	{
		for(i=0;i<40;i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	e04f      	b.n	8000544 <read_dht11_sensor+0xfc>
		{
			while(!(GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80004a4:	bf00      	nop
 80004a6:	2107      	movs	r1, #7
 80004a8:	482a      	ldr	r0, [pc, #168]	; (8000554 <read_dht11_sensor+0x10c>)
 80004aa:	f000 fadc 	bl	8000a66 <GPIOReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f8      	beq.n	80004a6 <read_dht11_sensor+0x5e>
			delay_us(40);
 80004b4:	2028      	movs	r0, #40	; 0x28
 80004b6:	f7ff feeb 	bl	8000290 <delay_us>
			current_bit = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80004ba:	2107      	movs	r1, #7
 80004bc:	4825      	ldr	r0, [pc, #148]	; (8000554 <read_dht11_sensor+0x10c>)
 80004be:	f000 fad2 	bl	8000a66 <GPIOReadPin>
 80004c2:	4603      	mov	r3, r0
 80004c4:	737b      	strb	r3, [r7, #13]
			if(current_bit == GPIO_HIGH)
 80004c6:	7b7b      	ldrb	r3, [r7, #13]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d117      	bne.n	80004fc <read_dht11_sensor+0xb4>
			{
				data[(i/8)] |= (1 << (7-(i%8)));
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b2d8      	uxtb	r0, r3
 80004d2:	4602      	mov	r2, r0
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	43db      	mvns	r3, r3
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b25a      	sxtb	r2, r3
 80004f0:	4601      	mov	r1, r0
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	440b      	add	r3, r1
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e018      	b.n	800052e <read_dht11_sensor+0xe6>
			}
			else
			{
				data[(i/8)] &= ~(1 << (7-(i%8)));
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	b2d8      	uxtb	r0, r3
 8000502:	4602      	mov	r2, r0
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25a      	sxtb	r2, r3
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	43db      	mvns	r3, r3
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	2101      	movs	r1, #1
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	b25b      	sxtb	r3, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	b25b      	sxtb	r3, r3
 8000520:	4013      	ands	r3, r2
 8000522:	b25a      	sxtb	r2, r3
 8000524:	4601      	mov	r1, r0
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	440b      	add	r3, r1
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	701a      	strb	r2, [r3, #0]
			}
			while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 800052e:	bf00      	nop
 8000530:	2107      	movs	r1, #7
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <read_dht11_sensor+0x10c>)
 8000534:	f000 fa97 	bl	8000a66 <GPIOReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f8      	bne.n	8000530 <read_dht11_sensor+0xe8>
		for(i=0;i<40;i++)
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b27      	cmp	r3, #39	; 0x27
 8000548:	d9ac      	bls.n	80004a4 <read_dht11_sensor+0x5c>
		}
	}

	return sensor_response;
 800054a:	7bbb      	ldrb	r3, [r7, #14]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6852      	ldr	r2, [r2, #4]
 8000568:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	6892      	ldr	r2, [r2, #8]
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7b5b      	ldrb	r3, [r3, #13]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d16a      	bne.n	8000652 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f042 0201 	orr.w	r2, r2, #1
 800058a:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7b9b      	ldrb	r3, [r3, #14]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d11c      	bne.n	80005ce <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f022 0203 	bic.w	r2, r2, #3
 80005a2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6912      	ldr	r2, [r2, #16]
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	699a      	ldr	r2, [r3, #24]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	699a      	ldr	r2, [r3, #24]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80005cc:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b9b      	ldrb	r3, [r3, #14]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d11c      	bne.n	8000610 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f022 0203 	bic.w	r2, r2, #3
 80005e4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	6912      	ldr	r2, [r2, #16]
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800060e:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7b9b      	ldrb	r3, [r3, #14]
 8000614:	2b04      	cmp	r3, #4
 8000616:	d11c      	bne.n	8000652 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f022 0203 	bic.w	r2, r2, #3
 8000626:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	6912      	ldr	r2, [r2, #16]
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000640:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	699a      	ldr	r2, [r3, #24]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000650:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7d1b      	ldrb	r3, [r3, #20]
 8000656:	2b00      	cmp	r3, #0
 8000658:	f040 80bf 	bne.w	80007da <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7d5b      	ldrb	r3, [r3, #21]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d124      	bne.n	80006ae <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000672:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	6992      	ldr	r2, [r2, #24]
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	699a      	ldr	r2, [r3, #24]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800068c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800069c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6a1a      	ldr	r2, [r3, #32]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f042 0210 	orr.w	r2, r2, #16
 80006ac:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7d5b      	ldrb	r3, [r3, #21]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d124      	bne.n	8000700 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	699a      	ldr	r2, [r3, #24]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006c4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6992      	ldr	r2, [r2, #24]
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006de:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80006ee:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a1a      	ldr	r2, [r3, #32]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0210 	orr.w	r2, r2, #16
 80006fe:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7d5b      	ldrb	r3, [r3, #21]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d124      	bne.n	8000752 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000716:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	6992      	ldr	r2, [r2, #24]
 8000720:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	699a      	ldr	r2, [r3, #24]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000730:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000740:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6a1a      	ldr	r2, [r3, #32]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f042 0210 	orr.w	r2, r2, #16
 8000750:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7d5b      	ldrb	r3, [r3, #21]
 8000756:	2b08      	cmp	r3, #8
 8000758:	d13f      	bne.n	80007da <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000768:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000778:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000788:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a1a      	ldr	r2, [r3, #32]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f022 0220 	bic.w	r2, r2, #32
 8000798:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6a1a      	ldr	r2, [r3, #32]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007a8:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	699a      	ldr	r2, [r3, #24]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80007b8:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 0204 	orr.w	r2, r2, #4
 80007c8:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a1a      	ldr	r2, [r3, #32]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f042 0210 	orr.w	r2, r2, #16
 80007d8:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7f1b      	ldrb	r3, [r3, #28]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d16a      	bne.n	80008b8 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6a1a      	ldr	r2, [r3, #32]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007f0:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7f5b      	ldrb	r3, [r3, #29]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d11c      	bne.n	8000834 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0203 	bic.w	r2, r2, #3
 8000808:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	6a12      	ldr	r2, [r2, #32]
 8000812:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000822:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000832:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7f5b      	ldrb	r3, [r3, #29]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d11c      	bne.n	8000876 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0203 	bic.w	r2, r2, #3
 800084a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6a12      	ldr	r2, [r2, #32]
 8000854:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69da      	ldr	r2, [r3, #28]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000864:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000874:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7f5b      	ldrb	r3, [r3, #29]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d11c      	bne.n	80008b8 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0203 	bic.w	r2, r2, #3
 800088c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6a12      	ldr	r2, [r2, #32]
 8000896:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008a6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	69da      	ldr	r2, [r3, #28]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80008b6:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d16d      	bne.n	800099e <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6a1a      	ldr	r2, [r3, #32]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008d0:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d11c      	bne.n	8000916 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	69da      	ldr	r2, [r3, #28]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008ea:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	69da      	ldr	r2, [r3, #28]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000904:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000914:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800091c:	2b03      	cmp	r3, #3
 800091e:	d11c      	bne.n	800095a <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	69da      	ldr	r2, [r3, #28]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800092e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000938:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000948:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000958:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000960:	2b04      	cmp	r3, #4
 8000962:	d11c      	bne.n	800099e <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000972:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69da      	ldr	r2, [r3, #28]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800098c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800099c:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7b1b      	ldrb	r3, [r3, #12]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d108      	bne.n	80009b8 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f042 0201 	orr.w	r2, r2, #1
 80009b4:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 80009b6:	e00b      	b.n	80009d0 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7b1b      	ldrb	r3, [r3, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0201 	orr.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <General_Purpose_Timer_ClearUpdateEventFlag>:
{
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
}

void General_Purpose_Timer_ClearUpdateEventFlag(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_SR &= ~(1 << TIMx_SR_UIF);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	691a      	ldr	r2, [r3, #16]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 0201 	bic.w	r2, r2, #1
 8000a12:	611a      	str	r2, [r3, #16]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	78fa      	ldrb	r2, [r7, #3]
 8000a38:	0052      	lsls	r2, r2, #1
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	78b9      	ldrb	r1, [r7, #2]
 8000a4e:	78fa      	ldrb	r2, [r7, #3]
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]

}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	fa22 f303 	lsr.w	r3, r2, r3
 8000a94:	60fb      	str	r3, [r7, #12]

	return value;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	b2db      	uxtb	r3, r3
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <GPIOWritePin>:

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	78b9      	ldrb	r1, [r7, #2]
 8000ad2:	78fa      	ldrb	r2, [r7, #3]
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	615a      	str	r2, [r3, #20]
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
 8000af4:	4613      	mov	r3, r2
 8000af6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000b0a:	7afa      	ldrb	r2, [r7, #11]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b14:	7aba      	ldrb	r2, [r7, #10]
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	210f      	movs	r1, #15
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	43d2      	mvns	r2, r2
 8000b20:	4611      	mov	r1, r2
 8000b22:	7afa      	ldrb	r2, [r7, #11]
 8000b24:	4019      	ands	r1, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000b2e:	7afa      	ldrb	r2, [r7, #11]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3208      	adds	r2, #8
 8000b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b38:	78b9      	ldrb	r1, [r7, #2]
 8000b3a:	7aba      	ldrb	r2, [r7, #10]
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	4611      	mov	r1, r2
 8000b44:	7afa      	ldrb	r2, [r7, #11]
 8000b46:	4319      	orrs	r1, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
 8000b66:	4613      	mov	r3, r2
 8000b68:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	78fa      	ldrb	r2, [r7, #3]
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	78b9      	ldrb	r1, [r7, #2]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	605a      	str	r2, [r3, #4]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	70fb      	strb	r3, [r7, #3]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	78fa      	ldrb	r2, [r7, #3]
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	2103      	movs	r1, #3
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	78b9      	ldrb	r1, [r7, #2]
 8000bce:	78fa      	ldrb	r2, [r7, #3]
 8000bd0:	0052      	lsls	r2, r2, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	60da      	str	r2, [r3, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	70fb      	strb	r3, [r7, #3]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	78fa      	ldrb	r2, [r7, #3]
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	78b9      	ldrb	r1, [r7, #2]
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	609a      	str	r2, [r3, #8]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	69da      	ldr	r2, [r3, #28]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	03db      	lsls	r3, r3, #15
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d10d      	bne.n	8000c96 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	039b      	lsls	r3, r3, #14
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	69da      	ldr	r2, [r3, #28]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	029b      	lsls	r3, r3, #10
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	601a      	str	r2, [r3, #0]

}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f000 f84c 	bl	8000dac <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000d14:	bf00      	nop
 8000d16:	2101      	movs	r1, #1
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 f869 	bl	8000df0 <I2C_GetFlagStatus>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	4619      	mov	r1, r3
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f86f 	bl	8000e1a <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000d3c:	bf00      	nop
 8000d3e:	2102      	movs	r1, #2
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f000 f855 	bl	8000df0 <I2C_GetFlagStatus>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f8      	beq.n	8000d3e <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f874 	bl	8000e3a <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000d52:	e012      	b.n	8000d7a <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000d54:	bf00      	nop
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f000 f849 	bl	8000df0 <I2C_GetFlagStatus>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f8      	beq.n	8000d56 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1e9      	bne.n	8000d54 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000d80:	bf00      	nop
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f833 	bl	8000df0 <I2C_GetFlagStatus>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d1f8      	bne.n	8000d82 <I2CMasterSendData+0x86>
 8000d90:	2104      	movs	r1, #4
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f82c 	bl	8000df0 <I2C_GetFlagStatus>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d1f1      	bne.n	8000d82 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f815 	bl	8000dce <I2C_SendStopBit>

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000e6c:	78fa      	ldrb	r2, [r7, #3]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	621a      	str	r2, [r3, #32]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000e80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e84:	f7ff fa04 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e88:	2030      	movs	r0, #48	; 0x30
 8000e8a:	f000 f845 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000e8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e92:	f7ff f9fd 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e96:	2030      	movs	r0, #48	; 0x30
 8000e98:	f000 f83e 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000e9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea0:	f7ff f9f6 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ea4:	2030      	movs	r0, #48	; 0x30
 8000ea6:	f000 f837 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000eaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eae:	f7ff f9ef 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000eb2:	2020      	movs	r0, #32
 8000eb4:	f000 f830 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000eb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ebc:	f7ff f9e8 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ec0:	2028      	movs	r0, #40	; 0x28
 8000ec2:	f000 f829 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ec6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eca:	f7ff f9e1 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ece:	2008      	movs	r0, #8
 8000ed0:	f000 f822 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ed4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ed8:	f7ff f9da 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 f81b 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ee2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ee6:	f7ff f9d3 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f000 f814 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ef0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef4:	f7ff f9cc 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f000 f80d 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000efe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f02:	f7ff f9c5 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f06:	200c      	movs	r0, #12
 8000f08:	f000 f806 	bl	8000f18 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f10:	f7ff f9be 	bl	8000290 <delay_us>

	return;
 8000f14:	bf00      	nop
}
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f023 030f 	bic.w	r3, r3, #15
 8000f28:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f043 030c 	orr.w	r3, r3, #12
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f043 030c 	orr.w	r3, r3, #12
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <lcd_pcf8574_send_cmd+0x5c>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <lcd_pcf8574_send_cmd+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	2204      	movs	r2, #4
 8000f66:	f7ff fec9 	bl	8000cfc <I2CMasterSendData>

	return;
 8000f6a:	bf00      	nop
}
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004

08000f7c <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f023 030f 	bic.w	r3, r3, #15
 8000f8c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f043 030d 	orr.w	r3, r3, #13
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	f043 0309 	orr.w	r3, r3, #9
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	f043 030d 	orr.w	r3, r3, #13
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	f043 0309 	orr.w	r3, r3, #9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <lcd_pcf8574_send_data+0x5c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <lcd_pcf8574_send_data+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f107 0108 	add.w	r1, r7, #8
 8000fc8:	2204      	movs	r2, #4
 8000fca:	f7ff fe97 	bl	8000cfc <I2CMasterSendData>

	return;
 8000fce:	bf00      	nop
}
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff ff97 	bl	8000f18 <lcd_pcf8574_send_cmd>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}

08000fee <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff ff90 	bl	8000f18 <lcd_pcf8574_send_cmd>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b27      	cmp	r3, #39	; 0x27
 8001016:	d802      	bhi.n	800101e <lcd_pcf8574_set_position+0x22>
			position = col;
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e011      	b.n	8001042 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00e      	b.n	8001042 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d109      	bne.n	800103e <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	d803      	bhi.n	8001038 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	3340      	adds	r3, #64	; 0x40
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e004      	b.n	8001042 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e001      	b.n	8001042 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001048:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff63 	bl	8000f18 <lcd_pcf8574_send_cmd>

	return;
 8001052:	bf00      	nop
}
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <RTC_Alarm_IRQHandler+0x24>)
 8001064:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001066:	f000 f80d 	bl	8001084 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]

	return;
 8001076:	bf00      	nop
}
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013c14 	.word	0x40013c14

08001084 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001088:	2201      	movs	r2, #1
 800108a:	210f      	movs	r1, #15
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <RTC_Alarm_Interrupt_Callback+0x14>)
 800108e:	f7ff fd09 	bl	8000aa4 <GPIOWritePin>

	return;
 8001092:	bf00      	nop
}
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020c00 	.word	0x40020c00

0800109c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a88      	ldr	r2, [pc, #544]	; (80012c8 <EnablePeriClk+0x22c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d108      	bne.n	80010be <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <EnablePeriClk+0x230>)
 80010ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80010bc:	e19b      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a83      	ldr	r2, [pc, #524]	; (80012d0 <EnablePeriClk+0x234>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d108      	bne.n	80010d8 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010c6:	4b81      	ldr	r3, [pc, #516]	; (80012cc <EnablePeriClk+0x230>)
 80010c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	e18e      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <EnablePeriClk+0x238>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d108      	bne.n	80010f2 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <EnablePeriClk+0x230>)
 80010e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f043 0204 	orr.w	r2, r3, #4
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	e181      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a78      	ldr	r2, [pc, #480]	; (80012d8 <EnablePeriClk+0x23c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d108      	bne.n	800110c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010fa:	4b74      	ldr	r3, [pc, #464]	; (80012cc <EnablePeriClk+0x230>)
 80010fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f043 0208 	orr.w	r2, r3, #8
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	e174      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a73      	ldr	r2, [pc, #460]	; (80012dc <EnablePeriClk+0x240>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d108      	bne.n	8001126 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <EnablePeriClk+0x230>)
 8001116:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0210 	orr.w	r2, r3, #16
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	e167      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a6d      	ldr	r2, [pc, #436]	; (80012e0 <EnablePeriClk+0x244>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d108      	bne.n	8001140 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <EnablePeriClk+0x230>)
 8001130:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f043 0220 	orr.w	r2, r3, #32
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	e15a      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a68      	ldr	r2, [pc, #416]	; (80012e4 <EnablePeriClk+0x248>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d108      	bne.n	800115a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <EnablePeriClk+0x230>)
 800114a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	e14d      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a62      	ldr	r2, [pc, #392]	; (80012e8 <EnablePeriClk+0x24c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d108      	bne.n	8001174 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <EnablePeriClk+0x230>)
 8001164:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	e140      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <EnablePeriClk+0x250>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d108      	bne.n	800118e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <EnablePeriClk+0x230>)
 800117e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	e133      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a57      	ldr	r2, [pc, #348]	; (80012f0 <EnablePeriClk+0x254>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d108      	bne.n	80011a8 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <EnablePeriClk+0x258>)
 8001198:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	e126      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a53      	ldr	r2, [pc, #332]	; (80012f8 <EnablePeriClk+0x25c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d108      	bne.n	80011c2 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <EnablePeriClk+0x260>)
 80011b2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	e119      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <EnablePeriClk+0x264>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d108      	bne.n	80011dc <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <EnablePeriClk+0x260>)
 80011cc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	e10c      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a49      	ldr	r2, [pc, #292]	; (8001304 <EnablePeriClk+0x268>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d108      	bne.n	80011f6 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <EnablePeriClk+0x260>)
 80011e6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	e0ff      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a43      	ldr	r2, [pc, #268]	; (8001308 <EnablePeriClk+0x26c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d108      	bne.n	8001210 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <EnablePeriClk+0x260>)
 8001200:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	e0f2      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3e      	ldr	r2, [pc, #248]	; (800130c <EnablePeriClk+0x270>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d108      	bne.n	800122a <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <EnablePeriClk+0x260>)
 800121a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	e0e5      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a38      	ldr	r2, [pc, #224]	; (8001310 <EnablePeriClk+0x274>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d108      	bne.n	8001244 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <EnablePeriClk+0x258>)
 8001234:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f043 0210 	orr.w	r2, r3, #16
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	e0d8      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <EnablePeriClk+0x278>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d108      	bne.n	800125e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <EnablePeriClk+0x260>)
 800124e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	e0cb      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <EnablePeriClk+0x27c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d108      	bne.n	8001278 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <EnablePeriClk+0x260>)
 8001268:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	e0be      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <EnablePeriClk+0x280>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d108      	bne.n	8001292 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <EnablePeriClk+0x260>)
 8001282:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	e0b1      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <EnablePeriClk+0x284>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d108      	bne.n	80012ac <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <EnablePeriClk+0x260>)
 800129c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	e0a4      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <EnablePeriClk+0x288>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d139      	bne.n	8001328 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <EnablePeriClk+0x258>)
 80012b6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f043 0220 	orr.w	r2, r3, #32
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	e097      	b.n	80013f6 <EnablePeriClk+0x35a>
 80012c6:	bf00      	nop
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40023830 	.word	0x40023830
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40023844 	.word	0x40023844
 80012f8:	40003800 	.word	0x40003800
 80012fc:	40023840 	.word	0x40023840
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40005400 	.word	0x40005400
 8001308:	40005800 	.word	0x40005800
 800130c:	40005c00 	.word	0x40005c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40004400 	.word	0x40004400
 8001318:	40004800 	.word	0x40004800
 800131c:	40004c00 	.word	0x40004c00
 8001320:	40005000 	.word	0x40005000
 8001324:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a35      	ldr	r2, [pc, #212]	; (8001400 <EnablePeriClk+0x364>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d108      	bne.n	8001342 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <EnablePeriClk+0x368>)
 8001332:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	e059      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a30      	ldr	r2, [pc, #192]	; (8001408 <EnablePeriClk+0x36c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d108      	bne.n	800135c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <EnablePeriClk+0x368>)
 800134c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f043 0220 	orr.w	r2, r3, #32
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	e04c      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a2b      	ldr	r2, [pc, #172]	; (800140c <EnablePeriClk+0x370>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d108      	bne.n	8001376 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <EnablePeriClk+0x374>)
 8001366:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	e03f      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <EnablePeriClk+0x378>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d108      	bne.n	8001390 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <EnablePeriClk+0x374>)
 8001380:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	e032      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001396:	d108      	bne.n	80013aa <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <EnablePeriClk+0x368>)
 800139a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	e025      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <EnablePeriClk+0x37c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d108      	bne.n	80013c4 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <EnablePeriClk+0x368>)
 80013b4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	e018      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <EnablePeriClk+0x380>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d108      	bne.n	80013de <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <EnablePeriClk+0x368>)
 80013ce:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f043 0204 	orr.w	r2, r3, #4
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	e00b      	b.n	80013f6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <EnablePeriClk+0x384>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d107      	bne.n	80013f6 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <EnablePeriClk+0x368>)
 80013e8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f043 0208 	orr.w	r2, r3, #8
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40001000 	.word	0x40001000
 8001404:	40023840 	.word	0x40023840
 8001408:	40001400 	.word	0x40001400
 800140c:	40026000 	.word	0x40026000
 8001410:	40023830 	.word	0x40023830
 8001414:	40026400 	.word	0x40026400
 8001418:	40000400 	.word	0x40000400
 800141c:	40000800 	.word	0x40000800
 8001420:	40000c00 	.word	0x40000c00

08001424 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001446:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800144a:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	431a      	orrs	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147a:	f3af 8000 	nop.w
 800147e:	4601      	mov	r1, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf0      	blt.n	800147a <_read+0x12>
  }

  return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e009      	b.n	80014c8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff89 	bl	80003d4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf1      	blt.n	80014b4 <_write+0x12>
  }
  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_close>:

int _close(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001500:	605a      	str	r2, [r3, #4]
  return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f000 f926 	bl	80017bc <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20020000 	.word	0x20020000
 800159c:	00000400 	.word	0x00000400
 80015a0:	200000b4 	.word	0x200000b4
 80015a4:	200000f8 	.word	0x200000f8

080015a8 <main>:

static void initialize_temp_display(void);
static void configure_timer5(void);

int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	//Configure the Timer Module for delay_us function
	configure_delay_timer();
 80015ac:	f7fe fe88 	bl	80002c0 <configure_delay_timer>

	//Configure the I2C Peripheral
	configure_i2c();
 80015b0:	f7fe fea8 	bl	8000304 <configure_i2c>

	//Disable printf() buffering
	setbuf(stdout, NULL);
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <main+0x30>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fa3d 	bl	8001a3c <setbuf>

	//Initialize the LCD module
	delay_us(1000000);
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <main+0x34>)
 80015c4:	f7fe fe64 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 80015c8:	f7ff fc58 	bl	8000e7c <lcd_pcf8574_init>
	delay_us(100000);
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <main+0x38>)
 80015ce:	f7fe fe5f 	bl	8000290 <delay_us>

	initialize_temp_display();
 80015d2:	f000 f807 	bl	80015e4 <initialize_temp_display>

	while(1)
 80015d6:	e7fe      	b.n	80015d6 <main+0x2e>
 80015d8:	20000008 	.word	0x20000008
 80015dc:	000f4240 	.word	0x000f4240
 80015e0:	000186a0 	.word	0x000186a0

080015e4 <initialize_temp_display>:

	return 0;
}

static void initialize_temp_display(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	uint8_t dht11_sensor_response;
	uint8_t dht11_sensor_data[5];

	//Display the temperature for the first time
	//Read the DHT11 Sensor
	dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 80015ea:	463b      	mov	r3, r7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff2b 	bl	8000448 <read_dht11_sensor>
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	if(dht11_sensor_response)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d022      	beq.n	8001642 <initialize_temp_display+0x5e>
	{
		//Ensure that printf() is redirected to LCD in "syscalls.c" file
		//Print RH Data
		lcd_pcf8574_clear_screen();
 80015fc:	f7ff fcf0 	bl	8000fe0 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 8001600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001604:	f7fe fe44 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 8001608:	f7ff fcf1 	bl	8000fee <lcd_pcf8574_return_home>
		delay_us(3000);
 800160c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001610:	f7fe fe3e 	bl	8000290 <delay_us>
		printf("RH:   %2d.%d",dht11_sensor_data[0],dht11_sensor_data[1]);
 8001614:	783b      	ldrb	r3, [r7, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	461a      	mov	r2, r3
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <initialize_temp_display+0x88>)
 800161e:	f000 f9e5 	bl	80019ec <iprintf>

		//Print TEMP Data
		lcd_pcf8574_set_position(1,0);
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fce9 	bl	8000ffc <lcd_pcf8574_set_position>
		delay_us(3000);
 800162a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800162e:	f7fe fe2f 	bl	8000290 <delay_us>
		printf("TEMP: %2d.%d C",dht11_sensor_data[2],dht11_sensor_data[3]);
 8001632:	78bb      	ldrb	r3, [r7, #2]
 8001634:	4619      	mov	r1, r3
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	461a      	mov	r2, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <initialize_temp_display+0x8c>)
 800163c:	f000 f9d6 	bl	80019ec <iprintf>
 8001640:	e00e      	b.n	8001660 <initialize_temp_display+0x7c>
	}
	else
	{
		lcd_pcf8574_clear_screen();
 8001642:	f7ff fccd 	bl	8000fe0 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 8001646:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800164a:	f7fe fe21 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 800164e:	f7ff fcce 	bl	8000fee <lcd_pcf8574_return_home>
		delay_us(3000);
 8001652:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001656:	f7fe fe1b 	bl	8000290 <delay_us>
		printf("Sensor Read Failed");
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <initialize_temp_display+0x90>)
 800165c:	f000 f9c6 	bl	80019ec <iprintf>
	}

	//Initialize the Timer Interrupts
	configure_timer5();
 8001660:	f000 f80a 	bl	8001678 <configure_timer5>

	return;
 8001664:	bf00      	nop
}
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	080028f0 	.word	0x080028f0
 8001670:	08002900 	.word	0x08002900
 8001674:	08002910 	.word	0x08002910

08001678 <configure_timer5>:

static void configure_timer5(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	TIM5_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM5;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <configure_timer5+0x44>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <configure_timer5+0x48>)
 8001680:	601a      	str	r2, [r3, #0]
	memset(&TIM5_Handle.General_Purpose_Timer_Config,0,sizeof(TIM5_Handle.General_Purpose_Timer_Config));
 8001682:	2228      	movs	r2, #40	; 0x28
 8001684:	2100      	movs	r1, #0
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <configure_timer5+0x4c>)
 8001688:	f000 f8ca 	bl	8001820 <memset>
	TIM5_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <configure_timer5+0x44>)
 800168e:	2201      	movs	r2, #1
 8001690:	605a      	str	r2, [r3, #4]
	TIM5_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0x4C4B400;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <configure_timer5+0x44>)
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <configure_timer5+0x50>)
 8001696:	609a      	str	r2, [r3, #8]
	TIM5_Handle.General_Purpose_Timer_Config.Timer_UpdateInterruptConfig = TIMER_UPDATE_INTERRUPT_ENABLE;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <configure_timer5+0x44>)
 800169a:	2201      	movs	r2, #1
 800169c:	731a      	strb	r2, [r3, #12]

	EnablePeriClk(TIM5);
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <configure_timer5+0x48>)
 80016a0:	f7ff fcfc 	bl	800109c <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM5_Handle);
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <configure_timer5+0x44>)
 80016a6:	f7fe ff57 	bl	8000558 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM5_Handle);
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <configure_timer5+0x44>)
 80016ac:	f7ff f995 	bl	80009da <General_Purpose_Timer_PeripheralEnable>

	NVIC_EnableIRQ(TIMER5_IRQ_NUM);
 80016b0:	2032      	movs	r0, #50	; 0x32
 80016b2:	f7ff feb7 	bl	8001424 <NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000b8 	.word	0x200000b8
 80016c0:	40000c00 	.word	0x40000c00
 80016c4:	200000bc 	.word	0x200000bc
 80016c8:	04c4b400 	.word	0x04c4b400

080016cc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	uint8_t dht11_sensor_response;
	uint8_t dht11_sensor_data[5];

	//Display the temperature for the first time
	//Read the DHT11 Sensor
	dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe feb7 	bl	8000448 <read_dht11_sensor>
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]

	if(dht11_sensor_response)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d022      	beq.n	800172a <TIM5_IRQHandler+0x5e>
	{
		//Ensure that printf() is redirected to LCD in "syscalls.c" file
		//Print RH Data
		lcd_pcf8574_clear_screen();
 80016e4:	f7ff fc7c 	bl	8000fe0 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 80016e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016ec:	f7fe fdd0 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 80016f0:	f7ff fc7d 	bl	8000fee <lcd_pcf8574_return_home>
		delay_us(3000);
 80016f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016f8:	f7fe fdca 	bl	8000290 <delay_us>
		printf("RH:   %2d.%d",dht11_sensor_data[0],dht11_sensor_data[1]);
 80016fc:	783b      	ldrb	r3, [r7, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	461a      	mov	r2, r3
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <TIM5_IRQHandler+0x8c>)
 8001706:	f000 f971 	bl	80019ec <iprintf>

		//Print TEMP Data
		lcd_pcf8574_set_position(1,0);
 800170a:	2100      	movs	r1, #0
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fc75 	bl	8000ffc <lcd_pcf8574_set_position>
		delay_us(3000);
 8001712:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001716:	f7fe fdbb 	bl	8000290 <delay_us>
		printf("TEMP: %2d.%d C",dht11_sensor_data[2],dht11_sensor_data[3]);
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	4619      	mov	r1, r3
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	461a      	mov	r2, r3
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <TIM5_IRQHandler+0x90>)
 8001724:	f000 f962 	bl	80019ec <iprintf>
 8001728:	e00e      	b.n	8001748 <TIM5_IRQHandler+0x7c>
	}
	else
	{
		lcd_pcf8574_clear_screen();
 800172a:	f7ff fc59 	bl	8000fe0 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 800172e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001732:	f7fe fdad 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 8001736:	f7ff fc5a 	bl	8000fee <lcd_pcf8574_return_home>
		delay_us(3000);
 800173a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800173e:	f7fe fda7 	bl	8000290 <delay_us>
		printf("Sensor Read Failed");
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <TIM5_IRQHandler+0x94>)
 8001744:	f000 f952 	bl	80019ec <iprintf>
	}

	//Clear the TIM5 Interrupt
	General_Purpose_Timer_ClearUpdateEventFlag(&TIM5_Handle);
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <TIM5_IRQHandler+0x98>)
 800174a:	f7ff f957 	bl	80009fc <General_Purpose_Timer_ClearUpdateEventFlag>

	return;
 800174e:	bf00      	nop
}
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	080028f0 	.word	0x080028f0
 800175c:	08002900 	.word	0x08002900
 8001760:	08002910 	.word	0x08002910
 8001764:	200000b8 	.word	0x200000b8

08001768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800176a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800176c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	; (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001796:	f000 f817 	bl	80017c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179a:	f7ff ff05 	bl	80015a8 <main>

0800179e <LoopForever>:

LoopForever:
  b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
  ldr   r0, =_estack
 80017a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017ac:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 80017b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017b4:	200000f4 	.word	0x200000f4

080017b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC_IRQHandler>
	...

080017bc <__errno>:
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <__errno+0x8>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__libc_init_array>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	4d0d      	ldr	r5, [pc, #52]	; (8001800 <__libc_init_array+0x38>)
 80017cc:	4c0d      	ldr	r4, [pc, #52]	; (8001804 <__libc_init_array+0x3c>)
 80017ce:	1b64      	subs	r4, r4, r5
 80017d0:	10a4      	asrs	r4, r4, #2
 80017d2:	2600      	movs	r6, #0
 80017d4:	42a6      	cmp	r6, r4
 80017d6:	d109      	bne.n	80017ec <__libc_init_array+0x24>
 80017d8:	4d0b      	ldr	r5, [pc, #44]	; (8001808 <__libc_init_array+0x40>)
 80017da:	4c0c      	ldr	r4, [pc, #48]	; (800180c <__libc_init_array+0x44>)
 80017dc:	f001 f87c 	bl	80028d8 <_init>
 80017e0:	1b64      	subs	r4, r4, r5
 80017e2:	10a4      	asrs	r4, r4, #2
 80017e4:	2600      	movs	r6, #0
 80017e6:	42a6      	cmp	r6, r4
 80017e8:	d105      	bne.n	80017f6 <__libc_init_array+0x2e>
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
 80017ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f0:	4798      	blx	r3
 80017f2:	3601      	adds	r6, #1
 80017f4:	e7ee      	b.n	80017d4 <__libc_init_array+0xc>
 80017f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fa:	4798      	blx	r3
 80017fc:	3601      	adds	r6, #1
 80017fe:	e7f2      	b.n	80017e6 <__libc_init_array+0x1e>
 8001800:	080029bc 	.word	0x080029bc
 8001804:	080029bc 	.word	0x080029bc
 8001808:	080029bc 	.word	0x080029bc
 800180c:	080029c0 	.word	0x080029c0

08001810 <malloc>:
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <malloc+0xc>)
 8001812:	4601      	mov	r1, r0
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	f000 b875 	b.w	8001904 <_malloc_r>
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008

08001820 <memset>:
 8001820:	4402      	add	r2, r0
 8001822:	4603      	mov	r3, r0
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	f803 1b01 	strb.w	r1, [r3], #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <_free_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4605      	mov	r5, r0
 8001834:	2900      	cmp	r1, #0
 8001836:	d041      	beq.n	80018bc <_free_r+0x8c>
 8001838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800183c:	1f0c      	subs	r4, r1, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	bfb8      	it	lt
 8001842:	18e4      	addlt	r4, r4, r3
 8001844:	f000 fca4 	bl	8002190 <__malloc_lock>
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <_free_r+0x90>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	b933      	cbnz	r3, 800185c <_free_r+0x2c>
 800184e:	6063      	str	r3, [r4, #4]
 8001850:	6014      	str	r4, [r2, #0]
 8001852:	4628      	mov	r0, r5
 8001854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001858:	f000 bca0 	b.w	800219c <__malloc_unlock>
 800185c:	42a3      	cmp	r3, r4
 800185e:	d908      	bls.n	8001872 <_free_r+0x42>
 8001860:	6820      	ldr	r0, [r4, #0]
 8001862:	1821      	adds	r1, r4, r0
 8001864:	428b      	cmp	r3, r1
 8001866:	bf01      	itttt	eq
 8001868:	6819      	ldreq	r1, [r3, #0]
 800186a:	685b      	ldreq	r3, [r3, #4]
 800186c:	1809      	addeq	r1, r1, r0
 800186e:	6021      	streq	r1, [r4, #0]
 8001870:	e7ed      	b.n	800184e <_free_r+0x1e>
 8001872:	461a      	mov	r2, r3
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	b10b      	cbz	r3, 800187c <_free_r+0x4c>
 8001878:	42a3      	cmp	r3, r4
 800187a:	d9fa      	bls.n	8001872 <_free_r+0x42>
 800187c:	6811      	ldr	r1, [r2, #0]
 800187e:	1850      	adds	r0, r2, r1
 8001880:	42a0      	cmp	r0, r4
 8001882:	d10b      	bne.n	800189c <_free_r+0x6c>
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	4401      	add	r1, r0
 8001888:	1850      	adds	r0, r2, r1
 800188a:	4283      	cmp	r3, r0
 800188c:	6011      	str	r1, [r2, #0]
 800188e:	d1e0      	bne.n	8001852 <_free_r+0x22>
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6053      	str	r3, [r2, #4]
 8001896:	4401      	add	r1, r0
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	e7da      	b.n	8001852 <_free_r+0x22>
 800189c:	d902      	bls.n	80018a4 <_free_r+0x74>
 800189e:	230c      	movs	r3, #12
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	e7d6      	b.n	8001852 <_free_r+0x22>
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	1821      	adds	r1, r4, r0
 80018a8:	428b      	cmp	r3, r1
 80018aa:	bf04      	itt	eq
 80018ac:	6819      	ldreq	r1, [r3, #0]
 80018ae:	685b      	ldreq	r3, [r3, #4]
 80018b0:	6063      	str	r3, [r4, #4]
 80018b2:	bf04      	itt	eq
 80018b4:	1809      	addeq	r1, r1, r0
 80018b6:	6021      	streq	r1, [r4, #0]
 80018b8:	6054      	str	r4, [r2, #4]
 80018ba:	e7ca      	b.n	8001852 <_free_r+0x22>
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
 80018be:	bf00      	nop
 80018c0:	200000e4 	.word	0x200000e4

080018c4 <sbrk_aligned>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	4e0e      	ldr	r6, [pc, #56]	; (8001900 <sbrk_aligned+0x3c>)
 80018c8:	460c      	mov	r4, r1
 80018ca:	6831      	ldr	r1, [r6, #0]
 80018cc:	4605      	mov	r5, r0
 80018ce:	b911      	cbnz	r1, 80018d6 <sbrk_aligned+0x12>
 80018d0:	f000 f8a4 	bl	8001a1c <_sbrk_r>
 80018d4:	6030      	str	r0, [r6, #0]
 80018d6:	4621      	mov	r1, r4
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f89f 	bl	8001a1c <_sbrk_r>
 80018de:	1c43      	adds	r3, r0, #1
 80018e0:	d00a      	beq.n	80018f8 <sbrk_aligned+0x34>
 80018e2:	1cc4      	adds	r4, r0, #3
 80018e4:	f024 0403 	bic.w	r4, r4, #3
 80018e8:	42a0      	cmp	r0, r4
 80018ea:	d007      	beq.n	80018fc <sbrk_aligned+0x38>
 80018ec:	1a21      	subs	r1, r4, r0
 80018ee:	4628      	mov	r0, r5
 80018f0:	f000 f894 	bl	8001a1c <_sbrk_r>
 80018f4:	3001      	adds	r0, #1
 80018f6:	d101      	bne.n	80018fc <sbrk_aligned+0x38>
 80018f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80018fc:	4620      	mov	r0, r4
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
 8001900:	200000e8 	.word	0x200000e8

08001904 <_malloc_r>:
 8001904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001908:	1ccd      	adds	r5, r1, #3
 800190a:	f025 0503 	bic.w	r5, r5, #3
 800190e:	3508      	adds	r5, #8
 8001910:	2d0c      	cmp	r5, #12
 8001912:	bf38      	it	cc
 8001914:	250c      	movcc	r5, #12
 8001916:	2d00      	cmp	r5, #0
 8001918:	4607      	mov	r7, r0
 800191a:	db01      	blt.n	8001920 <_malloc_r+0x1c>
 800191c:	42a9      	cmp	r1, r5
 800191e:	d905      	bls.n	800192c <_malloc_r+0x28>
 8001920:	230c      	movs	r3, #12
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	2600      	movs	r6, #0
 8001926:	4630      	mov	r0, r6
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192c:	4e2e      	ldr	r6, [pc, #184]	; (80019e8 <_malloc_r+0xe4>)
 800192e:	f000 fc2f 	bl	8002190 <__malloc_lock>
 8001932:	6833      	ldr	r3, [r6, #0]
 8001934:	461c      	mov	r4, r3
 8001936:	bb34      	cbnz	r4, 8001986 <_malloc_r+0x82>
 8001938:	4629      	mov	r1, r5
 800193a:	4638      	mov	r0, r7
 800193c:	f7ff ffc2 	bl	80018c4 <sbrk_aligned>
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	4604      	mov	r4, r0
 8001944:	d14d      	bne.n	80019e2 <_malloc_r+0xde>
 8001946:	6834      	ldr	r4, [r6, #0]
 8001948:	4626      	mov	r6, r4
 800194a:	2e00      	cmp	r6, #0
 800194c:	d140      	bne.n	80019d0 <_malloc_r+0xcc>
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	4631      	mov	r1, r6
 8001952:	4638      	mov	r0, r7
 8001954:	eb04 0803 	add.w	r8, r4, r3
 8001958:	f000 f860 	bl	8001a1c <_sbrk_r>
 800195c:	4580      	cmp	r8, r0
 800195e:	d13a      	bne.n	80019d6 <_malloc_r+0xd2>
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	3503      	adds	r5, #3
 8001964:	1a6d      	subs	r5, r5, r1
 8001966:	f025 0503 	bic.w	r5, r5, #3
 800196a:	3508      	adds	r5, #8
 800196c:	2d0c      	cmp	r5, #12
 800196e:	bf38      	it	cc
 8001970:	250c      	movcc	r5, #12
 8001972:	4629      	mov	r1, r5
 8001974:	4638      	mov	r0, r7
 8001976:	f7ff ffa5 	bl	80018c4 <sbrk_aligned>
 800197a:	3001      	adds	r0, #1
 800197c:	d02b      	beq.n	80019d6 <_malloc_r+0xd2>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	442b      	add	r3, r5
 8001982:	6023      	str	r3, [r4, #0]
 8001984:	e00e      	b.n	80019a4 <_malloc_r+0xa0>
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	1b52      	subs	r2, r2, r5
 800198a:	d41e      	bmi.n	80019ca <_malloc_r+0xc6>
 800198c:	2a0b      	cmp	r2, #11
 800198e:	d916      	bls.n	80019be <_malloc_r+0xba>
 8001990:	1961      	adds	r1, r4, r5
 8001992:	42a3      	cmp	r3, r4
 8001994:	6025      	str	r5, [r4, #0]
 8001996:	bf18      	it	ne
 8001998:	6059      	strne	r1, [r3, #4]
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	bf08      	it	eq
 800199e:	6031      	streq	r1, [r6, #0]
 80019a0:	5162      	str	r2, [r4, r5]
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	4638      	mov	r0, r7
 80019a6:	f104 060b 	add.w	r6, r4, #11
 80019aa:	f000 fbf7 	bl	800219c <__malloc_unlock>
 80019ae:	f026 0607 	bic.w	r6, r6, #7
 80019b2:	1d23      	adds	r3, r4, #4
 80019b4:	1af2      	subs	r2, r6, r3
 80019b6:	d0b6      	beq.n	8001926 <_malloc_r+0x22>
 80019b8:	1b9b      	subs	r3, r3, r6
 80019ba:	50a3      	str	r3, [r4, r2]
 80019bc:	e7b3      	b.n	8001926 <_malloc_r+0x22>
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	bf0c      	ite	eq
 80019c4:	6032      	streq	r2, [r6, #0]
 80019c6:	605a      	strne	r2, [r3, #4]
 80019c8:	e7ec      	b.n	80019a4 <_malloc_r+0xa0>
 80019ca:	4623      	mov	r3, r4
 80019cc:	6864      	ldr	r4, [r4, #4]
 80019ce:	e7b2      	b.n	8001936 <_malloc_r+0x32>
 80019d0:	4634      	mov	r4, r6
 80019d2:	6876      	ldr	r6, [r6, #4]
 80019d4:	e7b9      	b.n	800194a <_malloc_r+0x46>
 80019d6:	230c      	movs	r3, #12
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4638      	mov	r0, r7
 80019dc:	f000 fbde 	bl	800219c <__malloc_unlock>
 80019e0:	e7a1      	b.n	8001926 <_malloc_r+0x22>
 80019e2:	6025      	str	r5, [r4, #0]
 80019e4:	e7de      	b.n	80019a4 <_malloc_r+0xa0>
 80019e6:	bf00      	nop
 80019e8:	200000e4 	.word	0x200000e4

080019ec <iprintf>:
 80019ec:	b40f      	push	{r0, r1, r2, r3}
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <iprintf+0x2c>)
 80019f0:	b513      	push	{r0, r1, r4, lr}
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	b124      	cbz	r4, 8001a00 <iprintf+0x14>
 80019f6:	69a3      	ldr	r3, [r4, #24]
 80019f8:	b913      	cbnz	r3, 8001a00 <iprintf+0x14>
 80019fa:	4620      	mov	r0, r4
 80019fc:	f000 fac2 	bl	8001f84 <__sinit>
 8001a00:	ab05      	add	r3, sp, #20
 8001a02:	9a04      	ldr	r2, [sp, #16]
 8001a04:	68a1      	ldr	r1, [r4, #8]
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 fbf5 	bl	80021f8 <_vfiprintf_r>
 8001a0e:	b002      	add	sp, #8
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a14:	b004      	add	sp, #16
 8001a16:	4770      	bx	lr
 8001a18:	20000008 	.word	0x20000008

08001a1c <_sbrk_r>:
 8001a1c:	b538      	push	{r3, r4, r5, lr}
 8001a1e:	4d06      	ldr	r5, [pc, #24]	; (8001a38 <_sbrk_r+0x1c>)
 8001a20:	2300      	movs	r3, #0
 8001a22:	4604      	mov	r4, r0
 8001a24:	4608      	mov	r0, r1
 8001a26:	602b      	str	r3, [r5, #0]
 8001a28:	f7ff fd88 	bl	800153c <_sbrk>
 8001a2c:	1c43      	adds	r3, r0, #1
 8001a2e:	d102      	bne.n	8001a36 <_sbrk_r+0x1a>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	b103      	cbz	r3, 8001a36 <_sbrk_r+0x1a>
 8001a34:	6023      	str	r3, [r4, #0]
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
 8001a38:	200000f0 	.word	0x200000f0

08001a3c <setbuf>:
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	bf0c      	ite	eq
 8001a44:	2202      	moveq	r2, #2
 8001a46:	2200      	movne	r2, #0
 8001a48:	f000 b800 	b.w	8001a4c <setvbuf>

08001a4c <setvbuf>:
 8001a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a50:	461d      	mov	r5, r3
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <setvbuf+0x17c>)
 8001a54:	681f      	ldr	r7, [r3, #0]
 8001a56:	4604      	mov	r4, r0
 8001a58:	460e      	mov	r6, r1
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	b127      	cbz	r7, 8001a68 <setvbuf+0x1c>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	b913      	cbnz	r3, 8001a68 <setvbuf+0x1c>
 8001a62:	4638      	mov	r0, r7
 8001a64:	f000 fa8e 	bl	8001f84 <__sinit>
 8001a68:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <setvbuf+0x180>)
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	d167      	bne.n	8001b3e <setvbuf+0xf2>
 8001a6e:	687c      	ldr	r4, [r7, #4]
 8001a70:	f1b8 0f02 	cmp.w	r8, #2
 8001a74:	d006      	beq.n	8001a84 <setvbuf+0x38>
 8001a76:	f1b8 0f01 	cmp.w	r8, #1
 8001a7a:	f200 809f 	bhi.w	8001bbc <setvbuf+0x170>
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	f2c0 809c 	blt.w	8001bbc <setvbuf+0x170>
 8001a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a86:	07db      	lsls	r3, r3, #31
 8001a88:	d405      	bmi.n	8001a96 <setvbuf+0x4a>
 8001a8a:	89a3      	ldrh	r3, [r4, #12]
 8001a8c:	0598      	lsls	r0, r3, #22
 8001a8e:	d402      	bmi.n	8001a96 <setvbuf+0x4a>
 8001a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a92:	f000 fb15 	bl	80020c0 <__retarget_lock_acquire_recursive>
 8001a96:	4621      	mov	r1, r4
 8001a98:	4638      	mov	r0, r7
 8001a9a:	f000 f9df 	bl	8001e5c <_fflush_r>
 8001a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aa0:	b141      	cbz	r1, 8001ab4 <setvbuf+0x68>
 8001aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aa6:	4299      	cmp	r1, r3
 8001aa8:	d002      	beq.n	8001ab0 <setvbuf+0x64>
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff fec0 	bl	8001830 <_free_r>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6363      	str	r3, [r4, #52]	; 0x34
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61a3      	str	r3, [r4, #24]
 8001ab8:	6063      	str	r3, [r4, #4]
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	0619      	lsls	r1, r3, #24
 8001abe:	d503      	bpl.n	8001ac8 <setvbuf+0x7c>
 8001ac0:	6921      	ldr	r1, [r4, #16]
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f7ff feb4 	bl	8001830 <_free_r>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	f1b8 0f02 	cmp.w	r8, #2
 8001ad6:	81a3      	strh	r3, [r4, #12]
 8001ad8:	d06c      	beq.n	8001bb4 <setvbuf+0x168>
 8001ada:	ab01      	add	r3, sp, #4
 8001adc:	466a      	mov	r2, sp
 8001ade:	4621      	mov	r1, r4
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	f000 faef 	bl	80020c4 <__swhatbuf_r>
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	81a0      	strh	r0, [r4, #12]
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	d130      	bne.n	8001b52 <setvbuf+0x106>
 8001af0:	9d00      	ldr	r5, [sp, #0]
 8001af2:	4628      	mov	r0, r5
 8001af4:	f7ff fe8c 	bl	8001810 <malloc>
 8001af8:	4606      	mov	r6, r0
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d155      	bne.n	8001baa <setvbuf+0x15e>
 8001afe:	f8dd 9000 	ldr.w	r9, [sp]
 8001b02:	45a9      	cmp	r9, r5
 8001b04:	d14a      	bne.n	8001b9c <setvbuf+0x150>
 8001b06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60a2      	str	r2, [r4, #8]
 8001b0e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001b12:	6022      	str	r2, [r4, #0]
 8001b14:	6122      	str	r2, [r4, #16]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1c:	6162      	str	r2, [r4, #20]
 8001b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	07d2      	lsls	r2, r2, #31
 8001b26:	81a3      	strh	r3, [r4, #12]
 8001b28:	d405      	bmi.n	8001b36 <setvbuf+0xea>
 8001b2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b2e:	d102      	bne.n	8001b36 <setvbuf+0xea>
 8001b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b32:	f000 fac6 	bl	80020c2 <__retarget_lock_release_recursive>
 8001b36:	4628      	mov	r0, r5
 8001b38:	b003      	add	sp, #12
 8001b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <setvbuf+0x184>)
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d101      	bne.n	8001b48 <setvbuf+0xfc>
 8001b44:	68bc      	ldr	r4, [r7, #8]
 8001b46:	e793      	b.n	8001a70 <setvbuf+0x24>
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <setvbuf+0x188>)
 8001b4a:	429c      	cmp	r4, r3
 8001b4c:	bf08      	it	eq
 8001b4e:	68fc      	ldreq	r4, [r7, #12]
 8001b50:	e78e      	b.n	8001a70 <setvbuf+0x24>
 8001b52:	2e00      	cmp	r6, #0
 8001b54:	d0cd      	beq.n	8001af2 <setvbuf+0xa6>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	b913      	cbnz	r3, 8001b60 <setvbuf+0x114>
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f000 fa12 	bl	8001f84 <__sinit>
 8001b60:	f1b8 0f01 	cmp.w	r8, #1
 8001b64:	bf08      	it	eq
 8001b66:	89a3      	ldrheq	r3, [r4, #12]
 8001b68:	6026      	str	r6, [r4, #0]
 8001b6a:	bf04      	itt	eq
 8001b6c:	f043 0301 	orreq.w	r3, r3, #1
 8001b70:	81a3      	strheq	r3, [r4, #12]
 8001b72:	89a2      	ldrh	r2, [r4, #12]
 8001b74:	f012 0308 	ands.w	r3, r2, #8
 8001b78:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001b7c:	d01c      	beq.n	8001bb8 <setvbuf+0x16c>
 8001b7e:	07d3      	lsls	r3, r2, #31
 8001b80:	bf41      	itttt	mi
 8001b82:	2300      	movmi	r3, #0
 8001b84:	426d      	negmi	r5, r5
 8001b86:	60a3      	strmi	r3, [r4, #8]
 8001b88:	61a5      	strmi	r5, [r4, #24]
 8001b8a:	bf58      	it	pl
 8001b8c:	60a5      	strpl	r5, [r4, #8]
 8001b8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001b90:	f015 0501 	ands.w	r5, r5, #1
 8001b94:	d115      	bne.n	8001bc2 <setvbuf+0x176>
 8001b96:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001b9a:	e7c8      	b.n	8001b2e <setvbuf+0xe2>
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	f7ff fe37 	bl	8001810 <malloc>
 8001ba2:	4606      	mov	r6, r0
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d0ae      	beq.n	8001b06 <setvbuf+0xba>
 8001ba8:	464d      	mov	r5, r9
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	81a3      	strh	r3, [r4, #12]
 8001bb2:	e7d0      	b.n	8001b56 <setvbuf+0x10a>
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	e7a8      	b.n	8001b0a <setvbuf+0xbe>
 8001bb8:	60a3      	str	r3, [r4, #8]
 8001bba:	e7e8      	b.n	8001b8e <setvbuf+0x142>
 8001bbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001bc0:	e7b9      	b.n	8001b36 <setvbuf+0xea>
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	e7b7      	b.n	8001b36 <setvbuf+0xea>
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	08002948 	.word	0x08002948
 8001bd0:	08002968 	.word	0x08002968
 8001bd4:	08002928 	.word	0x08002928

08001bd8 <__swbuf_r>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	460e      	mov	r6, r1
 8001bdc:	4614      	mov	r4, r2
 8001bde:	4605      	mov	r5, r0
 8001be0:	b118      	cbz	r0, 8001bea <__swbuf_r+0x12>
 8001be2:	6983      	ldr	r3, [r0, #24]
 8001be4:	b90b      	cbnz	r3, 8001bea <__swbuf_r+0x12>
 8001be6:	f000 f9cd 	bl	8001f84 <__sinit>
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <__swbuf_r+0x98>)
 8001bec:	429c      	cmp	r4, r3
 8001bee:	d12b      	bne.n	8001c48 <__swbuf_r+0x70>
 8001bf0:	686c      	ldr	r4, [r5, #4]
 8001bf2:	69a3      	ldr	r3, [r4, #24]
 8001bf4:	60a3      	str	r3, [r4, #8]
 8001bf6:	89a3      	ldrh	r3, [r4, #12]
 8001bf8:	071a      	lsls	r2, r3, #28
 8001bfa:	d52f      	bpl.n	8001c5c <__swbuf_r+0x84>
 8001bfc:	6923      	ldr	r3, [r4, #16]
 8001bfe:	b36b      	cbz	r3, 8001c5c <__swbuf_r+0x84>
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	1ac0      	subs	r0, r0, r3
 8001c06:	6963      	ldr	r3, [r4, #20]
 8001c08:	b2f6      	uxtb	r6, r6
 8001c0a:	4283      	cmp	r3, r0
 8001c0c:	4637      	mov	r7, r6
 8001c0e:	dc04      	bgt.n	8001c1a <__swbuf_r+0x42>
 8001c10:	4621      	mov	r1, r4
 8001c12:	4628      	mov	r0, r5
 8001c14:	f000 f922 	bl	8001e5c <_fflush_r>
 8001c18:	bb30      	cbnz	r0, 8001c68 <__swbuf_r+0x90>
 8001c1a:	68a3      	ldr	r3, [r4, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60a3      	str	r3, [r4, #8]
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	6022      	str	r2, [r4, #0]
 8001c26:	701e      	strb	r6, [r3, #0]
 8001c28:	6963      	ldr	r3, [r4, #20]
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	4283      	cmp	r3, r0
 8001c2e:	d004      	beq.n	8001c3a <__swbuf_r+0x62>
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	07db      	lsls	r3, r3, #31
 8001c34:	d506      	bpl.n	8001c44 <__swbuf_r+0x6c>
 8001c36:	2e0a      	cmp	r6, #10
 8001c38:	d104      	bne.n	8001c44 <__swbuf_r+0x6c>
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f90d 	bl	8001e5c <_fflush_r>
 8001c42:	b988      	cbnz	r0, 8001c68 <__swbuf_r+0x90>
 8001c44:	4638      	mov	r0, r7
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <__swbuf_r+0x9c>)
 8001c4a:	429c      	cmp	r4, r3
 8001c4c:	d101      	bne.n	8001c52 <__swbuf_r+0x7a>
 8001c4e:	68ac      	ldr	r4, [r5, #8]
 8001c50:	e7cf      	b.n	8001bf2 <__swbuf_r+0x1a>
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <__swbuf_r+0xa0>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	bf08      	it	eq
 8001c58:	68ec      	ldreq	r4, [r5, #12]
 8001c5a:	e7ca      	b.n	8001bf2 <__swbuf_r+0x1a>
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f000 f80c 	bl	8001c7c <__swsetup_r>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d0cb      	beq.n	8001c00 <__swbuf_r+0x28>
 8001c68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c6c:	e7ea      	b.n	8001c44 <__swbuf_r+0x6c>
 8001c6e:	bf00      	nop
 8001c70:	08002948 	.word	0x08002948
 8001c74:	08002968 	.word	0x08002968
 8001c78:	08002928 	.word	0x08002928

08001c7c <__swsetup_r>:
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <__swsetup_r+0xcc>)
 8001c7e:	b570      	push	{r4, r5, r6, lr}
 8001c80:	681d      	ldr	r5, [r3, #0]
 8001c82:	4606      	mov	r6, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	b125      	cbz	r5, 8001c92 <__swsetup_r+0x16>
 8001c88:	69ab      	ldr	r3, [r5, #24]
 8001c8a:	b913      	cbnz	r3, 8001c92 <__swsetup_r+0x16>
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f000 f979 	bl	8001f84 <__sinit>
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <__swsetup_r+0xd0>)
 8001c94:	429c      	cmp	r4, r3
 8001c96:	d10f      	bne.n	8001cb8 <__swsetup_r+0x3c>
 8001c98:	686c      	ldr	r4, [r5, #4]
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ca0:	0719      	lsls	r1, r3, #28
 8001ca2:	d42c      	bmi.n	8001cfe <__swsetup_r+0x82>
 8001ca4:	06dd      	lsls	r5, r3, #27
 8001ca6:	d411      	bmi.n	8001ccc <__swsetup_r+0x50>
 8001ca8:	2309      	movs	r3, #9
 8001caa:	6033      	str	r3, [r6, #0]
 8001cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001cb0:	81a3      	strh	r3, [r4, #12]
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb6:	e03e      	b.n	8001d36 <__swsetup_r+0xba>
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <__swsetup_r+0xd4>)
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	d101      	bne.n	8001cc2 <__swsetup_r+0x46>
 8001cbe:	68ac      	ldr	r4, [r5, #8]
 8001cc0:	e7eb      	b.n	8001c9a <__swsetup_r+0x1e>
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <__swsetup_r+0xd8>)
 8001cc4:	429c      	cmp	r4, r3
 8001cc6:	bf08      	it	eq
 8001cc8:	68ec      	ldreq	r4, [r5, #12]
 8001cca:	e7e6      	b.n	8001c9a <__swsetup_r+0x1e>
 8001ccc:	0758      	lsls	r0, r3, #29
 8001cce:	d512      	bpl.n	8001cf6 <__swsetup_r+0x7a>
 8001cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cd2:	b141      	cbz	r1, 8001ce6 <__swsetup_r+0x6a>
 8001cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cd8:	4299      	cmp	r1, r3
 8001cda:	d002      	beq.n	8001ce2 <__swsetup_r+0x66>
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f7ff fda7 	bl	8001830 <_free_r>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8001ce6:	89a3      	ldrh	r3, [r4, #12]
 8001ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cec:	81a3      	strh	r3, [r4, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	6063      	str	r3, [r4, #4]
 8001cf2:	6923      	ldr	r3, [r4, #16]
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	89a3      	ldrh	r3, [r4, #12]
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	81a3      	strh	r3, [r4, #12]
 8001cfe:	6923      	ldr	r3, [r4, #16]
 8001d00:	b94b      	cbnz	r3, 8001d16 <__swsetup_r+0x9a>
 8001d02:	89a3      	ldrh	r3, [r4, #12]
 8001d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d003      	beq.n	8001d16 <__swsetup_r+0x9a>
 8001d0e:	4621      	mov	r1, r4
 8001d10:	4630      	mov	r0, r6
 8001d12:	f000 f9fd 	bl	8002110 <__smakebuf_r>
 8001d16:	89a0      	ldrh	r0, [r4, #12]
 8001d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d1c:	f010 0301 	ands.w	r3, r0, #1
 8001d20:	d00a      	beq.n	8001d38 <__swsetup_r+0xbc>
 8001d22:	2300      	movs	r3, #0
 8001d24:	60a3      	str	r3, [r4, #8]
 8001d26:	6963      	ldr	r3, [r4, #20]
 8001d28:	425b      	negs	r3, r3
 8001d2a:	61a3      	str	r3, [r4, #24]
 8001d2c:	6923      	ldr	r3, [r4, #16]
 8001d2e:	b943      	cbnz	r3, 8001d42 <__swsetup_r+0xc6>
 8001d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d34:	d1ba      	bne.n	8001cac <__swsetup_r+0x30>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	0781      	lsls	r1, r0, #30
 8001d3a:	bf58      	it	pl
 8001d3c:	6963      	ldrpl	r3, [r4, #20]
 8001d3e:	60a3      	str	r3, [r4, #8]
 8001d40:	e7f4      	b.n	8001d2c <__swsetup_r+0xb0>
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7f7      	b.n	8001d36 <__swsetup_r+0xba>
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	08002948 	.word	0x08002948
 8001d50:	08002968 	.word	0x08002968
 8001d54:	08002928 	.word	0x08002928

08001d58 <__sflush_r>:
 8001d58:	898a      	ldrh	r2, [r1, #12]
 8001d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	0710      	lsls	r0, r2, #28
 8001d60:	460c      	mov	r4, r1
 8001d62:	d457      	bmi.n	8001e14 <__sflush_r+0xbc>
 8001d64:	684b      	ldr	r3, [r1, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	dc04      	bgt.n	8001d74 <__sflush_r+0x1c>
 8001d6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	dc01      	bgt.n	8001d74 <__sflush_r+0x1c>
 8001d70:	2000      	movs	r0, #0
 8001d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d76:	2e00      	cmp	r6, #0
 8001d78:	d0fa      	beq.n	8001d70 <__sflush_r+0x18>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d80:	682f      	ldr	r7, [r5, #0]
 8001d82:	602b      	str	r3, [r5, #0]
 8001d84:	d032      	beq.n	8001dec <__sflush_r+0x94>
 8001d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	075a      	lsls	r2, r3, #29
 8001d8c:	d505      	bpl.n	8001d9a <__sflush_r+0x42>
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	1ac0      	subs	r0, r0, r3
 8001d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d94:	b10b      	cbz	r3, 8001d9a <__sflush_r+0x42>
 8001d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d98:	1ac0      	subs	r0, r0, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001da0:	6a21      	ldr	r1, [r4, #32]
 8001da2:	4628      	mov	r0, r5
 8001da4:	47b0      	blx	r6
 8001da6:	1c43      	adds	r3, r0, #1
 8001da8:	89a3      	ldrh	r3, [r4, #12]
 8001daa:	d106      	bne.n	8001dba <__sflush_r+0x62>
 8001dac:	6829      	ldr	r1, [r5, #0]
 8001dae:	291d      	cmp	r1, #29
 8001db0:	d82c      	bhi.n	8001e0c <__sflush_r+0xb4>
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <__sflush_r+0x100>)
 8001db4:	40ca      	lsrs	r2, r1
 8001db6:	07d6      	lsls	r6, r2, #31
 8001db8:	d528      	bpl.n	8001e0c <__sflush_r+0xb4>
 8001dba:	2200      	movs	r2, #0
 8001dbc:	6062      	str	r2, [r4, #4]
 8001dbe:	04d9      	lsls	r1, r3, #19
 8001dc0:	6922      	ldr	r2, [r4, #16]
 8001dc2:	6022      	str	r2, [r4, #0]
 8001dc4:	d504      	bpl.n	8001dd0 <__sflush_r+0x78>
 8001dc6:	1c42      	adds	r2, r0, #1
 8001dc8:	d101      	bne.n	8001dce <__sflush_r+0x76>
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	b903      	cbnz	r3, 8001dd0 <__sflush_r+0x78>
 8001dce:	6560      	str	r0, [r4, #84]	; 0x54
 8001dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dd2:	602f      	str	r7, [r5, #0]
 8001dd4:	2900      	cmp	r1, #0
 8001dd6:	d0cb      	beq.n	8001d70 <__sflush_r+0x18>
 8001dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ddc:	4299      	cmp	r1, r3
 8001dde:	d002      	beq.n	8001de6 <__sflush_r+0x8e>
 8001de0:	4628      	mov	r0, r5
 8001de2:	f7ff fd25 	bl	8001830 <_free_r>
 8001de6:	2000      	movs	r0, #0
 8001de8:	6360      	str	r0, [r4, #52]	; 0x34
 8001dea:	e7c2      	b.n	8001d72 <__sflush_r+0x1a>
 8001dec:	6a21      	ldr	r1, [r4, #32]
 8001dee:	2301      	movs	r3, #1
 8001df0:	4628      	mov	r0, r5
 8001df2:	47b0      	blx	r6
 8001df4:	1c41      	adds	r1, r0, #1
 8001df6:	d1c7      	bne.n	8001d88 <__sflush_r+0x30>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0c4      	beq.n	8001d88 <__sflush_r+0x30>
 8001dfe:	2b1d      	cmp	r3, #29
 8001e00:	d001      	beq.n	8001e06 <__sflush_r+0xae>
 8001e02:	2b16      	cmp	r3, #22
 8001e04:	d101      	bne.n	8001e0a <__sflush_r+0xb2>
 8001e06:	602f      	str	r7, [r5, #0]
 8001e08:	e7b2      	b.n	8001d70 <__sflush_r+0x18>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	e7ae      	b.n	8001d72 <__sflush_r+0x1a>
 8001e14:	690f      	ldr	r7, [r1, #16]
 8001e16:	2f00      	cmp	r7, #0
 8001e18:	d0aa      	beq.n	8001d70 <__sflush_r+0x18>
 8001e1a:	0793      	lsls	r3, r2, #30
 8001e1c:	680e      	ldr	r6, [r1, #0]
 8001e1e:	bf08      	it	eq
 8001e20:	694b      	ldreq	r3, [r1, #20]
 8001e22:	600f      	str	r7, [r1, #0]
 8001e24:	bf18      	it	ne
 8001e26:	2300      	movne	r3, #0
 8001e28:	1bf6      	subs	r6, r6, r7
 8001e2a:	608b      	str	r3, [r1, #8]
 8001e2c:	2e00      	cmp	r6, #0
 8001e2e:	dd9f      	ble.n	8001d70 <__sflush_r+0x18>
 8001e30:	6a21      	ldr	r1, [r4, #32]
 8001e32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e36:	4633      	mov	r3, r6
 8001e38:	463a      	mov	r2, r7
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	47e0      	blx	ip
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	dc06      	bgt.n	8001e50 <__sflush_r+0xf8>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e48:	81a3      	strh	r3, [r4, #12]
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4e:	e790      	b.n	8001d72 <__sflush_r+0x1a>
 8001e50:	4407      	add	r7, r0
 8001e52:	1a36      	subs	r6, r6, r0
 8001e54:	e7ea      	b.n	8001e2c <__sflush_r+0xd4>
 8001e56:	bf00      	nop
 8001e58:	20400001 	.word	0x20400001

08001e5c <_fflush_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	690b      	ldr	r3, [r1, #16]
 8001e60:	4605      	mov	r5, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	b913      	cbnz	r3, 8001e6c <_fflush_r+0x10>
 8001e66:	2500      	movs	r5, #0
 8001e68:	4628      	mov	r0, r5
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	b118      	cbz	r0, 8001e76 <_fflush_r+0x1a>
 8001e6e:	6983      	ldr	r3, [r0, #24]
 8001e70:	b90b      	cbnz	r3, 8001e76 <_fflush_r+0x1a>
 8001e72:	f000 f887 	bl	8001f84 <__sinit>
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <_fflush_r+0x6c>)
 8001e78:	429c      	cmp	r4, r3
 8001e7a:	d11b      	bne.n	8001eb4 <_fflush_r+0x58>
 8001e7c:	686c      	ldr	r4, [r5, #4]
 8001e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0ef      	beq.n	8001e66 <_fflush_r+0xa>
 8001e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e88:	07d0      	lsls	r0, r2, #31
 8001e8a:	d404      	bmi.n	8001e96 <_fflush_r+0x3a>
 8001e8c:	0599      	lsls	r1, r3, #22
 8001e8e:	d402      	bmi.n	8001e96 <_fflush_r+0x3a>
 8001e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e92:	f000 f915 	bl	80020c0 <__retarget_lock_acquire_recursive>
 8001e96:	4628      	mov	r0, r5
 8001e98:	4621      	mov	r1, r4
 8001e9a:	f7ff ff5d 	bl	8001d58 <__sflush_r>
 8001e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ea0:	07da      	lsls	r2, r3, #31
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	d4e0      	bmi.n	8001e68 <_fflush_r+0xc>
 8001ea6:	89a3      	ldrh	r3, [r4, #12]
 8001ea8:	059b      	lsls	r3, r3, #22
 8001eaa:	d4dd      	bmi.n	8001e68 <_fflush_r+0xc>
 8001eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eae:	f000 f908 	bl	80020c2 <__retarget_lock_release_recursive>
 8001eb2:	e7d9      	b.n	8001e68 <_fflush_r+0xc>
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <_fflush_r+0x70>)
 8001eb6:	429c      	cmp	r4, r3
 8001eb8:	d101      	bne.n	8001ebe <_fflush_r+0x62>
 8001eba:	68ac      	ldr	r4, [r5, #8]
 8001ebc:	e7df      	b.n	8001e7e <_fflush_r+0x22>
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <_fflush_r+0x74>)
 8001ec0:	429c      	cmp	r4, r3
 8001ec2:	bf08      	it	eq
 8001ec4:	68ec      	ldreq	r4, [r5, #12]
 8001ec6:	e7da      	b.n	8001e7e <_fflush_r+0x22>
 8001ec8:	08002948 	.word	0x08002948
 8001ecc:	08002968 	.word	0x08002968
 8001ed0:	08002928 	.word	0x08002928

08001ed4 <std>:
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	b510      	push	{r4, lr}
 8001ed8:	4604      	mov	r4, r0
 8001eda:	e9c0 3300 	strd	r3, r3, [r0]
 8001ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ee2:	6083      	str	r3, [r0, #8]
 8001ee4:	8181      	strh	r1, [r0, #12]
 8001ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ee8:	81c2      	strh	r2, [r0, #14]
 8001eea:	6183      	str	r3, [r0, #24]
 8001eec:	4619      	mov	r1, r3
 8001eee:	2208      	movs	r2, #8
 8001ef0:	305c      	adds	r0, #92	; 0x5c
 8001ef2:	f7ff fc95 	bl	8001820 <memset>
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <std+0x38>)
 8001ef8:	6263      	str	r3, [r4, #36]	; 0x24
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <std+0x3c>)
 8001efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <std+0x40>)
 8001f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <std+0x44>)
 8001f04:	6224      	str	r4, [r4, #32]
 8001f06:	6323      	str	r3, [r4, #48]	; 0x30
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08002781 	.word	0x08002781
 8001f10:	080027a3 	.word	0x080027a3
 8001f14:	080027db 	.word	0x080027db
 8001f18:	080027ff 	.word	0x080027ff

08001f1c <_cleanup_r>:
 8001f1c:	4901      	ldr	r1, [pc, #4]	; (8001f24 <_cleanup_r+0x8>)
 8001f1e:	f000 b8af 	b.w	8002080 <_fwalk_reent>
 8001f22:	bf00      	nop
 8001f24:	08001e5d 	.word	0x08001e5d

08001f28 <__sfmoreglue>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	2268      	movs	r2, #104	; 0x68
 8001f2c:	1e4d      	subs	r5, r1, #1
 8001f2e:	4355      	muls	r5, r2
 8001f30:	460e      	mov	r6, r1
 8001f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f36:	f7ff fce5 	bl	8001904 <_malloc_r>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	b140      	cbz	r0, 8001f50 <__sfmoreglue+0x28>
 8001f3e:	2100      	movs	r1, #0
 8001f40:	e9c0 1600 	strd	r1, r6, [r0]
 8001f44:	300c      	adds	r0, #12
 8001f46:	60a0      	str	r0, [r4, #8]
 8001f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f4c:	f7ff fc68 	bl	8001820 <memset>
 8001f50:	4620      	mov	r0, r4
 8001f52:	bd70      	pop	{r4, r5, r6, pc}

08001f54 <__sfp_lock_acquire>:
 8001f54:	4801      	ldr	r0, [pc, #4]	; (8001f5c <__sfp_lock_acquire+0x8>)
 8001f56:	f000 b8b3 	b.w	80020c0 <__retarget_lock_acquire_recursive>
 8001f5a:	bf00      	nop
 8001f5c:	200000ed 	.word	0x200000ed

08001f60 <__sfp_lock_release>:
 8001f60:	4801      	ldr	r0, [pc, #4]	; (8001f68 <__sfp_lock_release+0x8>)
 8001f62:	f000 b8ae 	b.w	80020c2 <__retarget_lock_release_recursive>
 8001f66:	bf00      	nop
 8001f68:	200000ed 	.word	0x200000ed

08001f6c <__sinit_lock_acquire>:
 8001f6c:	4801      	ldr	r0, [pc, #4]	; (8001f74 <__sinit_lock_acquire+0x8>)
 8001f6e:	f000 b8a7 	b.w	80020c0 <__retarget_lock_acquire_recursive>
 8001f72:	bf00      	nop
 8001f74:	200000ee 	.word	0x200000ee

08001f78 <__sinit_lock_release>:
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <__sinit_lock_release+0x8>)
 8001f7a:	f000 b8a2 	b.w	80020c2 <__retarget_lock_release_recursive>
 8001f7e:	bf00      	nop
 8001f80:	200000ee 	.word	0x200000ee

08001f84 <__sinit>:
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	f7ff fff0 	bl	8001f6c <__sinit_lock_acquire>
 8001f8c:	69a3      	ldr	r3, [r4, #24]
 8001f8e:	b11b      	cbz	r3, 8001f98 <__sinit+0x14>
 8001f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f94:	f7ff bff0 	b.w	8001f78 <__sinit_lock_release>
 8001f98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <__sinit+0x68>)
 8001fa0:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <__sinit+0x6c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001fa6:	42a3      	cmp	r3, r4
 8001fa8:	bf04      	itt	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	61a3      	streq	r3, [r4, #24]
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f000 f820 	bl	8001ff4 <__sfp>
 8001fb4:	6060      	str	r0, [r4, #4]
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f000 f81c 	bl	8001ff4 <__sfp>
 8001fbc:	60a0      	str	r0, [r4, #8]
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 f818 	bl	8001ff4 <__sfp>
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60e0      	str	r0, [r4, #12]
 8001fc8:	2104      	movs	r1, #4
 8001fca:	6860      	ldr	r0, [r4, #4]
 8001fcc:	f7ff ff82 	bl	8001ed4 <std>
 8001fd0:	68a0      	ldr	r0, [r4, #8]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2109      	movs	r1, #9
 8001fd6:	f7ff ff7d 	bl	8001ed4 <std>
 8001fda:	68e0      	ldr	r0, [r4, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	2112      	movs	r1, #18
 8001fe0:	f7ff ff78 	bl	8001ed4 <std>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61a3      	str	r3, [r4, #24]
 8001fe8:	e7d2      	b.n	8001f90 <__sinit+0xc>
 8001fea:	bf00      	nop
 8001fec:	08002924 	.word	0x08002924
 8001ff0:	08001f1d 	.word	0x08001f1d

08001ff4 <__sfp>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	4607      	mov	r7, r0
 8001ff8:	f7ff ffac 	bl	8001f54 <__sfp_lock_acquire>
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <__sfp+0x84>)
 8001ffe:	681e      	ldr	r6, [r3, #0]
 8002000:	69b3      	ldr	r3, [r6, #24]
 8002002:	b913      	cbnz	r3, 800200a <__sfp+0x16>
 8002004:	4630      	mov	r0, r6
 8002006:	f7ff ffbd 	bl	8001f84 <__sinit>
 800200a:	3648      	adds	r6, #72	; 0x48
 800200c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002010:	3b01      	subs	r3, #1
 8002012:	d503      	bpl.n	800201c <__sfp+0x28>
 8002014:	6833      	ldr	r3, [r6, #0]
 8002016:	b30b      	cbz	r3, 800205c <__sfp+0x68>
 8002018:	6836      	ldr	r6, [r6, #0]
 800201a:	e7f7      	b.n	800200c <__sfp+0x18>
 800201c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002020:	b9d5      	cbnz	r5, 8002058 <__sfp+0x64>
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <__sfp+0x88>)
 8002024:	60e3      	str	r3, [r4, #12]
 8002026:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800202a:	6665      	str	r5, [r4, #100]	; 0x64
 800202c:	f000 f847 	bl	80020be <__retarget_lock_init_recursive>
 8002030:	f7ff ff96 	bl	8001f60 <__sfp_lock_release>
 8002034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800203c:	6025      	str	r5, [r4, #0]
 800203e:	61a5      	str	r5, [r4, #24]
 8002040:	2208      	movs	r2, #8
 8002042:	4629      	mov	r1, r5
 8002044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002048:	f7ff fbea 	bl	8001820 <memset>
 800204c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002054:	4620      	mov	r0, r4
 8002056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002058:	3468      	adds	r4, #104	; 0x68
 800205a:	e7d9      	b.n	8002010 <__sfp+0x1c>
 800205c:	2104      	movs	r1, #4
 800205e:	4638      	mov	r0, r7
 8002060:	f7ff ff62 	bl	8001f28 <__sfmoreglue>
 8002064:	4604      	mov	r4, r0
 8002066:	6030      	str	r0, [r6, #0]
 8002068:	2800      	cmp	r0, #0
 800206a:	d1d5      	bne.n	8002018 <__sfp+0x24>
 800206c:	f7ff ff78 	bl	8001f60 <__sfp_lock_release>
 8002070:	230c      	movs	r3, #12
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	e7ee      	b.n	8002054 <__sfp+0x60>
 8002076:	bf00      	nop
 8002078:	08002924 	.word	0x08002924
 800207c:	ffff0001 	.word	0xffff0001

08002080 <_fwalk_reent>:
 8002080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002084:	4606      	mov	r6, r0
 8002086:	4688      	mov	r8, r1
 8002088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800208c:	2700      	movs	r7, #0
 800208e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002092:	f1b9 0901 	subs.w	r9, r9, #1
 8002096:	d505      	bpl.n	80020a4 <_fwalk_reent+0x24>
 8002098:	6824      	ldr	r4, [r4, #0]
 800209a:	2c00      	cmp	r4, #0
 800209c:	d1f7      	bne.n	800208e <_fwalk_reent+0xe>
 800209e:	4638      	mov	r0, r7
 80020a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020a4:	89ab      	ldrh	r3, [r5, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d907      	bls.n	80020ba <_fwalk_reent+0x3a>
 80020aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020ae:	3301      	adds	r3, #1
 80020b0:	d003      	beq.n	80020ba <_fwalk_reent+0x3a>
 80020b2:	4629      	mov	r1, r5
 80020b4:	4630      	mov	r0, r6
 80020b6:	47c0      	blx	r8
 80020b8:	4307      	orrs	r7, r0
 80020ba:	3568      	adds	r5, #104	; 0x68
 80020bc:	e7e9      	b.n	8002092 <_fwalk_reent+0x12>

080020be <__retarget_lock_init_recursive>:
 80020be:	4770      	bx	lr

080020c0 <__retarget_lock_acquire_recursive>:
 80020c0:	4770      	bx	lr

080020c2 <__retarget_lock_release_recursive>:
 80020c2:	4770      	bx	lr

080020c4 <__swhatbuf_r>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	460e      	mov	r6, r1
 80020c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020cc:	2900      	cmp	r1, #0
 80020ce:	b096      	sub	sp, #88	; 0x58
 80020d0:	4614      	mov	r4, r2
 80020d2:	461d      	mov	r5, r3
 80020d4:	da08      	bge.n	80020e8 <__swhatbuf_r+0x24>
 80020d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	602a      	str	r2, [r5, #0]
 80020de:	061a      	lsls	r2, r3, #24
 80020e0:	d410      	bmi.n	8002104 <__swhatbuf_r+0x40>
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	e00e      	b.n	8002106 <__swhatbuf_r+0x42>
 80020e8:	466a      	mov	r2, sp
 80020ea:	f000 fbaf 	bl	800284c <_fstat_r>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	dbf1      	blt.n	80020d6 <__swhatbuf_r+0x12>
 80020f2:	9a01      	ldr	r2, [sp, #4]
 80020f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020fc:	425a      	negs	r2, r3
 80020fe:	415a      	adcs	r2, r3
 8002100:	602a      	str	r2, [r5, #0]
 8002102:	e7ee      	b.n	80020e2 <__swhatbuf_r+0x1e>
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	2000      	movs	r0, #0
 8002108:	6023      	str	r3, [r4, #0]
 800210a:	b016      	add	sp, #88	; 0x58
 800210c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002110 <__smakebuf_r>:
 8002110:	898b      	ldrh	r3, [r1, #12]
 8002112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002114:	079d      	lsls	r5, r3, #30
 8002116:	4606      	mov	r6, r0
 8002118:	460c      	mov	r4, r1
 800211a:	d507      	bpl.n	800212c <__smakebuf_r+0x1c>
 800211c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	6123      	str	r3, [r4, #16]
 8002124:	2301      	movs	r3, #1
 8002126:	6163      	str	r3, [r4, #20]
 8002128:	b002      	add	sp, #8
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	ab01      	add	r3, sp, #4
 800212e:	466a      	mov	r2, sp
 8002130:	f7ff ffc8 	bl	80020c4 <__swhatbuf_r>
 8002134:	9900      	ldr	r1, [sp, #0]
 8002136:	4605      	mov	r5, r0
 8002138:	4630      	mov	r0, r6
 800213a:	f7ff fbe3 	bl	8001904 <_malloc_r>
 800213e:	b948      	cbnz	r0, 8002154 <__smakebuf_r+0x44>
 8002140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d4ef      	bmi.n	8002128 <__smakebuf_r+0x18>
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	e7e3      	b.n	800211c <__smakebuf_r+0xc>
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <__smakebuf_r+0x7c>)
 8002156:	62b3      	str	r3, [r6, #40]	; 0x28
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	81a3      	strh	r3, [r4, #12]
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	6163      	str	r3, [r4, #20]
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	6120      	str	r0, [r4, #16]
 800216a:	b15b      	cbz	r3, 8002184 <__smakebuf_r+0x74>
 800216c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002170:	4630      	mov	r0, r6
 8002172:	f000 fb7d 	bl	8002870 <_isatty_r>
 8002176:	b128      	cbz	r0, 8002184 <__smakebuf_r+0x74>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	81a3      	strh	r3, [r4, #12]
 8002184:	89a0      	ldrh	r0, [r4, #12]
 8002186:	4305      	orrs	r5, r0
 8002188:	81a5      	strh	r5, [r4, #12]
 800218a:	e7cd      	b.n	8002128 <__smakebuf_r+0x18>
 800218c:	08001f1d 	.word	0x08001f1d

08002190 <__malloc_lock>:
 8002190:	4801      	ldr	r0, [pc, #4]	; (8002198 <__malloc_lock+0x8>)
 8002192:	f7ff bf95 	b.w	80020c0 <__retarget_lock_acquire_recursive>
 8002196:	bf00      	nop
 8002198:	200000ec 	.word	0x200000ec

0800219c <__malloc_unlock>:
 800219c:	4801      	ldr	r0, [pc, #4]	; (80021a4 <__malloc_unlock+0x8>)
 800219e:	f7ff bf90 	b.w	80020c2 <__retarget_lock_release_recursive>
 80021a2:	bf00      	nop
 80021a4:	200000ec 	.word	0x200000ec

080021a8 <__sfputc_r>:
 80021a8:	6893      	ldr	r3, [r2, #8]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	b410      	push	{r4}
 80021b0:	6093      	str	r3, [r2, #8]
 80021b2:	da07      	bge.n	80021c4 <__sfputc_r+0x1c>
 80021b4:	6994      	ldr	r4, [r2, #24]
 80021b6:	42a3      	cmp	r3, r4
 80021b8:	db01      	blt.n	80021be <__sfputc_r+0x16>
 80021ba:	290a      	cmp	r1, #10
 80021bc:	d102      	bne.n	80021c4 <__sfputc_r+0x1c>
 80021be:	bc10      	pop	{r4}
 80021c0:	f7ff bd0a 	b.w	8001bd8 <__swbuf_r>
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	1c58      	adds	r0, r3, #1
 80021c8:	6010      	str	r0, [r2, #0]
 80021ca:	7019      	strb	r1, [r3, #0]
 80021cc:	4608      	mov	r0, r1
 80021ce:	bc10      	pop	{r4}
 80021d0:	4770      	bx	lr

080021d2 <__sfputs_r>:
 80021d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d4:	4606      	mov	r6, r0
 80021d6:	460f      	mov	r7, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	18d5      	adds	r5, r2, r3
 80021dc:	42ac      	cmp	r4, r5
 80021de:	d101      	bne.n	80021e4 <__sfputs_r+0x12>
 80021e0:	2000      	movs	r0, #0
 80021e2:	e007      	b.n	80021f4 <__sfputs_r+0x22>
 80021e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e8:	463a      	mov	r2, r7
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7ff ffdc 	bl	80021a8 <__sfputc_r>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d1f3      	bne.n	80021dc <__sfputs_r+0xa>
 80021f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021f8 <_vfiprintf_r>:
 80021f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021fc:	460d      	mov	r5, r1
 80021fe:	b09d      	sub	sp, #116	; 0x74
 8002200:	4614      	mov	r4, r2
 8002202:	4698      	mov	r8, r3
 8002204:	4606      	mov	r6, r0
 8002206:	b118      	cbz	r0, 8002210 <_vfiprintf_r+0x18>
 8002208:	6983      	ldr	r3, [r0, #24]
 800220a:	b90b      	cbnz	r3, 8002210 <_vfiprintf_r+0x18>
 800220c:	f7ff feba 	bl	8001f84 <__sinit>
 8002210:	4b89      	ldr	r3, [pc, #548]	; (8002438 <_vfiprintf_r+0x240>)
 8002212:	429d      	cmp	r5, r3
 8002214:	d11b      	bne.n	800224e <_vfiprintf_r+0x56>
 8002216:	6875      	ldr	r5, [r6, #4]
 8002218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800221a:	07d9      	lsls	r1, r3, #31
 800221c:	d405      	bmi.n	800222a <_vfiprintf_r+0x32>
 800221e:	89ab      	ldrh	r3, [r5, #12]
 8002220:	059a      	lsls	r2, r3, #22
 8002222:	d402      	bmi.n	800222a <_vfiprintf_r+0x32>
 8002224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002226:	f7ff ff4b 	bl	80020c0 <__retarget_lock_acquire_recursive>
 800222a:	89ab      	ldrh	r3, [r5, #12]
 800222c:	071b      	lsls	r3, r3, #28
 800222e:	d501      	bpl.n	8002234 <_vfiprintf_r+0x3c>
 8002230:	692b      	ldr	r3, [r5, #16]
 8002232:	b9eb      	cbnz	r3, 8002270 <_vfiprintf_r+0x78>
 8002234:	4629      	mov	r1, r5
 8002236:	4630      	mov	r0, r6
 8002238:	f7ff fd20 	bl	8001c7c <__swsetup_r>
 800223c:	b1c0      	cbz	r0, 8002270 <_vfiprintf_r+0x78>
 800223e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002240:	07dc      	lsls	r4, r3, #31
 8002242:	d50e      	bpl.n	8002262 <_vfiprintf_r+0x6a>
 8002244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002248:	b01d      	add	sp, #116	; 0x74
 800224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800224e:	4b7b      	ldr	r3, [pc, #492]	; (800243c <_vfiprintf_r+0x244>)
 8002250:	429d      	cmp	r5, r3
 8002252:	d101      	bne.n	8002258 <_vfiprintf_r+0x60>
 8002254:	68b5      	ldr	r5, [r6, #8]
 8002256:	e7df      	b.n	8002218 <_vfiprintf_r+0x20>
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <_vfiprintf_r+0x248>)
 800225a:	429d      	cmp	r5, r3
 800225c:	bf08      	it	eq
 800225e:	68f5      	ldreq	r5, [r6, #12]
 8002260:	e7da      	b.n	8002218 <_vfiprintf_r+0x20>
 8002262:	89ab      	ldrh	r3, [r5, #12]
 8002264:	0598      	lsls	r0, r3, #22
 8002266:	d4ed      	bmi.n	8002244 <_vfiprintf_r+0x4c>
 8002268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800226a:	f7ff ff2a 	bl	80020c2 <__retarget_lock_release_recursive>
 800226e:	e7e9      	b.n	8002244 <_vfiprintf_r+0x4c>
 8002270:	2300      	movs	r3, #0
 8002272:	9309      	str	r3, [sp, #36]	; 0x24
 8002274:	2320      	movs	r3, #32
 8002276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800227a:	f8cd 800c 	str.w	r8, [sp, #12]
 800227e:	2330      	movs	r3, #48	; 0x30
 8002280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002444 <_vfiprintf_r+0x24c>
 8002284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002288:	f04f 0901 	mov.w	r9, #1
 800228c:	4623      	mov	r3, r4
 800228e:	469a      	mov	sl, r3
 8002290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002294:	b10a      	cbz	r2, 800229a <_vfiprintf_r+0xa2>
 8002296:	2a25      	cmp	r2, #37	; 0x25
 8002298:	d1f9      	bne.n	800228e <_vfiprintf_r+0x96>
 800229a:	ebba 0b04 	subs.w	fp, sl, r4
 800229e:	d00b      	beq.n	80022b8 <_vfiprintf_r+0xc0>
 80022a0:	465b      	mov	r3, fp
 80022a2:	4622      	mov	r2, r4
 80022a4:	4629      	mov	r1, r5
 80022a6:	4630      	mov	r0, r6
 80022a8:	f7ff ff93 	bl	80021d2 <__sfputs_r>
 80022ac:	3001      	adds	r0, #1
 80022ae:	f000 80aa 	beq.w	8002406 <_vfiprintf_r+0x20e>
 80022b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b4:	445a      	add	r2, fp
 80022b6:	9209      	str	r2, [sp, #36]	; 0x24
 80022b8:	f89a 3000 	ldrb.w	r3, [sl]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a2 	beq.w	8002406 <_vfiprintf_r+0x20e>
 80022c2:	2300      	movs	r3, #0
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022cc:	f10a 0a01 	add.w	sl, sl, #1
 80022d0:	9304      	str	r3, [sp, #16]
 80022d2:	9307      	str	r3, [sp, #28]
 80022d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022d8:	931a      	str	r3, [sp, #104]	; 0x68
 80022da:	4654      	mov	r4, sl
 80022dc:	2205      	movs	r2, #5
 80022de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e2:	4858      	ldr	r0, [pc, #352]	; (8002444 <_vfiprintf_r+0x24c>)
 80022e4:	f7fd ff84 	bl	80001f0 <memchr>
 80022e8:	9a04      	ldr	r2, [sp, #16]
 80022ea:	b9d8      	cbnz	r0, 8002324 <_vfiprintf_r+0x12c>
 80022ec:	06d1      	lsls	r1, r2, #27
 80022ee:	bf44      	itt	mi
 80022f0:	2320      	movmi	r3, #32
 80022f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022f6:	0713      	lsls	r3, r2, #28
 80022f8:	bf44      	itt	mi
 80022fa:	232b      	movmi	r3, #43	; 0x2b
 80022fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002300:	f89a 3000 	ldrb.w	r3, [sl]
 8002304:	2b2a      	cmp	r3, #42	; 0x2a
 8002306:	d015      	beq.n	8002334 <_vfiprintf_r+0x13c>
 8002308:	9a07      	ldr	r2, [sp, #28]
 800230a:	4654      	mov	r4, sl
 800230c:	2000      	movs	r0, #0
 800230e:	f04f 0c0a 	mov.w	ip, #10
 8002312:	4621      	mov	r1, r4
 8002314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	2b09      	cmp	r3, #9
 800231c:	d94e      	bls.n	80023bc <_vfiprintf_r+0x1c4>
 800231e:	b1b0      	cbz	r0, 800234e <_vfiprintf_r+0x156>
 8002320:	9207      	str	r2, [sp, #28]
 8002322:	e014      	b.n	800234e <_vfiprintf_r+0x156>
 8002324:	eba0 0308 	sub.w	r3, r0, r8
 8002328:	fa09 f303 	lsl.w	r3, r9, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	9304      	str	r3, [sp, #16]
 8002330:	46a2      	mov	sl, r4
 8002332:	e7d2      	b.n	80022da <_vfiprintf_r+0xe2>
 8002334:	9b03      	ldr	r3, [sp, #12]
 8002336:	1d19      	adds	r1, r3, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	9103      	str	r1, [sp, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	bfbb      	ittet	lt
 8002340:	425b      	neglt	r3, r3
 8002342:	f042 0202 	orrlt.w	r2, r2, #2
 8002346:	9307      	strge	r3, [sp, #28]
 8002348:	9307      	strlt	r3, [sp, #28]
 800234a:	bfb8      	it	lt
 800234c:	9204      	strlt	r2, [sp, #16]
 800234e:	7823      	ldrb	r3, [r4, #0]
 8002350:	2b2e      	cmp	r3, #46	; 0x2e
 8002352:	d10c      	bne.n	800236e <_vfiprintf_r+0x176>
 8002354:	7863      	ldrb	r3, [r4, #1]
 8002356:	2b2a      	cmp	r3, #42	; 0x2a
 8002358:	d135      	bne.n	80023c6 <_vfiprintf_r+0x1ce>
 800235a:	9b03      	ldr	r3, [sp, #12]
 800235c:	1d1a      	adds	r2, r3, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	9203      	str	r2, [sp, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	bfb8      	it	lt
 8002366:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800236a:	3402      	adds	r4, #2
 800236c:	9305      	str	r3, [sp, #20]
 800236e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002448 <_vfiprintf_r+0x250>
 8002372:	7821      	ldrb	r1, [r4, #0]
 8002374:	2203      	movs	r2, #3
 8002376:	4650      	mov	r0, sl
 8002378:	f7fd ff3a 	bl	80001f0 <memchr>
 800237c:	b140      	cbz	r0, 8002390 <_vfiprintf_r+0x198>
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	eba0 000a 	sub.w	r0, r0, sl
 8002384:	fa03 f000 	lsl.w	r0, r3, r0
 8002388:	9b04      	ldr	r3, [sp, #16]
 800238a:	4303      	orrs	r3, r0
 800238c:	3401      	adds	r4, #1
 800238e:	9304      	str	r3, [sp, #16]
 8002390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002394:	482d      	ldr	r0, [pc, #180]	; (800244c <_vfiprintf_r+0x254>)
 8002396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800239a:	2206      	movs	r2, #6
 800239c:	f7fd ff28 	bl	80001f0 <memchr>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d03f      	beq.n	8002424 <_vfiprintf_r+0x22c>
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <_vfiprintf_r+0x258>)
 80023a6:	bb1b      	cbnz	r3, 80023f0 <_vfiprintf_r+0x1f8>
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	3307      	adds	r3, #7
 80023ac:	f023 0307 	bic.w	r3, r3, #7
 80023b0:	3308      	adds	r3, #8
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b6:	443b      	add	r3, r7
 80023b8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ba:	e767      	b.n	800228c <_vfiprintf_r+0x94>
 80023bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80023c0:	460c      	mov	r4, r1
 80023c2:	2001      	movs	r0, #1
 80023c4:	e7a5      	b.n	8002312 <_vfiprintf_r+0x11a>
 80023c6:	2300      	movs	r3, #0
 80023c8:	3401      	adds	r4, #1
 80023ca:	9305      	str	r3, [sp, #20]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 0c0a 	mov.w	ip, #10
 80023d2:	4620      	mov	r0, r4
 80023d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023d8:	3a30      	subs	r2, #48	; 0x30
 80023da:	2a09      	cmp	r2, #9
 80023dc:	d903      	bls.n	80023e6 <_vfiprintf_r+0x1ee>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0c5      	beq.n	800236e <_vfiprintf_r+0x176>
 80023e2:	9105      	str	r1, [sp, #20]
 80023e4:	e7c3      	b.n	800236e <_vfiprintf_r+0x176>
 80023e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80023ea:	4604      	mov	r4, r0
 80023ec:	2301      	movs	r3, #1
 80023ee:	e7f0      	b.n	80023d2 <_vfiprintf_r+0x1da>
 80023f0:	ab03      	add	r3, sp, #12
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	462a      	mov	r2, r5
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <_vfiprintf_r+0x25c>)
 80023f8:	a904      	add	r1, sp, #16
 80023fa:	4630      	mov	r0, r6
 80023fc:	f3af 8000 	nop.w
 8002400:	4607      	mov	r7, r0
 8002402:	1c78      	adds	r0, r7, #1
 8002404:	d1d6      	bne.n	80023b4 <_vfiprintf_r+0x1bc>
 8002406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002408:	07d9      	lsls	r1, r3, #31
 800240a:	d405      	bmi.n	8002418 <_vfiprintf_r+0x220>
 800240c:	89ab      	ldrh	r3, [r5, #12]
 800240e:	059a      	lsls	r2, r3, #22
 8002410:	d402      	bmi.n	8002418 <_vfiprintf_r+0x220>
 8002412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002414:	f7ff fe55 	bl	80020c2 <__retarget_lock_release_recursive>
 8002418:	89ab      	ldrh	r3, [r5, #12]
 800241a:	065b      	lsls	r3, r3, #25
 800241c:	f53f af12 	bmi.w	8002244 <_vfiprintf_r+0x4c>
 8002420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002422:	e711      	b.n	8002248 <_vfiprintf_r+0x50>
 8002424:	ab03      	add	r3, sp, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	462a      	mov	r2, r5
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <_vfiprintf_r+0x25c>)
 800242c:	a904      	add	r1, sp, #16
 800242e:	4630      	mov	r0, r6
 8002430:	f000 f880 	bl	8002534 <_printf_i>
 8002434:	e7e4      	b.n	8002400 <_vfiprintf_r+0x208>
 8002436:	bf00      	nop
 8002438:	08002948 	.word	0x08002948
 800243c:	08002968 	.word	0x08002968
 8002440:	08002928 	.word	0x08002928
 8002444:	08002988 	.word	0x08002988
 8002448:	0800298e 	.word	0x0800298e
 800244c:	08002992 	.word	0x08002992
 8002450:	00000000 	.word	0x00000000
 8002454:	080021d3 	.word	0x080021d3

08002458 <_printf_common>:
 8002458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800245c:	4616      	mov	r6, r2
 800245e:	4699      	mov	r9, r3
 8002460:	688a      	ldr	r2, [r1, #8]
 8002462:	690b      	ldr	r3, [r1, #16]
 8002464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002468:	4293      	cmp	r3, r2
 800246a:	bfb8      	it	lt
 800246c:	4613      	movlt	r3, r2
 800246e:	6033      	str	r3, [r6, #0]
 8002470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002474:	4607      	mov	r7, r0
 8002476:	460c      	mov	r4, r1
 8002478:	b10a      	cbz	r2, 800247e <_printf_common+0x26>
 800247a:	3301      	adds	r3, #1
 800247c:	6033      	str	r3, [r6, #0]
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	0699      	lsls	r1, r3, #26
 8002482:	bf42      	ittt	mi
 8002484:	6833      	ldrmi	r3, [r6, #0]
 8002486:	3302      	addmi	r3, #2
 8002488:	6033      	strmi	r3, [r6, #0]
 800248a:	6825      	ldr	r5, [r4, #0]
 800248c:	f015 0506 	ands.w	r5, r5, #6
 8002490:	d106      	bne.n	80024a0 <_printf_common+0x48>
 8002492:	f104 0a19 	add.w	sl, r4, #25
 8002496:	68e3      	ldr	r3, [r4, #12]
 8002498:	6832      	ldr	r2, [r6, #0]
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	42ab      	cmp	r3, r5
 800249e:	dc26      	bgt.n	80024ee <_printf_common+0x96>
 80024a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024a4:	1e13      	subs	r3, r2, #0
 80024a6:	6822      	ldr	r2, [r4, #0]
 80024a8:	bf18      	it	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	0692      	lsls	r2, r2, #26
 80024ae:	d42b      	bmi.n	8002508 <_printf_common+0xb0>
 80024b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024b4:	4649      	mov	r1, r9
 80024b6:	4638      	mov	r0, r7
 80024b8:	47c0      	blx	r8
 80024ba:	3001      	adds	r0, #1
 80024bc:	d01e      	beq.n	80024fc <_printf_common+0xa4>
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	68e5      	ldr	r5, [r4, #12]
 80024c2:	6832      	ldr	r2, [r6, #0]
 80024c4:	f003 0306 	and.w	r3, r3, #6
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	bf08      	it	eq
 80024cc:	1aad      	subeq	r5, r5, r2
 80024ce:	68a3      	ldr	r3, [r4, #8]
 80024d0:	6922      	ldr	r2, [r4, #16]
 80024d2:	bf0c      	ite	eq
 80024d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024d8:	2500      	movne	r5, #0
 80024da:	4293      	cmp	r3, r2
 80024dc:	bfc4      	itt	gt
 80024de:	1a9b      	subgt	r3, r3, r2
 80024e0:	18ed      	addgt	r5, r5, r3
 80024e2:	2600      	movs	r6, #0
 80024e4:	341a      	adds	r4, #26
 80024e6:	42b5      	cmp	r5, r6
 80024e8:	d11a      	bne.n	8002520 <_printf_common+0xc8>
 80024ea:	2000      	movs	r0, #0
 80024ec:	e008      	b.n	8002500 <_printf_common+0xa8>
 80024ee:	2301      	movs	r3, #1
 80024f0:	4652      	mov	r2, sl
 80024f2:	4649      	mov	r1, r9
 80024f4:	4638      	mov	r0, r7
 80024f6:	47c0      	blx	r8
 80024f8:	3001      	adds	r0, #1
 80024fa:	d103      	bne.n	8002504 <_printf_common+0xac>
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002504:	3501      	adds	r5, #1
 8002506:	e7c6      	b.n	8002496 <_printf_common+0x3e>
 8002508:	18e1      	adds	r1, r4, r3
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	2030      	movs	r0, #48	; 0x30
 800250e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002512:	4422      	add	r2, r4
 8002514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800251c:	3302      	adds	r3, #2
 800251e:	e7c7      	b.n	80024b0 <_printf_common+0x58>
 8002520:	2301      	movs	r3, #1
 8002522:	4622      	mov	r2, r4
 8002524:	4649      	mov	r1, r9
 8002526:	4638      	mov	r0, r7
 8002528:	47c0      	blx	r8
 800252a:	3001      	adds	r0, #1
 800252c:	d0e6      	beq.n	80024fc <_printf_common+0xa4>
 800252e:	3601      	adds	r6, #1
 8002530:	e7d9      	b.n	80024e6 <_printf_common+0x8e>
	...

08002534 <_printf_i>:
 8002534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002538:	7e0f      	ldrb	r7, [r1, #24]
 800253a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800253c:	2f78      	cmp	r7, #120	; 0x78
 800253e:	4691      	mov	r9, r2
 8002540:	4680      	mov	r8, r0
 8002542:	460c      	mov	r4, r1
 8002544:	469a      	mov	sl, r3
 8002546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800254a:	d807      	bhi.n	800255c <_printf_i+0x28>
 800254c:	2f62      	cmp	r7, #98	; 0x62
 800254e:	d80a      	bhi.n	8002566 <_printf_i+0x32>
 8002550:	2f00      	cmp	r7, #0
 8002552:	f000 80d8 	beq.w	8002706 <_printf_i+0x1d2>
 8002556:	2f58      	cmp	r7, #88	; 0x58
 8002558:	f000 80a3 	beq.w	80026a2 <_printf_i+0x16e>
 800255c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002564:	e03a      	b.n	80025dc <_printf_i+0xa8>
 8002566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800256a:	2b15      	cmp	r3, #21
 800256c:	d8f6      	bhi.n	800255c <_printf_i+0x28>
 800256e:	a101      	add	r1, pc, #4	; (adr r1, 8002574 <_printf_i+0x40>)
 8002570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002574:	080025cd 	.word	0x080025cd
 8002578:	080025e1 	.word	0x080025e1
 800257c:	0800255d 	.word	0x0800255d
 8002580:	0800255d 	.word	0x0800255d
 8002584:	0800255d 	.word	0x0800255d
 8002588:	0800255d 	.word	0x0800255d
 800258c:	080025e1 	.word	0x080025e1
 8002590:	0800255d 	.word	0x0800255d
 8002594:	0800255d 	.word	0x0800255d
 8002598:	0800255d 	.word	0x0800255d
 800259c:	0800255d 	.word	0x0800255d
 80025a0:	080026ed 	.word	0x080026ed
 80025a4:	08002611 	.word	0x08002611
 80025a8:	080026cf 	.word	0x080026cf
 80025ac:	0800255d 	.word	0x0800255d
 80025b0:	0800255d 	.word	0x0800255d
 80025b4:	0800270f 	.word	0x0800270f
 80025b8:	0800255d 	.word	0x0800255d
 80025bc:	08002611 	.word	0x08002611
 80025c0:	0800255d 	.word	0x0800255d
 80025c4:	0800255d 	.word	0x0800255d
 80025c8:	080026d7 	.word	0x080026d7
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	602a      	str	r2, [r5, #0]
 80025d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025dc:	2301      	movs	r3, #1
 80025de:	e0a3      	b.n	8002728 <_printf_i+0x1f4>
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	6829      	ldr	r1, [r5, #0]
 80025e4:	0606      	lsls	r6, r0, #24
 80025e6:	f101 0304 	add.w	r3, r1, #4
 80025ea:	d50a      	bpl.n	8002602 <_printf_i+0xce>
 80025ec:	680e      	ldr	r6, [r1, #0]
 80025ee:	602b      	str	r3, [r5, #0]
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	da03      	bge.n	80025fc <_printf_i+0xc8>
 80025f4:	232d      	movs	r3, #45	; 0x2d
 80025f6:	4276      	negs	r6, r6
 80025f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025fc:	485e      	ldr	r0, [pc, #376]	; (8002778 <_printf_i+0x244>)
 80025fe:	230a      	movs	r3, #10
 8002600:	e019      	b.n	8002636 <_printf_i+0x102>
 8002602:	680e      	ldr	r6, [r1, #0]
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800260a:	bf18      	it	ne
 800260c:	b236      	sxthne	r6, r6
 800260e:	e7ef      	b.n	80025f0 <_printf_i+0xbc>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	6820      	ldr	r0, [r4, #0]
 8002614:	1d19      	adds	r1, r3, #4
 8002616:	6029      	str	r1, [r5, #0]
 8002618:	0601      	lsls	r1, r0, #24
 800261a:	d501      	bpl.n	8002620 <_printf_i+0xec>
 800261c:	681e      	ldr	r6, [r3, #0]
 800261e:	e002      	b.n	8002626 <_printf_i+0xf2>
 8002620:	0646      	lsls	r6, r0, #25
 8002622:	d5fb      	bpl.n	800261c <_printf_i+0xe8>
 8002624:	881e      	ldrh	r6, [r3, #0]
 8002626:	4854      	ldr	r0, [pc, #336]	; (8002778 <_printf_i+0x244>)
 8002628:	2f6f      	cmp	r7, #111	; 0x6f
 800262a:	bf0c      	ite	eq
 800262c:	2308      	moveq	r3, #8
 800262e:	230a      	movne	r3, #10
 8002630:	2100      	movs	r1, #0
 8002632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002636:	6865      	ldr	r5, [r4, #4]
 8002638:	60a5      	str	r5, [r4, #8]
 800263a:	2d00      	cmp	r5, #0
 800263c:	bfa2      	ittt	ge
 800263e:	6821      	ldrge	r1, [r4, #0]
 8002640:	f021 0104 	bicge.w	r1, r1, #4
 8002644:	6021      	strge	r1, [r4, #0]
 8002646:	b90e      	cbnz	r6, 800264c <_printf_i+0x118>
 8002648:	2d00      	cmp	r5, #0
 800264a:	d04d      	beq.n	80026e8 <_printf_i+0x1b4>
 800264c:	4615      	mov	r5, r2
 800264e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002652:	fb03 6711 	mls	r7, r3, r1, r6
 8002656:	5dc7      	ldrb	r7, [r0, r7]
 8002658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800265c:	4637      	mov	r7, r6
 800265e:	42bb      	cmp	r3, r7
 8002660:	460e      	mov	r6, r1
 8002662:	d9f4      	bls.n	800264e <_printf_i+0x11a>
 8002664:	2b08      	cmp	r3, #8
 8002666:	d10b      	bne.n	8002680 <_printf_i+0x14c>
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	07de      	lsls	r6, r3, #31
 800266c:	d508      	bpl.n	8002680 <_printf_i+0x14c>
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	6861      	ldr	r1, [r4, #4]
 8002672:	4299      	cmp	r1, r3
 8002674:	bfde      	ittt	le
 8002676:	2330      	movle	r3, #48	; 0x30
 8002678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800267c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002680:	1b52      	subs	r2, r2, r5
 8002682:	6122      	str	r2, [r4, #16]
 8002684:	f8cd a000 	str.w	sl, [sp]
 8002688:	464b      	mov	r3, r9
 800268a:	aa03      	add	r2, sp, #12
 800268c:	4621      	mov	r1, r4
 800268e:	4640      	mov	r0, r8
 8002690:	f7ff fee2 	bl	8002458 <_printf_common>
 8002694:	3001      	adds	r0, #1
 8002696:	d14c      	bne.n	8002732 <_printf_i+0x1fe>
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	b004      	add	sp, #16
 800269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a2:	4835      	ldr	r0, [pc, #212]	; (8002778 <_printf_i+0x244>)
 80026a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026a8:	6829      	ldr	r1, [r5, #0]
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80026b0:	6029      	str	r1, [r5, #0]
 80026b2:	061d      	lsls	r5, r3, #24
 80026b4:	d514      	bpl.n	80026e0 <_printf_i+0x1ac>
 80026b6:	07df      	lsls	r7, r3, #31
 80026b8:	bf44      	itt	mi
 80026ba:	f043 0320 	orrmi.w	r3, r3, #32
 80026be:	6023      	strmi	r3, [r4, #0]
 80026c0:	b91e      	cbnz	r6, 80026ca <_printf_i+0x196>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	f023 0320 	bic.w	r3, r3, #32
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	2310      	movs	r3, #16
 80026cc:	e7b0      	b.n	8002630 <_printf_i+0xfc>
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f043 0320 	orr.w	r3, r3, #32
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	2378      	movs	r3, #120	; 0x78
 80026d8:	4828      	ldr	r0, [pc, #160]	; (800277c <_printf_i+0x248>)
 80026da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026de:	e7e3      	b.n	80026a8 <_printf_i+0x174>
 80026e0:	0659      	lsls	r1, r3, #25
 80026e2:	bf48      	it	mi
 80026e4:	b2b6      	uxthmi	r6, r6
 80026e6:	e7e6      	b.n	80026b6 <_printf_i+0x182>
 80026e8:	4615      	mov	r5, r2
 80026ea:	e7bb      	b.n	8002664 <_printf_i+0x130>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	6826      	ldr	r6, [r4, #0]
 80026f0:	6961      	ldr	r1, [r4, #20]
 80026f2:	1d18      	adds	r0, r3, #4
 80026f4:	6028      	str	r0, [r5, #0]
 80026f6:	0635      	lsls	r5, r6, #24
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	d501      	bpl.n	8002700 <_printf_i+0x1cc>
 80026fc:	6019      	str	r1, [r3, #0]
 80026fe:	e002      	b.n	8002706 <_printf_i+0x1d2>
 8002700:	0670      	lsls	r0, r6, #25
 8002702:	d5fb      	bpl.n	80026fc <_printf_i+0x1c8>
 8002704:	8019      	strh	r1, [r3, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	6123      	str	r3, [r4, #16]
 800270a:	4615      	mov	r5, r2
 800270c:	e7ba      	b.n	8002684 <_printf_i+0x150>
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	1d1a      	adds	r2, r3, #4
 8002712:	602a      	str	r2, [r5, #0]
 8002714:	681d      	ldr	r5, [r3, #0]
 8002716:	6862      	ldr	r2, [r4, #4]
 8002718:	2100      	movs	r1, #0
 800271a:	4628      	mov	r0, r5
 800271c:	f7fd fd68 	bl	80001f0 <memchr>
 8002720:	b108      	cbz	r0, 8002726 <_printf_i+0x1f2>
 8002722:	1b40      	subs	r0, r0, r5
 8002724:	6060      	str	r0, [r4, #4]
 8002726:	6863      	ldr	r3, [r4, #4]
 8002728:	6123      	str	r3, [r4, #16]
 800272a:	2300      	movs	r3, #0
 800272c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002730:	e7a8      	b.n	8002684 <_printf_i+0x150>
 8002732:	6923      	ldr	r3, [r4, #16]
 8002734:	462a      	mov	r2, r5
 8002736:	4649      	mov	r1, r9
 8002738:	4640      	mov	r0, r8
 800273a:	47d0      	blx	sl
 800273c:	3001      	adds	r0, #1
 800273e:	d0ab      	beq.n	8002698 <_printf_i+0x164>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	079b      	lsls	r3, r3, #30
 8002744:	d413      	bmi.n	800276e <_printf_i+0x23a>
 8002746:	68e0      	ldr	r0, [r4, #12]
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	4298      	cmp	r0, r3
 800274c:	bfb8      	it	lt
 800274e:	4618      	movlt	r0, r3
 8002750:	e7a4      	b.n	800269c <_printf_i+0x168>
 8002752:	2301      	movs	r3, #1
 8002754:	4632      	mov	r2, r6
 8002756:	4649      	mov	r1, r9
 8002758:	4640      	mov	r0, r8
 800275a:	47d0      	blx	sl
 800275c:	3001      	adds	r0, #1
 800275e:	d09b      	beq.n	8002698 <_printf_i+0x164>
 8002760:	3501      	adds	r5, #1
 8002762:	68e3      	ldr	r3, [r4, #12]
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	42ab      	cmp	r3, r5
 800276a:	dcf2      	bgt.n	8002752 <_printf_i+0x21e>
 800276c:	e7eb      	b.n	8002746 <_printf_i+0x212>
 800276e:	2500      	movs	r5, #0
 8002770:	f104 0619 	add.w	r6, r4, #25
 8002774:	e7f5      	b.n	8002762 <_printf_i+0x22e>
 8002776:	bf00      	nop
 8002778:	08002999 	.word	0x08002999
 800277c:	080029aa 	.word	0x080029aa

08002780 <__sread>:
 8002780:	b510      	push	{r4, lr}
 8002782:	460c      	mov	r4, r1
 8002784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002788:	f000 f894 	bl	80028b4 <_read_r>
 800278c:	2800      	cmp	r0, #0
 800278e:	bfab      	itete	ge
 8002790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002792:	89a3      	ldrhlt	r3, [r4, #12]
 8002794:	181b      	addge	r3, r3, r0
 8002796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800279a:	bfac      	ite	ge
 800279c:	6563      	strge	r3, [r4, #84]	; 0x54
 800279e:	81a3      	strhlt	r3, [r4, #12]
 80027a0:	bd10      	pop	{r4, pc}

080027a2 <__swrite>:
 80027a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a6:	461f      	mov	r7, r3
 80027a8:	898b      	ldrh	r3, [r1, #12]
 80027aa:	05db      	lsls	r3, r3, #23
 80027ac:	4605      	mov	r5, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4616      	mov	r6, r2
 80027b2:	d505      	bpl.n	80027c0 <__swrite+0x1e>
 80027b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b8:	2302      	movs	r3, #2
 80027ba:	2200      	movs	r2, #0
 80027bc:	f000 f868 	bl	8002890 <_lseek_r>
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	4632      	mov	r2, r6
 80027ce:	463b      	mov	r3, r7
 80027d0:	4628      	mov	r0, r5
 80027d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027d6:	f000 b817 	b.w	8002808 <_write_r>

080027da <__sseek>:
 80027da:	b510      	push	{r4, lr}
 80027dc:	460c      	mov	r4, r1
 80027de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e2:	f000 f855 	bl	8002890 <_lseek_r>
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	bf15      	itete	ne
 80027ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80027ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027f6:	81a3      	strheq	r3, [r4, #12]
 80027f8:	bf18      	it	ne
 80027fa:	81a3      	strhne	r3, [r4, #12]
 80027fc:	bd10      	pop	{r4, pc}

080027fe <__sclose>:
 80027fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002802:	f000 b813 	b.w	800282c <_close_r>
	...

08002808 <_write_r>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	4d07      	ldr	r5, [pc, #28]	; (8002828 <_write_r+0x20>)
 800280c:	4604      	mov	r4, r0
 800280e:	4608      	mov	r0, r1
 8002810:	4611      	mov	r1, r2
 8002812:	2200      	movs	r2, #0
 8002814:	602a      	str	r2, [r5, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	f7fe fe43 	bl	80014a2 <_write>
 800281c:	1c43      	adds	r3, r0, #1
 800281e:	d102      	bne.n	8002826 <_write_r+0x1e>
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	b103      	cbz	r3, 8002826 <_write_r+0x1e>
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	bd38      	pop	{r3, r4, r5, pc}
 8002828:	200000f0 	.word	0x200000f0

0800282c <_close_r>:
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	4d06      	ldr	r5, [pc, #24]	; (8002848 <_close_r+0x1c>)
 8002830:	2300      	movs	r3, #0
 8002832:	4604      	mov	r4, r0
 8002834:	4608      	mov	r0, r1
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	f7fe fe4f 	bl	80014da <_close>
 800283c:	1c43      	adds	r3, r0, #1
 800283e:	d102      	bne.n	8002846 <_close_r+0x1a>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	b103      	cbz	r3, 8002846 <_close_r+0x1a>
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	bd38      	pop	{r3, r4, r5, pc}
 8002848:	200000f0 	.word	0x200000f0

0800284c <_fstat_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4d07      	ldr	r5, [pc, #28]	; (800286c <_fstat_r+0x20>)
 8002850:	2300      	movs	r3, #0
 8002852:	4604      	mov	r4, r0
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	602b      	str	r3, [r5, #0]
 800285a:	f7fe fe49 	bl	80014f0 <_fstat>
 800285e:	1c43      	adds	r3, r0, #1
 8002860:	d102      	bne.n	8002868 <_fstat_r+0x1c>
 8002862:	682b      	ldr	r3, [r5, #0]
 8002864:	b103      	cbz	r3, 8002868 <_fstat_r+0x1c>
 8002866:	6023      	str	r3, [r4, #0]
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	200000f0 	.word	0x200000f0

08002870 <_isatty_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4d06      	ldr	r5, [pc, #24]	; (800288c <_isatty_r+0x1c>)
 8002874:	2300      	movs	r3, #0
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	f7fe fe47 	bl	800150e <_isatty>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_isatty_r+0x1a>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_isatty_r+0x1a>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	200000f0 	.word	0x200000f0

08002890 <_lseek_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4d07      	ldr	r5, [pc, #28]	; (80028b0 <_lseek_r+0x20>)
 8002894:	4604      	mov	r4, r0
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	2200      	movs	r2, #0
 800289c:	602a      	str	r2, [r5, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7fe fe3f 	bl	8001522 <_lseek>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_lseek_r+0x1e>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_lseek_r+0x1e>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	200000f0 	.word	0x200000f0

080028b4 <_read_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d07      	ldr	r5, [pc, #28]	; (80028d4 <_read_r+0x20>)
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	602a      	str	r2, [r5, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f7fe fdd0 	bl	8001468 <_read>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_read_r+0x1e>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_read_r+0x1e>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	200000f0 	.word	0x200000f0

080028d8 <_init>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	bf00      	nop
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr

080028e4 <_fini>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr
