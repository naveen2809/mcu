
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002360  08002360  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002360  08002360  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002360  08002360  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000006c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002c03  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bef  00000000  00000000  00022c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e8  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000350  00000000  00000000  00023c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024f4  00000000  00000000  00023fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b68  00000000  00000000  000264b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e0d8  00000000  00000000  0002b01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000390f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000169c  00000000  00000000  00039144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002254 	.word	0x08002254

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002254 	.word	0x08002254

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000294:	482a      	ldr	r0, [pc, #168]	; (8000340 <configure_uart+0xb0>)
 8000296:	f000 fb3b 	bl	8000910 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 800029a:	2202      	movs	r2, #2
 800029c:	2105      	movs	r1, #5
 800029e:	4828      	ldr	r0, [pc, #160]	; (8000340 <configure_uart+0xb0>)
 80002a0:	f000 f866 	bl	8000370 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80002a4:	2202      	movs	r2, #2
 80002a6:	2106      	movs	r1, #6
 80002a8:	4825      	ldr	r0, [pc, #148]	; (8000340 <configure_uart+0xb0>)
 80002aa:	f000 f861 	bl	8000370 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80002ae:	2207      	movs	r2, #7
 80002b0:	2105      	movs	r1, #5
 80002b2:	4823      	ldr	r0, [pc, #140]	; (8000340 <configure_uart+0xb0>)
 80002b4:	f000 f8a2 	bl	80003fc <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80002b8:	2207      	movs	r2, #7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4820      	ldr	r0, [pc, #128]	; (8000340 <configure_uart+0xb0>)
 80002be:	f000 f89d 	bl	80003fc <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2105      	movs	r1, #5
 80002c6:	481e      	ldr	r0, [pc, #120]	; (8000340 <configure_uart+0xb0>)
 80002c8:	f000 f8d1 	bl	800046e <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2106      	movs	r1, #6
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <configure_uart+0xb0>)
 80002d2:	f000 f8cc 	bl	800046e <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80002d6:	2202      	movs	r2, #2
 80002d8:	2105      	movs	r1, #5
 80002da:	4819      	ldr	r0, [pc, #100]	; (8000340 <configure_uart+0xb0>)
 80002dc:	f000 f90d 	bl	80004fa <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80002e0:	2202      	movs	r2, #2
 80002e2:	2106      	movs	r1, #6
 80002e4:	4816      	ldr	r0, [pc, #88]	; (8000340 <configure_uart+0xb0>)
 80002e6:	f000 f908 	bl	80004fa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2105      	movs	r1, #5
 80002ee:	4814      	ldr	r0, [pc, #80]	; (8000340 <configure_uart+0xb0>)
 80002f0:	f000 f8df 	bl	80004b2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2106      	movs	r1, #6
 80002f8:	4811      	ldr	r0, [pc, #68]	; (8000340 <configure_uart+0xb0>)
 80002fa:	f000 f8da 	bl	80004b2 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <configure_uart+0xb4>)
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <configure_uart+0xb8>)
 8000302:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <configure_uart+0xb4>)
 8000306:	2202      	movs	r2, #2
 8000308:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <configure_uart+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <configure_uart+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <configure_uart+0xb4>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <configure_uart+0xb4>)
 800031e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000322:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <configure_uart+0xb4>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <configure_uart+0xb8>)
 800032c:	f000 faf0 	bl	8000910 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <configure_uart+0xb4>)
 8000332:	f000 fcb1 	bl	8000c98 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <configure_uart+0xb4>)
 8000338:	f000 fdae 	bl	8000e98 <USART_PeripheralEnable>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40020c00 	.word	0x40020c00
 8000344:	20000084 	.word	0x20000084
 8000348:	40004400 	.word	0x40004400

0800034c <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <UART_SendChar+0x20>)
 800035e:	f000 fdc1 	bl	8000ee4 <USART_SendData>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000084 	.word	0x20000084

08000370 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
 800037c:	4613      	mov	r3, r2
 800037e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	0052      	lsls	r2, r2, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	401a      	ands	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	78b9      	ldrb	r1, [r7, #2]
 80003a0:	78fa      	ldrb	r2, [r7, #3]
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	431a      	orrs	r2, r3
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	601a      	str	r2, [r3, #0]

}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
 80003c4:	4613      	mov	r3, r2
 80003c6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	43d2      	mvns	r2, r2
 80003da:	401a      	ands	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	78b9      	ldrb	r1, [r7, #2]
 80003e6:	78fa      	ldrb	r2, [r7, #3]
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	431a      	orrs	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
 8000408:	4613      	mov	r3, r2
 800040a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	f003 0307 	and.w	r3, r3, #7
 800041c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800041e:	7afa      	ldrb	r2, [r7, #11]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3208      	adds	r2, #8
 8000424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000428:	7aba      	ldrb	r2, [r7, #10]
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	210f      	movs	r1, #15
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	7afa      	ldrb	r2, [r7, #11]
 8000438:	4019      	ands	r1, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3208      	adds	r2, #8
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000442:	7afa      	ldrb	r2, [r7, #11]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3208      	adds	r2, #8
 8000448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044c:	78b9      	ldrb	r1, [r7, #2]
 800044e:	7aba      	ldrb	r2, [r7, #10]
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	4611      	mov	r1, r2
 8000458:	7afa      	ldrb	r2, [r7, #11]
 800045a:	4319      	orrs	r1, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	3208      	adds	r2, #8
 8000460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800046e:	b480      	push	{r7}
 8000470:	b085      	sub	sp, #20
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	70fb      	strb	r3, [r7, #3]
 800047a:	4613      	mov	r3, r2
 800047c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	78fa      	ldrb	r2, [r7, #3]
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	43d2      	mvns	r2, r2
 8000490:	401a      	ands	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	78b9      	ldrb	r1, [r7, #2]
 800049c:	78fa      	ldrb	r2, [r7, #3]
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	431a      	orrs	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	605a      	str	r2, [r3, #4]
}
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	460b      	mov	r3, r1
 80004bc:	70fb      	strb	r3, [r7, #3]
 80004be:	4613      	mov	r3, r2
 80004c0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	78fa      	ldrb	r2, [r7, #3]
 80004cc:	0052      	lsls	r2, r2, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	401a      	ands	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	78b9      	ldrb	r1, [r7, #2]
 80004e2:	78fa      	ldrb	r2, [r7, #3]
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60da      	str	r2, [r3, #12]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
 8000506:	4613      	mov	r3, r2
 8000508:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	78fa      	ldrb	r2, [r7, #3]
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	401a      	ands	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	78b9      	ldrb	r1, [r7, #2]
 800052a:	78fa      	ldrb	r2, [r7, #3]
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	431a      	orrs	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	609a      	str	r2, [r3, #8]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <idletask>:
uint32_t tick_count = 0;
struct TCB *current_task = NULL;
struct TCB *next_task = NULL;

void idletask(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("From Idle Task...\r\n");
 8000548:	4801      	ldr	r0, [pc, #4]	; (8000550 <idletask+0xc>)
 800054a:	f000 ffeb 	bl	8001524 <puts>
 800054e:	e7fb      	b.n	8000548 <idletask+0x4>
 8000550:	0800226c 	.word	0x0800226c

08000554 <configure_systick_timer>:
	}
}

void configure_systick_timer(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
	uint32_t *pSYT_RVR = (uint32_t *) 0xE000E014U;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <configure_systick_timer+0x2c>)
 800055c:	607b      	str	r3, [r7, #4]
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <configure_systick_timer+0x30>)
 8000560:	603b      	str	r3, [r7, #0]

	*pSYT_RVR = SYT_RELOAD_VALUE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <configure_systick_timer+0x34>)
 8000566:	601a      	str	r2, [r3, #0]
	*pSYT_CFGR |= SYT_CONTROL_VALUE;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f043 0206 	orr.w	r2, r3, #6
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	601a      	str	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000e014 	.word	0xe000e014
 8000584:	e000e010 	.word	0xe000e010
 8000588:	000fffff 	.word	0x000fffff

0800058c <enable_systick_timer>:

void enable_systick_timer(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <enable_systick_timer+0x20>)
 8000594:	607b      	str	r3, [r7, #4]

	*pSYT_CFGR |= 0x1;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0201 	orr.w	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	e000e010 	.word	0xe000e010

080005b0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <SysTick_Handler+0x30>)
 80005b8:	607b      	str	r3, [r7, #4]

	tick_count++;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <SysTick_Handler+0x34>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <SysTick_Handler+0x34>)
 80005c2:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 80005c4:	f000 f8e2 	bl	800078c <update_sleep_status>

	update_next_task();
 80005c8:	f000 f8fe 	bl	80007c8 <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	e000ed04 	.word	0xe000ed04
 80005e4:	200000a0 	.word	0x200000a0

080005e8 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 80005e8:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 80005ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 80005f0:	4909      	ldr	r1, [pc, #36]	; (8000618 <PendSV_Handler+0x30>)
	__asm volatile ("LDR R1, [R1]");
 80005f2:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("STR R0, [R1]");
 80005f4:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 80005f6:	4909      	ldr	r1, [pc, #36]	; (800061c <PendSV_Handler+0x34>)
	__asm volatile ("LDR R1, [R1]");
 80005f8:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("LDR R0, [R1]");
 80005fa:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 80005fc:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8000600:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <PendSV_Handler+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <PendSV_Handler+0x2c>)
 800060a:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 800060c:	4770      	bx	lr
}
 800060e:	bf00      	nop
 8000610:	200000a8 	.word	0x200000a8
 8000614:	200000a4 	.word	0x200000a4
 8000618:	200000a4 	.word	0x200000a4
 800061c:	200000a8 	.word	0x200000a8

08000620 <os_create_task>:

void os_create_task(void (*task)(void),uint8_t task_priority,uint32_t task_stack_size)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	460b      	mov	r3, r1
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	72fb      	strb	r3, [r7, #11]
	uint32_t *p;
	struct TCB *last_task, *new_task;

	if(current_task == NULL)						//Adding the idle task
 800062e:	4b3f      	ldr	r3, [pc, #252]	; (800072c <os_create_task+0x10c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d135      	bne.n	80006a2 <os_create_task+0x82>
	{
		current_task = (struct TCB *) malloc(sizeof(struct TCB));
 8000636:	2014      	movs	r0, #20
 8000638:	f000 fe00 	bl	800123c <malloc>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b3a      	ldr	r3, [pc, #232]	; (800072c <os_create_task+0x10c>)
 8000642:	601a      	str	r2, [r3, #0]

		current_task->priority = IDLE_TASK_PRIORITY;
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <os_create_task+0x10c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	22fe      	movs	r2, #254	; 0xfe
 800064a:	711a      	strb	r2, [r3, #4]
		current_task->sleep_count = 0;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <os_create_task+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]

		current_task->task_stack = (uint32_t *) malloc(IDLE_TASK_STACK_SIZE*4);
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <os_create_task+0x10c>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800065c:	f000 fdee 	bl	800123c <malloc>
 8000660:	4603      	mov	r3, r0
 8000662:	60e3      	str	r3, [r4, #12]
		current_task->current_sp = ((uint32_t) current_task->task_stack + 4*IDLE_TASK_STACK_SIZE - 4*16);
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <os_create_task+0x10c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	461a      	mov	r2, r3
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <os_create_task+0x10c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 8000674:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+14*4);
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <os_create_task+0x10c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3338      	adds	r3, #56	; 0x38
 800067e:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) idletask;
 8000680:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <os_create_task+0x110>)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+15*4);
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <os_create_task+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	333c      	adds	r3, #60	; 0x3c
 800068e:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) 0x01000000U;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000696:	601a      	str	r2, [r3, #0]

		current_task->next = current_task;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <os_create_task+0x10c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a23      	ldr	r2, [pc, #140]	; (800072c <os_create_task+0x10c>)
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	611a      	str	r2, [r3, #16]
	}

	//Go to end of list
	last_task = current_task;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <os_create_task+0x10c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 80006a8:	e002      	b.n	80006b0 <os_create_task+0x90>
	{
		last_task = last_task->next;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <os_create_task+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d1f6      	bne.n	80006aa <os_create_task+0x8a>
	}

	//Add new task
	new_task = (struct TCB *) malloc(sizeof(struct TCB));
 80006bc:	2014      	movs	r0, #20
 80006be:	f000 fdbd 	bl	800123c <malloc>
 80006c2:	4603      	mov	r3, r0
 80006c4:	617b      	str	r3, [r7, #20]
	last_task->next = new_task;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	611a      	str	r2, [r3, #16]

	new_task->priority = task_priority;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	711a      	strb	r2, [r3, #4]
	new_task->sleep_count = 0;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]

	new_task->task_stack = (uint32_t *) malloc(task_stack_size*4);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fdad 	bl	800123c <malloc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	60da      	str	r2, [r3, #12]
	new_task->current_sp = ((uint32_t) new_task->task_stack + 4*task_stack_size - 4*16);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+14*4);
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3338      	adds	r3, #56	; 0x38
 8000704:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) task;
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+15*4);
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	333c      	adds	r3, #60	; 0x3c
 8000712:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) 0x01000000U;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800071a:	601a      	str	r2, [r3, #0]

	new_task->next = current_task;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <os_create_task+0x10c>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	611a      	str	r2, [r3, #16]

	return;
 8000724:	bf00      	nop
}
 8000726:	3724      	adds	r7, #36	; 0x24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	200000a4 	.word	0x200000a4
 8000730:	08000545 	.word	0x08000545

08000734 <os_start>:

void os_start(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	configure_systick_timer();
 8000738:	f7ff ff0c 	bl	8000554 <configure_systick_timer>
	enable_systick_timer();
 800073c:	f7ff ff26 	bl	800058c <enable_systick_timer>

	//Initialize PSP
	__asm volatile ("LDR R1, =current_task");
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <os_start+0x30>)
	__asm volatile ("LDR R0, [R1]");
 8000742:	6808      	ldr	r0, [r1, #0]
	__asm volatile ("LDR R0, [R0]");
 8000744:	6800      	ldr	r0, [r0, #0]
	__asm volatile ("MSR PSP, R0");
 8000746:	f380 8809 	msr	PSP, r0

	//Change SP from MSP to PSP
	__asm volatile ("MRS R0, CONTROL");
 800074a:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");
 800074e:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000752:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("ISB");
 8000756:	f3bf 8f6f 	isb	sy

	idletask();
 800075a:	f7ff fef3 	bl	8000544 <idletask>

	return;
 800075e:	bf00      	nop
}
 8000760:	bd80      	pop	{r7, pc}
 8000762:	0000      	.short	0x0000
 8000764:	200000a4 	.word	0x200000a4

08000768 <os_yield>:

	return;
}

void os_yield(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <os_yield+0x20>)
 8000770:	607b      	str	r3, [r7, #4]

	//Pending the SysTick Exception
	*pICSR |= 0x4000000U;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]

	return;
 800077e:	bf00      	nop
}
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	e000ed04 	.word	0xe000ed04

0800078c <update_sleep_status>:

void update_sleep_status(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	struct TCB *present_task;

	present_task = current_task;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <update_sleep_status+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	607b      	str	r3, [r7, #4]

	do
	{
		if(present_task->sleep_count > 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <update_sleep_status+0x1e>
		{
			present_task->sleep_count--;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	609a      	str	r2, [r3, #8]
		}
		present_task = present_task->next;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	607b      	str	r3, [r7, #4]
	}
	while(present_task != current_task);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <update_sleep_status+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d1ee      	bne.n	8000798 <update_sleep_status+0xc>

	return;
 80007ba:	bf00      	nop
}
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	200000a4 	.word	0x200000a4

080007c8 <update_next_task>:

void update_next_task(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 80007ce:	23ff      	movs	r3, #255	; 0xff
 80007d0:	71fb      	strb	r3, [r7, #7]
	struct TCB *best_task;

	next_task = current_task;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <update_next_task+0x5c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <update_next_task+0x60>)
 80007d8:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = next_task->next;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <update_next_task+0x60>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <update_next_task+0x60>)
 80007e2:	6013      	str	r3, [r2, #0]

		if(next_task->priority < max_priority && next_task->sleep_count==0)
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <update_next_task+0x60>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d90b      	bls.n	8000808 <update_next_task+0x40>
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <update_next_task+0x60>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d106      	bne.n	8000808 <update_next_task+0x40>
		{
			max_priority = next_task->priority;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <update_next_task+0x60>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <update_next_task+0x60>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <update_next_task+0x60>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <update_next_task+0x5c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d1e2      	bne.n	80007da <update_next_task+0x12>

	next_task = best_task;
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <update_next_task+0x60>)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	6013      	str	r3, [r2, #0]

	return;
 800081a:	bf00      	nop
}
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	200000a4 	.word	0x200000a4
 8000828:	200000a8 	.word	0x200000a8

0800082c <os_disable_interrupts>:

void os_disable_interrupts(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	__asm volatile ("CPSID I");
 8000830:	b672      	cpsid	i

	return;
 8000832:	bf00      	nop
}
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <os_enable_interrupts>:

void os_enable_interrupts(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
	__asm volatile ("CPSIE I");
 800083e:	b662      	cpsie	i

	return;
 8000840:	bf00      	nop
}
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <os_sem_init>:

	return;
}

void os_sem_init(Semaphore *s,uint32_t init_value,uint32_t maximum_value)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	s->cur_value = init_value;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	601a      	str	r2, [r3, #0]
	s->max_value = maximum_value;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	605a      	str	r2, [r3, #4]

	return;
 8000860:	bf00      	nop
}
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <os_sem_wait>:

void os_sem_wait(Semaphore *s)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 8000872:	f7ff ffdb 	bl	800082c <os_disable_interrupts>

	while((s->cur_value) == 0)
 8000876:	e005      	b.n	8000884 <os_sem_wait+0x1a>
	{
		os_enable_interrupts();
 8000878:	f7ff ffdf 	bl	800083a <os_enable_interrupts>
		os_yield();
 800087c:	f7ff ff74 	bl	8000768 <os_yield>
		os_disable_interrupts();
 8000880:	f7ff ffd4 	bl	800082c <os_disable_interrupts>
	while((s->cur_value) == 0)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f5      	beq.n	8000878 <os_sem_wait+0xe>
	}

	s->cur_value--;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]

	os_enable_interrupts();
 8000896:	f7ff ffd0 	bl	800083a <os_enable_interrupts>

	return;
 800089a:	bf00      	nop
}
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <os_sem_signal>:

void os_sem_signal(Semaphore *s)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 80008aa:	f7ff ffbf 	bl	800082c <os_disable_interrupts>

	if(s->cur_value < s->max_value)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d204      	bcs.n	80008c4 <os_sem_signal+0x22>
	{
		s->cur_value++;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
	}

	os_enable_interrupts();
 80008c4:	f7ff ffb9 	bl	800083a <os_enable_interrupts>

	return;
 80008c8:	bf00      	nop
}
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <RTC_Alarm_IRQHandler+0x24>)
 80008d8:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 80008da:	f000 f80d 	bl	80008f8 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]

	return;
 80008ea:	bf00      	nop
}
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40013c14 	.word	0x40013c14

080008f8 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 80008fc:	2201      	movs	r2, #1
 80008fe:	210f      	movs	r1, #15
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <RTC_Alarm_Interrupt_Callback+0x14>)
 8000902:	f7ff fd59 	bl	80003b8 <GPIOWritePin>

	return;
 8000906:	bf00      	nop
}
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020c00 	.word	0x40020c00

08000910 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a88      	ldr	r2, [pc, #544]	; (8000b3c <EnablePeriClk+0x22c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d108      	bne.n	8000932 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000920:	4b87      	ldr	r3, [pc, #540]	; (8000b40 <EnablePeriClk+0x230>)
 8000922:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000930:	e19b      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a83      	ldr	r2, [pc, #524]	; (8000b44 <EnablePeriClk+0x234>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d108      	bne.n	800094c <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800093a:	4b81      	ldr	r3, [pc, #516]	; (8000b40 <EnablePeriClk+0x230>)
 800093c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f043 0202 	orr.w	r2, r3, #2
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	e18e      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a7e      	ldr	r2, [pc, #504]	; (8000b48 <EnablePeriClk+0x238>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d108      	bne.n	8000966 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000954:	4b7a      	ldr	r3, [pc, #488]	; (8000b40 <EnablePeriClk+0x230>)
 8000956:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f043 0204 	orr.w	r2, r3, #4
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	e181      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a78      	ldr	r2, [pc, #480]	; (8000b4c <EnablePeriClk+0x23c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d108      	bne.n	8000980 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800096e:	4b74      	ldr	r3, [pc, #464]	; (8000b40 <EnablePeriClk+0x230>)
 8000970:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f043 0208 	orr.w	r2, r3, #8
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	e174      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a73      	ldr	r2, [pc, #460]	; (8000b50 <EnablePeriClk+0x240>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d108      	bne.n	800099a <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000988:	4b6d      	ldr	r3, [pc, #436]	; (8000b40 <EnablePeriClk+0x230>)
 800098a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f043 0210 	orr.w	r2, r3, #16
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	e167      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a6d      	ldr	r2, [pc, #436]	; (8000b54 <EnablePeriClk+0x244>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d108      	bne.n	80009b4 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009a2:	4b67      	ldr	r3, [pc, #412]	; (8000b40 <EnablePeriClk+0x230>)
 80009a4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f043 0220 	orr.w	r2, r3, #32
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	e15a      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a68      	ldr	r2, [pc, #416]	; (8000b58 <EnablePeriClk+0x248>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d108      	bne.n	80009ce <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009bc:	4b60      	ldr	r3, [pc, #384]	; (8000b40 <EnablePeriClk+0x230>)
 80009be:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	e14d      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <EnablePeriClk+0x24c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d108      	bne.n	80009e8 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <EnablePeriClk+0x230>)
 80009d8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	601a      	str	r2, [r3, #0]
}
 80009e6:	e140      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <EnablePeriClk+0x250>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d108      	bne.n	8000a02 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009f0:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <EnablePeriClk+0x230>)
 80009f2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	e133      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a57      	ldr	r2, [pc, #348]	; (8000b64 <EnablePeriClk+0x254>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d108      	bne.n	8000a1c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000a0a:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <EnablePeriClk+0x258>)
 8000a0c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	e126      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <EnablePeriClk+0x25c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d108      	bne.n	8000a36 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a24:	4b52      	ldr	r3, [pc, #328]	; (8000b70 <EnablePeriClk+0x260>)
 8000a26:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	e119      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <EnablePeriClk+0x264>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d108      	bne.n	8000a50 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a3e:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <EnablePeriClk+0x260>)
 8000a40:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	e10c      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a49      	ldr	r2, [pc, #292]	; (8000b78 <EnablePeriClk+0x268>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d108      	bne.n	8000a6a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <EnablePeriClk+0x260>)
 8000a5a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	e0ff      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <EnablePeriClk+0x26c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d108      	bne.n	8000a84 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a72:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <EnablePeriClk+0x260>)
 8000a74:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]
}
 8000a82:	e0f2      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a3e      	ldr	r2, [pc, #248]	; (8000b80 <EnablePeriClk+0x270>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d108      	bne.n	8000a9e <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <EnablePeriClk+0x260>)
 8000a8e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	e0e5      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <EnablePeriClk+0x274>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d108      	bne.n	8000ab8 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <EnablePeriClk+0x258>)
 8000aa8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f043 0210 	orr.w	r2, r3, #16
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	e0d8      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <EnablePeriClk+0x278>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d108      	bne.n	8000ad2 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <EnablePeriClk+0x260>)
 8000ac2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	e0cb      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <EnablePeriClk+0x27c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d108      	bne.n	8000aec <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <EnablePeriClk+0x260>)
 8000adc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	e0be      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <EnablePeriClk+0x280>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d108      	bne.n	8000b06 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <EnablePeriClk+0x260>)
 8000af6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	e0b1      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <EnablePeriClk+0x284>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d108      	bne.n	8000b20 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <EnablePeriClk+0x260>)
 8000b10:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	601a      	str	r2, [r3, #0]
}
 8000b1e:	e0a4      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <EnablePeriClk+0x288>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d139      	bne.n	8000b9c <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <EnablePeriClk+0x258>)
 8000b2a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f043 0220 	orr.w	r2, r3, #32
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	e097      	b.n	8000c6a <EnablePeriClk+0x35a>
 8000b3a:	bf00      	nop
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40023830 	.word	0x40023830
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40021c00 	.word	0x40021c00
 8000b60:	40022000 	.word	0x40022000
 8000b64:	40013000 	.word	0x40013000
 8000b68:	40023844 	.word	0x40023844
 8000b6c:	40003800 	.word	0x40003800
 8000b70:	40023840 	.word	0x40023840
 8000b74:	40003c00 	.word	0x40003c00
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40005800 	.word	0x40005800
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40004c00 	.word	0x40004c00
 8000b94:	40005000 	.word	0x40005000
 8000b98:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <EnablePeriClk+0x364>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d108      	bne.n	8000bb6 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <EnablePeriClk+0x368>)
 8000ba6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f043 0210 	orr.w	r2, r3, #16
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	e059      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <EnablePeriClk+0x36c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d108      	bne.n	8000bd0 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <EnablePeriClk+0x368>)
 8000bc0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f043 0220 	orr.w	r2, r3, #32
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	e04c      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <EnablePeriClk+0x370>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d108      	bne.n	8000bea <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <EnablePeriClk+0x374>)
 8000bda:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	e03f      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <EnablePeriClk+0x378>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d108      	bne.n	8000c04 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <EnablePeriClk+0x374>)
 8000bf4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	e032      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0a:	d108      	bne.n	8000c1e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <EnablePeriClk+0x368>)
 8000c0e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	e025      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <EnablePeriClk+0x37c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d108      	bne.n	8000c38 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <EnablePeriClk+0x368>)
 8000c28:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f043 0202 	orr.w	r2, r3, #2
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	e018      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <EnablePeriClk+0x380>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d108      	bne.n	8000c52 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <EnablePeriClk+0x368>)
 8000c42:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f043 0204 	orr.w	r2, r3, #4
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	e00b      	b.n	8000c6a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <EnablePeriClk+0x384>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d107      	bne.n	8000c6a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <EnablePeriClk+0x368>)
 8000c5c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f043 0208 	orr.w	r2, r3, #8
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40001000 	.word	0x40001000
 8000c78:	40023840 	.word	0x40023840
 8000c7c:	40001400 	.word	0x40001400
 8000c80:	40026000 	.word	0x40026000
 8000c84:	40023830 	.word	0x40023830
 8000c88:	40026400 	.word	0x40026400
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40000800 	.word	0x40000800
 8000c94:	40000c00 	.word	0x40000c00

08000c98 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d110      	bne.n	8000cca <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 0208 	orr.w	r2, r2, #8
 8000cb6:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0204 	bic.w	r2, r2, #4
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	e028      	b.n	8000d1c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d110      	bne.n	8000cf4 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0208 	bic.w	r2, r2, #8
 8000ce0:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0204 	orr.w	r2, r2, #4
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	e013      	b.n	8000d1c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d10f      	bne.n	8000d1c <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0208 	orr.w	r2, r2, #8
 8000d0a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0204 	orr.w	r2, r2, #4
 8000d1a:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d108      	bne.n	8000d36 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	e00b      	b.n	8000d4e <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d107      	bne.n	8000d4e <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d4c:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d5c:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6919      	ldr	r1, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	031a      	lsls	r2, r3, #12
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	e028      	b.n	8000dde <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d110      	bne.n	8000db6 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000da2:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	e013      	b.n	8000dde <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d10f      	bne.n	8000dde <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dcc:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ddc:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4619      	mov	r1, r3
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f8a7 	bl	8000f38 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d110      	bne.n	8000e14 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e00:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e10:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000e12:	e03d      	b.n	8000e90 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d110      	bne.n	8000e3e <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e3a:	615a      	str	r2, [r3, #20]
}
 8000e3c:	e028      	b.n	8000e90 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d110      	bne.n	8000e68 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e54:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e64:	615a      	str	r2, [r3, #20]
}
 8000e66:	e013      	b.n	8000e90 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d10f      	bne.n	8000e90 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e7e:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e8e:	615a      	str	r2, [r3, #20]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000eae:	60da      	str	r2, [r3, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000ef0:	e012      	b.n	8000f18 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8000ef2:	bf00      	nop
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f7ff ffdf 	bl	8000eba <USART_GetFlagStatus>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f8      	beq.n	8000ef4 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
		Len--;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e9      	bne.n	8000ef2 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8000f1e:	bf00      	nop
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff ffc9 	bl	8000eba <USART_GetFlagStatus>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f8      	beq.n	8000f20 <USART_SendData+0x3c>
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000f42:	f240 6383 	movw	r3, #1667	; 0x683
 8000f46:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	609a      	str	r2, [r3, #8]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <main>:
static void producer(void);
static void consumer(void);
static void delay(uint32_t count);

int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	configure_uart();
 8000f60:	f7ff f996 	bl	8000290 <configure_uart>

	os_sem_init(&w,1,1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <main+0x3c>)
 8000f6a:	f7ff fc6d 	bl	8000848 <os_sem_init>
	os_sem_init(&r,0,1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2100      	movs	r1, #0
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <main+0x40>)
 8000f74:	f7ff fc68 	bl	8000848 <os_sem_init>

	os_create_task(producer,0,1024);
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <main+0x44>)
 8000f80:	f7ff fb4e 	bl	8000620 <os_create_task>
	os_create_task(consumer,0,1024);
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <main+0x48>)
 8000f8c:	f7ff fb48 	bl	8000620 <os_create_task>
	os_start();
 8000f90:	f7ff fbd0 	bl	8000734 <os_start>

	while(1);
 8000f94:	e7fe      	b.n	8000f94 <main+0x38>
 8000f96:	bf00      	nop
 8000f98:	200000ac 	.word	0x200000ac
 8000f9c:	200000b4 	.word	0x200000b4
 8000fa0:	08000fa9 	.word	0x08000fa9
 8000fa4:	08000ff5 	.word	0x08000ff5

08000fa8 <producer>:

	return 0;
}

static void producer(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	static uint32_t volatile producer_count = 0;

	while(1)
	{
		producer_count++;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <producer+0x38>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <producer+0x38>)
 8000fb4:	6013      	str	r3, [r2, #0]
		os_sem_wait(&w);
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <producer+0x3c>)
 8000fb8:	f7ff fc57 	bl	800086a <os_sem_wait>
		glo_val = producer_count;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <producer+0x38>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <producer+0x40>)
 8000fc2:	6013      	str	r3, [r2, #0]
		printf("Global Value From Producer: %ld\r\n",glo_val);
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <producer+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <producer+0x44>)
 8000fcc:	f000 fa24 	bl	8001418 <iprintf>
		os_sem_signal(&r);
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <producer+0x48>)
 8000fd2:	f7ff fc66 	bl	80008a2 <os_sem_signal>
		delay(SLEEP_COUNT_PRODUCER);
 8000fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fda:	f000 f827 	bl	800102c <delay>
		producer_count++;
 8000fde:	e7e5      	b.n	8000fac <producer+0x4>
 8000fe0:	200000bc 	.word	0x200000bc
 8000fe4:	200000ac 	.word	0x200000ac
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	08002280 	.word	0x08002280
 8000ff0:	200000b4 	.word	0x200000b4

08000ff4 <consumer>:
	}
}

static void consumer(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	while(1)
	{
		os_sem_wait(&r);
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <consumer+0x28>)
 8000ffa:	f7ff fc36 	bl	800086a <os_sem_wait>
		printf("Global Value From Consumer: %ld\r\n",glo_val);
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <consumer+0x2c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <consumer+0x30>)
 8001006:	f000 fa07 	bl	8001418 <iprintf>
		os_sem_signal(&w);
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <consumer+0x34>)
 800100c:	f7ff fc49 	bl	80008a2 <os_sem_signal>
		delay(SLEEP_COUNT_CONSUMER);
 8001010:	f241 7070 	movw	r0, #6000	; 0x1770
 8001014:	f000 f80a 	bl	800102c <delay>
		os_sem_wait(&r);
 8001018:	e7ee      	b.n	8000ff8 <consumer+0x4>
 800101a:	bf00      	nop
 800101c:	200000b4 	.word	0x200000b4
 8001020:	20000000 	.word	0x20000000
 8001024:	080022a4 	.word	0x080022a4
 8001028:	200000ac 	.word	0x200000ac

0800102c <delay>:
	}
}

static void delay(uint32_t count)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint32_t j;
	for(j=0;j<count;j++);
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e002      	b.n	8001040 <delay+0x14>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3f8      	bcc.n	800103a <delay+0xe>
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
  }

  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f94f 	bl	800034c <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf1      	blt.n	80010a0 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:

int _close(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ec:	605a      	str	r2, [r3, #4]
  return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <_isatty>:

int _isatty(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f000 f846 	bl	80011e8 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20020000 	.word	0x20020000
 8001188:	00000400 	.word	0x00000400
 800118c:	200000c0 	.word	0x200000c0
 8001190:	200000d8 	.word	0x200000d8

08001194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001198:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011c2:	f000 f817 	bl	80011f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c6:	f7ff fec9 	bl	8000f5c <main>

080011ca <LoopForever>:

LoopForever:
  b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   r0, =_estack
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011d8:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 80011dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011e0:	200000d4 	.word	0x200000d4

080011e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <__errno>:
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <__errno+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000004 	.word	0x20000004

080011f4 <__libc_init_array>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4d0d      	ldr	r5, [pc, #52]	; (800122c <__libc_init_array+0x38>)
 80011f8:	4c0d      	ldr	r4, [pc, #52]	; (8001230 <__libc_init_array+0x3c>)
 80011fa:	1b64      	subs	r4, r4, r5
 80011fc:	10a4      	asrs	r4, r4, #2
 80011fe:	2600      	movs	r6, #0
 8001200:	42a6      	cmp	r6, r4
 8001202:	d109      	bne.n	8001218 <__libc_init_array+0x24>
 8001204:	4d0b      	ldr	r5, [pc, #44]	; (8001234 <__libc_init_array+0x40>)
 8001206:	4c0c      	ldr	r4, [pc, #48]	; (8001238 <__libc_init_array+0x44>)
 8001208:	f001 f824 	bl	8002254 <_init>
 800120c:	1b64      	subs	r4, r4, r5
 800120e:	10a4      	asrs	r4, r4, #2
 8001210:	2600      	movs	r6, #0
 8001212:	42a6      	cmp	r6, r4
 8001214:	d105      	bne.n	8001222 <__libc_init_array+0x2e>
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	f855 3b04 	ldr.w	r3, [r5], #4
 800121c:	4798      	blx	r3
 800121e:	3601      	adds	r6, #1
 8001220:	e7ee      	b.n	8001200 <__libc_init_array+0xc>
 8001222:	f855 3b04 	ldr.w	r3, [r5], #4
 8001226:	4798      	blx	r3
 8001228:	3601      	adds	r6, #1
 800122a:	e7f2      	b.n	8001212 <__libc_init_array+0x1e>
 800122c:	08002360 	.word	0x08002360
 8001230:	08002360 	.word	0x08002360
 8001234:	08002360 	.word	0x08002360
 8001238:	08002364 	.word	0x08002364

0800123c <malloc>:
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <malloc+0xc>)
 800123e:	4601      	mov	r1, r0
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f000 b875 	b.w	8001330 <_malloc_r>
 8001246:	bf00      	nop
 8001248:	20000004 	.word	0x20000004

0800124c <memset>:
 800124c:	4402      	add	r2, r0
 800124e:	4603      	mov	r3, r0
 8001250:	4293      	cmp	r3, r2
 8001252:	d100      	bne.n	8001256 <memset+0xa>
 8001254:	4770      	bx	lr
 8001256:	f803 1b01 	strb.w	r1, [r3], #1
 800125a:	e7f9      	b.n	8001250 <memset+0x4>

0800125c <_free_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4605      	mov	r5, r0
 8001260:	2900      	cmp	r1, #0
 8001262:	d041      	beq.n	80012e8 <_free_r+0x8c>
 8001264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001268:	1f0c      	subs	r4, r1, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfb8      	it	lt
 800126e:	18e4      	addlt	r4, r4, r3
 8001270:	f000 fc4c 	bl	8001b0c <__malloc_lock>
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <_free_r+0x90>)
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	b933      	cbnz	r3, 8001288 <_free_r+0x2c>
 800127a:	6063      	str	r3, [r4, #4]
 800127c:	6014      	str	r4, [r2, #0]
 800127e:	4628      	mov	r0, r5
 8001280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001284:	f000 bc48 	b.w	8001b18 <__malloc_unlock>
 8001288:	42a3      	cmp	r3, r4
 800128a:	d908      	bls.n	800129e <_free_r+0x42>
 800128c:	6820      	ldr	r0, [r4, #0]
 800128e:	1821      	adds	r1, r4, r0
 8001290:	428b      	cmp	r3, r1
 8001292:	bf01      	itttt	eq
 8001294:	6819      	ldreq	r1, [r3, #0]
 8001296:	685b      	ldreq	r3, [r3, #4]
 8001298:	1809      	addeq	r1, r1, r0
 800129a:	6021      	streq	r1, [r4, #0]
 800129c:	e7ed      	b.n	800127a <_free_r+0x1e>
 800129e:	461a      	mov	r2, r3
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	b10b      	cbz	r3, 80012a8 <_free_r+0x4c>
 80012a4:	42a3      	cmp	r3, r4
 80012a6:	d9fa      	bls.n	800129e <_free_r+0x42>
 80012a8:	6811      	ldr	r1, [r2, #0]
 80012aa:	1850      	adds	r0, r2, r1
 80012ac:	42a0      	cmp	r0, r4
 80012ae:	d10b      	bne.n	80012c8 <_free_r+0x6c>
 80012b0:	6820      	ldr	r0, [r4, #0]
 80012b2:	4401      	add	r1, r0
 80012b4:	1850      	adds	r0, r2, r1
 80012b6:	4283      	cmp	r3, r0
 80012b8:	6011      	str	r1, [r2, #0]
 80012ba:	d1e0      	bne.n	800127e <_free_r+0x22>
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	6053      	str	r3, [r2, #4]
 80012c2:	4401      	add	r1, r0
 80012c4:	6011      	str	r1, [r2, #0]
 80012c6:	e7da      	b.n	800127e <_free_r+0x22>
 80012c8:	d902      	bls.n	80012d0 <_free_r+0x74>
 80012ca:	230c      	movs	r3, #12
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	e7d6      	b.n	800127e <_free_r+0x22>
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	1821      	adds	r1, r4, r0
 80012d4:	428b      	cmp	r3, r1
 80012d6:	bf04      	itt	eq
 80012d8:	6819      	ldreq	r1, [r3, #0]
 80012da:	685b      	ldreq	r3, [r3, #4]
 80012dc:	6063      	str	r3, [r4, #4]
 80012de:	bf04      	itt	eq
 80012e0:	1809      	addeq	r1, r1, r0
 80012e2:	6021      	streq	r1, [r4, #0]
 80012e4:	6054      	str	r4, [r2, #4]
 80012e6:	e7ca      	b.n	800127e <_free_r+0x22>
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
 80012ea:	bf00      	nop
 80012ec:	200000c4 	.word	0x200000c4

080012f0 <sbrk_aligned>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4e0e      	ldr	r6, [pc, #56]	; (800132c <sbrk_aligned+0x3c>)
 80012f4:	460c      	mov	r4, r1
 80012f6:	6831      	ldr	r1, [r6, #0]
 80012f8:	4605      	mov	r5, r0
 80012fa:	b911      	cbnz	r1, 8001302 <sbrk_aligned+0x12>
 80012fc:	f000 f91a 	bl	8001534 <_sbrk_r>
 8001300:	6030      	str	r0, [r6, #0]
 8001302:	4621      	mov	r1, r4
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f915 	bl	8001534 <_sbrk_r>
 800130a:	1c43      	adds	r3, r0, #1
 800130c:	d00a      	beq.n	8001324 <sbrk_aligned+0x34>
 800130e:	1cc4      	adds	r4, r0, #3
 8001310:	f024 0403 	bic.w	r4, r4, #3
 8001314:	42a0      	cmp	r0, r4
 8001316:	d007      	beq.n	8001328 <sbrk_aligned+0x38>
 8001318:	1a21      	subs	r1, r4, r0
 800131a:	4628      	mov	r0, r5
 800131c:	f000 f90a 	bl	8001534 <_sbrk_r>
 8001320:	3001      	adds	r0, #1
 8001322:	d101      	bne.n	8001328 <sbrk_aligned+0x38>
 8001324:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001328:	4620      	mov	r0, r4
 800132a:	bd70      	pop	{r4, r5, r6, pc}
 800132c:	200000c8 	.word	0x200000c8

08001330 <_malloc_r>:
 8001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001334:	1ccd      	adds	r5, r1, #3
 8001336:	f025 0503 	bic.w	r5, r5, #3
 800133a:	3508      	adds	r5, #8
 800133c:	2d0c      	cmp	r5, #12
 800133e:	bf38      	it	cc
 8001340:	250c      	movcc	r5, #12
 8001342:	2d00      	cmp	r5, #0
 8001344:	4607      	mov	r7, r0
 8001346:	db01      	blt.n	800134c <_malloc_r+0x1c>
 8001348:	42a9      	cmp	r1, r5
 800134a:	d905      	bls.n	8001358 <_malloc_r+0x28>
 800134c:	230c      	movs	r3, #12
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	2600      	movs	r6, #0
 8001352:	4630      	mov	r0, r6
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001358:	4e2e      	ldr	r6, [pc, #184]	; (8001414 <_malloc_r+0xe4>)
 800135a:	f000 fbd7 	bl	8001b0c <__malloc_lock>
 800135e:	6833      	ldr	r3, [r6, #0]
 8001360:	461c      	mov	r4, r3
 8001362:	bb34      	cbnz	r4, 80013b2 <_malloc_r+0x82>
 8001364:	4629      	mov	r1, r5
 8001366:	4638      	mov	r0, r7
 8001368:	f7ff ffc2 	bl	80012f0 <sbrk_aligned>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	4604      	mov	r4, r0
 8001370:	d14d      	bne.n	800140e <_malloc_r+0xde>
 8001372:	6834      	ldr	r4, [r6, #0]
 8001374:	4626      	mov	r6, r4
 8001376:	2e00      	cmp	r6, #0
 8001378:	d140      	bne.n	80013fc <_malloc_r+0xcc>
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	4631      	mov	r1, r6
 800137e:	4638      	mov	r0, r7
 8001380:	eb04 0803 	add.w	r8, r4, r3
 8001384:	f000 f8d6 	bl	8001534 <_sbrk_r>
 8001388:	4580      	cmp	r8, r0
 800138a:	d13a      	bne.n	8001402 <_malloc_r+0xd2>
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	3503      	adds	r5, #3
 8001390:	1a6d      	subs	r5, r5, r1
 8001392:	f025 0503 	bic.w	r5, r5, #3
 8001396:	3508      	adds	r5, #8
 8001398:	2d0c      	cmp	r5, #12
 800139a:	bf38      	it	cc
 800139c:	250c      	movcc	r5, #12
 800139e:	4629      	mov	r1, r5
 80013a0:	4638      	mov	r0, r7
 80013a2:	f7ff ffa5 	bl	80012f0 <sbrk_aligned>
 80013a6:	3001      	adds	r0, #1
 80013a8:	d02b      	beq.n	8001402 <_malloc_r+0xd2>
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	442b      	add	r3, r5
 80013ae:	6023      	str	r3, [r4, #0]
 80013b0:	e00e      	b.n	80013d0 <_malloc_r+0xa0>
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	1b52      	subs	r2, r2, r5
 80013b6:	d41e      	bmi.n	80013f6 <_malloc_r+0xc6>
 80013b8:	2a0b      	cmp	r2, #11
 80013ba:	d916      	bls.n	80013ea <_malloc_r+0xba>
 80013bc:	1961      	adds	r1, r4, r5
 80013be:	42a3      	cmp	r3, r4
 80013c0:	6025      	str	r5, [r4, #0]
 80013c2:	bf18      	it	ne
 80013c4:	6059      	strne	r1, [r3, #4]
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	bf08      	it	eq
 80013ca:	6031      	streq	r1, [r6, #0]
 80013cc:	5162      	str	r2, [r4, r5]
 80013ce:	604b      	str	r3, [r1, #4]
 80013d0:	4638      	mov	r0, r7
 80013d2:	f104 060b 	add.w	r6, r4, #11
 80013d6:	f000 fb9f 	bl	8001b18 <__malloc_unlock>
 80013da:	f026 0607 	bic.w	r6, r6, #7
 80013de:	1d23      	adds	r3, r4, #4
 80013e0:	1af2      	subs	r2, r6, r3
 80013e2:	d0b6      	beq.n	8001352 <_malloc_r+0x22>
 80013e4:	1b9b      	subs	r3, r3, r6
 80013e6:	50a3      	str	r3, [r4, r2]
 80013e8:	e7b3      	b.n	8001352 <_malloc_r+0x22>
 80013ea:	6862      	ldr	r2, [r4, #4]
 80013ec:	42a3      	cmp	r3, r4
 80013ee:	bf0c      	ite	eq
 80013f0:	6032      	streq	r2, [r6, #0]
 80013f2:	605a      	strne	r2, [r3, #4]
 80013f4:	e7ec      	b.n	80013d0 <_malloc_r+0xa0>
 80013f6:	4623      	mov	r3, r4
 80013f8:	6864      	ldr	r4, [r4, #4]
 80013fa:	e7b2      	b.n	8001362 <_malloc_r+0x32>
 80013fc:	4634      	mov	r4, r6
 80013fe:	6876      	ldr	r6, [r6, #4]
 8001400:	e7b9      	b.n	8001376 <_malloc_r+0x46>
 8001402:	230c      	movs	r3, #12
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4638      	mov	r0, r7
 8001408:	f000 fb86 	bl	8001b18 <__malloc_unlock>
 800140c:	e7a1      	b.n	8001352 <_malloc_r+0x22>
 800140e:	6025      	str	r5, [r4, #0]
 8001410:	e7de      	b.n	80013d0 <_malloc_r+0xa0>
 8001412:	bf00      	nop
 8001414:	200000c4 	.word	0x200000c4

08001418 <iprintf>:
 8001418:	b40f      	push	{r0, r1, r2, r3}
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <iprintf+0x2c>)
 800141c:	b513      	push	{r0, r1, r4, lr}
 800141e:	681c      	ldr	r4, [r3, #0]
 8001420:	b124      	cbz	r4, 800142c <iprintf+0x14>
 8001422:	69a3      	ldr	r3, [r4, #24]
 8001424:	b913      	cbnz	r3, 800142c <iprintf+0x14>
 8001426:	4620      	mov	r0, r4
 8001428:	f000 fa6a 	bl	8001900 <__sinit>
 800142c:	ab05      	add	r3, sp, #20
 800142e:	9a04      	ldr	r2, [sp, #16]
 8001430:	68a1      	ldr	r1, [r4, #8]
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4620      	mov	r0, r4
 8001436:	f000 fb9d 	bl	8001b74 <_vfiprintf_r>
 800143a:	b002      	add	sp, #8
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001440:	b004      	add	sp, #16
 8001442:	4770      	bx	lr
 8001444:	20000004 	.word	0x20000004

08001448 <_puts_r>:
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	460e      	mov	r6, r1
 800144c:	4605      	mov	r5, r0
 800144e:	b118      	cbz	r0, 8001458 <_puts_r+0x10>
 8001450:	6983      	ldr	r3, [r0, #24]
 8001452:	b90b      	cbnz	r3, 8001458 <_puts_r+0x10>
 8001454:	f000 fa54 	bl	8001900 <__sinit>
 8001458:	69ab      	ldr	r3, [r5, #24]
 800145a:	68ac      	ldr	r4, [r5, #8]
 800145c:	b913      	cbnz	r3, 8001464 <_puts_r+0x1c>
 800145e:	4628      	mov	r0, r5
 8001460:	f000 fa4e 	bl	8001900 <__sinit>
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <_puts_r+0xd0>)
 8001466:	429c      	cmp	r4, r3
 8001468:	d120      	bne.n	80014ac <_puts_r+0x64>
 800146a:	686c      	ldr	r4, [r5, #4]
 800146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	d405      	bmi.n	800147e <_puts_r+0x36>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	0598      	lsls	r0, r3, #22
 8001476:	d402      	bmi.n	800147e <_puts_r+0x36>
 8001478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800147a:	f000 fadf 	bl	8001a3c <__retarget_lock_acquire_recursive>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	0719      	lsls	r1, r3, #28
 8001482:	d51d      	bpl.n	80014c0 <_puts_r+0x78>
 8001484:	6923      	ldr	r3, [r4, #16]
 8001486:	b1db      	cbz	r3, 80014c0 <_puts_r+0x78>
 8001488:	3e01      	subs	r6, #1
 800148a:	68a3      	ldr	r3, [r4, #8]
 800148c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001490:	3b01      	subs	r3, #1
 8001492:	60a3      	str	r3, [r4, #8]
 8001494:	bb39      	cbnz	r1, 80014e6 <_puts_r+0x9e>
 8001496:	2b00      	cmp	r3, #0
 8001498:	da38      	bge.n	800150c <_puts_r+0xc4>
 800149a:	4622      	mov	r2, r4
 800149c:	210a      	movs	r1, #10
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 f858 	bl	8001554 <__swbuf_r>
 80014a4:	3001      	adds	r0, #1
 80014a6:	d011      	beq.n	80014cc <_puts_r+0x84>
 80014a8:	250a      	movs	r5, #10
 80014aa:	e011      	b.n	80014d0 <_puts_r+0x88>
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <_puts_r+0xd4>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d101      	bne.n	80014b6 <_puts_r+0x6e>
 80014b2:	68ac      	ldr	r4, [r5, #8]
 80014b4:	e7da      	b.n	800146c <_puts_r+0x24>
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <_puts_r+0xd8>)
 80014b8:	429c      	cmp	r4, r3
 80014ba:	bf08      	it	eq
 80014bc:	68ec      	ldreq	r4, [r5, #12]
 80014be:	e7d5      	b.n	800146c <_puts_r+0x24>
 80014c0:	4621      	mov	r1, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f000 f898 	bl	80015f8 <__swsetup_r>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d0dd      	beq.n	8001488 <_puts_r+0x40>
 80014cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80014d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014d2:	07da      	lsls	r2, r3, #31
 80014d4:	d405      	bmi.n	80014e2 <_puts_r+0x9a>
 80014d6:	89a3      	ldrh	r3, [r4, #12]
 80014d8:	059b      	lsls	r3, r3, #22
 80014da:	d402      	bmi.n	80014e2 <_puts_r+0x9a>
 80014dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014de:	f000 faae 	bl	8001a3e <__retarget_lock_release_recursive>
 80014e2:	4628      	mov	r0, r5
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da04      	bge.n	80014f4 <_puts_r+0xac>
 80014ea:	69a2      	ldr	r2, [r4, #24]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dc06      	bgt.n	80014fe <_puts_r+0xb6>
 80014f0:	290a      	cmp	r1, #10
 80014f2:	d004      	beq.n	80014fe <_puts_r+0xb6>
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	6022      	str	r2, [r4, #0]
 80014fa:	7019      	strb	r1, [r3, #0]
 80014fc:	e7c5      	b.n	800148a <_puts_r+0x42>
 80014fe:	4622      	mov	r2, r4
 8001500:	4628      	mov	r0, r5
 8001502:	f000 f827 	bl	8001554 <__swbuf_r>
 8001506:	3001      	adds	r0, #1
 8001508:	d1bf      	bne.n	800148a <_puts_r+0x42>
 800150a:	e7df      	b.n	80014cc <_puts_r+0x84>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	250a      	movs	r5, #10
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	6022      	str	r2, [r4, #0]
 8001514:	701d      	strb	r5, [r3, #0]
 8001516:	e7db      	b.n	80014d0 <_puts_r+0x88>
 8001518:	080022ec 	.word	0x080022ec
 800151c:	0800230c 	.word	0x0800230c
 8001520:	080022cc 	.word	0x080022cc

08001524 <puts>:
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <puts+0xc>)
 8001526:	4601      	mov	r1, r0
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f7ff bf8d 	b.w	8001448 <_puts_r>
 800152e:	bf00      	nop
 8001530:	20000004 	.word	0x20000004

08001534 <_sbrk_r>:
 8001534:	b538      	push	{r3, r4, r5, lr}
 8001536:	4d06      	ldr	r5, [pc, #24]	; (8001550 <_sbrk_r+0x1c>)
 8001538:	2300      	movs	r3, #0
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	602b      	str	r3, [r5, #0]
 8001540:	f7ff fdf2 	bl	8001128 <_sbrk>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_sbrk_r+0x1a>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_sbrk_r+0x1a>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	200000d0 	.word	0x200000d0

08001554 <__swbuf_r>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	460e      	mov	r6, r1
 8001558:	4614      	mov	r4, r2
 800155a:	4605      	mov	r5, r0
 800155c:	b118      	cbz	r0, 8001566 <__swbuf_r+0x12>
 800155e:	6983      	ldr	r3, [r0, #24]
 8001560:	b90b      	cbnz	r3, 8001566 <__swbuf_r+0x12>
 8001562:	f000 f9cd 	bl	8001900 <__sinit>
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <__swbuf_r+0x98>)
 8001568:	429c      	cmp	r4, r3
 800156a:	d12b      	bne.n	80015c4 <__swbuf_r+0x70>
 800156c:	686c      	ldr	r4, [r5, #4]
 800156e:	69a3      	ldr	r3, [r4, #24]
 8001570:	60a3      	str	r3, [r4, #8]
 8001572:	89a3      	ldrh	r3, [r4, #12]
 8001574:	071a      	lsls	r2, r3, #28
 8001576:	d52f      	bpl.n	80015d8 <__swbuf_r+0x84>
 8001578:	6923      	ldr	r3, [r4, #16]
 800157a:	b36b      	cbz	r3, 80015d8 <__swbuf_r+0x84>
 800157c:	6923      	ldr	r3, [r4, #16]
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	1ac0      	subs	r0, r0, r3
 8001582:	6963      	ldr	r3, [r4, #20]
 8001584:	b2f6      	uxtb	r6, r6
 8001586:	4283      	cmp	r3, r0
 8001588:	4637      	mov	r7, r6
 800158a:	dc04      	bgt.n	8001596 <__swbuf_r+0x42>
 800158c:	4621      	mov	r1, r4
 800158e:	4628      	mov	r0, r5
 8001590:	f000 f922 	bl	80017d8 <_fflush_r>
 8001594:	bb30      	cbnz	r0, 80015e4 <__swbuf_r+0x90>
 8001596:	68a3      	ldr	r3, [r4, #8]
 8001598:	3b01      	subs	r3, #1
 800159a:	60a3      	str	r3, [r4, #8]
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	6022      	str	r2, [r4, #0]
 80015a2:	701e      	strb	r6, [r3, #0]
 80015a4:	6963      	ldr	r3, [r4, #20]
 80015a6:	3001      	adds	r0, #1
 80015a8:	4283      	cmp	r3, r0
 80015aa:	d004      	beq.n	80015b6 <__swbuf_r+0x62>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	07db      	lsls	r3, r3, #31
 80015b0:	d506      	bpl.n	80015c0 <__swbuf_r+0x6c>
 80015b2:	2e0a      	cmp	r6, #10
 80015b4:	d104      	bne.n	80015c0 <__swbuf_r+0x6c>
 80015b6:	4621      	mov	r1, r4
 80015b8:	4628      	mov	r0, r5
 80015ba:	f000 f90d 	bl	80017d8 <_fflush_r>
 80015be:	b988      	cbnz	r0, 80015e4 <__swbuf_r+0x90>
 80015c0:	4638      	mov	r0, r7
 80015c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <__swbuf_r+0x9c>)
 80015c6:	429c      	cmp	r4, r3
 80015c8:	d101      	bne.n	80015ce <__swbuf_r+0x7a>
 80015ca:	68ac      	ldr	r4, [r5, #8]
 80015cc:	e7cf      	b.n	800156e <__swbuf_r+0x1a>
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <__swbuf_r+0xa0>)
 80015d0:	429c      	cmp	r4, r3
 80015d2:	bf08      	it	eq
 80015d4:	68ec      	ldreq	r4, [r5, #12]
 80015d6:	e7ca      	b.n	800156e <__swbuf_r+0x1a>
 80015d8:	4621      	mov	r1, r4
 80015da:	4628      	mov	r0, r5
 80015dc:	f000 f80c 	bl	80015f8 <__swsetup_r>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d0cb      	beq.n	800157c <__swbuf_r+0x28>
 80015e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80015e8:	e7ea      	b.n	80015c0 <__swbuf_r+0x6c>
 80015ea:	bf00      	nop
 80015ec:	080022ec 	.word	0x080022ec
 80015f0:	0800230c 	.word	0x0800230c
 80015f4:	080022cc 	.word	0x080022cc

080015f8 <__swsetup_r>:
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <__swsetup_r+0xcc>)
 80015fa:	b570      	push	{r4, r5, r6, lr}
 80015fc:	681d      	ldr	r5, [r3, #0]
 80015fe:	4606      	mov	r6, r0
 8001600:	460c      	mov	r4, r1
 8001602:	b125      	cbz	r5, 800160e <__swsetup_r+0x16>
 8001604:	69ab      	ldr	r3, [r5, #24]
 8001606:	b913      	cbnz	r3, 800160e <__swsetup_r+0x16>
 8001608:	4628      	mov	r0, r5
 800160a:	f000 f979 	bl	8001900 <__sinit>
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <__swsetup_r+0xd0>)
 8001610:	429c      	cmp	r4, r3
 8001612:	d10f      	bne.n	8001634 <__swsetup_r+0x3c>
 8001614:	686c      	ldr	r4, [r5, #4]
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800161c:	0719      	lsls	r1, r3, #28
 800161e:	d42c      	bmi.n	800167a <__swsetup_r+0x82>
 8001620:	06dd      	lsls	r5, r3, #27
 8001622:	d411      	bmi.n	8001648 <__swsetup_r+0x50>
 8001624:	2309      	movs	r3, #9
 8001626:	6033      	str	r3, [r6, #0]
 8001628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800162c:	81a3      	strh	r3, [r4, #12]
 800162e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001632:	e03e      	b.n	80016b2 <__swsetup_r+0xba>
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <__swsetup_r+0xd4>)
 8001636:	429c      	cmp	r4, r3
 8001638:	d101      	bne.n	800163e <__swsetup_r+0x46>
 800163a:	68ac      	ldr	r4, [r5, #8]
 800163c:	e7eb      	b.n	8001616 <__swsetup_r+0x1e>
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <__swsetup_r+0xd8>)
 8001640:	429c      	cmp	r4, r3
 8001642:	bf08      	it	eq
 8001644:	68ec      	ldreq	r4, [r5, #12]
 8001646:	e7e6      	b.n	8001616 <__swsetup_r+0x1e>
 8001648:	0758      	lsls	r0, r3, #29
 800164a:	d512      	bpl.n	8001672 <__swsetup_r+0x7a>
 800164c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800164e:	b141      	cbz	r1, 8001662 <__swsetup_r+0x6a>
 8001650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001654:	4299      	cmp	r1, r3
 8001656:	d002      	beq.n	800165e <__swsetup_r+0x66>
 8001658:	4630      	mov	r0, r6
 800165a:	f7ff fdff 	bl	800125c <_free_r>
 800165e:	2300      	movs	r3, #0
 8001660:	6363      	str	r3, [r4, #52]	; 0x34
 8001662:	89a3      	ldrh	r3, [r4, #12]
 8001664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	6063      	str	r3, [r4, #4]
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	6023      	str	r3, [r4, #0]
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	6923      	ldr	r3, [r4, #16]
 800167c:	b94b      	cbnz	r3, 8001692 <__swsetup_r+0x9a>
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001688:	d003      	beq.n	8001692 <__swsetup_r+0x9a>
 800168a:	4621      	mov	r1, r4
 800168c:	4630      	mov	r0, r6
 800168e:	f000 f9fd 	bl	8001a8c <__smakebuf_r>
 8001692:	89a0      	ldrh	r0, [r4, #12]
 8001694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001698:	f010 0301 	ands.w	r3, r0, #1
 800169c:	d00a      	beq.n	80016b4 <__swsetup_r+0xbc>
 800169e:	2300      	movs	r3, #0
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	6963      	ldr	r3, [r4, #20]
 80016a4:	425b      	negs	r3, r3
 80016a6:	61a3      	str	r3, [r4, #24]
 80016a8:	6923      	ldr	r3, [r4, #16]
 80016aa:	b943      	cbnz	r3, 80016be <__swsetup_r+0xc6>
 80016ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016b0:	d1ba      	bne.n	8001628 <__swsetup_r+0x30>
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	0781      	lsls	r1, r0, #30
 80016b6:	bf58      	it	pl
 80016b8:	6963      	ldrpl	r3, [r4, #20]
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	e7f4      	b.n	80016a8 <__swsetup_r+0xb0>
 80016be:	2000      	movs	r0, #0
 80016c0:	e7f7      	b.n	80016b2 <__swsetup_r+0xba>
 80016c2:	bf00      	nop
 80016c4:	20000004 	.word	0x20000004
 80016c8:	080022ec 	.word	0x080022ec
 80016cc:	0800230c 	.word	0x0800230c
 80016d0:	080022cc 	.word	0x080022cc

080016d4 <__sflush_r>:
 80016d4:	898a      	ldrh	r2, [r1, #12]
 80016d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d8:	4605      	mov	r5, r0
 80016da:	0710      	lsls	r0, r2, #28
 80016dc:	460c      	mov	r4, r1
 80016de:	d457      	bmi.n	8001790 <__sflush_r+0xbc>
 80016e0:	684b      	ldr	r3, [r1, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dc04      	bgt.n	80016f0 <__sflush_r+0x1c>
 80016e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dc01      	bgt.n	80016f0 <__sflush_r+0x1c>
 80016ec:	2000      	movs	r0, #0
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016f2:	2e00      	cmp	r6, #0
 80016f4:	d0fa      	beq.n	80016ec <__sflush_r+0x18>
 80016f6:	2300      	movs	r3, #0
 80016f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016fc:	682f      	ldr	r7, [r5, #0]
 80016fe:	602b      	str	r3, [r5, #0]
 8001700:	d032      	beq.n	8001768 <__sflush_r+0x94>
 8001702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	075a      	lsls	r2, r3, #29
 8001708:	d505      	bpl.n	8001716 <__sflush_r+0x42>
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	1ac0      	subs	r0, r0, r3
 800170e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001710:	b10b      	cbz	r3, 8001716 <__sflush_r+0x42>
 8001712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001714:	1ac0      	subs	r0, r0, r3
 8001716:	2300      	movs	r3, #0
 8001718:	4602      	mov	r2, r0
 800171a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800171c:	6a21      	ldr	r1, [r4, #32]
 800171e:	4628      	mov	r0, r5
 8001720:	47b0      	blx	r6
 8001722:	1c43      	adds	r3, r0, #1
 8001724:	89a3      	ldrh	r3, [r4, #12]
 8001726:	d106      	bne.n	8001736 <__sflush_r+0x62>
 8001728:	6829      	ldr	r1, [r5, #0]
 800172a:	291d      	cmp	r1, #29
 800172c:	d82c      	bhi.n	8001788 <__sflush_r+0xb4>
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <__sflush_r+0x100>)
 8001730:	40ca      	lsrs	r2, r1
 8001732:	07d6      	lsls	r6, r2, #31
 8001734:	d528      	bpl.n	8001788 <__sflush_r+0xb4>
 8001736:	2200      	movs	r2, #0
 8001738:	6062      	str	r2, [r4, #4]
 800173a:	04d9      	lsls	r1, r3, #19
 800173c:	6922      	ldr	r2, [r4, #16]
 800173e:	6022      	str	r2, [r4, #0]
 8001740:	d504      	bpl.n	800174c <__sflush_r+0x78>
 8001742:	1c42      	adds	r2, r0, #1
 8001744:	d101      	bne.n	800174a <__sflush_r+0x76>
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	b903      	cbnz	r3, 800174c <__sflush_r+0x78>
 800174a:	6560      	str	r0, [r4, #84]	; 0x54
 800174c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800174e:	602f      	str	r7, [r5, #0]
 8001750:	2900      	cmp	r1, #0
 8001752:	d0cb      	beq.n	80016ec <__sflush_r+0x18>
 8001754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001758:	4299      	cmp	r1, r3
 800175a:	d002      	beq.n	8001762 <__sflush_r+0x8e>
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff fd7d 	bl	800125c <_free_r>
 8001762:	2000      	movs	r0, #0
 8001764:	6360      	str	r0, [r4, #52]	; 0x34
 8001766:	e7c2      	b.n	80016ee <__sflush_r+0x1a>
 8001768:	6a21      	ldr	r1, [r4, #32]
 800176a:	2301      	movs	r3, #1
 800176c:	4628      	mov	r0, r5
 800176e:	47b0      	blx	r6
 8001770:	1c41      	adds	r1, r0, #1
 8001772:	d1c7      	bne.n	8001704 <__sflush_r+0x30>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0c4      	beq.n	8001704 <__sflush_r+0x30>
 800177a:	2b1d      	cmp	r3, #29
 800177c:	d001      	beq.n	8001782 <__sflush_r+0xae>
 800177e:	2b16      	cmp	r3, #22
 8001780:	d101      	bne.n	8001786 <__sflush_r+0xb2>
 8001782:	602f      	str	r7, [r5, #0]
 8001784:	e7b2      	b.n	80016ec <__sflush_r+0x18>
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178c:	81a3      	strh	r3, [r4, #12]
 800178e:	e7ae      	b.n	80016ee <__sflush_r+0x1a>
 8001790:	690f      	ldr	r7, [r1, #16]
 8001792:	2f00      	cmp	r7, #0
 8001794:	d0aa      	beq.n	80016ec <__sflush_r+0x18>
 8001796:	0793      	lsls	r3, r2, #30
 8001798:	680e      	ldr	r6, [r1, #0]
 800179a:	bf08      	it	eq
 800179c:	694b      	ldreq	r3, [r1, #20]
 800179e:	600f      	str	r7, [r1, #0]
 80017a0:	bf18      	it	ne
 80017a2:	2300      	movne	r3, #0
 80017a4:	1bf6      	subs	r6, r6, r7
 80017a6:	608b      	str	r3, [r1, #8]
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	dd9f      	ble.n	80016ec <__sflush_r+0x18>
 80017ac:	6a21      	ldr	r1, [r4, #32]
 80017ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80017b2:	4633      	mov	r3, r6
 80017b4:	463a      	mov	r2, r7
 80017b6:	4628      	mov	r0, r5
 80017b8:	47e0      	blx	ip
 80017ba:	2800      	cmp	r0, #0
 80017bc:	dc06      	bgt.n	80017cc <__sflush_r+0xf8>
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	81a3      	strh	r3, [r4, #12]
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ca:	e790      	b.n	80016ee <__sflush_r+0x1a>
 80017cc:	4407      	add	r7, r0
 80017ce:	1a36      	subs	r6, r6, r0
 80017d0:	e7ea      	b.n	80017a8 <__sflush_r+0xd4>
 80017d2:	bf00      	nop
 80017d4:	20400001 	.word	0x20400001

080017d8 <_fflush_r>:
 80017d8:	b538      	push	{r3, r4, r5, lr}
 80017da:	690b      	ldr	r3, [r1, #16]
 80017dc:	4605      	mov	r5, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	b913      	cbnz	r3, 80017e8 <_fflush_r+0x10>
 80017e2:	2500      	movs	r5, #0
 80017e4:	4628      	mov	r0, r5
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	b118      	cbz	r0, 80017f2 <_fflush_r+0x1a>
 80017ea:	6983      	ldr	r3, [r0, #24]
 80017ec:	b90b      	cbnz	r3, 80017f2 <_fflush_r+0x1a>
 80017ee:	f000 f887 	bl	8001900 <__sinit>
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_fflush_r+0x6c>)
 80017f4:	429c      	cmp	r4, r3
 80017f6:	d11b      	bne.n	8001830 <_fflush_r+0x58>
 80017f8:	686c      	ldr	r4, [r5, #4]
 80017fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ef      	beq.n	80017e2 <_fflush_r+0xa>
 8001802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001804:	07d0      	lsls	r0, r2, #31
 8001806:	d404      	bmi.n	8001812 <_fflush_r+0x3a>
 8001808:	0599      	lsls	r1, r3, #22
 800180a:	d402      	bmi.n	8001812 <_fflush_r+0x3a>
 800180c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800180e:	f000 f915 	bl	8001a3c <__retarget_lock_acquire_recursive>
 8001812:	4628      	mov	r0, r5
 8001814:	4621      	mov	r1, r4
 8001816:	f7ff ff5d 	bl	80016d4 <__sflush_r>
 800181a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800181c:	07da      	lsls	r2, r3, #31
 800181e:	4605      	mov	r5, r0
 8001820:	d4e0      	bmi.n	80017e4 <_fflush_r+0xc>
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	059b      	lsls	r3, r3, #22
 8001826:	d4dd      	bmi.n	80017e4 <_fflush_r+0xc>
 8001828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800182a:	f000 f908 	bl	8001a3e <__retarget_lock_release_recursive>
 800182e:	e7d9      	b.n	80017e4 <_fflush_r+0xc>
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <_fflush_r+0x70>)
 8001832:	429c      	cmp	r4, r3
 8001834:	d101      	bne.n	800183a <_fflush_r+0x62>
 8001836:	68ac      	ldr	r4, [r5, #8]
 8001838:	e7df      	b.n	80017fa <_fflush_r+0x22>
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <_fflush_r+0x74>)
 800183c:	429c      	cmp	r4, r3
 800183e:	bf08      	it	eq
 8001840:	68ec      	ldreq	r4, [r5, #12]
 8001842:	e7da      	b.n	80017fa <_fflush_r+0x22>
 8001844:	080022ec 	.word	0x080022ec
 8001848:	0800230c 	.word	0x0800230c
 800184c:	080022cc 	.word	0x080022cc

08001850 <std>:
 8001850:	2300      	movs	r3, #0
 8001852:	b510      	push	{r4, lr}
 8001854:	4604      	mov	r4, r0
 8001856:	e9c0 3300 	strd	r3, r3, [r0]
 800185a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800185e:	6083      	str	r3, [r0, #8]
 8001860:	8181      	strh	r1, [r0, #12]
 8001862:	6643      	str	r3, [r0, #100]	; 0x64
 8001864:	81c2      	strh	r2, [r0, #14]
 8001866:	6183      	str	r3, [r0, #24]
 8001868:	4619      	mov	r1, r3
 800186a:	2208      	movs	r2, #8
 800186c:	305c      	adds	r0, #92	; 0x5c
 800186e:	f7ff fced 	bl	800124c <memset>
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <std+0x38>)
 8001874:	6263      	str	r3, [r4, #36]	; 0x24
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <std+0x3c>)
 8001878:	62a3      	str	r3, [r4, #40]	; 0x28
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <std+0x40>)
 800187c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <std+0x44>)
 8001880:	6224      	str	r4, [r4, #32]
 8001882:	6323      	str	r3, [r4, #48]	; 0x30
 8001884:	bd10      	pop	{r4, pc}
 8001886:	bf00      	nop
 8001888:	080020fd 	.word	0x080020fd
 800188c:	0800211f 	.word	0x0800211f
 8001890:	08002157 	.word	0x08002157
 8001894:	0800217b 	.word	0x0800217b

08001898 <_cleanup_r>:
 8001898:	4901      	ldr	r1, [pc, #4]	; (80018a0 <_cleanup_r+0x8>)
 800189a:	f000 b8af 	b.w	80019fc <_fwalk_reent>
 800189e:	bf00      	nop
 80018a0:	080017d9 	.word	0x080017d9

080018a4 <__sfmoreglue>:
 80018a4:	b570      	push	{r4, r5, r6, lr}
 80018a6:	2268      	movs	r2, #104	; 0x68
 80018a8:	1e4d      	subs	r5, r1, #1
 80018aa:	4355      	muls	r5, r2
 80018ac:	460e      	mov	r6, r1
 80018ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018b2:	f7ff fd3d 	bl	8001330 <_malloc_r>
 80018b6:	4604      	mov	r4, r0
 80018b8:	b140      	cbz	r0, 80018cc <__sfmoreglue+0x28>
 80018ba:	2100      	movs	r1, #0
 80018bc:	e9c0 1600 	strd	r1, r6, [r0]
 80018c0:	300c      	adds	r0, #12
 80018c2:	60a0      	str	r0, [r4, #8]
 80018c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018c8:	f7ff fcc0 	bl	800124c <memset>
 80018cc:	4620      	mov	r0, r4
 80018ce:	bd70      	pop	{r4, r5, r6, pc}

080018d0 <__sfp_lock_acquire>:
 80018d0:	4801      	ldr	r0, [pc, #4]	; (80018d8 <__sfp_lock_acquire+0x8>)
 80018d2:	f000 b8b3 	b.w	8001a3c <__retarget_lock_acquire_recursive>
 80018d6:	bf00      	nop
 80018d8:	200000cd 	.word	0x200000cd

080018dc <__sfp_lock_release>:
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <__sfp_lock_release+0x8>)
 80018de:	f000 b8ae 	b.w	8001a3e <__retarget_lock_release_recursive>
 80018e2:	bf00      	nop
 80018e4:	200000cd 	.word	0x200000cd

080018e8 <__sinit_lock_acquire>:
 80018e8:	4801      	ldr	r0, [pc, #4]	; (80018f0 <__sinit_lock_acquire+0x8>)
 80018ea:	f000 b8a7 	b.w	8001a3c <__retarget_lock_acquire_recursive>
 80018ee:	bf00      	nop
 80018f0:	200000ce 	.word	0x200000ce

080018f4 <__sinit_lock_release>:
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <__sinit_lock_release+0x8>)
 80018f6:	f000 b8a2 	b.w	8001a3e <__retarget_lock_release_recursive>
 80018fa:	bf00      	nop
 80018fc:	200000ce 	.word	0x200000ce

08001900 <__sinit>:
 8001900:	b510      	push	{r4, lr}
 8001902:	4604      	mov	r4, r0
 8001904:	f7ff fff0 	bl	80018e8 <__sinit_lock_acquire>
 8001908:	69a3      	ldr	r3, [r4, #24]
 800190a:	b11b      	cbz	r3, 8001914 <__sinit+0x14>
 800190c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001910:	f7ff bff0 	b.w	80018f4 <__sinit_lock_release>
 8001914:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001918:	6523      	str	r3, [r4, #80]	; 0x50
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <__sinit+0x68>)
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <__sinit+0x6c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	62a2      	str	r2, [r4, #40]	; 0x28
 8001922:	42a3      	cmp	r3, r4
 8001924:	bf04      	itt	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	61a3      	streq	r3, [r4, #24]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f820 	bl	8001970 <__sfp>
 8001930:	6060      	str	r0, [r4, #4]
 8001932:	4620      	mov	r0, r4
 8001934:	f000 f81c 	bl	8001970 <__sfp>
 8001938:	60a0      	str	r0, [r4, #8]
 800193a:	4620      	mov	r0, r4
 800193c:	f000 f818 	bl	8001970 <__sfp>
 8001940:	2200      	movs	r2, #0
 8001942:	60e0      	str	r0, [r4, #12]
 8001944:	2104      	movs	r1, #4
 8001946:	6860      	ldr	r0, [r4, #4]
 8001948:	f7ff ff82 	bl	8001850 <std>
 800194c:	68a0      	ldr	r0, [r4, #8]
 800194e:	2201      	movs	r2, #1
 8001950:	2109      	movs	r1, #9
 8001952:	f7ff ff7d 	bl	8001850 <std>
 8001956:	68e0      	ldr	r0, [r4, #12]
 8001958:	2202      	movs	r2, #2
 800195a:	2112      	movs	r1, #18
 800195c:	f7ff ff78 	bl	8001850 <std>
 8001960:	2301      	movs	r3, #1
 8001962:	61a3      	str	r3, [r4, #24]
 8001964:	e7d2      	b.n	800190c <__sinit+0xc>
 8001966:	bf00      	nop
 8001968:	080022c8 	.word	0x080022c8
 800196c:	08001899 	.word	0x08001899

08001970 <__sfp>:
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	4607      	mov	r7, r0
 8001974:	f7ff ffac 	bl	80018d0 <__sfp_lock_acquire>
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <__sfp+0x84>)
 800197a:	681e      	ldr	r6, [r3, #0]
 800197c:	69b3      	ldr	r3, [r6, #24]
 800197e:	b913      	cbnz	r3, 8001986 <__sfp+0x16>
 8001980:	4630      	mov	r0, r6
 8001982:	f7ff ffbd 	bl	8001900 <__sinit>
 8001986:	3648      	adds	r6, #72	; 0x48
 8001988:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800198c:	3b01      	subs	r3, #1
 800198e:	d503      	bpl.n	8001998 <__sfp+0x28>
 8001990:	6833      	ldr	r3, [r6, #0]
 8001992:	b30b      	cbz	r3, 80019d8 <__sfp+0x68>
 8001994:	6836      	ldr	r6, [r6, #0]
 8001996:	e7f7      	b.n	8001988 <__sfp+0x18>
 8001998:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800199c:	b9d5      	cbnz	r5, 80019d4 <__sfp+0x64>
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <__sfp+0x88>)
 80019a0:	60e3      	str	r3, [r4, #12]
 80019a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019a6:	6665      	str	r5, [r4, #100]	; 0x64
 80019a8:	f000 f847 	bl	8001a3a <__retarget_lock_init_recursive>
 80019ac:	f7ff ff96 	bl	80018dc <__sfp_lock_release>
 80019b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80019b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019b8:	6025      	str	r5, [r4, #0]
 80019ba:	61a5      	str	r5, [r4, #24]
 80019bc:	2208      	movs	r2, #8
 80019be:	4629      	mov	r1, r5
 80019c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019c4:	f7ff fc42 	bl	800124c <memset>
 80019c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019d0:	4620      	mov	r0, r4
 80019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d4:	3468      	adds	r4, #104	; 0x68
 80019d6:	e7d9      	b.n	800198c <__sfp+0x1c>
 80019d8:	2104      	movs	r1, #4
 80019da:	4638      	mov	r0, r7
 80019dc:	f7ff ff62 	bl	80018a4 <__sfmoreglue>
 80019e0:	4604      	mov	r4, r0
 80019e2:	6030      	str	r0, [r6, #0]
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1d5      	bne.n	8001994 <__sfp+0x24>
 80019e8:	f7ff ff78 	bl	80018dc <__sfp_lock_release>
 80019ec:	230c      	movs	r3, #12
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	e7ee      	b.n	80019d0 <__sfp+0x60>
 80019f2:	bf00      	nop
 80019f4:	080022c8 	.word	0x080022c8
 80019f8:	ffff0001 	.word	0xffff0001

080019fc <_fwalk_reent>:
 80019fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a00:	4606      	mov	r6, r0
 8001a02:	4688      	mov	r8, r1
 8001a04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a08:	2700      	movs	r7, #0
 8001a0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a0e:	f1b9 0901 	subs.w	r9, r9, #1
 8001a12:	d505      	bpl.n	8001a20 <_fwalk_reent+0x24>
 8001a14:	6824      	ldr	r4, [r4, #0]
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d1f7      	bne.n	8001a0a <_fwalk_reent+0xe>
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a20:	89ab      	ldrh	r3, [r5, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d907      	bls.n	8001a36 <_fwalk_reent+0x3a>
 8001a26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	d003      	beq.n	8001a36 <_fwalk_reent+0x3a>
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4630      	mov	r0, r6
 8001a32:	47c0      	blx	r8
 8001a34:	4307      	orrs	r7, r0
 8001a36:	3568      	adds	r5, #104	; 0x68
 8001a38:	e7e9      	b.n	8001a0e <_fwalk_reent+0x12>

08001a3a <__retarget_lock_init_recursive>:
 8001a3a:	4770      	bx	lr

08001a3c <__retarget_lock_acquire_recursive>:
 8001a3c:	4770      	bx	lr

08001a3e <__retarget_lock_release_recursive>:
 8001a3e:	4770      	bx	lr

08001a40 <__swhatbuf_r>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	460e      	mov	r6, r1
 8001a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	b096      	sub	sp, #88	; 0x58
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	da08      	bge.n	8001a64 <__swhatbuf_r+0x24>
 8001a52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	602a      	str	r2, [r5, #0]
 8001a5a:	061a      	lsls	r2, r3, #24
 8001a5c:	d410      	bmi.n	8001a80 <__swhatbuf_r+0x40>
 8001a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a62:	e00e      	b.n	8001a82 <__swhatbuf_r+0x42>
 8001a64:	466a      	mov	r2, sp
 8001a66:	f000 fbaf 	bl	80021c8 <_fstat_r>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	dbf1      	blt.n	8001a52 <__swhatbuf_r+0x12>
 8001a6e:	9a01      	ldr	r2, [sp, #4]
 8001a70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a78:	425a      	negs	r2, r3
 8001a7a:	415a      	adcs	r2, r3
 8001a7c:	602a      	str	r2, [r5, #0]
 8001a7e:	e7ee      	b.n	8001a5e <__swhatbuf_r+0x1e>
 8001a80:	2340      	movs	r3, #64	; 0x40
 8001a82:	2000      	movs	r0, #0
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	b016      	add	sp, #88	; 0x58
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a8c <__smakebuf_r>:
 8001a8c:	898b      	ldrh	r3, [r1, #12]
 8001a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a90:	079d      	lsls	r5, r3, #30
 8001a92:	4606      	mov	r6, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	d507      	bpl.n	8001aa8 <__smakebuf_r+0x1c>
 8001a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	6123      	str	r3, [r4, #16]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	6163      	str	r3, [r4, #20]
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	ab01      	add	r3, sp, #4
 8001aaa:	466a      	mov	r2, sp
 8001aac:	f7ff ffc8 	bl	8001a40 <__swhatbuf_r>
 8001ab0:	9900      	ldr	r1, [sp, #0]
 8001ab2:	4605      	mov	r5, r0
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f7ff fc3b 	bl	8001330 <_malloc_r>
 8001aba:	b948      	cbnz	r0, 8001ad0 <__smakebuf_r+0x44>
 8001abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac0:	059a      	lsls	r2, r3, #22
 8001ac2:	d4ef      	bmi.n	8001aa4 <__smakebuf_r+0x18>
 8001ac4:	f023 0303 	bic.w	r3, r3, #3
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	81a3      	strh	r3, [r4, #12]
 8001ace:	e7e3      	b.n	8001a98 <__smakebuf_r+0xc>
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <__smakebuf_r+0x7c>)
 8001ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	6020      	str	r0, [r4, #0]
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	9b00      	ldr	r3, [sp, #0]
 8001ae0:	6163      	str	r3, [r4, #20]
 8001ae2:	9b01      	ldr	r3, [sp, #4]
 8001ae4:	6120      	str	r0, [r4, #16]
 8001ae6:	b15b      	cbz	r3, 8001b00 <__smakebuf_r+0x74>
 8001ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aec:	4630      	mov	r0, r6
 8001aee:	f000 fb7d 	bl	80021ec <_isatty_r>
 8001af2:	b128      	cbz	r0, 8001b00 <__smakebuf_r+0x74>
 8001af4:	89a3      	ldrh	r3, [r4, #12]
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	81a3      	strh	r3, [r4, #12]
 8001b00:	89a0      	ldrh	r0, [r4, #12]
 8001b02:	4305      	orrs	r5, r0
 8001b04:	81a5      	strh	r5, [r4, #12]
 8001b06:	e7cd      	b.n	8001aa4 <__smakebuf_r+0x18>
 8001b08:	08001899 	.word	0x08001899

08001b0c <__malloc_lock>:
 8001b0c:	4801      	ldr	r0, [pc, #4]	; (8001b14 <__malloc_lock+0x8>)
 8001b0e:	f7ff bf95 	b.w	8001a3c <__retarget_lock_acquire_recursive>
 8001b12:	bf00      	nop
 8001b14:	200000cc 	.word	0x200000cc

08001b18 <__malloc_unlock>:
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <__malloc_unlock+0x8>)
 8001b1a:	f7ff bf90 	b.w	8001a3e <__retarget_lock_release_recursive>
 8001b1e:	bf00      	nop
 8001b20:	200000cc 	.word	0x200000cc

08001b24 <__sfputc_r>:
 8001b24:	6893      	ldr	r3, [r2, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	b410      	push	{r4}
 8001b2c:	6093      	str	r3, [r2, #8]
 8001b2e:	da07      	bge.n	8001b40 <__sfputc_r+0x1c>
 8001b30:	6994      	ldr	r4, [r2, #24]
 8001b32:	42a3      	cmp	r3, r4
 8001b34:	db01      	blt.n	8001b3a <__sfputc_r+0x16>
 8001b36:	290a      	cmp	r1, #10
 8001b38:	d102      	bne.n	8001b40 <__sfputc_r+0x1c>
 8001b3a:	bc10      	pop	{r4}
 8001b3c:	f7ff bd0a 	b.w	8001554 <__swbuf_r>
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	1c58      	adds	r0, r3, #1
 8001b44:	6010      	str	r0, [r2, #0]
 8001b46:	7019      	strb	r1, [r3, #0]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	bc10      	pop	{r4}
 8001b4c:	4770      	bx	lr

08001b4e <__sfputs_r>:
 8001b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b50:	4606      	mov	r6, r0
 8001b52:	460f      	mov	r7, r1
 8001b54:	4614      	mov	r4, r2
 8001b56:	18d5      	adds	r5, r2, r3
 8001b58:	42ac      	cmp	r4, r5
 8001b5a:	d101      	bne.n	8001b60 <__sfputs_r+0x12>
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e007      	b.n	8001b70 <__sfputs_r+0x22>
 8001b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b64:	463a      	mov	r2, r7
 8001b66:	4630      	mov	r0, r6
 8001b68:	f7ff ffdc 	bl	8001b24 <__sfputc_r>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d1f3      	bne.n	8001b58 <__sfputs_r+0xa>
 8001b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b74 <_vfiprintf_r>:
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b78:	460d      	mov	r5, r1
 8001b7a:	b09d      	sub	sp, #116	; 0x74
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	4698      	mov	r8, r3
 8001b80:	4606      	mov	r6, r0
 8001b82:	b118      	cbz	r0, 8001b8c <_vfiprintf_r+0x18>
 8001b84:	6983      	ldr	r3, [r0, #24]
 8001b86:	b90b      	cbnz	r3, 8001b8c <_vfiprintf_r+0x18>
 8001b88:	f7ff feba 	bl	8001900 <__sinit>
 8001b8c:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <_vfiprintf_r+0x240>)
 8001b8e:	429d      	cmp	r5, r3
 8001b90:	d11b      	bne.n	8001bca <_vfiprintf_r+0x56>
 8001b92:	6875      	ldr	r5, [r6, #4]
 8001b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b96:	07d9      	lsls	r1, r3, #31
 8001b98:	d405      	bmi.n	8001ba6 <_vfiprintf_r+0x32>
 8001b9a:	89ab      	ldrh	r3, [r5, #12]
 8001b9c:	059a      	lsls	r2, r3, #22
 8001b9e:	d402      	bmi.n	8001ba6 <_vfiprintf_r+0x32>
 8001ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ba2:	f7ff ff4b 	bl	8001a3c <__retarget_lock_acquire_recursive>
 8001ba6:	89ab      	ldrh	r3, [r5, #12]
 8001ba8:	071b      	lsls	r3, r3, #28
 8001baa:	d501      	bpl.n	8001bb0 <_vfiprintf_r+0x3c>
 8001bac:	692b      	ldr	r3, [r5, #16]
 8001bae:	b9eb      	cbnz	r3, 8001bec <_vfiprintf_r+0x78>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f7ff fd20 	bl	80015f8 <__swsetup_r>
 8001bb8:	b1c0      	cbz	r0, 8001bec <_vfiprintf_r+0x78>
 8001bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bbc:	07dc      	lsls	r4, r3, #31
 8001bbe:	d50e      	bpl.n	8001bde <_vfiprintf_r+0x6a>
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	b01d      	add	sp, #116	; 0x74
 8001bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <_vfiprintf_r+0x244>)
 8001bcc:	429d      	cmp	r5, r3
 8001bce:	d101      	bne.n	8001bd4 <_vfiprintf_r+0x60>
 8001bd0:	68b5      	ldr	r5, [r6, #8]
 8001bd2:	e7df      	b.n	8001b94 <_vfiprintf_r+0x20>
 8001bd4:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <_vfiprintf_r+0x248>)
 8001bd6:	429d      	cmp	r5, r3
 8001bd8:	bf08      	it	eq
 8001bda:	68f5      	ldreq	r5, [r6, #12]
 8001bdc:	e7da      	b.n	8001b94 <_vfiprintf_r+0x20>
 8001bde:	89ab      	ldrh	r3, [r5, #12]
 8001be0:	0598      	lsls	r0, r3, #22
 8001be2:	d4ed      	bmi.n	8001bc0 <_vfiprintf_r+0x4c>
 8001be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001be6:	f7ff ff2a 	bl	8001a3e <__retarget_lock_release_recursive>
 8001bea:	e7e9      	b.n	8001bc0 <_vfiprintf_r+0x4c>
 8001bec:	2300      	movs	r3, #0
 8001bee:	9309      	str	r3, [sp, #36]	; 0x24
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bfa:	2330      	movs	r3, #48	; 0x30
 8001bfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001dc0 <_vfiprintf_r+0x24c>
 8001c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c04:	f04f 0901 	mov.w	r9, #1
 8001c08:	4623      	mov	r3, r4
 8001c0a:	469a      	mov	sl, r3
 8001c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c10:	b10a      	cbz	r2, 8001c16 <_vfiprintf_r+0xa2>
 8001c12:	2a25      	cmp	r2, #37	; 0x25
 8001c14:	d1f9      	bne.n	8001c0a <_vfiprintf_r+0x96>
 8001c16:	ebba 0b04 	subs.w	fp, sl, r4
 8001c1a:	d00b      	beq.n	8001c34 <_vfiprintf_r+0xc0>
 8001c1c:	465b      	mov	r3, fp
 8001c1e:	4622      	mov	r2, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff ff93 	bl	8001b4e <__sfputs_r>
 8001c28:	3001      	adds	r0, #1
 8001c2a:	f000 80aa 	beq.w	8001d82 <_vfiprintf_r+0x20e>
 8001c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c30:	445a      	add	r2, fp
 8001c32:	9209      	str	r2, [sp, #36]	; 0x24
 8001c34:	f89a 3000 	ldrb.w	r3, [sl]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a2 	beq.w	8001d82 <_vfiprintf_r+0x20e>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c48:	f10a 0a01 	add.w	sl, sl, #1
 8001c4c:	9304      	str	r3, [sp, #16]
 8001c4e:	9307      	str	r3, [sp, #28]
 8001c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c54:	931a      	str	r3, [sp, #104]	; 0x68
 8001c56:	4654      	mov	r4, sl
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c5e:	4858      	ldr	r0, [pc, #352]	; (8001dc0 <_vfiprintf_r+0x24c>)
 8001c60:	f7fe fac6 	bl	80001f0 <memchr>
 8001c64:	9a04      	ldr	r2, [sp, #16]
 8001c66:	b9d8      	cbnz	r0, 8001ca0 <_vfiprintf_r+0x12c>
 8001c68:	06d1      	lsls	r1, r2, #27
 8001c6a:	bf44      	itt	mi
 8001c6c:	2320      	movmi	r3, #32
 8001c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c72:	0713      	lsls	r3, r2, #28
 8001c74:	bf44      	itt	mi
 8001c76:	232b      	movmi	r3, #43	; 0x2b
 8001c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001c80:	2b2a      	cmp	r3, #42	; 0x2a
 8001c82:	d015      	beq.n	8001cb0 <_vfiprintf_r+0x13c>
 8001c84:	9a07      	ldr	r2, [sp, #28]
 8001c86:	4654      	mov	r4, sl
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f04f 0c0a 	mov.w	ip, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c94:	3b30      	subs	r3, #48	; 0x30
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d94e      	bls.n	8001d38 <_vfiprintf_r+0x1c4>
 8001c9a:	b1b0      	cbz	r0, 8001cca <_vfiprintf_r+0x156>
 8001c9c:	9207      	str	r2, [sp, #28]
 8001c9e:	e014      	b.n	8001cca <_vfiprintf_r+0x156>
 8001ca0:	eba0 0308 	sub.w	r3, r0, r8
 8001ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	9304      	str	r3, [sp, #16]
 8001cac:	46a2      	mov	sl, r4
 8001cae:	e7d2      	b.n	8001c56 <_vfiprintf_r+0xe2>
 8001cb0:	9b03      	ldr	r3, [sp, #12]
 8001cb2:	1d19      	adds	r1, r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	9103      	str	r1, [sp, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bfbb      	ittet	lt
 8001cbc:	425b      	neglt	r3, r3
 8001cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8001cc2:	9307      	strge	r3, [sp, #28]
 8001cc4:	9307      	strlt	r3, [sp, #28]
 8001cc6:	bfb8      	it	lt
 8001cc8:	9204      	strlt	r2, [sp, #16]
 8001cca:	7823      	ldrb	r3, [r4, #0]
 8001ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8001cce:	d10c      	bne.n	8001cea <_vfiprintf_r+0x176>
 8001cd0:	7863      	ldrb	r3, [r4, #1]
 8001cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cd4:	d135      	bne.n	8001d42 <_vfiprintf_r+0x1ce>
 8001cd6:	9b03      	ldr	r3, [sp, #12]
 8001cd8:	1d1a      	adds	r2, r3, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	9203      	str	r2, [sp, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bfb8      	it	lt
 8001ce2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001ce6:	3402      	adds	r4, #2
 8001ce8:	9305      	str	r3, [sp, #20]
 8001cea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001dc4 <_vfiprintf_r+0x250>
 8001cee:	7821      	ldrb	r1, [r4, #0]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	f7fe fa7c 	bl	80001f0 <memchr>
 8001cf8:	b140      	cbz	r0, 8001d0c <_vfiprintf_r+0x198>
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	eba0 000a 	sub.w	r0, r0, sl
 8001d00:	fa03 f000 	lsl.w	r0, r3, r0
 8001d04:	9b04      	ldr	r3, [sp, #16]
 8001d06:	4303      	orrs	r3, r0
 8001d08:	3401      	adds	r4, #1
 8001d0a:	9304      	str	r3, [sp, #16]
 8001d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d10:	482d      	ldr	r0, [pc, #180]	; (8001dc8 <_vfiprintf_r+0x254>)
 8001d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d16:	2206      	movs	r2, #6
 8001d18:	f7fe fa6a 	bl	80001f0 <memchr>
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d03f      	beq.n	8001da0 <_vfiprintf_r+0x22c>
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <_vfiprintf_r+0x258>)
 8001d22:	bb1b      	cbnz	r3, 8001d6c <_vfiprintf_r+0x1f8>
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	3307      	adds	r3, #7
 8001d28:	f023 0307 	bic.w	r3, r3, #7
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d32:	443b      	add	r3, r7
 8001d34:	9309      	str	r3, [sp, #36]	; 0x24
 8001d36:	e767      	b.n	8001c08 <_vfiprintf_r+0x94>
 8001d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e7a5      	b.n	8001c8e <_vfiprintf_r+0x11a>
 8001d42:	2300      	movs	r3, #0
 8001d44:	3401      	adds	r4, #1
 8001d46:	9305      	str	r3, [sp, #20]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 0c0a 	mov.w	ip, #10
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d54:	3a30      	subs	r2, #48	; 0x30
 8001d56:	2a09      	cmp	r2, #9
 8001d58:	d903      	bls.n	8001d62 <_vfiprintf_r+0x1ee>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0c5      	beq.n	8001cea <_vfiprintf_r+0x176>
 8001d5e:	9105      	str	r1, [sp, #20]
 8001d60:	e7c3      	b.n	8001cea <_vfiprintf_r+0x176>
 8001d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d66:	4604      	mov	r4, r0
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e7f0      	b.n	8001d4e <_vfiprintf_r+0x1da>
 8001d6c:	ab03      	add	r3, sp, #12
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	462a      	mov	r2, r5
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <_vfiprintf_r+0x25c>)
 8001d74:	a904      	add	r1, sp, #16
 8001d76:	4630      	mov	r0, r6
 8001d78:	f3af 8000 	nop.w
 8001d7c:	4607      	mov	r7, r0
 8001d7e:	1c78      	adds	r0, r7, #1
 8001d80:	d1d6      	bne.n	8001d30 <_vfiprintf_r+0x1bc>
 8001d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d84:	07d9      	lsls	r1, r3, #31
 8001d86:	d405      	bmi.n	8001d94 <_vfiprintf_r+0x220>
 8001d88:	89ab      	ldrh	r3, [r5, #12]
 8001d8a:	059a      	lsls	r2, r3, #22
 8001d8c:	d402      	bmi.n	8001d94 <_vfiprintf_r+0x220>
 8001d8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d90:	f7ff fe55 	bl	8001a3e <__retarget_lock_release_recursive>
 8001d94:	89ab      	ldrh	r3, [r5, #12]
 8001d96:	065b      	lsls	r3, r3, #25
 8001d98:	f53f af12 	bmi.w	8001bc0 <_vfiprintf_r+0x4c>
 8001d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d9e:	e711      	b.n	8001bc4 <_vfiprintf_r+0x50>
 8001da0:	ab03      	add	r3, sp, #12
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	462a      	mov	r2, r5
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <_vfiprintf_r+0x25c>)
 8001da8:	a904      	add	r1, sp, #16
 8001daa:	4630      	mov	r0, r6
 8001dac:	f000 f880 	bl	8001eb0 <_printf_i>
 8001db0:	e7e4      	b.n	8001d7c <_vfiprintf_r+0x208>
 8001db2:	bf00      	nop
 8001db4:	080022ec 	.word	0x080022ec
 8001db8:	0800230c 	.word	0x0800230c
 8001dbc:	080022cc 	.word	0x080022cc
 8001dc0:	0800232c 	.word	0x0800232c
 8001dc4:	08002332 	.word	0x08002332
 8001dc8:	08002336 	.word	0x08002336
 8001dcc:	00000000 	.word	0x00000000
 8001dd0:	08001b4f 	.word	0x08001b4f

08001dd4 <_printf_common>:
 8001dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd8:	4616      	mov	r6, r2
 8001dda:	4699      	mov	r9, r3
 8001ddc:	688a      	ldr	r2, [r1, #8]
 8001dde:	690b      	ldr	r3, [r1, #16]
 8001de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bfb8      	it	lt
 8001de8:	4613      	movlt	r3, r2
 8001dea:	6033      	str	r3, [r6, #0]
 8001dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001df0:	4607      	mov	r7, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	b10a      	cbz	r2, 8001dfa <_printf_common+0x26>
 8001df6:	3301      	adds	r3, #1
 8001df8:	6033      	str	r3, [r6, #0]
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	0699      	lsls	r1, r3, #26
 8001dfe:	bf42      	ittt	mi
 8001e00:	6833      	ldrmi	r3, [r6, #0]
 8001e02:	3302      	addmi	r3, #2
 8001e04:	6033      	strmi	r3, [r6, #0]
 8001e06:	6825      	ldr	r5, [r4, #0]
 8001e08:	f015 0506 	ands.w	r5, r5, #6
 8001e0c:	d106      	bne.n	8001e1c <_printf_common+0x48>
 8001e0e:	f104 0a19 	add.w	sl, r4, #25
 8001e12:	68e3      	ldr	r3, [r4, #12]
 8001e14:	6832      	ldr	r2, [r6, #0]
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	42ab      	cmp	r3, r5
 8001e1a:	dc26      	bgt.n	8001e6a <_printf_common+0x96>
 8001e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e20:	1e13      	subs	r3, r2, #0
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	bf18      	it	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	0692      	lsls	r2, r2, #26
 8001e2a:	d42b      	bmi.n	8001e84 <_printf_common+0xb0>
 8001e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e30:	4649      	mov	r1, r9
 8001e32:	4638      	mov	r0, r7
 8001e34:	47c0      	blx	r8
 8001e36:	3001      	adds	r0, #1
 8001e38:	d01e      	beq.n	8001e78 <_printf_common+0xa4>
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	68e5      	ldr	r5, [r4, #12]
 8001e3e:	6832      	ldr	r2, [r6, #0]
 8001e40:	f003 0306 	and.w	r3, r3, #6
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	bf08      	it	eq
 8001e48:	1aad      	subeq	r5, r5, r2
 8001e4a:	68a3      	ldr	r3, [r4, #8]
 8001e4c:	6922      	ldr	r2, [r4, #16]
 8001e4e:	bf0c      	ite	eq
 8001e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e54:	2500      	movne	r5, #0
 8001e56:	4293      	cmp	r3, r2
 8001e58:	bfc4      	itt	gt
 8001e5a:	1a9b      	subgt	r3, r3, r2
 8001e5c:	18ed      	addgt	r5, r5, r3
 8001e5e:	2600      	movs	r6, #0
 8001e60:	341a      	adds	r4, #26
 8001e62:	42b5      	cmp	r5, r6
 8001e64:	d11a      	bne.n	8001e9c <_printf_common+0xc8>
 8001e66:	2000      	movs	r0, #0
 8001e68:	e008      	b.n	8001e7c <_printf_common+0xa8>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	4652      	mov	r2, sl
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4638      	mov	r0, r7
 8001e72:	47c0      	blx	r8
 8001e74:	3001      	adds	r0, #1
 8001e76:	d103      	bne.n	8001e80 <_printf_common+0xac>
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e80:	3501      	adds	r5, #1
 8001e82:	e7c6      	b.n	8001e12 <_printf_common+0x3e>
 8001e84:	18e1      	adds	r1, r4, r3
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	2030      	movs	r0, #48	; 0x30
 8001e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e8e:	4422      	add	r2, r4
 8001e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e98:	3302      	adds	r3, #2
 8001e9a:	e7c7      	b.n	8001e2c <_printf_common+0x58>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	4638      	mov	r0, r7
 8001ea4:	47c0      	blx	r8
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d0e6      	beq.n	8001e78 <_printf_common+0xa4>
 8001eaa:	3601      	adds	r6, #1
 8001eac:	e7d9      	b.n	8001e62 <_printf_common+0x8e>
	...

08001eb0 <_printf_i>:
 8001eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	7e0f      	ldrb	r7, [r1, #24]
 8001eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001eb8:	2f78      	cmp	r7, #120	; 0x78
 8001eba:	4691      	mov	r9, r2
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	469a      	mov	sl, r3
 8001ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ec6:	d807      	bhi.n	8001ed8 <_printf_i+0x28>
 8001ec8:	2f62      	cmp	r7, #98	; 0x62
 8001eca:	d80a      	bhi.n	8001ee2 <_printf_i+0x32>
 8001ecc:	2f00      	cmp	r7, #0
 8001ece:	f000 80d8 	beq.w	8002082 <_printf_i+0x1d2>
 8001ed2:	2f58      	cmp	r7, #88	; 0x58
 8001ed4:	f000 80a3 	beq.w	800201e <_printf_i+0x16e>
 8001ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ee0:	e03a      	b.n	8001f58 <_printf_i+0xa8>
 8001ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ee6:	2b15      	cmp	r3, #21
 8001ee8:	d8f6      	bhi.n	8001ed8 <_printf_i+0x28>
 8001eea:	a101      	add	r1, pc, #4	; (adr r1, 8001ef0 <_printf_i+0x40>)
 8001eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ef0:	08001f49 	.word	0x08001f49
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	08001ed9 	.word	0x08001ed9
 8001efc:	08001ed9 	.word	0x08001ed9
 8001f00:	08001ed9 	.word	0x08001ed9
 8001f04:	08001ed9 	.word	0x08001ed9
 8001f08:	08001f5d 	.word	0x08001f5d
 8001f0c:	08001ed9 	.word	0x08001ed9
 8001f10:	08001ed9 	.word	0x08001ed9
 8001f14:	08001ed9 	.word	0x08001ed9
 8001f18:	08001ed9 	.word	0x08001ed9
 8001f1c:	08002069 	.word	0x08002069
 8001f20:	08001f8d 	.word	0x08001f8d
 8001f24:	0800204b 	.word	0x0800204b
 8001f28:	08001ed9 	.word	0x08001ed9
 8001f2c:	08001ed9 	.word	0x08001ed9
 8001f30:	0800208b 	.word	0x0800208b
 8001f34:	08001ed9 	.word	0x08001ed9
 8001f38:	08001f8d 	.word	0x08001f8d
 8001f3c:	08001ed9 	.word	0x08001ed9
 8001f40:	08001ed9 	.word	0x08001ed9
 8001f44:	08002053 	.word	0x08002053
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	1d1a      	adds	r2, r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	602a      	str	r2, [r5, #0]
 8001f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0a3      	b.n	80020a4 <_printf_i+0x1f4>
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	6829      	ldr	r1, [r5, #0]
 8001f60:	0606      	lsls	r6, r0, #24
 8001f62:	f101 0304 	add.w	r3, r1, #4
 8001f66:	d50a      	bpl.n	8001f7e <_printf_i+0xce>
 8001f68:	680e      	ldr	r6, [r1, #0]
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	2e00      	cmp	r6, #0
 8001f6e:	da03      	bge.n	8001f78 <_printf_i+0xc8>
 8001f70:	232d      	movs	r3, #45	; 0x2d
 8001f72:	4276      	negs	r6, r6
 8001f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f78:	485e      	ldr	r0, [pc, #376]	; (80020f4 <_printf_i+0x244>)
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	e019      	b.n	8001fb2 <_printf_i+0x102>
 8001f7e:	680e      	ldr	r6, [r1, #0]
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f86:	bf18      	it	ne
 8001f88:	b236      	sxthne	r6, r6
 8001f8a:	e7ef      	b.n	8001f6c <_printf_i+0xbc>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	6820      	ldr	r0, [r4, #0]
 8001f90:	1d19      	adds	r1, r3, #4
 8001f92:	6029      	str	r1, [r5, #0]
 8001f94:	0601      	lsls	r1, r0, #24
 8001f96:	d501      	bpl.n	8001f9c <_printf_i+0xec>
 8001f98:	681e      	ldr	r6, [r3, #0]
 8001f9a:	e002      	b.n	8001fa2 <_printf_i+0xf2>
 8001f9c:	0646      	lsls	r6, r0, #25
 8001f9e:	d5fb      	bpl.n	8001f98 <_printf_i+0xe8>
 8001fa0:	881e      	ldrh	r6, [r3, #0]
 8001fa2:	4854      	ldr	r0, [pc, #336]	; (80020f4 <_printf_i+0x244>)
 8001fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2308      	moveq	r3, #8
 8001faa:	230a      	movne	r3, #10
 8001fac:	2100      	movs	r1, #0
 8001fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fb2:	6865      	ldr	r5, [r4, #4]
 8001fb4:	60a5      	str	r5, [r4, #8]
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	bfa2      	ittt	ge
 8001fba:	6821      	ldrge	r1, [r4, #0]
 8001fbc:	f021 0104 	bicge.w	r1, r1, #4
 8001fc0:	6021      	strge	r1, [r4, #0]
 8001fc2:	b90e      	cbnz	r6, 8001fc8 <_printf_i+0x118>
 8001fc4:	2d00      	cmp	r5, #0
 8001fc6:	d04d      	beq.n	8002064 <_printf_i+0x1b4>
 8001fc8:	4615      	mov	r5, r2
 8001fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8001fce:	fb03 6711 	mls	r7, r3, r1, r6
 8001fd2:	5dc7      	ldrb	r7, [r0, r7]
 8001fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001fd8:	4637      	mov	r7, r6
 8001fda:	42bb      	cmp	r3, r7
 8001fdc:	460e      	mov	r6, r1
 8001fde:	d9f4      	bls.n	8001fca <_printf_i+0x11a>
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d10b      	bne.n	8001ffc <_printf_i+0x14c>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	07de      	lsls	r6, r3, #31
 8001fe8:	d508      	bpl.n	8001ffc <_printf_i+0x14c>
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	6861      	ldr	r1, [r4, #4]
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	bfde      	ittt	le
 8001ff2:	2330      	movle	r3, #48	; 0x30
 8001ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ff8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ffc:	1b52      	subs	r2, r2, r5
 8001ffe:	6122      	str	r2, [r4, #16]
 8002000:	f8cd a000 	str.w	sl, [sp]
 8002004:	464b      	mov	r3, r9
 8002006:	aa03      	add	r2, sp, #12
 8002008:	4621      	mov	r1, r4
 800200a:	4640      	mov	r0, r8
 800200c:	f7ff fee2 	bl	8001dd4 <_printf_common>
 8002010:	3001      	adds	r0, #1
 8002012:	d14c      	bne.n	80020ae <_printf_i+0x1fe>
 8002014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002018:	b004      	add	sp, #16
 800201a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800201e:	4835      	ldr	r0, [pc, #212]	; (80020f4 <_printf_i+0x244>)
 8002020:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002024:	6829      	ldr	r1, [r5, #0]
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	f851 6b04 	ldr.w	r6, [r1], #4
 800202c:	6029      	str	r1, [r5, #0]
 800202e:	061d      	lsls	r5, r3, #24
 8002030:	d514      	bpl.n	800205c <_printf_i+0x1ac>
 8002032:	07df      	lsls	r7, r3, #31
 8002034:	bf44      	itt	mi
 8002036:	f043 0320 	orrmi.w	r3, r3, #32
 800203a:	6023      	strmi	r3, [r4, #0]
 800203c:	b91e      	cbnz	r6, 8002046 <_printf_i+0x196>
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f023 0320 	bic.w	r3, r3, #32
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	2310      	movs	r3, #16
 8002048:	e7b0      	b.n	8001fac <_printf_i+0xfc>
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	2378      	movs	r3, #120	; 0x78
 8002054:	4828      	ldr	r0, [pc, #160]	; (80020f8 <_printf_i+0x248>)
 8002056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800205a:	e7e3      	b.n	8002024 <_printf_i+0x174>
 800205c:	0659      	lsls	r1, r3, #25
 800205e:	bf48      	it	mi
 8002060:	b2b6      	uxthmi	r6, r6
 8002062:	e7e6      	b.n	8002032 <_printf_i+0x182>
 8002064:	4615      	mov	r5, r2
 8002066:	e7bb      	b.n	8001fe0 <_printf_i+0x130>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	6826      	ldr	r6, [r4, #0]
 800206c:	6961      	ldr	r1, [r4, #20]
 800206e:	1d18      	adds	r0, r3, #4
 8002070:	6028      	str	r0, [r5, #0]
 8002072:	0635      	lsls	r5, r6, #24
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	d501      	bpl.n	800207c <_printf_i+0x1cc>
 8002078:	6019      	str	r1, [r3, #0]
 800207a:	e002      	b.n	8002082 <_printf_i+0x1d2>
 800207c:	0670      	lsls	r0, r6, #25
 800207e:	d5fb      	bpl.n	8002078 <_printf_i+0x1c8>
 8002080:	8019      	strh	r1, [r3, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	6123      	str	r3, [r4, #16]
 8002086:	4615      	mov	r5, r2
 8002088:	e7ba      	b.n	8002000 <_printf_i+0x150>
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	602a      	str	r2, [r5, #0]
 8002090:	681d      	ldr	r5, [r3, #0]
 8002092:	6862      	ldr	r2, [r4, #4]
 8002094:	2100      	movs	r1, #0
 8002096:	4628      	mov	r0, r5
 8002098:	f7fe f8aa 	bl	80001f0 <memchr>
 800209c:	b108      	cbz	r0, 80020a2 <_printf_i+0x1f2>
 800209e:	1b40      	subs	r0, r0, r5
 80020a0:	6060      	str	r0, [r4, #4]
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	6123      	str	r3, [r4, #16]
 80020a6:	2300      	movs	r3, #0
 80020a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ac:	e7a8      	b.n	8002000 <_printf_i+0x150>
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	462a      	mov	r2, r5
 80020b2:	4649      	mov	r1, r9
 80020b4:	4640      	mov	r0, r8
 80020b6:	47d0      	blx	sl
 80020b8:	3001      	adds	r0, #1
 80020ba:	d0ab      	beq.n	8002014 <_printf_i+0x164>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	079b      	lsls	r3, r3, #30
 80020c0:	d413      	bmi.n	80020ea <_printf_i+0x23a>
 80020c2:	68e0      	ldr	r0, [r4, #12]
 80020c4:	9b03      	ldr	r3, [sp, #12]
 80020c6:	4298      	cmp	r0, r3
 80020c8:	bfb8      	it	lt
 80020ca:	4618      	movlt	r0, r3
 80020cc:	e7a4      	b.n	8002018 <_printf_i+0x168>
 80020ce:	2301      	movs	r3, #1
 80020d0:	4632      	mov	r2, r6
 80020d2:	4649      	mov	r1, r9
 80020d4:	4640      	mov	r0, r8
 80020d6:	47d0      	blx	sl
 80020d8:	3001      	adds	r0, #1
 80020da:	d09b      	beq.n	8002014 <_printf_i+0x164>
 80020dc:	3501      	adds	r5, #1
 80020de:	68e3      	ldr	r3, [r4, #12]
 80020e0:	9903      	ldr	r1, [sp, #12]
 80020e2:	1a5b      	subs	r3, r3, r1
 80020e4:	42ab      	cmp	r3, r5
 80020e6:	dcf2      	bgt.n	80020ce <_printf_i+0x21e>
 80020e8:	e7eb      	b.n	80020c2 <_printf_i+0x212>
 80020ea:	2500      	movs	r5, #0
 80020ec:	f104 0619 	add.w	r6, r4, #25
 80020f0:	e7f5      	b.n	80020de <_printf_i+0x22e>
 80020f2:	bf00      	nop
 80020f4:	0800233d 	.word	0x0800233d
 80020f8:	0800234e 	.word	0x0800234e

080020fc <__sread>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	460c      	mov	r4, r1
 8002100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002104:	f000 f894 	bl	8002230 <_read_r>
 8002108:	2800      	cmp	r0, #0
 800210a:	bfab      	itete	ge
 800210c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800210e:	89a3      	ldrhlt	r3, [r4, #12]
 8002110:	181b      	addge	r3, r3, r0
 8002112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002116:	bfac      	ite	ge
 8002118:	6563      	strge	r3, [r4, #84]	; 0x54
 800211a:	81a3      	strhlt	r3, [r4, #12]
 800211c:	bd10      	pop	{r4, pc}

0800211e <__swrite>:
 800211e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002122:	461f      	mov	r7, r3
 8002124:	898b      	ldrh	r3, [r1, #12]
 8002126:	05db      	lsls	r3, r3, #23
 8002128:	4605      	mov	r5, r0
 800212a:	460c      	mov	r4, r1
 800212c:	4616      	mov	r6, r2
 800212e:	d505      	bpl.n	800213c <__swrite+0x1e>
 8002130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002134:	2302      	movs	r3, #2
 8002136:	2200      	movs	r2, #0
 8002138:	f000 f868 	bl	800220c <_lseek_r>
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002146:	81a3      	strh	r3, [r4, #12]
 8002148:	4632      	mov	r2, r6
 800214a:	463b      	mov	r3, r7
 800214c:	4628      	mov	r0, r5
 800214e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002152:	f000 b817 	b.w	8002184 <_write_r>

08002156 <__sseek>:
 8002156:	b510      	push	{r4, lr}
 8002158:	460c      	mov	r4, r1
 800215a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800215e:	f000 f855 	bl	800220c <_lseek_r>
 8002162:	1c43      	adds	r3, r0, #1
 8002164:	89a3      	ldrh	r3, [r4, #12]
 8002166:	bf15      	itete	ne
 8002168:	6560      	strne	r0, [r4, #84]	; 0x54
 800216a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800216e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002172:	81a3      	strheq	r3, [r4, #12]
 8002174:	bf18      	it	ne
 8002176:	81a3      	strhne	r3, [r4, #12]
 8002178:	bd10      	pop	{r4, pc}

0800217a <__sclose>:
 800217a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800217e:	f000 b813 	b.w	80021a8 <_close_r>
	...

08002184 <_write_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d07      	ldr	r5, [pc, #28]	; (80021a4 <_write_r+0x20>)
 8002188:	4604      	mov	r4, r0
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
 800218e:	2200      	movs	r2, #0
 8002190:	602a      	str	r2, [r5, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f7fe ff7b 	bl	800108e <_write>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_write_r+0x1e>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_write_r+0x1e>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	200000d0 	.word	0x200000d0

080021a8 <_close_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4d06      	ldr	r5, [pc, #24]	; (80021c4 <_close_r+0x1c>)
 80021ac:	2300      	movs	r3, #0
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	602b      	str	r3, [r5, #0]
 80021b4:	f7fe ff87 	bl	80010c6 <_close>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d102      	bne.n	80021c2 <_close_r+0x1a>
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	b103      	cbz	r3, 80021c2 <_close_r+0x1a>
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	200000d0 	.word	0x200000d0

080021c8 <_fstat_r>:
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4d07      	ldr	r5, [pc, #28]	; (80021e8 <_fstat_r+0x20>)
 80021cc:	2300      	movs	r3, #0
 80021ce:	4604      	mov	r4, r0
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	f7fe ff81 	bl	80010dc <_fstat>
 80021da:	1c43      	adds	r3, r0, #1
 80021dc:	d102      	bne.n	80021e4 <_fstat_r+0x1c>
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	b103      	cbz	r3, 80021e4 <_fstat_r+0x1c>
 80021e2:	6023      	str	r3, [r4, #0]
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	200000d0 	.word	0x200000d0

080021ec <_isatty_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4d06      	ldr	r5, [pc, #24]	; (8002208 <_isatty_r+0x1c>)
 80021f0:	2300      	movs	r3, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	602b      	str	r3, [r5, #0]
 80021f8:	f7fe ff7f 	bl	80010fa <_isatty>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d102      	bne.n	8002206 <_isatty_r+0x1a>
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	b103      	cbz	r3, 8002206 <_isatty_r+0x1a>
 8002204:	6023      	str	r3, [r4, #0]
 8002206:	bd38      	pop	{r3, r4, r5, pc}
 8002208:	200000d0 	.word	0x200000d0

0800220c <_lseek_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4d07      	ldr	r5, [pc, #28]	; (800222c <_lseek_r+0x20>)
 8002210:	4604      	mov	r4, r0
 8002212:	4608      	mov	r0, r1
 8002214:	4611      	mov	r1, r2
 8002216:	2200      	movs	r2, #0
 8002218:	602a      	str	r2, [r5, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f7fe ff77 	bl	800110e <_lseek>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_lseek_r+0x1e>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	b103      	cbz	r3, 800222a <_lseek_r+0x1e>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	200000d0 	.word	0x200000d0

08002230 <_read_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d07      	ldr	r5, [pc, #28]	; (8002250 <_read_r+0x20>)
 8002234:	4604      	mov	r4, r0
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	2200      	movs	r2, #0
 800223c:	602a      	str	r2, [r5, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f7fe ff08 	bl	8001054 <_read>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_read_r+0x1e>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_read_r+0x1e>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	200000d0 	.word	0x200000d0

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
