
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800313c  0800313c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800313c  0800313c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800313c  0800313c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000000a0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000047ec  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010cd  00000000  00000000  00024882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00025950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000458  00000000  00000000  00025e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d20  00000000  00000000  000262d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000067d0  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000fce5  00000000  00000000  0002f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003f4ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b3c  00000000  00000000  0003f500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003068 	.word	0x08003068

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003068 	.word	0x08003068

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000088 	.word	0x20000088

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fe6d 	bl	8001fb0 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 faa2 	bl	8001830 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f9bb 	bl	8000668 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fbf9 	bl	8000aea <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000088 	.word	0x20000088
 8000300:	2000008c 	.word	0x2000008c

08000304 <configure_spi>:

void configure_spi(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800030a:	4825      	ldr	r0, [pc, #148]	; (80003a0 <configure_spi+0x9c>)
 800030c:	f001 fa90 	bl	8001830 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000310:	2202      	movs	r2, #2
 8000312:	210f      	movs	r1, #15
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <configure_spi+0x9c>)
 8000316:	f000 fbf9 	bl	8000b0c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800031a:	2202      	movs	r2, #2
 800031c:	210e      	movs	r1, #14
 800031e:	4820      	ldr	r0, [pc, #128]	; (80003a0 <configure_spi+0x9c>)
 8000320:	f000 fbf4 	bl	8000b0c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 8000324:	2202      	movs	r2, #2
 8000326:	210d      	movs	r1, #13
 8000328:	481d      	ldr	r0, [pc, #116]	; (80003a0 <configure_spi+0x9c>)
 800032a:	f000 fbef 	bl	8000b0c <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 800032e:	2202      	movs	r2, #2
 8000330:	210c      	movs	r1, #12
 8000332:	481b      	ldr	r0, [pc, #108]	; (80003a0 <configure_spi+0x9c>)
 8000334:	f000 fbea 	bl	8000b0c <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 8000338:	2205      	movs	r2, #5
 800033a:	210f      	movs	r1, #15
 800033c:	4818      	ldr	r0, [pc, #96]	; (80003a0 <configure_spi+0x9c>)
 800033e:	f000 fc2b 	bl	8000b98 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000342:	2205      	movs	r2, #5
 8000344:	210e      	movs	r1, #14
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <configure_spi+0x9c>)
 8000348:	f000 fc26 	bl	8000b98 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 800034c:	2205      	movs	r2, #5
 800034e:	210d      	movs	r1, #13
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <configure_spi+0x9c>)
 8000352:	f000 fc21 	bl	8000b98 <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 8000356:	2205      	movs	r2, #5
 8000358:	210c      	movs	r1, #12
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <configure_spi+0x9c>)
 800035c:	f000 fc1c 	bl	8000b98 <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 8000360:	2301      	movs	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 8000364:	2300      	movs	r3, #0
 8000366:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 8000368:	2300      	movs	r3, #0
 800036a:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV4;
 800036c:	2301      	movs	r3, #1
 800036e:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 8000370:	2300      	movs	r3, #0
 8000372:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000374:	2300      	movs	r3, #0
 8000376:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 8000378:	2301      	movs	r3, #1
 800037a:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 800037c:	2301      	movs	r3, #1
 800037e:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 8000380:	4808      	ldr	r0, [pc, #32]	; (80003a4 <configure_spi+0xa0>)
 8000382:	f001 fa55 	bl	8001830 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	; (80003a4 <configure_spi+0xa0>)
 800038c:	f001 f938 	bl	8001600 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <configure_spi+0xa0>)
 8000392:	f001 f9b0 	bl	80016f6 <SPIEnable>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40003800 	.word	0x40003800

080003a8 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003ae:	463b      	mov	r3, r7
 80003b0:	2218      	movs	r2, #24
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fdfb 	bl	8001fb0 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 80003ba:	482d      	ldr	r0, [pc, #180]	; (8000470 <configure_i2c+0xc8>)
 80003bc:	f001 fa38 	bl	8001830 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 80003c0:	2202      	movs	r2, #2
 80003c2:	2107      	movs	r1, #7
 80003c4:	482a      	ldr	r0, [pc, #168]	; (8000470 <configure_i2c+0xc8>)
 80003c6:	f000 fba1 	bl	8000b0c <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 80003ca:	2202      	movs	r2, #2
 80003cc:	2106      	movs	r1, #6
 80003ce:	4828      	ldr	r0, [pc, #160]	; (8000470 <configure_i2c+0xc8>)
 80003d0:	f000 fb9c 	bl	8000b0c <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 80003d4:	2204      	movs	r2, #4
 80003d6:	2107      	movs	r1, #7
 80003d8:	4825      	ldr	r0, [pc, #148]	; (8000470 <configure_i2c+0xc8>)
 80003da:	f000 fbdd 	bl	8000b98 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 80003de:	2204      	movs	r2, #4
 80003e0:	2106      	movs	r1, #6
 80003e2:	4823      	ldr	r0, [pc, #140]	; (8000470 <configure_i2c+0xc8>)
 80003e4:	f000 fbd8 	bl	8000b98 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2107      	movs	r1, #7
 80003ec:	4820      	ldr	r0, [pc, #128]	; (8000470 <configure_i2c+0xc8>)
 80003ee:	f000 fc0c 	bl	8000c0a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2106      	movs	r1, #6
 80003f6:	481e      	ldr	r0, [pc, #120]	; (8000470 <configure_i2c+0xc8>)
 80003f8:	f000 fc07 	bl	8000c0a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 80003fc:	2202      	movs	r2, #2
 80003fe:	2107      	movs	r1, #7
 8000400:	481b      	ldr	r0, [pc, #108]	; (8000470 <configure_i2c+0xc8>)
 8000402:	f000 fc48 	bl	8000c96 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000406:	2202      	movs	r2, #2
 8000408:	2106      	movs	r1, #6
 800040a:	4819      	ldr	r0, [pc, #100]	; (8000470 <configure_i2c+0xc8>)
 800040c:	f000 fc43 	bl	8000c96 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 8000410:	2201      	movs	r2, #1
 8000412:	2107      	movs	r1, #7
 8000414:	4816      	ldr	r0, [pc, #88]	; (8000470 <configure_i2c+0xc8>)
 8000416:	f000 fc1a 	bl	8000c4e <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 800041a:	2201      	movs	r2, #1
 800041c:	2106      	movs	r1, #6
 800041e:	4814      	ldr	r0, [pc, #80]	; (8000470 <configure_i2c+0xc8>)
 8000420:	f000 fc15 	bl	8000c4e <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000424:	2310      	movs	r3, #16
 8000426:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 8000430:	2350      	movs	r3, #80	; 0x50
 8000432:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000434:	2301      	movs	r3, #1
 8000436:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <configure_i2c+0xcc>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f9f7 	bl	8001830 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <configure_i2c+0xcc>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	463a      	mov	r2, r7
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fc47 	bl	8000cde <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <configure_i2c+0xcc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2111      	movs	r1, #17
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fd58 	bl	8000f0c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <configure_i2c+0xcc>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fc92 	bl	8000d8a <I2CEnable>

	return;
 8000466:	bf00      	nop
}
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40020400 	.word	0x40020400
 8000474:	20000000 	.word	0x20000000

08000478 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fdd1 	bl	800102c <lcd_pcf8574_send_data>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4603      	mov	r3, r0
 80004a4:	70fb      	strb	r3, [r7, #3]
 80004a6:	460b      	mov	r3, r1
 80004a8:	70bb      	strb	r3, [r7, #2]
 80004aa:	4613      	mov	r3, r2
 80004ac:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 80004ae:	4b3c      	ldr	r3, [pc, #240]	; (80005a0 <configure_external_gpio_interrupt+0x10c>)
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <configure_external_gpio_interrupt+0x110>)
 80004b4:	623b      	str	r3, [r7, #32]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 80004b6:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <configure_external_gpio_interrupt+0x114>)
 80004b8:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 80004ba:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <configure_external_gpio_interrupt+0x118>)
 80004bc:	61bb      	str	r3, [r7, #24]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 80004be:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <configure_external_gpio_interrupt+0x11c>)
 80004c0:	617b      	str	r3, [r7, #20]
	uint32_t OFFSET;
	uint32_t OFFSET_ADDRESS;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f001 f9b4 	bl	8001830 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2200      	movs	r2, #0
 80004cc:	4619      	mov	r1, r3
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 fb1c 	bl	8000b0c <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 fb95 	bl	8000c0a <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2202      	movs	r2, #2
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 fbd5 	bl	8000c96 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 fbab 	bl	8000c4e <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 80004f8:	6a3b      	ldr	r3, [r7, #32]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	78fa      	ldrb	r2, [r7, #3]
 80004fe:	2101      	movs	r1, #1
 8000500:	fa01 f202 	lsl.w	r2, r1, r2
 8000504:	431a      	orrs	r2, r3
 8000506:	6a3b      	ldr	r3, [r7, #32]
 8000508:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 800050a:	78bb      	ldrb	r3, [r7, #2]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d108      	bne.n	8000522 <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 8000522:	78bb      	ldrb	r3, [r7, #2]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d108      	bne.n	800053a <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	78fa      	ldrb	r2, [r7, #3]
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	431a      	orrs	r2, r3
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000544:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	f003 0303 	and.w	r3, r3, #3
 800054c:	613b      	str	r3, [r7, #16]
	OFFSET_ADDRESS = gpio_pin/4;
 800054e:	78fb      	ldrb	r3, [r7, #3]
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	60fb      	str	r3, [r7, #12]
	pSYSCFG_EXTI_CR_ADDR += OFFSET_ADDRESS;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	4413      	add	r3, r2
 800055e:	617b      	str	r3, [r7, #20]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	210f      	movs	r1, #15
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f81c 	bl	80005b4 <gpio_port_name_to_num>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	409a      	lsls	r2, r3
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	431a      	orrs	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 8000590:	787b      	ldrb	r3, [r7, #1]
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fb10 	bl	8001bb8 <NVIC_EnableIRQ>
}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023844 	.word	0x40023844
 80005a4:	40013c00 	.word	0x40013c00
 80005a8:	40013c08 	.word	0x40013c08
 80005ac:	40013c0c 	.word	0x40013c0c
 80005b0:	40013808 	.word	0x40013808

080005b4 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a21      	ldr	r2, [pc, #132]	; (8000644 <gpio_port_name_to_num+0x90>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d102      	bne.n	80005ca <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e036      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <gpio_port_name_to_num+0x94>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d102      	bne.n	80005d8 <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	e02f      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <gpio_port_name_to_num+0x98>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d102      	bne.n	80005e6 <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e028      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a19      	ldr	r2, [pc, #100]	; (8000650 <gpio_port_name_to_num+0x9c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d102      	bne.n	80005f4 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 80005ee:	2303      	movs	r3, #3
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e021      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <gpio_port_name_to_num+0xa0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d102      	bne.n	8000602 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e01a      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <gpio_port_name_to_num+0xa4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d102      	bne.n	8000610 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e013      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <gpio_port_name_to_num+0xa8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d102      	bne.n	800061e <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 8000618:	2306      	movs	r3, #6
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e00c      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <gpio_port_name_to_num+0xac>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d102      	bne.n	800062c <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 8000626:	2307      	movs	r3, #7
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	e005      	b.n	8000638 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <gpio_port_name_to_num+0xb0>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d101      	bne.n	8000638 <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40020000 	.word	0x40020000
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40021400 	.word	0x40021400
 800065c:	40021800 	.word	0x40021800
 8000660:	40021c00 	.word	0x40021c00
 8000664:	40022000 	.word	0x40022000

08000668 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	6852      	ldr	r2, [r2, #4]
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	6892      	ldr	r2, [r2, #8]
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d16a      	bne.n	8000762 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6a1a      	ldr	r2, [r3, #32]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f042 0201 	orr.w	r2, r2, #1
 800069a:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7b9b      	ldrb	r3, [r3, #14]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d11c      	bne.n	80006de <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	699a      	ldr	r2, [r3, #24]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f022 0203 	bic.w	r2, r2, #3
 80006b2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	6912      	ldr	r2, [r2, #16]
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	699a      	ldr	r2, [r3, #24]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80006dc:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7b9b      	ldrb	r3, [r3, #14]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d11c      	bne.n	8000720 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	699a      	ldr	r2, [r3, #24]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f022 0203 	bic.w	r2, r2, #3
 80006f4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	6912      	ldr	r2, [r2, #16]
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	699a      	ldr	r2, [r3, #24]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800070e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800071e:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b9b      	ldrb	r3, [r3, #14]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d11c      	bne.n	8000762 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f022 0203 	bic.w	r2, r2, #3
 8000736:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	6912      	ldr	r2, [r2, #16]
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	699a      	ldr	r2, [r3, #24]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000750:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000760:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7d1b      	ldrb	r3, [r3, #20]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f040 80bf 	bne.w	80008ea <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7d5b      	ldrb	r3, [r3, #21]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d124      	bne.n	80007be <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000782:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	6992      	ldr	r2, [r2, #24]
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800079c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	699a      	ldr	r2, [r3, #24]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80007ac:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6a1a      	ldr	r2, [r3, #32]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0210 	orr.w	r2, r2, #16
 80007bc:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7d5b      	ldrb	r3, [r3, #21]
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d124      	bne.n	8000810 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007d4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	6992      	ldr	r2, [r2, #24]
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007ee:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f042 0210 	orr.w	r2, r2, #16
 800080e:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7d5b      	ldrb	r3, [r3, #21]
 8000814:	2b04      	cmp	r3, #4
 8000816:	d124      	bne.n	8000862 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000826:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6992      	ldr	r2, [r2, #24]
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000840:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	699a      	ldr	r2, [r3, #24]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000850:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a1a      	ldr	r2, [r3, #32]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0210 	orr.w	r2, r2, #16
 8000860:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7d5b      	ldrb	r3, [r3, #21]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d13f      	bne.n	80008ea <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	699a      	ldr	r2, [r3, #24]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000878:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	699a      	ldr	r2, [r3, #24]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000888:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	699a      	ldr	r2, [r3, #24]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000898:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6a1a      	ldr	r2, [r3, #32]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0220 	bic.w	r2, r2, #32
 80008a8:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	6a1a      	ldr	r2, [r3, #32]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008b8:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	699a      	ldr	r2, [r3, #24]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80008c8:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f042 0204 	orr.w	r2, r2, #4
 80008d8:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6a1a      	ldr	r2, [r3, #32]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f042 0210 	orr.w	r2, r2, #16
 80008e8:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7f1b      	ldrb	r3, [r3, #28]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d16a      	bne.n	80009c8 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6a1a      	ldr	r2, [r3, #32]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000900:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7f5b      	ldrb	r3, [r3, #29]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d11c      	bne.n	8000944 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	69da      	ldr	r2, [r3, #28]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0203 	bic.w	r2, r2, #3
 8000918:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	6a12      	ldr	r2, [r2, #32]
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000932:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	69da      	ldr	r2, [r3, #28]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000942:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7f5b      	ldrb	r3, [r3, #29]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d11c      	bne.n	8000986 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	69da      	ldr	r2, [r3, #28]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0203 	bic.w	r2, r2, #3
 800095a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	6a12      	ldr	r2, [r2, #32]
 8000964:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000974:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000984:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7f5b      	ldrb	r3, [r3, #29]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d11c      	bne.n	80009c8 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 0203 	bic.w	r2, r2, #3
 800099c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6a12      	ldr	r2, [r2, #32]
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009b6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80009c6:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d16d      	bne.n	8000aae <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a1a      	ldr	r2, [r3, #32]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009e0:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d11c      	bne.n	8000a26 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69da      	ldr	r2, [r3, #28]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009fa:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a14:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a24:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d11c      	bne.n	8000a6a <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a3e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a48:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	69da      	ldr	r2, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a58:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000a68:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d11c      	bne.n	8000aae <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a82:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a9c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	69da      	ldr	r2, [r3, #28]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000aac:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7b1b      	ldrb	r3, [r3, #12]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d108      	bne.n	8000ac8 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f042 0201 	orr.w	r2, r2, #1
 8000ac4:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 8000ac6:	e00b      	b.n	8000ae0 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d107      	bne.n	8000ae0 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0201 	bic.w	r2, r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0201 	orr.w	r2, r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	78fa      	ldrb	r2, [r7, #3]
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	2103      	movs	r1, #3
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	401a      	ands	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	78b9      	ldrb	r1, [r7, #2]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	431a      	orrs	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
 8000b60:	4613      	mov	r3, r2
 8000b62:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	78fa      	ldrb	r2, [r7, #3]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	78b9      	ldrb	r1, [r7, #2]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	615a      	str	r2, [r3, #20]
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	7aba      	ldrb	r2, [r7, #10]
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	210f      	movs	r1, #15
 8000bca:	fa01 f202 	lsl.w	r2, r1, r2
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	7afa      	ldrb	r2, [r7, #11]
 8000bd4:	4019      	ands	r1, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000bde:	7afa      	ldrb	r2, [r7, #11]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3208      	adds	r2, #8
 8000be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be8:	78b9      	ldrb	r1, [r7, #2]
 8000bea:	7aba      	ldrb	r2, [r7, #10]
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	7afa      	ldrb	r2, [r7, #11]
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
 8000c16:	4613      	mov	r3, r2
 8000c18:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	43d2      	mvns	r2, r2
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	78b9      	ldrb	r1, [r7, #2]
 8000c38:	78fa      	ldrb	r2, [r7, #3]
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	605a      	str	r2, [r3, #4]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	0052      	lsls	r2, r2, #1
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	78b9      	ldrb	r1, [r7, #2]
 8000c7e:	78fa      	ldrb	r2, [r7, #3]
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	431a      	orrs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	60da      	str	r2, [r3, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70fb      	strb	r3, [r7, #3]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	78fa      	ldrb	r2, [r7, #3]
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	78b9      	ldrb	r1, [r7, #2]
 8000cc6:	78fa      	ldrb	r2, [r7, #3]
 8000cc8:	0052      	lsls	r2, r2, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	609a      	str	r2, [r3, #8]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	69da      	ldr	r2, [r3, #28]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	03db      	lsls	r3, r3, #15
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10d      	bne.n	8000d46 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69da      	ldr	r2, [r3, #28]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	431a      	orrs	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	69da      	ldr	r2, [r3, #28]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	029b      	lsls	r3, r3, #10
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	601a      	str	r2, [r3, #0]

}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f043 0201 	orr.w	r2, r3, #1
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 f84c 	bl	8000e5c <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000dc4:	bf00      	nop
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 f869 	bl	8000ea0 <I2C_GetFlagStatus>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f8      	beq.n	8000dc6 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	4619      	mov	r1, r3
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f86f 	bl	8000eca <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000dec:	bf00      	nop
 8000dee:	2102      	movs	r1, #2
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 f855 	bl	8000ea0 <I2C_GetFlagStatus>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f8      	beq.n	8000dee <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f874 	bl	8000eea <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000e02:	e012      	b.n	8000e2a <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000e04:	bf00      	nop
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f000 f849 	bl	8000ea0 <I2C_GetFlagStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f8      	beq.n	8000e06 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e9      	bne.n	8000e04 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000e30:	bf00      	nop
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f833 	bl	8000ea0 <I2C_GetFlagStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d1f8      	bne.n	8000e32 <I2CMasterSendData+0x86>
 8000e40:	2104      	movs	r1, #4
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f82c 	bl	8000ea0 <I2C_GetFlagStatus>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d1f1      	bne.n	8000e32 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f815 	bl	8000e7e <I2C_SendStopBit>

}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b085      	sub	sp, #20
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	621a      	str	r2, [r3, #32]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000f30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f34:	f7ff f9ac 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000f38:	2030      	movs	r0, #48	; 0x30
 8000f3a:	f000 f845 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000f3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f42:	f7ff f9a5 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000f46:	2030      	movs	r0, #48	; 0x30
 8000f48:	f000 f83e 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f50:	f7ff f99e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000f54:	2030      	movs	r0, #48	; 0x30
 8000f56:	f000 f837 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000f5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f5e:	f7ff f997 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000f62:	2020      	movs	r0, #32
 8000f64:	f000 f830 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000f68:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f6c:	f7ff f990 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f70:	2028      	movs	r0, #40	; 0x28
 8000f72:	f000 f829 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f76:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f7a:	f7ff f989 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f000 f822 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f88:	f7ff f982 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 f81b 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f96:	f7ff f97b 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 f814 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000fa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fa4:	f7ff f974 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fa8:	2006      	movs	r0, #6
 8000faa:	f000 f80d 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000fae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb2:	f7ff f96d 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fb6:	200c      	movs	r0, #12
 8000fb8:	f000 f806 	bl	8000fc8 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000fbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fc0:	f7ff f966 	bl	8000290 <delay_us>

	return;
 8000fc4:	bf00      	nop
}
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <lcd_pcf8574_send_cmd+0x5c>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <lcd_pcf8574_send_cmd+0x60>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	2204      	movs	r2, #4
 8001016:	f7ff fec9 	bl	8000dac <I2CMasterSendData>

	return;
 800101a:	bf00      	nop
}
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004

0800102c <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 030d 	orr.w	r3, r3, #13
 800104a:	b2db      	uxtb	r3, r3
 800104c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f043 0309 	orr.w	r3, r3, #9
 8001054:	b2db      	uxtb	r3, r3
 8001056:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f043 030d 	orr.w	r3, r3, #13
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	f043 0309 	orr.w	r3, r3, #9
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <lcd_pcf8574_send_data+0x5c>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <lcd_pcf8574_send_data+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f107 0108 	add.w	r1, r7, #8
 8001078:	2204      	movs	r2, #4
 800107a:	f7ff fe97 	bl	8000dac <I2CMasterSendData>

	return;
 800107e:	bf00      	nop
}
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004

08001090 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff97 	bl	8000fc8 <lcd_pcf8574_send_cmd>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff ff90 	bl	8000fc8 <lcd_pcf8574_send_cmd>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d108      	bne.n	80010d4 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b27      	cmp	r3, #39	; 0x27
 80010c6:	d802      	bhi.n	80010ce <lcd_pcf8574_set_position+0x22>
			position = col;
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e011      	b.n	80010f2 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e00e      	b.n	80010f2 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d109      	bne.n	80010ee <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b27      	cmp	r3, #39	; 0x27
 80010de:	d803      	bhi.n	80010e8 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	3340      	adds	r3, #64	; 0x40
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e004      	b.n	80010f2 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e001      	b.n	80010f2 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff63 	bl	8000fc8 <lcd_pcf8574_send_cmd>

	return;
 8001102:	bf00      	nop
}
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <configure_nrf_radio>:
uint8_t rx_packet_length;
uint8_t cmd_packet_length;
uint8_t nrf_packet_tx_state;

void configure_nrf_radio(struct NRF_RADIO_CONFIG_t * radio_config)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t i;

	//1. Configure the GPIO pins for CE and IRQ pins
	EnablePeriClk(RADIO_PORT);
 8001114:	48a2      	ldr	r0, [pc, #648]	; (80013a0 <configure_nrf_radio+0x294>)
 8001116:	f000 fb8b 	bl	8001830 <EnablePeriClk>
	GPIOSetMode(RADIO_PORT,CE_PIN,GPIO_MODE_OUTPUT);
 800111a:	2201      	movs	r2, #1
 800111c:	2102      	movs	r1, #2
 800111e:	48a0      	ldr	r0, [pc, #640]	; (80013a0 <configure_nrf_radio+0x294>)
 8001120:	f7ff fcf4 	bl	8000b0c <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 8001124:	2200      	movs	r2, #0
 8001126:	2102      	movs	r1, #2
 8001128:	489d      	ldr	r0, [pc, #628]	; (80013a0 <configure_nrf_radio+0x294>)
 800112a:	f7ff fd13 	bl	8000b54 <GPIOWritePin>
	//GPIOSetMode(RADIO_PORT,IRQ_PIN,GPIO_MODE_INPUT);
	//GPIOSetPullUpDownConfig(RADIO_PORT,IRQ_PIN,GPIO_PULL_UP);
	GPIOSetMode(RADIO_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 800112e:	2201      	movs	r2, #1
 8001130:	2104      	movs	r1, #4
 8001132:	489b      	ldr	r0, [pc, #620]	; (80013a0 <configure_nrf_radio+0x294>)
 8001134:	f7ff fcea 	bl	8000b0c <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001138:	2201      	movs	r2, #1
 800113a:	2104      	movs	r1, #4
 800113c:	4898      	ldr	r0, [pc, #608]	; (80013a0 <configure_nrf_radio+0x294>)
 800113e:	f7ff fd09 	bl	8000b54 <GPIOWritePin>

	//2. Configure the Radio Mode

	//3. Configure the RF Channel, Data Rate and PA Level
	//3.1 Configure the RF Channel
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_CH;
 8001142:	4b98      	ldr	r3, [pc, #608]	; (80013a4 <configure_nrf_radio+0x298>)
 8001144:	2225      	movs	r2, #37	; 0x25
 8001146:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_channel;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	785a      	ldrb	r2, [r3, #1]
 800114c:	4b95      	ldr	r3, [pc, #596]	; (80013a4 <configure_nrf_radio+0x298>)
 800114e:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001150:	4b95      	ldr	r3, [pc, #596]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001152:	2202      	movs	r2, #2
 8001154:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001156:	4b94      	ldr	r3, [pc, #592]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4891      	ldr	r0, [pc, #580]	; (80013a4 <configure_nrf_radio+0x298>)
 800115e:	f000 fa11 	bl	8001584 <nrf_radio_cmd_write>

	//3.2 Configure the Data Rate and PA Level
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_SETUP;
 8001162:	4b90      	ldr	r3, [pc, #576]	; (80013a4 <configure_nrf_radio+0x298>)
 8001164:	2226      	movs	r2, #38	; 0x26
 8001166:	701a      	strb	r2, [r3, #0]

	cmd_buffer[1] &= 0x00;
 8001168:	4b8e      	ldr	r3, [pc, #568]	; (80013a4 <configure_nrf_radio+0x298>)
 800116a:	2200      	movs	r2, #0
 800116c:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_pa_level << NRF_RADIO_RF_PWR_POS);
 800116e:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <configure_nrf_radio+0x298>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	b25a      	sxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	78db      	ldrb	r3, [r3, #3]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b88      	ldr	r3, [pc, #544]	; (80013a4 <configure_nrf_radio+0x298>)
 8001184:	705a      	strb	r2, [r3, #1]

	if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_250K)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10b      	bne.n	80011a6 <configure_nrf_radio+0x9a>
	{
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_LOW_POS);
 800118e:	4b85      	ldr	r3, [pc, #532]	; (80013a4 <configure_nrf_radio+0x298>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <configure_nrf_radio+0x298>)
 800119a:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 800119c:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <configure_nrf_radio+0x298>)
 800119e:	785a      	ldrb	r2, [r3, #1]
 80011a0:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <configure_nrf_radio+0x298>)
 80011a2:	705a      	strb	r2, [r3, #1]
 80011a4:	e01b      	b.n	80011de <configure_nrf_radio+0xd2>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_1M)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <configure_nrf_radio+0xb4>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 80011ae:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <configure_nrf_radio+0x298>)
 80011b0:	785a      	ldrb	r2, [r3, #1]
 80011b2:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <configure_nrf_radio+0x298>)
 80011b4:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 80011b6:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <configure_nrf_radio+0x298>)
 80011b8:	785a      	ldrb	r2, [r3, #1]
 80011ba:	4b7a      	ldr	r3, [pc, #488]	; (80013a4 <configure_nrf_radio+0x298>)
 80011bc:	705a      	strb	r2, [r3, #1]
 80011be:	e00e      	b.n	80011de <configure_nrf_radio+0xd2>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_2M)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d10a      	bne.n	80011de <configure_nrf_radio+0xd2>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 80011c8:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <configure_nrf_radio+0x298>)
 80011ca:	785a      	ldrb	r2, [r3, #1]
 80011cc:	4b75      	ldr	r3, [pc, #468]	; (80013a4 <configure_nrf_radio+0x298>)
 80011ce:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_HIGH_POS);
 80011d0:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <configure_nrf_radio+0x298>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <configure_nrf_radio+0x298>)
 80011dc:	705a      	strb	r2, [r3, #1]
	}

	cmd_packet_length = 2;
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <configure_nrf_radio+0x29c>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <configure_nrf_radio+0x29c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	486e      	ldr	r0, [pc, #440]	; (80013a4 <configure_nrf_radio+0x298>)
 80011ec:	f000 f9ca 	bl	8001584 <nrf_radio_cmd_write>

	//4. Configure Data Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_RXADDR;
 80011f0:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <configure_nrf_radio+0x298>)
 80011f2:	2222      	movs	r2, #34	; 0x22
 80011f4:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_data_pipes;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791a      	ldrb	r2, [r3, #4]
 80011fa:	4b6a      	ldr	r3, [pc, #424]	; (80013a4 <configure_nrf_radio+0x298>)
 80011fc:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 80011fe:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001200:	2202      	movs	r2, #2
 8001202:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4866      	ldr	r0, [pc, #408]	; (80013a4 <configure_nrf_radio+0x298>)
 800120c:	f000 f9ba 	bl	8001584 <nrf_radio_cmd_write>

	//5. Configure Auto-Acknowledgements
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_AA;
 8001210:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <configure_nrf_radio+0x298>)
 8001212:	2221      	movs	r2, #33	; 0x21
 8001214:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_auto_acknowledgements;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	795a      	ldrb	r2, [r3, #5]
 800121a:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <configure_nrf_radio+0x298>)
 800121c:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 800121e:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001224:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	485e      	ldr	r0, [pc, #376]	; (80013a4 <configure_nrf_radio+0x298>)
 800122c:	f000 f9aa 	bl	8001584 <nrf_radio_cmd_write>

	//6. Configure Address Width
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_AW;
 8001230:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <configure_nrf_radio+0x298>)
 8001232:	2223      	movs	r2, #35	; 0x23
 8001234:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_address_width;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	799a      	ldrb	r2, [r3, #6]
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <configure_nrf_radio+0x298>)
 800123c:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 800123e:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001240:	2202      	movs	r2, #2
 8001242:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	4856      	ldr	r0, [pc, #344]	; (80013a4 <configure_nrf_radio+0x298>)
 800124c:	f000 f99a 	bl	8001584 <nrf_radio_cmd_write>

	//7. Configure Retransmission Parameters
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_RETR;
 8001250:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <configure_nrf_radio+0x298>)
 8001252:	2224      	movs	r2, #36	; 0x24
 8001254:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = (radio_config->radio_auto_retransmit_count | radio_config->radio_auto_retransmit_delay);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	79da      	ldrb	r2, [r3, #7]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7a1b      	ldrb	r3, [r3, #8]
 800125e:	4313      	orrs	r3, r2
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <configure_nrf_radio+0x298>)
 8001264:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001266:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001268:	2202      	movs	r2, #2
 800126a:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 800126c:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <configure_nrf_radio+0x29c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	484c      	ldr	r0, [pc, #304]	; (80013a4 <configure_nrf_radio+0x298>)
 8001274:	f000 f986 	bl	8001584 <nrf_radio_cmd_write>

	//8. Configure Own Address (RX_ADDR_P0)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RX_ADDR_P0;
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <configure_nrf_radio+0x298>)
 800127a:	222a      	movs	r2, #42	; 0x2a
 800127c:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e009      	b.n	8001298 <configure_nrf_radio+0x18c>
	{
		cmd_buffer[i] = radio_config->radio_addr_p0[i];
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	440a      	add	r2, r1
 800128c:	7a51      	ldrb	r1, [r2, #9]
 800128e:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <configure_nrf_radio+0x298>)
 8001290:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	799b      	ldrb	r3, [r3, #6]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d9f0      	bls.n	8001284 <configure_nrf_radio+0x178>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	799b      	ldrb	r3, [r3, #6]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <configure_nrf_radio+0x29c>)
 80012ac:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <configure_nrf_radio+0x29c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	483b      	ldr	r0, [pc, #236]	; (80013a4 <configure_nrf_radio+0x298>)
 80012b6:	f000 f965 	bl	8001584 <nrf_radio_cmd_write>

	//9. Configure Peer Address (TX_ADDR)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_TX_ADDR;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <configure_nrf_radio+0x298>)
 80012bc:	2230      	movs	r2, #48	; 0x30
 80012be:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e00a      	b.n	80012dc <configure_nrf_radio+0x1d0>
	{
		cmd_buffer[i] = radio_config->radio_addr_peer[i];
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	440a      	add	r2, r1
 80012ce:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <configure_nrf_radio+0x298>)
 80012d4:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	3301      	adds	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	799b      	ldrb	r3, [r3, #6]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d9ef      	bls.n	80012c6 <configure_nrf_radio+0x1ba>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	3301      	adds	r3, #1
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <configure_nrf_radio+0x29c>)
 80012f0:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <configure_nrf_radio+0x29c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <configure_nrf_radio+0x298>)
 80012fa:	f000 f943 	bl	8001584 <nrf_radio_cmd_write>

	//10. Configure Dynamic Pay-load Length Feature for Individual Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_DYNPD;
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <configure_nrf_radio+0x298>)
 8001300:	223c      	movs	r2, #60	; 0x3c
 8001302:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_dynamic_payload_enable_pipes;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <configure_nrf_radio+0x298>)
 800130c:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4822      	ldr	r0, [pc, #136]	; (80013a4 <configure_nrf_radio+0x298>)
 800131c:	f000 f932 	bl	8001584 <nrf_radio_cmd_write>

	//11. Configure Feature Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_FEATURE;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <configure_nrf_radio+0x298>)
 8001322:	223d      	movs	r2, #61	; 0x3d
 8001324:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <configure_nrf_radio+0x298>)
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_payload_length_feature << NRF_RADIO_DPL_FEATURE_BITPOS);
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <configure_nrf_radio+0x298>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	b25a      	sxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <configure_nrf_radio+0x298>)
 8001344:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_ack_payload_feature << NRF_RADIO_ACK_PAYLOAD_FEATURE_BITPOS);
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <configure_nrf_radio+0x298>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	b25a      	sxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b25b      	sxtb	r3, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <configure_nrf_radio+0x298>)
 800135e:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_ack_feature << NRF_RADIO_DYNAMIC_ACK_FEATURE_BITPOS);
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <configure_nrf_radio+0x298>)
 8001362:	785a      	ldrb	r2, [r3, #1]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800136a:	4313      	orrs	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <configure_nrf_radio+0x298>)
 8001370:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <configure_nrf_radio+0x29c>)
 8001374:	2202      	movs	r2, #2
 8001376:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <configure_nrf_radio+0x29c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <configure_nrf_radio+0x298>)
 8001380:	f000 f900 	bl	8001584 <nrf_radio_cmd_write>

	//12. Configure CONFIG Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_CONFIG;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <configure_nrf_radio+0x298>)
 8001386:	2220      	movs	r2, #32
 8001388:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <configure_nrf_radio+0x298>)
 800138c:	2200      	movs	r2, #0
 800138e:	705a      	strb	r2, [r3, #1]
	if(radio_config->radio_mode == NRF_RADIO_MODE_TX)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <configure_nrf_radio+0x2a0>
	{
		cmd_buffer[1] = 0x0A;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <configure_nrf_radio+0x298>)
 800139a:	220a      	movs	r2, #10
 800139c:	705a      	strb	r2, [r3, #1]
 800139e:	e00c      	b.n	80013ba <configure_nrf_radio+0x2ae>
 80013a0:	40020000 	.word	0x40020000
 80013a4:	200000d4 	.word	0x200000d4
 80013a8:	200000f6 	.word	0x200000f6
	}
	else if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <configure_nrf_radio+0x2ae>
	{
		cmd_buffer[1] = 0x0B;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <configure_nrf_radio+0x2e4>)
 80013b6:	220b      	movs	r2, #11
 80013b8:	705a      	strb	r2, [r3, #1]
	}
	cmd_packet_length = 2;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <configure_nrf_radio+0x2e8>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <configure_nrf_radio+0x2e8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <configure_nrf_radio+0x2e4>)
 80013c8:	f000 f8dc 	bl	8001584 <nrf_radio_cmd_write>

	if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <configure_nrf_radio+0x2da>
	{
		delay_us(50);
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f7fe ff5b 	bl	8000290 <delay_us>
		GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 80013da:	2201      	movs	r2, #1
 80013dc:	2102      	movs	r1, #2
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <configure_nrf_radio+0x2ec>)
 80013e0:	f7ff fbb8 	bl	8000b54 <GPIOWritePin>
	}

	return;
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
}
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000d4 	.word	0x200000d4
 80013f4:	200000f6 	.word	0x200000f6
 80013f8:	40020000 	.word	0x40020000

080013fc <nrf_radio_get_status_register>:
		}
	}
}

uint8_t nrf_radio_get_status_register(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t status;

	//1. Read the STATUS register (using NOP command)
	cmd_buffer[0] = NRF_RADIO_CMD_NOP;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <nrf_radio_get_status_register+0x44>)
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	701a      	strb	r2, [r3, #0]
	cmd_packet_length = 1;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <nrf_radio_get_status_register+0x48>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <nrf_radio_get_status_register+0x4c>)
 8001414:	f7ff fb9e 	bl	8000b54 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <nrf_radio_get_status_register+0x48>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <nrf_radio_get_status_register+0x50>)
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <nrf_radio_get_status_register+0x44>)
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <nrf_radio_get_status_register+0x54>)
 8001422:	f000 f9bb 	bl	800179c <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001426:	2201      	movs	r2, #1
 8001428:	2104      	movs	r1, #4
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <nrf_radio_get_status_register+0x4c>)
 800142c:	f7ff fb92 	bl	8000b54 <GPIOWritePin>

	status = (uint8_t) rx_buffer[0];
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <nrf_radio_get_status_register+0x50>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	71fb      	strb	r3, [r7, #7]

	return status;
 8001436:	79fb      	ldrb	r3, [r7, #7]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000d4 	.word	0x200000d4
 8001444:	200000f6 	.word	0x200000f6
 8001448:	40020000 	.word	0x40020000
 800144c:	200000b4 	.word	0x200000b4
 8001450:	40003800 	.word	0x40003800

08001454 <nrf_radio_get_interrupt_source>:

uint8_t nrf_radio_get_interrupt_source(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;

	//1. Read the STATUS register
	status = nrf_radio_get_status_register();
 800145a:	f7ff ffcf 	bl	80013fc <nrf_radio_get_status_register>
 800145e:	4603      	mov	r3, r0
 8001460:	71bb      	strb	r3, [r7, #6]

	//printf("%d\r\n",status);

	if(status & NRF_RADIO_INT_SRC_TX_DS_BITPOS)
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <nrf_radio_get_interrupt_source+0x1e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_TX_DS;
 800146c:	2300      	movs	r3, #0
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	e011      	b.n	8001496 <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_RX_DR_BITPOS)
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <nrf_radio_get_interrupt_source+0x2e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_RX_DR;
 800147c:	2301      	movs	r3, #1
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e009      	b.n	8001496 <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_MAX_RT_BITPOS)
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <nrf_radio_get_interrupt_source+0x3e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_MAX_RT;
 800148c:	2302      	movs	r3, #2
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	e001      	b.n	8001496 <nrf_radio_get_interrupt_source+0x42>
	}
	else
	{
		interrupt_source = NRF_RADIO_INT_SRC_NONE;
 8001492:	2303      	movs	r3, #3
 8001494:	71fb      	strb	r3, [r7, #7]
	}

	return interrupt_source;
 8001496:	79fb      	ldrb	r3, [r7, #7]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <nrf_radio_retreive_packet_from_fifo>:

void nrf_radio_retreive_packet_from_fifo(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	uint8_t packet_length, i;

	//1. Get the length of the RX Pay-load (from Data Pipe P0)
	packet_length = nrf_radio_get_rx_packet_length();
 80014a6:	f000 f83d 	bl	8001524 <nrf_radio_get_rx_packet_length>
 80014aa:	4603      	mov	r3, r0
 80014ac:	71bb      	strb	r3, [r7, #6]

	//2. Read the RX Pay-load
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PAYLOAD;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80014b0:	2261      	movs	r2, #97	; 0x61
 80014b2:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=packet_length;i++)
 80014b4:	2301      	movs	r3, #1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	e006      	b.n	80014c8 <nrf_radio_retreive_packet_from_fifo+0x28>
		cmd_buffer[i] = 0x00;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80014be:	2100      	movs	r1, #0
 80014c0:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=packet_length;i++)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	3301      	adds	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d9f4      	bls.n	80014ba <nrf_radio_retreive_packet_from_fifo+0x1a>
	cmd_packet_length = packet_length + 1;
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <nrf_radio_retreive_packet_from_fifo+0x70>)
 80014d8:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 80014da:	2200      	movs	r2, #0
 80014dc:	2104      	movs	r1, #4
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <nrf_radio_retreive_packet_from_fifo+0x74>)
 80014e0:	f7ff fb38 	bl	8000b54 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <nrf_radio_retreive_packet_from_fifo+0x70>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <nrf_radio_retreive_packet_from_fifo+0x78>)
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <nrf_radio_retreive_packet_from_fifo+0x7c>)
 80014ee:	f000 f955 	bl	800179c <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2104      	movs	r1, #4
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <nrf_radio_retreive_packet_from_fifo+0x74>)
 80014f8:	f7ff fb2c 	bl	8000b54 <GPIOWritePin>

	//3. Update the global variable rx_packet_length
	rx_packet_length = packet_length;
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <nrf_radio_retreive_packet_from_fifo+0x80>)
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	7013      	strb	r3, [r2, #0]
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200000d4 	.word	0x200000d4
 8001510:	200000f6 	.word	0x200000f6
 8001514:	40020000 	.word	0x40020000
 8001518:	200000b4 	.word	0x200000b4
 800151c:	40003800 	.word	0x40003800
 8001520:	200000f5 	.word	0x200000f5

08001524 <nrf_radio_get_rx_packet_length>:

uint8_t nrf_radio_get_rx_packet_length(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

	uint8_t length;
	//1. Read the RX_PW_P0 Register
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PL_WID;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <nrf_radio_get_rx_packet_length+0x4c>)
 800152c:	2260      	movs	r2, #96	; 0x60
 800152e:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = 0x00;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <nrf_radio_get_rx_packet_length+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <nrf_radio_get_rx_packet_length+0x50>)
 8001538:	2202      	movs	r2, #2
 800153a:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800153c:	2200      	movs	r2, #0
 800153e:	2104      	movs	r1, #4
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <nrf_radio_get_rx_packet_length+0x54>)
 8001542:	f7ff fb07 	bl	8000b54 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <nrf_radio_get_rx_packet_length+0x50>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <nrf_radio_get_rx_packet_length+0x58>)
 800154c:	4908      	ldr	r1, [pc, #32]	; (8001570 <nrf_radio_get_rx_packet_length+0x4c>)
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <nrf_radio_get_rx_packet_length+0x5c>)
 8001550:	f000 f924 	bl	800179c <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001554:	2201      	movs	r2, #1
 8001556:	2104      	movs	r1, #4
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <nrf_radio_get_rx_packet_length+0x54>)
 800155a:	f7ff fafb 	bl	8000b54 <GPIOWritePin>

	length = (uint8_t) rx_buffer[1];
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <nrf_radio_get_rx_packet_length+0x58>)
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	71fb      	strb	r3, [r7, #7]

	return length;
 8001564:	79fb      	ldrb	r3, [r7, #7]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000d4 	.word	0x200000d4
 8001574:	200000f6 	.word	0x200000f6
 8001578:	40020000 	.word	0x40020000
 800157c:	200000b4 	.word	0x200000b4
 8001580:	40003800 	.word	0x40003800

08001584 <nrf_radio_cmd_write>:

	return;
}

void nrf_radio_cmd_write(uint8_t *buffer,uint8_t length)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 8001590:	2200      	movs	r2, #0
 8001592:	2104      	movs	r1, #4
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <nrf_radio_cmd_write+0x34>)
 8001596:	f7ff fadd 	bl	8000b54 <GPIOWritePin>
	SPISendData(SPI_DEV,buffer,length);
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	461a      	mov	r2, r3
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <nrf_radio_cmd_write+0x38>)
 80015a2:	f000 f8cf 	bl	8001744 <SPISendData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2104      	movs	r1, #4
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <nrf_radio_cmd_write+0x34>)
 80015ac:	f7ff fad2 	bl	8000b54 <GPIOWritePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40003800 	.word	0x40003800

080015c0 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <RTC_Alarm_IRQHandler+0x24>)
 80015c8:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 80015ca:	f000 f80d 	bl	80015e8 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]

	return;
 80015da:	bf00      	nop
}
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40013c14 	.word	0x40013c14

080015e8 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 80015ec:	2201      	movs	r2, #1
 80015ee:	210f      	movs	r1, #15
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <RTC_Alarm_Interrupt_Callback+0x14>)
 80015f2:	f7ff faaf 	bl	8000b54 <GPIOWritePin>

	return;
 80015f6:	bf00      	nop
}
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020c00 	.word	0x40020c00

08001600 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0201 	bic.w	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	7852      	ldrb	r2, [r2, #1]
 8001622:	431a      	orrs	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 0202 	bic.w	r2, r3, #2
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	431a      	orrs	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0204 	bic.w	r2, r3, #4
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	7892      	ldrb	r2, [r2, #2]
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	7912      	ldrb	r2, [r2, #4]
 8001674:	00d2      	lsls	r2, r2, #3
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	7952      	ldrb	r2, [r2, #5]
 8001690:	02d2      	lsls	r2, r2, #11
 8001692:	431a      	orrs	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	7992      	ldrb	r2, [r2, #6]
 80016ac:	0252      	lsls	r2, r2, #9
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	79d2      	ldrb	r2, [r2, #7]
 80016c8:	0212      	lsls	r2, r2, #8
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 0204 	bic.w	r2, r3, #4
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	7a12      	ldrb	r2, [r2, #8]
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	431a      	orrs	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]


}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3

}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint32_t len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 8001754:	e012      	b.n	800177c <SPISendData+0x38>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001756:	bf00      	nop
 8001758:	2101      	movs	r1, #1
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff ffdc 	bl	8001718 <SPIGetFlags>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f8      	beq.n	8001758 <SPISendData+0x14>

		pSPI->SPI_DR = *TxBuf;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	60da      	str	r2, [r3, #12]
		TxBuf++;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3301      	adds	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
		len--;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3b01      	subs	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
	while(len > 0) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e9      	bne.n	8001756 <SPISendData+0x12>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 8001782:	bf00      	nop
 8001784:	2101      	movs	r1, #1
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff ffc6 	bl	8001718 <SPIGetFlags>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f8      	beq.n	8001784 <SPISendData+0x40>
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint32_t len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 80017ae:	bf00      	nop
 80017b0:	2101      	movs	r1, #1
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff ffb0 	bl	8001718 <SPIGetFlags>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f8      	beq.n	80017b0 <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 80017be:	e004      	b.n	80017ca <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 80017ca:	2100      	movs	r1, #0
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff ffa3 	bl	8001718 <SPIGetFlags>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f3      	bne.n	80017c0 <SPIMasterRecvData+0x24>

	while(len > 0) {
 80017d8:	e022      	b.n	8001820 <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 80017da:	bf00      	nop
 80017dc:	2101      	movs	r1, #1
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff9a 	bl	8001718 <SPIGetFlags>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f8      	beq.n	80017dc <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	60da      	str	r2, [r3, #12]
		TxBuf++;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 80017fa:	bf00      	nop
 80017fc:	2100      	movs	r1, #0
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff ff8a 	bl	8001718 <SPIGetFlags>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f8      	beq.n	80017fc <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
		len--;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	603b      	str	r3, [r7, #0]
	while(len > 0) {
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1d9      	bne.n	80017da <SPIMasterRecvData+0x3e>
	}

	return;
 8001826:	bf00      	nop
}
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a88      	ldr	r2, [pc, #544]	; (8001a5c <EnablePeriClk+0x22c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d108      	bne.n	8001852 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001840:	4b87      	ldr	r3, [pc, #540]	; (8001a60 <EnablePeriClk+0x230>)
 8001842:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001850:	e19b      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a83      	ldr	r2, [pc, #524]	; (8001a64 <EnablePeriClk+0x234>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800185a:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <EnablePeriClk+0x230>)
 800185c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	e18e      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <EnablePeriClk+0x238>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d108      	bne.n	8001886 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001874:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <EnablePeriClk+0x230>)
 8001876:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	e181      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a78      	ldr	r2, [pc, #480]	; (8001a6c <EnablePeriClk+0x23c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d108      	bne.n	80018a0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800188e:	4b74      	ldr	r3, [pc, #464]	; (8001a60 <EnablePeriClk+0x230>)
 8001890:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f043 0208 	orr.w	r2, r3, #8
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	e174      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a73      	ldr	r2, [pc, #460]	; (8001a70 <EnablePeriClk+0x240>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d108      	bne.n	80018ba <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018a8:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <EnablePeriClk+0x230>)
 80018aa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	e167      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <EnablePeriClk+0x244>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d108      	bne.n	80018d4 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018c2:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <EnablePeriClk+0x230>)
 80018c4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f043 0220 	orr.w	r2, r3, #32
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	e15a      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <EnablePeriClk+0x248>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d108      	bne.n	80018ee <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <EnablePeriClk+0x230>)
 80018de:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	e14d      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a62      	ldr	r2, [pc, #392]	; (8001a7c <EnablePeriClk+0x24c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <EnablePeriClk+0x230>)
 80018f8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	e140      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <EnablePeriClk+0x250>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d108      	bne.n	8001922 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <EnablePeriClk+0x230>)
 8001912:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	e133      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a57      	ldr	r2, [pc, #348]	; (8001a84 <EnablePeriClk+0x254>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <EnablePeriClk+0x258>)
 800192c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	e126      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a53      	ldr	r2, [pc, #332]	; (8001a8c <EnablePeriClk+0x25c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d108      	bne.n	8001956 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <EnablePeriClk+0x260>)
 8001946:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	e119      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4e      	ldr	r2, [pc, #312]	; (8001a94 <EnablePeriClk+0x264>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d108      	bne.n	8001970 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800195e:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <EnablePeriClk+0x260>)
 8001960:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	e10c      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <EnablePeriClk+0x268>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d108      	bne.n	800198a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <EnablePeriClk+0x260>)
 800197a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	e0ff      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a43      	ldr	r2, [pc, #268]	; (8001a9c <EnablePeriClk+0x26c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <EnablePeriClk+0x260>)
 8001994:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	e0f2      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3e      	ldr	r2, [pc, #248]	; (8001aa0 <EnablePeriClk+0x270>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <EnablePeriClk+0x260>)
 80019ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]
}
 80019bc:	e0e5      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <EnablePeriClk+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d108      	bne.n	80019d8 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <EnablePeriClk+0x258>)
 80019c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	e0d8      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <EnablePeriClk+0x278>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <EnablePeriClk+0x260>)
 80019e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	e0cb      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <EnablePeriClk+0x27c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d108      	bne.n	8001a0c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <EnablePeriClk+0x260>)
 80019fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	e0be      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <EnablePeriClk+0x280>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <EnablePeriClk+0x260>)
 8001a16:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	e0b1      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <EnablePeriClk+0x284>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <EnablePeriClk+0x260>)
 8001a30:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	e0a4      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <EnablePeriClk+0x288>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d139      	bne.n	8001abc <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <EnablePeriClk+0x258>)
 8001a4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	e097      	b.n	8001b8a <EnablePeriClk+0x35a>
 8001a5a:	bf00      	nop
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40023830 	.word	0x40023830
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40021400 	.word	0x40021400
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	40021c00 	.word	0x40021c00
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40013000 	.word	0x40013000
 8001a88:	40023844 	.word	0x40023844
 8001a8c:	40003800 	.word	0x40003800
 8001a90:	40023840 	.word	0x40023840
 8001a94:	40003c00 	.word	0x40003c00
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40005800 	.word	0x40005800
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	40004c00 	.word	0x40004c00
 8001ab4:	40005000 	.word	0x40005000
 8001ab8:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a35      	ldr	r2, [pc, #212]	; (8001b94 <EnablePeriClk+0x364>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <EnablePeriClk+0x368>)
 8001ac6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	e059      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <EnablePeriClk+0x36c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d108      	bne.n	8001af0 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <EnablePeriClk+0x368>)
 8001ae0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f043 0220 	orr.w	r2, r3, #32
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	e04c      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <EnablePeriClk+0x370>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <EnablePeriClk+0x374>)
 8001afa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	e03f      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <EnablePeriClk+0x378>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <EnablePeriClk+0x374>)
 8001b14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	e032      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d108      	bne.n	8001b3e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <EnablePeriClk+0x368>)
 8001b2e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	e025      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <EnablePeriClk+0x37c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d108      	bne.n	8001b58 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <EnablePeriClk+0x368>)
 8001b48:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	e018      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <EnablePeriClk+0x380>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <EnablePeriClk+0x368>)
 8001b62:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	e00b      	b.n	8001b8a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <EnablePeriClk+0x384>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d107      	bne.n	8001b8a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <EnablePeriClk+0x368>)
 8001b7c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f043 0208 	orr.w	r2, r3, #8
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40001000 	.word	0x40001000
 8001b98:	40023840 	.word	0x40023840
 8001b9c:	40001400 	.word	0x40001400
 8001ba0:	40026000 	.word	0x40026000
 8001ba4:	40023830 	.word	0x40023830
 8001ba8:	40026400 	.word	0x40026400
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00

08001bb8 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001bda:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001bde:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00a      	b.n	8001c24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0e:	f3af 8000 	nop.w
 8001c12:	4601      	mov	r1, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf0      	blt.n	8001c0e <_read+0x12>
  }

  return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc11 	bl	8000478 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf1      	blt.n	8001c48 <_write+0x12>
  }
  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_close>:

int _close(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c94:	605a      	str	r2, [r3, #4]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f000 f924 	bl	8001f4c <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	200000f8 	.word	0x200000f8
 8001d38:	20000110 	.word	0x20000110

08001d3c <main>:
extern uint8_t rx_packet_length;
extern uint8_t cmd_packet_length;
extern uint8_t nrf_packet_tx_state;

int main(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
	//NRF24L01 Radio Related Variables
	struct NRF_RADIO_CONFIG_t radio_config;
	uint8_t addr[] = {0xA1,0xA2,0xA3,0xA4,0xA5};      //nRF Radio Link Address
 8001d42:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <main+0xb4>)
 8001d44:	463b      	mov	r3, r7
 8001d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4a:	6018      	str	r0, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	7019      	strb	r1, [r3, #0]

	//Configure the Timer
	configure_delay_timer();
 8001d50:	f7fe fab6 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 8001d54:	f7fe fb28 	bl	80003a8 <configure_i2c>
	//configure_uart();

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <main+0xb8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fa33 	bl	80021cc <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 8001d66:	4824      	ldr	r0, [pc, #144]	; (8001df8 <main+0xbc>)
 8001d68:	f7fe fa92 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001d6c:	f7ff f8de 	bl	8000f2c <lcd_pcf8574_init>
	delay_us(100000);
 8001d70:	4822      	ldr	r0, [pc, #136]	; (8001dfc <main+0xc0>)
 8001d72:	f7fe fa8d 	bl	8000290 <delay_us>

	//Configure the SPI Port connecting to NRF24L01 Radio
	configure_spi();
 8001d76:	f7fe fac5 	bl	8000304 <configure_spi>

	//Configure the NRF24L01 Radio
	memset(&radio_config,0,sizeof(radio_config));
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2230      	movs	r2, #48	; 0x30
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f914 	bl	8001fb0 <memset>
	radio_config.radio_mode = NRF_RADIO_MODE_RX;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	723b      	strb	r3, [r7, #8]
	radio_config.radio_channel = 90;
 8001d8c:	235a      	movs	r3, #90	; 0x5a
 8001d8e:	727b      	strb	r3, [r7, #9]
	radio_config.radio_data_rate = NRF_RADIO_DATA_RATE_250K;
 8001d90:	2300      	movs	r3, #0
 8001d92:	72bb      	strb	r3, [r7, #10]
	radio_config.radio_pa_level = NRF_RADIO_PA_LEVEL_3;
 8001d94:	2303      	movs	r3, #3
 8001d96:	72fb      	strb	r3, [r7, #11]
	radio_config.radio_enable_data_pipes = (NRF_RADIO_ERX_P0);
 8001d98:	2301      	movs	r3, #1
 8001d9a:	733b      	strb	r3, [r7, #12]
	radio_config.radio_enable_auto_acknowledgements = (NRF_RADIO_ENAA_P0);
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	737b      	strb	r3, [r7, #13]
	radio_config.radio_address_width = NRF_RADIO_ADDRESS_WIDTH_5B;
 8001da0:	2303      	movs	r3, #3
 8001da2:	73bb      	strb	r3, [r7, #14]
	radio_config.radio_auto_retransmit_count = NRF_RADIO_ARC_3;
 8001da4:	2303      	movs	r3, #3
 8001da6:	73fb      	strb	r3, [r7, #15]
	radio_config.radio_auto_retransmit_delay = NRF_RADIO_ARD_1000US;
 8001da8:	2330      	movs	r3, #48	; 0x30
 8001daa:	743b      	strb	r3, [r7, #16]
	memcpy(&radio_config.radio_addr_p0, addr, sizeof(addr));
 8001dac:	f107 0311 	add.w	r3, r7, #17
 8001db0:	463a      	mov	r2, r7
 8001db2:	6810      	ldr	r0, [r2, #0]
 8001db4:	6018      	str	r0, [r3, #0]
 8001db6:	7912      	ldrb	r2, [r2, #4]
 8001db8:	711a      	strb	r2, [r3, #4]
	memcpy(&radio_config.radio_addr_peer, addr, sizeof(addr));
 8001dba:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001dbe:	463a      	mov	r2, r7
 8001dc0:	6810      	ldr	r0, [r2, #0]
 8001dc2:	6018      	str	r0, [r3, #0]
 8001dc4:	7912      	ldrb	r2, [r2, #4]
 8001dc6:	711a      	strb	r2, [r3, #4]
	radio_config.radio_dynamic_payload_length_feature = NRF_RADIO_DPL_FEATURE_ENABLE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	radio_config.radio_dynamic_payload_enable_pipes = NRF_RADIO_DPL_P0;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	radio_config.radio_ack_payload_feature = NRF_RADIO_ACK_PAYLOAD_FEATURE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	radio_config.radio_dynamic_ack_feature = NRF_RADIO_DYNAMIC_ACK_FEATURE_ENABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	configure_nrf_radio(&radio_config);
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f991 	bl	800110c <configure_nrf_radio>

	nrf_radio_enable_irq();
 8001dea:	f000 f841 	bl	8001e70 <nrf_radio_enable_irq>

	while(1)
 8001dee:	e7fe      	b.n	8001dee <main+0xb2>
 8001df0:	08003080 	.word	0x08003080
 8001df4:	20000008 	.word	0x20000008
 8001df8:	000f4240 	.word	0x000f4240
 8001dfc:	000186a0 	.word	0x000186a0

08001e00 <nrf_radio_packet_received_application_callback>:

	return 0;
}

void nrf_radio_packet_received_application_callback(uint8_t *buffer, uint8_t length)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
	//Ensure that printf is redirected to LCD is "syscalls.c" file

	//Print RH Data
	lcd_pcf8574_clear_screen();
 8001e0c:	f7ff f940 	bl	8001090 <lcd_pcf8574_clear_screen>
	delay_us(3000);
 8001e10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e14:	f7fe fa3c 	bl	8000290 <delay_us>
	lcd_pcf8574_return_home();
 8001e18:	f7ff f941 	bl	800109e <lcd_pcf8574_return_home>
	delay_us(3000);
 8001e1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e20:	f7fe fa36 	bl	8000290 <delay_us>
	printf("RH:   %d.%d",buffer[0],buffer[1]);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <nrf_radio_packet_received_application_callback+0x68>)
 8001e34:	f000 f9a2 	bl	800217c <iprintf>

	//Print TEMP Data
	lcd_pcf8574_set_position(1,0);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff f936 	bl	80010ac <lcd_pcf8574_set_position>
	delay_us(3000);
 8001e40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e44:	f7fe fa24 	bl	8000290 <delay_us>
	printf("TEMP: %d.%d C",buffer[2],buffer[3]);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3303      	adds	r3, #3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <nrf_radio_packet_received_application_callback+0x6c>)
 8001e5a:	f000 f98f 	bl	800217c <iprintf>

	return;
 8001e5e:	bf00      	nop
}
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08003088 	.word	0x08003088
 8001e6c:	08003094 	.word	0x08003094

08001e70 <nrf_radio_enable_irq>:

void nrf_radio_enable_irq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	//Configure and Enable the IRQ in EXTI Controller and NVIC
	configure_external_gpio_interrupt(RADIO_PORT,IRQ_PIN,EXTI_FALLING_TRIGGER,NRF_RADIO_IRQ_NUM);
 8001e74:	2306      	movs	r3, #6
 8001e76:	2201      	movs	r2, #1
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4802      	ldr	r0, [pc, #8]	; (8001e84 <nrf_radio_enable_irq+0x14>)
 8001e7c:	f7fe fb0a 	bl	8000494 <configure_external_gpio_interrupt>

	return;
 8001e80:	bf00      	nop
}
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40020000 	.word	0x40020000

08001e88 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;

	interrupt_source = nrf_radio_get_interrupt_source();
 8001e8e:	f7ff fae1 	bl	8001454 <nrf_radio_get_interrupt_source>
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]

	//printf("Interrupt Source: %d\r\n",interrupt_source);

	//Handle the interrupt source
	if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d120      	bne.n	8001ede <EXTI0_IRQHandler+0x56>
	{
		nrf_radio_retreive_packet_from_fifo();
 8001e9c:	f7ff fb00 	bl	80014a0 <nrf_radio_retreive_packet_from_fifo>
		nrf_radio_packet_received_application_callback((uint8_t *)(rx_buffer+1),(rx_packet_length-1));
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <EXTI0_IRQHandler+0x60>)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <EXTI0_IRQHandler+0x64>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7ff ffa7 	bl	8001e00 <nrf_radio_packet_received_application_callback>
		status = NRF_RADIO_INT_SRC_RX_DR_BITPOS;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	71bb      	strb	r3, [r7, #6]

		//printf("Status Before Clearing = %d\r\n",nrf_radio_get_status_register());

		//4. Clear the interrupt by writing to STATUS Register
		cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <EXTI0_IRQHandler+0x68>)
 8001eb8:	2227      	movs	r2, #39	; 0x27
 8001eba:	701a      	strb	r2, [r3, #0]
		cmd_buffer[1] = status;
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <EXTI0_IRQHandler+0x68>)
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	7053      	strb	r3, [r2, #1]
		cmd_packet_length = 2;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <EXTI0_IRQHandler+0x6c>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	701a      	strb	r2, [r3, #0]
		nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <EXTI0_IRQHandler+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <EXTI0_IRQHandler+0x68>)
 8001ed0:	f7ff fb58 	bl	8001584 <nrf_radio_cmd_write>

		delay_us(5000);
 8001ed4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ed8:	f7fe f9da 	bl	8000290 <delay_us>
	}

	return;
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
}
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000b5 	.word	0x200000b5
 8001eec:	200000f5 	.word	0x200000f5
 8001ef0:	200000d4 	.word	0x200000d4
 8001ef4:	200000f6 	.word	0x200000f6

08001ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001efc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopForever+0xe>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopForever+0x16>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f26:	f000 f817 	bl	8001f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2a:	f7ff ff07 	bl	8001d3c <main>

08001f2e <LoopForever>:

LoopForever:
  b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
  ldr   r0, =_estack
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f3c:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 8001f40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f44:	2000010c 	.word	0x2000010c

08001f48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <__errno>:
 8001f4c:	4b01      	ldr	r3, [pc, #4]	; (8001f54 <__errno+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008

08001f58 <__libc_init_array>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	4d0d      	ldr	r5, [pc, #52]	; (8001f90 <__libc_init_array+0x38>)
 8001f5c:	4c0d      	ldr	r4, [pc, #52]	; (8001f94 <__libc_init_array+0x3c>)
 8001f5e:	1b64      	subs	r4, r4, r5
 8001f60:	10a4      	asrs	r4, r4, #2
 8001f62:	2600      	movs	r6, #0
 8001f64:	42a6      	cmp	r6, r4
 8001f66:	d109      	bne.n	8001f7c <__libc_init_array+0x24>
 8001f68:	4d0b      	ldr	r5, [pc, #44]	; (8001f98 <__libc_init_array+0x40>)
 8001f6a:	4c0c      	ldr	r4, [pc, #48]	; (8001f9c <__libc_init_array+0x44>)
 8001f6c:	f001 f87c 	bl	8003068 <_init>
 8001f70:	1b64      	subs	r4, r4, r5
 8001f72:	10a4      	asrs	r4, r4, #2
 8001f74:	2600      	movs	r6, #0
 8001f76:	42a6      	cmp	r6, r4
 8001f78:	d105      	bne.n	8001f86 <__libc_init_array+0x2e>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f80:	4798      	blx	r3
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7ee      	b.n	8001f64 <__libc_init_array+0xc>
 8001f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f8a:	4798      	blx	r3
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	e7f2      	b.n	8001f76 <__libc_init_array+0x1e>
 8001f90:	0800313c 	.word	0x0800313c
 8001f94:	0800313c 	.word	0x0800313c
 8001f98:	0800313c 	.word	0x0800313c
 8001f9c:	08003140 	.word	0x08003140

08001fa0 <malloc>:
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <malloc+0xc>)
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f000 b875 	b.w	8002094 <_malloc_r>
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008

08001fb0 <memset>:
 8001fb0:	4402      	add	r2, r0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d100      	bne.n	8001fba <memset+0xa>
 8001fb8:	4770      	bx	lr
 8001fba:	f803 1b01 	strb.w	r1, [r3], #1
 8001fbe:	e7f9      	b.n	8001fb4 <memset+0x4>

08001fc0 <_free_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	2900      	cmp	r1, #0
 8001fc6:	d041      	beq.n	800204c <_free_r+0x8c>
 8001fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fcc:	1f0c      	subs	r4, r1, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfb8      	it	lt
 8001fd2:	18e4      	addlt	r4, r4, r3
 8001fd4:	f000 fca4 	bl	8002920 <__malloc_lock>
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <_free_r+0x90>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	b933      	cbnz	r3, 8001fec <_free_r+0x2c>
 8001fde:	6063      	str	r3, [r4, #4]
 8001fe0:	6014      	str	r4, [r2, #0]
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fe8:	f000 bca0 	b.w	800292c <__malloc_unlock>
 8001fec:	42a3      	cmp	r3, r4
 8001fee:	d908      	bls.n	8002002 <_free_r+0x42>
 8001ff0:	6820      	ldr	r0, [r4, #0]
 8001ff2:	1821      	adds	r1, r4, r0
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	bf01      	itttt	eq
 8001ff8:	6819      	ldreq	r1, [r3, #0]
 8001ffa:	685b      	ldreq	r3, [r3, #4]
 8001ffc:	1809      	addeq	r1, r1, r0
 8001ffe:	6021      	streq	r1, [r4, #0]
 8002000:	e7ed      	b.n	8001fde <_free_r+0x1e>
 8002002:	461a      	mov	r2, r3
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b10b      	cbz	r3, 800200c <_free_r+0x4c>
 8002008:	42a3      	cmp	r3, r4
 800200a:	d9fa      	bls.n	8002002 <_free_r+0x42>
 800200c:	6811      	ldr	r1, [r2, #0]
 800200e:	1850      	adds	r0, r2, r1
 8002010:	42a0      	cmp	r0, r4
 8002012:	d10b      	bne.n	800202c <_free_r+0x6c>
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	4401      	add	r1, r0
 8002018:	1850      	adds	r0, r2, r1
 800201a:	4283      	cmp	r3, r0
 800201c:	6011      	str	r1, [r2, #0]
 800201e:	d1e0      	bne.n	8001fe2 <_free_r+0x22>
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	6053      	str	r3, [r2, #4]
 8002026:	4401      	add	r1, r0
 8002028:	6011      	str	r1, [r2, #0]
 800202a:	e7da      	b.n	8001fe2 <_free_r+0x22>
 800202c:	d902      	bls.n	8002034 <_free_r+0x74>
 800202e:	230c      	movs	r3, #12
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	e7d6      	b.n	8001fe2 <_free_r+0x22>
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	1821      	adds	r1, r4, r0
 8002038:	428b      	cmp	r3, r1
 800203a:	bf04      	itt	eq
 800203c:	6819      	ldreq	r1, [r3, #0]
 800203e:	685b      	ldreq	r3, [r3, #4]
 8002040:	6063      	str	r3, [r4, #4]
 8002042:	bf04      	itt	eq
 8002044:	1809      	addeq	r1, r1, r0
 8002046:	6021      	streq	r1, [r4, #0]
 8002048:	6054      	str	r4, [r2, #4]
 800204a:	e7ca      	b.n	8001fe2 <_free_r+0x22>
 800204c:	bd38      	pop	{r3, r4, r5, pc}
 800204e:	bf00      	nop
 8002050:	200000fc 	.word	0x200000fc

08002054 <sbrk_aligned>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	4e0e      	ldr	r6, [pc, #56]	; (8002090 <sbrk_aligned+0x3c>)
 8002058:	460c      	mov	r4, r1
 800205a:	6831      	ldr	r1, [r6, #0]
 800205c:	4605      	mov	r5, r0
 800205e:	b911      	cbnz	r1, 8002066 <sbrk_aligned+0x12>
 8002060:	f000 f8a4 	bl	80021ac <_sbrk_r>
 8002064:	6030      	str	r0, [r6, #0]
 8002066:	4621      	mov	r1, r4
 8002068:	4628      	mov	r0, r5
 800206a:	f000 f89f 	bl	80021ac <_sbrk_r>
 800206e:	1c43      	adds	r3, r0, #1
 8002070:	d00a      	beq.n	8002088 <sbrk_aligned+0x34>
 8002072:	1cc4      	adds	r4, r0, #3
 8002074:	f024 0403 	bic.w	r4, r4, #3
 8002078:	42a0      	cmp	r0, r4
 800207a:	d007      	beq.n	800208c <sbrk_aligned+0x38>
 800207c:	1a21      	subs	r1, r4, r0
 800207e:	4628      	mov	r0, r5
 8002080:	f000 f894 	bl	80021ac <_sbrk_r>
 8002084:	3001      	adds	r0, #1
 8002086:	d101      	bne.n	800208c <sbrk_aligned+0x38>
 8002088:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800208c:	4620      	mov	r0, r4
 800208e:	bd70      	pop	{r4, r5, r6, pc}
 8002090:	20000100 	.word	0x20000100

08002094 <_malloc_r>:
 8002094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002098:	1ccd      	adds	r5, r1, #3
 800209a:	f025 0503 	bic.w	r5, r5, #3
 800209e:	3508      	adds	r5, #8
 80020a0:	2d0c      	cmp	r5, #12
 80020a2:	bf38      	it	cc
 80020a4:	250c      	movcc	r5, #12
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	4607      	mov	r7, r0
 80020aa:	db01      	blt.n	80020b0 <_malloc_r+0x1c>
 80020ac:	42a9      	cmp	r1, r5
 80020ae:	d905      	bls.n	80020bc <_malloc_r+0x28>
 80020b0:	230c      	movs	r3, #12
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	2600      	movs	r6, #0
 80020b6:	4630      	mov	r0, r6
 80020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020bc:	4e2e      	ldr	r6, [pc, #184]	; (8002178 <_malloc_r+0xe4>)
 80020be:	f000 fc2f 	bl	8002920 <__malloc_lock>
 80020c2:	6833      	ldr	r3, [r6, #0]
 80020c4:	461c      	mov	r4, r3
 80020c6:	bb34      	cbnz	r4, 8002116 <_malloc_r+0x82>
 80020c8:	4629      	mov	r1, r5
 80020ca:	4638      	mov	r0, r7
 80020cc:	f7ff ffc2 	bl	8002054 <sbrk_aligned>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	4604      	mov	r4, r0
 80020d4:	d14d      	bne.n	8002172 <_malloc_r+0xde>
 80020d6:	6834      	ldr	r4, [r6, #0]
 80020d8:	4626      	mov	r6, r4
 80020da:	2e00      	cmp	r6, #0
 80020dc:	d140      	bne.n	8002160 <_malloc_r+0xcc>
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	4631      	mov	r1, r6
 80020e2:	4638      	mov	r0, r7
 80020e4:	eb04 0803 	add.w	r8, r4, r3
 80020e8:	f000 f860 	bl	80021ac <_sbrk_r>
 80020ec:	4580      	cmp	r8, r0
 80020ee:	d13a      	bne.n	8002166 <_malloc_r+0xd2>
 80020f0:	6821      	ldr	r1, [r4, #0]
 80020f2:	3503      	adds	r5, #3
 80020f4:	1a6d      	subs	r5, r5, r1
 80020f6:	f025 0503 	bic.w	r5, r5, #3
 80020fa:	3508      	adds	r5, #8
 80020fc:	2d0c      	cmp	r5, #12
 80020fe:	bf38      	it	cc
 8002100:	250c      	movcc	r5, #12
 8002102:	4629      	mov	r1, r5
 8002104:	4638      	mov	r0, r7
 8002106:	f7ff ffa5 	bl	8002054 <sbrk_aligned>
 800210a:	3001      	adds	r0, #1
 800210c:	d02b      	beq.n	8002166 <_malloc_r+0xd2>
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	442b      	add	r3, r5
 8002112:	6023      	str	r3, [r4, #0]
 8002114:	e00e      	b.n	8002134 <_malloc_r+0xa0>
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	1b52      	subs	r2, r2, r5
 800211a:	d41e      	bmi.n	800215a <_malloc_r+0xc6>
 800211c:	2a0b      	cmp	r2, #11
 800211e:	d916      	bls.n	800214e <_malloc_r+0xba>
 8002120:	1961      	adds	r1, r4, r5
 8002122:	42a3      	cmp	r3, r4
 8002124:	6025      	str	r5, [r4, #0]
 8002126:	bf18      	it	ne
 8002128:	6059      	strne	r1, [r3, #4]
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	bf08      	it	eq
 800212e:	6031      	streq	r1, [r6, #0]
 8002130:	5162      	str	r2, [r4, r5]
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	4638      	mov	r0, r7
 8002136:	f104 060b 	add.w	r6, r4, #11
 800213a:	f000 fbf7 	bl	800292c <__malloc_unlock>
 800213e:	f026 0607 	bic.w	r6, r6, #7
 8002142:	1d23      	adds	r3, r4, #4
 8002144:	1af2      	subs	r2, r6, r3
 8002146:	d0b6      	beq.n	80020b6 <_malloc_r+0x22>
 8002148:	1b9b      	subs	r3, r3, r6
 800214a:	50a3      	str	r3, [r4, r2]
 800214c:	e7b3      	b.n	80020b6 <_malloc_r+0x22>
 800214e:	6862      	ldr	r2, [r4, #4]
 8002150:	42a3      	cmp	r3, r4
 8002152:	bf0c      	ite	eq
 8002154:	6032      	streq	r2, [r6, #0]
 8002156:	605a      	strne	r2, [r3, #4]
 8002158:	e7ec      	b.n	8002134 <_malloc_r+0xa0>
 800215a:	4623      	mov	r3, r4
 800215c:	6864      	ldr	r4, [r4, #4]
 800215e:	e7b2      	b.n	80020c6 <_malloc_r+0x32>
 8002160:	4634      	mov	r4, r6
 8002162:	6876      	ldr	r6, [r6, #4]
 8002164:	e7b9      	b.n	80020da <_malloc_r+0x46>
 8002166:	230c      	movs	r3, #12
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4638      	mov	r0, r7
 800216c:	f000 fbde 	bl	800292c <__malloc_unlock>
 8002170:	e7a1      	b.n	80020b6 <_malloc_r+0x22>
 8002172:	6025      	str	r5, [r4, #0]
 8002174:	e7de      	b.n	8002134 <_malloc_r+0xa0>
 8002176:	bf00      	nop
 8002178:	200000fc 	.word	0x200000fc

0800217c <iprintf>:
 800217c:	b40f      	push	{r0, r1, r2, r3}
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <iprintf+0x2c>)
 8002180:	b513      	push	{r0, r1, r4, lr}
 8002182:	681c      	ldr	r4, [r3, #0]
 8002184:	b124      	cbz	r4, 8002190 <iprintf+0x14>
 8002186:	69a3      	ldr	r3, [r4, #24]
 8002188:	b913      	cbnz	r3, 8002190 <iprintf+0x14>
 800218a:	4620      	mov	r0, r4
 800218c:	f000 fac2 	bl	8002714 <__sinit>
 8002190:	ab05      	add	r3, sp, #20
 8002192:	9a04      	ldr	r2, [sp, #16]
 8002194:	68a1      	ldr	r1, [r4, #8]
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	4620      	mov	r0, r4
 800219a:	f000 fbf5 	bl	8002988 <_vfiprintf_r>
 800219e:	b002      	add	sp, #8
 80021a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a4:	b004      	add	sp, #16
 80021a6:	4770      	bx	lr
 80021a8:	20000008 	.word	0x20000008

080021ac <_sbrk_r>:
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4d06      	ldr	r5, [pc, #24]	; (80021c8 <_sbrk_r+0x1c>)
 80021b0:	2300      	movs	r3, #0
 80021b2:	4604      	mov	r4, r0
 80021b4:	4608      	mov	r0, r1
 80021b6:	602b      	str	r3, [r5, #0]
 80021b8:	f7ff fd8a 	bl	8001cd0 <_sbrk>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_sbrk_r+0x1a>
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_sbrk_r+0x1a>
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	20000108 	.word	0x20000108

080021cc <setbuf>:
 80021cc:	2900      	cmp	r1, #0
 80021ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d2:	bf0c      	ite	eq
 80021d4:	2202      	moveq	r2, #2
 80021d6:	2200      	movne	r2, #0
 80021d8:	f000 b800 	b.w	80021dc <setvbuf>

080021dc <setvbuf>:
 80021dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021e0:	461d      	mov	r5, r3
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <setvbuf+0x17c>)
 80021e4:	681f      	ldr	r7, [r3, #0]
 80021e6:	4604      	mov	r4, r0
 80021e8:	460e      	mov	r6, r1
 80021ea:	4690      	mov	r8, r2
 80021ec:	b127      	cbz	r7, 80021f8 <setvbuf+0x1c>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	b913      	cbnz	r3, 80021f8 <setvbuf+0x1c>
 80021f2:	4638      	mov	r0, r7
 80021f4:	f000 fa8e 	bl	8002714 <__sinit>
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <setvbuf+0x180>)
 80021fa:	429c      	cmp	r4, r3
 80021fc:	d167      	bne.n	80022ce <setvbuf+0xf2>
 80021fe:	687c      	ldr	r4, [r7, #4]
 8002200:	f1b8 0f02 	cmp.w	r8, #2
 8002204:	d006      	beq.n	8002214 <setvbuf+0x38>
 8002206:	f1b8 0f01 	cmp.w	r8, #1
 800220a:	f200 809f 	bhi.w	800234c <setvbuf+0x170>
 800220e:	2d00      	cmp	r5, #0
 8002210:	f2c0 809c 	blt.w	800234c <setvbuf+0x170>
 8002214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002216:	07db      	lsls	r3, r3, #31
 8002218:	d405      	bmi.n	8002226 <setvbuf+0x4a>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	0598      	lsls	r0, r3, #22
 800221e:	d402      	bmi.n	8002226 <setvbuf+0x4a>
 8002220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002222:	f000 fb15 	bl	8002850 <__retarget_lock_acquire_recursive>
 8002226:	4621      	mov	r1, r4
 8002228:	4638      	mov	r0, r7
 800222a:	f000 f9df 	bl	80025ec <_fflush_r>
 800222e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002230:	b141      	cbz	r1, 8002244 <setvbuf+0x68>
 8002232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002236:	4299      	cmp	r1, r3
 8002238:	d002      	beq.n	8002240 <setvbuf+0x64>
 800223a:	4638      	mov	r0, r7
 800223c:	f7ff fec0 	bl	8001fc0 <_free_r>
 8002240:	2300      	movs	r3, #0
 8002242:	6363      	str	r3, [r4, #52]	; 0x34
 8002244:	2300      	movs	r3, #0
 8002246:	61a3      	str	r3, [r4, #24]
 8002248:	6063      	str	r3, [r4, #4]
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	0619      	lsls	r1, r3, #24
 800224e:	d503      	bpl.n	8002258 <setvbuf+0x7c>
 8002250:	6921      	ldr	r1, [r4, #16]
 8002252:	4638      	mov	r0, r7
 8002254:	f7ff feb4 	bl	8001fc0 <_free_r>
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f1b8 0f02 	cmp.w	r8, #2
 8002266:	81a3      	strh	r3, [r4, #12]
 8002268:	d06c      	beq.n	8002344 <setvbuf+0x168>
 800226a:	ab01      	add	r3, sp, #4
 800226c:	466a      	mov	r2, sp
 800226e:	4621      	mov	r1, r4
 8002270:	4638      	mov	r0, r7
 8002272:	f000 faef 	bl	8002854 <__swhatbuf_r>
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	4318      	orrs	r0, r3
 800227a:	81a0      	strh	r0, [r4, #12]
 800227c:	2d00      	cmp	r5, #0
 800227e:	d130      	bne.n	80022e2 <setvbuf+0x106>
 8002280:	9d00      	ldr	r5, [sp, #0]
 8002282:	4628      	mov	r0, r5
 8002284:	f7ff fe8c 	bl	8001fa0 <malloc>
 8002288:	4606      	mov	r6, r0
 800228a:	2800      	cmp	r0, #0
 800228c:	d155      	bne.n	800233a <setvbuf+0x15e>
 800228e:	f8dd 9000 	ldr.w	r9, [sp]
 8002292:	45a9      	cmp	r9, r5
 8002294:	d14a      	bne.n	800232c <setvbuf+0x150>
 8002296:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800229a:	2200      	movs	r2, #0
 800229c:	60a2      	str	r2, [r4, #8]
 800229e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80022a2:	6022      	str	r2, [r4, #0]
 80022a4:	6122      	str	r2, [r4, #16]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ac:	6162      	str	r2, [r4, #20]
 80022ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	07d2      	lsls	r2, r2, #31
 80022b6:	81a3      	strh	r3, [r4, #12]
 80022b8:	d405      	bmi.n	80022c6 <setvbuf+0xea>
 80022ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80022be:	d102      	bne.n	80022c6 <setvbuf+0xea>
 80022c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c2:	f000 fac6 	bl	8002852 <__retarget_lock_release_recursive>
 80022c6:	4628      	mov	r0, r5
 80022c8:	b003      	add	sp, #12
 80022ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <setvbuf+0x184>)
 80022d0:	429c      	cmp	r4, r3
 80022d2:	d101      	bne.n	80022d8 <setvbuf+0xfc>
 80022d4:	68bc      	ldr	r4, [r7, #8]
 80022d6:	e793      	b.n	8002200 <setvbuf+0x24>
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <setvbuf+0x188>)
 80022da:	429c      	cmp	r4, r3
 80022dc:	bf08      	it	eq
 80022de:	68fc      	ldreq	r4, [r7, #12]
 80022e0:	e78e      	b.n	8002200 <setvbuf+0x24>
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	d0cd      	beq.n	8002282 <setvbuf+0xa6>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	b913      	cbnz	r3, 80022f0 <setvbuf+0x114>
 80022ea:	4638      	mov	r0, r7
 80022ec:	f000 fa12 	bl	8002714 <__sinit>
 80022f0:	f1b8 0f01 	cmp.w	r8, #1
 80022f4:	bf08      	it	eq
 80022f6:	89a3      	ldrheq	r3, [r4, #12]
 80022f8:	6026      	str	r6, [r4, #0]
 80022fa:	bf04      	itt	eq
 80022fc:	f043 0301 	orreq.w	r3, r3, #1
 8002300:	81a3      	strheq	r3, [r4, #12]
 8002302:	89a2      	ldrh	r2, [r4, #12]
 8002304:	f012 0308 	ands.w	r3, r2, #8
 8002308:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800230c:	d01c      	beq.n	8002348 <setvbuf+0x16c>
 800230e:	07d3      	lsls	r3, r2, #31
 8002310:	bf41      	itttt	mi
 8002312:	2300      	movmi	r3, #0
 8002314:	426d      	negmi	r5, r5
 8002316:	60a3      	strmi	r3, [r4, #8]
 8002318:	61a5      	strmi	r5, [r4, #24]
 800231a:	bf58      	it	pl
 800231c:	60a5      	strpl	r5, [r4, #8]
 800231e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002320:	f015 0501 	ands.w	r5, r5, #1
 8002324:	d115      	bne.n	8002352 <setvbuf+0x176>
 8002326:	f412 7f00 	tst.w	r2, #512	; 0x200
 800232a:	e7c8      	b.n	80022be <setvbuf+0xe2>
 800232c:	4648      	mov	r0, r9
 800232e:	f7ff fe37 	bl	8001fa0 <malloc>
 8002332:	4606      	mov	r6, r0
 8002334:	2800      	cmp	r0, #0
 8002336:	d0ae      	beq.n	8002296 <setvbuf+0xba>
 8002338:	464d      	mov	r5, r9
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	81a3      	strh	r3, [r4, #12]
 8002342:	e7d0      	b.n	80022e6 <setvbuf+0x10a>
 8002344:	2500      	movs	r5, #0
 8002346:	e7a8      	b.n	800229a <setvbuf+0xbe>
 8002348:	60a3      	str	r3, [r4, #8]
 800234a:	e7e8      	b.n	800231e <setvbuf+0x142>
 800234c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002350:	e7b9      	b.n	80022c6 <setvbuf+0xea>
 8002352:	2500      	movs	r5, #0
 8002354:	e7b7      	b.n	80022c6 <setvbuf+0xea>
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	080030c8 	.word	0x080030c8
 8002360:	080030e8 	.word	0x080030e8
 8002364:	080030a8 	.word	0x080030a8

08002368 <__swbuf_r>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	460e      	mov	r6, r1
 800236c:	4614      	mov	r4, r2
 800236e:	4605      	mov	r5, r0
 8002370:	b118      	cbz	r0, 800237a <__swbuf_r+0x12>
 8002372:	6983      	ldr	r3, [r0, #24]
 8002374:	b90b      	cbnz	r3, 800237a <__swbuf_r+0x12>
 8002376:	f000 f9cd 	bl	8002714 <__sinit>
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <__swbuf_r+0x98>)
 800237c:	429c      	cmp	r4, r3
 800237e:	d12b      	bne.n	80023d8 <__swbuf_r+0x70>
 8002380:	686c      	ldr	r4, [r5, #4]
 8002382:	69a3      	ldr	r3, [r4, #24]
 8002384:	60a3      	str	r3, [r4, #8]
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	071a      	lsls	r2, r3, #28
 800238a:	d52f      	bpl.n	80023ec <__swbuf_r+0x84>
 800238c:	6923      	ldr	r3, [r4, #16]
 800238e:	b36b      	cbz	r3, 80023ec <__swbuf_r+0x84>
 8002390:	6923      	ldr	r3, [r4, #16]
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	1ac0      	subs	r0, r0, r3
 8002396:	6963      	ldr	r3, [r4, #20]
 8002398:	b2f6      	uxtb	r6, r6
 800239a:	4283      	cmp	r3, r0
 800239c:	4637      	mov	r7, r6
 800239e:	dc04      	bgt.n	80023aa <__swbuf_r+0x42>
 80023a0:	4621      	mov	r1, r4
 80023a2:	4628      	mov	r0, r5
 80023a4:	f000 f922 	bl	80025ec <_fflush_r>
 80023a8:	bb30      	cbnz	r0, 80023f8 <__swbuf_r+0x90>
 80023aa:	68a3      	ldr	r3, [r4, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60a3      	str	r3, [r4, #8]
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	6022      	str	r2, [r4, #0]
 80023b6:	701e      	strb	r6, [r3, #0]
 80023b8:	6963      	ldr	r3, [r4, #20]
 80023ba:	3001      	adds	r0, #1
 80023bc:	4283      	cmp	r3, r0
 80023be:	d004      	beq.n	80023ca <__swbuf_r+0x62>
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	07db      	lsls	r3, r3, #31
 80023c4:	d506      	bpl.n	80023d4 <__swbuf_r+0x6c>
 80023c6:	2e0a      	cmp	r6, #10
 80023c8:	d104      	bne.n	80023d4 <__swbuf_r+0x6c>
 80023ca:	4621      	mov	r1, r4
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 f90d 	bl	80025ec <_fflush_r>
 80023d2:	b988      	cbnz	r0, 80023f8 <__swbuf_r+0x90>
 80023d4:	4638      	mov	r0, r7
 80023d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <__swbuf_r+0x9c>)
 80023da:	429c      	cmp	r4, r3
 80023dc:	d101      	bne.n	80023e2 <__swbuf_r+0x7a>
 80023de:	68ac      	ldr	r4, [r5, #8]
 80023e0:	e7cf      	b.n	8002382 <__swbuf_r+0x1a>
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <__swbuf_r+0xa0>)
 80023e4:	429c      	cmp	r4, r3
 80023e6:	bf08      	it	eq
 80023e8:	68ec      	ldreq	r4, [r5, #12]
 80023ea:	e7ca      	b.n	8002382 <__swbuf_r+0x1a>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f000 f80c 	bl	800240c <__swsetup_r>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d0cb      	beq.n	8002390 <__swbuf_r+0x28>
 80023f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80023fc:	e7ea      	b.n	80023d4 <__swbuf_r+0x6c>
 80023fe:	bf00      	nop
 8002400:	080030c8 	.word	0x080030c8
 8002404:	080030e8 	.word	0x080030e8
 8002408:	080030a8 	.word	0x080030a8

0800240c <__swsetup_r>:
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <__swsetup_r+0xcc>)
 800240e:	b570      	push	{r4, r5, r6, lr}
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	4606      	mov	r6, r0
 8002414:	460c      	mov	r4, r1
 8002416:	b125      	cbz	r5, 8002422 <__swsetup_r+0x16>
 8002418:	69ab      	ldr	r3, [r5, #24]
 800241a:	b913      	cbnz	r3, 8002422 <__swsetup_r+0x16>
 800241c:	4628      	mov	r0, r5
 800241e:	f000 f979 	bl	8002714 <__sinit>
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <__swsetup_r+0xd0>)
 8002424:	429c      	cmp	r4, r3
 8002426:	d10f      	bne.n	8002448 <__swsetup_r+0x3c>
 8002428:	686c      	ldr	r4, [r5, #4]
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002430:	0719      	lsls	r1, r3, #28
 8002432:	d42c      	bmi.n	800248e <__swsetup_r+0x82>
 8002434:	06dd      	lsls	r5, r3, #27
 8002436:	d411      	bmi.n	800245c <__swsetup_r+0x50>
 8002438:	2309      	movs	r3, #9
 800243a:	6033      	str	r3, [r6, #0]
 800243c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002440:	81a3      	strh	r3, [r4, #12]
 8002442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002446:	e03e      	b.n	80024c6 <__swsetup_r+0xba>
 8002448:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <__swsetup_r+0xd4>)
 800244a:	429c      	cmp	r4, r3
 800244c:	d101      	bne.n	8002452 <__swsetup_r+0x46>
 800244e:	68ac      	ldr	r4, [r5, #8]
 8002450:	e7eb      	b.n	800242a <__swsetup_r+0x1e>
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <__swsetup_r+0xd8>)
 8002454:	429c      	cmp	r4, r3
 8002456:	bf08      	it	eq
 8002458:	68ec      	ldreq	r4, [r5, #12]
 800245a:	e7e6      	b.n	800242a <__swsetup_r+0x1e>
 800245c:	0758      	lsls	r0, r3, #29
 800245e:	d512      	bpl.n	8002486 <__swsetup_r+0x7a>
 8002460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002462:	b141      	cbz	r1, 8002476 <__swsetup_r+0x6a>
 8002464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002468:	4299      	cmp	r1, r3
 800246a:	d002      	beq.n	8002472 <__swsetup_r+0x66>
 800246c:	4630      	mov	r0, r6
 800246e:	f7ff fda7 	bl	8001fc0 <_free_r>
 8002472:	2300      	movs	r3, #0
 8002474:	6363      	str	r3, [r4, #52]	; 0x34
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	6063      	str	r3, [r4, #4]
 8002482:	6923      	ldr	r3, [r4, #16]
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	81a3      	strh	r3, [r4, #12]
 800248e:	6923      	ldr	r3, [r4, #16]
 8002490:	b94b      	cbnz	r3, 80024a6 <__swsetup_r+0x9a>
 8002492:	89a3      	ldrh	r3, [r4, #12]
 8002494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d003      	beq.n	80024a6 <__swsetup_r+0x9a>
 800249e:	4621      	mov	r1, r4
 80024a0:	4630      	mov	r0, r6
 80024a2:	f000 f9fd 	bl	80028a0 <__smakebuf_r>
 80024a6:	89a0      	ldrh	r0, [r4, #12]
 80024a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024ac:	f010 0301 	ands.w	r3, r0, #1
 80024b0:	d00a      	beq.n	80024c8 <__swsetup_r+0xbc>
 80024b2:	2300      	movs	r3, #0
 80024b4:	60a3      	str	r3, [r4, #8]
 80024b6:	6963      	ldr	r3, [r4, #20]
 80024b8:	425b      	negs	r3, r3
 80024ba:	61a3      	str	r3, [r4, #24]
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	b943      	cbnz	r3, 80024d2 <__swsetup_r+0xc6>
 80024c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024c4:	d1ba      	bne.n	800243c <__swsetup_r+0x30>
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	0781      	lsls	r1, r0, #30
 80024ca:	bf58      	it	pl
 80024cc:	6963      	ldrpl	r3, [r4, #20]
 80024ce:	60a3      	str	r3, [r4, #8]
 80024d0:	e7f4      	b.n	80024bc <__swsetup_r+0xb0>
 80024d2:	2000      	movs	r0, #0
 80024d4:	e7f7      	b.n	80024c6 <__swsetup_r+0xba>
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008
 80024dc:	080030c8 	.word	0x080030c8
 80024e0:	080030e8 	.word	0x080030e8
 80024e4:	080030a8 	.word	0x080030a8

080024e8 <__sflush_r>:
 80024e8:	898a      	ldrh	r2, [r1, #12]
 80024ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ec:	4605      	mov	r5, r0
 80024ee:	0710      	lsls	r0, r2, #28
 80024f0:	460c      	mov	r4, r1
 80024f2:	d457      	bmi.n	80025a4 <__sflush_r+0xbc>
 80024f4:	684b      	ldr	r3, [r1, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	dc04      	bgt.n	8002504 <__sflush_r+0x1c>
 80024fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	dc01      	bgt.n	8002504 <__sflush_r+0x1c>
 8002500:	2000      	movs	r0, #0
 8002502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002506:	2e00      	cmp	r6, #0
 8002508:	d0fa      	beq.n	8002500 <__sflush_r+0x18>
 800250a:	2300      	movs	r3, #0
 800250c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002510:	682f      	ldr	r7, [r5, #0]
 8002512:	602b      	str	r3, [r5, #0]
 8002514:	d032      	beq.n	800257c <__sflush_r+0x94>
 8002516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	075a      	lsls	r2, r3, #29
 800251c:	d505      	bpl.n	800252a <__sflush_r+0x42>
 800251e:	6863      	ldr	r3, [r4, #4]
 8002520:	1ac0      	subs	r0, r0, r3
 8002522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002524:	b10b      	cbz	r3, 800252a <__sflush_r+0x42>
 8002526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002528:	1ac0      	subs	r0, r0, r3
 800252a:	2300      	movs	r3, #0
 800252c:	4602      	mov	r2, r0
 800252e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002530:	6a21      	ldr	r1, [r4, #32]
 8002532:	4628      	mov	r0, r5
 8002534:	47b0      	blx	r6
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	89a3      	ldrh	r3, [r4, #12]
 800253a:	d106      	bne.n	800254a <__sflush_r+0x62>
 800253c:	6829      	ldr	r1, [r5, #0]
 800253e:	291d      	cmp	r1, #29
 8002540:	d82c      	bhi.n	800259c <__sflush_r+0xb4>
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <__sflush_r+0x100>)
 8002544:	40ca      	lsrs	r2, r1
 8002546:	07d6      	lsls	r6, r2, #31
 8002548:	d528      	bpl.n	800259c <__sflush_r+0xb4>
 800254a:	2200      	movs	r2, #0
 800254c:	6062      	str	r2, [r4, #4]
 800254e:	04d9      	lsls	r1, r3, #19
 8002550:	6922      	ldr	r2, [r4, #16]
 8002552:	6022      	str	r2, [r4, #0]
 8002554:	d504      	bpl.n	8002560 <__sflush_r+0x78>
 8002556:	1c42      	adds	r2, r0, #1
 8002558:	d101      	bne.n	800255e <__sflush_r+0x76>
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	b903      	cbnz	r3, 8002560 <__sflush_r+0x78>
 800255e:	6560      	str	r0, [r4, #84]	; 0x54
 8002560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002562:	602f      	str	r7, [r5, #0]
 8002564:	2900      	cmp	r1, #0
 8002566:	d0cb      	beq.n	8002500 <__sflush_r+0x18>
 8002568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800256c:	4299      	cmp	r1, r3
 800256e:	d002      	beq.n	8002576 <__sflush_r+0x8e>
 8002570:	4628      	mov	r0, r5
 8002572:	f7ff fd25 	bl	8001fc0 <_free_r>
 8002576:	2000      	movs	r0, #0
 8002578:	6360      	str	r0, [r4, #52]	; 0x34
 800257a:	e7c2      	b.n	8002502 <__sflush_r+0x1a>
 800257c:	6a21      	ldr	r1, [r4, #32]
 800257e:	2301      	movs	r3, #1
 8002580:	4628      	mov	r0, r5
 8002582:	47b0      	blx	r6
 8002584:	1c41      	adds	r1, r0, #1
 8002586:	d1c7      	bne.n	8002518 <__sflush_r+0x30>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0c4      	beq.n	8002518 <__sflush_r+0x30>
 800258e:	2b1d      	cmp	r3, #29
 8002590:	d001      	beq.n	8002596 <__sflush_r+0xae>
 8002592:	2b16      	cmp	r3, #22
 8002594:	d101      	bne.n	800259a <__sflush_r+0xb2>
 8002596:	602f      	str	r7, [r5, #0]
 8002598:	e7b2      	b.n	8002500 <__sflush_r+0x18>
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a0:	81a3      	strh	r3, [r4, #12]
 80025a2:	e7ae      	b.n	8002502 <__sflush_r+0x1a>
 80025a4:	690f      	ldr	r7, [r1, #16]
 80025a6:	2f00      	cmp	r7, #0
 80025a8:	d0aa      	beq.n	8002500 <__sflush_r+0x18>
 80025aa:	0793      	lsls	r3, r2, #30
 80025ac:	680e      	ldr	r6, [r1, #0]
 80025ae:	bf08      	it	eq
 80025b0:	694b      	ldreq	r3, [r1, #20]
 80025b2:	600f      	str	r7, [r1, #0]
 80025b4:	bf18      	it	ne
 80025b6:	2300      	movne	r3, #0
 80025b8:	1bf6      	subs	r6, r6, r7
 80025ba:	608b      	str	r3, [r1, #8]
 80025bc:	2e00      	cmp	r6, #0
 80025be:	dd9f      	ble.n	8002500 <__sflush_r+0x18>
 80025c0:	6a21      	ldr	r1, [r4, #32]
 80025c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80025c6:	4633      	mov	r3, r6
 80025c8:	463a      	mov	r2, r7
 80025ca:	4628      	mov	r0, r5
 80025cc:	47e0      	blx	ip
 80025ce:	2800      	cmp	r0, #0
 80025d0:	dc06      	bgt.n	80025e0 <__sflush_r+0xf8>
 80025d2:	89a3      	ldrh	r3, [r4, #12]
 80025d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d8:	81a3      	strh	r3, [r4, #12]
 80025da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025de:	e790      	b.n	8002502 <__sflush_r+0x1a>
 80025e0:	4407      	add	r7, r0
 80025e2:	1a36      	subs	r6, r6, r0
 80025e4:	e7ea      	b.n	80025bc <__sflush_r+0xd4>
 80025e6:	bf00      	nop
 80025e8:	20400001 	.word	0x20400001

080025ec <_fflush_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	690b      	ldr	r3, [r1, #16]
 80025f0:	4605      	mov	r5, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	b913      	cbnz	r3, 80025fc <_fflush_r+0x10>
 80025f6:	2500      	movs	r5, #0
 80025f8:	4628      	mov	r0, r5
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	b118      	cbz	r0, 8002606 <_fflush_r+0x1a>
 80025fe:	6983      	ldr	r3, [r0, #24]
 8002600:	b90b      	cbnz	r3, 8002606 <_fflush_r+0x1a>
 8002602:	f000 f887 	bl	8002714 <__sinit>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <_fflush_r+0x6c>)
 8002608:	429c      	cmp	r4, r3
 800260a:	d11b      	bne.n	8002644 <_fflush_r+0x58>
 800260c:	686c      	ldr	r4, [r5, #4]
 800260e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ef      	beq.n	80025f6 <_fflush_r+0xa>
 8002616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002618:	07d0      	lsls	r0, r2, #31
 800261a:	d404      	bmi.n	8002626 <_fflush_r+0x3a>
 800261c:	0599      	lsls	r1, r3, #22
 800261e:	d402      	bmi.n	8002626 <_fflush_r+0x3a>
 8002620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002622:	f000 f915 	bl	8002850 <__retarget_lock_acquire_recursive>
 8002626:	4628      	mov	r0, r5
 8002628:	4621      	mov	r1, r4
 800262a:	f7ff ff5d 	bl	80024e8 <__sflush_r>
 800262e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002630:	07da      	lsls	r2, r3, #31
 8002632:	4605      	mov	r5, r0
 8002634:	d4e0      	bmi.n	80025f8 <_fflush_r+0xc>
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	059b      	lsls	r3, r3, #22
 800263a:	d4dd      	bmi.n	80025f8 <_fflush_r+0xc>
 800263c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800263e:	f000 f908 	bl	8002852 <__retarget_lock_release_recursive>
 8002642:	e7d9      	b.n	80025f8 <_fflush_r+0xc>
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <_fflush_r+0x70>)
 8002646:	429c      	cmp	r4, r3
 8002648:	d101      	bne.n	800264e <_fflush_r+0x62>
 800264a:	68ac      	ldr	r4, [r5, #8]
 800264c:	e7df      	b.n	800260e <_fflush_r+0x22>
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <_fflush_r+0x74>)
 8002650:	429c      	cmp	r4, r3
 8002652:	bf08      	it	eq
 8002654:	68ec      	ldreq	r4, [r5, #12]
 8002656:	e7da      	b.n	800260e <_fflush_r+0x22>
 8002658:	080030c8 	.word	0x080030c8
 800265c:	080030e8 	.word	0x080030e8
 8002660:	080030a8 	.word	0x080030a8

08002664 <std>:
 8002664:	2300      	movs	r3, #0
 8002666:	b510      	push	{r4, lr}
 8002668:	4604      	mov	r4, r0
 800266a:	e9c0 3300 	strd	r3, r3, [r0]
 800266e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002672:	6083      	str	r3, [r0, #8]
 8002674:	8181      	strh	r1, [r0, #12]
 8002676:	6643      	str	r3, [r0, #100]	; 0x64
 8002678:	81c2      	strh	r2, [r0, #14]
 800267a:	6183      	str	r3, [r0, #24]
 800267c:	4619      	mov	r1, r3
 800267e:	2208      	movs	r2, #8
 8002680:	305c      	adds	r0, #92	; 0x5c
 8002682:	f7ff fc95 	bl	8001fb0 <memset>
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <std+0x38>)
 8002688:	6263      	str	r3, [r4, #36]	; 0x24
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <std+0x3c>)
 800268c:	62a3      	str	r3, [r4, #40]	; 0x28
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <std+0x40>)
 8002690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <std+0x44>)
 8002694:	6224      	str	r4, [r4, #32]
 8002696:	6323      	str	r3, [r4, #48]	; 0x30
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	08002f11 	.word	0x08002f11
 80026a0:	08002f33 	.word	0x08002f33
 80026a4:	08002f6b 	.word	0x08002f6b
 80026a8:	08002f8f 	.word	0x08002f8f

080026ac <_cleanup_r>:
 80026ac:	4901      	ldr	r1, [pc, #4]	; (80026b4 <_cleanup_r+0x8>)
 80026ae:	f000 b8af 	b.w	8002810 <_fwalk_reent>
 80026b2:	bf00      	nop
 80026b4:	080025ed 	.word	0x080025ed

080026b8 <__sfmoreglue>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	2268      	movs	r2, #104	; 0x68
 80026bc:	1e4d      	subs	r5, r1, #1
 80026be:	4355      	muls	r5, r2
 80026c0:	460e      	mov	r6, r1
 80026c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026c6:	f7ff fce5 	bl	8002094 <_malloc_r>
 80026ca:	4604      	mov	r4, r0
 80026cc:	b140      	cbz	r0, 80026e0 <__sfmoreglue+0x28>
 80026ce:	2100      	movs	r1, #0
 80026d0:	e9c0 1600 	strd	r1, r6, [r0]
 80026d4:	300c      	adds	r0, #12
 80026d6:	60a0      	str	r0, [r4, #8]
 80026d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026dc:	f7ff fc68 	bl	8001fb0 <memset>
 80026e0:	4620      	mov	r0, r4
 80026e2:	bd70      	pop	{r4, r5, r6, pc}

080026e4 <__sfp_lock_acquire>:
 80026e4:	4801      	ldr	r0, [pc, #4]	; (80026ec <__sfp_lock_acquire+0x8>)
 80026e6:	f000 b8b3 	b.w	8002850 <__retarget_lock_acquire_recursive>
 80026ea:	bf00      	nop
 80026ec:	20000105 	.word	0x20000105

080026f0 <__sfp_lock_release>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sfp_lock_release+0x8>)
 80026f2:	f000 b8ae 	b.w	8002852 <__retarget_lock_release_recursive>
 80026f6:	bf00      	nop
 80026f8:	20000105 	.word	0x20000105

080026fc <__sinit_lock_acquire>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__sinit_lock_acquire+0x8>)
 80026fe:	f000 b8a7 	b.w	8002850 <__retarget_lock_acquire_recursive>
 8002702:	bf00      	nop
 8002704:	20000106 	.word	0x20000106

08002708 <__sinit_lock_release>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__sinit_lock_release+0x8>)
 800270a:	f000 b8a2 	b.w	8002852 <__retarget_lock_release_recursive>
 800270e:	bf00      	nop
 8002710:	20000106 	.word	0x20000106

08002714 <__sinit>:
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	f7ff fff0 	bl	80026fc <__sinit_lock_acquire>
 800271c:	69a3      	ldr	r3, [r4, #24]
 800271e:	b11b      	cbz	r3, 8002728 <__sinit+0x14>
 8002720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002724:	f7ff bff0 	b.w	8002708 <__sinit_lock_release>
 8002728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800272c:	6523      	str	r3, [r4, #80]	; 0x50
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <__sinit+0x68>)
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <__sinit+0x6c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	62a2      	str	r2, [r4, #40]	; 0x28
 8002736:	42a3      	cmp	r3, r4
 8002738:	bf04      	itt	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	61a3      	streq	r3, [r4, #24]
 800273e:	4620      	mov	r0, r4
 8002740:	f000 f820 	bl	8002784 <__sfp>
 8002744:	6060      	str	r0, [r4, #4]
 8002746:	4620      	mov	r0, r4
 8002748:	f000 f81c 	bl	8002784 <__sfp>
 800274c:	60a0      	str	r0, [r4, #8]
 800274e:	4620      	mov	r0, r4
 8002750:	f000 f818 	bl	8002784 <__sfp>
 8002754:	2200      	movs	r2, #0
 8002756:	60e0      	str	r0, [r4, #12]
 8002758:	2104      	movs	r1, #4
 800275a:	6860      	ldr	r0, [r4, #4]
 800275c:	f7ff ff82 	bl	8002664 <std>
 8002760:	68a0      	ldr	r0, [r4, #8]
 8002762:	2201      	movs	r2, #1
 8002764:	2109      	movs	r1, #9
 8002766:	f7ff ff7d 	bl	8002664 <std>
 800276a:	68e0      	ldr	r0, [r4, #12]
 800276c:	2202      	movs	r2, #2
 800276e:	2112      	movs	r1, #18
 8002770:	f7ff ff78 	bl	8002664 <std>
 8002774:	2301      	movs	r3, #1
 8002776:	61a3      	str	r3, [r4, #24]
 8002778:	e7d2      	b.n	8002720 <__sinit+0xc>
 800277a:	bf00      	nop
 800277c:	080030a4 	.word	0x080030a4
 8002780:	080026ad 	.word	0x080026ad

08002784 <__sfp>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	4607      	mov	r7, r0
 8002788:	f7ff ffac 	bl	80026e4 <__sfp_lock_acquire>
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <__sfp+0x84>)
 800278e:	681e      	ldr	r6, [r3, #0]
 8002790:	69b3      	ldr	r3, [r6, #24]
 8002792:	b913      	cbnz	r3, 800279a <__sfp+0x16>
 8002794:	4630      	mov	r0, r6
 8002796:	f7ff ffbd 	bl	8002714 <__sinit>
 800279a:	3648      	adds	r6, #72	; 0x48
 800279c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	d503      	bpl.n	80027ac <__sfp+0x28>
 80027a4:	6833      	ldr	r3, [r6, #0]
 80027a6:	b30b      	cbz	r3, 80027ec <__sfp+0x68>
 80027a8:	6836      	ldr	r6, [r6, #0]
 80027aa:	e7f7      	b.n	800279c <__sfp+0x18>
 80027ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027b0:	b9d5      	cbnz	r5, 80027e8 <__sfp+0x64>
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <__sfp+0x88>)
 80027b4:	60e3      	str	r3, [r4, #12]
 80027b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027ba:	6665      	str	r5, [r4, #100]	; 0x64
 80027bc:	f000 f847 	bl	800284e <__retarget_lock_init_recursive>
 80027c0:	f7ff ff96 	bl	80026f0 <__sfp_lock_release>
 80027c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027cc:	6025      	str	r5, [r4, #0]
 80027ce:	61a5      	str	r5, [r4, #24]
 80027d0:	2208      	movs	r2, #8
 80027d2:	4629      	mov	r1, r5
 80027d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027d8:	f7ff fbea 	bl	8001fb0 <memset>
 80027dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027e4:	4620      	mov	r0, r4
 80027e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e8:	3468      	adds	r4, #104	; 0x68
 80027ea:	e7d9      	b.n	80027a0 <__sfp+0x1c>
 80027ec:	2104      	movs	r1, #4
 80027ee:	4638      	mov	r0, r7
 80027f0:	f7ff ff62 	bl	80026b8 <__sfmoreglue>
 80027f4:	4604      	mov	r4, r0
 80027f6:	6030      	str	r0, [r6, #0]
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1d5      	bne.n	80027a8 <__sfp+0x24>
 80027fc:	f7ff ff78 	bl	80026f0 <__sfp_lock_release>
 8002800:	230c      	movs	r3, #12
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	e7ee      	b.n	80027e4 <__sfp+0x60>
 8002806:	bf00      	nop
 8002808:	080030a4 	.word	0x080030a4
 800280c:	ffff0001 	.word	0xffff0001

08002810 <_fwalk_reent>:
 8002810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002814:	4606      	mov	r6, r0
 8002816:	4688      	mov	r8, r1
 8002818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800281c:	2700      	movs	r7, #0
 800281e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002822:	f1b9 0901 	subs.w	r9, r9, #1
 8002826:	d505      	bpl.n	8002834 <_fwalk_reent+0x24>
 8002828:	6824      	ldr	r4, [r4, #0]
 800282a:	2c00      	cmp	r4, #0
 800282c:	d1f7      	bne.n	800281e <_fwalk_reent+0xe>
 800282e:	4638      	mov	r0, r7
 8002830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002834:	89ab      	ldrh	r3, [r5, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d907      	bls.n	800284a <_fwalk_reent+0x3a>
 800283a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800283e:	3301      	adds	r3, #1
 8002840:	d003      	beq.n	800284a <_fwalk_reent+0x3a>
 8002842:	4629      	mov	r1, r5
 8002844:	4630      	mov	r0, r6
 8002846:	47c0      	blx	r8
 8002848:	4307      	orrs	r7, r0
 800284a:	3568      	adds	r5, #104	; 0x68
 800284c:	e7e9      	b.n	8002822 <_fwalk_reent+0x12>

0800284e <__retarget_lock_init_recursive>:
 800284e:	4770      	bx	lr

08002850 <__retarget_lock_acquire_recursive>:
 8002850:	4770      	bx	lr

08002852 <__retarget_lock_release_recursive>:
 8002852:	4770      	bx	lr

08002854 <__swhatbuf_r>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	460e      	mov	r6, r1
 8002858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285c:	2900      	cmp	r1, #0
 800285e:	b096      	sub	sp, #88	; 0x58
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	da08      	bge.n	8002878 <__swhatbuf_r+0x24>
 8002866:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	602a      	str	r2, [r5, #0]
 800286e:	061a      	lsls	r2, r3, #24
 8002870:	d410      	bmi.n	8002894 <__swhatbuf_r+0x40>
 8002872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002876:	e00e      	b.n	8002896 <__swhatbuf_r+0x42>
 8002878:	466a      	mov	r2, sp
 800287a:	f000 fbaf 	bl	8002fdc <_fstat_r>
 800287e:	2800      	cmp	r0, #0
 8002880:	dbf1      	blt.n	8002866 <__swhatbuf_r+0x12>
 8002882:	9a01      	ldr	r2, [sp, #4]
 8002884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800288c:	425a      	negs	r2, r3
 800288e:	415a      	adcs	r2, r3
 8002890:	602a      	str	r2, [r5, #0]
 8002892:	e7ee      	b.n	8002872 <__swhatbuf_r+0x1e>
 8002894:	2340      	movs	r3, #64	; 0x40
 8002896:	2000      	movs	r0, #0
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	b016      	add	sp, #88	; 0x58
 800289c:	bd70      	pop	{r4, r5, r6, pc}
	...

080028a0 <__smakebuf_r>:
 80028a0:	898b      	ldrh	r3, [r1, #12]
 80028a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028a4:	079d      	lsls	r5, r3, #30
 80028a6:	4606      	mov	r6, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	d507      	bpl.n	80028bc <__smakebuf_r+0x1c>
 80028ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	6123      	str	r3, [r4, #16]
 80028b4:	2301      	movs	r3, #1
 80028b6:	6163      	str	r3, [r4, #20]
 80028b8:	b002      	add	sp, #8
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
 80028bc:	ab01      	add	r3, sp, #4
 80028be:	466a      	mov	r2, sp
 80028c0:	f7ff ffc8 	bl	8002854 <__swhatbuf_r>
 80028c4:	9900      	ldr	r1, [sp, #0]
 80028c6:	4605      	mov	r5, r0
 80028c8:	4630      	mov	r0, r6
 80028ca:	f7ff fbe3 	bl	8002094 <_malloc_r>
 80028ce:	b948      	cbnz	r0, 80028e4 <__smakebuf_r+0x44>
 80028d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d4:	059a      	lsls	r2, r3, #22
 80028d6:	d4ef      	bmi.n	80028b8 <__smakebuf_r+0x18>
 80028d8:	f023 0303 	bic.w	r3, r3, #3
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	e7e3      	b.n	80028ac <__smakebuf_r+0xc>
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <__smakebuf_r+0x7c>)
 80028e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	6020      	str	r0, [r4, #0]
 80028ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	9b00      	ldr	r3, [sp, #0]
 80028f4:	6163      	str	r3, [r4, #20]
 80028f6:	9b01      	ldr	r3, [sp, #4]
 80028f8:	6120      	str	r0, [r4, #16]
 80028fa:	b15b      	cbz	r3, 8002914 <__smakebuf_r+0x74>
 80028fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002900:	4630      	mov	r0, r6
 8002902:	f000 fb7d 	bl	8003000 <_isatty_r>
 8002906:	b128      	cbz	r0, 8002914 <__smakebuf_r+0x74>
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	81a3      	strh	r3, [r4, #12]
 8002914:	89a0      	ldrh	r0, [r4, #12]
 8002916:	4305      	orrs	r5, r0
 8002918:	81a5      	strh	r5, [r4, #12]
 800291a:	e7cd      	b.n	80028b8 <__smakebuf_r+0x18>
 800291c:	080026ad 	.word	0x080026ad

08002920 <__malloc_lock>:
 8002920:	4801      	ldr	r0, [pc, #4]	; (8002928 <__malloc_lock+0x8>)
 8002922:	f7ff bf95 	b.w	8002850 <__retarget_lock_acquire_recursive>
 8002926:	bf00      	nop
 8002928:	20000104 	.word	0x20000104

0800292c <__malloc_unlock>:
 800292c:	4801      	ldr	r0, [pc, #4]	; (8002934 <__malloc_unlock+0x8>)
 800292e:	f7ff bf90 	b.w	8002852 <__retarget_lock_release_recursive>
 8002932:	bf00      	nop
 8002934:	20000104 	.word	0x20000104

08002938 <__sfputc_r>:
 8002938:	6893      	ldr	r3, [r2, #8]
 800293a:	3b01      	subs	r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	b410      	push	{r4}
 8002940:	6093      	str	r3, [r2, #8]
 8002942:	da07      	bge.n	8002954 <__sfputc_r+0x1c>
 8002944:	6994      	ldr	r4, [r2, #24]
 8002946:	42a3      	cmp	r3, r4
 8002948:	db01      	blt.n	800294e <__sfputc_r+0x16>
 800294a:	290a      	cmp	r1, #10
 800294c:	d102      	bne.n	8002954 <__sfputc_r+0x1c>
 800294e:	bc10      	pop	{r4}
 8002950:	f7ff bd0a 	b.w	8002368 <__swbuf_r>
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	1c58      	adds	r0, r3, #1
 8002958:	6010      	str	r0, [r2, #0]
 800295a:	7019      	strb	r1, [r3, #0]
 800295c:	4608      	mov	r0, r1
 800295e:	bc10      	pop	{r4}
 8002960:	4770      	bx	lr

08002962 <__sfputs_r>:
 8002962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002964:	4606      	mov	r6, r0
 8002966:	460f      	mov	r7, r1
 8002968:	4614      	mov	r4, r2
 800296a:	18d5      	adds	r5, r2, r3
 800296c:	42ac      	cmp	r4, r5
 800296e:	d101      	bne.n	8002974 <__sfputs_r+0x12>
 8002970:	2000      	movs	r0, #0
 8002972:	e007      	b.n	8002984 <__sfputs_r+0x22>
 8002974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002978:	463a      	mov	r2, r7
 800297a:	4630      	mov	r0, r6
 800297c:	f7ff ffdc 	bl	8002938 <__sfputc_r>
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d1f3      	bne.n	800296c <__sfputs_r+0xa>
 8002984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002988 <_vfiprintf_r>:
 8002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800298c:	460d      	mov	r5, r1
 800298e:	b09d      	sub	sp, #116	; 0x74
 8002990:	4614      	mov	r4, r2
 8002992:	4698      	mov	r8, r3
 8002994:	4606      	mov	r6, r0
 8002996:	b118      	cbz	r0, 80029a0 <_vfiprintf_r+0x18>
 8002998:	6983      	ldr	r3, [r0, #24]
 800299a:	b90b      	cbnz	r3, 80029a0 <_vfiprintf_r+0x18>
 800299c:	f7ff feba 	bl	8002714 <__sinit>
 80029a0:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <_vfiprintf_r+0x240>)
 80029a2:	429d      	cmp	r5, r3
 80029a4:	d11b      	bne.n	80029de <_vfiprintf_r+0x56>
 80029a6:	6875      	ldr	r5, [r6, #4]
 80029a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029aa:	07d9      	lsls	r1, r3, #31
 80029ac:	d405      	bmi.n	80029ba <_vfiprintf_r+0x32>
 80029ae:	89ab      	ldrh	r3, [r5, #12]
 80029b0:	059a      	lsls	r2, r3, #22
 80029b2:	d402      	bmi.n	80029ba <_vfiprintf_r+0x32>
 80029b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029b6:	f7ff ff4b 	bl	8002850 <__retarget_lock_acquire_recursive>
 80029ba:	89ab      	ldrh	r3, [r5, #12]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	d501      	bpl.n	80029c4 <_vfiprintf_r+0x3c>
 80029c0:	692b      	ldr	r3, [r5, #16]
 80029c2:	b9eb      	cbnz	r3, 8002a00 <_vfiprintf_r+0x78>
 80029c4:	4629      	mov	r1, r5
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7ff fd20 	bl	800240c <__swsetup_r>
 80029cc:	b1c0      	cbz	r0, 8002a00 <_vfiprintf_r+0x78>
 80029ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029d0:	07dc      	lsls	r4, r3, #31
 80029d2:	d50e      	bpl.n	80029f2 <_vfiprintf_r+0x6a>
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d8:	b01d      	add	sp, #116	; 0x74
 80029da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029de:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <_vfiprintf_r+0x244>)
 80029e0:	429d      	cmp	r5, r3
 80029e2:	d101      	bne.n	80029e8 <_vfiprintf_r+0x60>
 80029e4:	68b5      	ldr	r5, [r6, #8]
 80029e6:	e7df      	b.n	80029a8 <_vfiprintf_r+0x20>
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <_vfiprintf_r+0x248>)
 80029ea:	429d      	cmp	r5, r3
 80029ec:	bf08      	it	eq
 80029ee:	68f5      	ldreq	r5, [r6, #12]
 80029f0:	e7da      	b.n	80029a8 <_vfiprintf_r+0x20>
 80029f2:	89ab      	ldrh	r3, [r5, #12]
 80029f4:	0598      	lsls	r0, r3, #22
 80029f6:	d4ed      	bmi.n	80029d4 <_vfiprintf_r+0x4c>
 80029f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029fa:	f7ff ff2a 	bl	8002852 <__retarget_lock_release_recursive>
 80029fe:	e7e9      	b.n	80029d4 <_vfiprintf_r+0x4c>
 8002a00:	2300      	movs	r3, #0
 8002a02:	9309      	str	r3, [sp, #36]	; 0x24
 8002a04:	2320      	movs	r3, #32
 8002a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a0e:	2330      	movs	r3, #48	; 0x30
 8002a10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002bd4 <_vfiprintf_r+0x24c>
 8002a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a18:	f04f 0901 	mov.w	r9, #1
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	469a      	mov	sl, r3
 8002a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a24:	b10a      	cbz	r2, 8002a2a <_vfiprintf_r+0xa2>
 8002a26:	2a25      	cmp	r2, #37	; 0x25
 8002a28:	d1f9      	bne.n	8002a1e <_vfiprintf_r+0x96>
 8002a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8002a2e:	d00b      	beq.n	8002a48 <_vfiprintf_r+0xc0>
 8002a30:	465b      	mov	r3, fp
 8002a32:	4622      	mov	r2, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	4630      	mov	r0, r6
 8002a38:	f7ff ff93 	bl	8002962 <__sfputs_r>
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	f000 80aa 	beq.w	8002b96 <_vfiprintf_r+0x20e>
 8002a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a44:	445a      	add	r2, fp
 8002a46:	9209      	str	r2, [sp, #36]	; 0x24
 8002a48:	f89a 3000 	ldrb.w	r3, [sl]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a2 	beq.w	8002b96 <_vfiprintf_r+0x20e>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a5c:	f10a 0a01 	add.w	sl, sl, #1
 8002a60:	9304      	str	r3, [sp, #16]
 8002a62:	9307      	str	r3, [sp, #28]
 8002a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a68:	931a      	str	r3, [sp, #104]	; 0x68
 8002a6a:	4654      	mov	r4, sl
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a72:	4858      	ldr	r0, [pc, #352]	; (8002bd4 <_vfiprintf_r+0x24c>)
 8002a74:	f7fd fbbc 	bl	80001f0 <memchr>
 8002a78:	9a04      	ldr	r2, [sp, #16]
 8002a7a:	b9d8      	cbnz	r0, 8002ab4 <_vfiprintf_r+0x12c>
 8002a7c:	06d1      	lsls	r1, r2, #27
 8002a7e:	bf44      	itt	mi
 8002a80:	2320      	movmi	r3, #32
 8002a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a86:	0713      	lsls	r3, r2, #28
 8002a88:	bf44      	itt	mi
 8002a8a:	232b      	movmi	r3, #43	; 0x2b
 8002a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a90:	f89a 3000 	ldrb.w	r3, [sl]
 8002a94:	2b2a      	cmp	r3, #42	; 0x2a
 8002a96:	d015      	beq.n	8002ac4 <_vfiprintf_r+0x13c>
 8002a98:	9a07      	ldr	r2, [sp, #28]
 8002a9a:	4654      	mov	r4, sl
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aa8:	3b30      	subs	r3, #48	; 0x30
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	d94e      	bls.n	8002b4c <_vfiprintf_r+0x1c4>
 8002aae:	b1b0      	cbz	r0, 8002ade <_vfiprintf_r+0x156>
 8002ab0:	9207      	str	r2, [sp, #28]
 8002ab2:	e014      	b.n	8002ade <_vfiprintf_r+0x156>
 8002ab4:	eba0 0308 	sub.w	r3, r0, r8
 8002ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8002abc:	4313      	orrs	r3, r2
 8002abe:	9304      	str	r3, [sp, #16]
 8002ac0:	46a2      	mov	sl, r4
 8002ac2:	e7d2      	b.n	8002a6a <_vfiprintf_r+0xe2>
 8002ac4:	9b03      	ldr	r3, [sp, #12]
 8002ac6:	1d19      	adds	r1, r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	9103      	str	r1, [sp, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bfbb      	ittet	lt
 8002ad0:	425b      	neglt	r3, r3
 8002ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8002ad6:	9307      	strge	r3, [sp, #28]
 8002ad8:	9307      	strlt	r3, [sp, #28]
 8002ada:	bfb8      	it	lt
 8002adc:	9204      	strlt	r2, [sp, #16]
 8002ade:	7823      	ldrb	r3, [r4, #0]
 8002ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ae2:	d10c      	bne.n	8002afe <_vfiprintf_r+0x176>
 8002ae4:	7863      	ldrb	r3, [r4, #1]
 8002ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae8:	d135      	bne.n	8002b56 <_vfiprintf_r+0x1ce>
 8002aea:	9b03      	ldr	r3, [sp, #12]
 8002aec:	1d1a      	adds	r2, r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	9203      	str	r2, [sp, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002afa:	3402      	adds	r4, #2
 8002afc:	9305      	str	r3, [sp, #20]
 8002afe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002bd8 <_vfiprintf_r+0x250>
 8002b02:	7821      	ldrb	r1, [r4, #0]
 8002b04:	2203      	movs	r2, #3
 8002b06:	4650      	mov	r0, sl
 8002b08:	f7fd fb72 	bl	80001f0 <memchr>
 8002b0c:	b140      	cbz	r0, 8002b20 <_vfiprintf_r+0x198>
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	eba0 000a 	sub.w	r0, r0, sl
 8002b14:	fa03 f000 	lsl.w	r0, r3, r0
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	3401      	adds	r4, #1
 8002b1e:	9304      	str	r3, [sp, #16]
 8002b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b24:	482d      	ldr	r0, [pc, #180]	; (8002bdc <_vfiprintf_r+0x254>)
 8002b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	f7fd fb60 	bl	80001f0 <memchr>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d03f      	beq.n	8002bb4 <_vfiprintf_r+0x22c>
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <_vfiprintf_r+0x258>)
 8002b36:	bb1b      	cbnz	r3, 8002b80 <_vfiprintf_r+0x1f8>
 8002b38:	9b03      	ldr	r3, [sp, #12]
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	3308      	adds	r3, #8
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b46:	443b      	add	r3, r7
 8002b48:	9309      	str	r3, [sp, #36]	; 0x24
 8002b4a:	e767      	b.n	8002a1c <_vfiprintf_r+0x94>
 8002b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b50:	460c      	mov	r4, r1
 8002b52:	2001      	movs	r0, #1
 8002b54:	e7a5      	b.n	8002aa2 <_vfiprintf_r+0x11a>
 8002b56:	2300      	movs	r3, #0
 8002b58:	3401      	adds	r4, #1
 8002b5a:	9305      	str	r3, [sp, #20]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 0c0a 	mov.w	ip, #10
 8002b62:	4620      	mov	r0, r4
 8002b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b68:	3a30      	subs	r2, #48	; 0x30
 8002b6a:	2a09      	cmp	r2, #9
 8002b6c:	d903      	bls.n	8002b76 <_vfiprintf_r+0x1ee>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0c5      	beq.n	8002afe <_vfiprintf_r+0x176>
 8002b72:	9105      	str	r1, [sp, #20]
 8002b74:	e7c3      	b.n	8002afe <_vfiprintf_r+0x176>
 8002b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e7f0      	b.n	8002b62 <_vfiprintf_r+0x1da>
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	462a      	mov	r2, r5
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <_vfiprintf_r+0x25c>)
 8002b88:	a904      	add	r1, sp, #16
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f3af 8000 	nop.w
 8002b90:	4607      	mov	r7, r0
 8002b92:	1c78      	adds	r0, r7, #1
 8002b94:	d1d6      	bne.n	8002b44 <_vfiprintf_r+0x1bc>
 8002b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b98:	07d9      	lsls	r1, r3, #31
 8002b9a:	d405      	bmi.n	8002ba8 <_vfiprintf_r+0x220>
 8002b9c:	89ab      	ldrh	r3, [r5, #12]
 8002b9e:	059a      	lsls	r2, r3, #22
 8002ba0:	d402      	bmi.n	8002ba8 <_vfiprintf_r+0x220>
 8002ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ba4:	f7ff fe55 	bl	8002852 <__retarget_lock_release_recursive>
 8002ba8:	89ab      	ldrh	r3, [r5, #12]
 8002baa:	065b      	lsls	r3, r3, #25
 8002bac:	f53f af12 	bmi.w	80029d4 <_vfiprintf_r+0x4c>
 8002bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bb2:	e711      	b.n	80029d8 <_vfiprintf_r+0x50>
 8002bb4:	ab03      	add	r3, sp, #12
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	462a      	mov	r2, r5
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <_vfiprintf_r+0x25c>)
 8002bbc:	a904      	add	r1, sp, #16
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 f880 	bl	8002cc4 <_printf_i>
 8002bc4:	e7e4      	b.n	8002b90 <_vfiprintf_r+0x208>
 8002bc6:	bf00      	nop
 8002bc8:	080030c8 	.word	0x080030c8
 8002bcc:	080030e8 	.word	0x080030e8
 8002bd0:	080030a8 	.word	0x080030a8
 8002bd4:	08003108 	.word	0x08003108
 8002bd8:	0800310e 	.word	0x0800310e
 8002bdc:	08003112 	.word	0x08003112
 8002be0:	00000000 	.word	0x00000000
 8002be4:	08002963 	.word	0x08002963

08002be8 <_printf_common>:
 8002be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bec:	4616      	mov	r6, r2
 8002bee:	4699      	mov	r9, r3
 8002bf0:	688a      	ldr	r2, [r1, #8]
 8002bf2:	690b      	ldr	r3, [r1, #16]
 8002bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bfb8      	it	lt
 8002bfc:	4613      	movlt	r3, r2
 8002bfe:	6033      	str	r3, [r6, #0]
 8002c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c04:	4607      	mov	r7, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	b10a      	cbz	r2, 8002c0e <_printf_common+0x26>
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	6033      	str	r3, [r6, #0]
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	0699      	lsls	r1, r3, #26
 8002c12:	bf42      	ittt	mi
 8002c14:	6833      	ldrmi	r3, [r6, #0]
 8002c16:	3302      	addmi	r3, #2
 8002c18:	6033      	strmi	r3, [r6, #0]
 8002c1a:	6825      	ldr	r5, [r4, #0]
 8002c1c:	f015 0506 	ands.w	r5, r5, #6
 8002c20:	d106      	bne.n	8002c30 <_printf_common+0x48>
 8002c22:	f104 0a19 	add.w	sl, r4, #25
 8002c26:	68e3      	ldr	r3, [r4, #12]
 8002c28:	6832      	ldr	r2, [r6, #0]
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	dc26      	bgt.n	8002c7e <_printf_common+0x96>
 8002c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c34:	1e13      	subs	r3, r2, #0
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	bf18      	it	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	0692      	lsls	r2, r2, #26
 8002c3e:	d42b      	bmi.n	8002c98 <_printf_common+0xb0>
 8002c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c44:	4649      	mov	r1, r9
 8002c46:	4638      	mov	r0, r7
 8002c48:	47c0      	blx	r8
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	d01e      	beq.n	8002c8c <_printf_common+0xa4>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	68e5      	ldr	r5, [r4, #12]
 8002c52:	6832      	ldr	r2, [r6, #0]
 8002c54:	f003 0306 	and.w	r3, r3, #6
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	bf08      	it	eq
 8002c5c:	1aad      	subeq	r5, r5, r2
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	6922      	ldr	r2, [r4, #16]
 8002c62:	bf0c      	ite	eq
 8002c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c68:	2500      	movne	r5, #0
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	bfc4      	itt	gt
 8002c6e:	1a9b      	subgt	r3, r3, r2
 8002c70:	18ed      	addgt	r5, r5, r3
 8002c72:	2600      	movs	r6, #0
 8002c74:	341a      	adds	r4, #26
 8002c76:	42b5      	cmp	r5, r6
 8002c78:	d11a      	bne.n	8002cb0 <_printf_common+0xc8>
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e008      	b.n	8002c90 <_printf_common+0xa8>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4652      	mov	r2, sl
 8002c82:	4649      	mov	r1, r9
 8002c84:	4638      	mov	r0, r7
 8002c86:	47c0      	blx	r8
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d103      	bne.n	8002c94 <_printf_common+0xac>
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7c6      	b.n	8002c26 <_printf_common+0x3e>
 8002c98:	18e1      	adds	r1, r4, r3
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	2030      	movs	r0, #48	; 0x30
 8002c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca2:	4422      	add	r2, r4
 8002ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cac:	3302      	adds	r3, #2
 8002cae:	e7c7      	b.n	8002c40 <_printf_common+0x58>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	4638      	mov	r0, r7
 8002cb8:	47c0      	blx	r8
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0e6      	beq.n	8002c8c <_printf_common+0xa4>
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7d9      	b.n	8002c76 <_printf_common+0x8e>
	...

08002cc4 <_printf_i>:
 8002cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	7e0f      	ldrb	r7, [r1, #24]
 8002cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ccc:	2f78      	cmp	r7, #120	; 0x78
 8002cce:	4691      	mov	r9, r2
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	469a      	mov	sl, r3
 8002cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cda:	d807      	bhi.n	8002cec <_printf_i+0x28>
 8002cdc:	2f62      	cmp	r7, #98	; 0x62
 8002cde:	d80a      	bhi.n	8002cf6 <_printf_i+0x32>
 8002ce0:	2f00      	cmp	r7, #0
 8002ce2:	f000 80d8 	beq.w	8002e96 <_printf_i+0x1d2>
 8002ce6:	2f58      	cmp	r7, #88	; 0x58
 8002ce8:	f000 80a3 	beq.w	8002e32 <_printf_i+0x16e>
 8002cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cf4:	e03a      	b.n	8002d6c <_printf_i+0xa8>
 8002cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cfa:	2b15      	cmp	r3, #21
 8002cfc:	d8f6      	bhi.n	8002cec <_printf_i+0x28>
 8002cfe:	a101      	add	r1, pc, #4	; (adr r1, 8002d04 <_printf_i+0x40>)
 8002d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d04:	08002d5d 	.word	0x08002d5d
 8002d08:	08002d71 	.word	0x08002d71
 8002d0c:	08002ced 	.word	0x08002ced
 8002d10:	08002ced 	.word	0x08002ced
 8002d14:	08002ced 	.word	0x08002ced
 8002d18:	08002ced 	.word	0x08002ced
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002ced 	.word	0x08002ced
 8002d24:	08002ced 	.word	0x08002ced
 8002d28:	08002ced 	.word	0x08002ced
 8002d2c:	08002ced 	.word	0x08002ced
 8002d30:	08002e7d 	.word	0x08002e7d
 8002d34:	08002da1 	.word	0x08002da1
 8002d38:	08002e5f 	.word	0x08002e5f
 8002d3c:	08002ced 	.word	0x08002ced
 8002d40:	08002ced 	.word	0x08002ced
 8002d44:	08002e9f 	.word	0x08002e9f
 8002d48:	08002ced 	.word	0x08002ced
 8002d4c:	08002da1 	.word	0x08002da1
 8002d50:	08002ced 	.word	0x08002ced
 8002d54:	08002ced 	.word	0x08002ced
 8002d58:	08002e67 	.word	0x08002e67
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	602a      	str	r2, [r5, #0]
 8002d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0a3      	b.n	8002eb8 <_printf_i+0x1f4>
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	6829      	ldr	r1, [r5, #0]
 8002d74:	0606      	lsls	r6, r0, #24
 8002d76:	f101 0304 	add.w	r3, r1, #4
 8002d7a:	d50a      	bpl.n	8002d92 <_printf_i+0xce>
 8002d7c:	680e      	ldr	r6, [r1, #0]
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	2e00      	cmp	r6, #0
 8002d82:	da03      	bge.n	8002d8c <_printf_i+0xc8>
 8002d84:	232d      	movs	r3, #45	; 0x2d
 8002d86:	4276      	negs	r6, r6
 8002d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d8c:	485e      	ldr	r0, [pc, #376]	; (8002f08 <_printf_i+0x244>)
 8002d8e:	230a      	movs	r3, #10
 8002d90:	e019      	b.n	8002dc6 <_printf_i+0x102>
 8002d92:	680e      	ldr	r6, [r1, #0]
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d9a:	bf18      	it	ne
 8002d9c:	b236      	sxthne	r6, r6
 8002d9e:	e7ef      	b.n	8002d80 <_printf_i+0xbc>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	1d19      	adds	r1, r3, #4
 8002da6:	6029      	str	r1, [r5, #0]
 8002da8:	0601      	lsls	r1, r0, #24
 8002daa:	d501      	bpl.n	8002db0 <_printf_i+0xec>
 8002dac:	681e      	ldr	r6, [r3, #0]
 8002dae:	e002      	b.n	8002db6 <_printf_i+0xf2>
 8002db0:	0646      	lsls	r6, r0, #25
 8002db2:	d5fb      	bpl.n	8002dac <_printf_i+0xe8>
 8002db4:	881e      	ldrh	r6, [r3, #0]
 8002db6:	4854      	ldr	r0, [pc, #336]	; (8002f08 <_printf_i+0x244>)
 8002db8:	2f6f      	cmp	r7, #111	; 0x6f
 8002dba:	bf0c      	ite	eq
 8002dbc:	2308      	moveq	r3, #8
 8002dbe:	230a      	movne	r3, #10
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dc6:	6865      	ldr	r5, [r4, #4]
 8002dc8:	60a5      	str	r5, [r4, #8]
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	bfa2      	ittt	ge
 8002dce:	6821      	ldrge	r1, [r4, #0]
 8002dd0:	f021 0104 	bicge.w	r1, r1, #4
 8002dd4:	6021      	strge	r1, [r4, #0]
 8002dd6:	b90e      	cbnz	r6, 8002ddc <_printf_i+0x118>
 8002dd8:	2d00      	cmp	r5, #0
 8002dda:	d04d      	beq.n	8002e78 <_printf_i+0x1b4>
 8002ddc:	4615      	mov	r5, r2
 8002dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8002de2:	fb03 6711 	mls	r7, r3, r1, r6
 8002de6:	5dc7      	ldrb	r7, [r0, r7]
 8002de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002dec:	4637      	mov	r7, r6
 8002dee:	42bb      	cmp	r3, r7
 8002df0:	460e      	mov	r6, r1
 8002df2:	d9f4      	bls.n	8002dde <_printf_i+0x11a>
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d10b      	bne.n	8002e10 <_printf_i+0x14c>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	07de      	lsls	r6, r3, #31
 8002dfc:	d508      	bpl.n	8002e10 <_printf_i+0x14c>
 8002dfe:	6923      	ldr	r3, [r4, #16]
 8002e00:	6861      	ldr	r1, [r4, #4]
 8002e02:	4299      	cmp	r1, r3
 8002e04:	bfde      	ittt	le
 8002e06:	2330      	movle	r3, #48	; 0x30
 8002e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e10:	1b52      	subs	r2, r2, r5
 8002e12:	6122      	str	r2, [r4, #16]
 8002e14:	f8cd a000 	str.w	sl, [sp]
 8002e18:	464b      	mov	r3, r9
 8002e1a:	aa03      	add	r2, sp, #12
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f7ff fee2 	bl	8002be8 <_printf_common>
 8002e24:	3001      	adds	r0, #1
 8002e26:	d14c      	bne.n	8002ec2 <_printf_i+0x1fe>
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e2c:	b004      	add	sp, #16
 8002e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e32:	4835      	ldr	r0, [pc, #212]	; (8002f08 <_printf_i+0x244>)
 8002e34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e38:	6829      	ldr	r1, [r5, #0]
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e40:	6029      	str	r1, [r5, #0]
 8002e42:	061d      	lsls	r5, r3, #24
 8002e44:	d514      	bpl.n	8002e70 <_printf_i+0x1ac>
 8002e46:	07df      	lsls	r7, r3, #31
 8002e48:	bf44      	itt	mi
 8002e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e4e:	6023      	strmi	r3, [r4, #0]
 8002e50:	b91e      	cbnz	r6, 8002e5a <_printf_i+0x196>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	f023 0320 	bic.w	r3, r3, #32
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	e7b0      	b.n	8002dc0 <_printf_i+0xfc>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	2378      	movs	r3, #120	; 0x78
 8002e68:	4828      	ldr	r0, [pc, #160]	; (8002f0c <_printf_i+0x248>)
 8002e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e6e:	e7e3      	b.n	8002e38 <_printf_i+0x174>
 8002e70:	0659      	lsls	r1, r3, #25
 8002e72:	bf48      	it	mi
 8002e74:	b2b6      	uxthmi	r6, r6
 8002e76:	e7e6      	b.n	8002e46 <_printf_i+0x182>
 8002e78:	4615      	mov	r5, r2
 8002e7a:	e7bb      	b.n	8002df4 <_printf_i+0x130>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	6826      	ldr	r6, [r4, #0]
 8002e80:	6961      	ldr	r1, [r4, #20]
 8002e82:	1d18      	adds	r0, r3, #4
 8002e84:	6028      	str	r0, [r5, #0]
 8002e86:	0635      	lsls	r5, r6, #24
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	d501      	bpl.n	8002e90 <_printf_i+0x1cc>
 8002e8c:	6019      	str	r1, [r3, #0]
 8002e8e:	e002      	b.n	8002e96 <_printf_i+0x1d2>
 8002e90:	0670      	lsls	r0, r6, #25
 8002e92:	d5fb      	bpl.n	8002e8c <_printf_i+0x1c8>
 8002e94:	8019      	strh	r1, [r3, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	6123      	str	r3, [r4, #16]
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	e7ba      	b.n	8002e14 <_printf_i+0x150>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	1d1a      	adds	r2, r3, #4
 8002ea2:	602a      	str	r2, [r5, #0]
 8002ea4:	681d      	ldr	r5, [r3, #0]
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f7fd f9a0 	bl	80001f0 <memchr>
 8002eb0:	b108      	cbz	r0, 8002eb6 <_printf_i+0x1f2>
 8002eb2:	1b40      	subs	r0, r0, r5
 8002eb4:	6060      	str	r0, [r4, #4]
 8002eb6:	6863      	ldr	r3, [r4, #4]
 8002eb8:	6123      	str	r3, [r4, #16]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec0:	e7a8      	b.n	8002e14 <_printf_i+0x150>
 8002ec2:	6923      	ldr	r3, [r4, #16]
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	4640      	mov	r0, r8
 8002eca:	47d0      	blx	sl
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d0ab      	beq.n	8002e28 <_printf_i+0x164>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	079b      	lsls	r3, r3, #30
 8002ed4:	d413      	bmi.n	8002efe <_printf_i+0x23a>
 8002ed6:	68e0      	ldr	r0, [r4, #12]
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	4298      	cmp	r0, r3
 8002edc:	bfb8      	it	lt
 8002ede:	4618      	movlt	r0, r3
 8002ee0:	e7a4      	b.n	8002e2c <_printf_i+0x168>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	4640      	mov	r0, r8
 8002eea:	47d0      	blx	sl
 8002eec:	3001      	adds	r0, #1
 8002eee:	d09b      	beq.n	8002e28 <_printf_i+0x164>
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	68e3      	ldr	r3, [r4, #12]
 8002ef4:	9903      	ldr	r1, [sp, #12]
 8002ef6:	1a5b      	subs	r3, r3, r1
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dcf2      	bgt.n	8002ee2 <_printf_i+0x21e>
 8002efc:	e7eb      	b.n	8002ed6 <_printf_i+0x212>
 8002efe:	2500      	movs	r5, #0
 8002f00:	f104 0619 	add.w	r6, r4, #25
 8002f04:	e7f5      	b.n	8002ef2 <_printf_i+0x22e>
 8002f06:	bf00      	nop
 8002f08:	08003119 	.word	0x08003119
 8002f0c:	0800312a 	.word	0x0800312a

08002f10 <__sread>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	460c      	mov	r4, r1
 8002f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f18:	f000 f894 	bl	8003044 <_read_r>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	bfab      	itete	ge
 8002f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f22:	89a3      	ldrhlt	r3, [r4, #12]
 8002f24:	181b      	addge	r3, r3, r0
 8002f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f2a:	bfac      	ite	ge
 8002f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f2e:	81a3      	strhlt	r3, [r4, #12]
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <__swrite>:
 8002f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f36:	461f      	mov	r7, r3
 8002f38:	898b      	ldrh	r3, [r1, #12]
 8002f3a:	05db      	lsls	r3, r3, #23
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	4616      	mov	r6, r2
 8002f42:	d505      	bpl.n	8002f50 <__swrite+0x1e>
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f868 	bl	8003020 <_lseek_r>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	4632      	mov	r2, r6
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4628      	mov	r0, r5
 8002f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	f000 b817 	b.w	8002f98 <_write_r>

08002f6a <__sseek>:
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f72:	f000 f855 	bl	8003020 <_lseek_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	bf15      	itete	ne
 8002f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f86:	81a3      	strheq	r3, [r4, #12]
 8002f88:	bf18      	it	ne
 8002f8a:	81a3      	strhne	r3, [r4, #12]
 8002f8c:	bd10      	pop	{r4, pc}

08002f8e <__sclose>:
 8002f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f92:	f000 b813 	b.w	8002fbc <_close_r>
	...

08002f98 <_write_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4d07      	ldr	r5, [pc, #28]	; (8002fb8 <_write_r+0x20>)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fe fe45 	bl	8001c36 <_write>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_write_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_write_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	20000108 	.word	0x20000108

08002fbc <_close_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4d06      	ldr	r5, [pc, #24]	; (8002fd8 <_close_r+0x1c>)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	f7fe fe51 	bl	8001c6e <_close>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_close_r+0x1a>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_close_r+0x1a>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000108 	.word	0x20000108

08002fdc <_fstat_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	4d07      	ldr	r5, [pc, #28]	; (8002ffc <_fstat_r+0x20>)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	f7fe fe4b 	bl	8001c84 <_fstat>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d102      	bne.n	8002ff8 <_fstat_r+0x1c>
 8002ff2:	682b      	ldr	r3, [r5, #0]
 8002ff4:	b103      	cbz	r3, 8002ff8 <_fstat_r+0x1c>
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000108 	.word	0x20000108

08003000 <_isatty_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4d06      	ldr	r5, [pc, #24]	; (800301c <_isatty_r+0x1c>)
 8003004:	2300      	movs	r3, #0
 8003006:	4604      	mov	r4, r0
 8003008:	4608      	mov	r0, r1
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	f7fe fe49 	bl	8001ca2 <_isatty>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d102      	bne.n	800301a <_isatty_r+0x1a>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	b103      	cbz	r3, 800301a <_isatty_r+0x1a>
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	20000108 	.word	0x20000108

08003020 <_lseek_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4d07      	ldr	r5, [pc, #28]	; (8003040 <_lseek_r+0x20>)
 8003024:	4604      	mov	r4, r0
 8003026:	4608      	mov	r0, r1
 8003028:	4611      	mov	r1, r2
 800302a:	2200      	movs	r2, #0
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	f7fe fe41 	bl	8001cb6 <_lseek>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_lseek_r+0x1e>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_lseek_r+0x1e>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	20000108 	.word	0x20000108

08003044 <_read_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d07      	ldr	r5, [pc, #28]	; (8003064 <_read_r+0x20>)
 8003048:	4604      	mov	r4, r0
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	2200      	movs	r2, #0
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fe fdd2 	bl	8001bfc <_read>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_read_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_read_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000108 	.word	0x20000108

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
