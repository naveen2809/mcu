
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001390  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015fc  080015fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015fc  080015fc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015fc  080015fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015fc  080015fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001600  08001600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000084  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002416  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008d4  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00022d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000230  00000000  00000000  00023038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b28  00000000  00000000  00023268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000402f  00000000  00000000  00024d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cbde  00000000  00000000  00028dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003599d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d3c  00000000  00000000  000359f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001520 	.word	0x08001520

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001520 	.word	0x08001520

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <configure_delay_timer>:
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
}

void configure_delay_timer(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <configure_delay_timer+0x3c>)
 80001fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000202:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 8000204:	2228      	movs	r2, #40	; 0x28
 8000206:	2100      	movs	r1, #0
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <configure_delay_timer+0x40>)
 800020a:	f001 f87d 	bl	8001308 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <configure_delay_timer+0x3c>)
 8000210:	2200      	movs	r2, #0
 8000212:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <configure_delay_timer+0x3c>)
 8000216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800021a:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 800021c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000220:	f000 fbc6 	bl	80009b0 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <configure_delay_timer+0x3c>)
 8000226:	f000 f867 	bl	80002f8 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <configure_delay_timer+0x3c>)
 800022c:	f000 faa5 	bl	800077a <General_Purpose_Timer_PeripheralEnable>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000084 	.word	0x20000084
 8000238:	20000088 	.word	0x20000088

0800023c <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000240:	482a      	ldr	r0, [pc, #168]	; (80002ec <configure_uart+0xb0>)
 8000242:	f000 fbb5 	bl	80009b0 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000246:	2202      	movs	r2, #2
 8000248:	2105      	movs	r1, #5
 800024a:	4828      	ldr	r0, [pc, #160]	; (80002ec <configure_uart+0xb0>)
 800024c:	f000 faa6 	bl	800079c <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000250:	2202      	movs	r2, #2
 8000252:	2106      	movs	r1, #6
 8000254:	4825      	ldr	r0, [pc, #148]	; (80002ec <configure_uart+0xb0>)
 8000256:	f000 faa1 	bl	800079c <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 800025a:	2207      	movs	r2, #7
 800025c:	2105      	movs	r1, #5
 800025e:	4823      	ldr	r0, [pc, #140]	; (80002ec <configure_uart+0xb0>)
 8000260:	f000 fae2 	bl	8000828 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000264:	2207      	movs	r2, #7
 8000266:	2106      	movs	r1, #6
 8000268:	4820      	ldr	r0, [pc, #128]	; (80002ec <configure_uart+0xb0>)
 800026a:	f000 fadd 	bl	8000828 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800026e:	2200      	movs	r2, #0
 8000270:	2105      	movs	r1, #5
 8000272:	481e      	ldr	r0, [pc, #120]	; (80002ec <configure_uart+0xb0>)
 8000274:	f000 fb11 	bl	800089a <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000278:	2200      	movs	r2, #0
 800027a:	2106      	movs	r1, #6
 800027c:	481b      	ldr	r0, [pc, #108]	; (80002ec <configure_uart+0xb0>)
 800027e:	f000 fb0c 	bl	800089a <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 8000282:	2202      	movs	r2, #2
 8000284:	2105      	movs	r1, #5
 8000286:	4819      	ldr	r0, [pc, #100]	; (80002ec <configure_uart+0xb0>)
 8000288:	f000 fb4d 	bl	8000926 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 800028c:	2202      	movs	r2, #2
 800028e:	2106      	movs	r1, #6
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <configure_uart+0xb0>)
 8000292:	f000 fb48 	bl	8000926 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000296:	2201      	movs	r2, #1
 8000298:	2105      	movs	r1, #5
 800029a:	4814      	ldr	r0, [pc, #80]	; (80002ec <configure_uart+0xb0>)
 800029c:	f000 fb1f 	bl	80008de <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2106      	movs	r1, #6
 80002a4:	4811      	ldr	r0, [pc, #68]	; (80002ec <configure_uart+0xb0>)
 80002a6:	f000 fb1a 	bl	80008de <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <configure_uart+0xb4>)
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <configure_uart+0xb8>)
 80002ae:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <configure_uart+0xb4>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <configure_uart+0xb4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <configure_uart+0xb4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <configure_uart+0xb4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <configure_uart+0xb4>)
 80002ca:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002ce:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <configure_uart+0xb4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <configure_uart+0xb8>)
 80002d8:	f000 fb6a 	bl	80009b0 <EnablePeriClk>
	USART_Init(&Test_USART);
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <configure_uart+0xb4>)
 80002de:	f000 fd6f 	bl	8000dc0 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <configure_uart+0xb4>)
 80002e4:	f000 fe6c 	bl	8000fc0 <USART_PeripheralEnable>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	200000b0 	.word	0x200000b0
 80002f4:	40004400 	.word	0x40004400

080002f8 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	6852      	ldr	r2, [r2, #4]
 8000308:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	6892      	ldr	r2, [r2, #8]
 8000312:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7b5b      	ldrb	r3, [r3, #13]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d16a      	bne.n	80003f2 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6a1a      	ldr	r2, [r3, #32]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f042 0201 	orr.w	r2, r2, #1
 800032a:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7b9b      	ldrb	r3, [r3, #14]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d11c      	bne.n	800036e <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	699a      	ldr	r2, [r3, #24]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f022 0203 	bic.w	r2, r2, #3
 8000342:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	6912      	ldr	r2, [r2, #16]
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	699a      	ldr	r2, [r3, #24]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800035c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	699a      	ldr	r2, [r3, #24]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800036c:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	7b9b      	ldrb	r3, [r3, #14]
 8000372:	2b03      	cmp	r3, #3
 8000374:	d11c      	bne.n	80003b0 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	699a      	ldr	r2, [r3, #24]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f022 0203 	bic.w	r2, r2, #3
 8000384:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	6912      	ldr	r2, [r2, #16]
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	699a      	ldr	r2, [r3, #24]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800039e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80003ae:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	7b9b      	ldrb	r3, [r3, #14]
 80003b4:	2b04      	cmp	r3, #4
 80003b6:	d11c      	bne.n	80003f2 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	699a      	ldr	r2, [r3, #24]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f022 0203 	bic.w	r2, r2, #3
 80003c6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	6912      	ldr	r2, [r2, #16]
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	699a      	ldr	r2, [r3, #24]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003e0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	699a      	ldr	r2, [r3, #24]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80003f0:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7d1b      	ldrb	r3, [r3, #20]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f040 80bf 	bne.w	800057a <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7d5b      	ldrb	r3, [r3, #21]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d124      	bne.n	800044e <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000412:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	6992      	ldr	r2, [r2, #24]
 800041c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800042c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	699a      	ldr	r2, [r3, #24]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800043c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	6a1a      	ldr	r2, [r3, #32]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f042 0210 	orr.w	r2, r2, #16
 800044c:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	7d5b      	ldrb	r3, [r3, #21]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d124      	bne.n	80004a0 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	699a      	ldr	r2, [r3, #24]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000464:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	6992      	ldr	r2, [r2, #24]
 800046e:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800047e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	699a      	ldr	r2, [r3, #24]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800048e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6a1a      	ldr	r2, [r3, #32]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f042 0210 	orr.w	r2, r2, #16
 800049e:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	7d5b      	ldrb	r3, [r3, #21]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d124      	bne.n	80004f2 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	699a      	ldr	r2, [r3, #24]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80004b6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	6992      	ldr	r2, [r2, #24]
 80004c0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80004d0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	699a      	ldr	r2, [r3, #24]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80004e0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6a1a      	ldr	r2, [r3, #32]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f042 0210 	orr.w	r2, r2, #16
 80004f0:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7d5b      	ldrb	r3, [r3, #21]
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d13f      	bne.n	800057a <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000508:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	699a      	ldr	r2, [r3, #24]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000518:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	699a      	ldr	r2, [r3, #24]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000528:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6a1a      	ldr	r2, [r3, #32]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f022 0220 	bic.w	r2, r2, #32
 8000538:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a1a      	ldr	r2, [r3, #32]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000548:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	699a      	ldr	r2, [r3, #24]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000558:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f042 0204 	orr.w	r2, r2, #4
 8000568:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6a1a      	ldr	r2, [r3, #32]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f042 0210 	orr.w	r2, r2, #16
 8000578:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7f1b      	ldrb	r3, [r3, #28]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d16a      	bne.n	8000658 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6a1a      	ldr	r2, [r3, #32]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000590:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7f5b      	ldrb	r3, [r3, #29]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d11c      	bne.n	80005d4 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	69da      	ldr	r2, [r3, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f022 0203 	bic.w	r2, r2, #3
 80005a8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	6a12      	ldr	r2, [r2, #32]
 80005b2:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005c2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80005d2:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7f5b      	ldrb	r3, [r3, #29]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d11c      	bne.n	8000616 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	69da      	ldr	r2, [r3, #28]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f022 0203 	bic.w	r2, r2, #3
 80005ea:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	6a12      	ldr	r2, [r2, #32]
 80005f4:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000604:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000614:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7f5b      	ldrb	r3, [r3, #29]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d11c      	bne.n	8000658 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 0203 	bic.w	r2, r2, #3
 800062c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6a12      	ldr	r2, [r2, #32]
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000646:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000656:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800065e:	2b00      	cmp	r3, #0
 8000660:	d16d      	bne.n	800073e <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6a1a      	ldr	r2, [r3, #32]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000670:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000678:	2b02      	cmp	r3, #2
 800067a:	d11c      	bne.n	80006b6 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	69da      	ldr	r2, [r3, #28]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800068a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	69da      	ldr	r2, [r3, #28]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006a4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	69da      	ldr	r2, [r3, #28]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80006b4:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d11c      	bne.n	80006fa <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	69da      	ldr	r2, [r3, #28]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80006ce:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80006d8:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69da      	ldr	r2, [r3, #28]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006e8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80006f8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000700:	2b04      	cmp	r3, #4
 8000702:	d11c      	bne.n	800073e <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000712:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800072c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	69da      	ldr	r2, [r3, #28]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800073c:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7b1b      	ldrb	r3, [r3, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d108      	bne.n	8000758 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f042 0201 	orr.w	r2, r2, #1
 8000754:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 8000756:	e00b      	b.n	8000770 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7b1b      	ldrb	r3, [r3, #12]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d107      	bne.n	8000770 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68da      	ldr	r2, [r3, #12]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0201 	bic.w	r2, r2, #1
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f042 0201 	orr.w	r2, r2, #1
 8000790:	601a      	str	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
 80007a8:	4613      	mov	r3, r2
 80007aa:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	78fa      	ldrb	r2, [r7, #3]
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	43d2      	mvns	r2, r2
 80007c0:	401a      	ands	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	78b9      	ldrb	r1, [r7, #2]
 80007cc:	78fa      	ldrb	r2, [r7, #3]
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	431a      	orrs	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	601a      	str	r2, [r3, #0]

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
 80007f0:	4613      	mov	r3, r2
 80007f2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	78b9      	ldrb	r1, [r7, #2]
 8000812:	78fa      	ldrb	r2, [r7, #3]
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	431a      	orrs	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	615a      	str	r2, [r3, #20]
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800084a:	7afa      	ldrb	r2, [r7, #11]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3208      	adds	r2, #8
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	7aba      	ldrb	r2, [r7, #10]
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	210f      	movs	r1, #15
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	43d2      	mvns	r2, r2
 8000860:	4611      	mov	r1, r2
 8000862:	7afa      	ldrb	r2, [r7, #11]
 8000864:	4019      	ands	r1, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3208      	adds	r2, #8
 800086a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 800086e:	7afa      	ldrb	r2, [r7, #11]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3208      	adds	r2, #8
 8000874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000878:	78b9      	ldrb	r1, [r7, #2]
 800087a:	7aba      	ldrb	r2, [r7, #10]
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	4611      	mov	r1, r2
 8000884:	7afa      	ldrb	r2, [r7, #11]
 8000886:	4319      	orrs	r1, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3208      	adds	r2, #8
 800088c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
 80008a6:	4613      	mov	r3, r2
 80008a8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	43d2      	mvns	r2, r2
 80008bc:	401a      	ands	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	78b9      	ldrb	r1, [r7, #2]
 80008c8:	78fa      	ldrb	r2, [r7, #3]
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	605a      	str	r2, [r3, #4]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	78fa      	ldrb	r2, [r7, #3]
 80008f8:	0052      	lsls	r2, r2, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	78b9      	ldrb	r1, [r7, #2]
 800090e:	78fa      	ldrb	r2, [r7, #3]
 8000910:	0052      	lsls	r2, r2, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	431a      	orrs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	60da      	str	r2, [r3, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	70fb      	strb	r3, [r7, #3]
 8000932:	4613      	mov	r3, r2
 8000934:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	78fa      	ldrb	r2, [r7, #3]
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	2103      	movs	r1, #3
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	43d2      	mvns	r2, r2
 800094a:	401a      	ands	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	78b9      	ldrb	r1, [r7, #2]
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	431a      	orrs	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	609a      	str	r2, [r3, #8]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
	...

08000970 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <RTC_Alarm_IRQHandler+0x24>)
 8000978:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 800097a:	f000 f80d 	bl	8000998 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]

	return;
 800098a:	bf00      	nop
}
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40013c14 	.word	0x40013c14

08000998 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 800099c:	2201      	movs	r2, #1
 800099e:	210f      	movs	r1, #15
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <RTC_Alarm_Interrupt_Callback+0x14>)
 80009a2:	f7ff ff1f 	bl	80007e4 <GPIOWritePin>

	return;
 80009a6:	bf00      	nop
}
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <EnablePeriClk+0x22c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d108      	bne.n	80009d2 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009c0:	4b87      	ldr	r3, [pc, #540]	; (8000be0 <EnablePeriClk+0x230>)
 80009c2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f043 0201 	orr.w	r2, r3, #1
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80009d0:	e19b      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a83      	ldr	r2, [pc, #524]	; (8000be4 <EnablePeriClk+0x234>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d108      	bne.n	80009ec <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009da:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <EnablePeriClk+0x230>)
 80009dc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f043 0202 	orr.w	r2, r3, #2
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	e18e      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a7e      	ldr	r2, [pc, #504]	; (8000be8 <EnablePeriClk+0x238>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d108      	bne.n	8000a06 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80009f4:	4b7a      	ldr	r3, [pc, #488]	; (8000be0 <EnablePeriClk+0x230>)
 80009f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f043 0204 	orr.w	r2, r3, #4
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	e181      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a78      	ldr	r2, [pc, #480]	; (8000bec <EnablePeriClk+0x23c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d108      	bne.n	8000a20 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a0e:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <EnablePeriClk+0x230>)
 8000a10:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f043 0208 	orr.w	r2, r3, #8
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	e174      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a73      	ldr	r2, [pc, #460]	; (8000bf0 <EnablePeriClk+0x240>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d108      	bne.n	8000a3a <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a28:	4b6d      	ldr	r3, [pc, #436]	; (8000be0 <EnablePeriClk+0x230>)
 8000a2a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f043 0210 	orr.w	r2, r3, #16
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	e167      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a6d      	ldr	r2, [pc, #436]	; (8000bf4 <EnablePeriClk+0x244>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d108      	bne.n	8000a54 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <EnablePeriClk+0x230>)
 8000a44:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0220 	orr.w	r2, r3, #32
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	e15a      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a68      	ldr	r2, [pc, #416]	; (8000bf8 <EnablePeriClk+0x248>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d108      	bne.n	8000a6e <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <EnablePeriClk+0x230>)
 8000a5e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	e14d      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a62      	ldr	r2, [pc, #392]	; (8000bfc <EnablePeriClk+0x24c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d108      	bne.n	8000a88 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a76:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <EnablePeriClk+0x230>)
 8000a78:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	601a      	str	r2, [r3, #0]
}
 8000a86:	e140      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a5d      	ldr	r2, [pc, #372]	; (8000c00 <EnablePeriClk+0x250>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d108      	bne.n	8000aa2 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a90:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <EnablePeriClk+0x230>)
 8000a92:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	e133      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <EnablePeriClk+0x254>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d108      	bne.n	8000abc <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <EnablePeriClk+0x258>)
 8000aac:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	e126      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a53      	ldr	r2, [pc, #332]	; (8000c0c <EnablePeriClk+0x25c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d108      	bne.n	8000ad6 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ac4:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <EnablePeriClk+0x260>)
 8000ac6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	e119      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <EnablePeriClk+0x264>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d108      	bne.n	8000af0 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ade:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <EnablePeriClk+0x260>)
 8000ae0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	e10c      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <EnablePeriClk+0x268>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d108      	bne.n	8000b0a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <EnablePeriClk+0x260>)
 8000afa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	e0ff      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a43      	ldr	r2, [pc, #268]	; (8000c1c <EnablePeriClk+0x26c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d108      	bne.n	8000b24 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <EnablePeriClk+0x260>)
 8000b14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	e0f2      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <EnablePeriClk+0x270>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d108      	bne.n	8000b3e <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <EnablePeriClk+0x260>)
 8000b2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	e0e5      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a38      	ldr	r2, [pc, #224]	; (8000c24 <EnablePeriClk+0x274>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d108      	bne.n	8000b58 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <EnablePeriClk+0x258>)
 8000b48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0210 	orr.w	r2, r3, #16
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	e0d8      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <EnablePeriClk+0x278>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d108      	bne.n	8000b72 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <EnablePeriClk+0x260>)
 8000b62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	e0cb      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <EnablePeriClk+0x27c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d108      	bne.n	8000b8c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <EnablePeriClk+0x260>)
 8000b7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	e0be      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <EnablePeriClk+0x280>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d108      	bne.n	8000ba6 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <EnablePeriClk+0x260>)
 8000b96:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	e0b1      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <EnablePeriClk+0x284>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d108      	bne.n	8000bc0 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <EnablePeriClk+0x260>)
 8000bb0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	e0a4      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <EnablePeriClk+0x288>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d139      	bne.n	8000c3c <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <EnablePeriClk+0x258>)
 8000bca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f043 0220 	orr.w	r2, r3, #32
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	e097      	b.n	8000d0a <EnablePeriClk+0x35a>
 8000bda:	bf00      	nop
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40023830 	.word	0x40023830
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40021400 	.word	0x40021400
 8000bf8:	40021800 	.word	0x40021800
 8000bfc:	40021c00 	.word	0x40021c00
 8000c00:	40022000 	.word	0x40022000
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023844 	.word	0x40023844
 8000c0c:	40003800 	.word	0x40003800
 8000c10:	40023840 	.word	0x40023840
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40005800 	.word	0x40005800
 8000c20:	40005c00 	.word	0x40005c00
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	40004c00 	.word	0x40004c00
 8000c34:	40005000 	.word	0x40005000
 8000c38:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a35      	ldr	r2, [pc, #212]	; (8000d14 <EnablePeriClk+0x364>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d108      	bne.n	8000c56 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c44:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <EnablePeriClk+0x368>)
 8000c46:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f043 0210 	orr.w	r2, r3, #16
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	e059      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <EnablePeriClk+0x36c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d108      	bne.n	8000c70 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <EnablePeriClk+0x368>)
 8000c60:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f043 0220 	orr.w	r2, r3, #32
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	601a      	str	r2, [r3, #0]
}
 8000c6e:	e04c      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <EnablePeriClk+0x370>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d108      	bne.n	8000c8a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <EnablePeriClk+0x374>)
 8000c7a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	e03f      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <EnablePeriClk+0x378>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d108      	bne.n	8000ca4 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <EnablePeriClk+0x374>)
 8000c94:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	601a      	str	r2, [r3, #0]
}
 8000ca2:	e032      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000caa:	d108      	bne.n	8000cbe <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <EnablePeriClk+0x368>)
 8000cae:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	e025      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <EnablePeriClk+0x37c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d108      	bne.n	8000cd8 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <EnablePeriClk+0x368>)
 8000cc8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f043 0202 	orr.w	r2, r3, #2
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	e018      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <EnablePeriClk+0x380>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d108      	bne.n	8000cf2 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <EnablePeriClk+0x368>)
 8000ce2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f043 0204 	orr.w	r2, r3, #4
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	e00b      	b.n	8000d0a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <EnablePeriClk+0x384>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d107      	bne.n	8000d0a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <EnablePeriClk+0x368>)
 8000cfc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f043 0208 	orr.w	r2, r3, #8
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40001000 	.word	0x40001000
 8000d18:	40023840 	.word	0x40023840
 8000d1c:	40001400 	.word	0x40001400
 8000d20:	40026000 	.word	0x40026000
 8000d24:	40023830 	.word	0x40023830
 8000d28:	40026400 	.word	0x40026400
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	40000800 	.word	0x40000800
 8000d34:	40000c00 	.word	0x40000c00

08000d38 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d5a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000d5e:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <NVIC_IRQSetPending>:

		*pNVIC_ICER |= (1 << NVICBitPos);
}

void NVIC_IRQSetPending(uint8_t IRQNum)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISPR;
	uint32_t NVICRegisterNum = IRQNum/32;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	095b      	lsrs	r3, r3, #5
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	613b      	str	r3, [r7, #16]

	pNVIC_ISPR = (uint32_t*) NVIC_ISPR_BASE_ADDR + NVICRegisterNum;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d9e:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8000da2:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISPR |=  (1 << NVICBitPos);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	431a      	orrs	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	601a      	str	r2, [r3, #0]

	return;
 8000db6:	bf00      	nop
}
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <USART_Init>:
static uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d110      	bne.n	8000df2 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0208 	orr.w	r2, r2, #8
 8000dde:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	e028      	b.n	8000e44 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d110      	bne.n	8000e1c <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0208 	bic.w	r2, r2, #8
 8000e08:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	e013      	b.n	8000e44 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d10f      	bne.n	8000e44 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0204 	orr.w	r2, r2, #4
 8000e42:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d108      	bne.n	8000e5e <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	e00b      	b.n	8000e76 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d107      	bne.n	8000e76 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e74:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e84:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6919      	ldr	r1, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	031a      	lsls	r2, r3, #12
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d108      	bne.n	8000eb4 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	e028      	b.n	8000f06 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d110      	bne.n	8000ede <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eca:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	e013      	b.n	8000f06 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d10f      	bne.n	8000f06 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ef4:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f04:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f868 	bl	8000fe2 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d110      	bne.n	8000f3c <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f28:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f38:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000f3a:	e03d      	b.n	8000fb8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d110      	bne.n	8000f66 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f52:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f62:	615a      	str	r2, [r3, #20]
}
 8000f64:	e028      	b.n	8000fb8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d110      	bne.n	8000f90 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f7c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8c:	615a      	str	r2, [r3, #20]
}
 8000f8e:	e013      	b.n	8000fb8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d10f      	bne.n	8000fb8 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fa6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb6:	615a      	str	r2, [r3, #20]
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fd6:	60da      	str	r2, [r3, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000fec:	f240 6383 	movw	r3, #1667	; 0x683
 8000ff0:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <USART_EnableTXEInterrupt>:
{
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RXNEIE);
}

void USART_EnableTXEInterrupt(struct USART_Handle_t *pUSART_Handle)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TXEIE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800101a:	60da      	str	r2, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <USART_DisableTXEInterrupt>:

void USART_DisableTXEInterrupt(struct USART_Handle_t *pUSART_Handle)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TXEIE);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103c:	60da      	str	r2, [r3, #12]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <USART_SendData_Interrupt>:

void USART_SendData_Interrupt(char *pTxBuf, uint32_t Len, uint8_t usart_irq_num)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	71fb      	strb	r3, [r7, #7]

	//Synchronization mechanism to guard against successive calls to the this function
	//Ensures processing of first message is completed before taking up new message
	while(usart_available == FALSE);
 8001056:	bf00      	nop
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <USART_SendData_Interrupt+0x5c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0fb      	beq.n	8001058 <USART_SendData_Interrupt+0x10>

	usart_available = FALSE;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <USART_SendData_Interrupt+0x5c>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

	//Update the data buffers and enable the interrupt
	usart_tx_message = (char *) malloc(Len);
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f000 f930 	bl	80012cc <malloc>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <USART_SendData_Interrupt+0x60>)
 8001072:	601a      	str	r2, [r3, #0]
	strcpy(usart_tx_message,pTxBuf);
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <USART_SendData_Interrupt+0x60>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fa3a 	bl	80014f4 <strcpy>

	NVIC_EnableIRQ(usart_irq_num);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe58 	bl	8000d38 <NVIC_EnableIRQ>
	usart_tx_count = 0;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <USART_SendData_Interrupt+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	usart_tx_begin = TRUE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <USART_SendData_Interrupt+0x68>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	NVIC_IRQSetPending(usart_irq_num);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe70 	bl	8000d7c <NVIC_IRQSetPending>

	return;
 800109c:	bf00      	nop
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	200000cc 	.word	0x200000cc
 80010ac:	200000d0 	.word	0x200000d0
 80010b0:	200000d4 	.word	0x200000d4

080010b4 <USART_Interrupt_Callback>:

void USART_Interrupt_Callback(struct USART_Handle_t *pUSART_Handle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if(usart_tx_begin == TRUE)
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <USART_Interrupt_Callback+0x80>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <USART_Interrupt_Callback+0x1e>
	{
		USART_EnableTXEInterrupt(pUSART_Handle);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff9d 	bl	8001004 <USART_EnableTXEInterrupt>
		usart_tx_begin = FALSE;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <USART_Interrupt_Callback+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
		return;
 80010d0:	e02d      	b.n	800112e <USART_Interrupt_Callback+0x7a>
	}

	if(usart_tx_count < strlen(usart_tx_message))
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <USART_Interrupt_Callback+0x84>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f886 	bl	80001e8 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <USART_Interrupt_Callback+0x88>)
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d90d      	bls.n	8001102 <USART_Interrupt_Callback+0x4e>
	{
		pUSART_Handle->pUSART->USART_DR = usart_tx_message[usart_tx_count];
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <USART_Interrupt_Callback+0x84>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <USART_Interrupt_Callback+0x88>)
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
		usart_tx_count++;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <USART_Interrupt_Callback+0x88>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <USART_Interrupt_Callback+0x88>)
 8001100:	6013      	str	r3, [r2, #0]
	}

	if(usart_tx_count == strlen(usart_tx_message))
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <USART_Interrupt_Callback+0x84>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f86e 	bl	80001e8 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <USART_Interrupt_Callback+0x88>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4293      	cmp	r3, r2
 8001114:	d10a      	bne.n	800112c <USART_Interrupt_Callback+0x78>
	{
		USART_DisableTXEInterrupt(pUSART_Handle);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff85 	bl	8001026 <USART_DisableTXEInterrupt>
		usart_available = TRUE;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <USART_Interrupt_Callback+0x8c>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
		free(usart_tx_message);
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <USART_Interrupt_Callback+0x84>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f8d8 	bl	80012dc <free>
	}

	return;
 800112c:	bf00      	nop
}
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000d4 	.word	0x200000d4
 8001138:	200000cc 	.word	0x200000cc
 800113c:	200000d0 	.word	0x200000d0
 8001140:	20000000 	.word	0x20000000

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f000 f880 	bl	8001278 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	200000d8 	.word	0x200000d8
 80011ac:	200000f0 	.word	0x200000f0

080011b0 <main>:
#define USART2_IRQ_NUM	38

extern struct USART_Handle_t Test_USART;

int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09a      	sub	sp, #104	; 0x68
 80011b4:	af00      	add	r7, sp, #0
	char message1[] = "Message 1\r\n";
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <main+0x58>)
 80011b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char message[] = "Testing Updated UART Interrupt Driver With Synchronization Support: Hello World!!!\r\n";
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <main+0x5c>)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4611      	mov	r1, r2
 80011c8:	2255      	movs	r2, #85	; 0x55
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f88e 	bl	80012ec <memcpy>

	//Configure the Timer
	configure_delay_timer();
 80011d0:	f7ff f812 	bl	80001f8 <configure_delay_timer>

	//Configure UART
	configure_uart();
 80011d4:	f7ff f832 	bl	800023c <configure_uart>

	//Enable the UART Interrupt
	USART_SendData_Interrupt(message1,strlen(message1),USART2_IRQ_NUM);
 80011d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f803 	bl	80001e8 <strlen>
 80011e2:	4601      	mov	r1, r0
 80011e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011e8:	2226      	movs	r2, #38	; 0x26
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff2c 	bl	8001048 <USART_SendData_Interrupt>
	USART_SendData_Interrupt(message,strlen(message),USART2_IRQ_NUM);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe fff8 	bl	80001e8 <strlen>
 80011f8:	4601      	mov	r1, r0
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2226      	movs	r2, #38	; 0x26
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff22 	bl	8001048 <USART_SendData_Interrupt>

	while(1)
 8001204:	e7fe      	b.n	8001204 <main+0x54>
 8001206:	bf00      	nop
 8001208:	08001538 	.word	0x08001538
 800120c:	08001544 	.word	0x08001544

08001210 <USART2_IRQHandler>:

	return 0;
}

void USART2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	USART_Interrupt_Callback(&Test_USART);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USART2_IRQHandler+0x10>)
 8001216:	f7ff ff4d 	bl	80010b4 <USART_Interrupt_Callback>

	return;
 800121a:	bf00      	nop
}
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000b0 	.word	0x200000b0

08001224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f000 f817 	bl	8001284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff ffab 	bl	80011b0 <main>

0800125a <LoopForever>:

LoopForever:
  b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001268:	08001604 	.word	0x08001604
  ldr r2, =_sbss
 800126c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001270:	200000ec 	.word	0x200000ec

08001274 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <__errno>:
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <__errno+0x8>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000004 	.word	0x20000004

08001284 <__libc_init_array>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	4d0d      	ldr	r5, [pc, #52]	; (80012bc <__libc_init_array+0x38>)
 8001288:	4c0d      	ldr	r4, [pc, #52]	; (80012c0 <__libc_init_array+0x3c>)
 800128a:	1b64      	subs	r4, r4, r5
 800128c:	10a4      	asrs	r4, r4, #2
 800128e:	2600      	movs	r6, #0
 8001290:	42a6      	cmp	r6, r4
 8001292:	d109      	bne.n	80012a8 <__libc_init_array+0x24>
 8001294:	4d0b      	ldr	r5, [pc, #44]	; (80012c4 <__libc_init_array+0x40>)
 8001296:	4c0c      	ldr	r4, [pc, #48]	; (80012c8 <__libc_init_array+0x44>)
 8001298:	f000 f942 	bl	8001520 <_init>
 800129c:	1b64      	subs	r4, r4, r5
 800129e:	10a4      	asrs	r4, r4, #2
 80012a0:	2600      	movs	r6, #0
 80012a2:	42a6      	cmp	r6, r4
 80012a4:	d105      	bne.n	80012b2 <__libc_init_array+0x2e>
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
 80012a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ac:	4798      	blx	r3
 80012ae:	3601      	adds	r6, #1
 80012b0:	e7ee      	b.n	8001290 <__libc_init_array+0xc>
 80012b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012b6:	4798      	blx	r3
 80012b8:	3601      	adds	r6, #1
 80012ba:	e7f2      	b.n	80012a2 <__libc_init_array+0x1e>
 80012bc:	080015fc 	.word	0x080015fc
 80012c0:	080015fc 	.word	0x080015fc
 80012c4:	080015fc 	.word	0x080015fc
 80012c8:	08001600 	.word	0x08001600

080012cc <malloc>:
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <malloc+0xc>)
 80012ce:	4601      	mov	r1, r0
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f000 b88b 	b.w	80013ec <_malloc_r>
 80012d6:	bf00      	nop
 80012d8:	20000004 	.word	0x20000004

080012dc <free>:
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <free+0xc>)
 80012de:	4601      	mov	r1, r0
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f000 b819 	b.w	8001318 <_free_r>
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004

080012ec <memcpy>:
 80012ec:	440a      	add	r2, r1
 80012ee:	4291      	cmp	r1, r2
 80012f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012f4:	d100      	bne.n	80012f8 <memcpy+0xc>
 80012f6:	4770      	bx	lr
 80012f8:	b510      	push	{r4, lr}
 80012fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001302:	4291      	cmp	r1, r2
 8001304:	d1f9      	bne.n	80012fa <memcpy+0xe>
 8001306:	bd10      	pop	{r4, pc}

08001308 <memset>:
 8001308:	4402      	add	r2, r0
 800130a:	4603      	mov	r3, r0
 800130c:	4293      	cmp	r3, r2
 800130e:	d100      	bne.n	8001312 <memset+0xa>
 8001310:	4770      	bx	lr
 8001312:	f803 1b01 	strb.w	r1, [r3], #1
 8001316:	e7f9      	b.n	800130c <memset+0x4>

08001318 <_free_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4605      	mov	r5, r0
 800131c:	2900      	cmp	r1, #0
 800131e:	d041      	beq.n	80013a4 <_free_r+0x8c>
 8001320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001324:	1f0c      	subs	r4, r1, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	bfb8      	it	lt
 800132a:	18e4      	addlt	r4, r4, r3
 800132c:	f000 f8ec 	bl	8001508 <__malloc_lock>
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <_free_r+0x90>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	b933      	cbnz	r3, 8001344 <_free_r+0x2c>
 8001336:	6063      	str	r3, [r4, #4]
 8001338:	6014      	str	r4, [r2, #0]
 800133a:	4628      	mov	r0, r5
 800133c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001340:	f000 b8e8 	b.w	8001514 <__malloc_unlock>
 8001344:	42a3      	cmp	r3, r4
 8001346:	d908      	bls.n	800135a <_free_r+0x42>
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	1821      	adds	r1, r4, r0
 800134c:	428b      	cmp	r3, r1
 800134e:	bf01      	itttt	eq
 8001350:	6819      	ldreq	r1, [r3, #0]
 8001352:	685b      	ldreq	r3, [r3, #4]
 8001354:	1809      	addeq	r1, r1, r0
 8001356:	6021      	streq	r1, [r4, #0]
 8001358:	e7ed      	b.n	8001336 <_free_r+0x1e>
 800135a:	461a      	mov	r2, r3
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b10b      	cbz	r3, 8001364 <_free_r+0x4c>
 8001360:	42a3      	cmp	r3, r4
 8001362:	d9fa      	bls.n	800135a <_free_r+0x42>
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	1850      	adds	r0, r2, r1
 8001368:	42a0      	cmp	r0, r4
 800136a:	d10b      	bne.n	8001384 <_free_r+0x6c>
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	4401      	add	r1, r0
 8001370:	1850      	adds	r0, r2, r1
 8001372:	4283      	cmp	r3, r0
 8001374:	6011      	str	r1, [r2, #0]
 8001376:	d1e0      	bne.n	800133a <_free_r+0x22>
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	6053      	str	r3, [r2, #4]
 800137e:	4401      	add	r1, r0
 8001380:	6011      	str	r1, [r2, #0]
 8001382:	e7da      	b.n	800133a <_free_r+0x22>
 8001384:	d902      	bls.n	800138c <_free_r+0x74>
 8001386:	230c      	movs	r3, #12
 8001388:	602b      	str	r3, [r5, #0]
 800138a:	e7d6      	b.n	800133a <_free_r+0x22>
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	1821      	adds	r1, r4, r0
 8001390:	428b      	cmp	r3, r1
 8001392:	bf04      	itt	eq
 8001394:	6819      	ldreq	r1, [r3, #0]
 8001396:	685b      	ldreq	r3, [r3, #4]
 8001398:	6063      	str	r3, [r4, #4]
 800139a:	bf04      	itt	eq
 800139c:	1809      	addeq	r1, r1, r0
 800139e:	6021      	streq	r1, [r4, #0]
 80013a0:	6054      	str	r4, [r2, #4]
 80013a2:	e7ca      	b.n	800133a <_free_r+0x22>
 80013a4:	bd38      	pop	{r3, r4, r5, pc}
 80013a6:	bf00      	nop
 80013a8:	200000dc 	.word	0x200000dc

080013ac <sbrk_aligned>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4e0e      	ldr	r6, [pc, #56]	; (80013e8 <sbrk_aligned+0x3c>)
 80013b0:	460c      	mov	r4, r1
 80013b2:	6831      	ldr	r1, [r6, #0]
 80013b4:	4605      	mov	r5, r0
 80013b6:	b911      	cbnz	r1, 80013be <sbrk_aligned+0x12>
 80013b8:	f000 f88c 	bl	80014d4 <_sbrk_r>
 80013bc:	6030      	str	r0, [r6, #0]
 80013be:	4621      	mov	r1, r4
 80013c0:	4628      	mov	r0, r5
 80013c2:	f000 f887 	bl	80014d4 <_sbrk_r>
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	d00a      	beq.n	80013e0 <sbrk_aligned+0x34>
 80013ca:	1cc4      	adds	r4, r0, #3
 80013cc:	f024 0403 	bic.w	r4, r4, #3
 80013d0:	42a0      	cmp	r0, r4
 80013d2:	d007      	beq.n	80013e4 <sbrk_aligned+0x38>
 80013d4:	1a21      	subs	r1, r4, r0
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f87c 	bl	80014d4 <_sbrk_r>
 80013dc:	3001      	adds	r0, #1
 80013de:	d101      	bne.n	80013e4 <sbrk_aligned+0x38>
 80013e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80013e4:	4620      	mov	r0, r4
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	200000e0 	.word	0x200000e0

080013ec <_malloc_r>:
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f0:	1ccd      	adds	r5, r1, #3
 80013f2:	f025 0503 	bic.w	r5, r5, #3
 80013f6:	3508      	adds	r5, #8
 80013f8:	2d0c      	cmp	r5, #12
 80013fa:	bf38      	it	cc
 80013fc:	250c      	movcc	r5, #12
 80013fe:	2d00      	cmp	r5, #0
 8001400:	4607      	mov	r7, r0
 8001402:	db01      	blt.n	8001408 <_malloc_r+0x1c>
 8001404:	42a9      	cmp	r1, r5
 8001406:	d905      	bls.n	8001414 <_malloc_r+0x28>
 8001408:	230c      	movs	r3, #12
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	2600      	movs	r6, #0
 800140e:	4630      	mov	r0, r6
 8001410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001414:	4e2e      	ldr	r6, [pc, #184]	; (80014d0 <_malloc_r+0xe4>)
 8001416:	f000 f877 	bl	8001508 <__malloc_lock>
 800141a:	6833      	ldr	r3, [r6, #0]
 800141c:	461c      	mov	r4, r3
 800141e:	bb34      	cbnz	r4, 800146e <_malloc_r+0x82>
 8001420:	4629      	mov	r1, r5
 8001422:	4638      	mov	r0, r7
 8001424:	f7ff ffc2 	bl	80013ac <sbrk_aligned>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	4604      	mov	r4, r0
 800142c:	d14d      	bne.n	80014ca <_malloc_r+0xde>
 800142e:	6834      	ldr	r4, [r6, #0]
 8001430:	4626      	mov	r6, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d140      	bne.n	80014b8 <_malloc_r+0xcc>
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	4631      	mov	r1, r6
 800143a:	4638      	mov	r0, r7
 800143c:	eb04 0803 	add.w	r8, r4, r3
 8001440:	f000 f848 	bl	80014d4 <_sbrk_r>
 8001444:	4580      	cmp	r8, r0
 8001446:	d13a      	bne.n	80014be <_malloc_r+0xd2>
 8001448:	6821      	ldr	r1, [r4, #0]
 800144a:	3503      	adds	r5, #3
 800144c:	1a6d      	subs	r5, r5, r1
 800144e:	f025 0503 	bic.w	r5, r5, #3
 8001452:	3508      	adds	r5, #8
 8001454:	2d0c      	cmp	r5, #12
 8001456:	bf38      	it	cc
 8001458:	250c      	movcc	r5, #12
 800145a:	4629      	mov	r1, r5
 800145c:	4638      	mov	r0, r7
 800145e:	f7ff ffa5 	bl	80013ac <sbrk_aligned>
 8001462:	3001      	adds	r0, #1
 8001464:	d02b      	beq.n	80014be <_malloc_r+0xd2>
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	442b      	add	r3, r5
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	e00e      	b.n	800148c <_malloc_r+0xa0>
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	1b52      	subs	r2, r2, r5
 8001472:	d41e      	bmi.n	80014b2 <_malloc_r+0xc6>
 8001474:	2a0b      	cmp	r2, #11
 8001476:	d916      	bls.n	80014a6 <_malloc_r+0xba>
 8001478:	1961      	adds	r1, r4, r5
 800147a:	42a3      	cmp	r3, r4
 800147c:	6025      	str	r5, [r4, #0]
 800147e:	bf18      	it	ne
 8001480:	6059      	strne	r1, [r3, #4]
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	bf08      	it	eq
 8001486:	6031      	streq	r1, [r6, #0]
 8001488:	5162      	str	r2, [r4, r5]
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	4638      	mov	r0, r7
 800148e:	f104 060b 	add.w	r6, r4, #11
 8001492:	f000 f83f 	bl	8001514 <__malloc_unlock>
 8001496:	f026 0607 	bic.w	r6, r6, #7
 800149a:	1d23      	adds	r3, r4, #4
 800149c:	1af2      	subs	r2, r6, r3
 800149e:	d0b6      	beq.n	800140e <_malloc_r+0x22>
 80014a0:	1b9b      	subs	r3, r3, r6
 80014a2:	50a3      	str	r3, [r4, r2]
 80014a4:	e7b3      	b.n	800140e <_malloc_r+0x22>
 80014a6:	6862      	ldr	r2, [r4, #4]
 80014a8:	42a3      	cmp	r3, r4
 80014aa:	bf0c      	ite	eq
 80014ac:	6032      	streq	r2, [r6, #0]
 80014ae:	605a      	strne	r2, [r3, #4]
 80014b0:	e7ec      	b.n	800148c <_malloc_r+0xa0>
 80014b2:	4623      	mov	r3, r4
 80014b4:	6864      	ldr	r4, [r4, #4]
 80014b6:	e7b2      	b.n	800141e <_malloc_r+0x32>
 80014b8:	4634      	mov	r4, r6
 80014ba:	6876      	ldr	r6, [r6, #4]
 80014bc:	e7b9      	b.n	8001432 <_malloc_r+0x46>
 80014be:	230c      	movs	r3, #12
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4638      	mov	r0, r7
 80014c4:	f000 f826 	bl	8001514 <__malloc_unlock>
 80014c8:	e7a1      	b.n	800140e <_malloc_r+0x22>
 80014ca:	6025      	str	r5, [r4, #0]
 80014cc:	e7de      	b.n	800148c <_malloc_r+0xa0>
 80014ce:	bf00      	nop
 80014d0:	200000dc 	.word	0x200000dc

080014d4 <_sbrk_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	; (80014f0 <_sbrk_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff fe30 	bl	8001144 <_sbrk>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_sbrk_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_sbrk_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200000e8 	.word	0x200000e8

080014f4 <strcpy>:
 80014f4:	4603      	mov	r3, r0
 80014f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014fa:	f803 2b01 	strb.w	r2, [r3], #1
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d1f9      	bne.n	80014f6 <strcpy+0x2>
 8001502:	4770      	bx	lr

08001504 <__retarget_lock_acquire_recursive>:
 8001504:	4770      	bx	lr

08001506 <__retarget_lock_release_recursive>:
 8001506:	4770      	bx	lr

08001508 <__malloc_lock>:
 8001508:	4801      	ldr	r0, [pc, #4]	; (8001510 <__malloc_lock+0x8>)
 800150a:	f7ff bffb 	b.w	8001504 <__retarget_lock_acquire_recursive>
 800150e:	bf00      	nop
 8001510:	200000e4 	.word	0x200000e4

08001514 <__malloc_unlock>:
 8001514:	4801      	ldr	r0, [pc, #4]	; (800151c <__malloc_unlock+0x8>)
 8001516:	f7ff bff6 	b.w	8001506 <__retarget_lock_release_recursive>
 800151a:	bf00      	nop
 800151c:	200000e4 	.word	0x200000e4

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
