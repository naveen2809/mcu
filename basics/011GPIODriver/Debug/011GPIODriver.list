
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b8  080022b8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080022b8  080022b8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022b8  080022b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080022c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000007c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029e3  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a17  00000000  00000000  00022a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00023488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002e0  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000242f  00000000  00000000  00023ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004923  00000000  00000000  00025f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000df1c  00000000  00000000  0002a832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003874e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001464  00000000  00000000  000387a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021f8 	.word	0x080021f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080021f8 	.word	0x080021f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <configure_delay_timer>:
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
}

void configure_delay_timer(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <configure_delay_timer+0x3c>)
 8000296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029a:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 800029c:	2228      	movs	r2, #40	; 0x28
 800029e:	2100      	movs	r1, #0
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <configure_delay_timer+0x40>)
 80002a2:	f001 f81b 	bl	80012dc <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <configure_delay_timer+0x3c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <configure_delay_timer+0x3c>)
 80002ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002b2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002b8:	f000 fbd8 	bl	8000a6c <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <configure_delay_timer+0x3c>)
 80002be:	f000 f879 	bl	80003b4 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <configure_delay_timer+0x3c>)
 80002c4:	f000 fab7 	bl	8000836 <General_Purpose_Timer_PeripheralEnable>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000080 	.word	0x20000080
 80002d0:	20000084 	.word	0x20000084

080002d4 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80002d8:	482a      	ldr	r0, [pc, #168]	; (8000384 <configure_uart+0xb0>)
 80002da:	f000 fbc7 	bl	8000a6c <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80002de:	2202      	movs	r2, #2
 80002e0:	2105      	movs	r1, #5
 80002e2:	4828      	ldr	r0, [pc, #160]	; (8000384 <configure_uart+0xb0>)
 80002e4:	f000 fab8 	bl	8000858 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80002e8:	2202      	movs	r2, #2
 80002ea:	2106      	movs	r1, #6
 80002ec:	4825      	ldr	r0, [pc, #148]	; (8000384 <configure_uart+0xb0>)
 80002ee:	f000 fab3 	bl	8000858 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80002f2:	2207      	movs	r2, #7
 80002f4:	2105      	movs	r1, #5
 80002f6:	4823      	ldr	r0, [pc, #140]	; (8000384 <configure_uart+0xb0>)
 80002f8:	f000 faf4 	bl	80008e4 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80002fc:	2207      	movs	r2, #7
 80002fe:	2106      	movs	r1, #6
 8000300:	4820      	ldr	r0, [pc, #128]	; (8000384 <configure_uart+0xb0>)
 8000302:	f000 faef 	bl	80008e4 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 8000306:	2200      	movs	r2, #0
 8000308:	2105      	movs	r1, #5
 800030a:	481e      	ldr	r0, [pc, #120]	; (8000384 <configure_uart+0xb0>)
 800030c:	f000 fb23 	bl	8000956 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000310:	2200      	movs	r2, #0
 8000312:	2106      	movs	r1, #6
 8000314:	481b      	ldr	r0, [pc, #108]	; (8000384 <configure_uart+0xb0>)
 8000316:	f000 fb1e 	bl	8000956 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800031a:	2202      	movs	r2, #2
 800031c:	2105      	movs	r1, #5
 800031e:	4819      	ldr	r0, [pc, #100]	; (8000384 <configure_uart+0xb0>)
 8000320:	f000 fb5f 	bl	80009e2 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000324:	2202      	movs	r2, #2
 8000326:	2106      	movs	r1, #6
 8000328:	4816      	ldr	r0, [pc, #88]	; (8000384 <configure_uart+0xb0>)
 800032a:	f000 fb5a 	bl	80009e2 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 800032e:	2201      	movs	r2, #1
 8000330:	2105      	movs	r1, #5
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <configure_uart+0xb0>)
 8000334:	f000 fb31 	bl	800099a <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 8000338:	2201      	movs	r2, #1
 800033a:	2106      	movs	r1, #6
 800033c:	4811      	ldr	r0, [pc, #68]	; (8000384 <configure_uart+0xb0>)
 800033e:	f000 fb2c 	bl	800099a <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <configure_uart+0xb4>)
 8000344:	4a11      	ldr	r2, [pc, #68]	; (800038c <configure_uart+0xb8>)
 8000346:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <configure_uart+0xb4>)
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <configure_uart+0xb4>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <configure_uart+0xb4>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <configure_uart+0xb4>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <configure_uart+0xb4>)
 8000362:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000366:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <configure_uart+0xb4>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 800036e:	4807      	ldr	r0, [pc, #28]	; (800038c <configure_uart+0xb8>)
 8000370:	f000 fb7c 	bl	8000a6c <EnablePeriClk>
	USART_Init(&Test_USART);
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <configure_uart+0xb4>)
 8000376:	f000 fd3d 	bl	8000df4 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800037a:	4803      	ldr	r0, [pc, #12]	; (8000388 <configure_uart+0xb4>)
 800037c:	f000 fe3a 	bl	8000ff4 <USART_PeripheralEnable>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40020c00 	.word	0x40020c00
 8000388:	200000ac 	.word	0x200000ac
 800038c:	40004400 	.word	0x40004400

08000390 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <UART_SendChar+0x20>)
 80003a2:	f000 fe4d 	bl	8001040 <USART_SendData>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000ac 	.word	0x200000ac

080003b4 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6852      	ldr	r2, [r2, #4]
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6892      	ldr	r2, [r2, #8]
 80003ce:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7b5b      	ldrb	r3, [r3, #13]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d16a      	bne.n	80004ae <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6a1a      	ldr	r2, [r3, #32]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f042 0201 	orr.w	r2, r2, #1
 80003e6:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7b9b      	ldrb	r3, [r3, #14]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d11c      	bne.n	800042a <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f022 0203 	bic.w	r2, r2, #3
 80003fe:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	6912      	ldr	r2, [r2, #16]
 8000408:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	699a      	ldr	r2, [r3, #24]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000418:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000428:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7b9b      	ldrb	r3, [r3, #14]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d11c      	bne.n	800046c <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	699a      	ldr	r2, [r3, #24]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f022 0203 	bic.w	r2, r2, #3
 8000440:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	6912      	ldr	r2, [r2, #16]
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800045a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800046a:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7b9b      	ldrb	r3, [r3, #14]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d11c      	bne.n	80004ae <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f022 0203 	bic.w	r2, r2, #3
 8000482:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	6912      	ldr	r2, [r2, #16]
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	699a      	ldr	r2, [r3, #24]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800049c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	699a      	ldr	r2, [r3, #24]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80004ac:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7d1b      	ldrb	r3, [r3, #20]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f040 80bf 	bne.w	8000636 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7d5b      	ldrb	r3, [r3, #21]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d124      	bne.n	800050a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80004ce:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	6992      	ldr	r2, [r2, #24]
 80004d8:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80004e8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	699a      	ldr	r2, [r3, #24]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80004f8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6a1a      	ldr	r2, [r3, #32]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f042 0210 	orr.w	r2, r2, #16
 8000508:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	7d5b      	ldrb	r3, [r3, #21]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d124      	bne.n	800055c <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	699a      	ldr	r2, [r3, #24]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000520:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6992      	ldr	r2, [r2, #24]
 800052a:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800053a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800054a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a1a      	ldr	r2, [r3, #32]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f042 0210 	orr.w	r2, r2, #16
 800055a:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7d5b      	ldrb	r3, [r3, #21]
 8000560:	2b04      	cmp	r3, #4
 8000562:	d124      	bne.n	80005ae <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000572:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	6992      	ldr	r2, [r2, #24]
 800057c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800058c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800059c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a1a      	ldr	r2, [r3, #32]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0210 	orr.w	r2, r2, #16
 80005ac:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7d5b      	ldrb	r3, [r3, #21]
 80005b2:	2b08      	cmp	r3, #8
 80005b4:	d13f      	bne.n	8000636 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005c4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005d4:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80005e4:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6a1a      	ldr	r2, [r3, #32]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f022 0220 	bic.w	r2, r2, #32
 80005f4:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000604:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	699a      	ldr	r2, [r3, #24]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000614:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0204 	orr.w	r2, r2, #4
 8000624:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a1a      	ldr	r2, [r3, #32]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f042 0210 	orr.w	r2, r2, #16
 8000634:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7f1b      	ldrb	r3, [r3, #28]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d16a      	bne.n	8000714 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6a1a      	ldr	r2, [r3, #32]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800064c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7f5b      	ldrb	r3, [r3, #29]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d11c      	bne.n	8000690 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f022 0203 	bic.w	r2, r2, #3
 8000664:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	6a12      	ldr	r2, [r2, #32]
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800067e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800068e:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7f5b      	ldrb	r3, [r3, #29]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d11c      	bne.n	80006d2 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69da      	ldr	r2, [r3, #28]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f022 0203 	bic.w	r2, r2, #3
 80006a6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	6a12      	ldr	r2, [r2, #32]
 80006b0:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006c0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69da      	ldr	r2, [r3, #28]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80006d0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7f5b      	ldrb	r3, [r3, #29]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d11c      	bne.n	8000714 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69da      	ldr	r2, [r3, #28]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0203 	bic.w	r2, r2, #3
 80006e8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	6a12      	ldr	r2, [r2, #32]
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	69da      	ldr	r2, [r3, #28]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000702:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000712:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	d16d      	bne.n	80007fa <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6a1a      	ldr	r2, [r3, #32]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800072c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000734:	2b02      	cmp	r3, #2
 8000736:	d11c      	bne.n	8000772 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000746:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000760:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000770:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000778:	2b03      	cmp	r3, #3
 800077a:	d11c      	bne.n	80007b6 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800078a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000794:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007a4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007b4:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d11c      	bne.n	80007fa <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007ce:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007e8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69da      	ldr	r2, [r3, #28]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80007f8:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7b1b      	ldrb	r3, [r3, #12]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d108      	bne.n	8000814 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 8000812:	e00b      	b.n	800082c <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7b1b      	ldrb	r3, [r3, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d107      	bne.n	800082c <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0201 	bic.w	r2, r2, #1
 800082a:	60da      	str	r2, [r3, #12]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f042 0201 	orr.w	r2, r2, #1
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
 8000864:	4613      	mov	r3, r2
 8000866:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	2103      	movs	r1, #3
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	43d2      	mvns	r2, r2
 800087c:	401a      	ands	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	78b9      	ldrb	r1, [r7, #2]
 8000888:	78fa      	ldrb	r2, [r7, #3]
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	431a      	orrs	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]

}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
 80008ac:	4613      	mov	r3, r2
 80008ae:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	78fa      	ldrb	r2, [r7, #3]
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	78b9      	ldrb	r1, [r7, #2]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	431a      	orrs	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	615a      	str	r2, [r3, #20]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
 80008f0:	4613      	mov	r3, r2
 80008f2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000906:	7afa      	ldrb	r2, [r7, #11]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3208      	adds	r2, #8
 800090c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000910:	7aba      	ldrb	r2, [r7, #10]
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	210f      	movs	r1, #15
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	4611      	mov	r1, r2
 800091e:	7afa      	ldrb	r2, [r7, #11]
 8000920:	4019      	ands	r1, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3208      	adds	r2, #8
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 800092a:	7afa      	ldrb	r2, [r7, #11]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000934:	78b9      	ldrb	r1, [r7, #2]
 8000936:	7aba      	ldrb	r2, [r7, #10]
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4611      	mov	r1, r2
 8000940:	7afa      	ldrb	r2, [r7, #11]
 8000942:	4319      	orrs	r1, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3208      	adds	r2, #8
 8000948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	4613      	mov	r3, r2
 8000964:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	78fa      	ldrb	r2, [r7, #3]
 8000970:	2101      	movs	r1, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	43d2      	mvns	r2, r2
 8000978:	401a      	ands	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	78b9      	ldrb	r1, [r7, #2]
 8000984:	78fa      	ldrb	r2, [r7, #3]
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	431a      	orrs	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	605a      	str	r2, [r3, #4]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	70fb      	strb	r3, [r7, #3]
 80009a6:	4613      	mov	r3, r2
 80009a8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	0052      	lsls	r2, r2, #1
 80009b6:	2103      	movs	r1, #3
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	78b9      	ldrb	r1, [r7, #2]
 80009ca:	78fa      	ldrb	r2, [r7, #3]
 80009cc:	0052      	lsls	r2, r2, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b085      	sub	sp, #20
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	70fb      	strb	r3, [r7, #3]
 80009ee:	4613      	mov	r3, r2
 80009f0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	78fa      	ldrb	r2, [r7, #3]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	2103      	movs	r1, #3
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	78b9      	ldrb	r1, [r7, #2]
 8000a12:	78fa      	ldrb	r2, [r7, #3]
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	609a      	str	r2, [r3, #8]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
	...

08000a2c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <RTC_Alarm_IRQHandler+0x24>)
 8000a34:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000a36:	f000 f80d 	bl	8000a54 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]

	return;
 8000a46:	bf00      	nop
}
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40013c14 	.word	0x40013c14

08000a54 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <RTC_Alarm_Interrupt_Callback+0x14>)
 8000a5e:	f7ff ff1f 	bl	80008a0 <GPIOWritePin>

	return;
 8000a62:	bf00      	nop
}
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a88      	ldr	r2, [pc, #544]	; (8000c98 <EnablePeriClk+0x22c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d108      	bne.n	8000a8e <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a7c:	4b87      	ldr	r3, [pc, #540]	; (8000c9c <EnablePeriClk+0x230>)
 8000a7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f043 0201 	orr.w	r2, r3, #1
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000a8c:	e19b      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a83      	ldr	r2, [pc, #524]	; (8000ca0 <EnablePeriClk+0x234>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d108      	bne.n	8000aa8 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a96:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <EnablePeriClk+0x230>)
 8000a98:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0202 	orr.w	r2, r3, #2
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	e18e      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a7e      	ldr	r2, [pc, #504]	; (8000ca4 <EnablePeriClk+0x238>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d108      	bne.n	8000ac2 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ab0:	4b7a      	ldr	r3, [pc, #488]	; (8000c9c <EnablePeriClk+0x230>)
 8000ab2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	e181      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a78      	ldr	r2, [pc, #480]	; (8000ca8 <EnablePeriClk+0x23c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d108      	bne.n	8000adc <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <EnablePeriClk+0x230>)
 8000acc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f043 0208 	orr.w	r2, r3, #8
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	e174      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a73      	ldr	r2, [pc, #460]	; (8000cac <EnablePeriClk+0x240>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d108      	bne.n	8000af6 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ae4:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <EnablePeriClk+0x230>)
 8000ae6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f043 0210 	orr.w	r2, r3, #16
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	e167      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a6d      	ldr	r2, [pc, #436]	; (8000cb0 <EnablePeriClk+0x244>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d108      	bne.n	8000b10 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000afe:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <EnablePeriClk+0x230>)
 8000b00:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f043 0220 	orr.w	r2, r3, #32
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	e15a      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a68      	ldr	r2, [pc, #416]	; (8000cb4 <EnablePeriClk+0x248>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d108      	bne.n	8000b2a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b18:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <EnablePeriClk+0x230>)
 8000b1a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	e14d      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a62      	ldr	r2, [pc, #392]	; (8000cb8 <EnablePeriClk+0x24c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d108      	bne.n	8000b44 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <EnablePeriClk+0x230>)
 8000b34:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	e140      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <EnablePeriClk+0x250>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d108      	bne.n	8000b5e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b4c:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <EnablePeriClk+0x230>)
 8000b4e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	e133      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a57      	ldr	r2, [pc, #348]	; (8000cc0 <EnablePeriClk+0x254>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d108      	bne.n	8000b78 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000b66:	4b57      	ldr	r3, [pc, #348]	; (8000cc4 <EnablePeriClk+0x258>)
 8000b68:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e126      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a53      	ldr	r2, [pc, #332]	; (8000cc8 <EnablePeriClk+0x25c>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d108      	bne.n	8000b92 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b80:	4b52      	ldr	r3, [pc, #328]	; (8000ccc <EnablePeriClk+0x260>)
 8000b82:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	e119      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <EnablePeriClk+0x264>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d108      	bne.n	8000bac <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <EnablePeriClk+0x260>)
 8000b9c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	e10c      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <EnablePeriClk+0x268>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d108      	bne.n	8000bc6 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bb4:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <EnablePeriClk+0x260>)
 8000bb6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	e0ff      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <EnablePeriClk+0x26c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d108      	bne.n	8000be0 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bce:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <EnablePeriClk+0x260>)
 8000bd0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	e0f2      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <EnablePeriClk+0x270>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d108      	bne.n	8000bfa <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <EnablePeriClk+0x260>)
 8000bea:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	e0e5      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <EnablePeriClk+0x274>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d108      	bne.n	8000c14 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <EnablePeriClk+0x258>)
 8000c04:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f043 0210 	orr.w	r2, r3, #16
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	e0d8      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <EnablePeriClk+0x278>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d108      	bne.n	8000c2e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <EnablePeriClk+0x260>)
 8000c1e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	e0cb      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <EnablePeriClk+0x27c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d108      	bne.n	8000c48 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <EnablePeriClk+0x260>)
 8000c38:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
}
 8000c46:	e0be      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a28      	ldr	r2, [pc, #160]	; (8000cec <EnablePeriClk+0x280>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d108      	bne.n	8000c62 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <EnablePeriClk+0x260>)
 8000c52:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	e0b1      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <EnablePeriClk+0x284>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d108      	bne.n	8000c7c <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <EnablePeriClk+0x260>)
 8000c6c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	e0a4      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <EnablePeriClk+0x288>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d139      	bne.n	8000cf8 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <EnablePeriClk+0x258>)
 8000c86:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f043 0220 	orr.w	r2, r3, #32
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	e097      	b.n	8000dc6 <EnablePeriClk+0x35a>
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40023830 	.word	0x40023830
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40021400 	.word	0x40021400
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40021c00 	.word	0x40021c00
 8000cbc:	40022000 	.word	0x40022000
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023844 	.word	0x40023844
 8000cc8:	40003800 	.word	0x40003800
 8000ccc:	40023840 	.word	0x40023840
 8000cd0:	40003c00 	.word	0x40003c00
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	40005c00 	.word	0x40005c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40004c00 	.word	0x40004c00
 8000cf0:	40005000 	.word	0x40005000
 8000cf4:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a35      	ldr	r2, [pc, #212]	; (8000dd0 <EnablePeriClk+0x364>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d108      	bne.n	8000d12 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <EnablePeriClk+0x368>)
 8000d02:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f043 0210 	orr.w	r2, r3, #16
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	e059      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <EnablePeriClk+0x36c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d108      	bne.n	8000d2c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <EnablePeriClk+0x368>)
 8000d1c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f043 0220 	orr.w	r2, r3, #32
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	e04c      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <EnablePeriClk+0x370>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d108      	bne.n	8000d46 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <EnablePeriClk+0x374>)
 8000d36:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	e03f      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <EnablePeriClk+0x378>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d108      	bne.n	8000d60 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <EnablePeriClk+0x374>)
 8000d50:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	e032      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d66:	d108      	bne.n	8000d7a <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <EnablePeriClk+0x368>)
 8000d6a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	e025      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <EnablePeriClk+0x37c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d108      	bne.n	8000d94 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <EnablePeriClk+0x368>)
 8000d84:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f043 0202 	orr.w	r2, r3, #2
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	e018      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <EnablePeriClk+0x380>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d108      	bne.n	8000dae <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <EnablePeriClk+0x368>)
 8000d9e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f043 0204 	orr.w	r2, r3, #4
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	e00b      	b.n	8000dc6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <EnablePeriClk+0x384>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d107      	bne.n	8000dc6 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <EnablePeriClk+0x368>)
 8000db8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f043 0208 	orr.w	r2, r3, #8
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	601a      	str	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	40023840 	.word	0x40023840
 8000dd8:	40001400 	.word	0x40001400
 8000ddc:	40026000 	.word	0x40026000
 8000de0:	40023830 	.word	0x40023830
 8000de4:	40026400 	.word	0x40026400
 8000de8:	40000400 	.word	0x40000400
 8000dec:	40000800 	.word	0x40000800
 8000df0:	40000c00 	.word	0x40000c00

08000df4 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d110      	bne.n	8000e26 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0208 	orr.w	r2, r2, #8
 8000e12:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	e028      	b.n	8000e78 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d110      	bne.n	8000e50 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0208 	bic.w	r2, r2, #8
 8000e3c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0204 	orr.w	r2, r2, #4
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	e013      	b.n	8000e78 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d10f      	bne.n	8000e78 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0204 	orr.w	r2, r2, #4
 8000e76:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	e00b      	b.n	8000eaa <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d107      	bne.n	8000eaa <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ea8:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000eb8:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6919      	ldr	r1, [r3, #16]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	031a      	lsls	r2, r3, #12
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d108      	bne.n	8000ee8 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	e028      	b.n	8000f3a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d110      	bne.n	8000f12 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	e013      	b.n	8000f3a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d10f      	bne.n	8000f3a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f28:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f38:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8a7 	bl	8001094 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d110      	bne.n	8000f70 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f5c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000f6e:	e03d      	b.n	8000fec <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d110      	bne.n	8000f9a <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f86:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f96:	615a      	str	r2, [r3, #20]
}
 8000f98:	e028      	b.n	8000fec <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d110      	bne.n	8000fc4 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fb0:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
}
 8000fc2:	e013      	b.n	8000fec <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d10f      	bne.n	8000fec <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fda:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fea:	615a      	str	r2, [r3, #20]
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800100a:	60da      	str	r2, [r3, #12]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800104c:	e012      	b.n	8001074 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 800104e:	bf00      	nop
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff ffdf 	bl	8001016 <USART_GetFlagStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f8      	beq.n	8001050 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3301      	adds	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
		Len--;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e9      	bne.n	800104e <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 800107a:	bf00      	nop
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff ffc9 	bl	8001016 <USART_GetFlagStatus>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f8      	beq.n	800107c <USART_SendData+0x3c>
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 800109e:	f240 6383 	movw	r3, #1667	; 0x683
 80010a2:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e00a      	b.n	80010de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c8:	f3af 8000 	nop.w
 80010cc:	4601      	mov	r1, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	60ba      	str	r2, [r7, #8]
 80010d4:	b2ca      	uxtb	r2, r1
 80010d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dbf0      	blt.n	80010c8 <_read+0x12>
  }

  return len;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e009      	b.n	8001116 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	60ba      	str	r2, [r7, #8]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f940 	bl	8000390 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbf1      	blt.n	8001102 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_close>:

int _close(int file)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_isatty>:

int _isatty(int file)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f000 f866 	bl	8001288 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	200000e0 	.word	0x200000e0

080011f4 <main>:
static void breakpoint(void);

static int volatile count = 0;

int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	//Configure the Timer
	configure_delay_timer();
 80011f8:	f7ff f84a 	bl	8000290 <configure_delay_timer>

	//Configure UART
	configure_uart();
 80011fc:	f7ff f86a 	bl	80002d4 <configure_uart>

	while(1)
	{
		if(count == 100)
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <main+0x2c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d101      	bne.n	800120c <main+0x18>
		{
			breakpoint();
 8001208:	f000 f80e 	bl	8001228 <breakpoint>
		}

		printf("Count is %d\r\n", count++);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <main+0x2c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <main+0x2c>)
 8001214:	600a      	str	r2, [r1, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <main+0x30>)
 800121a:	f000 f945 	bl	80014a8 <iprintf>
		if(count == 100)
 800121e:	e7ef      	b.n	8001200 <main+0xc>
 8001220:	200000cc 	.word	0x200000cc
 8001224:	08002210 	.word	0x08002210

08001228 <breakpoint>:

	return 0;
}

static void breakpoint(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

	return;
 800122c:	bf00      	nop
}
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001262:	f000 f817 	bl	8001294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001266:	f7ff ffc5 	bl	80011f4 <main>

0800126a <LoopForever>:

LoopForever:
  b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001278:	080022c0 	.word	0x080022c0
  ldr r2, =_sbss
 800127c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001280:	200000e0 	.word	0x200000e0

08001284 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <__errno>:
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <__errno+0x8>)
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000

08001294 <__libc_init_array>:
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	4d0d      	ldr	r5, [pc, #52]	; (80012cc <__libc_init_array+0x38>)
 8001298:	4c0d      	ldr	r4, [pc, #52]	; (80012d0 <__libc_init_array+0x3c>)
 800129a:	1b64      	subs	r4, r4, r5
 800129c:	10a4      	asrs	r4, r4, #2
 800129e:	2600      	movs	r6, #0
 80012a0:	42a6      	cmp	r6, r4
 80012a2:	d109      	bne.n	80012b8 <__libc_init_array+0x24>
 80012a4:	4d0b      	ldr	r5, [pc, #44]	; (80012d4 <__libc_init_array+0x40>)
 80012a6:	4c0c      	ldr	r4, [pc, #48]	; (80012d8 <__libc_init_array+0x44>)
 80012a8:	f000 ffa6 	bl	80021f8 <_init>
 80012ac:	1b64      	subs	r4, r4, r5
 80012ae:	10a4      	asrs	r4, r4, #2
 80012b0:	2600      	movs	r6, #0
 80012b2:	42a6      	cmp	r6, r4
 80012b4:	d105      	bne.n	80012c2 <__libc_init_array+0x2e>
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012bc:	4798      	blx	r3
 80012be:	3601      	adds	r6, #1
 80012c0:	e7ee      	b.n	80012a0 <__libc_init_array+0xc>
 80012c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012c6:	4798      	blx	r3
 80012c8:	3601      	adds	r6, #1
 80012ca:	e7f2      	b.n	80012b2 <__libc_init_array+0x1e>
 80012cc:	080022b8 	.word	0x080022b8
 80012d0:	080022b8 	.word	0x080022b8
 80012d4:	080022b8 	.word	0x080022b8
 80012d8:	080022bc 	.word	0x080022bc

080012dc <memset>:
 80012dc:	4402      	add	r2, r0
 80012de:	4603      	mov	r3, r0
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d100      	bne.n	80012e6 <memset+0xa>
 80012e4:	4770      	bx	lr
 80012e6:	f803 1b01 	strb.w	r1, [r3], #1
 80012ea:	e7f9      	b.n	80012e0 <memset+0x4>

080012ec <_free_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4605      	mov	r5, r0
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d041      	beq.n	8001378 <_free_r+0x8c>
 80012f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012f8:	1f0c      	subs	r4, r1, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bfb8      	it	lt
 80012fe:	18e4      	addlt	r4, r4, r3
 8001300:	f000 fbd6 	bl	8001ab0 <__malloc_lock>
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <_free_r+0x90>)
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	b933      	cbnz	r3, 8001318 <_free_r+0x2c>
 800130a:	6063      	str	r3, [r4, #4]
 800130c:	6014      	str	r4, [r2, #0]
 800130e:	4628      	mov	r0, r5
 8001310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001314:	f000 bbd2 	b.w	8001abc <__malloc_unlock>
 8001318:	42a3      	cmp	r3, r4
 800131a:	d908      	bls.n	800132e <_free_r+0x42>
 800131c:	6820      	ldr	r0, [r4, #0]
 800131e:	1821      	adds	r1, r4, r0
 8001320:	428b      	cmp	r3, r1
 8001322:	bf01      	itttt	eq
 8001324:	6819      	ldreq	r1, [r3, #0]
 8001326:	685b      	ldreq	r3, [r3, #4]
 8001328:	1809      	addeq	r1, r1, r0
 800132a:	6021      	streq	r1, [r4, #0]
 800132c:	e7ed      	b.n	800130a <_free_r+0x1e>
 800132e:	461a      	mov	r2, r3
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b10b      	cbz	r3, 8001338 <_free_r+0x4c>
 8001334:	42a3      	cmp	r3, r4
 8001336:	d9fa      	bls.n	800132e <_free_r+0x42>
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	1850      	adds	r0, r2, r1
 800133c:	42a0      	cmp	r0, r4
 800133e:	d10b      	bne.n	8001358 <_free_r+0x6c>
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	4401      	add	r1, r0
 8001344:	1850      	adds	r0, r2, r1
 8001346:	4283      	cmp	r3, r0
 8001348:	6011      	str	r1, [r2, #0]
 800134a:	d1e0      	bne.n	800130e <_free_r+0x22>
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	4401      	add	r1, r0
 8001354:	6011      	str	r1, [r2, #0]
 8001356:	e7da      	b.n	800130e <_free_r+0x22>
 8001358:	d902      	bls.n	8001360 <_free_r+0x74>
 800135a:	230c      	movs	r3, #12
 800135c:	602b      	str	r3, [r5, #0]
 800135e:	e7d6      	b.n	800130e <_free_r+0x22>
 8001360:	6820      	ldr	r0, [r4, #0]
 8001362:	1821      	adds	r1, r4, r0
 8001364:	428b      	cmp	r3, r1
 8001366:	bf04      	itt	eq
 8001368:	6819      	ldreq	r1, [r3, #0]
 800136a:	685b      	ldreq	r3, [r3, #4]
 800136c:	6063      	str	r3, [r4, #4]
 800136e:	bf04      	itt	eq
 8001370:	1809      	addeq	r1, r1, r0
 8001372:	6021      	streq	r1, [r4, #0]
 8001374:	6054      	str	r4, [r2, #4]
 8001376:	e7ca      	b.n	800130e <_free_r+0x22>
 8001378:	bd38      	pop	{r3, r4, r5, pc}
 800137a:	bf00      	nop
 800137c:	200000d0 	.word	0x200000d0

08001380 <sbrk_aligned>:
 8001380:	b570      	push	{r4, r5, r6, lr}
 8001382:	4e0e      	ldr	r6, [pc, #56]	; (80013bc <sbrk_aligned+0x3c>)
 8001384:	460c      	mov	r4, r1
 8001386:	6831      	ldr	r1, [r6, #0]
 8001388:	4605      	mov	r5, r0
 800138a:	b911      	cbnz	r1, 8001392 <sbrk_aligned+0x12>
 800138c:	f000 f8a4 	bl	80014d8 <_sbrk_r>
 8001390:	6030      	str	r0, [r6, #0]
 8001392:	4621      	mov	r1, r4
 8001394:	4628      	mov	r0, r5
 8001396:	f000 f89f 	bl	80014d8 <_sbrk_r>
 800139a:	1c43      	adds	r3, r0, #1
 800139c:	d00a      	beq.n	80013b4 <sbrk_aligned+0x34>
 800139e:	1cc4      	adds	r4, r0, #3
 80013a0:	f024 0403 	bic.w	r4, r4, #3
 80013a4:	42a0      	cmp	r0, r4
 80013a6:	d007      	beq.n	80013b8 <sbrk_aligned+0x38>
 80013a8:	1a21      	subs	r1, r4, r0
 80013aa:	4628      	mov	r0, r5
 80013ac:	f000 f894 	bl	80014d8 <_sbrk_r>
 80013b0:	3001      	adds	r0, #1
 80013b2:	d101      	bne.n	80013b8 <sbrk_aligned+0x38>
 80013b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80013b8:	4620      	mov	r0, r4
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	200000d4 	.word	0x200000d4

080013c0 <_malloc_r>:
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	1ccd      	adds	r5, r1, #3
 80013c6:	f025 0503 	bic.w	r5, r5, #3
 80013ca:	3508      	adds	r5, #8
 80013cc:	2d0c      	cmp	r5, #12
 80013ce:	bf38      	it	cc
 80013d0:	250c      	movcc	r5, #12
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	4607      	mov	r7, r0
 80013d6:	db01      	blt.n	80013dc <_malloc_r+0x1c>
 80013d8:	42a9      	cmp	r1, r5
 80013da:	d905      	bls.n	80013e8 <_malloc_r+0x28>
 80013dc:	230c      	movs	r3, #12
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	2600      	movs	r6, #0
 80013e2:	4630      	mov	r0, r6
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e8:	4e2e      	ldr	r6, [pc, #184]	; (80014a4 <_malloc_r+0xe4>)
 80013ea:	f000 fb61 	bl	8001ab0 <__malloc_lock>
 80013ee:	6833      	ldr	r3, [r6, #0]
 80013f0:	461c      	mov	r4, r3
 80013f2:	bb34      	cbnz	r4, 8001442 <_malloc_r+0x82>
 80013f4:	4629      	mov	r1, r5
 80013f6:	4638      	mov	r0, r7
 80013f8:	f7ff ffc2 	bl	8001380 <sbrk_aligned>
 80013fc:	1c43      	adds	r3, r0, #1
 80013fe:	4604      	mov	r4, r0
 8001400:	d14d      	bne.n	800149e <_malloc_r+0xde>
 8001402:	6834      	ldr	r4, [r6, #0]
 8001404:	4626      	mov	r6, r4
 8001406:	2e00      	cmp	r6, #0
 8001408:	d140      	bne.n	800148c <_malloc_r+0xcc>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	4631      	mov	r1, r6
 800140e:	4638      	mov	r0, r7
 8001410:	eb04 0803 	add.w	r8, r4, r3
 8001414:	f000 f860 	bl	80014d8 <_sbrk_r>
 8001418:	4580      	cmp	r8, r0
 800141a:	d13a      	bne.n	8001492 <_malloc_r+0xd2>
 800141c:	6821      	ldr	r1, [r4, #0]
 800141e:	3503      	adds	r5, #3
 8001420:	1a6d      	subs	r5, r5, r1
 8001422:	f025 0503 	bic.w	r5, r5, #3
 8001426:	3508      	adds	r5, #8
 8001428:	2d0c      	cmp	r5, #12
 800142a:	bf38      	it	cc
 800142c:	250c      	movcc	r5, #12
 800142e:	4629      	mov	r1, r5
 8001430:	4638      	mov	r0, r7
 8001432:	f7ff ffa5 	bl	8001380 <sbrk_aligned>
 8001436:	3001      	adds	r0, #1
 8001438:	d02b      	beq.n	8001492 <_malloc_r+0xd2>
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	442b      	add	r3, r5
 800143e:	6023      	str	r3, [r4, #0]
 8001440:	e00e      	b.n	8001460 <_malloc_r+0xa0>
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	1b52      	subs	r2, r2, r5
 8001446:	d41e      	bmi.n	8001486 <_malloc_r+0xc6>
 8001448:	2a0b      	cmp	r2, #11
 800144a:	d916      	bls.n	800147a <_malloc_r+0xba>
 800144c:	1961      	adds	r1, r4, r5
 800144e:	42a3      	cmp	r3, r4
 8001450:	6025      	str	r5, [r4, #0]
 8001452:	bf18      	it	ne
 8001454:	6059      	strne	r1, [r3, #4]
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	bf08      	it	eq
 800145a:	6031      	streq	r1, [r6, #0]
 800145c:	5162      	str	r2, [r4, r5]
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	4638      	mov	r0, r7
 8001462:	f104 060b 	add.w	r6, r4, #11
 8001466:	f000 fb29 	bl	8001abc <__malloc_unlock>
 800146a:	f026 0607 	bic.w	r6, r6, #7
 800146e:	1d23      	adds	r3, r4, #4
 8001470:	1af2      	subs	r2, r6, r3
 8001472:	d0b6      	beq.n	80013e2 <_malloc_r+0x22>
 8001474:	1b9b      	subs	r3, r3, r6
 8001476:	50a3      	str	r3, [r4, r2]
 8001478:	e7b3      	b.n	80013e2 <_malloc_r+0x22>
 800147a:	6862      	ldr	r2, [r4, #4]
 800147c:	42a3      	cmp	r3, r4
 800147e:	bf0c      	ite	eq
 8001480:	6032      	streq	r2, [r6, #0]
 8001482:	605a      	strne	r2, [r3, #4]
 8001484:	e7ec      	b.n	8001460 <_malloc_r+0xa0>
 8001486:	4623      	mov	r3, r4
 8001488:	6864      	ldr	r4, [r4, #4]
 800148a:	e7b2      	b.n	80013f2 <_malloc_r+0x32>
 800148c:	4634      	mov	r4, r6
 800148e:	6876      	ldr	r6, [r6, #4]
 8001490:	e7b9      	b.n	8001406 <_malloc_r+0x46>
 8001492:	230c      	movs	r3, #12
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4638      	mov	r0, r7
 8001498:	f000 fb10 	bl	8001abc <__malloc_unlock>
 800149c:	e7a1      	b.n	80013e2 <_malloc_r+0x22>
 800149e:	6025      	str	r5, [r4, #0]
 80014a0:	e7de      	b.n	8001460 <_malloc_r+0xa0>
 80014a2:	bf00      	nop
 80014a4:	200000d0 	.word	0x200000d0

080014a8 <iprintf>:
 80014a8:	b40f      	push	{r0, r1, r2, r3}
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <iprintf+0x2c>)
 80014ac:	b513      	push	{r0, r1, r4, lr}
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	b124      	cbz	r4, 80014bc <iprintf+0x14>
 80014b2:	69a3      	ldr	r3, [r4, #24]
 80014b4:	b913      	cbnz	r3, 80014bc <iprintf+0x14>
 80014b6:	4620      	mov	r0, r4
 80014b8:	f000 f9f4 	bl	80018a4 <__sinit>
 80014bc:	ab05      	add	r3, sp, #20
 80014be:	9a04      	ldr	r2, [sp, #16]
 80014c0:	68a1      	ldr	r1, [r4, #8]
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 fb27 	bl	8001b18 <_vfiprintf_r>
 80014ca:	b002      	add	sp, #8
 80014cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d0:	b004      	add	sp, #16
 80014d2:	4770      	bx	lr
 80014d4:	20000000 	.word	0x20000000

080014d8 <_sbrk_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4d06      	ldr	r5, [pc, #24]	; (80014f4 <_sbrk_r+0x1c>)
 80014dc:	2300      	movs	r3, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	602b      	str	r3, [r5, #0]
 80014e4:	f7ff fe50 	bl	8001188 <_sbrk>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_sbrk_r+0x1a>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_sbrk_r+0x1a>
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	200000dc 	.word	0x200000dc

080014f8 <__swbuf_r>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	460e      	mov	r6, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	4605      	mov	r5, r0
 8001500:	b118      	cbz	r0, 800150a <__swbuf_r+0x12>
 8001502:	6983      	ldr	r3, [r0, #24]
 8001504:	b90b      	cbnz	r3, 800150a <__swbuf_r+0x12>
 8001506:	f000 f9cd 	bl	80018a4 <__sinit>
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <__swbuf_r+0x98>)
 800150c:	429c      	cmp	r4, r3
 800150e:	d12b      	bne.n	8001568 <__swbuf_r+0x70>
 8001510:	686c      	ldr	r4, [r5, #4]
 8001512:	69a3      	ldr	r3, [r4, #24]
 8001514:	60a3      	str	r3, [r4, #8]
 8001516:	89a3      	ldrh	r3, [r4, #12]
 8001518:	071a      	lsls	r2, r3, #28
 800151a:	d52f      	bpl.n	800157c <__swbuf_r+0x84>
 800151c:	6923      	ldr	r3, [r4, #16]
 800151e:	b36b      	cbz	r3, 800157c <__swbuf_r+0x84>
 8001520:	6923      	ldr	r3, [r4, #16]
 8001522:	6820      	ldr	r0, [r4, #0]
 8001524:	1ac0      	subs	r0, r0, r3
 8001526:	6963      	ldr	r3, [r4, #20]
 8001528:	b2f6      	uxtb	r6, r6
 800152a:	4283      	cmp	r3, r0
 800152c:	4637      	mov	r7, r6
 800152e:	dc04      	bgt.n	800153a <__swbuf_r+0x42>
 8001530:	4621      	mov	r1, r4
 8001532:	4628      	mov	r0, r5
 8001534:	f000 f922 	bl	800177c <_fflush_r>
 8001538:	bb30      	cbnz	r0, 8001588 <__swbuf_r+0x90>
 800153a:	68a3      	ldr	r3, [r4, #8]
 800153c:	3b01      	subs	r3, #1
 800153e:	60a3      	str	r3, [r4, #8]
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	6022      	str	r2, [r4, #0]
 8001546:	701e      	strb	r6, [r3, #0]
 8001548:	6963      	ldr	r3, [r4, #20]
 800154a:	3001      	adds	r0, #1
 800154c:	4283      	cmp	r3, r0
 800154e:	d004      	beq.n	800155a <__swbuf_r+0x62>
 8001550:	89a3      	ldrh	r3, [r4, #12]
 8001552:	07db      	lsls	r3, r3, #31
 8001554:	d506      	bpl.n	8001564 <__swbuf_r+0x6c>
 8001556:	2e0a      	cmp	r6, #10
 8001558:	d104      	bne.n	8001564 <__swbuf_r+0x6c>
 800155a:	4621      	mov	r1, r4
 800155c:	4628      	mov	r0, r5
 800155e:	f000 f90d 	bl	800177c <_fflush_r>
 8001562:	b988      	cbnz	r0, 8001588 <__swbuf_r+0x90>
 8001564:	4638      	mov	r0, r7
 8001566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <__swbuf_r+0x9c>)
 800156a:	429c      	cmp	r4, r3
 800156c:	d101      	bne.n	8001572 <__swbuf_r+0x7a>
 800156e:	68ac      	ldr	r4, [r5, #8]
 8001570:	e7cf      	b.n	8001512 <__swbuf_r+0x1a>
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <__swbuf_r+0xa0>)
 8001574:	429c      	cmp	r4, r3
 8001576:	bf08      	it	eq
 8001578:	68ec      	ldreq	r4, [r5, #12]
 800157a:	e7ca      	b.n	8001512 <__swbuf_r+0x1a>
 800157c:	4621      	mov	r1, r4
 800157e:	4628      	mov	r0, r5
 8001580:	f000 f80c 	bl	800159c <__swsetup_r>
 8001584:	2800      	cmp	r0, #0
 8001586:	d0cb      	beq.n	8001520 <__swbuf_r+0x28>
 8001588:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800158c:	e7ea      	b.n	8001564 <__swbuf_r+0x6c>
 800158e:	bf00      	nop
 8001590:	08002244 	.word	0x08002244
 8001594:	08002264 	.word	0x08002264
 8001598:	08002224 	.word	0x08002224

0800159c <__swsetup_r>:
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <__swsetup_r+0xcc>)
 800159e:	b570      	push	{r4, r5, r6, lr}
 80015a0:	681d      	ldr	r5, [r3, #0]
 80015a2:	4606      	mov	r6, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	b125      	cbz	r5, 80015b2 <__swsetup_r+0x16>
 80015a8:	69ab      	ldr	r3, [r5, #24]
 80015aa:	b913      	cbnz	r3, 80015b2 <__swsetup_r+0x16>
 80015ac:	4628      	mov	r0, r5
 80015ae:	f000 f979 	bl	80018a4 <__sinit>
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <__swsetup_r+0xd0>)
 80015b4:	429c      	cmp	r4, r3
 80015b6:	d10f      	bne.n	80015d8 <__swsetup_r+0x3c>
 80015b8:	686c      	ldr	r4, [r5, #4]
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015c0:	0719      	lsls	r1, r3, #28
 80015c2:	d42c      	bmi.n	800161e <__swsetup_r+0x82>
 80015c4:	06dd      	lsls	r5, r3, #27
 80015c6:	d411      	bmi.n	80015ec <__swsetup_r+0x50>
 80015c8:	2309      	movs	r3, #9
 80015ca:	6033      	str	r3, [r6, #0]
 80015cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015d0:	81a3      	strh	r3, [r4, #12]
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d6:	e03e      	b.n	8001656 <__swsetup_r+0xba>
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <__swsetup_r+0xd4>)
 80015da:	429c      	cmp	r4, r3
 80015dc:	d101      	bne.n	80015e2 <__swsetup_r+0x46>
 80015de:	68ac      	ldr	r4, [r5, #8]
 80015e0:	e7eb      	b.n	80015ba <__swsetup_r+0x1e>
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <__swsetup_r+0xd8>)
 80015e4:	429c      	cmp	r4, r3
 80015e6:	bf08      	it	eq
 80015e8:	68ec      	ldreq	r4, [r5, #12]
 80015ea:	e7e6      	b.n	80015ba <__swsetup_r+0x1e>
 80015ec:	0758      	lsls	r0, r3, #29
 80015ee:	d512      	bpl.n	8001616 <__swsetup_r+0x7a>
 80015f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015f2:	b141      	cbz	r1, 8001606 <__swsetup_r+0x6a>
 80015f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015f8:	4299      	cmp	r1, r3
 80015fa:	d002      	beq.n	8001602 <__swsetup_r+0x66>
 80015fc:	4630      	mov	r0, r6
 80015fe:	f7ff fe75 	bl	80012ec <_free_r>
 8001602:	2300      	movs	r3, #0
 8001604:	6363      	str	r3, [r4, #52]	; 0x34
 8001606:	89a3      	ldrh	r3, [r4, #12]
 8001608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800160c:	81a3      	strh	r3, [r4, #12]
 800160e:	2300      	movs	r3, #0
 8001610:	6063      	str	r3, [r4, #4]
 8001612:	6923      	ldr	r3, [r4, #16]
 8001614:	6023      	str	r3, [r4, #0]
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	81a3      	strh	r3, [r4, #12]
 800161e:	6923      	ldr	r3, [r4, #16]
 8001620:	b94b      	cbnz	r3, 8001636 <__swsetup_r+0x9a>
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162c:	d003      	beq.n	8001636 <__swsetup_r+0x9a>
 800162e:	4621      	mov	r1, r4
 8001630:	4630      	mov	r0, r6
 8001632:	f000 f9fd 	bl	8001a30 <__smakebuf_r>
 8001636:	89a0      	ldrh	r0, [r4, #12]
 8001638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800163c:	f010 0301 	ands.w	r3, r0, #1
 8001640:	d00a      	beq.n	8001658 <__swsetup_r+0xbc>
 8001642:	2300      	movs	r3, #0
 8001644:	60a3      	str	r3, [r4, #8]
 8001646:	6963      	ldr	r3, [r4, #20]
 8001648:	425b      	negs	r3, r3
 800164a:	61a3      	str	r3, [r4, #24]
 800164c:	6923      	ldr	r3, [r4, #16]
 800164e:	b943      	cbnz	r3, 8001662 <__swsetup_r+0xc6>
 8001650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001654:	d1ba      	bne.n	80015cc <__swsetup_r+0x30>
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	0781      	lsls	r1, r0, #30
 800165a:	bf58      	it	pl
 800165c:	6963      	ldrpl	r3, [r4, #20]
 800165e:	60a3      	str	r3, [r4, #8]
 8001660:	e7f4      	b.n	800164c <__swsetup_r+0xb0>
 8001662:	2000      	movs	r0, #0
 8001664:	e7f7      	b.n	8001656 <__swsetup_r+0xba>
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	08002244 	.word	0x08002244
 8001670:	08002264 	.word	0x08002264
 8001674:	08002224 	.word	0x08002224

08001678 <__sflush_r>:
 8001678:	898a      	ldrh	r2, [r1, #12]
 800167a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167c:	4605      	mov	r5, r0
 800167e:	0710      	lsls	r0, r2, #28
 8001680:	460c      	mov	r4, r1
 8001682:	d457      	bmi.n	8001734 <__sflush_r+0xbc>
 8001684:	684b      	ldr	r3, [r1, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc04      	bgt.n	8001694 <__sflush_r+0x1c>
 800168a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	dc01      	bgt.n	8001694 <__sflush_r+0x1c>
 8001690:	2000      	movs	r0, #0
 8001692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001696:	2e00      	cmp	r6, #0
 8001698:	d0fa      	beq.n	8001690 <__sflush_r+0x18>
 800169a:	2300      	movs	r3, #0
 800169c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016a0:	682f      	ldr	r7, [r5, #0]
 80016a2:	602b      	str	r3, [r5, #0]
 80016a4:	d032      	beq.n	800170c <__sflush_r+0x94>
 80016a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	075a      	lsls	r2, r3, #29
 80016ac:	d505      	bpl.n	80016ba <__sflush_r+0x42>
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	1ac0      	subs	r0, r0, r3
 80016b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016b4:	b10b      	cbz	r3, 80016ba <__sflush_r+0x42>
 80016b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b8:	1ac0      	subs	r0, r0, r3
 80016ba:	2300      	movs	r3, #0
 80016bc:	4602      	mov	r2, r0
 80016be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016c0:	6a21      	ldr	r1, [r4, #32]
 80016c2:	4628      	mov	r0, r5
 80016c4:	47b0      	blx	r6
 80016c6:	1c43      	adds	r3, r0, #1
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	d106      	bne.n	80016da <__sflush_r+0x62>
 80016cc:	6829      	ldr	r1, [r5, #0]
 80016ce:	291d      	cmp	r1, #29
 80016d0:	d82c      	bhi.n	800172c <__sflush_r+0xb4>
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <__sflush_r+0x100>)
 80016d4:	40ca      	lsrs	r2, r1
 80016d6:	07d6      	lsls	r6, r2, #31
 80016d8:	d528      	bpl.n	800172c <__sflush_r+0xb4>
 80016da:	2200      	movs	r2, #0
 80016dc:	6062      	str	r2, [r4, #4]
 80016de:	04d9      	lsls	r1, r3, #19
 80016e0:	6922      	ldr	r2, [r4, #16]
 80016e2:	6022      	str	r2, [r4, #0]
 80016e4:	d504      	bpl.n	80016f0 <__sflush_r+0x78>
 80016e6:	1c42      	adds	r2, r0, #1
 80016e8:	d101      	bne.n	80016ee <__sflush_r+0x76>
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	b903      	cbnz	r3, 80016f0 <__sflush_r+0x78>
 80016ee:	6560      	str	r0, [r4, #84]	; 0x54
 80016f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016f2:	602f      	str	r7, [r5, #0]
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d0cb      	beq.n	8001690 <__sflush_r+0x18>
 80016f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016fc:	4299      	cmp	r1, r3
 80016fe:	d002      	beq.n	8001706 <__sflush_r+0x8e>
 8001700:	4628      	mov	r0, r5
 8001702:	f7ff fdf3 	bl	80012ec <_free_r>
 8001706:	2000      	movs	r0, #0
 8001708:	6360      	str	r0, [r4, #52]	; 0x34
 800170a:	e7c2      	b.n	8001692 <__sflush_r+0x1a>
 800170c:	6a21      	ldr	r1, [r4, #32]
 800170e:	2301      	movs	r3, #1
 8001710:	4628      	mov	r0, r5
 8001712:	47b0      	blx	r6
 8001714:	1c41      	adds	r1, r0, #1
 8001716:	d1c7      	bne.n	80016a8 <__sflush_r+0x30>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0c4      	beq.n	80016a8 <__sflush_r+0x30>
 800171e:	2b1d      	cmp	r3, #29
 8001720:	d001      	beq.n	8001726 <__sflush_r+0xae>
 8001722:	2b16      	cmp	r3, #22
 8001724:	d101      	bne.n	800172a <__sflush_r+0xb2>
 8001726:	602f      	str	r7, [r5, #0]
 8001728:	e7b2      	b.n	8001690 <__sflush_r+0x18>
 800172a:	89a3      	ldrh	r3, [r4, #12]
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	81a3      	strh	r3, [r4, #12]
 8001732:	e7ae      	b.n	8001692 <__sflush_r+0x1a>
 8001734:	690f      	ldr	r7, [r1, #16]
 8001736:	2f00      	cmp	r7, #0
 8001738:	d0aa      	beq.n	8001690 <__sflush_r+0x18>
 800173a:	0793      	lsls	r3, r2, #30
 800173c:	680e      	ldr	r6, [r1, #0]
 800173e:	bf08      	it	eq
 8001740:	694b      	ldreq	r3, [r1, #20]
 8001742:	600f      	str	r7, [r1, #0]
 8001744:	bf18      	it	ne
 8001746:	2300      	movne	r3, #0
 8001748:	1bf6      	subs	r6, r6, r7
 800174a:	608b      	str	r3, [r1, #8]
 800174c:	2e00      	cmp	r6, #0
 800174e:	dd9f      	ble.n	8001690 <__sflush_r+0x18>
 8001750:	6a21      	ldr	r1, [r4, #32]
 8001752:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001756:	4633      	mov	r3, r6
 8001758:	463a      	mov	r2, r7
 800175a:	4628      	mov	r0, r5
 800175c:	47e0      	blx	ip
 800175e:	2800      	cmp	r0, #0
 8001760:	dc06      	bgt.n	8001770 <__sflush_r+0xf8>
 8001762:	89a3      	ldrh	r3, [r4, #12]
 8001764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001768:	81a3      	strh	r3, [r4, #12]
 800176a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176e:	e790      	b.n	8001692 <__sflush_r+0x1a>
 8001770:	4407      	add	r7, r0
 8001772:	1a36      	subs	r6, r6, r0
 8001774:	e7ea      	b.n	800174c <__sflush_r+0xd4>
 8001776:	bf00      	nop
 8001778:	20400001 	.word	0x20400001

0800177c <_fflush_r>:
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	690b      	ldr	r3, [r1, #16]
 8001780:	4605      	mov	r5, r0
 8001782:	460c      	mov	r4, r1
 8001784:	b913      	cbnz	r3, 800178c <_fflush_r+0x10>
 8001786:	2500      	movs	r5, #0
 8001788:	4628      	mov	r0, r5
 800178a:	bd38      	pop	{r3, r4, r5, pc}
 800178c:	b118      	cbz	r0, 8001796 <_fflush_r+0x1a>
 800178e:	6983      	ldr	r3, [r0, #24]
 8001790:	b90b      	cbnz	r3, 8001796 <_fflush_r+0x1a>
 8001792:	f000 f887 	bl	80018a4 <__sinit>
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <_fflush_r+0x6c>)
 8001798:	429c      	cmp	r4, r3
 800179a:	d11b      	bne.n	80017d4 <_fflush_r+0x58>
 800179c:	686c      	ldr	r4, [r5, #4]
 800179e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ef      	beq.n	8001786 <_fflush_r+0xa>
 80017a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017a8:	07d0      	lsls	r0, r2, #31
 80017aa:	d404      	bmi.n	80017b6 <_fflush_r+0x3a>
 80017ac:	0599      	lsls	r1, r3, #22
 80017ae:	d402      	bmi.n	80017b6 <_fflush_r+0x3a>
 80017b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017b2:	f000 f915 	bl	80019e0 <__retarget_lock_acquire_recursive>
 80017b6:	4628      	mov	r0, r5
 80017b8:	4621      	mov	r1, r4
 80017ba:	f7ff ff5d 	bl	8001678 <__sflush_r>
 80017be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c0:	07da      	lsls	r2, r3, #31
 80017c2:	4605      	mov	r5, r0
 80017c4:	d4e0      	bmi.n	8001788 <_fflush_r+0xc>
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	059b      	lsls	r3, r3, #22
 80017ca:	d4dd      	bmi.n	8001788 <_fflush_r+0xc>
 80017cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ce:	f000 f908 	bl	80019e2 <__retarget_lock_release_recursive>
 80017d2:	e7d9      	b.n	8001788 <_fflush_r+0xc>
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <_fflush_r+0x70>)
 80017d6:	429c      	cmp	r4, r3
 80017d8:	d101      	bne.n	80017de <_fflush_r+0x62>
 80017da:	68ac      	ldr	r4, [r5, #8]
 80017dc:	e7df      	b.n	800179e <_fflush_r+0x22>
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <_fflush_r+0x74>)
 80017e0:	429c      	cmp	r4, r3
 80017e2:	bf08      	it	eq
 80017e4:	68ec      	ldreq	r4, [r5, #12]
 80017e6:	e7da      	b.n	800179e <_fflush_r+0x22>
 80017e8:	08002244 	.word	0x08002244
 80017ec:	08002264 	.word	0x08002264
 80017f0:	08002224 	.word	0x08002224

080017f4 <std>:
 80017f4:	2300      	movs	r3, #0
 80017f6:	b510      	push	{r4, lr}
 80017f8:	4604      	mov	r4, r0
 80017fa:	e9c0 3300 	strd	r3, r3, [r0]
 80017fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001802:	6083      	str	r3, [r0, #8]
 8001804:	8181      	strh	r1, [r0, #12]
 8001806:	6643      	str	r3, [r0, #100]	; 0x64
 8001808:	81c2      	strh	r2, [r0, #14]
 800180a:	6183      	str	r3, [r0, #24]
 800180c:	4619      	mov	r1, r3
 800180e:	2208      	movs	r2, #8
 8001810:	305c      	adds	r0, #92	; 0x5c
 8001812:	f7ff fd63 	bl	80012dc <memset>
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <std+0x38>)
 8001818:	6263      	str	r3, [r4, #36]	; 0x24
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <std+0x3c>)
 800181c:	62a3      	str	r3, [r4, #40]	; 0x28
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <std+0x40>)
 8001820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <std+0x44>)
 8001824:	6224      	str	r4, [r4, #32]
 8001826:	6323      	str	r3, [r4, #48]	; 0x30
 8001828:	bd10      	pop	{r4, pc}
 800182a:	bf00      	nop
 800182c:	080020a1 	.word	0x080020a1
 8001830:	080020c3 	.word	0x080020c3
 8001834:	080020fb 	.word	0x080020fb
 8001838:	0800211f 	.word	0x0800211f

0800183c <_cleanup_r>:
 800183c:	4901      	ldr	r1, [pc, #4]	; (8001844 <_cleanup_r+0x8>)
 800183e:	f000 b8af 	b.w	80019a0 <_fwalk_reent>
 8001842:	bf00      	nop
 8001844:	0800177d 	.word	0x0800177d

08001848 <__sfmoreglue>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	2268      	movs	r2, #104	; 0x68
 800184c:	1e4d      	subs	r5, r1, #1
 800184e:	4355      	muls	r5, r2
 8001850:	460e      	mov	r6, r1
 8001852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001856:	f7ff fdb3 	bl	80013c0 <_malloc_r>
 800185a:	4604      	mov	r4, r0
 800185c:	b140      	cbz	r0, 8001870 <__sfmoreglue+0x28>
 800185e:	2100      	movs	r1, #0
 8001860:	e9c0 1600 	strd	r1, r6, [r0]
 8001864:	300c      	adds	r0, #12
 8001866:	60a0      	str	r0, [r4, #8]
 8001868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800186c:	f7ff fd36 	bl	80012dc <memset>
 8001870:	4620      	mov	r0, r4
 8001872:	bd70      	pop	{r4, r5, r6, pc}

08001874 <__sfp_lock_acquire>:
 8001874:	4801      	ldr	r0, [pc, #4]	; (800187c <__sfp_lock_acquire+0x8>)
 8001876:	f000 b8b3 	b.w	80019e0 <__retarget_lock_acquire_recursive>
 800187a:	bf00      	nop
 800187c:	200000d9 	.word	0x200000d9

08001880 <__sfp_lock_release>:
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <__sfp_lock_release+0x8>)
 8001882:	f000 b8ae 	b.w	80019e2 <__retarget_lock_release_recursive>
 8001886:	bf00      	nop
 8001888:	200000d9 	.word	0x200000d9

0800188c <__sinit_lock_acquire>:
 800188c:	4801      	ldr	r0, [pc, #4]	; (8001894 <__sinit_lock_acquire+0x8>)
 800188e:	f000 b8a7 	b.w	80019e0 <__retarget_lock_acquire_recursive>
 8001892:	bf00      	nop
 8001894:	200000da 	.word	0x200000da

08001898 <__sinit_lock_release>:
 8001898:	4801      	ldr	r0, [pc, #4]	; (80018a0 <__sinit_lock_release+0x8>)
 800189a:	f000 b8a2 	b.w	80019e2 <__retarget_lock_release_recursive>
 800189e:	bf00      	nop
 80018a0:	200000da 	.word	0x200000da

080018a4 <__sinit>:
 80018a4:	b510      	push	{r4, lr}
 80018a6:	4604      	mov	r4, r0
 80018a8:	f7ff fff0 	bl	800188c <__sinit_lock_acquire>
 80018ac:	69a3      	ldr	r3, [r4, #24]
 80018ae:	b11b      	cbz	r3, 80018b8 <__sinit+0x14>
 80018b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b4:	f7ff bff0 	b.w	8001898 <__sinit_lock_release>
 80018b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80018bc:	6523      	str	r3, [r4, #80]	; 0x50
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <__sinit+0x68>)
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <__sinit+0x6c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80018c6:	42a3      	cmp	r3, r4
 80018c8:	bf04      	itt	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	61a3      	streq	r3, [r4, #24]
 80018ce:	4620      	mov	r0, r4
 80018d0:	f000 f820 	bl	8001914 <__sfp>
 80018d4:	6060      	str	r0, [r4, #4]
 80018d6:	4620      	mov	r0, r4
 80018d8:	f000 f81c 	bl	8001914 <__sfp>
 80018dc:	60a0      	str	r0, [r4, #8]
 80018de:	4620      	mov	r0, r4
 80018e0:	f000 f818 	bl	8001914 <__sfp>
 80018e4:	2200      	movs	r2, #0
 80018e6:	60e0      	str	r0, [r4, #12]
 80018e8:	2104      	movs	r1, #4
 80018ea:	6860      	ldr	r0, [r4, #4]
 80018ec:	f7ff ff82 	bl	80017f4 <std>
 80018f0:	68a0      	ldr	r0, [r4, #8]
 80018f2:	2201      	movs	r2, #1
 80018f4:	2109      	movs	r1, #9
 80018f6:	f7ff ff7d 	bl	80017f4 <std>
 80018fa:	68e0      	ldr	r0, [r4, #12]
 80018fc:	2202      	movs	r2, #2
 80018fe:	2112      	movs	r1, #18
 8001900:	f7ff ff78 	bl	80017f4 <std>
 8001904:	2301      	movs	r3, #1
 8001906:	61a3      	str	r3, [r4, #24]
 8001908:	e7d2      	b.n	80018b0 <__sinit+0xc>
 800190a:	bf00      	nop
 800190c:	08002220 	.word	0x08002220
 8001910:	0800183d 	.word	0x0800183d

08001914 <__sfp>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	4607      	mov	r7, r0
 8001918:	f7ff ffac 	bl	8001874 <__sfp_lock_acquire>
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <__sfp+0x84>)
 800191e:	681e      	ldr	r6, [r3, #0]
 8001920:	69b3      	ldr	r3, [r6, #24]
 8001922:	b913      	cbnz	r3, 800192a <__sfp+0x16>
 8001924:	4630      	mov	r0, r6
 8001926:	f7ff ffbd 	bl	80018a4 <__sinit>
 800192a:	3648      	adds	r6, #72	; 0x48
 800192c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001930:	3b01      	subs	r3, #1
 8001932:	d503      	bpl.n	800193c <__sfp+0x28>
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	b30b      	cbz	r3, 800197c <__sfp+0x68>
 8001938:	6836      	ldr	r6, [r6, #0]
 800193a:	e7f7      	b.n	800192c <__sfp+0x18>
 800193c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001940:	b9d5      	cbnz	r5, 8001978 <__sfp+0x64>
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <__sfp+0x88>)
 8001944:	60e3      	str	r3, [r4, #12]
 8001946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800194a:	6665      	str	r5, [r4, #100]	; 0x64
 800194c:	f000 f847 	bl	80019de <__retarget_lock_init_recursive>
 8001950:	f7ff ff96 	bl	8001880 <__sfp_lock_release>
 8001954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800195c:	6025      	str	r5, [r4, #0]
 800195e:	61a5      	str	r5, [r4, #24]
 8001960:	2208      	movs	r2, #8
 8001962:	4629      	mov	r1, r5
 8001964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001968:	f7ff fcb8 	bl	80012dc <memset>
 800196c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001974:	4620      	mov	r0, r4
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001978:	3468      	adds	r4, #104	; 0x68
 800197a:	e7d9      	b.n	8001930 <__sfp+0x1c>
 800197c:	2104      	movs	r1, #4
 800197e:	4638      	mov	r0, r7
 8001980:	f7ff ff62 	bl	8001848 <__sfmoreglue>
 8001984:	4604      	mov	r4, r0
 8001986:	6030      	str	r0, [r6, #0]
 8001988:	2800      	cmp	r0, #0
 800198a:	d1d5      	bne.n	8001938 <__sfp+0x24>
 800198c:	f7ff ff78 	bl	8001880 <__sfp_lock_release>
 8001990:	230c      	movs	r3, #12
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	e7ee      	b.n	8001974 <__sfp+0x60>
 8001996:	bf00      	nop
 8001998:	08002220 	.word	0x08002220
 800199c:	ffff0001 	.word	0xffff0001

080019a0 <_fwalk_reent>:
 80019a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a4:	4606      	mov	r6, r0
 80019a6:	4688      	mov	r8, r1
 80019a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019ac:	2700      	movs	r7, #0
 80019ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019b2:	f1b9 0901 	subs.w	r9, r9, #1
 80019b6:	d505      	bpl.n	80019c4 <_fwalk_reent+0x24>
 80019b8:	6824      	ldr	r4, [r4, #0]
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d1f7      	bne.n	80019ae <_fwalk_reent+0xe>
 80019be:	4638      	mov	r0, r7
 80019c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019c4:	89ab      	ldrh	r3, [r5, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d907      	bls.n	80019da <_fwalk_reent+0x3a>
 80019ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019ce:	3301      	adds	r3, #1
 80019d0:	d003      	beq.n	80019da <_fwalk_reent+0x3a>
 80019d2:	4629      	mov	r1, r5
 80019d4:	4630      	mov	r0, r6
 80019d6:	47c0      	blx	r8
 80019d8:	4307      	orrs	r7, r0
 80019da:	3568      	adds	r5, #104	; 0x68
 80019dc:	e7e9      	b.n	80019b2 <_fwalk_reent+0x12>

080019de <__retarget_lock_init_recursive>:
 80019de:	4770      	bx	lr

080019e0 <__retarget_lock_acquire_recursive>:
 80019e0:	4770      	bx	lr

080019e2 <__retarget_lock_release_recursive>:
 80019e2:	4770      	bx	lr

080019e4 <__swhatbuf_r>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	460e      	mov	r6, r1
 80019e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ec:	2900      	cmp	r1, #0
 80019ee:	b096      	sub	sp, #88	; 0x58
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	da08      	bge.n	8001a08 <__swhatbuf_r+0x24>
 80019f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	602a      	str	r2, [r5, #0]
 80019fe:	061a      	lsls	r2, r3, #24
 8001a00:	d410      	bmi.n	8001a24 <__swhatbuf_r+0x40>
 8001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a06:	e00e      	b.n	8001a26 <__swhatbuf_r+0x42>
 8001a08:	466a      	mov	r2, sp
 8001a0a:	f000 fbaf 	bl	800216c <_fstat_r>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	dbf1      	blt.n	80019f6 <__swhatbuf_r+0x12>
 8001a12:	9a01      	ldr	r2, [sp, #4]
 8001a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	415a      	adcs	r2, r3
 8001a20:	602a      	str	r2, [r5, #0]
 8001a22:	e7ee      	b.n	8001a02 <__swhatbuf_r+0x1e>
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	2000      	movs	r0, #0
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	b016      	add	sp, #88	; 0x58
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a30 <__smakebuf_r>:
 8001a30:	898b      	ldrh	r3, [r1, #12]
 8001a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a34:	079d      	lsls	r5, r3, #30
 8001a36:	4606      	mov	r6, r0
 8001a38:	460c      	mov	r4, r1
 8001a3a:	d507      	bpl.n	8001a4c <__smakebuf_r+0x1c>
 8001a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	6123      	str	r3, [r4, #16]
 8001a44:	2301      	movs	r3, #1
 8001a46:	6163      	str	r3, [r4, #20]
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
 8001a4c:	ab01      	add	r3, sp, #4
 8001a4e:	466a      	mov	r2, sp
 8001a50:	f7ff ffc8 	bl	80019e4 <__swhatbuf_r>
 8001a54:	9900      	ldr	r1, [sp, #0]
 8001a56:	4605      	mov	r5, r0
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f7ff fcb1 	bl	80013c0 <_malloc_r>
 8001a5e:	b948      	cbnz	r0, 8001a74 <__smakebuf_r+0x44>
 8001a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a64:	059a      	lsls	r2, r3, #22
 8001a66:	d4ef      	bmi.n	8001a48 <__smakebuf_r+0x18>
 8001a68:	f023 0303 	bic.w	r3, r3, #3
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	e7e3      	b.n	8001a3c <__smakebuf_r+0xc>
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <__smakebuf_r+0x7c>)
 8001a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	6020      	str	r0, [r4, #0]
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	6163      	str	r3, [r4, #20]
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	6120      	str	r0, [r4, #16]
 8001a8a:	b15b      	cbz	r3, 8001aa4 <__smakebuf_r+0x74>
 8001a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a90:	4630      	mov	r0, r6
 8001a92:	f000 fb7d 	bl	8002190 <_isatty_r>
 8001a96:	b128      	cbz	r0, 8001aa4 <__smakebuf_r+0x74>
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	89a0      	ldrh	r0, [r4, #12]
 8001aa6:	4305      	orrs	r5, r0
 8001aa8:	81a5      	strh	r5, [r4, #12]
 8001aaa:	e7cd      	b.n	8001a48 <__smakebuf_r+0x18>
 8001aac:	0800183d 	.word	0x0800183d

08001ab0 <__malloc_lock>:
 8001ab0:	4801      	ldr	r0, [pc, #4]	; (8001ab8 <__malloc_lock+0x8>)
 8001ab2:	f7ff bf95 	b.w	80019e0 <__retarget_lock_acquire_recursive>
 8001ab6:	bf00      	nop
 8001ab8:	200000d8 	.word	0x200000d8

08001abc <__malloc_unlock>:
 8001abc:	4801      	ldr	r0, [pc, #4]	; (8001ac4 <__malloc_unlock+0x8>)
 8001abe:	f7ff bf90 	b.w	80019e2 <__retarget_lock_release_recursive>
 8001ac2:	bf00      	nop
 8001ac4:	200000d8 	.word	0x200000d8

08001ac8 <__sfputc_r>:
 8001ac8:	6893      	ldr	r3, [r2, #8]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	b410      	push	{r4}
 8001ad0:	6093      	str	r3, [r2, #8]
 8001ad2:	da07      	bge.n	8001ae4 <__sfputc_r+0x1c>
 8001ad4:	6994      	ldr	r4, [r2, #24]
 8001ad6:	42a3      	cmp	r3, r4
 8001ad8:	db01      	blt.n	8001ade <__sfputc_r+0x16>
 8001ada:	290a      	cmp	r1, #10
 8001adc:	d102      	bne.n	8001ae4 <__sfputc_r+0x1c>
 8001ade:	bc10      	pop	{r4}
 8001ae0:	f7ff bd0a 	b.w	80014f8 <__swbuf_r>
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	1c58      	adds	r0, r3, #1
 8001ae8:	6010      	str	r0, [r2, #0]
 8001aea:	7019      	strb	r1, [r3, #0]
 8001aec:	4608      	mov	r0, r1
 8001aee:	bc10      	pop	{r4}
 8001af0:	4770      	bx	lr

08001af2 <__sfputs_r>:
 8001af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af4:	4606      	mov	r6, r0
 8001af6:	460f      	mov	r7, r1
 8001af8:	4614      	mov	r4, r2
 8001afa:	18d5      	adds	r5, r2, r3
 8001afc:	42ac      	cmp	r4, r5
 8001afe:	d101      	bne.n	8001b04 <__sfputs_r+0x12>
 8001b00:	2000      	movs	r0, #0
 8001b02:	e007      	b.n	8001b14 <__sfputs_r+0x22>
 8001b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b08:	463a      	mov	r2, r7
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff ffdc 	bl	8001ac8 <__sfputc_r>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d1f3      	bne.n	8001afc <__sfputs_r+0xa>
 8001b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b18 <_vfiprintf_r>:
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	b09d      	sub	sp, #116	; 0x74
 8001b20:	4614      	mov	r4, r2
 8001b22:	4698      	mov	r8, r3
 8001b24:	4606      	mov	r6, r0
 8001b26:	b118      	cbz	r0, 8001b30 <_vfiprintf_r+0x18>
 8001b28:	6983      	ldr	r3, [r0, #24]
 8001b2a:	b90b      	cbnz	r3, 8001b30 <_vfiprintf_r+0x18>
 8001b2c:	f7ff feba 	bl	80018a4 <__sinit>
 8001b30:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <_vfiprintf_r+0x240>)
 8001b32:	429d      	cmp	r5, r3
 8001b34:	d11b      	bne.n	8001b6e <_vfiprintf_r+0x56>
 8001b36:	6875      	ldr	r5, [r6, #4]
 8001b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b3a:	07d9      	lsls	r1, r3, #31
 8001b3c:	d405      	bmi.n	8001b4a <_vfiprintf_r+0x32>
 8001b3e:	89ab      	ldrh	r3, [r5, #12]
 8001b40:	059a      	lsls	r2, r3, #22
 8001b42:	d402      	bmi.n	8001b4a <_vfiprintf_r+0x32>
 8001b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b46:	f7ff ff4b 	bl	80019e0 <__retarget_lock_acquire_recursive>
 8001b4a:	89ab      	ldrh	r3, [r5, #12]
 8001b4c:	071b      	lsls	r3, r3, #28
 8001b4e:	d501      	bpl.n	8001b54 <_vfiprintf_r+0x3c>
 8001b50:	692b      	ldr	r3, [r5, #16]
 8001b52:	b9eb      	cbnz	r3, 8001b90 <_vfiprintf_r+0x78>
 8001b54:	4629      	mov	r1, r5
 8001b56:	4630      	mov	r0, r6
 8001b58:	f7ff fd20 	bl	800159c <__swsetup_r>
 8001b5c:	b1c0      	cbz	r0, 8001b90 <_vfiprintf_r+0x78>
 8001b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b60:	07dc      	lsls	r4, r3, #31
 8001b62:	d50e      	bpl.n	8001b82 <_vfiprintf_r+0x6a>
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b68:	b01d      	add	sp, #116	; 0x74
 8001b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <_vfiprintf_r+0x244>)
 8001b70:	429d      	cmp	r5, r3
 8001b72:	d101      	bne.n	8001b78 <_vfiprintf_r+0x60>
 8001b74:	68b5      	ldr	r5, [r6, #8]
 8001b76:	e7df      	b.n	8001b38 <_vfiprintf_r+0x20>
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <_vfiprintf_r+0x248>)
 8001b7a:	429d      	cmp	r5, r3
 8001b7c:	bf08      	it	eq
 8001b7e:	68f5      	ldreq	r5, [r6, #12]
 8001b80:	e7da      	b.n	8001b38 <_vfiprintf_r+0x20>
 8001b82:	89ab      	ldrh	r3, [r5, #12]
 8001b84:	0598      	lsls	r0, r3, #22
 8001b86:	d4ed      	bmi.n	8001b64 <_vfiprintf_r+0x4c>
 8001b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b8a:	f7ff ff2a 	bl	80019e2 <__retarget_lock_release_recursive>
 8001b8e:	e7e9      	b.n	8001b64 <_vfiprintf_r+0x4c>
 8001b90:	2300      	movs	r3, #0
 8001b92:	9309      	str	r3, [sp, #36]	; 0x24
 8001b94:	2320      	movs	r3, #32
 8001b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b9e:	2330      	movs	r3, #48	; 0x30
 8001ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d64 <_vfiprintf_r+0x24c>
 8001ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ba8:	f04f 0901 	mov.w	r9, #1
 8001bac:	4623      	mov	r3, r4
 8001bae:	469a      	mov	sl, r3
 8001bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bb4:	b10a      	cbz	r2, 8001bba <_vfiprintf_r+0xa2>
 8001bb6:	2a25      	cmp	r2, #37	; 0x25
 8001bb8:	d1f9      	bne.n	8001bae <_vfiprintf_r+0x96>
 8001bba:	ebba 0b04 	subs.w	fp, sl, r4
 8001bbe:	d00b      	beq.n	8001bd8 <_vfiprintf_r+0xc0>
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff ff93 	bl	8001af2 <__sfputs_r>
 8001bcc:	3001      	adds	r0, #1
 8001bce:	f000 80aa 	beq.w	8001d26 <_vfiprintf_r+0x20e>
 8001bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bd4:	445a      	add	r2, fp
 8001bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8001bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a2 	beq.w	8001d26 <_vfiprintf_r+0x20e>
 8001be2:	2300      	movs	r3, #0
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bec:	f10a 0a01 	add.w	sl, sl, #1
 8001bf0:	9304      	str	r3, [sp, #16]
 8001bf2:	9307      	str	r3, [sp, #28]
 8001bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8001bfa:	4654      	mov	r4, sl
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c02:	4858      	ldr	r0, [pc, #352]	; (8001d64 <_vfiprintf_r+0x24c>)
 8001c04:	f7fe faf4 	bl	80001f0 <memchr>
 8001c08:	9a04      	ldr	r2, [sp, #16]
 8001c0a:	b9d8      	cbnz	r0, 8001c44 <_vfiprintf_r+0x12c>
 8001c0c:	06d1      	lsls	r1, r2, #27
 8001c0e:	bf44      	itt	mi
 8001c10:	2320      	movmi	r3, #32
 8001c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c16:	0713      	lsls	r3, r2, #28
 8001c18:	bf44      	itt	mi
 8001c1a:	232b      	movmi	r3, #43	; 0x2b
 8001c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c20:	f89a 3000 	ldrb.w	r3, [sl]
 8001c24:	2b2a      	cmp	r3, #42	; 0x2a
 8001c26:	d015      	beq.n	8001c54 <_vfiprintf_r+0x13c>
 8001c28:	9a07      	ldr	r2, [sp, #28]
 8001c2a:	4654      	mov	r4, sl
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f04f 0c0a 	mov.w	ip, #10
 8001c32:	4621      	mov	r1, r4
 8001c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c38:	3b30      	subs	r3, #48	; 0x30
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d94e      	bls.n	8001cdc <_vfiprintf_r+0x1c4>
 8001c3e:	b1b0      	cbz	r0, 8001c6e <_vfiprintf_r+0x156>
 8001c40:	9207      	str	r2, [sp, #28]
 8001c42:	e014      	b.n	8001c6e <_vfiprintf_r+0x156>
 8001c44:	eba0 0308 	sub.w	r3, r0, r8
 8001c48:	fa09 f303 	lsl.w	r3, r9, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	9304      	str	r3, [sp, #16]
 8001c50:	46a2      	mov	sl, r4
 8001c52:	e7d2      	b.n	8001bfa <_vfiprintf_r+0xe2>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	1d19      	adds	r1, r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	9103      	str	r1, [sp, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bfbb      	ittet	lt
 8001c60:	425b      	neglt	r3, r3
 8001c62:	f042 0202 	orrlt.w	r2, r2, #2
 8001c66:	9307      	strge	r3, [sp, #28]
 8001c68:	9307      	strlt	r3, [sp, #28]
 8001c6a:	bfb8      	it	lt
 8001c6c:	9204      	strlt	r2, [sp, #16]
 8001c6e:	7823      	ldrb	r3, [r4, #0]
 8001c70:	2b2e      	cmp	r3, #46	; 0x2e
 8001c72:	d10c      	bne.n	8001c8e <_vfiprintf_r+0x176>
 8001c74:	7863      	ldrb	r3, [r4, #1]
 8001c76:	2b2a      	cmp	r3, #42	; 0x2a
 8001c78:	d135      	bne.n	8001ce6 <_vfiprintf_r+0x1ce>
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	9203      	str	r2, [sp, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bfb8      	it	lt
 8001c86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001c8a:	3402      	adds	r4, #2
 8001c8c:	9305      	str	r3, [sp, #20]
 8001c8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001d68 <_vfiprintf_r+0x250>
 8001c92:	7821      	ldrb	r1, [r4, #0]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4650      	mov	r0, sl
 8001c98:	f7fe faaa 	bl	80001f0 <memchr>
 8001c9c:	b140      	cbz	r0, 8001cb0 <_vfiprintf_r+0x198>
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	eba0 000a 	sub.w	r0, r0, sl
 8001ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ca8:	9b04      	ldr	r3, [sp, #16]
 8001caa:	4303      	orrs	r3, r0
 8001cac:	3401      	adds	r4, #1
 8001cae:	9304      	str	r3, [sp, #16]
 8001cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb4:	482d      	ldr	r0, [pc, #180]	; (8001d6c <_vfiprintf_r+0x254>)
 8001cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cba:	2206      	movs	r2, #6
 8001cbc:	f7fe fa98 	bl	80001f0 <memchr>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d03f      	beq.n	8001d44 <_vfiprintf_r+0x22c>
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <_vfiprintf_r+0x258>)
 8001cc6:	bb1b      	cbnz	r3, 8001d10 <_vfiprintf_r+0x1f8>
 8001cc8:	9b03      	ldr	r3, [sp, #12]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	f023 0307 	bic.w	r3, r3, #7
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	9303      	str	r3, [sp, #12]
 8001cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cd6:	443b      	add	r3, r7
 8001cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cda:	e767      	b.n	8001bac <_vfiprintf_r+0x94>
 8001cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ce0:	460c      	mov	r4, r1
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	e7a5      	b.n	8001c32 <_vfiprintf_r+0x11a>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	3401      	adds	r4, #1
 8001cea:	9305      	str	r3, [sp, #20]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 0c0a 	mov.w	ip, #10
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cf8:	3a30      	subs	r2, #48	; 0x30
 8001cfa:	2a09      	cmp	r2, #9
 8001cfc:	d903      	bls.n	8001d06 <_vfiprintf_r+0x1ee>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0c5      	beq.n	8001c8e <_vfiprintf_r+0x176>
 8001d02:	9105      	str	r1, [sp, #20]
 8001d04:	e7c3      	b.n	8001c8e <_vfiprintf_r+0x176>
 8001d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e7f0      	b.n	8001cf2 <_vfiprintf_r+0x1da>
 8001d10:	ab03      	add	r3, sp, #12
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	462a      	mov	r2, r5
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <_vfiprintf_r+0x25c>)
 8001d18:	a904      	add	r1, sp, #16
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f3af 8000 	nop.w
 8001d20:	4607      	mov	r7, r0
 8001d22:	1c78      	adds	r0, r7, #1
 8001d24:	d1d6      	bne.n	8001cd4 <_vfiprintf_r+0x1bc>
 8001d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d28:	07d9      	lsls	r1, r3, #31
 8001d2a:	d405      	bmi.n	8001d38 <_vfiprintf_r+0x220>
 8001d2c:	89ab      	ldrh	r3, [r5, #12]
 8001d2e:	059a      	lsls	r2, r3, #22
 8001d30:	d402      	bmi.n	8001d38 <_vfiprintf_r+0x220>
 8001d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d34:	f7ff fe55 	bl	80019e2 <__retarget_lock_release_recursive>
 8001d38:	89ab      	ldrh	r3, [r5, #12]
 8001d3a:	065b      	lsls	r3, r3, #25
 8001d3c:	f53f af12 	bmi.w	8001b64 <_vfiprintf_r+0x4c>
 8001d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d42:	e711      	b.n	8001b68 <_vfiprintf_r+0x50>
 8001d44:	ab03      	add	r3, sp, #12
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <_vfiprintf_r+0x25c>)
 8001d4c:	a904      	add	r1, sp, #16
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f000 f880 	bl	8001e54 <_printf_i>
 8001d54:	e7e4      	b.n	8001d20 <_vfiprintf_r+0x208>
 8001d56:	bf00      	nop
 8001d58:	08002244 	.word	0x08002244
 8001d5c:	08002264 	.word	0x08002264
 8001d60:	08002224 	.word	0x08002224
 8001d64:	08002284 	.word	0x08002284
 8001d68:	0800228a 	.word	0x0800228a
 8001d6c:	0800228e 	.word	0x0800228e
 8001d70:	00000000 	.word	0x00000000
 8001d74:	08001af3 	.word	0x08001af3

08001d78 <_printf_common>:
 8001d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d7c:	4616      	mov	r6, r2
 8001d7e:	4699      	mov	r9, r3
 8001d80:	688a      	ldr	r2, [r1, #8]
 8001d82:	690b      	ldr	r3, [r1, #16]
 8001d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bfb8      	it	lt
 8001d8c:	4613      	movlt	r3, r2
 8001d8e:	6033      	str	r3, [r6, #0]
 8001d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d94:	4607      	mov	r7, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	b10a      	cbz	r2, 8001d9e <_printf_common+0x26>
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	6033      	str	r3, [r6, #0]
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	0699      	lsls	r1, r3, #26
 8001da2:	bf42      	ittt	mi
 8001da4:	6833      	ldrmi	r3, [r6, #0]
 8001da6:	3302      	addmi	r3, #2
 8001da8:	6033      	strmi	r3, [r6, #0]
 8001daa:	6825      	ldr	r5, [r4, #0]
 8001dac:	f015 0506 	ands.w	r5, r5, #6
 8001db0:	d106      	bne.n	8001dc0 <_printf_common+0x48>
 8001db2:	f104 0a19 	add.w	sl, r4, #25
 8001db6:	68e3      	ldr	r3, [r4, #12]
 8001db8:	6832      	ldr	r2, [r6, #0]
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	42ab      	cmp	r3, r5
 8001dbe:	dc26      	bgt.n	8001e0e <_printf_common+0x96>
 8001dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001dc4:	1e13      	subs	r3, r2, #0
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	bf18      	it	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	0692      	lsls	r2, r2, #26
 8001dce:	d42b      	bmi.n	8001e28 <_printf_common+0xb0>
 8001dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	47c0      	blx	r8
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d01e      	beq.n	8001e1c <_printf_common+0xa4>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	68e5      	ldr	r5, [r4, #12]
 8001de2:	6832      	ldr	r2, [r6, #0]
 8001de4:	f003 0306 	and.w	r3, r3, #6
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	bf08      	it	eq
 8001dec:	1aad      	subeq	r5, r5, r2
 8001dee:	68a3      	ldr	r3, [r4, #8]
 8001df0:	6922      	ldr	r2, [r4, #16]
 8001df2:	bf0c      	ite	eq
 8001df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001df8:	2500      	movne	r5, #0
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	bfc4      	itt	gt
 8001dfe:	1a9b      	subgt	r3, r3, r2
 8001e00:	18ed      	addgt	r5, r5, r3
 8001e02:	2600      	movs	r6, #0
 8001e04:	341a      	adds	r4, #26
 8001e06:	42b5      	cmp	r5, r6
 8001e08:	d11a      	bne.n	8001e40 <_printf_common+0xc8>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e008      	b.n	8001e20 <_printf_common+0xa8>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4652      	mov	r2, sl
 8001e12:	4649      	mov	r1, r9
 8001e14:	4638      	mov	r0, r7
 8001e16:	47c0      	blx	r8
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d103      	bne.n	8001e24 <_printf_common+0xac>
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e24:	3501      	adds	r5, #1
 8001e26:	e7c6      	b.n	8001db6 <_printf_common+0x3e>
 8001e28:	18e1      	adds	r1, r4, r3
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	2030      	movs	r0, #48	; 0x30
 8001e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e32:	4422      	add	r2, r4
 8001e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	e7c7      	b.n	8001dd0 <_printf_common+0x58>
 8001e40:	2301      	movs	r3, #1
 8001e42:	4622      	mov	r2, r4
 8001e44:	4649      	mov	r1, r9
 8001e46:	4638      	mov	r0, r7
 8001e48:	47c0      	blx	r8
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	d0e6      	beq.n	8001e1c <_printf_common+0xa4>
 8001e4e:	3601      	adds	r6, #1
 8001e50:	e7d9      	b.n	8001e06 <_printf_common+0x8e>
	...

08001e54 <_printf_i>:
 8001e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e58:	7e0f      	ldrb	r7, [r1, #24]
 8001e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e5c:	2f78      	cmp	r7, #120	; 0x78
 8001e5e:	4691      	mov	r9, r2
 8001e60:	4680      	mov	r8, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	469a      	mov	sl, r3
 8001e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e6a:	d807      	bhi.n	8001e7c <_printf_i+0x28>
 8001e6c:	2f62      	cmp	r7, #98	; 0x62
 8001e6e:	d80a      	bhi.n	8001e86 <_printf_i+0x32>
 8001e70:	2f00      	cmp	r7, #0
 8001e72:	f000 80d8 	beq.w	8002026 <_printf_i+0x1d2>
 8001e76:	2f58      	cmp	r7, #88	; 0x58
 8001e78:	f000 80a3 	beq.w	8001fc2 <_printf_i+0x16e>
 8001e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e84:	e03a      	b.n	8001efc <_printf_i+0xa8>
 8001e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e8a:	2b15      	cmp	r3, #21
 8001e8c:	d8f6      	bhi.n	8001e7c <_printf_i+0x28>
 8001e8e:	a101      	add	r1, pc, #4	; (adr r1, 8001e94 <_printf_i+0x40>)
 8001e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e94:	08001eed 	.word	0x08001eed
 8001e98:	08001f01 	.word	0x08001f01
 8001e9c:	08001e7d 	.word	0x08001e7d
 8001ea0:	08001e7d 	.word	0x08001e7d
 8001ea4:	08001e7d 	.word	0x08001e7d
 8001ea8:	08001e7d 	.word	0x08001e7d
 8001eac:	08001f01 	.word	0x08001f01
 8001eb0:	08001e7d 	.word	0x08001e7d
 8001eb4:	08001e7d 	.word	0x08001e7d
 8001eb8:	08001e7d 	.word	0x08001e7d
 8001ebc:	08001e7d 	.word	0x08001e7d
 8001ec0:	0800200d 	.word	0x0800200d
 8001ec4:	08001f31 	.word	0x08001f31
 8001ec8:	08001fef 	.word	0x08001fef
 8001ecc:	08001e7d 	.word	0x08001e7d
 8001ed0:	08001e7d 	.word	0x08001e7d
 8001ed4:	0800202f 	.word	0x0800202f
 8001ed8:	08001e7d 	.word	0x08001e7d
 8001edc:	08001f31 	.word	0x08001f31
 8001ee0:	08001e7d 	.word	0x08001e7d
 8001ee4:	08001e7d 	.word	0x08001e7d
 8001ee8:	08001ff7 	.word	0x08001ff7
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	1d1a      	adds	r2, r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	602a      	str	r2, [r5, #0]
 8001ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0a3      	b.n	8002048 <_printf_i+0x1f4>
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	6829      	ldr	r1, [r5, #0]
 8001f04:	0606      	lsls	r6, r0, #24
 8001f06:	f101 0304 	add.w	r3, r1, #4
 8001f0a:	d50a      	bpl.n	8001f22 <_printf_i+0xce>
 8001f0c:	680e      	ldr	r6, [r1, #0]
 8001f0e:	602b      	str	r3, [r5, #0]
 8001f10:	2e00      	cmp	r6, #0
 8001f12:	da03      	bge.n	8001f1c <_printf_i+0xc8>
 8001f14:	232d      	movs	r3, #45	; 0x2d
 8001f16:	4276      	negs	r6, r6
 8001f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f1c:	485e      	ldr	r0, [pc, #376]	; (8002098 <_printf_i+0x244>)
 8001f1e:	230a      	movs	r3, #10
 8001f20:	e019      	b.n	8001f56 <_printf_i+0x102>
 8001f22:	680e      	ldr	r6, [r1, #0]
 8001f24:	602b      	str	r3, [r5, #0]
 8001f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f2a:	bf18      	it	ne
 8001f2c:	b236      	sxthne	r6, r6
 8001f2e:	e7ef      	b.n	8001f10 <_printf_i+0xbc>
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	1d19      	adds	r1, r3, #4
 8001f36:	6029      	str	r1, [r5, #0]
 8001f38:	0601      	lsls	r1, r0, #24
 8001f3a:	d501      	bpl.n	8001f40 <_printf_i+0xec>
 8001f3c:	681e      	ldr	r6, [r3, #0]
 8001f3e:	e002      	b.n	8001f46 <_printf_i+0xf2>
 8001f40:	0646      	lsls	r6, r0, #25
 8001f42:	d5fb      	bpl.n	8001f3c <_printf_i+0xe8>
 8001f44:	881e      	ldrh	r6, [r3, #0]
 8001f46:	4854      	ldr	r0, [pc, #336]	; (8002098 <_printf_i+0x244>)
 8001f48:	2f6f      	cmp	r7, #111	; 0x6f
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2308      	moveq	r3, #8
 8001f4e:	230a      	movne	r3, #10
 8001f50:	2100      	movs	r1, #0
 8001f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f56:	6865      	ldr	r5, [r4, #4]
 8001f58:	60a5      	str	r5, [r4, #8]
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	bfa2      	ittt	ge
 8001f5e:	6821      	ldrge	r1, [r4, #0]
 8001f60:	f021 0104 	bicge.w	r1, r1, #4
 8001f64:	6021      	strge	r1, [r4, #0]
 8001f66:	b90e      	cbnz	r6, 8001f6c <_printf_i+0x118>
 8001f68:	2d00      	cmp	r5, #0
 8001f6a:	d04d      	beq.n	8002008 <_printf_i+0x1b4>
 8001f6c:	4615      	mov	r5, r2
 8001f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f72:	fb03 6711 	mls	r7, r3, r1, r6
 8001f76:	5dc7      	ldrb	r7, [r0, r7]
 8001f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f7c:	4637      	mov	r7, r6
 8001f7e:	42bb      	cmp	r3, r7
 8001f80:	460e      	mov	r6, r1
 8001f82:	d9f4      	bls.n	8001f6e <_printf_i+0x11a>
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d10b      	bne.n	8001fa0 <_printf_i+0x14c>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	07de      	lsls	r6, r3, #31
 8001f8c:	d508      	bpl.n	8001fa0 <_printf_i+0x14c>
 8001f8e:	6923      	ldr	r3, [r4, #16]
 8001f90:	6861      	ldr	r1, [r4, #4]
 8001f92:	4299      	cmp	r1, r3
 8001f94:	bfde      	ittt	le
 8001f96:	2330      	movle	r3, #48	; 0x30
 8001f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001fa0:	1b52      	subs	r2, r2, r5
 8001fa2:	6122      	str	r2, [r4, #16]
 8001fa4:	f8cd a000 	str.w	sl, [sp]
 8001fa8:	464b      	mov	r3, r9
 8001faa:	aa03      	add	r2, sp, #12
 8001fac:	4621      	mov	r1, r4
 8001fae:	4640      	mov	r0, r8
 8001fb0:	f7ff fee2 	bl	8001d78 <_printf_common>
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d14c      	bne.n	8002052 <_printf_i+0x1fe>
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fbc:	b004      	add	sp, #16
 8001fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc2:	4835      	ldr	r0, [pc, #212]	; (8002098 <_printf_i+0x244>)
 8001fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001fc8:	6829      	ldr	r1, [r5, #0]
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fd0:	6029      	str	r1, [r5, #0]
 8001fd2:	061d      	lsls	r5, r3, #24
 8001fd4:	d514      	bpl.n	8002000 <_printf_i+0x1ac>
 8001fd6:	07df      	lsls	r7, r3, #31
 8001fd8:	bf44      	itt	mi
 8001fda:	f043 0320 	orrmi.w	r3, r3, #32
 8001fde:	6023      	strmi	r3, [r4, #0]
 8001fe0:	b91e      	cbnz	r6, 8001fea <_printf_i+0x196>
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f023 0320 	bic.w	r3, r3, #32
 8001fe8:	6023      	str	r3, [r4, #0]
 8001fea:	2310      	movs	r3, #16
 8001fec:	e7b0      	b.n	8001f50 <_printf_i+0xfc>
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	6023      	str	r3, [r4, #0]
 8001ff6:	2378      	movs	r3, #120	; 0x78
 8001ff8:	4828      	ldr	r0, [pc, #160]	; (800209c <_printf_i+0x248>)
 8001ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ffe:	e7e3      	b.n	8001fc8 <_printf_i+0x174>
 8002000:	0659      	lsls	r1, r3, #25
 8002002:	bf48      	it	mi
 8002004:	b2b6      	uxthmi	r6, r6
 8002006:	e7e6      	b.n	8001fd6 <_printf_i+0x182>
 8002008:	4615      	mov	r5, r2
 800200a:	e7bb      	b.n	8001f84 <_printf_i+0x130>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	6826      	ldr	r6, [r4, #0]
 8002010:	6961      	ldr	r1, [r4, #20]
 8002012:	1d18      	adds	r0, r3, #4
 8002014:	6028      	str	r0, [r5, #0]
 8002016:	0635      	lsls	r5, r6, #24
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	d501      	bpl.n	8002020 <_printf_i+0x1cc>
 800201c:	6019      	str	r1, [r3, #0]
 800201e:	e002      	b.n	8002026 <_printf_i+0x1d2>
 8002020:	0670      	lsls	r0, r6, #25
 8002022:	d5fb      	bpl.n	800201c <_printf_i+0x1c8>
 8002024:	8019      	strh	r1, [r3, #0]
 8002026:	2300      	movs	r3, #0
 8002028:	6123      	str	r3, [r4, #16]
 800202a:	4615      	mov	r5, r2
 800202c:	e7ba      	b.n	8001fa4 <_printf_i+0x150>
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	1d1a      	adds	r2, r3, #4
 8002032:	602a      	str	r2, [r5, #0]
 8002034:	681d      	ldr	r5, [r3, #0]
 8002036:	6862      	ldr	r2, [r4, #4]
 8002038:	2100      	movs	r1, #0
 800203a:	4628      	mov	r0, r5
 800203c:	f7fe f8d8 	bl	80001f0 <memchr>
 8002040:	b108      	cbz	r0, 8002046 <_printf_i+0x1f2>
 8002042:	1b40      	subs	r0, r0, r5
 8002044:	6060      	str	r0, [r4, #4]
 8002046:	6863      	ldr	r3, [r4, #4]
 8002048:	6123      	str	r3, [r4, #16]
 800204a:	2300      	movs	r3, #0
 800204c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002050:	e7a8      	b.n	8001fa4 <_printf_i+0x150>
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	462a      	mov	r2, r5
 8002056:	4649      	mov	r1, r9
 8002058:	4640      	mov	r0, r8
 800205a:	47d0      	blx	sl
 800205c:	3001      	adds	r0, #1
 800205e:	d0ab      	beq.n	8001fb8 <_printf_i+0x164>
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	079b      	lsls	r3, r3, #30
 8002064:	d413      	bmi.n	800208e <_printf_i+0x23a>
 8002066:	68e0      	ldr	r0, [r4, #12]
 8002068:	9b03      	ldr	r3, [sp, #12]
 800206a:	4298      	cmp	r0, r3
 800206c:	bfb8      	it	lt
 800206e:	4618      	movlt	r0, r3
 8002070:	e7a4      	b.n	8001fbc <_printf_i+0x168>
 8002072:	2301      	movs	r3, #1
 8002074:	4632      	mov	r2, r6
 8002076:	4649      	mov	r1, r9
 8002078:	4640      	mov	r0, r8
 800207a:	47d0      	blx	sl
 800207c:	3001      	adds	r0, #1
 800207e:	d09b      	beq.n	8001fb8 <_printf_i+0x164>
 8002080:	3501      	adds	r5, #1
 8002082:	68e3      	ldr	r3, [r4, #12]
 8002084:	9903      	ldr	r1, [sp, #12]
 8002086:	1a5b      	subs	r3, r3, r1
 8002088:	42ab      	cmp	r3, r5
 800208a:	dcf2      	bgt.n	8002072 <_printf_i+0x21e>
 800208c:	e7eb      	b.n	8002066 <_printf_i+0x212>
 800208e:	2500      	movs	r5, #0
 8002090:	f104 0619 	add.w	r6, r4, #25
 8002094:	e7f5      	b.n	8002082 <_printf_i+0x22e>
 8002096:	bf00      	nop
 8002098:	08002295 	.word	0x08002295
 800209c:	080022a6 	.word	0x080022a6

080020a0 <__sread>:
 80020a0:	b510      	push	{r4, lr}
 80020a2:	460c      	mov	r4, r1
 80020a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a8:	f000 f894 	bl	80021d4 <_read_r>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	bfab      	itete	ge
 80020b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020b2:	89a3      	ldrhlt	r3, [r4, #12]
 80020b4:	181b      	addge	r3, r3, r0
 80020b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020ba:	bfac      	ite	ge
 80020bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80020be:	81a3      	strhlt	r3, [r4, #12]
 80020c0:	bd10      	pop	{r4, pc}

080020c2 <__swrite>:
 80020c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c6:	461f      	mov	r7, r3
 80020c8:	898b      	ldrh	r3, [r1, #12]
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	4605      	mov	r5, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4616      	mov	r6, r2
 80020d2:	d505      	bpl.n	80020e0 <__swrite+0x1e>
 80020d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d8:	2302      	movs	r3, #2
 80020da:	2200      	movs	r2, #0
 80020dc:	f000 f868 	bl	80021b0 <_lseek_r>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	4632      	mov	r2, r6
 80020ee:	463b      	mov	r3, r7
 80020f0:	4628      	mov	r0, r5
 80020f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020f6:	f000 b817 	b.w	8002128 <_write_r>

080020fa <__sseek>:
 80020fa:	b510      	push	{r4, lr}
 80020fc:	460c      	mov	r4, r1
 80020fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002102:	f000 f855 	bl	80021b0 <_lseek_r>
 8002106:	1c43      	adds	r3, r0, #1
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	bf15      	itete	ne
 800210c:	6560      	strne	r0, [r4, #84]	; 0x54
 800210e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002116:	81a3      	strheq	r3, [r4, #12]
 8002118:	bf18      	it	ne
 800211a:	81a3      	strhne	r3, [r4, #12]
 800211c:	bd10      	pop	{r4, pc}

0800211e <__sclose>:
 800211e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002122:	f000 b813 	b.w	800214c <_close_r>
	...

08002128 <_write_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4d07      	ldr	r5, [pc, #28]	; (8002148 <_write_r+0x20>)
 800212c:	4604      	mov	r4, r0
 800212e:	4608      	mov	r0, r1
 8002130:	4611      	mov	r1, r2
 8002132:	2200      	movs	r2, #0
 8002134:	602a      	str	r2, [r5, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f7fe ffda 	bl	80010f0 <_write>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	d102      	bne.n	8002146 <_write_r+0x1e>
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	b103      	cbz	r3, 8002146 <_write_r+0x1e>
 8002144:	6023      	str	r3, [r4, #0]
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	200000dc 	.word	0x200000dc

0800214c <_close_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4d06      	ldr	r5, [pc, #24]	; (8002168 <_close_r+0x1c>)
 8002150:	2300      	movs	r3, #0
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	602b      	str	r3, [r5, #0]
 8002158:	f7fe ffe6 	bl	8001128 <_close>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_close_r+0x1a>
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	b103      	cbz	r3, 8002166 <_close_r+0x1a>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	200000dc 	.word	0x200000dc

0800216c <_fstat_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4d07      	ldr	r5, [pc, #28]	; (800218c <_fstat_r+0x20>)
 8002170:	2300      	movs	r3, #0
 8002172:	4604      	mov	r4, r0
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	602b      	str	r3, [r5, #0]
 800217a:	f7fe ffe0 	bl	800113e <_fstat>
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	d102      	bne.n	8002188 <_fstat_r+0x1c>
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	b103      	cbz	r3, 8002188 <_fstat_r+0x1c>
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	200000dc 	.word	0x200000dc

08002190 <_isatty_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4d06      	ldr	r5, [pc, #24]	; (80021ac <_isatty_r+0x1c>)
 8002194:	2300      	movs	r3, #0
 8002196:	4604      	mov	r4, r0
 8002198:	4608      	mov	r0, r1
 800219a:	602b      	str	r3, [r5, #0]
 800219c:	f7fe ffde 	bl	800115c <_isatty>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d102      	bne.n	80021aa <_isatty_r+0x1a>
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	b103      	cbz	r3, 80021aa <_isatty_r+0x1a>
 80021a8:	6023      	str	r3, [r4, #0]
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	200000dc 	.word	0x200000dc

080021b0 <_lseek_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4d07      	ldr	r5, [pc, #28]	; (80021d0 <_lseek_r+0x20>)
 80021b4:	4604      	mov	r4, r0
 80021b6:	4608      	mov	r0, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	602a      	str	r2, [r5, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7fe ffd6 	bl	8001170 <_lseek>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_lseek_r+0x1e>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_lseek_r+0x1e>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	200000dc 	.word	0x200000dc

080021d4 <_read_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4d07      	ldr	r5, [pc, #28]	; (80021f4 <_read_r+0x20>)
 80021d8:	4604      	mov	r4, r0
 80021da:	4608      	mov	r0, r1
 80021dc:	4611      	mov	r1, r2
 80021de:	2200      	movs	r2, #0
 80021e0:	602a      	str	r2, [r5, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7fe ff67 	bl	80010b6 <_read>
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	d102      	bne.n	80021f2 <_read_r+0x1e>
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	b103      	cbz	r3, 80021f2 <_read_r+0x1e>
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	200000dc 	.word	0x200000dc

080021f8 <_init>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr

08002204 <_fini>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr
