
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b68  08003b68  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b68  08003b68  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b68  08003b68  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000000c4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000456b  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001049  00000000  00000000  00024621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00025670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003f8  00000000  00000000  00025b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002df5  00000000  00000000  00025f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006493  00000000  00000000  00028d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000eb79  00000000  00000000  0002f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003dd29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a14  00000000  00000000  0003dd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080039f4 	.word	0x080039f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080039f4 	.word	0x080039f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000a8 	.word	0x200000a8

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f002 fad7 	bl	8002884 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fc56 	bl	8001b98 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 fdfd 	bl	8000eec <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f001 f822 	bl	800133c <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a8 	.word	0x200000a8
 8000300:	200000ac 	.word	0x200000ac

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 fab7 	bl	8002884 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 fc3e 	bl	8001b98 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f001 f81c 	bl	800135e <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f001 f817 	bl	800135e <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f001 f877 	bl	8001428 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f001 f872 	bl	8001428 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f001 f8a6 	bl	800149a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f001 f8a1 	bl	800149a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f001 f8e2 	bl	8001526 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f001 f8dd 	bl	8001526 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f001 f8b4 	bl	80014de <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f001 f8af 	bl	80014de <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fbfd 	bl	8001b98 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f8e1 	bl	800156e <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 f9f2 	bl	800179c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f92c 	bl	800161a <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fa4f 	bl	8002884 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f001 fbd6 	bl	8001b98 <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f000 ffb4 	bl	800135e <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f000 ffaf 	bl	800135e <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f001 f80f 	bl	8001428 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f001 f80a 	bl	8001428 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f001 f83e 	bl	800149a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f001 f839 	bl	800149a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f001 f87a 	bl	8001526 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f001 f875 	bl	8001526 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f001 f84c 	bl	80014de <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f001 f847 	bl	80014de <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fb95 	bl	8001b98 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f879 	bl	800156e <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f98a 	bl	800179c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f8c4 	bl	800161a <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fae1 	bl	8001a78 <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <RTC_DS3231_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2204      	movs	r2, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 f9d7 	bl	8002884 <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
 800052c:	e01a      	b.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d116      	bne.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 8000568:	7b3b      	ldrb	r3, [r7, #12]
 800056a:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	2204      	movs	r2, #4
 8000582:	f001 f85b 	bl	800163c <I2CMasterSendData>
	delay_us(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058a:	f7ff fe81 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2204      	movs	r2, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f974 	bl	8002884 <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b9b      	ldrb	r3, [r3, #14]
 80005a0:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7a9b      	ldrb	r3, [r3, #10]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7adb      	ldrb	r3, [r3, #11]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b1b      	ldrb	r3, [r3, #12]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b5b      	ldrb	r3, [r3, #13]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 80005e4:	2303      	movs	r3, #3
 80005e6:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 80005ec:	7a3b      	ldrb	r3, [r7, #8]
 80005ee:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	2205      	movs	r2, #5
 8000606:	f001 f819 	bl	800163c <I2CMasterSendData>

	return;
 800060a:	bf00      	nop
}
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008
 8000618:	2000000c 	.word	0x2000000c

0800061c <RTC_DS3231_Read_Calendar>:

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,RxBuf,7,0, SlaveAddressRTC);
 8000626:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <RTC_DS3231_Read_Calendar+0x198>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <RTC_DS3231_Read_Calendar+0x19c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2207      	movs	r2, #7
 8000638:	f001 f8e2 	bl	8001800 <I2CMaster_DS3231_RTC_Read>

	time->seconds = ((RxBuf[0] >> DS3231_RTC_TR_ST) & 0x7)*10 + ((RxBuf[0] >> DS3231_RTC_TR_SU) & 0xF);
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	701a      	strb	r2, [r3, #0]
	time->minutes = ((RxBuf[1] >> DS3231_RTC_TR_MNT) & 0x7)*10 + ((RxBuf[1] >> DS3231_RTC_TR_MNU) & 0xF);
 8000662:	7a7b      	ldrb	r3, [r7, #9]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4413      	add	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4413      	add	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	705a      	strb	r2, [r3, #1]
	if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)     //24 Hour Format
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	099b      	lsrs	r3, r3, #6
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d120      	bne.n	80006da <RTC_DS3231_Read_Calendar+0xbe>
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x3)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000698:	7abb      	ldrb	r3, [r7, #10]
 800069a:	091b      	lsrs	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	b25a      	sxtb	r2, r3
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	709a      	strb	r2, [r3, #2]
 80006d8:	e02c      	b.n	8000734 <RTC_DS3231_Read_Calendar+0x118>
	}
	else   //12 Hour Format
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x1)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 80006da:	7abb      	ldrb	r3, [r7, #10]
 80006dc:	091b      	lsrs	r3, r3, #4
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7abb      	ldrb	r3, [r7, #10]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_AMPM));
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	7abb      	ldrb	r3, [r7, #10]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	b2da      	uxtb	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	7abb      	ldrb	r3, [r7, #10]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	709a      	strb	r2, [r3, #2]
	}

	date->dayofweek = (RxBuf[3] & 0x7);
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	70da      	strb	r2, [r3, #3]
	date->date = ((RxBuf[4] >> DS3231_RTC_DR_DT) & 0x3)*10 + ((RxBuf[4] >> DS3231_RTC_DR_DU) & 0xF);
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	701a      	strb	r2, [r3, #0]
	date->month = ((RxBuf[5] >> DS3231_RTC_DR_MT) & 0x1)*10 + ((RxBuf[5] >> DS3231_RTC_DR_MU) & 0xF);
 8000766:	7b7b      	ldrb	r3, [r7, #13]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	705a      	strb	r2, [r3, #1]
	date->year = ((RxBuf[6] >> DS3231_RTC_DR_YT) & 0xF)*10 + ((RxBuf[6] >> DS3231_RTC_DR_YU) & 0xF);
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	709a      	strb	r2, [r3, #2]

	return;
 80007ac:	bf00      	nop
}
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008
 80007b8:	2000000c 	.word	0x2000000c

080007bc <RTC_DS3231_Display_Calendar_LCD>:

void RTC_DS3231_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(ds3231_display_count == 0)
 80007c6:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 809c 	bne.w	8000908 <RTC_DS3231_Display_Calendar_LCD+0x14c>
	{
		memset(&saved_time,0,sizeof(struct Time));
 80007d0:	2204      	movs	r2, #4
 80007d2:	2100      	movs	r1, #0
 80007d4:	4884      	ldr	r0, [pc, #528]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80007d6:	f002 f855 	bl	8002884 <memset>
		memset(&saved_date,0,sizeof(struct Date));
 80007da:	2204      	movs	r2, #4
 80007dc:	2100      	movs	r1, #0
 80007de:	4883      	ldr	r0, [pc, #524]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80007e0:	f002 f850 	bl	8002884 <memset>

		//Print the Time Information
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)      //24 Hour Format
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	099b      	lsrs	r3, r3, #6
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d117      	bne.n	8000824 <RTC_DS3231_Display_Calendar_LCD+0x68>
		{
			lcd_pcf8574_clear_screen();
 80007f4:	f001 f972 	bl	8001adc <lcd_pcf8574_clear_screen>
			delay_us(3000);
 80007f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007fc:	f7ff fd48 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000800:	f001 f973 	bl	8001aea <lcd_pcf8574_return_home>
			delay_us(3000);
 8000804:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000808:	f7ff fd42 	bl	8000290 <delay_us>
			printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	4619      	mov	r1, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	461a      	mov	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4874      	ldr	r0, [pc, #464]	; (80009f0 <RTC_DS3231_Display_Calendar_LCD+0x234>)
 800081e:	f002 f917 	bl	8002a50 <iprintf>
 8000822:	e02c      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
		}
		else  //12 Hour Format
		{
			lcd_pcf8574_clear_screen();
 8000824:	f001 f95a 	bl	8001adc <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8000828:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800082c:	f7ff fd30 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000830:	f001 f95b 	bl	8001aea <lcd_pcf8574_return_home>
			delay_us(3000);
 8000834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000838:	f7ff fd2a 	bl	8000290 <delay_us>
			if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)		//AM
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10c      	bne.n	8000866 <RTC_DS3231_Display_Calendar_LCD+0xaa>
			{
				printf("   %02d:%02d:%02d AM",(time->hours & 0xF),time->minutes,time->seconds);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	f003 010f 	and.w	r1, r3, #15
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	461a      	mov	r2, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4865      	ldr	r0, [pc, #404]	; (80009f4 <RTC_DS3231_Display_Calendar_LCD+0x238>)
 8000860:	f002 f8f6 	bl	8002a50 <iprintf>
 8000864:	e00b      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
			}
			else
			{
				printf("   %02d:%02d:%02d PM",(time->hours & 0xF),time->minutes,time->seconds);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	f003 010f 	and.w	r1, r3, #15
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	485f      	ldr	r0, [pc, #380]	; (80009f8 <RTC_DS3231_Display_Calendar_LCD+0x23c>)
 800087a:	f002 f8e9 	bl	8002a50 <iprintf>
			}
		}

		//Saving the time information
		saved_time.seconds = time->seconds;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000884:	701a      	strb	r2, [r3, #0]
		saved_time.minutes = time->minutes;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	785a      	ldrb	r2, [r3, #1]
 800088a:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800088c:	705a      	strb	r2, [r3, #1]
		saved_time.hours = time->hours;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789a      	ldrb	r2, [r3, #2]
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000894:	709a      	strb	r2, [r3, #2]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 8000896:	2100      	movs	r1, #0
 8000898:	2001      	movs	r0, #1
 800089a:	f001 f92d 	bl	8001af8 <lcd_pcf8574_set_position>
		delay_us(3000);
 800089e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a2:	f7ff fcf5 	bl	8000290 <delay_us>
		format_dow(date,dow);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f963 	bl	8000b78 <format_dow>
		format_mon(date,mon);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f9b1 	bl	8000c20 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	4602      	mov	r2, r0
 80008d6:	4849      	ldr	r0, [pc, #292]	; (80009fc <RTC_DS3231_Display_Calendar_LCD+0x240>)
 80008d8:	f002 f8ba 	bl	8002a50 <iprintf>

		//Saving the date information
		saved_date.date = date->date;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008e2:	701a      	strb	r2, [r3, #0]
		saved_date.month = date->month;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	785a      	ldrb	r2, [r3, #1]
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008ea:	705a      	strb	r2, [r3, #1]
		saved_date.year = date->year;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789a      	ldrb	r2, [r3, #2]
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008f2:	709a      	strb	r2, [r3, #2]
		saved_date.dayofweek = date->dayofweek;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	78da      	ldrb	r2, [r3, #3]
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008fa:	70da      	strb	r2, [r3, #3]

		//Update count value
		ds3231_display_count++;
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000904:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 8000906:	e128      	b.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)   //24 Hour Format
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	099b      	lsrs	r3, r3, #6
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d148      	bne.n	80009aa <RTC_DS3231_Display_Calendar_LCD+0x1ee>
			if(saved_time.seconds != time->seconds)
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d011      	beq.n	8000948 <RTC_DS3231_Display_Calendar_LCD+0x18c>
				lcd_pcf8574_set_position(0,10);
 8000924:	210a      	movs	r1, #10
 8000926:	2000      	movs	r0, #0
 8000928:	f001 f8e6 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 800092c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000930:	f7ff fcae 	bl	8000290 <delay_us>
				printf("%02d",time->seconds);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800093c:	f002 f888 	bl	8002a50 <iprintf>
				saved_time.seconds = time->seconds;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000946:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800094a:	785a      	ldrb	r2, [r3, #1]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	429a      	cmp	r2, r3
 8000952:	d011      	beq.n	8000978 <RTC_DS3231_Display_Calendar_LCD+0x1bc>
				lcd_pcf8574_set_position(0,7);
 8000954:	2107      	movs	r1, #7
 8000956:	2000      	movs	r0, #0
 8000958:	f001 f8ce 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f7ff fc96 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	4619      	mov	r1, r3
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800096c:	f002 f870 	bl	8002a50 <iprintf>
				saved_time.minutes = time->minutes;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000976:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	429a      	cmp	r2, r3
 8000982:	d07d      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,4);
 8000984:	2104      	movs	r1, #4
 8000986:	2000      	movs	r0, #0
 8000988:	f001 f8b6 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f7ff fc7e 	bl	8000290 <delay_us>
				printf("%02d",time->hours);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	4619      	mov	r1, r3
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800099c:	f002 f858 	bl	8002a50 <iprintf>
				saved_time.hours = time->hours;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	789a      	ldrb	r2, [r3, #2]
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009a6:	709a      	strb	r2, [r3, #2]
 80009a8:	e06a      	b.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
			if(saved_time.seconds != time->seconds)
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d032      	beq.n	8000a1c <RTC_DS3231_Display_Calendar_LCD+0x260>
				lcd_pcf8574_set_position(0,9);
 80009b6:	2109      	movs	r1, #9
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f89d 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c2:	f7ff fc65 	bl	8000290 <delay_us>
				if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)    //AM
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d118      	bne.n	8000a08 <RTC_DS3231_Display_Calendar_LCD+0x24c>
					printf("%02d AM",time->seconds);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <RTC_DS3231_Display_Calendar_LCD+0x248>)
 80009de:	f002 f837 	bl	8002a50 <iprintf>
 80009e2:	e017      	b.n	8000a14 <RTC_DS3231_Display_Calendar_LCD+0x258>
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	200000d8 	.word	0x200000d8
 80009ec:	200000d4 	.word	0x200000d4
 80009f0:	08003a0c 	.word	0x08003a0c
 80009f4:	08003a20 	.word	0x08003a20
 80009f8:	08003a38 	.word	0x08003a38
 80009fc:	08003a50 	.word	0x08003a50
 8000a00:	08003a64 	.word	0x08003a64
 8000a04:	08003a6c 	.word	0x08003a6c
					printf("%02d PM",time->seconds);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4855      	ldr	r0, [pc, #340]	; (8000b64 <RTC_DS3231_Display_Calendar_LCD+0x3a8>)
 8000a10:	f002 f81e 	bl	8002a50 <iprintf>
				saved_time.seconds = time->seconds;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000a1c:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1e:	785a      	ldrb	r2, [r3, #1]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d011      	beq.n	8000a4c <RTC_DS3231_Display_Calendar_LCD+0x290>
				lcd_pcf8574_set_position(0,6);
 8000a28:	2106      	movs	r1, #6
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 f864 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f7ff fc2c 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	484b      	ldr	r0, [pc, #300]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a40:	f002 f806 	bl	8002a50 <iprintf>
				saved_time.minutes = time->minutes;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	785a      	ldrb	r2, [r3, #1]
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4a:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4e:	789a      	ldrb	r2, [r3, #2]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d013      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,3);
 8000a58:	2103      	movs	r1, #3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f84c 	bl	8001af8 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a64:	f7ff fc14 	bl	8000290 <delay_us>
				printf("%02d",(time->hours & 0xF));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	4619      	mov	r1, r3
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a74:	f001 ffec 	bl	8002a50 <iprintf>
				saved_time.hours = time->hours;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789a      	ldrb	r2, [r3, #2]
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a7e:	709a      	strb	r2, [r3, #2]
		if(saved_date.date != date->date)
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d011      	beq.n	8000ab0 <RTC_DS3231_Display_Calendar_LCD+0x2f4>
			lcd_pcf8574_set_position(1,6);
 8000a8c:	2106      	movs	r1, #6
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 f832 	bl	8001af8 <lcd_pcf8574_set_position>
			delay_us(500);
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f7ff fbfa 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000aa4:	f001 ffd4 	bl	8002a50 <iprintf>
			saved_date.date = date->date;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aae:	701a      	strb	r2, [r3, #0]
		if(saved_date.month != date->month)
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d017      	beq.n	8000aec <RTC_DS3231_Display_Calendar_LCD+0x330>
			lcd_pcf8574_set_position(1,9);
 8000abc:	2109      	movs	r1, #9
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f001 f81a 	bl	8001af8 <lcd_pcf8574_set_position>
			delay_us(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fbe2 	bl	8000290 <delay_us>
			format_mon(date,mon);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f8a4 	bl	8000c20 <format_mon>
			printf("%s",mon);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000ae0:	f001 ffb6 	bl	8002a50 <iprintf>
			saved_date.month = date->month;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	785a      	ldrb	r2, [r3, #1]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aea:	705a      	strb	r2, [r3, #1]
		if(saved_date.year != date->year)
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aee:	789a      	ldrb	r2, [r3, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d011      	beq.n	8000b1c <RTC_DS3231_Display_Calendar_LCD+0x360>
			lcd_pcf8574_set_position(1,13);
 8000af8:	210d      	movs	r1, #13
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fffc 	bl	8001af8 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f7ff fbc4 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000b10:	f001 ff9e 	bl	8002a50 <iprintf>
			saved_date.year = date->year;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	789a      	ldrb	r2, [r3, #2]
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1a:	709a      	strb	r2, [r3, #2]
		if(saved_date.dayofweek != date->dayofweek)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1e:	78da      	ldrb	r2, [r3, #3]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d018      	beq.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
			lcd_pcf8574_set_position(1,2);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 ffe4 	bl	8001af8 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f7ff fbac 	bl	8000290 <delay_us>
			format_dow(date,dow);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f81a 	bl	8000b78 <format_dow>
			printf("%s",dow);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000b4c:	f001 ff80 	bl	8002a50 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	78da      	ldrb	r2, [r3, #3]
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b56:	70da      	strb	r2, [r3, #3]
	return;
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
}
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08003a74 	.word	0x08003a74
 8000b68:	200000d8 	.word	0x200000d8
 8000b6c:	08003a64 	.word	0x08003a64
 8000b70:	200000d4 	.word	0x200000d4
 8000b74:	08003a7c 	.word	0x08003a7c

08000b78 <format_dow>:

	return;
}

static void format_dow(struct Date *date,char *dow)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	78db      	ldrb	r3, [r3, #3]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d834      	bhi.n	8000bf6 <format_dow+0x7e>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <format_dow+0x1c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000bb1 	.word	0x08000bb1
 8000b98:	08000bbb 	.word	0x08000bbb
 8000b9c:	08000bc5 	.word	0x08000bc5
 8000ba0:	08000bcf 	.word	0x08000bcf
 8000ba4:	08000bd9 	.word	0x08000bd9
 8000ba8:	08000be3 	.word	0x08000be3
 8000bac:	08000bed 	.word	0x08000bed
	{
		case 1:
			strcpy(dow,"Mon");
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <format_dow+0x8c>)
 8000bb4:	6810      	ldr	r0, [r2, #0]
 8000bb6:	6018      	str	r0, [r3, #0]
			break;
 8000bb8:	e01e      	b.n	8000bf8 <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <format_dow+0x90>)
 8000bbe:	6810      	ldr	r0, [r2, #0]
 8000bc0:	6018      	str	r0, [r3, #0]
			break;
 8000bc2:	e019      	b.n	8000bf8 <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <format_dow+0x94>)
 8000bc8:	6810      	ldr	r0, [r2, #0]
 8000bca:	6018      	str	r0, [r3, #0]
			break;
 8000bcc:	e014      	b.n	8000bf8 <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <format_dow+0x98>)
 8000bd2:	6810      	ldr	r0, [r2, #0]
 8000bd4:	6018      	str	r0, [r3, #0]
			break;
 8000bd6:	e00f      	b.n	8000bf8 <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <format_dow+0x9c>)
 8000bdc:	6810      	ldr	r0, [r2, #0]
 8000bde:	6018      	str	r0, [r3, #0]
			break;
 8000be0:	e00a      	b.n	8000bf8 <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <format_dow+0xa0>)
 8000be6:	6810      	ldr	r0, [r2, #0]
 8000be8:	6018      	str	r0, [r3, #0]
			break;
 8000bea:	e005      	b.n	8000bf8 <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <format_dow+0xa4>)
 8000bf0:	6810      	ldr	r0, [r2, #0]
 8000bf2:	6018      	str	r0, [r3, #0]
			break;
 8000bf4:	e000      	b.n	8000bf8 <format_dow+0x80>
		default:
			break;
 8000bf6:	bf00      	nop
	}

	return;
 8000bf8:	bf00      	nop
}
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	08003a80 	.word	0x08003a80
 8000c08:	08003a84 	.word	0x08003a84
 8000c0c:	08003a88 	.word	0x08003a88
 8000c10:	08003a8c 	.word	0x08003a8c
 8000c14:	08003a90 	.word	0x08003a90
 8000c18:	08003a94 	.word	0x08003a94
 8000c1c:	08003a98 	.word	0x08003a98

08000c20 <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	switch(date->month)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	2b0b      	cmp	r3, #11
 8000c32:	d857      	bhi.n	8000ce4 <format_mon+0xc4>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <format_mon+0x1c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c77 	.word	0x08000c77
 8000c44:	08000c81 	.word	0x08000c81
 8000c48:	08000c8b 	.word	0x08000c8b
 8000c4c:	08000c95 	.word	0x08000c95
 8000c50:	08000c9f 	.word	0x08000c9f
 8000c54:	08000ca9 	.word	0x08000ca9
 8000c58:	08000cb3 	.word	0x08000cb3
 8000c5c:	08000cbd 	.word	0x08000cbd
 8000c60:	08000cc7 	.word	0x08000cc7
 8000c64:	08000cd1 	.word	0x08000cd1
 8000c68:	08000cdb 	.word	0x08000cdb
	{
		case 1:
			strcpy(mon,"Jan");
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <format_mon+0xd0>)
 8000c70:	6810      	ldr	r0, [r2, #0]
 8000c72:	6018      	str	r0, [r3, #0]
			break;
 8000c74:	e037      	b.n	8000ce6 <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <format_mon+0xd4>)
 8000c7a:	6810      	ldr	r0, [r2, #0]
 8000c7c:	6018      	str	r0, [r3, #0]
			break;
 8000c7e:	e032      	b.n	8000ce6 <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <format_mon+0xd8>)
 8000c84:	6810      	ldr	r0, [r2, #0]
 8000c86:	6018      	str	r0, [r3, #0]
			break;
 8000c88:	e02d      	b.n	8000ce6 <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <format_mon+0xdc>)
 8000c8e:	6810      	ldr	r0, [r2, #0]
 8000c90:	6018      	str	r0, [r3, #0]
			break;
 8000c92:	e028      	b.n	8000ce6 <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <format_mon+0xe0>)
 8000c98:	6810      	ldr	r0, [r2, #0]
 8000c9a:	6018      	str	r0, [r3, #0]
			break;
 8000c9c:	e023      	b.n	8000ce6 <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <format_mon+0xe4>)
 8000ca2:	6810      	ldr	r0, [r2, #0]
 8000ca4:	6018      	str	r0, [r3, #0]
			break;
 8000ca6:	e01e      	b.n	8000ce6 <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <format_mon+0xe8>)
 8000cac:	6810      	ldr	r0, [r2, #0]
 8000cae:	6018      	str	r0, [r3, #0]
			break;
 8000cb0:	e019      	b.n	8000ce6 <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <format_mon+0xec>)
 8000cb6:	6810      	ldr	r0, [r2, #0]
 8000cb8:	6018      	str	r0, [r3, #0]
			break;
 8000cba:	e014      	b.n	8000ce6 <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <format_mon+0xf0>)
 8000cc0:	6810      	ldr	r0, [r2, #0]
 8000cc2:	6018      	str	r0, [r3, #0]
			break;
 8000cc4:	e00f      	b.n	8000ce6 <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <format_mon+0xf4>)
 8000cca:	6810      	ldr	r0, [r2, #0]
 8000ccc:	6018      	str	r0, [r3, #0]
			break;
 8000cce:	e00a      	b.n	8000ce6 <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <format_mon+0xf8>)
 8000cd4:	6810      	ldr	r0, [r2, #0]
 8000cd6:	6018      	str	r0, [r3, #0]
			break;
 8000cd8:	e005      	b.n	8000ce6 <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <format_mon+0xfc>)
 8000cde:	6810      	ldr	r0, [r2, #0]
 8000ce0:	6018      	str	r0, [r3, #0]
			break;
 8000ce2:	e000      	b.n	8000ce6 <format_mon+0xc6>
		default:
			break;
 8000ce4:	bf00      	nop
	}

	return;
 8000ce6:	bf00      	nop
}
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	08003a9c 	.word	0x08003a9c
 8000cf4:	08003aa0 	.word	0x08003aa0
 8000cf8:	08003aa4 	.word	0x08003aa4
 8000cfc:	08003aa8 	.word	0x08003aa8
 8000d00:	08003aac 	.word	0x08003aac
 8000d04:	08003ab0 	.word	0x08003ab0
 8000d08:	08003ab4 	.word	0x08003ab4
 8000d0c:	08003ab8 	.word	0x08003ab8
 8000d10:	08003abc 	.word	0x08003abc
 8000d14:	08003ac0 	.word	0x08003ac0
 8000d18:	08003ac4 	.word	0x08003ac4
 8000d1c:	08003ac8 	.word	0x08003ac8

08000d20 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	4608      	mov	r0, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	70fb      	strb	r3, [r7, #3]
 8000d32:	460b      	mov	r3, r1
 8000d34:	70bb      	strb	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <configure_external_gpio_interrupt+0x104>)
 8000d3c:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <configure_external_gpio_interrupt+0x108>)
 8000d40:	61bb      	str	r3, [r7, #24]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <configure_external_gpio_interrupt+0x10c>)
 8000d44:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <configure_external_gpio_interrupt+0x110>)
 8000d48:	613b      	str	r3, [r7, #16]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <configure_external_gpio_interrupt+0x114>)
 8000d4c:	60fb      	str	r3, [r7, #12]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 ff22 	bl	8001b98 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 faff 	bl	800135e <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 fb97 	bl	800149a <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fbd7 	bl	8001526 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fbad 	bl	80014de <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	431a      	orrs	r2, r3
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 8000d96:	78bb      	ldrb	r3, [r7, #2]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d108      	bne.n	8000dae <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 8000dae:	78bb      	ldrb	r3, [r7, #2]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d108      	bne.n	8000dc6 <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	60bb      	str	r3, [r7, #8]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	210f      	movs	r1, #15
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	43d2      	mvns	r2, r2
 8000df4:	401a      	ands	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f81c 	bl	8000e38 <gpio_port_name_to_num>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f882 	bl	8001f20 <NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023844 	.word	0x40023844
 8000e28:	40013c00 	.word	0x40013c00
 8000e2c:	40013c08 	.word	0x40013c08
 8000e30:	40013c0c 	.word	0x40013c0c
 8000e34:	40013808 	.word	0x40013808

08000e38 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <gpio_port_name_to_num+0x90>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d102      	bne.n	8000e4e <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e036      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <gpio_port_name_to_num+0x94>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d102      	bne.n	8000e5c <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e02f      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <gpio_port_name_to_num+0x98>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e028      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <gpio_port_name_to_num+0x9c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8000e72:	2303      	movs	r3, #3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e021      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <gpio_port_name_to_num+0xa0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d102      	bne.n	8000e86 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000e80:	2304      	movs	r3, #4
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e01a      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <gpio_port_name_to_num+0xa4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d102      	bne.n	8000e94 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e013      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <gpio_port_name_to_num+0xa8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d102      	bne.n	8000ea2 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e00c      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <gpio_port_name_to_num+0xac>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d102      	bne.n	8000eb0 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e005      	b.n	8000ebc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <gpio_port_name_to_num+0xb0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d101      	bne.n	8000ebc <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021c00 	.word	0x40021c00
 8000ee8:	40022000 	.word	0x40022000

08000eec <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6852      	ldr	r2, [r2, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6892      	ldr	r2, [r2, #8]
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d16a      	bne.n	8000fe6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a1a      	ldr	r2, [r3, #32]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7b5b      	ldrb	r3, [r3, #13]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d11c      	bne.n	8000f62 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0203 	bic.w	r2, r2, #3
 8000f36:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6912      	ldr	r2, [r2, #16]
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f50:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000f60:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7b5b      	ldrb	r3, [r3, #13]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d11c      	bne.n	8000fa4 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	699a      	ldr	r2, [r3, #24]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0203 	bic.w	r2, r2, #3
 8000f78:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6912      	ldr	r2, [r2, #16]
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f92:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000fa2:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b5b      	ldrb	r3, [r3, #13]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d11c      	bne.n	8000fe6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0203 	bic.w	r2, r2, #3
 8000fba:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6912      	ldr	r2, [r2, #16]
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fd4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699a      	ldr	r2, [r3, #24]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000fe4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7d1b      	ldrb	r3, [r3, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f040 80bf 	bne.w	800116e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7d5b      	ldrb	r3, [r3, #21]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d124      	bne.n	8001042 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001006:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6992      	ldr	r2, [r2, #24]
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001020:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	699a      	ldr	r2, [r3, #24]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001030:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0210 	orr.w	r2, r2, #16
 8001040:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7d5b      	ldrb	r3, [r3, #21]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d124      	bne.n	8001094 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001058:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6992      	ldr	r2, [r2, #24]
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001072:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001082:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0210 	orr.w	r2, r2, #16
 8001092:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7d5b      	ldrb	r3, [r3, #21]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d124      	bne.n	80010e6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010aa:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6992      	ldr	r2, [r2, #24]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80010c4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80010d4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0210 	orr.w	r2, r2, #16
 80010e4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7d5b      	ldrb	r3, [r3, #21]
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d13f      	bne.n	800116e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010fc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800110c:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800111c:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0220 	bic.w	r2, r2, #32
 800112c:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800113c:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800114c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0204 	orr.w	r2, r2, #4
 800115c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0210 	orr.w	r2, r2, #16
 800116c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d16a      	bne.n	800124c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001184:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7f5b      	ldrb	r3, [r3, #29]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d11c      	bne.n	80011c8 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0203 	bic.w	r2, r2, #3
 800119c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6a12      	ldr	r2, [r2, #32]
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	69da      	ldr	r2, [r3, #28]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011b6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80011c6:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7f5b      	ldrb	r3, [r3, #29]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d11c      	bne.n	800120a <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0203 	bic.w	r2, r2, #3
 80011de:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6a12      	ldr	r2, [r2, #32]
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69da      	ldr	r2, [r3, #28]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011f8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001208:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7f5b      	ldrb	r3, [r3, #29]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d11c      	bne.n	800124c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0203 	bic.w	r2, r2, #3
 8001220:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6a12      	ldr	r2, [r2, #32]
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800123a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800124a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001252:	2b00      	cmp	r3, #0
 8001254:	d16d      	bne.n	8001332 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001264:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800126c:	2b02      	cmp	r3, #2
 800126e:	d11c      	bne.n	80012aa <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	69da      	ldr	r2, [r3, #28]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800127e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001298:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80012a8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d11c      	bne.n	80012ee <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80012c2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012dc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80012ec:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d11c      	bne.n	8001332 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001306:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001320:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001330:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	70fb      	strb	r3, [r7, #3]
 800136a:	4613      	mov	r3, r2
 800136c:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	0052      	lsls	r2, r2, #1
 800137a:	2103      	movs	r1, #3
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	78b9      	ldrb	r1, [r7, #2]
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	0052      	lsls	r2, r2, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]

}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	60fb      	str	r3, [r7, #12]

	return value;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b2db      	uxtb	r3, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <GPIOWritePin>:

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
 80013f0:	4613      	mov	r3, r2
 80013f2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	78b9      	ldrb	r1, [r7, #2]
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	431a      	orrs	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	615a      	str	r2, [r3, #20]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
 8001434:	4613      	mov	r3, r2
 8001436:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800144a:	7afa      	ldrb	r2, [r7, #11]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	7aba      	ldrb	r2, [r7, #10]
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	210f      	movs	r1, #15
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	43d2      	mvns	r2, r2
 8001460:	4611      	mov	r1, r2
 8001462:	7afa      	ldrb	r2, [r7, #11]
 8001464:	4019      	ands	r1, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3208      	adds	r2, #8
 800146a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 800146e:	7afa      	ldrb	r2, [r7, #11]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	78b9      	ldrb	r1, [r7, #2]
 800147a:	7aba      	ldrb	r2, [r7, #10]
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4611      	mov	r1, r2
 8001484:	7afa      	ldrb	r2, [r7, #11]
 8001486:	4319      	orrs	r1, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3208      	adds	r2, #8
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
 80014a6:	4613      	mov	r3, r2
 80014a8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	43d2      	mvns	r2, r2
 80014bc:	401a      	ands	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	78b9      	ldrb	r1, [r7, #2]
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	fa01 f202 	lsl.w	r2, r1, r2
 80014ce:	431a      	orrs	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	0052      	lsls	r2, r2, #1
 80014fa:	2103      	movs	r1, #3
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	43d2      	mvns	r2, r2
 8001502:	401a      	ands	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	78b9      	ldrb	r1, [r7, #2]
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	0052      	lsls	r2, r2, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	431a      	orrs	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	60da      	str	r2, [r3, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	4613      	mov	r3, r2
 8001534:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	2103      	movs	r1, #3
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	43d2      	mvns	r2, r2
 800154a:	401a      	ands	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	78b9      	ldrb	r1, [r7, #2]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	0052      	lsls	r2, r2, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	431a      	orrs	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	03db      	lsls	r3, r3, #15
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10d      	bne.n	80015d6 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	039b      	lsls	r3, r3, #14
 80015d0:	431a      	orrs	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80015de:	f023 030f 	bic.w	r3, r3, #15
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	431a      	orrs	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]

}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f84c 	bl	80016ec <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001654:	bf00      	nop
 8001656:	2101      	movs	r1, #1
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f869 	bl	8001730 <I2C_GetFlagStatus>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f8      	beq.n	8001656 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	4619      	mov	r1, r3
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f86f 	bl	800175a <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 800167c:	bf00      	nop
 800167e:	2102      	movs	r1, #2
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f855 	bl	8001730 <I2C_GetFlagStatus>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f8      	beq.n	800167e <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f874 	bl	800177a <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8001692:	e012      	b.n	80016ba <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001694:	bf00      	nop
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f849 	bl	8001730 <I2C_GetFlagStatus>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f8      	beq.n	8001696 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	611a      	str	r2, [r3, #16]
		TxBuf++;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
		Len--;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e9      	bne.n	8001694 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 80016c0:	bf00      	nop
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f833 	bl	8001730 <I2C_GetFlagStatus>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d1f8      	bne.n	80016c2 <I2CMasterSendData+0x86>
 80016d0:	2104      	movs	r1, #4
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f82c 	bl	8001730 <I2C_GetFlagStatus>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d1f1      	bne.n	80016c2 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f815 	bl	800170e <I2C_SendStopBit>

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	621a      	str	r2, [r3, #32]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff ff66 	bl	80016ec <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001820:	bf00      	nop
 8001822:	2101      	movs	r1, #1
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff ff83 	bl	8001730 <I2C_GetFlagStatus>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f8      	beq.n	8001822 <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 8001830:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	4619      	mov	r1, r3
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff ff88 	bl	800175a <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 800184a:	bf00      	nop
 800184c:	2102      	movs	r1, #2
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff ff6e 	bl	8001730 <I2C_GetFlagStatus>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f8      	beq.n	800184c <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff ff8d 	bl	800177a <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 8001860:	2300      	movs	r3, #0
 8001862:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8001864:	e015      	b.n	8001892 <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001866:	bf00      	nop
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff ff60 	bl	8001730 <I2C_GetFlagStatus>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f8      	beq.n	8001868 <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001876:	7fbb      	ldrb	r3, [r7, #30]
 8001878:	3320      	adds	r3, #32
 800187a:	443b      	add	r3, r7
 800187c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001880:	461a      	mov	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	611a      	str	r2, [r3, #16]
		i++;
 8001886:	7fbb      	ldrb	r3, [r7, #30]
 8001888:	3301      	adds	r3, #1
 800188a:	77bb      	strb	r3, [r7, #30]
		address_length--;
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	3b01      	subs	r3, #1
 8001890:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 8001892:	7ffb      	ldrb	r3, [r7, #31]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e6      	bne.n	8001866 <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001898:	bf00      	nop
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff ff47 	bl	8001730 <I2C_GetFlagStatus>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d1f8      	bne.n	800189a <I2CMaster_DS3231_RTC_Read+0x9a>
 80018a8:	2104      	movs	r1, #4
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff ff40 	bl	8001730 <I2C_GetFlagStatus>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d1f1      	bne.n	800189a <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff ff18 	bl	80016ec <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 80018bc:	bf00      	nop
 80018be:	2101      	movs	r1, #1
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff ff35 	bl	8001730 <I2C_GetFlagStatus>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f8      	beq.n	80018be <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 80018cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	4619      	mov	r1, r3
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff ff3a 	bl	800175a <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 80018e6:	bf00      	nop
 80018e8:	2102      	movs	r1, #2
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff ff20 	bl	8001730 <I2C_GetFlagStatus>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f8      	beq.n	80018e8 <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff ff3f 	bl	800177a <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d919      	bls.n	8001936 <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff ff5a 	bl	80017bc <I2CEnableAck>
		while(Len >= 2)
 8001908:	e012      	b.n	8001930 <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 800190a:	bf00      	nop
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff0e 	bl	8001730 <I2C_GetFlagStatus>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f8      	beq.n	800190c <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3301      	adds	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
			Len--;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3b01      	subs	r3, #1
 800192e:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d8e9      	bhi.n	800190a <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d115      	bne.n	8001968 <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff ff4e 	bl	80017de <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001942:	bf00      	nop
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff fef2 	bl	8001730 <I2C_GetFlagStatus>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f8      	beq.n	8001944 <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
		Len--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3b01      	subs	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fed0 	bl	800170e <I2C_SendStopBit>

	return;
 800196e:	bf00      	nop
}
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 800197a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800197e:	f7fe fc87 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001982:	2030      	movs	r0, #48	; 0x30
 8001984:	f000 f846 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001988:	f24c 3050 	movw	r0, #50000	; 0xc350
 800198c:	f7fe fc80 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001990:	2030      	movs	r0, #48	; 0x30
 8001992:	f000 f83f 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800199a:	f7fe fc79 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800199e:	2030      	movs	r0, #48	; 0x30
 80019a0:	f000 f838 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 80019a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019a8:	f7fe fc72 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 80019ac:	2020      	movs	r0, #32
 80019ae:	f000 f831 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 80019b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80019b6:	f7fe fc6b 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80019ba:	2028      	movs	r0, #40	; 0x28
 80019bc:	f000 f82a 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80019c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019c4:	f7fe fc64 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80019c8:	2008      	movs	r0, #8
 80019ca:	f000 f823 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80019ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019d2:	f7fe fc5d 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 f81c 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80019dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019e0:	f7fe fc56 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f000 f815 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80019ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ee:	f7fe fc4f 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80019f2:	2006      	movs	r0, #6
 80019f4:	f000 f80e 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80019f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019fc:	f7fe fc48 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001a00:	200c      	movs	r0, #12
 8001a02:	f000 f807 	bl	8001a14 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001a06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a0a:	f7fe fc41 	bl	8000290 <delay_us>

	return;
 8001a0e:	bf00      	nop
}
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f023 030f 	bic.w	r3, r3, #15
 8001a24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f043 030c 	orr.w	r3, r3, #12
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	f043 030c 	orr.w	r3, r3, #12
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <lcd_pcf8574_send_cmd+0x5c>)
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <lcd_pcf8574_send_cmd+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f107 0108 	add.w	r1, r7, #8
 8001a60:	2204      	movs	r2, #4
 8001a62:	f7ff fdeb 	bl	800163c <I2CMasterSendData>

	return;
 8001a66:	bf00      	nop
}
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f043 030d 	orr.w	r3, r3, #13
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	f043 0309 	orr.w	r3, r3, #9
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	f043 030d 	orr.w	r3, r3, #13
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	f043 0309 	orr.w	r3, r3, #9
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <lcd_pcf8574_send_data+0x5c>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <lcd_pcf8574_send_data+0x60>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f107 0108 	add.w	r1, r7, #8
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	f7ff fdb9 	bl	800163c <I2CMasterSendData>

	return;
 8001aca:	bf00      	nop
}
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff ff97 	bl	8001a14 <lcd_pcf8574_send_cmd>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7ff ff90 	bl	8001a14 <lcd_pcf8574_send_cmd>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	2b27      	cmp	r3, #39	; 0x27
 8001b12:	d802      	bhi.n	8001b1a <lcd_pcf8574_set_position+0x22>
			position = col;
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e011      	b.n	8001b3e <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e00e      	b.n	8001b3e <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d109      	bne.n	8001b3a <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	2b27      	cmp	r3, #39	; 0x27
 8001b2a:	d803      	bhi.n	8001b34 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	3340      	adds	r3, #64	; 0x40
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e004      	b.n	8001b3e <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b44:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff63 	bl	8001a14 <lcd_pcf8574_send_cmd>

	return;
 8001b4e:	bf00      	nop
}
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <RTC_Alarm_IRQHandler+0x24>)
 8001b60:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001b62:	f000 f80d 	bl	8001b80 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]

	return;
 8001b72:	bf00      	nop
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40013c14 	.word	0x40013c14

08001b80 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001b84:	2201      	movs	r2, #1
 8001b86:	210f      	movs	r1, #15
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001b8a:	f7ff fc2b 	bl	80013e4 <GPIOWritePin>

	return;
 8001b8e:	bf00      	nop
}
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020c00 	.word	0x40020c00

08001b98 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a88      	ldr	r2, [pc, #544]	; (8001dc4 <EnablePeriClk+0x22c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d108      	bne.n	8001bba <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ba8:	4b87      	ldr	r3, [pc, #540]	; (8001dc8 <EnablePeriClk+0x230>)
 8001baa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001bb8:	e19b      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a83      	ldr	r2, [pc, #524]	; (8001dcc <EnablePeriClk+0x234>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001bc2:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <EnablePeriClk+0x230>)
 8001bc4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f043 0202 	orr.w	r2, r3, #2
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	e18e      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a7e      	ldr	r2, [pc, #504]	; (8001dd0 <EnablePeriClk+0x238>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001bdc:	4b7a      	ldr	r3, [pc, #488]	; (8001dc8 <EnablePeriClk+0x230>)
 8001bde:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	e181      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	; (8001dd4 <EnablePeriClk+0x23c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d108      	bne.n	8001c08 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001bf6:	4b74      	ldr	r3, [pc, #464]	; (8001dc8 <EnablePeriClk+0x230>)
 8001bf8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f043 0208 	orr.w	r2, r3, #8
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	e174      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a73      	ldr	r2, [pc, #460]	; (8001dd8 <EnablePeriClk+0x240>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d108      	bne.n	8001c22 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <EnablePeriClk+0x230>)
 8001c12:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f043 0210 	orr.w	r2, r3, #16
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	e167      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a6d      	ldr	r2, [pc, #436]	; (8001ddc <EnablePeriClk+0x244>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d108      	bne.n	8001c3c <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <EnablePeriClk+0x230>)
 8001c2c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	e15a      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a68      	ldr	r2, [pc, #416]	; (8001de0 <EnablePeriClk+0x248>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c44:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <EnablePeriClk+0x230>)
 8001c46:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	e14d      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a62      	ldr	r2, [pc, #392]	; (8001de4 <EnablePeriClk+0x24c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d108      	bne.n	8001c70 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <EnablePeriClk+0x230>)
 8001c60:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	e140      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <EnablePeriClk+0x250>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d108      	bne.n	8001c8a <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <EnablePeriClk+0x230>)
 8001c7a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	e133      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	; (8001dec <EnablePeriClk+0x254>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d108      	bne.n	8001ca4 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <EnablePeriClk+0x258>)
 8001c94:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	e126      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <EnablePeriClk+0x25c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cac:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <EnablePeriClk+0x260>)
 8001cae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	e119      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <EnablePeriClk+0x264>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <EnablePeriClk+0x260>)
 8001cc8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	601a      	str	r2, [r3, #0]
}
 8001cd6:	e10c      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <EnablePeriClk+0x268>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d108      	bne.n	8001cf2 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ce0:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <EnablePeriClk+0x260>)
 8001ce2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	e0ff      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <EnablePeriClk+0x26c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <EnablePeriClk+0x260>)
 8001cfc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	e0f2      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3e      	ldr	r2, [pc, #248]	; (8001e08 <EnablePeriClk+0x270>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <EnablePeriClk+0x260>)
 8001d16:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	e0e5      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <EnablePeriClk+0x274>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <EnablePeriClk+0x258>)
 8001d30:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	e0d8      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <EnablePeriClk+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d108      	bne.n	8001d5a <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <EnablePeriClk+0x260>)
 8001d4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	e0cb      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <EnablePeriClk+0x27c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d108      	bne.n	8001d74 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <EnablePeriClk+0x260>)
 8001d64:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	e0be      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <EnablePeriClk+0x280>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d108      	bne.n	8001d8e <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <EnablePeriClk+0x260>)
 8001d7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	e0b1      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <EnablePeriClk+0x284>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d108      	bne.n	8001da8 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <EnablePeriClk+0x260>)
 8001d98:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	e0a4      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <EnablePeriClk+0x288>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d139      	bne.n	8001e24 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <EnablePeriClk+0x258>)
 8001db2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	e097      	b.n	8001ef2 <EnablePeriClk+0x35a>
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40023830 	.word	0x40023830
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021c00 	.word	0x40021c00
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40013000 	.word	0x40013000
 8001df0:	40023844 	.word	0x40023844
 8001df4:	40003800 	.word	0x40003800
 8001df8:	40023840 	.word	0x40023840
 8001dfc:	40003c00 	.word	0x40003c00
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40005800 	.word	0x40005800
 8001e08:	40005c00 	.word	0x40005c00
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40004800 	.word	0x40004800
 8001e18:	40004c00 	.word	0x40004c00
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <EnablePeriClk+0x364>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d108      	bne.n	8001e3e <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <EnablePeriClk+0x368>)
 8001e2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	e059      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <EnablePeriClk+0x36c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d108      	bne.n	8001e58 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <EnablePeriClk+0x368>)
 8001e48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	e04c      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <EnablePeriClk+0x370>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <EnablePeriClk+0x374>)
 8001e62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	e03f      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <EnablePeriClk+0x378>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <EnablePeriClk+0x374>)
 8001e7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	e032      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d108      	bne.n	8001ea6 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <EnablePeriClk+0x368>)
 8001e96:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	e025      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <EnablePeriClk+0x37c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <EnablePeriClk+0x368>)
 8001eb0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	e018      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <EnablePeriClk+0x380>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <EnablePeriClk+0x368>)
 8001eca:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	e00b      	b.n	8001ef2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <EnablePeriClk+0x384>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d107      	bne.n	8001ef2 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <EnablePeriClk+0x368>)
 8001ee4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f043 0208 	orr.w	r2, r3, #8
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40001000 	.word	0x40001000
 8001f00:	40023840 	.word	0x40023840
 8001f04:	40001400 	.word	0x40001400
 8001f08:	40026000 	.word	0x40026000
 8001f0c:	40023830 	.word	0x40023830
 8001f10:	40026400 	.word	0x40026400
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00

08001f20 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001f42:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001f46:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	431a      	orrs	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <main>:
static void update_clock(void);
static void disable_interrupts(void);
static void enable_interrupts(void);

int main(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0

	struct RTC_DS3231_Config_t ds3231_rtc_config;

	//Configure the Timer
	configure_delay_timer();
 8001f6a:	f7fe f9a9 	bl	80002c0 <configure_delay_timer>

	//Configure the I2C Peripheral
	configure_i2c();
 8001f6e:	f7fe f9c9 	bl	8000304 <configure_i2c>

	//Disable printf() buffering
	setbuf(stdout, NULL);
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <main+0x13c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fda4 	bl	8002ac8 <setbuf>

	//Initialize the LCD module
	delay_us(1000000);
 8001f80:	4848      	ldr	r0, [pc, #288]	; (80020a4 <main+0x140>)
 8001f82:	f7fe f985 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001f86:	f7ff fcf6 	bl	8001976 <lcd_pcf8574_init>
	delay_us(100000);
 8001f8a:	4847      	ldr	r0, [pc, #284]	; (80020a8 <main+0x144>)
 8001f8c:	f7fe f980 	bl	8000290 <delay_us>


	lcd_pcf8574_clear_screen();
 8001f90:	f7ff fda4 	bl	8001adc <lcd_pcf8574_clear_screen>
	delay_us(3000);
 8001f94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f98:	f7fe f97a 	bl	8000290 <delay_us>
	lcd_pcf8574_return_home();
 8001f9c:	f7ff fda5 	bl	8001aea <lcd_pcf8574_return_home>
	delay_us(3000);
 8001fa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fa4:	f7fe f974 	bl	8000290 <delay_us>
	//printf(">");

	//GPIO Configuration for Columns of Matrix Keypad
	EnablePeriClk(GPIO_PORT_COL);
 8001fa8:	4840      	ldr	r0, [pc, #256]	; (80020ac <main+0x148>)
 8001faa:	f7ff fdf5 	bl	8001b98 <EnablePeriClk>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_1, GPIO_MODE_OUTPUT);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	483e      	ldr	r0, [pc, #248]	; (80020ac <main+0x148>)
 8001fb4:	f7ff f9d3 	bl	800135e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_2, GPIO_MODE_OUTPUT);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2101      	movs	r1, #1
 8001fbc:	483b      	ldr	r0, [pc, #236]	; (80020ac <main+0x148>)
 8001fbe:	f7ff f9ce 	bl	800135e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_3, GPIO_MODE_OUTPUT);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4839      	ldr	r0, [pc, #228]	; (80020ac <main+0x148>)
 8001fc8:	f7ff f9c9 	bl	800135e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_4, GPIO_MODE_OUTPUT);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2103      	movs	r1, #3
 8001fd0:	4836      	ldr	r0, [pc, #216]	; (80020ac <main+0x148>)
 8001fd2:	f7ff f9c4 	bl	800135e <GPIOSetMode>

	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_1,GPIO_LOW);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4834      	ldr	r0, [pc, #208]	; (80020ac <main+0x148>)
 8001fdc:	f7ff fa02 	bl	80013e4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_2,GPIO_LOW);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4831      	ldr	r0, [pc, #196]	; (80020ac <main+0x148>)
 8001fe6:	f7ff f9fd 	bl	80013e4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_3,GPIO_LOW);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2102      	movs	r1, #2
 8001fee:	482f      	ldr	r0, [pc, #188]	; (80020ac <main+0x148>)
 8001ff0:	f7ff f9f8 	bl	80013e4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_4,GPIO_LOW);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	482c      	ldr	r0, [pc, #176]	; (80020ac <main+0x148>)
 8001ffa:	f7ff f9f3 	bl	80013e4 <GPIOWritePin>

	//GPIO Configuration for Rows of Matrix Keypad
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_1,EXTI_FALLING_TRIGGER,GPIO_ROW_1_IRQ_NUM);
 8001ffe:	2306      	movs	r3, #6
 8002000:	2201      	movs	r2, #1
 8002002:	2100      	movs	r1, #0
 8002004:	482a      	ldr	r0, [pc, #168]	; (80020b0 <main+0x14c>)
 8002006:	f7fe fe8b 	bl	8000d20 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_2,EXTI_FALLING_TRIGGER,GPIO_ROW_2_IRQ_NUM);
 800200a:	2307      	movs	r3, #7
 800200c:	2201      	movs	r2, #1
 800200e:	2101      	movs	r1, #1
 8002010:	4827      	ldr	r0, [pc, #156]	; (80020b0 <main+0x14c>)
 8002012:	f7fe fe85 	bl	8000d20 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_3,EXTI_FALLING_TRIGGER,GPIO_ROW_3_IRQ_NUM);
 8002016:	2308      	movs	r3, #8
 8002018:	2201      	movs	r2, #1
 800201a:	2102      	movs	r1, #2
 800201c:	4824      	ldr	r0, [pc, #144]	; (80020b0 <main+0x14c>)
 800201e:	f7fe fe7f 	bl	8000d20 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_4,EXTI_FALLING_TRIGGER,GPIO_ROW_4_IRQ_NUM);
 8002022:	2309      	movs	r3, #9
 8002024:	2201      	movs	r2, #1
 8002026:	2103      	movs	r1, #3
 8002028:	4821      	ldr	r0, [pc, #132]	; (80020b0 <main+0x14c>)
 800202a:	f7fe fe79 	bl	8000d20 <configure_external_gpio_interrupt>

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 800202e:	f7fe f9d1 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the parameters of the RTC
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 8002032:	463b      	mov	r3, r7
 8002034:	220f      	movs	r2, #15
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fc23 	bl	8002884 <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	703b      	strb	r3, [r7, #0]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	707b      	strb	r3, [r7, #1]
	ds3231_rtc_config.RTCClockMinutesUnits = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	70bb      	strb	r3, [r7, #2]
	ds3231_rtc_config.RTCClockMinutesTens = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	70fb      	strb	r3, [r7, #3]
	ds3231_rtc_config.RTCClockHoursUnits = 2;
 800204e:	2302      	movs	r3, #2
 8002050:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_config.RTCClockHoursTens = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002056:	2301      	movs	r3, #1
 8002058:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_config.RTCClockAMPM = DS3231_RTC_HOUR_PM;
 800205a:	2301      	movs	r3, #1
 800205c:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_config.RTCClockDateUnits = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_config.RTCClockDateTens = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_config.RTCClockMonthTens = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_config.RTCClockYearUnits = 4;
 800206e:	2304      	movs	r3, #4
 8002070:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_config.RTCClockYearTens = 2;
 8002072:	2302      	movs	r3, #2
 8002074:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_config.RTCClockDayOfWeek = RTC_CLK_DOW_THU;
 8002076:	2304      	movs	r3, #4
 8002078:	73bb      	strb	r3, [r7, #14]

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 800207a:	463b      	mov	r3, r7
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa1f 	bl	80004c0 <RTC_DS3231_Config_Calendar>
	delay_us(10000);
 8002082:	f242 7010 	movw	r0, #10000	; 0x2710
 8002086:	f7fe f903 	bl	8000290 <delay_us>

	while(1)
	{
		if(calculator_mode == 0)
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <main+0x150>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1fb      	bne.n	800208a <main+0x126>
		{
			disable_interrupts();
 8002092:	f000 faef 	bl	8002674 <disable_interrupts>
			update_clock();
 8002096:	f000 fadd 	bl	8002654 <update_clock>
			enable_interrupts();
 800209a:	f000 faf1 	bl	8002680 <enable_interrupts>
		if(calculator_mode == 0)
 800209e:	e7f4      	b.n	800208a <main+0x126>
 80020a0:	20000028 	.word	0x20000028
 80020a4:	000f4240 	.word	0x000f4240
 80020a8:	000186a0 	.word	0x000186a0
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	20000132 	.word	0x20000132

080020b8 <calculation>:

	return 0;
}

int calculation(uint8_t *buffer, uint8_t count)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
	int num1,num2,value,i,j,k,place_value;
	uint8_t operation;

	i=0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
	//Parsing the first number
	while(buffer[i]>=48 && buffer[i] <=57)
 80020c8:	e002      	b.n	80020d0 <calculation+0x18>
		i++;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
	while(buffer[i]>=48 && buffer[i] <=57)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b2f      	cmp	r3, #47	; 0x2f
 80020da:	d905      	bls.n	80020e8 <calculation+0x30>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b39      	cmp	r3, #57	; 0x39
 80020e6:	d9f0      	bls.n	80020ca <calculation+0x12>

	operation = buffer[i];
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	72fb      	strb	r3, [r7, #11]

	num1 = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e020      	b.n	8002140 <calculation+0x88>
	{
		place_value = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3b01      	subs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e008      	b.n	800211c <calculation+0x64>
			place_value *= 10;
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3b01      	subs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	dcf2      	bgt.n	800210a <calculation+0x52>
		num1 += (buffer[j]-48)*place_value;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3b30      	subs	r3, #48	; 0x30
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002136:	4413      	add	r3, r2
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3b01      	subs	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	dadb      	bge.n	80020fe <calculation+0x46>
	}

	//Parsing the second number
	num2 = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	3b02      	subs	r3, #2
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e020      	b.n	8002194 <calculation+0xdc>
	{
			place_value = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	3b02      	subs	r3, #2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e008      	b.n	8002170 <calculation+0xb8>
				place_value *= 10;
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	3b01      	subs	r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	dcf2      	bgt.n	800215e <calculation+0xa6>
			num2 += (buffer[j]-48)*place_value;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3b30      	subs	r3, #48	; 0x30
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	4413      	add	r3, r2
 800218c:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3b01      	subs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	429a      	cmp	r2, r3
 800219a:	dcda      	bgt.n	8002152 <calculation+0x9a>
	}

	switch(operation)
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	3b41      	subs	r3, #65	; 0x41
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d821      	bhi.n	80021e8 <calculation+0x130>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <calculation+0xf4>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021c7 	.word	0x080021c7
 80021b4:	080021d1 	.word	0x080021d1
 80021b8:	080021dd 	.word	0x080021dd
	{
		case 'A':
			value = num1 + num2;
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	4413      	add	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]
			break;
 80021c4:	e011      	b.n	80021ea <calculation+0x132>
		case 'B':
			value = num1 - num2;
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	61fb      	str	r3, [r7, #28]
			break;
 80021ce:	e00c      	b.n	80021ea <calculation+0x132>
		case 'C':
			value = num1 * num2;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	6a3a      	ldr	r2, [r7, #32]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	61fb      	str	r3, [r7, #28]
			break;
 80021da:	e006      	b.n	80021ea <calculation+0x132>
		case 'D':
			value = num1 / num2;
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]
			break;
 80021e6:	e000      	b.n	80021ea <calculation+0x132>
		default:
			break;
 80021e8:	bf00      	nop
	}

	return value;
 80021ea:	69fb      	ldr	r3, [r7, #28]

}
 80021ec:	4618      	mov	r0, r3
 80021ee:	372c      	adds	r7, #44	; 0x2c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <EXTI0_IRQHandler+0x98>)
 8002200:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=0;
 8002202:	2300      	movs	r3, #0
 8002204:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e02e      	b.n	800226a <EXTI0_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <EXTI0_IRQHandler+0x9c>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	2201      	movs	r2, #1
 8002214:	4619      	mov	r1, r3
 8002216:	4820      	ldr	r0, [pc, #128]	; (8002298 <EXTI0_IRQHandler+0xa0>)
 8002218:	f7ff f8e4 	bl	80013e4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <EXTI0_IRQHandler+0xa4>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	4619      	mov	r1, r3
 8002224:	481e      	ldr	r0, [pc, #120]	; (80022a0 <EXTI0_IRQHandler+0xa8>)
 8002226:	f7ff f8be 	bl	80013a6 <GPIOReadPin>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d111      	bne.n	8002254 <EXTI0_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 8002230:	79fa      	ldrb	r2, [r7, #7]
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	491b      	ldr	r1, [pc, #108]	; (80022a4 <EXTI0_IRQHandler+0xac>)
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	440a      	add	r2, r1
 800223a:	4413      	add	r3, r2
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <EXTI0_IRQHandler+0xb0>)
 8002240:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_1_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <EXTI0_IRQHandler+0x9c>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	4812      	ldr	r0, [pc, #72]	; (8002298 <EXTI0_IRQHandler+0xa0>)
 800224e:	f7ff f8c9 	bl	80013e4 <GPIOWritePin>

			break;
 8002252:	e00d      	b.n	8002270 <EXTI0_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <EXTI0_IRQHandler+0x9c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <EXTI0_IRQHandler+0xa0>)
 8002260:	f7ff f8c0 	bl	80013e4 <GPIOWritePin>
	for(col=0;col<4;col++)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	3301      	adds	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d9cd      	bls.n	800220c <EXTI0_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 8002270:	480e      	ldr	r0, [pc, #56]	; (80022ac <EXTI0_IRQHandler+0xb4>)
 8002272:	f7fe f80d 	bl	8000290 <delay_us>

	process_key_press();
 8002276:	f000 f92f 	bl	80024d8 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_1);		// Clearing the EXTI_PR Register
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_1_IRQ_NUM);

	return;
 8002286:	bf00      	nop
}
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40013c14 	.word	0x40013c14
 8002294:	20000010 	.word	0x20000010
 8002298:	40020800 	.word	0x40020800
 800229c:	20000014 	.word	0x20000014
 80022a0:	40020000 	.word	0x40020000
 80022a4:	20000018 	.word	0x20000018
 80022a8:	20000131 	.word	0x20000131
 80022ac:	0007a120 	.word	0x0007a120

080022b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <EXTI1_IRQHandler+0x98>)
 80022b8:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e02e      	b.n	8002322 <EXTI1_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4a21      	ldr	r2, [pc, #132]	; (800234c <EXTI1_IRQHandler+0x9c>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4619      	mov	r1, r3
 80022ce:	4820      	ldr	r0, [pc, #128]	; (8002350 <EXTI1_IRQHandler+0xa0>)
 80022d0:	f7ff f888 	bl	80013e4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <EXTI1_IRQHandler+0xa4>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	4619      	mov	r1, r3
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <EXTI1_IRQHandler+0xa8>)
 80022de:	f7ff f862 	bl	80013a6 <GPIOReadPin>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d111      	bne.n	800230c <EXTI1_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	491b      	ldr	r1, [pc, #108]	; (800235c <EXTI1_IRQHandler+0xac>)
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	440a      	add	r2, r1
 80022f2:	4413      	add	r3, r2
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <EXTI1_IRQHandler+0xb0>)
 80022f8:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_2_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <EXTI1_IRQHandler+0x9c>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	2200      	movs	r2, #0
 8002302:	4619      	mov	r1, r3
 8002304:	4812      	ldr	r0, [pc, #72]	; (8002350 <EXTI1_IRQHandler+0xa0>)
 8002306:	f7ff f86d 	bl	80013e4 <GPIOWritePin>

			break;
 800230a:	e00d      	b.n	8002328 <EXTI1_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <EXTI1_IRQHandler+0x9c>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	2200      	movs	r2, #0
 8002314:	4619      	mov	r1, r3
 8002316:	480e      	ldr	r0, [pc, #56]	; (8002350 <EXTI1_IRQHandler+0xa0>)
 8002318:	f7ff f864 	bl	80013e4 <GPIOWritePin>
	for(col=0;col<4;col++)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	3301      	adds	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d9cd      	bls.n	80022c4 <EXTI1_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 8002328:	480e      	ldr	r0, [pc, #56]	; (8002364 <EXTI1_IRQHandler+0xb4>)
 800232a:	f7fd ffb1 	bl	8000290 <delay_us>

	process_key_press();
 800232e:	f000 f8d3 	bl	80024d8 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_2);		// Clearing the EXTI_PR Register
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_2_IRQ_NUM);

	return;
 800233e:	bf00      	nop
}
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40013c14 	.word	0x40013c14
 800234c:	20000010 	.word	0x20000010
 8002350:	40020800 	.word	0x40020800
 8002354:	20000014 	.word	0x20000014
 8002358:	40020000 	.word	0x40020000
 800235c:	20000018 	.word	0x20000018
 8002360:	20000131 	.word	0x20000131
 8002364:	0007a120 	.word	0x0007a120

08002368 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <EXTI2_IRQHandler+0x98>)
 8002370:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=2;
 8002372:	2302      	movs	r3, #2
 8002374:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e02e      	b.n	80023da <EXTI2_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <EXTI2_IRQHandler+0x9c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	2201      	movs	r2, #1
 8002384:	4619      	mov	r1, r3
 8002386:	4820      	ldr	r0, [pc, #128]	; (8002408 <EXTI2_IRQHandler+0xa0>)
 8002388:	f7ff f82c 	bl	80013e4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <EXTI2_IRQHandler+0xa4>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	4619      	mov	r1, r3
 8002394:	481e      	ldr	r0, [pc, #120]	; (8002410 <EXTI2_IRQHandler+0xa8>)
 8002396:	f7ff f806 	bl	80013a6 <GPIOReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d111      	bne.n	80023c4 <EXTI2_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	491b      	ldr	r1, [pc, #108]	; (8002414 <EXTI2_IRQHandler+0xac>)
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	440a      	add	r2, r1
 80023aa:	4413      	add	r3, r2
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <EXTI2_IRQHandler+0xb0>)
 80023b0:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_3_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	4a13      	ldr	r2, [pc, #76]	; (8002404 <EXTI2_IRQHandler+0x9c>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4812      	ldr	r0, [pc, #72]	; (8002408 <EXTI2_IRQHandler+0xa0>)
 80023be:	f7ff f811 	bl	80013e4 <GPIOWritePin>

			break;
 80023c2:	e00d      	b.n	80023e0 <EXTI2_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <EXTI2_IRQHandler+0x9c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	480e      	ldr	r0, [pc, #56]	; (8002408 <EXTI2_IRQHandler+0xa0>)
 80023d0:	f7ff f808 	bl	80013e4 <GPIOWritePin>
	for(col=0;col<4;col++)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	3301      	adds	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d9cd      	bls.n	800237c <EXTI2_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 80023e0:	480e      	ldr	r0, [pc, #56]	; (800241c <EXTI2_IRQHandler+0xb4>)
 80023e2:	f7fd ff55 	bl	8000290 <delay_us>

	process_key_press();
 80023e6:	f000 f877 	bl	80024d8 <process_key_press>
	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_3);		// Clearing the EXTI_PR Register
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f043 0204 	orr.w	r2, r3, #4
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_3_IRQ_NUM);

	return;
 80023f6:	bf00      	nop
}
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40013c14 	.word	0x40013c14
 8002404:	20000010 	.word	0x20000010
 8002408:	40020800 	.word	0x40020800
 800240c:	20000014 	.word	0x20000014
 8002410:	40020000 	.word	0x40020000
 8002414:	20000018 	.word	0x20000018
 8002418:	20000131 	.word	0x20000131
 800241c:	0007a120 	.word	0x0007a120

08002420 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <EXTI3_IRQHandler+0x98>)
 8002428:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=3;
 800242a:	2303      	movs	r3, #3
 800242c:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e02e      	b.n	8002492 <EXTI3_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <EXTI3_IRQHandler+0x9c>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	2201      	movs	r2, #1
 800243c:	4619      	mov	r1, r3
 800243e:	4820      	ldr	r0, [pc, #128]	; (80024c0 <EXTI3_IRQHandler+0xa0>)
 8002440:	f7fe ffd0 	bl	80013e4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <EXTI3_IRQHandler+0xa4>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	4619      	mov	r1, r3
 800244c:	481e      	ldr	r0, [pc, #120]	; (80024c8 <EXTI3_IRQHandler+0xa8>)
 800244e:	f7fe ffaa 	bl	80013a6 <GPIOReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d111      	bne.n	800247c <EXTI3_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	491b      	ldr	r1, [pc, #108]	; (80024cc <EXTI3_IRQHandler+0xac>)
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	440a      	add	r2, r1
 8002462:	4413      	add	r3, r2
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <EXTI3_IRQHandler+0xb0>)
 8002468:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_4_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <EXTI3_IRQHandler+0x9c>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	2200      	movs	r2, #0
 8002472:	4619      	mov	r1, r3
 8002474:	4812      	ldr	r0, [pc, #72]	; (80024c0 <EXTI3_IRQHandler+0xa0>)
 8002476:	f7fe ffb5 	bl	80013e4 <GPIOWritePin>

			break;
 800247a:	e00d      	b.n	8002498 <EXTI3_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <EXTI3_IRQHandler+0x9c>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	2200      	movs	r2, #0
 8002484:	4619      	mov	r1, r3
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <EXTI3_IRQHandler+0xa0>)
 8002488:	f7fe ffac 	bl	80013e4 <GPIOWritePin>
	for(col=0;col<4;col++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d9cd      	bls.n	8002434 <EXTI3_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 8002498:	480e      	ldr	r0, [pc, #56]	; (80024d4 <EXTI3_IRQHandler+0xb4>)
 800249a:	f7fd fef9 	bl	8000290 <delay_us>

	process_key_press();
 800249e:	f000 f81b 	bl	80024d8 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_4);		// Clearing the EXTI_PR Register
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f043 0208 	orr.w	r2, r3, #8
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_4_IRQ_NUM);

	return;
 80024ae:	bf00      	nop
}
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40013c14 	.word	0x40013c14
 80024bc:	20000010 	.word	0x20000010
 80024c0:	40020800 	.word	0x40020800
 80024c4:	20000014 	.word	0x20000014
 80024c8:	40020000 	.word	0x40020000
 80024cc:	20000018 	.word	0x20000018
 80024d0:	20000131 	.word	0x20000131
 80024d4:	0007a120 	.word	0x0007a120

080024d8 <process_key_press>:

static void process_key_press(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
	uint8_t printed_c;
	int value;

	if(calculator_mode == 1)
 80024de:	4b57      	ldr	r3, [pc, #348]	; (800263c <process_key_press+0x164>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 8088 	bne.w	80025f8 <process_key_press+0x120>
	{
		char_buffer[char_count] = c;
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <process_key_press+0x168>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b55      	ldr	r3, [pc, #340]	; (8002644 <process_key_press+0x16c>)
 80024f0:	7819      	ldrb	r1, [r3, #0]
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <process_key_press+0x170>)
 80024f4:	5499      	strb	r1, [r3, r2]
		char_count++;
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <process_key_press+0x168>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <process_key_press+0x168>)
 8002500:	701a      	strb	r2, [r3, #0]

		if(c>=48 && c<=57)
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <process_key_press+0x16c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b2f      	cmp	r3, #47	; 0x2f
 8002508:	d90b      	bls.n	8002522 <process_key_press+0x4a>
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <process_key_press+0x16c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b39      	cmp	r3, #57	; 0x39
 8002510:	d807      	bhi.n	8002522 <process_key_press+0x4a>
		{
			printed_c = c;
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <process_key_press+0x16c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fab0 	bl	8002a80 <putchar>
			return;
 8002520:	e088      	b.n	8002634 <process_key_press+0x15c>
		}
		else
		{
			if(c == 'A')
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <process_key_press+0x16c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b41      	cmp	r3, #65	; 0x41
 8002528:	d106      	bne.n	8002538 <process_key_press+0x60>
			{
				printed_c = '+';
 800252a:	232b      	movs	r3, #43	; 0x2b
 800252c:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 faa5 	bl	8002a80 <putchar>
				return;
 8002536:	e07d      	b.n	8002634 <process_key_press+0x15c>
			}
			else if(c == 'B')
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <process_key_press+0x16c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b42      	cmp	r3, #66	; 0x42
 800253e:	d106      	bne.n	800254e <process_key_press+0x76>
			{
				printed_c = '-';
 8002540:	232d      	movs	r3, #45	; 0x2d
 8002542:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fa9a 	bl	8002a80 <putchar>
				return;
 800254c:	e072      	b.n	8002634 <process_key_press+0x15c>
			}
			else if(c == 'C')
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <process_key_press+0x16c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b43      	cmp	r3, #67	; 0x43
 8002554:	d115      	bne.n	8002582 <process_key_press+0xaa>
			{
				if(char_count != 1)
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <process_key_press+0x168>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d006      	beq.n	800256c <process_key_press+0x94>
				{
					printed_c = 'x';
 800255e:	2378      	movs	r3, #120	; 0x78
 8002560:	71fb      	strb	r3, [r7, #7]
					printf("%c", printed_c);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fa8b 	bl	8002a80 <putchar>
					return;
 800256a:	e063      	b.n	8002634 <process_key_press+0x15c>
				}
				else if(char_count == 1)
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <process_key_press+0x168>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d15f      	bne.n	8002634 <process_key_press+0x15c>
				{
					calculator_mode = 0;
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <process_key_press+0x164>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
					ds3231_display_count = 0;
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <process_key_press+0x174>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e058      	b.n	8002634 <process_key_press+0x15c>
				}
			}
			else if(c == 'D')
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <process_key_press+0x16c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b44      	cmp	r3, #68	; 0x44
 8002588:	d106      	bne.n	8002598 <process_key_press+0xc0>
			{
				printed_c = '/';
 800258a:	232f      	movs	r3, #47	; 0x2f
 800258c:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa75 	bl	8002a80 <putchar>
				return;
 8002596:	e04d      	b.n	8002634 <process_key_press+0x15c>
			}
			else if(c == '#')
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <process_key_press+0x16c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b23      	cmp	r3, #35	; 0x23
 800259e:	d114      	bne.n	80025ca <process_key_press+0xf2>
			{
				printed_c = '=';
 80025a0:	233d      	movs	r3, #61	; 0x3d
 80025a2:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fa6a 	bl	8002a80 <putchar>
				value = calculation(char_buffer,char_count);
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <process_key_press+0x168>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4825      	ldr	r0, [pc, #148]	; (8002648 <process_key_press+0x170>)
 80025b4:	f7ff fd80 	bl	80020b8 <calculation>
 80025b8:	6038      	str	r0, [r7, #0]
				printf("%d", value);
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	4824      	ldr	r0, [pc, #144]	; (8002650 <process_key_press+0x178>)
 80025be:	f000 fa47 	bl	8002a50 <iprintf>
				char_count = 0;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <process_key_press+0x168>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
				return;
 80025c8:	e034      	b.n	8002634 <process_key_press+0x15c>
			}
			else if(c == '*')
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <process_key_press+0x16c>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b2a      	cmp	r3, #42	; 0x2a
 80025d0:	d130      	bne.n	8002634 <process_key_press+0x15c>
			{
				char_count = 0;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <process_key_press+0x168>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
				lcd_pcf8574_clear_screen();
 80025d8:	f7ff fa80 	bl	8001adc <lcd_pcf8574_clear_screen>
				delay_us(3000);
 80025dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025e0:	f7fd fe56 	bl	8000290 <delay_us>
				lcd_pcf8574_return_home();
 80025e4:	f7ff fa81 	bl	8001aea <lcd_pcf8574_return_home>
				delay_us(3000);
 80025e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025ec:	f7fd fe50 	bl	8000290 <delay_us>
				printf(">");
 80025f0:	203e      	movs	r0, #62	; 0x3e
 80025f2:	f000 fa45 	bl	8002a80 <putchar>
				return;
 80025f6:	e01d      	b.n	8002634 <process_key_press+0x15c>
			}
		}
	}
	else if(calculator_mode == 0)
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <process_key_press+0x164>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d119      	bne.n	8002634 <process_key_press+0x15c>
	{
		if(c == '*')
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <process_key_press+0x16c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b2a      	cmp	r3, #42	; 0x2a
 8002606:	d115      	bne.n	8002634 <process_key_press+0x15c>
		{
			calculator_mode = 1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <process_key_press+0x164>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
			char_count = 0;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <process_key_press+0x168>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
			lcd_pcf8574_clear_screen();
 8002614:	f7ff fa62 	bl	8001adc <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8002618:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800261c:	f7fd fe38 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8002620:	f7ff fa63 	bl	8001aea <lcd_pcf8574_return_home>
			delay_us(3000);
 8002624:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002628:	f7fd fe32 	bl	8000290 <delay_us>
			printf(">");
 800262c:	203e      	movs	r0, #62	; 0x3e
 800262e:	f000 fa27 	bl	8002a80 <putchar>
			return;
 8002632:	bf00      	nop
		}
	}
}
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000132 	.word	0x20000132
 8002640:	20000130 	.word	0x20000130
 8002644:	20000131 	.word	0x20000131
 8002648:	200000e0 	.word	0x200000e0
 800264c:	200000dc 	.word	0x200000dc
 8002650:	08003acc 	.word	0x08003acc

08002654 <update_clock>:

static void update_clock(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	RTC_DS3231_Read_Calendar(&date,&time);
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <update_clock+0x18>)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <update_clock+0x1c>)
 800265c:	f7fd ffde 	bl	800061c <RTC_DS3231_Read_Calendar>
	RTC_DS3231_Display_Calendar_LCD(&date,&time);
 8002660:	4902      	ldr	r1, [pc, #8]	; (800266c <update_clock+0x18>)
 8002662:	4803      	ldr	r0, [pc, #12]	; (8002670 <update_clock+0x1c>)
 8002664:	f7fe f8aa 	bl	80007bc <RTC_DS3231_Display_Calendar_LCD>

	return;
 8002668:	bf00      	nop
}
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000138 	.word	0x20000138
 8002670:	20000134 	.word	0x20000134

08002674 <disable_interrupts>:

static void disable_interrupts(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

	return;
 8002678:	bf00      	nop
}
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <enable_interrupts>:

static void enable_interrupts(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

	return;
 8002684:	bf00      	nop
}
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00a      	b.n	80026b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269e:	f3af 8000 	nop.w
 80026a2:	4601      	mov	r1, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf0      	blt.n	800269e <_read+0x12>
  }

  return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e009      	b.n	80026ec <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fedf 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf1      	blt.n	80026d8 <_write+0x12>
  }
  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002724:	605a      	str	r2, [r3, #4]
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <_isatty>:

int _isatty(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002768:	4a14      	ldr	r2, [pc, #80]	; (80027bc <_sbrk+0x5c>)
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <_sbrk+0x60>)
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <_sbrk+0x64>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <_sbrk+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002790:	f000 f846 	bl	8002820 <__errno>
 8002794:	4603      	mov	r3, r0
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279e:	e009      	b.n	80027b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <_sbrk+0x64>)
 80027b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20020000 	.word	0x20020000
 80027c0:	00000400 	.word	0x00000400
 80027c4:	2000013c 	.word	0x2000013c
 80027c8:	20000150 	.word	0x20000150

080027cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopForever+0xe>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopForever+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027fa:	f000 f817 	bl	800282c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027fe:	f7ff fbb1 	bl	8001f64 <main>

08002802 <LoopForever>:

LoopForever:
  b LoopForever
 8002802:	e7fe      	b.n	8002802 <LoopForever>
  ldr   r0, =_estack
 8002804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002810:	08003b70 	.word	0x08003b70
  ldr r2, =_sbss
 8002814:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002818:	20000150 	.word	0x20000150

0800281c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <__errno>:
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <__errno+0x8>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000028 	.word	0x20000028

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4d0d      	ldr	r5, [pc, #52]	; (8002864 <__libc_init_array+0x38>)
 8002830:	4c0d      	ldr	r4, [pc, #52]	; (8002868 <__libc_init_array+0x3c>)
 8002832:	1b64      	subs	r4, r4, r5
 8002834:	10a4      	asrs	r4, r4, #2
 8002836:	2600      	movs	r6, #0
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	4d0b      	ldr	r5, [pc, #44]	; (800286c <__libc_init_array+0x40>)
 800283e:	4c0c      	ldr	r4, [pc, #48]	; (8002870 <__libc_init_array+0x44>)
 8002840:	f001 f8d8 	bl	80039f4 <_init>
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	2600      	movs	r6, #0
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f855 3b04 	ldr.w	r3, [r5], #4
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	f855 3b04 	ldr.w	r3, [r5], #4
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	08003b68 	.word	0x08003b68
 8002868:	08003b68 	.word	0x08003b68
 800286c:	08003b68 	.word	0x08003b68
 8002870:	08003b6c 	.word	0x08003b6c

08002874 <malloc>:
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <malloc+0xc>)
 8002876:	4601      	mov	r1, r0
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	f000 b875 	b.w	8002968 <_malloc_r>
 800287e:	bf00      	nop
 8002880:	20000028 	.word	0x20000028

08002884 <memset>:
 8002884:	4402      	add	r2, r0
 8002886:	4603      	mov	r3, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <_free_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4605      	mov	r5, r0
 8002898:	2900      	cmp	r1, #0
 800289a:	d041      	beq.n	8002920 <_free_r+0x8c>
 800289c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028a0:	1f0c      	subs	r4, r1, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bfb8      	it	lt
 80028a6:	18e4      	addlt	r4, r4, r3
 80028a8:	f000 fcb8 	bl	800321c <__malloc_lock>
 80028ac:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <_free_r+0x90>)
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	b933      	cbnz	r3, 80028c0 <_free_r+0x2c>
 80028b2:	6063      	str	r3, [r4, #4]
 80028b4:	6014      	str	r4, [r2, #0]
 80028b6:	4628      	mov	r0, r5
 80028b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028bc:	f000 bcb4 	b.w	8003228 <__malloc_unlock>
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	d908      	bls.n	80028d6 <_free_r+0x42>
 80028c4:	6820      	ldr	r0, [r4, #0]
 80028c6:	1821      	adds	r1, r4, r0
 80028c8:	428b      	cmp	r3, r1
 80028ca:	bf01      	itttt	eq
 80028cc:	6819      	ldreq	r1, [r3, #0]
 80028ce:	685b      	ldreq	r3, [r3, #4]
 80028d0:	1809      	addeq	r1, r1, r0
 80028d2:	6021      	streq	r1, [r4, #0]
 80028d4:	e7ed      	b.n	80028b2 <_free_r+0x1e>
 80028d6:	461a      	mov	r2, r3
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b10b      	cbz	r3, 80028e0 <_free_r+0x4c>
 80028dc:	42a3      	cmp	r3, r4
 80028de:	d9fa      	bls.n	80028d6 <_free_r+0x42>
 80028e0:	6811      	ldr	r1, [r2, #0]
 80028e2:	1850      	adds	r0, r2, r1
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d10b      	bne.n	8002900 <_free_r+0x6c>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	4401      	add	r1, r0
 80028ec:	1850      	adds	r0, r2, r1
 80028ee:	4283      	cmp	r3, r0
 80028f0:	6011      	str	r1, [r2, #0]
 80028f2:	d1e0      	bne.n	80028b6 <_free_r+0x22>
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	6053      	str	r3, [r2, #4]
 80028fa:	4401      	add	r1, r0
 80028fc:	6011      	str	r1, [r2, #0]
 80028fe:	e7da      	b.n	80028b6 <_free_r+0x22>
 8002900:	d902      	bls.n	8002908 <_free_r+0x74>
 8002902:	230c      	movs	r3, #12
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	e7d6      	b.n	80028b6 <_free_r+0x22>
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	1821      	adds	r1, r4, r0
 800290c:	428b      	cmp	r3, r1
 800290e:	bf04      	itt	eq
 8002910:	6819      	ldreq	r1, [r3, #0]
 8002912:	685b      	ldreq	r3, [r3, #4]
 8002914:	6063      	str	r3, [r4, #4]
 8002916:	bf04      	itt	eq
 8002918:	1809      	addeq	r1, r1, r0
 800291a:	6021      	streq	r1, [r4, #0]
 800291c:	6054      	str	r4, [r2, #4]
 800291e:	e7ca      	b.n	80028b6 <_free_r+0x22>
 8002920:	bd38      	pop	{r3, r4, r5, pc}
 8002922:	bf00      	nop
 8002924:	20000140 	.word	0x20000140

08002928 <sbrk_aligned>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4e0e      	ldr	r6, [pc, #56]	; (8002964 <sbrk_aligned+0x3c>)
 800292c:	460c      	mov	r4, r1
 800292e:	6831      	ldr	r1, [r6, #0]
 8002930:	4605      	mov	r5, r0
 8002932:	b911      	cbnz	r1, 800293a <sbrk_aligned+0x12>
 8002934:	f000 f8b8 	bl	8002aa8 <_sbrk_r>
 8002938:	6030      	str	r0, [r6, #0]
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 f8b3 	bl	8002aa8 <_sbrk_r>
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	d00a      	beq.n	800295c <sbrk_aligned+0x34>
 8002946:	1cc4      	adds	r4, r0, #3
 8002948:	f024 0403 	bic.w	r4, r4, #3
 800294c:	42a0      	cmp	r0, r4
 800294e:	d007      	beq.n	8002960 <sbrk_aligned+0x38>
 8002950:	1a21      	subs	r1, r4, r0
 8002952:	4628      	mov	r0, r5
 8002954:	f000 f8a8 	bl	8002aa8 <_sbrk_r>
 8002958:	3001      	adds	r0, #1
 800295a:	d101      	bne.n	8002960 <sbrk_aligned+0x38>
 800295c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002960:	4620      	mov	r0, r4
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	20000144 	.word	0x20000144

08002968 <_malloc_r>:
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	1ccd      	adds	r5, r1, #3
 800296e:	f025 0503 	bic.w	r5, r5, #3
 8002972:	3508      	adds	r5, #8
 8002974:	2d0c      	cmp	r5, #12
 8002976:	bf38      	it	cc
 8002978:	250c      	movcc	r5, #12
 800297a:	2d00      	cmp	r5, #0
 800297c:	4607      	mov	r7, r0
 800297e:	db01      	blt.n	8002984 <_malloc_r+0x1c>
 8002980:	42a9      	cmp	r1, r5
 8002982:	d905      	bls.n	8002990 <_malloc_r+0x28>
 8002984:	230c      	movs	r3, #12
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	2600      	movs	r6, #0
 800298a:	4630      	mov	r0, r6
 800298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002990:	4e2e      	ldr	r6, [pc, #184]	; (8002a4c <_malloc_r+0xe4>)
 8002992:	f000 fc43 	bl	800321c <__malloc_lock>
 8002996:	6833      	ldr	r3, [r6, #0]
 8002998:	461c      	mov	r4, r3
 800299a:	bb34      	cbnz	r4, 80029ea <_malloc_r+0x82>
 800299c:	4629      	mov	r1, r5
 800299e:	4638      	mov	r0, r7
 80029a0:	f7ff ffc2 	bl	8002928 <sbrk_aligned>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	4604      	mov	r4, r0
 80029a8:	d14d      	bne.n	8002a46 <_malloc_r+0xde>
 80029aa:	6834      	ldr	r4, [r6, #0]
 80029ac:	4626      	mov	r6, r4
 80029ae:	2e00      	cmp	r6, #0
 80029b0:	d140      	bne.n	8002a34 <_malloc_r+0xcc>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	4631      	mov	r1, r6
 80029b6:	4638      	mov	r0, r7
 80029b8:	eb04 0803 	add.w	r8, r4, r3
 80029bc:	f000 f874 	bl	8002aa8 <_sbrk_r>
 80029c0:	4580      	cmp	r8, r0
 80029c2:	d13a      	bne.n	8002a3a <_malloc_r+0xd2>
 80029c4:	6821      	ldr	r1, [r4, #0]
 80029c6:	3503      	adds	r5, #3
 80029c8:	1a6d      	subs	r5, r5, r1
 80029ca:	f025 0503 	bic.w	r5, r5, #3
 80029ce:	3508      	adds	r5, #8
 80029d0:	2d0c      	cmp	r5, #12
 80029d2:	bf38      	it	cc
 80029d4:	250c      	movcc	r5, #12
 80029d6:	4629      	mov	r1, r5
 80029d8:	4638      	mov	r0, r7
 80029da:	f7ff ffa5 	bl	8002928 <sbrk_aligned>
 80029de:	3001      	adds	r0, #1
 80029e0:	d02b      	beq.n	8002a3a <_malloc_r+0xd2>
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	442b      	add	r3, r5
 80029e6:	6023      	str	r3, [r4, #0]
 80029e8:	e00e      	b.n	8002a08 <_malloc_r+0xa0>
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	1b52      	subs	r2, r2, r5
 80029ee:	d41e      	bmi.n	8002a2e <_malloc_r+0xc6>
 80029f0:	2a0b      	cmp	r2, #11
 80029f2:	d916      	bls.n	8002a22 <_malloc_r+0xba>
 80029f4:	1961      	adds	r1, r4, r5
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	6025      	str	r5, [r4, #0]
 80029fa:	bf18      	it	ne
 80029fc:	6059      	strne	r1, [r3, #4]
 80029fe:	6863      	ldr	r3, [r4, #4]
 8002a00:	bf08      	it	eq
 8002a02:	6031      	streq	r1, [r6, #0]
 8002a04:	5162      	str	r2, [r4, r5]
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f104 060b 	add.w	r6, r4, #11
 8002a0e:	f000 fc0b 	bl	8003228 <__malloc_unlock>
 8002a12:	f026 0607 	bic.w	r6, r6, #7
 8002a16:	1d23      	adds	r3, r4, #4
 8002a18:	1af2      	subs	r2, r6, r3
 8002a1a:	d0b6      	beq.n	800298a <_malloc_r+0x22>
 8002a1c:	1b9b      	subs	r3, r3, r6
 8002a1e:	50a3      	str	r3, [r4, r2]
 8002a20:	e7b3      	b.n	800298a <_malloc_r+0x22>
 8002a22:	6862      	ldr	r2, [r4, #4]
 8002a24:	42a3      	cmp	r3, r4
 8002a26:	bf0c      	ite	eq
 8002a28:	6032      	streq	r2, [r6, #0]
 8002a2a:	605a      	strne	r2, [r3, #4]
 8002a2c:	e7ec      	b.n	8002a08 <_malloc_r+0xa0>
 8002a2e:	4623      	mov	r3, r4
 8002a30:	6864      	ldr	r4, [r4, #4]
 8002a32:	e7b2      	b.n	800299a <_malloc_r+0x32>
 8002a34:	4634      	mov	r4, r6
 8002a36:	6876      	ldr	r6, [r6, #4]
 8002a38:	e7b9      	b.n	80029ae <_malloc_r+0x46>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f000 fbf2 	bl	8003228 <__malloc_unlock>
 8002a44:	e7a1      	b.n	800298a <_malloc_r+0x22>
 8002a46:	6025      	str	r5, [r4, #0]
 8002a48:	e7de      	b.n	8002a08 <_malloc_r+0xa0>
 8002a4a:	bf00      	nop
 8002a4c:	20000140 	.word	0x20000140

08002a50 <iprintf>:
 8002a50:	b40f      	push	{r0, r1, r2, r3}
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <iprintf+0x2c>)
 8002a54:	b513      	push	{r0, r1, r4, lr}
 8002a56:	681c      	ldr	r4, [r3, #0]
 8002a58:	b124      	cbz	r4, 8002a64 <iprintf+0x14>
 8002a5a:	69a3      	ldr	r3, [r4, #24]
 8002a5c:	b913      	cbnz	r3, 8002a64 <iprintf+0x14>
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f000 fad6 	bl	8003010 <__sinit>
 8002a64:	ab05      	add	r3, sp, #20
 8002a66:	9a04      	ldr	r2, [sp, #16]
 8002a68:	68a1      	ldr	r1, [r4, #8]
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f000 fc09 	bl	8003284 <_vfiprintf_r>
 8002a72:	b002      	add	sp, #8
 8002a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a78:	b004      	add	sp, #16
 8002a7a:	4770      	bx	lr
 8002a7c:	20000028 	.word	0x20000028

08002a80 <putchar>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <putchar+0x24>)
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	4605      	mov	r5, r0
 8002a88:	b124      	cbz	r4, 8002a94 <putchar+0x14>
 8002a8a:	69a3      	ldr	r3, [r4, #24]
 8002a8c:	b913      	cbnz	r3, 8002a94 <putchar+0x14>
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 fabe 	bl	8003010 <__sinit>
 8002a94:	68a2      	ldr	r2, [r4, #8]
 8002a96:	4629      	mov	r1, r5
 8002a98:	4620      	mov	r0, r4
 8002a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a9e:	f000 beb5 	b.w	800380c <_putc_r>
 8002aa2:	bf00      	nop
 8002aa4:	20000028 	.word	0x20000028

08002aa8 <_sbrk_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4d06      	ldr	r5, [pc, #24]	; (8002ac4 <_sbrk_r+0x1c>)
 8002aac:	2300      	movs	r3, #0
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	602b      	str	r3, [r5, #0]
 8002ab4:	f7ff fe54 	bl	8002760 <_sbrk>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d102      	bne.n	8002ac2 <_sbrk_r+0x1a>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b103      	cbz	r3, 8002ac2 <_sbrk_r+0x1a>
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	bd38      	pop	{r3, r4, r5, pc}
 8002ac4:	2000014c 	.word	0x2000014c

08002ac8 <setbuf>:
 8002ac8:	2900      	cmp	r1, #0
 8002aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ace:	bf0c      	ite	eq
 8002ad0:	2202      	moveq	r2, #2
 8002ad2:	2200      	movne	r2, #0
 8002ad4:	f000 b800 	b.w	8002ad8 <setvbuf>

08002ad8 <setvbuf>:
 8002ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002adc:	461d      	mov	r5, r3
 8002ade:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <setvbuf+0x17c>)
 8002ae0:	681f      	ldr	r7, [r3, #0]
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460e      	mov	r6, r1
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	b127      	cbz	r7, 8002af4 <setvbuf+0x1c>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	b913      	cbnz	r3, 8002af4 <setvbuf+0x1c>
 8002aee:	4638      	mov	r0, r7
 8002af0:	f000 fa8e 	bl	8003010 <__sinit>
 8002af4:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <setvbuf+0x180>)
 8002af6:	429c      	cmp	r4, r3
 8002af8:	d167      	bne.n	8002bca <setvbuf+0xf2>
 8002afa:	687c      	ldr	r4, [r7, #4]
 8002afc:	f1b8 0f02 	cmp.w	r8, #2
 8002b00:	d006      	beq.n	8002b10 <setvbuf+0x38>
 8002b02:	f1b8 0f01 	cmp.w	r8, #1
 8002b06:	f200 809f 	bhi.w	8002c48 <setvbuf+0x170>
 8002b0a:	2d00      	cmp	r5, #0
 8002b0c:	f2c0 809c 	blt.w	8002c48 <setvbuf+0x170>
 8002b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b12:	07db      	lsls	r3, r3, #31
 8002b14:	d405      	bmi.n	8002b22 <setvbuf+0x4a>
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	0598      	lsls	r0, r3, #22
 8002b1a:	d402      	bmi.n	8002b22 <setvbuf+0x4a>
 8002b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b1e:	f000 fb15 	bl	800314c <__retarget_lock_acquire_recursive>
 8002b22:	4621      	mov	r1, r4
 8002b24:	4638      	mov	r0, r7
 8002b26:	f000 f9df 	bl	8002ee8 <_fflush_r>
 8002b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b2c:	b141      	cbz	r1, 8002b40 <setvbuf+0x68>
 8002b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b32:	4299      	cmp	r1, r3
 8002b34:	d002      	beq.n	8002b3c <setvbuf+0x64>
 8002b36:	4638      	mov	r0, r7
 8002b38:	f7ff feac 	bl	8002894 <_free_r>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6363      	str	r3, [r4, #52]	; 0x34
 8002b40:	2300      	movs	r3, #0
 8002b42:	61a3      	str	r3, [r4, #24]
 8002b44:	6063      	str	r3, [r4, #4]
 8002b46:	89a3      	ldrh	r3, [r4, #12]
 8002b48:	0619      	lsls	r1, r3, #24
 8002b4a:	d503      	bpl.n	8002b54 <setvbuf+0x7c>
 8002b4c:	6921      	ldr	r1, [r4, #16]
 8002b4e:	4638      	mov	r0, r7
 8002b50:	f7ff fea0 	bl	8002894 <_free_r>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f1b8 0f02 	cmp.w	r8, #2
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	d06c      	beq.n	8002c40 <setvbuf+0x168>
 8002b66:	ab01      	add	r3, sp, #4
 8002b68:	466a      	mov	r2, sp
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f000 faef 	bl	8003150 <__swhatbuf_r>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	4318      	orrs	r0, r3
 8002b76:	81a0      	strh	r0, [r4, #12]
 8002b78:	2d00      	cmp	r5, #0
 8002b7a:	d130      	bne.n	8002bde <setvbuf+0x106>
 8002b7c:	9d00      	ldr	r5, [sp, #0]
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f7ff fe78 	bl	8002874 <malloc>
 8002b84:	4606      	mov	r6, r0
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d155      	bne.n	8002c36 <setvbuf+0x15e>
 8002b8a:	f8dd 9000 	ldr.w	r9, [sp]
 8002b8e:	45a9      	cmp	r9, r5
 8002b90:	d14a      	bne.n	8002c28 <setvbuf+0x150>
 8002b92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002b96:	2200      	movs	r2, #0
 8002b98:	60a2      	str	r2, [r4, #8]
 8002b9a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002b9e:	6022      	str	r2, [r4, #0]
 8002ba0:	6122      	str	r2, [r4, #16]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba8:	6162      	str	r2, [r4, #20]
 8002baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	07d2      	lsls	r2, r2, #31
 8002bb2:	81a3      	strh	r3, [r4, #12]
 8002bb4:	d405      	bmi.n	8002bc2 <setvbuf+0xea>
 8002bb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002bba:	d102      	bne.n	8002bc2 <setvbuf+0xea>
 8002bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bbe:	f000 fac6 	bl	800314e <__retarget_lock_release_recursive>
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	b003      	add	sp, #12
 8002bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <setvbuf+0x184>)
 8002bcc:	429c      	cmp	r4, r3
 8002bce:	d101      	bne.n	8002bd4 <setvbuf+0xfc>
 8002bd0:	68bc      	ldr	r4, [r7, #8]
 8002bd2:	e793      	b.n	8002afc <setvbuf+0x24>
 8002bd4:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <setvbuf+0x188>)
 8002bd6:	429c      	cmp	r4, r3
 8002bd8:	bf08      	it	eq
 8002bda:	68fc      	ldreq	r4, [r7, #12]
 8002bdc:	e78e      	b.n	8002afc <setvbuf+0x24>
 8002bde:	2e00      	cmp	r6, #0
 8002be0:	d0cd      	beq.n	8002b7e <setvbuf+0xa6>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	b913      	cbnz	r3, 8002bec <setvbuf+0x114>
 8002be6:	4638      	mov	r0, r7
 8002be8:	f000 fa12 	bl	8003010 <__sinit>
 8002bec:	f1b8 0f01 	cmp.w	r8, #1
 8002bf0:	bf08      	it	eq
 8002bf2:	89a3      	ldrheq	r3, [r4, #12]
 8002bf4:	6026      	str	r6, [r4, #0]
 8002bf6:	bf04      	itt	eq
 8002bf8:	f043 0301 	orreq.w	r3, r3, #1
 8002bfc:	81a3      	strheq	r3, [r4, #12]
 8002bfe:	89a2      	ldrh	r2, [r4, #12]
 8002c00:	f012 0308 	ands.w	r3, r2, #8
 8002c04:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002c08:	d01c      	beq.n	8002c44 <setvbuf+0x16c>
 8002c0a:	07d3      	lsls	r3, r2, #31
 8002c0c:	bf41      	itttt	mi
 8002c0e:	2300      	movmi	r3, #0
 8002c10:	426d      	negmi	r5, r5
 8002c12:	60a3      	strmi	r3, [r4, #8]
 8002c14:	61a5      	strmi	r5, [r4, #24]
 8002c16:	bf58      	it	pl
 8002c18:	60a5      	strpl	r5, [r4, #8]
 8002c1a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002c1c:	f015 0501 	ands.w	r5, r5, #1
 8002c20:	d115      	bne.n	8002c4e <setvbuf+0x176>
 8002c22:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002c26:	e7c8      	b.n	8002bba <setvbuf+0xe2>
 8002c28:	4648      	mov	r0, r9
 8002c2a:	f7ff fe23 	bl	8002874 <malloc>
 8002c2e:	4606      	mov	r6, r0
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d0ae      	beq.n	8002b92 <setvbuf+0xba>
 8002c34:	464d      	mov	r5, r9
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	e7d0      	b.n	8002be2 <setvbuf+0x10a>
 8002c40:	2500      	movs	r5, #0
 8002c42:	e7a8      	b.n	8002b96 <setvbuf+0xbe>
 8002c44:	60a3      	str	r3, [r4, #8]
 8002c46:	e7e8      	b.n	8002c1a <setvbuf+0x142>
 8002c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c4c:	e7b9      	b.n	8002bc2 <setvbuf+0xea>
 8002c4e:	2500      	movs	r5, #0
 8002c50:	e7b7      	b.n	8002bc2 <setvbuf+0xea>
 8002c52:	bf00      	nop
 8002c54:	20000028 	.word	0x20000028
 8002c58:	08003af4 	.word	0x08003af4
 8002c5c:	08003b14 	.word	0x08003b14
 8002c60:	08003ad4 	.word	0x08003ad4

08002c64 <__swbuf_r>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	460e      	mov	r6, r1
 8002c68:	4614      	mov	r4, r2
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	b118      	cbz	r0, 8002c76 <__swbuf_r+0x12>
 8002c6e:	6983      	ldr	r3, [r0, #24]
 8002c70:	b90b      	cbnz	r3, 8002c76 <__swbuf_r+0x12>
 8002c72:	f000 f9cd 	bl	8003010 <__sinit>
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <__swbuf_r+0x98>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	d12b      	bne.n	8002cd4 <__swbuf_r+0x70>
 8002c7c:	686c      	ldr	r4, [r5, #4]
 8002c7e:	69a3      	ldr	r3, [r4, #24]
 8002c80:	60a3      	str	r3, [r4, #8]
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	071a      	lsls	r2, r3, #28
 8002c86:	d52f      	bpl.n	8002ce8 <__swbuf_r+0x84>
 8002c88:	6923      	ldr	r3, [r4, #16]
 8002c8a:	b36b      	cbz	r3, 8002ce8 <__swbuf_r+0x84>
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	6820      	ldr	r0, [r4, #0]
 8002c90:	1ac0      	subs	r0, r0, r3
 8002c92:	6963      	ldr	r3, [r4, #20]
 8002c94:	b2f6      	uxtb	r6, r6
 8002c96:	4283      	cmp	r3, r0
 8002c98:	4637      	mov	r7, r6
 8002c9a:	dc04      	bgt.n	8002ca6 <__swbuf_r+0x42>
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f000 f922 	bl	8002ee8 <_fflush_r>
 8002ca4:	bb30      	cbnz	r0, 8002cf4 <__swbuf_r+0x90>
 8002ca6:	68a3      	ldr	r3, [r4, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60a3      	str	r3, [r4, #8]
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	6022      	str	r2, [r4, #0]
 8002cb2:	701e      	strb	r6, [r3, #0]
 8002cb4:	6963      	ldr	r3, [r4, #20]
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	4283      	cmp	r3, r0
 8002cba:	d004      	beq.n	8002cc6 <__swbuf_r+0x62>
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	07db      	lsls	r3, r3, #31
 8002cc0:	d506      	bpl.n	8002cd0 <__swbuf_r+0x6c>
 8002cc2:	2e0a      	cmp	r6, #10
 8002cc4:	d104      	bne.n	8002cd0 <__swbuf_r+0x6c>
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f000 f90d 	bl	8002ee8 <_fflush_r>
 8002cce:	b988      	cbnz	r0, 8002cf4 <__swbuf_r+0x90>
 8002cd0:	4638      	mov	r0, r7
 8002cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <__swbuf_r+0x9c>)
 8002cd6:	429c      	cmp	r4, r3
 8002cd8:	d101      	bne.n	8002cde <__swbuf_r+0x7a>
 8002cda:	68ac      	ldr	r4, [r5, #8]
 8002cdc:	e7cf      	b.n	8002c7e <__swbuf_r+0x1a>
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <__swbuf_r+0xa0>)
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	bf08      	it	eq
 8002ce4:	68ec      	ldreq	r4, [r5, #12]
 8002ce6:	e7ca      	b.n	8002c7e <__swbuf_r+0x1a>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 f80c 	bl	8002d08 <__swsetup_r>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d0cb      	beq.n	8002c8c <__swbuf_r+0x28>
 8002cf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002cf8:	e7ea      	b.n	8002cd0 <__swbuf_r+0x6c>
 8002cfa:	bf00      	nop
 8002cfc:	08003af4 	.word	0x08003af4
 8002d00:	08003b14 	.word	0x08003b14
 8002d04:	08003ad4 	.word	0x08003ad4

08002d08 <__swsetup_r>:
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <__swsetup_r+0xcc>)
 8002d0a:	b570      	push	{r4, r5, r6, lr}
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	4606      	mov	r6, r0
 8002d10:	460c      	mov	r4, r1
 8002d12:	b125      	cbz	r5, 8002d1e <__swsetup_r+0x16>
 8002d14:	69ab      	ldr	r3, [r5, #24]
 8002d16:	b913      	cbnz	r3, 8002d1e <__swsetup_r+0x16>
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 f979 	bl	8003010 <__sinit>
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <__swsetup_r+0xd0>)
 8002d20:	429c      	cmp	r4, r3
 8002d22:	d10f      	bne.n	8002d44 <__swsetup_r+0x3c>
 8002d24:	686c      	ldr	r4, [r5, #4]
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d2c:	0719      	lsls	r1, r3, #28
 8002d2e:	d42c      	bmi.n	8002d8a <__swsetup_r+0x82>
 8002d30:	06dd      	lsls	r5, r3, #27
 8002d32:	d411      	bmi.n	8002d58 <__swsetup_r+0x50>
 8002d34:	2309      	movs	r3, #9
 8002d36:	6033      	str	r3, [r6, #0]
 8002d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d3c:	81a3      	strh	r3, [r4, #12]
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d42:	e03e      	b.n	8002dc2 <__swsetup_r+0xba>
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <__swsetup_r+0xd4>)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d101      	bne.n	8002d4e <__swsetup_r+0x46>
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	e7eb      	b.n	8002d26 <__swsetup_r+0x1e>
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <__swsetup_r+0xd8>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	bf08      	it	eq
 8002d54:	68ec      	ldreq	r4, [r5, #12]
 8002d56:	e7e6      	b.n	8002d26 <__swsetup_r+0x1e>
 8002d58:	0758      	lsls	r0, r3, #29
 8002d5a:	d512      	bpl.n	8002d82 <__swsetup_r+0x7a>
 8002d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d5e:	b141      	cbz	r1, 8002d72 <__swsetup_r+0x6a>
 8002d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d64:	4299      	cmp	r1, r3
 8002d66:	d002      	beq.n	8002d6e <__swsetup_r+0x66>
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f7ff fd93 	bl	8002894 <_free_r>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6363      	str	r3, [r4, #52]	; 0x34
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6063      	str	r3, [r4, #4]
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	6923      	ldr	r3, [r4, #16]
 8002d8c:	b94b      	cbnz	r3, 8002da2 <__swsetup_r+0x9a>
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d003      	beq.n	8002da2 <__swsetup_r+0x9a>
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	f000 f9fd 	bl	800319c <__smakebuf_r>
 8002da2:	89a0      	ldrh	r0, [r4, #12]
 8002da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002da8:	f010 0301 	ands.w	r3, r0, #1
 8002dac:	d00a      	beq.n	8002dc4 <__swsetup_r+0xbc>
 8002dae:	2300      	movs	r3, #0
 8002db0:	60a3      	str	r3, [r4, #8]
 8002db2:	6963      	ldr	r3, [r4, #20]
 8002db4:	425b      	negs	r3, r3
 8002db6:	61a3      	str	r3, [r4, #24]
 8002db8:	6923      	ldr	r3, [r4, #16]
 8002dba:	b943      	cbnz	r3, 8002dce <__swsetup_r+0xc6>
 8002dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002dc0:	d1ba      	bne.n	8002d38 <__swsetup_r+0x30>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	0781      	lsls	r1, r0, #30
 8002dc6:	bf58      	it	pl
 8002dc8:	6963      	ldrpl	r3, [r4, #20]
 8002dca:	60a3      	str	r3, [r4, #8]
 8002dcc:	e7f4      	b.n	8002db8 <__swsetup_r+0xb0>
 8002dce:	2000      	movs	r0, #0
 8002dd0:	e7f7      	b.n	8002dc2 <__swsetup_r+0xba>
 8002dd2:	bf00      	nop
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	08003af4 	.word	0x08003af4
 8002ddc:	08003b14 	.word	0x08003b14
 8002de0:	08003ad4 	.word	0x08003ad4

08002de4 <__sflush_r>:
 8002de4:	898a      	ldrh	r2, [r1, #12]
 8002de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de8:	4605      	mov	r5, r0
 8002dea:	0710      	lsls	r0, r2, #28
 8002dec:	460c      	mov	r4, r1
 8002dee:	d457      	bmi.n	8002ea0 <__sflush_r+0xbc>
 8002df0:	684b      	ldr	r3, [r1, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dc04      	bgt.n	8002e00 <__sflush_r+0x1c>
 8002df6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dc01      	bgt.n	8002e00 <__sflush_r+0x1c>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e02:	2e00      	cmp	r6, #0
 8002e04:	d0fa      	beq.n	8002dfc <__sflush_r+0x18>
 8002e06:	2300      	movs	r3, #0
 8002e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e0c:	682f      	ldr	r7, [r5, #0]
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	d032      	beq.n	8002e78 <__sflush_r+0x94>
 8002e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e14:	89a3      	ldrh	r3, [r4, #12]
 8002e16:	075a      	lsls	r2, r3, #29
 8002e18:	d505      	bpl.n	8002e26 <__sflush_r+0x42>
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	1ac0      	subs	r0, r0, r3
 8002e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e20:	b10b      	cbz	r3, 8002e26 <__sflush_r+0x42>
 8002e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e24:	1ac0      	subs	r0, r0, r3
 8002e26:	2300      	movs	r3, #0
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e2c:	6a21      	ldr	r1, [r4, #32]
 8002e2e:	4628      	mov	r0, r5
 8002e30:	47b0      	blx	r6
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	d106      	bne.n	8002e46 <__sflush_r+0x62>
 8002e38:	6829      	ldr	r1, [r5, #0]
 8002e3a:	291d      	cmp	r1, #29
 8002e3c:	d82c      	bhi.n	8002e98 <__sflush_r+0xb4>
 8002e3e:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <__sflush_r+0x100>)
 8002e40:	40ca      	lsrs	r2, r1
 8002e42:	07d6      	lsls	r6, r2, #31
 8002e44:	d528      	bpl.n	8002e98 <__sflush_r+0xb4>
 8002e46:	2200      	movs	r2, #0
 8002e48:	6062      	str	r2, [r4, #4]
 8002e4a:	04d9      	lsls	r1, r3, #19
 8002e4c:	6922      	ldr	r2, [r4, #16]
 8002e4e:	6022      	str	r2, [r4, #0]
 8002e50:	d504      	bpl.n	8002e5c <__sflush_r+0x78>
 8002e52:	1c42      	adds	r2, r0, #1
 8002e54:	d101      	bne.n	8002e5a <__sflush_r+0x76>
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	b903      	cbnz	r3, 8002e5c <__sflush_r+0x78>
 8002e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5e:	602f      	str	r7, [r5, #0]
 8002e60:	2900      	cmp	r1, #0
 8002e62:	d0cb      	beq.n	8002dfc <__sflush_r+0x18>
 8002e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e68:	4299      	cmp	r1, r3
 8002e6a:	d002      	beq.n	8002e72 <__sflush_r+0x8e>
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f7ff fd11 	bl	8002894 <_free_r>
 8002e72:	2000      	movs	r0, #0
 8002e74:	6360      	str	r0, [r4, #52]	; 0x34
 8002e76:	e7c2      	b.n	8002dfe <__sflush_r+0x1a>
 8002e78:	6a21      	ldr	r1, [r4, #32]
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	47b0      	blx	r6
 8002e80:	1c41      	adds	r1, r0, #1
 8002e82:	d1c7      	bne.n	8002e14 <__sflush_r+0x30>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0c4      	beq.n	8002e14 <__sflush_r+0x30>
 8002e8a:	2b1d      	cmp	r3, #29
 8002e8c:	d001      	beq.n	8002e92 <__sflush_r+0xae>
 8002e8e:	2b16      	cmp	r3, #22
 8002e90:	d101      	bne.n	8002e96 <__sflush_r+0xb2>
 8002e92:	602f      	str	r7, [r5, #0]
 8002e94:	e7b2      	b.n	8002dfc <__sflush_r+0x18>
 8002e96:	89a3      	ldrh	r3, [r4, #12]
 8002e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	e7ae      	b.n	8002dfe <__sflush_r+0x1a>
 8002ea0:	690f      	ldr	r7, [r1, #16]
 8002ea2:	2f00      	cmp	r7, #0
 8002ea4:	d0aa      	beq.n	8002dfc <__sflush_r+0x18>
 8002ea6:	0793      	lsls	r3, r2, #30
 8002ea8:	680e      	ldr	r6, [r1, #0]
 8002eaa:	bf08      	it	eq
 8002eac:	694b      	ldreq	r3, [r1, #20]
 8002eae:	600f      	str	r7, [r1, #0]
 8002eb0:	bf18      	it	ne
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	1bf6      	subs	r6, r6, r7
 8002eb6:	608b      	str	r3, [r1, #8]
 8002eb8:	2e00      	cmp	r6, #0
 8002eba:	dd9f      	ble.n	8002dfc <__sflush_r+0x18>
 8002ebc:	6a21      	ldr	r1, [r4, #32]
 8002ebe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ec2:	4633      	mov	r3, r6
 8002ec4:	463a      	mov	r2, r7
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	47e0      	blx	ip
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	dc06      	bgt.n	8002edc <__sflush_r+0xf8>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed4:	81a3      	strh	r3, [r4, #12]
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eda:	e790      	b.n	8002dfe <__sflush_r+0x1a>
 8002edc:	4407      	add	r7, r0
 8002ede:	1a36      	subs	r6, r6, r0
 8002ee0:	e7ea      	b.n	8002eb8 <__sflush_r+0xd4>
 8002ee2:	bf00      	nop
 8002ee4:	20400001 	.word	0x20400001

08002ee8 <_fflush_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	690b      	ldr	r3, [r1, #16]
 8002eec:	4605      	mov	r5, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b913      	cbnz	r3, 8002ef8 <_fflush_r+0x10>
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	b118      	cbz	r0, 8002f02 <_fflush_r+0x1a>
 8002efa:	6983      	ldr	r3, [r0, #24]
 8002efc:	b90b      	cbnz	r3, 8002f02 <_fflush_r+0x1a>
 8002efe:	f000 f887 	bl	8003010 <__sinit>
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <_fflush_r+0x6c>)
 8002f04:	429c      	cmp	r4, r3
 8002f06:	d11b      	bne.n	8002f40 <_fflush_r+0x58>
 8002f08:	686c      	ldr	r4, [r5, #4]
 8002f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <_fflush_r+0xa>
 8002f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f14:	07d0      	lsls	r0, r2, #31
 8002f16:	d404      	bmi.n	8002f22 <_fflush_r+0x3a>
 8002f18:	0599      	lsls	r1, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_fflush_r+0x3a>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f000 f915 	bl	800314c <__retarget_lock_acquire_recursive>
 8002f22:	4628      	mov	r0, r5
 8002f24:	4621      	mov	r1, r4
 8002f26:	f7ff ff5d 	bl	8002de4 <__sflush_r>
 8002f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f2c:	07da      	lsls	r2, r3, #31
 8002f2e:	4605      	mov	r5, r0
 8002f30:	d4e0      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	059b      	lsls	r3, r3, #22
 8002f36:	d4dd      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f000 f908 	bl	800314e <__retarget_lock_release_recursive>
 8002f3e:	e7d9      	b.n	8002ef4 <_fflush_r+0xc>
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <_fflush_r+0x70>)
 8002f42:	429c      	cmp	r4, r3
 8002f44:	d101      	bne.n	8002f4a <_fflush_r+0x62>
 8002f46:	68ac      	ldr	r4, [r5, #8]
 8002f48:	e7df      	b.n	8002f0a <_fflush_r+0x22>
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <_fflush_r+0x74>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	bf08      	it	eq
 8002f50:	68ec      	ldreq	r4, [r5, #12]
 8002f52:	e7da      	b.n	8002f0a <_fflush_r+0x22>
 8002f54:	08003af4 	.word	0x08003af4
 8002f58:	08003b14 	.word	0x08003b14
 8002f5c:	08003ad4 	.word	0x08003ad4

08002f60 <std>:
 8002f60:	2300      	movs	r3, #0
 8002f62:	b510      	push	{r4, lr}
 8002f64:	4604      	mov	r4, r0
 8002f66:	e9c0 3300 	strd	r3, r3, [r0]
 8002f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f6e:	6083      	str	r3, [r0, #8]
 8002f70:	8181      	strh	r1, [r0, #12]
 8002f72:	6643      	str	r3, [r0, #100]	; 0x64
 8002f74:	81c2      	strh	r2, [r0, #14]
 8002f76:	6183      	str	r3, [r0, #24]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	305c      	adds	r0, #92	; 0x5c
 8002f7e:	f7ff fc81 	bl	8002884 <memset>
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <std+0x38>)
 8002f84:	6263      	str	r3, [r4, #36]	; 0x24
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <std+0x3c>)
 8002f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <std+0x40>)
 8002f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <std+0x44>)
 8002f90:	6224      	str	r4, [r4, #32]
 8002f92:	6323      	str	r3, [r4, #48]	; 0x30
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	bf00      	nop
 8002f98:	0800389d 	.word	0x0800389d
 8002f9c:	080038bf 	.word	0x080038bf
 8002fa0:	080038f7 	.word	0x080038f7
 8002fa4:	0800391b 	.word	0x0800391b

08002fa8 <_cleanup_r>:
 8002fa8:	4901      	ldr	r1, [pc, #4]	; (8002fb0 <_cleanup_r+0x8>)
 8002faa:	f000 b8af 	b.w	800310c <_fwalk_reent>
 8002fae:	bf00      	nop
 8002fb0:	08002ee9 	.word	0x08002ee9

08002fb4 <__sfmoreglue>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	2268      	movs	r2, #104	; 0x68
 8002fb8:	1e4d      	subs	r5, r1, #1
 8002fba:	4355      	muls	r5, r2
 8002fbc:	460e      	mov	r6, r1
 8002fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002fc2:	f7ff fcd1 	bl	8002968 <_malloc_r>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	b140      	cbz	r0, 8002fdc <__sfmoreglue+0x28>
 8002fca:	2100      	movs	r1, #0
 8002fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8002fd0:	300c      	adds	r0, #12
 8002fd2:	60a0      	str	r0, [r4, #8]
 8002fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fd8:	f7ff fc54 	bl	8002884 <memset>
 8002fdc:	4620      	mov	r0, r4
 8002fde:	bd70      	pop	{r4, r5, r6, pc}

08002fe0 <__sfp_lock_acquire>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <__sfp_lock_acquire+0x8>)
 8002fe2:	f000 b8b3 	b.w	800314c <__retarget_lock_acquire_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	20000149 	.word	0x20000149

08002fec <__sfp_lock_release>:
 8002fec:	4801      	ldr	r0, [pc, #4]	; (8002ff4 <__sfp_lock_release+0x8>)
 8002fee:	f000 b8ae 	b.w	800314e <__retarget_lock_release_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	20000149 	.word	0x20000149

08002ff8 <__sinit_lock_acquire>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <__sinit_lock_acquire+0x8>)
 8002ffa:	f000 b8a7 	b.w	800314c <__retarget_lock_acquire_recursive>
 8002ffe:	bf00      	nop
 8003000:	2000014a 	.word	0x2000014a

08003004 <__sinit_lock_release>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__sinit_lock_release+0x8>)
 8003006:	f000 b8a2 	b.w	800314e <__retarget_lock_release_recursive>
 800300a:	bf00      	nop
 800300c:	2000014a 	.word	0x2000014a

08003010 <__sinit>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff0 	bl	8002ff8 <__sinit_lock_acquire>
 8003018:	69a3      	ldr	r3, [r4, #24]
 800301a:	b11b      	cbz	r3, 8003024 <__sinit+0x14>
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	f7ff bff0 	b.w	8003004 <__sinit_lock_release>
 8003024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003028:	6523      	str	r3, [r4, #80]	; 0x50
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <__sinit+0x68>)
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <__sinit+0x6c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	62a2      	str	r2, [r4, #40]	; 0x28
 8003032:	42a3      	cmp	r3, r4
 8003034:	bf04      	itt	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	61a3      	streq	r3, [r4, #24]
 800303a:	4620      	mov	r0, r4
 800303c:	f000 f820 	bl	8003080 <__sfp>
 8003040:	6060      	str	r0, [r4, #4]
 8003042:	4620      	mov	r0, r4
 8003044:	f000 f81c 	bl	8003080 <__sfp>
 8003048:	60a0      	str	r0, [r4, #8]
 800304a:	4620      	mov	r0, r4
 800304c:	f000 f818 	bl	8003080 <__sfp>
 8003050:	2200      	movs	r2, #0
 8003052:	60e0      	str	r0, [r4, #12]
 8003054:	2104      	movs	r1, #4
 8003056:	6860      	ldr	r0, [r4, #4]
 8003058:	f7ff ff82 	bl	8002f60 <std>
 800305c:	68a0      	ldr	r0, [r4, #8]
 800305e:	2201      	movs	r2, #1
 8003060:	2109      	movs	r1, #9
 8003062:	f7ff ff7d 	bl	8002f60 <std>
 8003066:	68e0      	ldr	r0, [r4, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	2112      	movs	r1, #18
 800306c:	f7ff ff78 	bl	8002f60 <std>
 8003070:	2301      	movs	r3, #1
 8003072:	61a3      	str	r3, [r4, #24]
 8003074:	e7d2      	b.n	800301c <__sinit+0xc>
 8003076:	bf00      	nop
 8003078:	08003ad0 	.word	0x08003ad0
 800307c:	08002fa9 	.word	0x08002fa9

08003080 <__sfp>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	4607      	mov	r7, r0
 8003084:	f7ff ffac 	bl	8002fe0 <__sfp_lock_acquire>
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <__sfp+0x84>)
 800308a:	681e      	ldr	r6, [r3, #0]
 800308c:	69b3      	ldr	r3, [r6, #24]
 800308e:	b913      	cbnz	r3, 8003096 <__sfp+0x16>
 8003090:	4630      	mov	r0, r6
 8003092:	f7ff ffbd 	bl	8003010 <__sinit>
 8003096:	3648      	adds	r6, #72	; 0x48
 8003098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800309c:	3b01      	subs	r3, #1
 800309e:	d503      	bpl.n	80030a8 <__sfp+0x28>
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	b30b      	cbz	r3, 80030e8 <__sfp+0x68>
 80030a4:	6836      	ldr	r6, [r6, #0]
 80030a6:	e7f7      	b.n	8003098 <__sfp+0x18>
 80030a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030ac:	b9d5      	cbnz	r5, 80030e4 <__sfp+0x64>
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <__sfp+0x88>)
 80030b0:	60e3      	str	r3, [r4, #12]
 80030b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030b6:	6665      	str	r5, [r4, #100]	; 0x64
 80030b8:	f000 f847 	bl	800314a <__retarget_lock_init_recursive>
 80030bc:	f7ff ff96 	bl	8002fec <__sfp_lock_release>
 80030c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80030c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80030c8:	6025      	str	r5, [r4, #0]
 80030ca:	61a5      	str	r5, [r4, #24]
 80030cc:	2208      	movs	r2, #8
 80030ce:	4629      	mov	r1, r5
 80030d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030d4:	f7ff fbd6 	bl	8002884 <memset>
 80030d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030e0:	4620      	mov	r0, r4
 80030e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e4:	3468      	adds	r4, #104	; 0x68
 80030e6:	e7d9      	b.n	800309c <__sfp+0x1c>
 80030e8:	2104      	movs	r1, #4
 80030ea:	4638      	mov	r0, r7
 80030ec:	f7ff ff62 	bl	8002fb4 <__sfmoreglue>
 80030f0:	4604      	mov	r4, r0
 80030f2:	6030      	str	r0, [r6, #0]
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d1d5      	bne.n	80030a4 <__sfp+0x24>
 80030f8:	f7ff ff78 	bl	8002fec <__sfp_lock_release>
 80030fc:	230c      	movs	r3, #12
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	e7ee      	b.n	80030e0 <__sfp+0x60>
 8003102:	bf00      	nop
 8003104:	08003ad0 	.word	0x08003ad0
 8003108:	ffff0001 	.word	0xffff0001

0800310c <_fwalk_reent>:
 800310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003110:	4606      	mov	r6, r0
 8003112:	4688      	mov	r8, r1
 8003114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003118:	2700      	movs	r7, #0
 800311a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800311e:	f1b9 0901 	subs.w	r9, r9, #1
 8003122:	d505      	bpl.n	8003130 <_fwalk_reent+0x24>
 8003124:	6824      	ldr	r4, [r4, #0]
 8003126:	2c00      	cmp	r4, #0
 8003128:	d1f7      	bne.n	800311a <_fwalk_reent+0xe>
 800312a:	4638      	mov	r0, r7
 800312c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003130:	89ab      	ldrh	r3, [r5, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d907      	bls.n	8003146 <_fwalk_reent+0x3a>
 8003136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800313a:	3301      	adds	r3, #1
 800313c:	d003      	beq.n	8003146 <_fwalk_reent+0x3a>
 800313e:	4629      	mov	r1, r5
 8003140:	4630      	mov	r0, r6
 8003142:	47c0      	blx	r8
 8003144:	4307      	orrs	r7, r0
 8003146:	3568      	adds	r5, #104	; 0x68
 8003148:	e7e9      	b.n	800311e <_fwalk_reent+0x12>

0800314a <__retarget_lock_init_recursive>:
 800314a:	4770      	bx	lr

0800314c <__retarget_lock_acquire_recursive>:
 800314c:	4770      	bx	lr

0800314e <__retarget_lock_release_recursive>:
 800314e:	4770      	bx	lr

08003150 <__swhatbuf_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	460e      	mov	r6, r1
 8003154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003158:	2900      	cmp	r1, #0
 800315a:	b096      	sub	sp, #88	; 0x58
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	da08      	bge.n	8003174 <__swhatbuf_r+0x24>
 8003162:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	602a      	str	r2, [r5, #0]
 800316a:	061a      	lsls	r2, r3, #24
 800316c:	d410      	bmi.n	8003190 <__swhatbuf_r+0x40>
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	e00e      	b.n	8003192 <__swhatbuf_r+0x42>
 8003174:	466a      	mov	r2, sp
 8003176:	f000 fbf7 	bl	8003968 <_fstat_r>
 800317a:	2800      	cmp	r0, #0
 800317c:	dbf1      	blt.n	8003162 <__swhatbuf_r+0x12>
 800317e:	9a01      	ldr	r2, [sp, #4]
 8003180:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003184:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003188:	425a      	negs	r2, r3
 800318a:	415a      	adcs	r2, r3
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	e7ee      	b.n	800316e <__swhatbuf_r+0x1e>
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	2000      	movs	r0, #0
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	b016      	add	sp, #88	; 0x58
 8003198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800319c <__smakebuf_r>:
 800319c:	898b      	ldrh	r3, [r1, #12]
 800319e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031a0:	079d      	lsls	r5, r3, #30
 80031a2:	4606      	mov	r6, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	d507      	bpl.n	80031b8 <__smakebuf_r+0x1c>
 80031a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	6123      	str	r3, [r4, #16]
 80031b0:	2301      	movs	r3, #1
 80031b2:	6163      	str	r3, [r4, #20]
 80031b4:	b002      	add	sp, #8
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	ab01      	add	r3, sp, #4
 80031ba:	466a      	mov	r2, sp
 80031bc:	f7ff ffc8 	bl	8003150 <__swhatbuf_r>
 80031c0:	9900      	ldr	r1, [sp, #0]
 80031c2:	4605      	mov	r5, r0
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff fbcf 	bl	8002968 <_malloc_r>
 80031ca:	b948      	cbnz	r0, 80031e0 <__smakebuf_r+0x44>
 80031cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d4ef      	bmi.n	80031b4 <__smakebuf_r+0x18>
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	e7e3      	b.n	80031a8 <__smakebuf_r+0xc>
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <__smakebuf_r+0x7c>)
 80031e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	6020      	str	r0, [r4, #0]
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	9b00      	ldr	r3, [sp, #0]
 80031f0:	6163      	str	r3, [r4, #20]
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	6120      	str	r0, [r4, #16]
 80031f6:	b15b      	cbz	r3, 8003210 <__smakebuf_r+0x74>
 80031f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 fbc5 	bl	800398c <_isatty_r>
 8003202:	b128      	cbz	r0, 8003210 <__smakebuf_r+0x74>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	89a0      	ldrh	r0, [r4, #12]
 8003212:	4305      	orrs	r5, r0
 8003214:	81a5      	strh	r5, [r4, #12]
 8003216:	e7cd      	b.n	80031b4 <__smakebuf_r+0x18>
 8003218:	08002fa9 	.word	0x08002fa9

0800321c <__malloc_lock>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__malloc_lock+0x8>)
 800321e:	f7ff bf95 	b.w	800314c <__retarget_lock_acquire_recursive>
 8003222:	bf00      	nop
 8003224:	20000148 	.word	0x20000148

08003228 <__malloc_unlock>:
 8003228:	4801      	ldr	r0, [pc, #4]	; (8003230 <__malloc_unlock+0x8>)
 800322a:	f7ff bf90 	b.w	800314e <__retarget_lock_release_recursive>
 800322e:	bf00      	nop
 8003230:	20000148 	.word	0x20000148

08003234 <__sfputc_r>:
 8003234:	6893      	ldr	r3, [r2, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	b410      	push	{r4}
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	da07      	bge.n	8003250 <__sfputc_r+0x1c>
 8003240:	6994      	ldr	r4, [r2, #24]
 8003242:	42a3      	cmp	r3, r4
 8003244:	db01      	blt.n	800324a <__sfputc_r+0x16>
 8003246:	290a      	cmp	r1, #10
 8003248:	d102      	bne.n	8003250 <__sfputc_r+0x1c>
 800324a:	bc10      	pop	{r4}
 800324c:	f7ff bd0a 	b.w	8002c64 <__swbuf_r>
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	1c58      	adds	r0, r3, #1
 8003254:	6010      	str	r0, [r2, #0]
 8003256:	7019      	strb	r1, [r3, #0]
 8003258:	4608      	mov	r0, r1
 800325a:	bc10      	pop	{r4}
 800325c:	4770      	bx	lr

0800325e <__sfputs_r>:
 800325e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003260:	4606      	mov	r6, r0
 8003262:	460f      	mov	r7, r1
 8003264:	4614      	mov	r4, r2
 8003266:	18d5      	adds	r5, r2, r3
 8003268:	42ac      	cmp	r4, r5
 800326a:	d101      	bne.n	8003270 <__sfputs_r+0x12>
 800326c:	2000      	movs	r0, #0
 800326e:	e007      	b.n	8003280 <__sfputs_r+0x22>
 8003270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003274:	463a      	mov	r2, r7
 8003276:	4630      	mov	r0, r6
 8003278:	f7ff ffdc 	bl	8003234 <__sfputc_r>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d1f3      	bne.n	8003268 <__sfputs_r+0xa>
 8003280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003284 <_vfiprintf_r>:
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	460d      	mov	r5, r1
 800328a:	b09d      	sub	sp, #116	; 0x74
 800328c:	4614      	mov	r4, r2
 800328e:	4698      	mov	r8, r3
 8003290:	4606      	mov	r6, r0
 8003292:	b118      	cbz	r0, 800329c <_vfiprintf_r+0x18>
 8003294:	6983      	ldr	r3, [r0, #24]
 8003296:	b90b      	cbnz	r3, 800329c <_vfiprintf_r+0x18>
 8003298:	f7ff feba 	bl	8003010 <__sinit>
 800329c:	4b89      	ldr	r3, [pc, #548]	; (80034c4 <_vfiprintf_r+0x240>)
 800329e:	429d      	cmp	r5, r3
 80032a0:	d11b      	bne.n	80032da <_vfiprintf_r+0x56>
 80032a2:	6875      	ldr	r5, [r6, #4]
 80032a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032a6:	07d9      	lsls	r1, r3, #31
 80032a8:	d405      	bmi.n	80032b6 <_vfiprintf_r+0x32>
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	059a      	lsls	r2, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_vfiprintf_r+0x32>
 80032b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032b2:	f7ff ff4b 	bl	800314c <__retarget_lock_acquire_recursive>
 80032b6:	89ab      	ldrh	r3, [r5, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	d501      	bpl.n	80032c0 <_vfiprintf_r+0x3c>
 80032bc:	692b      	ldr	r3, [r5, #16]
 80032be:	b9eb      	cbnz	r3, 80032fc <_vfiprintf_r+0x78>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4630      	mov	r0, r6
 80032c4:	f7ff fd20 	bl	8002d08 <__swsetup_r>
 80032c8:	b1c0      	cbz	r0, 80032fc <_vfiprintf_r+0x78>
 80032ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032cc:	07dc      	lsls	r4, r3, #31
 80032ce:	d50e      	bpl.n	80032ee <_vfiprintf_r+0x6a>
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032d4:	b01d      	add	sp, #116	; 0x74
 80032d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <_vfiprintf_r+0x244>)
 80032dc:	429d      	cmp	r5, r3
 80032de:	d101      	bne.n	80032e4 <_vfiprintf_r+0x60>
 80032e0:	68b5      	ldr	r5, [r6, #8]
 80032e2:	e7df      	b.n	80032a4 <_vfiprintf_r+0x20>
 80032e4:	4b79      	ldr	r3, [pc, #484]	; (80034cc <_vfiprintf_r+0x248>)
 80032e6:	429d      	cmp	r5, r3
 80032e8:	bf08      	it	eq
 80032ea:	68f5      	ldreq	r5, [r6, #12]
 80032ec:	e7da      	b.n	80032a4 <_vfiprintf_r+0x20>
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	0598      	lsls	r0, r3, #22
 80032f2:	d4ed      	bmi.n	80032d0 <_vfiprintf_r+0x4c>
 80032f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032f6:	f7ff ff2a 	bl	800314e <__retarget_lock_release_recursive>
 80032fa:	e7e9      	b.n	80032d0 <_vfiprintf_r+0x4c>
 80032fc:	2300      	movs	r3, #0
 80032fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003300:	2320      	movs	r3, #32
 8003302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003306:	f8cd 800c 	str.w	r8, [sp, #12]
 800330a:	2330      	movs	r3, #48	; 0x30
 800330c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80034d0 <_vfiprintf_r+0x24c>
 8003310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003314:	f04f 0901 	mov.w	r9, #1
 8003318:	4623      	mov	r3, r4
 800331a:	469a      	mov	sl, r3
 800331c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003320:	b10a      	cbz	r2, 8003326 <_vfiprintf_r+0xa2>
 8003322:	2a25      	cmp	r2, #37	; 0x25
 8003324:	d1f9      	bne.n	800331a <_vfiprintf_r+0x96>
 8003326:	ebba 0b04 	subs.w	fp, sl, r4
 800332a:	d00b      	beq.n	8003344 <_vfiprintf_r+0xc0>
 800332c:	465b      	mov	r3, fp
 800332e:	4622      	mov	r2, r4
 8003330:	4629      	mov	r1, r5
 8003332:	4630      	mov	r0, r6
 8003334:	f7ff ff93 	bl	800325e <__sfputs_r>
 8003338:	3001      	adds	r0, #1
 800333a:	f000 80aa 	beq.w	8003492 <_vfiprintf_r+0x20e>
 800333e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003340:	445a      	add	r2, fp
 8003342:	9209      	str	r2, [sp, #36]	; 0x24
 8003344:	f89a 3000 	ldrb.w	r3, [sl]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80a2 	beq.w	8003492 <_vfiprintf_r+0x20e>
 800334e:	2300      	movs	r3, #0
 8003350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003358:	f10a 0a01 	add.w	sl, sl, #1
 800335c:	9304      	str	r3, [sp, #16]
 800335e:	9307      	str	r3, [sp, #28]
 8003360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003364:	931a      	str	r3, [sp, #104]	; 0x68
 8003366:	4654      	mov	r4, sl
 8003368:	2205      	movs	r2, #5
 800336a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800336e:	4858      	ldr	r0, [pc, #352]	; (80034d0 <_vfiprintf_r+0x24c>)
 8003370:	f7fc ff3e 	bl	80001f0 <memchr>
 8003374:	9a04      	ldr	r2, [sp, #16]
 8003376:	b9d8      	cbnz	r0, 80033b0 <_vfiprintf_r+0x12c>
 8003378:	06d1      	lsls	r1, r2, #27
 800337a:	bf44      	itt	mi
 800337c:	2320      	movmi	r3, #32
 800337e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003382:	0713      	lsls	r3, r2, #28
 8003384:	bf44      	itt	mi
 8003386:	232b      	movmi	r3, #43	; 0x2b
 8003388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800338c:	f89a 3000 	ldrb.w	r3, [sl]
 8003390:	2b2a      	cmp	r3, #42	; 0x2a
 8003392:	d015      	beq.n	80033c0 <_vfiprintf_r+0x13c>
 8003394:	9a07      	ldr	r2, [sp, #28]
 8003396:	4654      	mov	r4, sl
 8003398:	2000      	movs	r0, #0
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	4621      	mov	r1, r4
 80033a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a4:	3b30      	subs	r3, #48	; 0x30
 80033a6:	2b09      	cmp	r3, #9
 80033a8:	d94e      	bls.n	8003448 <_vfiprintf_r+0x1c4>
 80033aa:	b1b0      	cbz	r0, 80033da <_vfiprintf_r+0x156>
 80033ac:	9207      	str	r2, [sp, #28]
 80033ae:	e014      	b.n	80033da <_vfiprintf_r+0x156>
 80033b0:	eba0 0308 	sub.w	r3, r0, r8
 80033b4:	fa09 f303 	lsl.w	r3, r9, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	46a2      	mov	sl, r4
 80033be:	e7d2      	b.n	8003366 <_vfiprintf_r+0xe2>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	1d19      	adds	r1, r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	9103      	str	r1, [sp, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bfbb      	ittet	lt
 80033cc:	425b      	neglt	r3, r3
 80033ce:	f042 0202 	orrlt.w	r2, r2, #2
 80033d2:	9307      	strge	r3, [sp, #28]
 80033d4:	9307      	strlt	r3, [sp, #28]
 80033d6:	bfb8      	it	lt
 80033d8:	9204      	strlt	r2, [sp, #16]
 80033da:	7823      	ldrb	r3, [r4, #0]
 80033dc:	2b2e      	cmp	r3, #46	; 0x2e
 80033de:	d10c      	bne.n	80033fa <_vfiprintf_r+0x176>
 80033e0:	7863      	ldrb	r3, [r4, #1]
 80033e2:	2b2a      	cmp	r3, #42	; 0x2a
 80033e4:	d135      	bne.n	8003452 <_vfiprintf_r+0x1ce>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	9203      	str	r2, [sp, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bfb8      	it	lt
 80033f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033f6:	3402      	adds	r4, #2
 80033f8:	9305      	str	r3, [sp, #20]
 80033fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80034d4 <_vfiprintf_r+0x250>
 80033fe:	7821      	ldrb	r1, [r4, #0]
 8003400:	2203      	movs	r2, #3
 8003402:	4650      	mov	r0, sl
 8003404:	f7fc fef4 	bl	80001f0 <memchr>
 8003408:	b140      	cbz	r0, 800341c <_vfiprintf_r+0x198>
 800340a:	2340      	movs	r3, #64	; 0x40
 800340c:	eba0 000a 	sub.w	r0, r0, sl
 8003410:	fa03 f000 	lsl.w	r0, r3, r0
 8003414:	9b04      	ldr	r3, [sp, #16]
 8003416:	4303      	orrs	r3, r0
 8003418:	3401      	adds	r4, #1
 800341a:	9304      	str	r3, [sp, #16]
 800341c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003420:	482d      	ldr	r0, [pc, #180]	; (80034d8 <_vfiprintf_r+0x254>)
 8003422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003426:	2206      	movs	r2, #6
 8003428:	f7fc fee2 	bl	80001f0 <memchr>
 800342c:	2800      	cmp	r0, #0
 800342e:	d03f      	beq.n	80034b0 <_vfiprintf_r+0x22c>
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <_vfiprintf_r+0x258>)
 8003432:	bb1b      	cbnz	r3, 800347c <_vfiprintf_r+0x1f8>
 8003434:	9b03      	ldr	r3, [sp, #12]
 8003436:	3307      	adds	r3, #7
 8003438:	f023 0307 	bic.w	r3, r3, #7
 800343c:	3308      	adds	r3, #8
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003442:	443b      	add	r3, r7
 8003444:	9309      	str	r3, [sp, #36]	; 0x24
 8003446:	e767      	b.n	8003318 <_vfiprintf_r+0x94>
 8003448:	fb0c 3202 	mla	r2, ip, r2, r3
 800344c:	460c      	mov	r4, r1
 800344e:	2001      	movs	r0, #1
 8003450:	e7a5      	b.n	800339e <_vfiprintf_r+0x11a>
 8003452:	2300      	movs	r3, #0
 8003454:	3401      	adds	r4, #1
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	4619      	mov	r1, r3
 800345a:	f04f 0c0a 	mov.w	ip, #10
 800345e:	4620      	mov	r0, r4
 8003460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003464:	3a30      	subs	r2, #48	; 0x30
 8003466:	2a09      	cmp	r2, #9
 8003468:	d903      	bls.n	8003472 <_vfiprintf_r+0x1ee>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0c5      	beq.n	80033fa <_vfiprintf_r+0x176>
 800346e:	9105      	str	r1, [sp, #20]
 8003470:	e7c3      	b.n	80033fa <_vfiprintf_r+0x176>
 8003472:	fb0c 2101 	mla	r1, ip, r1, r2
 8003476:	4604      	mov	r4, r0
 8003478:	2301      	movs	r3, #1
 800347a:	e7f0      	b.n	800345e <_vfiprintf_r+0x1da>
 800347c:	ab03      	add	r3, sp, #12
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	462a      	mov	r2, r5
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <_vfiprintf_r+0x25c>)
 8003484:	a904      	add	r1, sp, #16
 8003486:	4630      	mov	r0, r6
 8003488:	f3af 8000 	nop.w
 800348c:	4607      	mov	r7, r0
 800348e:	1c78      	adds	r0, r7, #1
 8003490:	d1d6      	bne.n	8003440 <_vfiprintf_r+0x1bc>
 8003492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003494:	07d9      	lsls	r1, r3, #31
 8003496:	d405      	bmi.n	80034a4 <_vfiprintf_r+0x220>
 8003498:	89ab      	ldrh	r3, [r5, #12]
 800349a:	059a      	lsls	r2, r3, #22
 800349c:	d402      	bmi.n	80034a4 <_vfiprintf_r+0x220>
 800349e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034a0:	f7ff fe55 	bl	800314e <__retarget_lock_release_recursive>
 80034a4:	89ab      	ldrh	r3, [r5, #12]
 80034a6:	065b      	lsls	r3, r3, #25
 80034a8:	f53f af12 	bmi.w	80032d0 <_vfiprintf_r+0x4c>
 80034ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ae:	e711      	b.n	80032d4 <_vfiprintf_r+0x50>
 80034b0:	ab03      	add	r3, sp, #12
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	462a      	mov	r2, r5
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <_vfiprintf_r+0x25c>)
 80034b8:	a904      	add	r1, sp, #16
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 f880 	bl	80035c0 <_printf_i>
 80034c0:	e7e4      	b.n	800348c <_vfiprintf_r+0x208>
 80034c2:	bf00      	nop
 80034c4:	08003af4 	.word	0x08003af4
 80034c8:	08003b14 	.word	0x08003b14
 80034cc:	08003ad4 	.word	0x08003ad4
 80034d0:	08003b34 	.word	0x08003b34
 80034d4:	08003b3a 	.word	0x08003b3a
 80034d8:	08003b3e 	.word	0x08003b3e
 80034dc:	00000000 	.word	0x00000000
 80034e0:	0800325f 	.word	0x0800325f

080034e4 <_printf_common>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	4616      	mov	r6, r2
 80034ea:	4699      	mov	r9, r3
 80034ec:	688a      	ldr	r2, [r1, #8]
 80034ee:	690b      	ldr	r3, [r1, #16]
 80034f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bfb8      	it	lt
 80034f8:	4613      	movlt	r3, r2
 80034fa:	6033      	str	r3, [r6, #0]
 80034fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003500:	4607      	mov	r7, r0
 8003502:	460c      	mov	r4, r1
 8003504:	b10a      	cbz	r2, 800350a <_printf_common+0x26>
 8003506:	3301      	adds	r3, #1
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	0699      	lsls	r1, r3, #26
 800350e:	bf42      	ittt	mi
 8003510:	6833      	ldrmi	r3, [r6, #0]
 8003512:	3302      	addmi	r3, #2
 8003514:	6033      	strmi	r3, [r6, #0]
 8003516:	6825      	ldr	r5, [r4, #0]
 8003518:	f015 0506 	ands.w	r5, r5, #6
 800351c:	d106      	bne.n	800352c <_printf_common+0x48>
 800351e:	f104 0a19 	add.w	sl, r4, #25
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	6832      	ldr	r2, [r6, #0]
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	42ab      	cmp	r3, r5
 800352a:	dc26      	bgt.n	800357a <_printf_common+0x96>
 800352c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003530:	1e13      	subs	r3, r2, #0
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	bf18      	it	ne
 8003536:	2301      	movne	r3, #1
 8003538:	0692      	lsls	r2, r2, #26
 800353a:	d42b      	bmi.n	8003594 <_printf_common+0xb0>
 800353c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003540:	4649      	mov	r1, r9
 8003542:	4638      	mov	r0, r7
 8003544:	47c0      	blx	r8
 8003546:	3001      	adds	r0, #1
 8003548:	d01e      	beq.n	8003588 <_printf_common+0xa4>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	68e5      	ldr	r5, [r4, #12]
 800354e:	6832      	ldr	r2, [r6, #0]
 8003550:	f003 0306 	and.w	r3, r3, #6
 8003554:	2b04      	cmp	r3, #4
 8003556:	bf08      	it	eq
 8003558:	1aad      	subeq	r5, r5, r2
 800355a:	68a3      	ldr	r3, [r4, #8]
 800355c:	6922      	ldr	r2, [r4, #16]
 800355e:	bf0c      	ite	eq
 8003560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003564:	2500      	movne	r5, #0
 8003566:	4293      	cmp	r3, r2
 8003568:	bfc4      	itt	gt
 800356a:	1a9b      	subgt	r3, r3, r2
 800356c:	18ed      	addgt	r5, r5, r3
 800356e:	2600      	movs	r6, #0
 8003570:	341a      	adds	r4, #26
 8003572:	42b5      	cmp	r5, r6
 8003574:	d11a      	bne.n	80035ac <_printf_common+0xc8>
 8003576:	2000      	movs	r0, #0
 8003578:	e008      	b.n	800358c <_printf_common+0xa8>
 800357a:	2301      	movs	r3, #1
 800357c:	4652      	mov	r2, sl
 800357e:	4649      	mov	r1, r9
 8003580:	4638      	mov	r0, r7
 8003582:	47c0      	blx	r8
 8003584:	3001      	adds	r0, #1
 8003586:	d103      	bne.n	8003590 <_printf_common+0xac>
 8003588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800358c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003590:	3501      	adds	r5, #1
 8003592:	e7c6      	b.n	8003522 <_printf_common+0x3e>
 8003594:	18e1      	adds	r1, r4, r3
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	2030      	movs	r0, #48	; 0x30
 800359a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800359e:	4422      	add	r2, r4
 80035a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035a8:	3302      	adds	r3, #2
 80035aa:	e7c7      	b.n	800353c <_printf_common+0x58>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4622      	mov	r2, r4
 80035b0:	4649      	mov	r1, r9
 80035b2:	4638      	mov	r0, r7
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d0e6      	beq.n	8003588 <_printf_common+0xa4>
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7d9      	b.n	8003572 <_printf_common+0x8e>
	...

080035c0 <_printf_i>:
 80035c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	7e0f      	ldrb	r7, [r1, #24]
 80035c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035c8:	2f78      	cmp	r7, #120	; 0x78
 80035ca:	4691      	mov	r9, r2
 80035cc:	4680      	mov	r8, r0
 80035ce:	460c      	mov	r4, r1
 80035d0:	469a      	mov	sl, r3
 80035d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035d6:	d807      	bhi.n	80035e8 <_printf_i+0x28>
 80035d8:	2f62      	cmp	r7, #98	; 0x62
 80035da:	d80a      	bhi.n	80035f2 <_printf_i+0x32>
 80035dc:	2f00      	cmp	r7, #0
 80035de:	f000 80d8 	beq.w	8003792 <_printf_i+0x1d2>
 80035e2:	2f58      	cmp	r7, #88	; 0x58
 80035e4:	f000 80a3 	beq.w	800372e <_printf_i+0x16e>
 80035e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035f0:	e03a      	b.n	8003668 <_printf_i+0xa8>
 80035f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035f6:	2b15      	cmp	r3, #21
 80035f8:	d8f6      	bhi.n	80035e8 <_printf_i+0x28>
 80035fa:	a101      	add	r1, pc, #4	; (adr r1, 8003600 <_printf_i+0x40>)
 80035fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003600:	08003659 	.word	0x08003659
 8003604:	0800366d 	.word	0x0800366d
 8003608:	080035e9 	.word	0x080035e9
 800360c:	080035e9 	.word	0x080035e9
 8003610:	080035e9 	.word	0x080035e9
 8003614:	080035e9 	.word	0x080035e9
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080035e9 	.word	0x080035e9
 8003620:	080035e9 	.word	0x080035e9
 8003624:	080035e9 	.word	0x080035e9
 8003628:	080035e9 	.word	0x080035e9
 800362c:	08003779 	.word	0x08003779
 8003630:	0800369d 	.word	0x0800369d
 8003634:	0800375b 	.word	0x0800375b
 8003638:	080035e9 	.word	0x080035e9
 800363c:	080035e9 	.word	0x080035e9
 8003640:	0800379b 	.word	0x0800379b
 8003644:	080035e9 	.word	0x080035e9
 8003648:	0800369d 	.word	0x0800369d
 800364c:	080035e9 	.word	0x080035e9
 8003650:	080035e9 	.word	0x080035e9
 8003654:	08003763 	.word	0x08003763
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	602a      	str	r2, [r5, #0]
 8003660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003668:	2301      	movs	r3, #1
 800366a:	e0a3      	b.n	80037b4 <_printf_i+0x1f4>
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	6829      	ldr	r1, [r5, #0]
 8003670:	0606      	lsls	r6, r0, #24
 8003672:	f101 0304 	add.w	r3, r1, #4
 8003676:	d50a      	bpl.n	800368e <_printf_i+0xce>
 8003678:	680e      	ldr	r6, [r1, #0]
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	2e00      	cmp	r6, #0
 800367e:	da03      	bge.n	8003688 <_printf_i+0xc8>
 8003680:	232d      	movs	r3, #45	; 0x2d
 8003682:	4276      	negs	r6, r6
 8003684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003688:	485e      	ldr	r0, [pc, #376]	; (8003804 <_printf_i+0x244>)
 800368a:	230a      	movs	r3, #10
 800368c:	e019      	b.n	80036c2 <_printf_i+0x102>
 800368e:	680e      	ldr	r6, [r1, #0]
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003696:	bf18      	it	ne
 8003698:	b236      	sxthne	r6, r6
 800369a:	e7ef      	b.n	800367c <_printf_i+0xbc>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	1d19      	adds	r1, r3, #4
 80036a2:	6029      	str	r1, [r5, #0]
 80036a4:	0601      	lsls	r1, r0, #24
 80036a6:	d501      	bpl.n	80036ac <_printf_i+0xec>
 80036a8:	681e      	ldr	r6, [r3, #0]
 80036aa:	e002      	b.n	80036b2 <_printf_i+0xf2>
 80036ac:	0646      	lsls	r6, r0, #25
 80036ae:	d5fb      	bpl.n	80036a8 <_printf_i+0xe8>
 80036b0:	881e      	ldrh	r6, [r3, #0]
 80036b2:	4854      	ldr	r0, [pc, #336]	; (8003804 <_printf_i+0x244>)
 80036b4:	2f6f      	cmp	r7, #111	; 0x6f
 80036b6:	bf0c      	ite	eq
 80036b8:	2308      	moveq	r3, #8
 80036ba:	230a      	movne	r3, #10
 80036bc:	2100      	movs	r1, #0
 80036be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036c2:	6865      	ldr	r5, [r4, #4]
 80036c4:	60a5      	str	r5, [r4, #8]
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	bfa2      	ittt	ge
 80036ca:	6821      	ldrge	r1, [r4, #0]
 80036cc:	f021 0104 	bicge.w	r1, r1, #4
 80036d0:	6021      	strge	r1, [r4, #0]
 80036d2:	b90e      	cbnz	r6, 80036d8 <_printf_i+0x118>
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	d04d      	beq.n	8003774 <_printf_i+0x1b4>
 80036d8:	4615      	mov	r5, r2
 80036da:	fbb6 f1f3 	udiv	r1, r6, r3
 80036de:	fb03 6711 	mls	r7, r3, r1, r6
 80036e2:	5dc7      	ldrb	r7, [r0, r7]
 80036e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036e8:	4637      	mov	r7, r6
 80036ea:	42bb      	cmp	r3, r7
 80036ec:	460e      	mov	r6, r1
 80036ee:	d9f4      	bls.n	80036da <_printf_i+0x11a>
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d10b      	bne.n	800370c <_printf_i+0x14c>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	07de      	lsls	r6, r3, #31
 80036f8:	d508      	bpl.n	800370c <_printf_i+0x14c>
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	6861      	ldr	r1, [r4, #4]
 80036fe:	4299      	cmp	r1, r3
 8003700:	bfde      	ittt	le
 8003702:	2330      	movle	r3, #48	; 0x30
 8003704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003708:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800370c:	1b52      	subs	r2, r2, r5
 800370e:	6122      	str	r2, [r4, #16]
 8003710:	f8cd a000 	str.w	sl, [sp]
 8003714:	464b      	mov	r3, r9
 8003716:	aa03      	add	r2, sp, #12
 8003718:	4621      	mov	r1, r4
 800371a:	4640      	mov	r0, r8
 800371c:	f7ff fee2 	bl	80034e4 <_printf_common>
 8003720:	3001      	adds	r0, #1
 8003722:	d14c      	bne.n	80037be <_printf_i+0x1fe>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003728:	b004      	add	sp, #16
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372e:	4835      	ldr	r0, [pc, #212]	; (8003804 <_printf_i+0x244>)
 8003730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003734:	6829      	ldr	r1, [r5, #0]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f851 6b04 	ldr.w	r6, [r1], #4
 800373c:	6029      	str	r1, [r5, #0]
 800373e:	061d      	lsls	r5, r3, #24
 8003740:	d514      	bpl.n	800376c <_printf_i+0x1ac>
 8003742:	07df      	lsls	r7, r3, #31
 8003744:	bf44      	itt	mi
 8003746:	f043 0320 	orrmi.w	r3, r3, #32
 800374a:	6023      	strmi	r3, [r4, #0]
 800374c:	b91e      	cbnz	r6, 8003756 <_printf_i+0x196>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f023 0320 	bic.w	r3, r3, #32
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	2310      	movs	r3, #16
 8003758:	e7b0      	b.n	80036bc <_printf_i+0xfc>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	2378      	movs	r3, #120	; 0x78
 8003764:	4828      	ldr	r0, [pc, #160]	; (8003808 <_printf_i+0x248>)
 8003766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800376a:	e7e3      	b.n	8003734 <_printf_i+0x174>
 800376c:	0659      	lsls	r1, r3, #25
 800376e:	bf48      	it	mi
 8003770:	b2b6      	uxthmi	r6, r6
 8003772:	e7e6      	b.n	8003742 <_printf_i+0x182>
 8003774:	4615      	mov	r5, r2
 8003776:	e7bb      	b.n	80036f0 <_printf_i+0x130>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	6826      	ldr	r6, [r4, #0]
 800377c:	6961      	ldr	r1, [r4, #20]
 800377e:	1d18      	adds	r0, r3, #4
 8003780:	6028      	str	r0, [r5, #0]
 8003782:	0635      	lsls	r5, r6, #24
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	d501      	bpl.n	800378c <_printf_i+0x1cc>
 8003788:	6019      	str	r1, [r3, #0]
 800378a:	e002      	b.n	8003792 <_printf_i+0x1d2>
 800378c:	0670      	lsls	r0, r6, #25
 800378e:	d5fb      	bpl.n	8003788 <_printf_i+0x1c8>
 8003790:	8019      	strh	r1, [r3, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	4615      	mov	r5, r2
 8003798:	e7ba      	b.n	8003710 <_printf_i+0x150>
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	1d1a      	adds	r2, r3, #4
 800379e:	602a      	str	r2, [r5, #0]
 80037a0:	681d      	ldr	r5, [r3, #0]
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	2100      	movs	r1, #0
 80037a6:	4628      	mov	r0, r5
 80037a8:	f7fc fd22 	bl	80001f0 <memchr>
 80037ac:	b108      	cbz	r0, 80037b2 <_printf_i+0x1f2>
 80037ae:	1b40      	subs	r0, r0, r5
 80037b0:	6060      	str	r0, [r4, #4]
 80037b2:	6863      	ldr	r3, [r4, #4]
 80037b4:	6123      	str	r3, [r4, #16]
 80037b6:	2300      	movs	r3, #0
 80037b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037bc:	e7a8      	b.n	8003710 <_printf_i+0x150>
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	462a      	mov	r2, r5
 80037c2:	4649      	mov	r1, r9
 80037c4:	4640      	mov	r0, r8
 80037c6:	47d0      	blx	sl
 80037c8:	3001      	adds	r0, #1
 80037ca:	d0ab      	beq.n	8003724 <_printf_i+0x164>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	079b      	lsls	r3, r3, #30
 80037d0:	d413      	bmi.n	80037fa <_printf_i+0x23a>
 80037d2:	68e0      	ldr	r0, [r4, #12]
 80037d4:	9b03      	ldr	r3, [sp, #12]
 80037d6:	4298      	cmp	r0, r3
 80037d8:	bfb8      	it	lt
 80037da:	4618      	movlt	r0, r3
 80037dc:	e7a4      	b.n	8003728 <_printf_i+0x168>
 80037de:	2301      	movs	r3, #1
 80037e0:	4632      	mov	r2, r6
 80037e2:	4649      	mov	r1, r9
 80037e4:	4640      	mov	r0, r8
 80037e6:	47d0      	blx	sl
 80037e8:	3001      	adds	r0, #1
 80037ea:	d09b      	beq.n	8003724 <_printf_i+0x164>
 80037ec:	3501      	adds	r5, #1
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	9903      	ldr	r1, [sp, #12]
 80037f2:	1a5b      	subs	r3, r3, r1
 80037f4:	42ab      	cmp	r3, r5
 80037f6:	dcf2      	bgt.n	80037de <_printf_i+0x21e>
 80037f8:	e7eb      	b.n	80037d2 <_printf_i+0x212>
 80037fa:	2500      	movs	r5, #0
 80037fc:	f104 0619 	add.w	r6, r4, #25
 8003800:	e7f5      	b.n	80037ee <_printf_i+0x22e>
 8003802:	bf00      	nop
 8003804:	08003b45 	.word	0x08003b45
 8003808:	08003b56 	.word	0x08003b56

0800380c <_putc_r>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	460d      	mov	r5, r1
 8003810:	4614      	mov	r4, r2
 8003812:	4606      	mov	r6, r0
 8003814:	b118      	cbz	r0, 800381e <_putc_r+0x12>
 8003816:	6983      	ldr	r3, [r0, #24]
 8003818:	b90b      	cbnz	r3, 800381e <_putc_r+0x12>
 800381a:	f7ff fbf9 	bl	8003010 <__sinit>
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <_putc_r+0x84>)
 8003820:	429c      	cmp	r4, r3
 8003822:	d124      	bne.n	800386e <_putc_r+0x62>
 8003824:	6874      	ldr	r4, [r6, #4]
 8003826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003828:	07d8      	lsls	r0, r3, #31
 800382a:	d405      	bmi.n	8003838 <_putc_r+0x2c>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	0599      	lsls	r1, r3, #22
 8003830:	d402      	bmi.n	8003838 <_putc_r+0x2c>
 8003832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003834:	f7ff fc8a 	bl	800314c <__retarget_lock_acquire_recursive>
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	3b01      	subs	r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	60a3      	str	r3, [r4, #8]
 8003840:	da05      	bge.n	800384e <_putc_r+0x42>
 8003842:	69a2      	ldr	r2, [r4, #24]
 8003844:	4293      	cmp	r3, r2
 8003846:	db1c      	blt.n	8003882 <_putc_r+0x76>
 8003848:	b2eb      	uxtb	r3, r5
 800384a:	2b0a      	cmp	r3, #10
 800384c:	d019      	beq.n	8003882 <_putc_r+0x76>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	701d      	strb	r5, [r3, #0]
 8003856:	b2ed      	uxtb	r5, r5
 8003858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800385a:	07da      	lsls	r2, r3, #31
 800385c:	d405      	bmi.n	800386a <_putc_r+0x5e>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	059b      	lsls	r3, r3, #22
 8003862:	d402      	bmi.n	800386a <_putc_r+0x5e>
 8003864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003866:	f7ff fc72 	bl	800314e <__retarget_lock_release_recursive>
 800386a:	4628      	mov	r0, r5
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <_putc_r+0x88>)
 8003870:	429c      	cmp	r4, r3
 8003872:	d101      	bne.n	8003878 <_putc_r+0x6c>
 8003874:	68b4      	ldr	r4, [r6, #8]
 8003876:	e7d6      	b.n	8003826 <_putc_r+0x1a>
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <_putc_r+0x8c>)
 800387a:	429c      	cmp	r4, r3
 800387c:	bf08      	it	eq
 800387e:	68f4      	ldreq	r4, [r6, #12]
 8003880:	e7d1      	b.n	8003826 <_putc_r+0x1a>
 8003882:	4629      	mov	r1, r5
 8003884:	4622      	mov	r2, r4
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff f9ec 	bl	8002c64 <__swbuf_r>
 800388c:	4605      	mov	r5, r0
 800388e:	e7e3      	b.n	8003858 <_putc_r+0x4c>
 8003890:	08003af4 	.word	0x08003af4
 8003894:	08003b14 	.word	0x08003b14
 8003898:	08003ad4 	.word	0x08003ad4

0800389c <__sread>:
 800389c:	b510      	push	{r4, lr}
 800389e:	460c      	mov	r4, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	f000 f894 	bl	80039d0 <_read_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	bfab      	itete	ge
 80038ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ae:	89a3      	ldrhlt	r3, [r4, #12]
 80038b0:	181b      	addge	r3, r3, r0
 80038b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038b6:	bfac      	ite	ge
 80038b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038ba:	81a3      	strhlt	r3, [r4, #12]
 80038bc:	bd10      	pop	{r4, pc}

080038be <__swrite>:
 80038be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	461f      	mov	r7, r3
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	4605      	mov	r5, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4616      	mov	r6, r2
 80038ce:	d505      	bpl.n	80038dc <__swrite+0x1e>
 80038d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d4:	2302      	movs	r3, #2
 80038d6:	2200      	movs	r2, #0
 80038d8:	f000 f868 	bl	80039ac <_lseek_r>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	4632      	mov	r2, r6
 80038ea:	463b      	mov	r3, r7
 80038ec:	4628      	mov	r0, r5
 80038ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	f000 b817 	b.w	8003924 <_write_r>

080038f6 <__sseek>:
 80038f6:	b510      	push	{r4, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fe:	f000 f855 	bl	80039ac <_lseek_r>
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	bf15      	itete	ne
 8003908:	6560      	strne	r0, [r4, #84]	; 0x54
 800390a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800390e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003912:	81a3      	strheq	r3, [r4, #12]
 8003914:	bf18      	it	ne
 8003916:	81a3      	strhne	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__sclose>:
 800391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391e:	f000 b813 	b.w	8003948 <_close_r>
	...

08003924 <_write_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d07      	ldr	r5, [pc, #28]	; (8003944 <_write_r+0x20>)
 8003928:	4604      	mov	r4, r0
 800392a:	4608      	mov	r0, r1
 800392c:	4611      	mov	r1, r2
 800392e:	2200      	movs	r2, #0
 8003930:	602a      	str	r2, [r5, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	f7fe fec7 	bl	80026c6 <_write>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_write_r+0x1e>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_write_r+0x1e>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	2000014c 	.word	0x2000014c

08003948 <_close_r>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	4d06      	ldr	r5, [pc, #24]	; (8003964 <_close_r+0x1c>)
 800394c:	2300      	movs	r3, #0
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	f7fe fed3 	bl	80026fe <_close>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_close_r+0x1a>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	b103      	cbz	r3, 8003962 <_close_r+0x1a>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	2000014c 	.word	0x2000014c

08003968 <_fstat_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4d07      	ldr	r5, [pc, #28]	; (8003988 <_fstat_r+0x20>)
 800396c:	2300      	movs	r3, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	f7fe fecd 	bl	8002714 <_fstat>
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	d102      	bne.n	8003984 <_fstat_r+0x1c>
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	b103      	cbz	r3, 8003984 <_fstat_r+0x1c>
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	2000014c 	.word	0x2000014c

0800398c <_isatty_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d06      	ldr	r5, [pc, #24]	; (80039a8 <_isatty_r+0x1c>)
 8003990:	2300      	movs	r3, #0
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	f7fe fecb 	bl	8002732 <_isatty>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_isatty_r+0x1a>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_isatty_r+0x1a>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	2000014c 	.word	0x2000014c

080039ac <_lseek_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4d07      	ldr	r5, [pc, #28]	; (80039cc <_lseek_r+0x20>)
 80039b0:	4604      	mov	r4, r0
 80039b2:	4608      	mov	r0, r1
 80039b4:	4611      	mov	r1, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	602a      	str	r2, [r5, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7fe fec3 	bl	8002746 <_lseek>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_lseek_r+0x1e>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_lseek_r+0x1e>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	2000014c 	.word	0x2000014c

080039d0 <_read_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4d07      	ldr	r5, [pc, #28]	; (80039f0 <_read_r+0x20>)
 80039d4:	4604      	mov	r4, r0
 80039d6:	4608      	mov	r0, r1
 80039d8:	4611      	mov	r1, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	602a      	str	r2, [r5, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7fe fe54 	bl	800268c <_read>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_read_r+0x1e>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_read_r+0x1e>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	2000014c 	.word	0x2000014c

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
