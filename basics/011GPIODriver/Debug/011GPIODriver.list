
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002e48  08002e48  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e48  08002e48  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000000b0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c19  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e29  00000000  00000000  00023cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  00024af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000390  00000000  00000000  00024f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024af  00000000  00000000  000252c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005774  00000000  00000000  00027777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e49a  00000000  00000000  0002ceeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003b385  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001864  00000000  00000000  0003b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d94 	.word	0x08002d94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002d94 	.word	0x08002d94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fca7 	bl	8001c24 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f000 feb0 	bl	800104c <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f965 	bl	80005bc <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fb8a 	bl	8000a0c <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	200000a4 	.word	0x200000a4

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fc87 	bl	8001c24 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f000 fe98 	bl	800104c <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fb84 	bl	8000a2e <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fb7f 	bl	8000a2e <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fbdf 	bl	8000af8 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fbda 	bl	8000af8 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fc0e 	bl	8000b6a <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fc09 	bl	8000b6a <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fc4a 	bl	8000bf6 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fc45 	bl	8000bf6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 fc1c 	bl	8000bae <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 fc17 	bl	8000bae <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fe57 	bl	800104c <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fc49 	bl	8000c3e <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd5a 	bl	8000e6c <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc94 	bl	8000cea <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fdd3 	bl	8000f8c <lcd_pcf8574_send_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	4608      	mov	r0, r1
 80003fa:	4611      	mov	r1, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	4603      	mov	r3, r0
 8000400:	70fb      	strb	r3, [r7, #3]
 8000402:	460b      	mov	r3, r1
 8000404:	70bb      	strb	r3, [r7, #2]
 8000406:	4613      	mov	r3, r2
 8000408:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 800040a:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <configure_external_gpio_interrupt+0x104>)
 800040c:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <configure_external_gpio_interrupt+0x108>)
 8000410:	61bb      	str	r3, [r7, #24]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 8000412:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <configure_external_gpio_interrupt+0x10c>)
 8000414:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8000416:	4b3a      	ldr	r3, [pc, #232]	; (8000500 <configure_external_gpio_interrupt+0x110>)
 8000418:	613b      	str	r3, [r7, #16]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 800041a:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <configure_external_gpio_interrupt+0x114>)
 800041c:	60fb      	str	r3, [r7, #12]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 fe14 	bl	800104c <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 faff 	bl	8000a2e <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 fb97 	bl	8000b6a <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2202      	movs	r2, #2
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 fbd7 	bl	8000bf6 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 fbad 	bl	8000bae <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	78fa      	ldrb	r2, [r7, #3]
 800045a:	2101      	movs	r1, #1
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	431a      	orrs	r2, r3
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 8000466:	78bb      	ldrb	r3, [r7, #2]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d108      	bne.n	800047e <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	78fa      	ldrb	r2, [r7, #3]
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	431a      	orrs	r2, r3
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 800047e:	78bb      	ldrb	r3, [r7, #2]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d108      	bne.n	8000496 <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	78fa      	ldrb	r2, [r7, #3]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	431a      	orrs	r2, r3
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	f003 0303 	and.w	r3, r3, #3
 80004a8:	60bb      	str	r3, [r7, #8]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4413      	add	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	0092      	lsls	r2, r2, #2
 80004bc:	210f      	movs	r1, #15
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	401a      	ands	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f81c 	bl	8000508 <gpio_port_name_to_num>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	409a      	lsls	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	431a      	orrs	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 80004e4:	787b      	ldrb	r3, [r7, #1]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 ff74 	bl	80013d4 <NVIC_EnableIRQ>
}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40023844 	.word	0x40023844
 80004f8:	40013c00 	.word	0x40013c00
 80004fc:	40013c08 	.word	0x40013c08
 8000500:	40013c0c 	.word	0x40013c0c
 8000504:	40013808 	.word	0x40013808

08000508 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a21      	ldr	r2, [pc, #132]	; (8000598 <gpio_port_name_to_num+0x90>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d102      	bne.n	800051e <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e036      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <gpio_port_name_to_num+0x94>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d102      	bne.n	800052c <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e02f      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <gpio_port_name_to_num+0x98>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d102      	bne.n	800053a <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8000534:	2302      	movs	r3, #2
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e028      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <gpio_port_name_to_num+0x9c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d102      	bne.n	8000548 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8000542:	2303      	movs	r3, #3
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	e021      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <gpio_port_name_to_num+0xa0>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d102      	bne.n	8000556 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000550:	2304      	movs	r3, #4
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e01a      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <gpio_port_name_to_num+0xa4>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d102      	bne.n	8000564 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 800055e:	2305      	movs	r3, #5
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e013      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <gpio_port_name_to_num+0xa8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d102      	bne.n	8000572 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 800056c:	2306      	movs	r3, #6
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e00c      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <gpio_port_name_to_num+0xac>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d102      	bne.n	8000580 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e005      	b.n	800058c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <gpio_port_name_to_num+0xb0>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d101      	bne.n	800058c <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40021400 	.word	0x40021400
 80005b0:	40021800 	.word	0x40021800
 80005b4:	40021c00 	.word	0x40021c00
 80005b8:	40022000 	.word	0x40022000

080005bc <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6852      	ldr	r2, [r2, #4]
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6892      	ldr	r2, [r2, #8]
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7b1b      	ldrb	r3, [r3, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d16a      	bne.n	80006b6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a1a      	ldr	r2, [r3, #32]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7b5b      	ldrb	r3, [r3, #13]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d11c      	bne.n	8000632 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f022 0203 	bic.w	r2, r2, #3
 8000606:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6912      	ldr	r2, [r2, #16]
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000620:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000630:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7b5b      	ldrb	r3, [r3, #13]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d11c      	bne.n	8000674 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	699a      	ldr	r2, [r3, #24]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0203 	bic.w	r2, r2, #3
 8000648:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	6912      	ldr	r2, [r2, #16]
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	699a      	ldr	r2, [r3, #24]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000662:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000672:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7b5b      	ldrb	r3, [r3, #13]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d11c      	bne.n	80006b6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f022 0203 	bic.w	r2, r2, #3
 800068a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6912      	ldr	r2, [r2, #16]
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006a4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80006b4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7d1b      	ldrb	r3, [r3, #20]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	f040 80bf 	bne.w	800083e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7d5b      	ldrb	r3, [r3, #21]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d124      	bne.n	8000712 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006d6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	6992      	ldr	r2, [r2, #24]
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006f0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000700:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6a1a      	ldr	r2, [r3, #32]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f042 0210 	orr.w	r2, r2, #16
 8000710:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7d5b      	ldrb	r3, [r3, #21]
 8000716:	2b03      	cmp	r3, #3
 8000718:	d124      	bne.n	8000764 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000728:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	6992      	ldr	r2, [r2, #24]
 8000732:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000742:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000752:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a1a      	ldr	r2, [r3, #32]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0210 	orr.w	r2, r2, #16
 8000762:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7d5b      	ldrb	r3, [r3, #21]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d124      	bne.n	80007b6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800077a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6992      	ldr	r2, [r2, #24]
 8000784:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000794:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	699a      	ldr	r2, [r3, #24]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80007a4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6a1a      	ldr	r2, [r3, #32]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f042 0210 	orr.w	r2, r2, #16
 80007b4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7d5b      	ldrb	r3, [r3, #21]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d13f      	bne.n	800083e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007cc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	699a      	ldr	r2, [r3, #24]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007dc:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80007ec:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a1a      	ldr	r2, [r3, #32]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f022 0220 	bic.w	r2, r2, #32
 80007fc:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a1a      	ldr	r2, [r3, #32]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800080c:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800081c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 0204 	orr.w	r2, r2, #4
 800082c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a1a      	ldr	r2, [r3, #32]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 0210 	orr.w	r2, r2, #16
 800083c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7f1b      	ldrb	r3, [r3, #28]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d16a      	bne.n	800091c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000854:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7f5b      	ldrb	r3, [r3, #29]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d11c      	bne.n	8000898 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	69da      	ldr	r2, [r3, #28]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f022 0203 	bic.w	r2, r2, #3
 800086c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6a12      	ldr	r2, [r2, #32]
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69da      	ldr	r2, [r3, #28]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000886:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	69da      	ldr	r2, [r3, #28]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000896:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7f5b      	ldrb	r3, [r3, #29]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d11c      	bne.n	80008da <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	69da      	ldr	r2, [r3, #28]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0203 	bic.w	r2, r2, #3
 80008ae:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	6a12      	ldr	r2, [r2, #32]
 80008b8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	69da      	ldr	r2, [r3, #28]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008c8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69da      	ldr	r2, [r3, #28]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80008d8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7f5b      	ldrb	r3, [r3, #29]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d11c      	bne.n	800091c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 0203 	bic.w	r2, r2, #3
 80008f0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6a12      	ldr	r2, [r2, #32]
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	69da      	ldr	r2, [r3, #28]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800090a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800091a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000922:	2b00      	cmp	r3, #0
 8000924:	d16d      	bne.n	8000a02 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a1a      	ldr	r2, [r3, #32]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000934:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800093c:	2b02      	cmp	r3, #2
 800093e:	d11c      	bne.n	800097a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	69da      	ldr	r2, [r3, #28]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800094e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000958:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000968:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000978:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000980:	2b03      	cmp	r3, #3
 8000982:	d11c      	bne.n	80009be <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	69da      	ldr	r2, [r3, #28]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000992:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69da      	ldr	r2, [r3, #28]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009ac:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80009bc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d11c      	bne.n	8000a02 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69da      	ldr	r2, [r3, #28]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009d6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009f0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000a00:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	460b      	mov	r3, r1
 8000a38:	70fb      	strb	r3, [r7, #3]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	78fa      	ldrb	r2, [r7, #3]
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a50:	43d2      	mvns	r2, r2
 8000a52:	401a      	ands	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78b9      	ldrb	r1, [r7, #2]
 8000a5e:	78fa      	ldrb	r2, [r7, #3]
 8000a60:	0052      	lsls	r2, r2, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	601a      	str	r2, [r3, #0]

}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b087      	sub	sp, #28
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	60fb      	str	r3, [r7, #12]

	return value;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	b2db      	uxtb	r3, r3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <GPIOWritePin>:

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	78fa      	ldrb	r2, [r7, #3]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	78b9      	ldrb	r1, [r7, #2]
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	615a      	str	r2, [r3, #20]
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
 8000b04:	4613      	mov	r3, r2
 8000b06:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	08db      	lsrs	r3, r3, #3
 8000b10:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000b1a:	7afa      	ldrb	r2, [r7, #11]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b24:	7aba      	ldrb	r2, [r7, #10]
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	210f      	movs	r1, #15
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	4611      	mov	r1, r2
 8000b32:	7afa      	ldrb	r2, [r7, #11]
 8000b34:	4019      	ands	r1, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000b3e:	7afa      	ldrb	r2, [r7, #11]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3208      	adds	r2, #8
 8000b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b48:	78b9      	ldrb	r1, [r7, #2]
 8000b4a:	7aba      	ldrb	r2, [r7, #10]
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4611      	mov	r1, r2
 8000b54:	7afa      	ldrb	r2, [r7, #11]
 8000b56:	4319      	orrs	r1, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	70fb      	strb	r3, [r7, #3]
 8000b76:	4613      	mov	r3, r2
 8000b78:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	43d2      	mvns	r2, r2
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	78b9      	ldrb	r1, [r7, #2]
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	605a      	str	r2, [r3, #4]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	70fb      	strb	r3, [r7, #3]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	2103      	movs	r1, #3
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	78b9      	ldrb	r1, [r7, #2]
 8000bde:	78fa      	ldrb	r2, [r7, #3]
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	fa01 f202 	lsl.w	r2, r1, r2
 8000be6:	431a      	orrs	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	60da      	str	r2, [r3, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	78fa      	ldrb	r2, [r7, #3]
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	2103      	movs	r1, #3
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	78b9      	ldrb	r1, [r7, #2]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	609a      	str	r2, [r3, #8]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	69da      	ldr	r2, [r3, #28]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	03db      	lsls	r3, r3, #15
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d10d      	bne.n	8000ca6 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	039b      	lsls	r3, r3, #14
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cae:	f023 030f 	bic.w	r3, r3, #15
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	69da      	ldr	r2, [r3, #28]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	029b      	lsls	r3, r3, #10
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	601a      	str	r2, [r3, #0]

}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f000 f84c 	bl	8000dbc <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000d24:	bf00      	nop
 8000d26:	2101      	movs	r1, #1
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 f869 	bl	8000e00 <I2C_GetFlagStatus>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f8      	beq.n	8000d26 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	f023 0301 	bic.w	r3, r3, #1
 8000d40:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	4619      	mov	r1, r3
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f86f 	bl	8000e2a <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000d4c:	bf00      	nop
 8000d4e:	2102      	movs	r1, #2
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f000 f855 	bl	8000e00 <I2C_GetFlagStatus>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f8      	beq.n	8000d4e <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f000 f874 	bl	8000e4a <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000d62:	e012      	b.n	8000d8a <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000d64:	bf00      	nop
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f849 	bl	8000e00 <I2C_GetFlagStatus>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f8      	beq.n	8000d66 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e9      	bne.n	8000d64 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000d90:	bf00      	nop
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 f833 	bl	8000e00 <I2C_GetFlagStatus>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d1f8      	bne.n	8000d92 <I2CMasterSendData+0x86>
 8000da0:	2104      	movs	r1, #4
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f82c 	bl	8000e00 <I2C_GetFlagStatus>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d1f1      	bne.n	8000d92 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f815 	bl	8000dde <I2C_SendStopBit>

}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000e7c:	78fa      	ldrb	r2, [r7, #3]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	621a      	str	r2, [r3, #32]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000e90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e94:	f7ff f9fc 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e98:	2030      	movs	r0, #48	; 0x30
 8000e9a:	f000 f845 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea2:	f7ff f9f5 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000ea6:	2030      	movs	r0, #48	; 0x30
 8000ea8:	f000 f83e 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eb0:	f7ff f9ee 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000eb4:	2030      	movs	r0, #48	; 0x30
 8000eb6:	f000 f837 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000eba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ebe:	f7ff f9e7 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000ec2:	2020      	movs	r0, #32
 8000ec4:	f000 f830 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000ec8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ecc:	f7ff f9e0 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ed0:	2028      	movs	r0, #40	; 0x28
 8000ed2:	f000 f829 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ed6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eda:	f7ff f9d9 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f000 f822 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ee4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ee8:	f7ff f9d2 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 f81b 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000ef2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef6:	f7ff f9cb 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 f814 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f04:	f7ff f9c4 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f000 f80d 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f12:	f7ff f9bd 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f16:	200c      	movs	r0, #12
 8000f18:	f000 f806 	bl	8000f28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000f1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f20:	f7ff f9b6 	bl	8000290 <delay_us>

	return;
 8000f24:	bf00      	nop
}
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 030c 	orr.w	r3, r3, #12
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	f043 030c 	orr.w	r3, r3, #12
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <lcd_pcf8574_send_cmd+0x5c>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <lcd_pcf8574_send_cmd+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	2204      	movs	r2, #4
 8000f76:	f7ff fec9 	bl	8000d0c <I2CMasterSendData>

	return;
 8000f7a:	bf00      	nop
}
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f043 030d 	orr.w	r3, r3, #13
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f043 0309 	orr.w	r3, r3, #9
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	f043 030d 	orr.w	r3, r3, #13
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0309 	orr.w	r3, r3, #9
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <lcd_pcf8574_send_data+0x5c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <lcd_pcf8574_send_data+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f107 0108 	add.w	r1, r7, #8
 8000fd8:	2204      	movs	r2, #4
 8000fda:	f7ff fe97 	bl	8000d0c <I2CMasterSendData>

	return;
 8000fde:	bf00      	nop
}
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000004 	.word	0x20000004

08000ff0 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ff97 	bl	8000f28 <lcd_pcf8574_send_cmd>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8001002:	2002      	movs	r0, #2
 8001004:	f7ff ff90 	bl	8000f28 <lcd_pcf8574_send_cmd>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <RTC_Alarm_IRQHandler+0x24>)
 8001014:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001016:	f000 f80d 	bl	8001034 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]

	return;
 8001026:	bf00      	nop
}
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013c14 	.word	0x40013c14

08001034 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001038:	2201      	movs	r2, #1
 800103a:	210f      	movs	r1, #15
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <RTC_Alarm_Interrupt_Callback+0x14>)
 800103e:	f7ff fd39 	bl	8000ab4 <GPIOWritePin>

	return;
 8001042:	bf00      	nop
}
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40020c00 	.word	0x40020c00

0800104c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a88      	ldr	r2, [pc, #544]	; (8001278 <EnablePeriClk+0x22c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d108      	bne.n	800106e <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800105c:	4b87      	ldr	r3, [pc, #540]	; (800127c <EnablePeriClk+0x230>)
 800105e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f043 0201 	orr.w	r2, r3, #1
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 800106c:	e19b      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a83      	ldr	r2, [pc, #524]	; (8001280 <EnablePeriClk+0x234>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d108      	bne.n	8001088 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001076:	4b81      	ldr	r3, [pc, #516]	; (800127c <EnablePeriClk+0x230>)
 8001078:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	e18e      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <EnablePeriClk+0x238>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d108      	bne.n	80010a2 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001090:	4b7a      	ldr	r3, [pc, #488]	; (800127c <EnablePeriClk+0x230>)
 8001092:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f043 0204 	orr.w	r2, r3, #4
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	e181      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a78      	ldr	r2, [pc, #480]	; (8001288 <EnablePeriClk+0x23c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d108      	bne.n	80010bc <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <EnablePeriClk+0x230>)
 80010ac:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f043 0208 	orr.w	r2, r3, #8
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	e174      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a73      	ldr	r2, [pc, #460]	; (800128c <EnablePeriClk+0x240>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d108      	bne.n	80010d6 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010c4:	4b6d      	ldr	r3, [pc, #436]	; (800127c <EnablePeriClk+0x230>)
 80010c6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f043 0210 	orr.w	r2, r3, #16
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	e167      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <EnablePeriClk+0x244>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d108      	bne.n	80010f0 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <EnablePeriClk+0x230>)
 80010e0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f043 0220 	orr.w	r2, r3, #32
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	e15a      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a68      	ldr	r2, [pc, #416]	; (8001294 <EnablePeriClk+0x248>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d108      	bne.n	800110a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010f8:	4b60      	ldr	r3, [pc, #384]	; (800127c <EnablePeriClk+0x230>)
 80010fa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	e14d      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a62      	ldr	r2, [pc, #392]	; (8001298 <EnablePeriClk+0x24c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d108      	bne.n	8001124 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001112:	4b5a      	ldr	r3, [pc, #360]	; (800127c <EnablePeriClk+0x230>)
 8001114:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	e140      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a5d      	ldr	r2, [pc, #372]	; (800129c <EnablePeriClk+0x250>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d108      	bne.n	800113e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <EnablePeriClk+0x230>)
 800112e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	e133      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <EnablePeriClk+0x254>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d108      	bne.n	8001158 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <EnablePeriClk+0x258>)
 8001148:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	e126      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a53      	ldr	r2, [pc, #332]	; (80012a8 <EnablePeriClk+0x25c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d108      	bne.n	8001172 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <EnablePeriClk+0x260>)
 8001162:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	e119      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <EnablePeriClk+0x264>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d108      	bne.n	800118c <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <EnablePeriClk+0x260>)
 800117c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	e10c      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <EnablePeriClk+0x268>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d108      	bne.n	80011a6 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001194:	4b45      	ldr	r3, [pc, #276]	; (80012ac <EnablePeriClk+0x260>)
 8001196:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	e0ff      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <EnablePeriClk+0x26c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d108      	bne.n	80011c0 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <EnablePeriClk+0x260>)
 80011b0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	e0f2      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <EnablePeriClk+0x270>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d108      	bne.n	80011da <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <EnablePeriClk+0x260>)
 80011ca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	e0e5      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a38      	ldr	r2, [pc, #224]	; (80012c0 <EnablePeriClk+0x274>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d108      	bne.n	80011f4 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <EnablePeriClk+0x258>)
 80011e4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	e0d8      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a33      	ldr	r2, [pc, #204]	; (80012c4 <EnablePeriClk+0x278>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d108      	bne.n	800120e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <EnablePeriClk+0x260>)
 80011fe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	e0cb      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <EnablePeriClk+0x27c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d108      	bne.n	8001228 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <EnablePeriClk+0x260>)
 8001218:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	e0be      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a28      	ldr	r2, [pc, #160]	; (80012cc <EnablePeriClk+0x280>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d108      	bne.n	8001242 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <EnablePeriClk+0x260>)
 8001232:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	e0b1      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <EnablePeriClk+0x284>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d108      	bne.n	800125c <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <EnablePeriClk+0x260>)
 800124c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	e0a4      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <EnablePeriClk+0x288>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d139      	bne.n	80012d8 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <EnablePeriClk+0x258>)
 8001266:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f043 0220 	orr.w	r2, r3, #32
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	e097      	b.n	80013a6 <EnablePeriClk+0x35a>
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000
 800127c:	40023830 	.word	0x40023830
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40022000 	.word	0x40022000
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40023844 	.word	0x40023844
 80012a8:	40003800 	.word	0x40003800
 80012ac:	40023840 	.word	0x40023840
 80012b0:	40003c00 	.word	0x40003c00
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40005800 	.word	0x40005800
 80012bc:	40005c00 	.word	0x40005c00
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40004800 	.word	0x40004800
 80012cc:	40004c00 	.word	0x40004c00
 80012d0:	40005000 	.word	0x40005000
 80012d4:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <EnablePeriClk+0x364>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d108      	bne.n	80012f2 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <EnablePeriClk+0x368>)
 80012e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f043 0210 	orr.w	r2, r3, #16
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	e059      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <EnablePeriClk+0x36c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d108      	bne.n	800130c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <EnablePeriClk+0x368>)
 80012fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f043 0220 	orr.w	r2, r3, #32
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	e04c      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <EnablePeriClk+0x370>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d108      	bne.n	8001326 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <EnablePeriClk+0x374>)
 8001316:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	e03f      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <EnablePeriClk+0x378>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d108      	bne.n	8001340 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <EnablePeriClk+0x374>)
 8001330:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	e032      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001346:	d108      	bne.n	800135a <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <EnablePeriClk+0x368>)
 800134a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	e025      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EnablePeriClk+0x37c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d108      	bne.n	8001374 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <EnablePeriClk+0x368>)
 8001364:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f043 0202 	orr.w	r2, r3, #2
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	e018      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <EnablePeriClk+0x380>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d108      	bne.n	800138e <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <EnablePeriClk+0x368>)
 800137e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 0204 	orr.w	r2, r3, #4
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	e00b      	b.n	80013a6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <EnablePeriClk+0x384>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d107      	bne.n	80013a6 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <EnablePeriClk+0x368>)
 8001398:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f043 0208 	orr.w	r2, r3, #8
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40001000 	.word	0x40001000
 80013b4:	40023840 	.word	0x40023840
 80013b8:	40001400 	.word	0x40001400
 80013bc:	40026000 	.word	0x40026000
 80013c0:	40023830 	.word	0x40023830
 80013c4:	40026400 	.word	0x40026400
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40000c00 	.word	0x40000c00

080013d4 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80013f6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80013fa:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	431a      	orrs	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <main>:

static int calculation(uint8_t *buffer, uint8_t count);
static void process_key_press(void);

int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	//Configure the Timer
	configure_delay_timer();
 800141c:	f7fe ff50 	bl	80002c0 <configure_delay_timer>

	//Configure the I2C Peripheral
	configure_i2c();
 8001420:	f7fe ff70 	bl	8000304 <configure_i2c>

	//Disable printf() buffering
	setbuf(stdout, NULL);
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <main+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fd1b 	bl	8001e68 <setbuf>

	//Initialize the LCD module
	delay_us(1000000);
 8001432:	482e      	ldr	r0, [pc, #184]	; (80014ec <main+0xd4>)
 8001434:	f7fe ff2c 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001438:	f7ff fd28 	bl	8000e8c <lcd_pcf8574_init>
	delay_us(100000);
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <main+0xd8>)
 800143e:	f7fe ff27 	bl	8000290 <delay_us>

	lcd_pcf8574_clear_screen();
 8001442:	f7ff fdd5 	bl	8000ff0 <lcd_pcf8574_clear_screen>
	delay_us(3000);
 8001446:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144a:	f7fe ff21 	bl	8000290 <delay_us>
	lcd_pcf8574_return_home();
 800144e:	f7ff fdd6 	bl	8000ffe <lcd_pcf8574_return_home>
	delay_us(3000);
 8001452:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001456:	f7fe ff1b 	bl	8000290 <delay_us>
	printf(">");
 800145a:	203e      	movs	r0, #62	; 0x3e
 800145c:	f000 fce0 	bl	8001e20 <putchar>

	//GPIO Configuration for Columns of Matrix Keypad
	EnablePeriClk(GPIO_PORT_COL);
 8001460:	4824      	ldr	r0, [pc, #144]	; (80014f4 <main+0xdc>)
 8001462:	f7ff fdf3 	bl	800104c <EnablePeriClk>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_1, GPIO_MODE_OUTPUT);
 8001466:	2201      	movs	r2, #1
 8001468:	2100      	movs	r1, #0
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <main+0xdc>)
 800146c:	f7ff fadf 	bl	8000a2e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_2, GPIO_MODE_OUTPUT);
 8001470:	2201      	movs	r2, #1
 8001472:	2101      	movs	r1, #1
 8001474:	481f      	ldr	r0, [pc, #124]	; (80014f4 <main+0xdc>)
 8001476:	f7ff fada 	bl	8000a2e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_3, GPIO_MODE_OUTPUT);
 800147a:	2201      	movs	r2, #1
 800147c:	2102      	movs	r1, #2
 800147e:	481d      	ldr	r0, [pc, #116]	; (80014f4 <main+0xdc>)
 8001480:	f7ff fad5 	bl	8000a2e <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_4, GPIO_MODE_OUTPUT);
 8001484:	2201      	movs	r2, #1
 8001486:	2103      	movs	r1, #3
 8001488:	481a      	ldr	r0, [pc, #104]	; (80014f4 <main+0xdc>)
 800148a:	f7ff fad0 	bl	8000a2e <GPIOSetMode>

	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_1,GPIO_LOW);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <main+0xdc>)
 8001494:	f7ff fb0e 	bl	8000ab4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_2,GPIO_LOW);
 8001498:	2200      	movs	r2, #0
 800149a:	2101      	movs	r1, #1
 800149c:	4815      	ldr	r0, [pc, #84]	; (80014f4 <main+0xdc>)
 800149e:	f7ff fb09 	bl	8000ab4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_3,GPIO_LOW);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <main+0xdc>)
 80014a8:	f7ff fb04 	bl	8000ab4 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_4,GPIO_LOW);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2103      	movs	r1, #3
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <main+0xdc>)
 80014b2:	f7ff faff 	bl	8000ab4 <GPIOWritePin>

	//GPIO Configuration for Rows of Matrix Keypad
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_1,EXTI_FALLING_TRIGGER,GPIO_ROW_1_IRQ_NUM);
 80014b6:	2306      	movs	r3, #6
 80014b8:	2201      	movs	r2, #1
 80014ba:	2100      	movs	r1, #0
 80014bc:	480e      	ldr	r0, [pc, #56]	; (80014f8 <main+0xe0>)
 80014be:	f7fe ff97 	bl	80003f0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_2,EXTI_FALLING_TRIGGER,GPIO_ROW_2_IRQ_NUM);
 80014c2:	2307      	movs	r3, #7
 80014c4:	2201      	movs	r2, #1
 80014c6:	2101      	movs	r1, #1
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <main+0xe0>)
 80014ca:	f7fe ff91 	bl	80003f0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_3,EXTI_FALLING_TRIGGER,GPIO_ROW_3_IRQ_NUM);
 80014ce:	2308      	movs	r3, #8
 80014d0:	2201      	movs	r2, #1
 80014d2:	2102      	movs	r1, #2
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <main+0xe0>)
 80014d6:	f7fe ff8b 	bl	80003f0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_4,EXTI_FALLING_TRIGGER,GPIO_ROW_4_IRQ_NUM);
 80014da:	2309      	movs	r3, #9
 80014dc:	2201      	movs	r2, #1
 80014de:	2103      	movs	r1, #3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <main+0xe0>)
 80014e2:	f7fe ff85 	bl	80003f0 <configure_external_gpio_interrupt>

	while(1);
 80014e6:	e7fe      	b.n	80014e6 <main+0xce>
 80014e8:	20000020 	.word	0x20000020
 80014ec:	000f4240 	.word	0x000f4240
 80014f0:	000186a0 	.word	0x000186a0
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000

080014fc <calculation>:
*/
	return 0;
}

int calculation(uint8_t *buffer, uint8_t count)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	int num1,num2,value,i,j,k,place_value;
	uint8_t operation;

	i=0;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
	//Parsing the first number
	while(buffer[i]>=48 && buffer[i] <=57)
 800150c:	e002      	b.n	8001514 <calculation+0x18>
		i++;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3301      	adds	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
	while(buffer[i]>=48 && buffer[i] <=57)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b2f      	cmp	r3, #47	; 0x2f
 800151e:	d905      	bls.n	800152c <calculation+0x30>
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b39      	cmp	r3, #57	; 0x39
 800152a:	d9f0      	bls.n	800150e <calculation+0x12>

	operation = buffer[i];
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	72fb      	strb	r3, [r7, #11]

	num1 = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	3b01      	subs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e020      	b.n	8001584 <calculation+0x88>
	{
		place_value = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3b01      	subs	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	e008      	b.n	8001560 <calculation+0x64>
			place_value *= 10;
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	3b01      	subs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	429a      	cmp	r2, r3
 8001566:	dcf2      	bgt.n	800154e <calculation+0x52>
		num1 += (buffer[j]-48)*place_value;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3b30      	subs	r3, #48	; 0x30
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157a:	4413      	add	r3, r2
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3b01      	subs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	dadb      	bge.n	8001542 <calculation+0x46>
	}

	//Parsing the second number
	num2 = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	3b02      	subs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e020      	b.n	80015d8 <calculation+0xdc>
	{
			place_value = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	3b02      	subs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	e008      	b.n	80015b4 <calculation+0xb8>
				place_value *= 10;
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dcf2      	bgt.n	80015a2 <calculation+0xa6>
			num2 += (buffer[j]-48)*place_value;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3b30      	subs	r3, #48	; 0x30
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	4413      	add	r3, r2
 80015d0:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dcda      	bgt.n	8001596 <calculation+0x9a>
	}

	switch(operation)
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	3b41      	subs	r3, #65	; 0x41
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d821      	bhi.n	800162c <calculation+0x130>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <calculation+0xf4>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001601 	.word	0x08001601
 80015f4:	0800160b 	.word	0x0800160b
 80015f8:	08001615 	.word	0x08001615
 80015fc:	08001621 	.word	0x08001621
	{
		case 'A':
			value = num1 + num2;
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	4413      	add	r3, r2
 8001606:	61fb      	str	r3, [r7, #28]
			break;
 8001608:	e011      	b.n	800162e <calculation+0x132>
		case 'B':
			value = num1 - num2;
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	61fb      	str	r3, [r7, #28]
			break;
 8001612:	e00c      	b.n	800162e <calculation+0x132>
		case 'C':
			value = num1 * num2;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]
			break;
 800161e:	e006      	b.n	800162e <calculation+0x132>
		case 'D':
			value = num1 / num2;
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	fb92 f3f3 	sdiv	r3, r2, r3
 8001628:	61fb      	str	r3, [r7, #28]
			break;
 800162a:	e000      	b.n	800162e <calculation+0x132>
		default:
			break;
 800162c:	bf00      	nop
	}

	return value;
 800162e:	69fb      	ldr	r3, [r7, #28]

}
 8001630:	4618      	mov	r0, r3
 8001632:	372c      	adds	r7, #44	; 0x2c
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <EXTI0_IRQHandler+0x98>)
 8001644:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=0;
 8001646:	2300      	movs	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e02e      	b.n	80016ae <EXTI0_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <EXTI0_IRQHandler+0x9c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4820      	ldr	r0, [pc, #128]	; (80016dc <EXTI0_IRQHandler+0xa0>)
 800165c:	f7ff fa2a 	bl	8000ab4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <EXTI0_IRQHandler+0xa4>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	4619      	mov	r1, r3
 8001668:	481e      	ldr	r0, [pc, #120]	; (80016e4 <EXTI0_IRQHandler+0xa8>)
 800166a:	f7ff fa04 	bl	8000a76 <GPIOReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d111      	bne.n	8001698 <EXTI0_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	491b      	ldr	r1, [pc, #108]	; (80016e8 <EXTI0_IRQHandler+0xac>)
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	440a      	add	r2, r1
 800167e:	4413      	add	r3, r2
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <EXTI0_IRQHandler+0xb0>)
 8001684:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_1_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <EXTI0_IRQHandler+0x9c>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <EXTI0_IRQHandler+0xa0>)
 8001692:	f7ff fa0f 	bl	8000ab4 <GPIOWritePin>

			break;
 8001696:	e00d      	b.n	80016b4 <EXTI0_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <EXTI0_IRQHandler+0x9c>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <EXTI0_IRQHandler+0xa0>)
 80016a4:	f7ff fa06 	bl	8000ab4 <GPIOWritePin>
	for(col=0;col<4;col++)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d9cd      	bls.n	8001650 <EXTI0_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <EXTI0_IRQHandler+0xb4>)
 80016b6:	f7fe fdeb 	bl	8000290 <delay_us>

	process_key_press();
 80016ba:	f000 f92f 	bl	800191c <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_1);		// Clearing the EXTI_PR Register
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_1_IRQ_NUM);

	return;
 80016ca:	bf00      	nop
}
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40013c14 	.word	0x40013c14
 80016d8:	20000008 	.word	0x20000008
 80016dc:	40020800 	.word	0x40020800
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	40020000 	.word	0x40020000
 80016e8:	20000010 	.word	0x20000010
 80016ec:	2000011d 	.word	0x2000011d
 80016f0:	0007a120 	.word	0x0007a120

080016f4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <EXTI1_IRQHandler+0x98>)
 80016fc:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=1;
 80016fe:	2301      	movs	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e02e      	b.n	8001766 <EXTI1_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a21      	ldr	r2, [pc, #132]	; (8001790 <EXTI1_IRQHandler+0x9c>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <EXTI1_IRQHandler+0xa0>)
 8001714:	f7ff f9ce 	bl	8000ab4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <EXTI1_IRQHandler+0xa4>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	4619      	mov	r1, r3
 8001720:	481e      	ldr	r0, [pc, #120]	; (800179c <EXTI1_IRQHandler+0xa8>)
 8001722:	f7ff f9a8 	bl	8000a76 <GPIOReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	d111      	bne.n	8001750 <EXTI1_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	491b      	ldr	r1, [pc, #108]	; (80017a0 <EXTI1_IRQHandler+0xac>)
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	440a      	add	r2, r1
 8001736:	4413      	add	r3, r2
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <EXTI1_IRQHandler+0xb0>)
 800173c:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_2_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <EXTI1_IRQHandler+0x9c>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	4812      	ldr	r0, [pc, #72]	; (8001794 <EXTI1_IRQHandler+0xa0>)
 800174a:	f7ff f9b3 	bl	8000ab4 <GPIOWritePin>

			break;
 800174e:	e00d      	b.n	800176c <EXTI1_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <EXTI1_IRQHandler+0x9c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <EXTI1_IRQHandler+0xa0>)
 800175c:	f7ff f9aa 	bl	8000ab4 <GPIOWritePin>
	for(col=0;col<4;col++)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d9cd      	bls.n	8001708 <EXTI1_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <EXTI1_IRQHandler+0xb4>)
 800176e:	f7fe fd8f 	bl	8000290 <delay_us>

	process_key_press();
 8001772:	f000 f8d3 	bl	800191c <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_2);		// Clearing the EXTI_PR Register
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f043 0202 	orr.w	r2, r3, #2
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_2_IRQ_NUM);

	return;
 8001782:	bf00      	nop
}
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40013c14 	.word	0x40013c14
 8001790:	20000008 	.word	0x20000008
 8001794:	40020800 	.word	0x40020800
 8001798:	2000000c 	.word	0x2000000c
 800179c:	40020000 	.word	0x40020000
 80017a0:	20000010 	.word	0x20000010
 80017a4:	2000011d 	.word	0x2000011d
 80017a8:	0007a120 	.word	0x0007a120

080017ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <EXTI2_IRQHandler+0x98>)
 80017b4:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e02e      	b.n	800181e <EXTI2_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <EXTI2_IRQHandler+0x9c>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	4820      	ldr	r0, [pc, #128]	; (800184c <EXTI2_IRQHandler+0xa0>)
 80017cc:	f7ff f972 	bl	8000ab4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <EXTI2_IRQHandler+0xa4>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	4619      	mov	r1, r3
 80017d8:	481e      	ldr	r0, [pc, #120]	; (8001854 <EXTI2_IRQHandler+0xa8>)
 80017da:	f7ff f94c 	bl	8000a76 <GPIOReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d111      	bne.n	8001808 <EXTI2_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	491b      	ldr	r1, [pc, #108]	; (8001858 <EXTI2_IRQHandler+0xac>)
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	440a      	add	r2, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <EXTI2_IRQHandler+0xb0>)
 80017f4:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_3_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <EXTI2_IRQHandler+0x9c>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <EXTI2_IRQHandler+0xa0>)
 8001802:	f7ff f957 	bl	8000ab4 <GPIOWritePin>

			break;
 8001806:	e00d      	b.n	8001824 <EXTI2_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <EXTI2_IRQHandler+0x9c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	480e      	ldr	r0, [pc, #56]	; (800184c <EXTI2_IRQHandler+0xa0>)
 8001814:	f7ff f94e 	bl	8000ab4 <GPIOWritePin>
	for(col=0;col<4;col++)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	3301      	adds	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d9cd      	bls.n	80017c0 <EXTI2_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 8001824:	480e      	ldr	r0, [pc, #56]	; (8001860 <EXTI2_IRQHandler+0xb4>)
 8001826:	f7fe fd33 	bl	8000290 <delay_us>

	process_key_press();
 800182a:	f000 f877 	bl	800191c <process_key_press>
	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_3);		// Clearing the EXTI_PR Register
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_3_IRQ_NUM);

	return;
 800183a:	bf00      	nop
}
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013c14 	.word	0x40013c14
 8001848:	20000008 	.word	0x20000008
 800184c:	40020800 	.word	0x40020800
 8001850:	2000000c 	.word	0x2000000c
 8001854:	40020000 	.word	0x40020000
 8001858:	20000010 	.word	0x20000010
 800185c:	2000011d 	.word	0x2000011d
 8001860:	0007a120 	.word	0x0007a120

08001864 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <EXTI3_IRQHandler+0x98>)
 800186c:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	row=3;
 800186e:	2303      	movs	r3, #3
 8001870:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e02e      	b.n	80018d6 <EXTI3_IRQHandler+0x72>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <EXTI3_IRQHandler+0x9c>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	2201      	movs	r2, #1
 8001880:	4619      	mov	r1, r3
 8001882:	4820      	ldr	r0, [pc, #128]	; (8001904 <EXTI3_IRQHandler+0xa0>)
 8001884:	f7ff f916 	bl	8000ab4 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <EXTI3_IRQHandler+0xa4>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	4619      	mov	r1, r3
 8001890:	481e      	ldr	r0, [pc, #120]	; (800190c <EXTI3_IRQHandler+0xa8>)
 8001892:	f7ff f8f0 	bl	8000a76 <GPIOReadPin>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d111      	bne.n	80018c0 <EXTI3_IRQHandler+0x5c>
		{
			c = char_matrix[row][col];
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	491b      	ldr	r1, [pc, #108]	; (8001910 <EXTI3_IRQHandler+0xac>)
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	440a      	add	r2, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <EXTI3_IRQHandler+0xb0>)
 80018ac:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_4_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4a13      	ldr	r2, [pc, #76]	; (8001900 <EXTI3_IRQHandler+0x9c>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <EXTI3_IRQHandler+0xa0>)
 80018ba:	f7ff f8fb 	bl	8000ab4 <GPIOWritePin>

			break;
 80018be:	e00d      	b.n	80018dc <EXTI3_IRQHandler+0x78>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <EXTI3_IRQHandler+0x9c>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <EXTI3_IRQHandler+0xa0>)
 80018cc:	f7ff f8f2 	bl	8000ab4 <GPIOWritePin>
	for(col=0;col<4;col++)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d9cd      	bls.n	8001878 <EXTI3_IRQHandler+0x14>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 80018dc:	480e      	ldr	r0, [pc, #56]	; (8001918 <EXTI3_IRQHandler+0xb4>)
 80018de:	f7fe fcd7 	bl	8000290 <delay_us>

	process_key_press();
 80018e2:	f000 f81b 	bl	800191c <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_4);		// Clearing the EXTI_PR Register
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f043 0208 	orr.w	r2, r3, #8
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_4_IRQ_NUM);

	return;
 80018f2:	bf00      	nop
}
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40013c14 	.word	0x40013c14
 8001900:	20000008 	.word	0x20000008
 8001904:	40020800 	.word	0x40020800
 8001908:	2000000c 	.word	0x2000000c
 800190c:	40020000 	.word	0x40020000
 8001910:	20000010 	.word	0x20000010
 8001914:	2000011d 	.word	0x2000011d
 8001918:	0007a120 	.word	0x0007a120

0800191c <process_key_press>:

static void process_key_press(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
	uint8_t printed_c;
	int value;

	char_buffer[char_count] = c;
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <process_key_press+0x100>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <process_key_press+0x104>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <process_key_press+0x108>)
 800192e:	5499      	strb	r1, [r3, r2]
	char_count++;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <process_key_press+0x100>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <process_key_press+0x100>)
 800193a:	701a      	strb	r2, [r3, #0]

	if(c>=48 && c<=57)
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <process_key_press+0x104>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b2f      	cmp	r3, #47	; 0x2f
 8001942:	d90b      	bls.n	800195c <process_key_press+0x40>
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <process_key_press+0x104>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b39      	cmp	r3, #57	; 0x39
 800194a:	d807      	bhi.n	800195c <process_key_press+0x40>
	{
		printed_c = c;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <process_key_press+0x104>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	71fb      	strb	r3, [r7, #7]
		printf("%c", printed_c);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fa63 	bl	8001e20 <putchar>
		return;
 800195a:	e05b      	b.n	8001a14 <process_key_press+0xf8>
	}
	else
	{
		if(c == 'A')
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <process_key_press+0x104>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b41      	cmp	r3, #65	; 0x41
 8001962:	d106      	bne.n	8001972 <process_key_press+0x56>
		{
			printed_c = '+';
 8001964:	232b      	movs	r3, #43	; 0x2b
 8001966:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fa58 	bl	8001e20 <putchar>
			return;
 8001970:	e050      	b.n	8001a14 <process_key_press+0xf8>
		}
		else if(c == 'B')
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <process_key_press+0x104>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b42      	cmp	r3, #66	; 0x42
 8001978:	d106      	bne.n	8001988 <process_key_press+0x6c>
		{
			printed_c = '-';
 800197a:	232d      	movs	r3, #45	; 0x2d
 800197c:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fa4d 	bl	8001e20 <putchar>
			return;
 8001986:	e045      	b.n	8001a14 <process_key_press+0xf8>
		}
		else if(c == 'C')
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <process_key_press+0x104>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b43      	cmp	r3, #67	; 0x43
 800198e:	d106      	bne.n	800199e <process_key_press+0x82>
		{
			printed_c = 'x';
 8001990:	2378      	movs	r3, #120	; 0x78
 8001992:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fa42 	bl	8001e20 <putchar>
			return;
 800199c:	e03a      	b.n	8001a14 <process_key_press+0xf8>
		}
		else if(c == 'D')
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <process_key_press+0x104>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b44      	cmp	r3, #68	; 0x44
 80019a4:	d106      	bne.n	80019b4 <process_key_press+0x98>
		{
			printed_c = '/';
 80019a6:	232f      	movs	r3, #47	; 0x2f
 80019a8:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fa37 	bl	8001e20 <putchar>
			return;
 80019b2:	e02f      	b.n	8001a14 <process_key_press+0xf8>
		}
		else if(c == '#')
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <process_key_press+0x104>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b23      	cmp	r3, #35	; 0x23
 80019ba:	d114      	bne.n	80019e6 <process_key_press+0xca>
		{
			printed_c = '=';
 80019bc:	233d      	movs	r3, #61	; 0x3d
 80019be:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fa2c 	bl	8001e20 <putchar>
			value = calculation(char_buffer,char_count);
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <process_key_press+0x100>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <process_key_press+0x108>)
 80019d0:	f7ff fd94 	bl	80014fc <calculation>
 80019d4:	6038      	str	r0, [r7, #0]
			printf("%d", value);
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	4813      	ldr	r0, [pc, #76]	; (8001a28 <process_key_press+0x10c>)
 80019da:	f000 fa09 	bl	8001df0 <iprintf>
			char_count = 0;
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <process_key_press+0x100>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
			return;
 80019e4:	e016      	b.n	8001a14 <process_key_press+0xf8>
		}
		else if(c == '*')
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <process_key_press+0x104>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b2a      	cmp	r3, #42	; 0x2a
 80019ec:	d112      	bne.n	8001a14 <process_key_press+0xf8>
		{
			char_count = 0;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <process_key_press+0x100>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
			lcd_pcf8574_clear_screen();
 80019f4:	f7ff fafc 	bl	8000ff0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 80019f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019fc:	f7fe fc48 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8001a00:	f7ff fafd 	bl	8000ffe <lcd_pcf8574_return_home>
			delay_us(3000);
 8001a04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a08:	f7fe fc42 	bl	8000290 <delay_us>
			printf(">");
 8001a0c:	203e      	movs	r0, #62	; 0x3e
 8001a0e:	f000 fa07 	bl	8001e20 <putchar>
			return;
 8001a12:	bf00      	nop
		}
	}
}
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000011c 	.word	0x2000011c
 8001a20:	2000011d 	.word	0x2000011d
 8001a24:	200000cc 	.word	0x200000cc
 8001a28:	08002dac 	.word	0x08002dac

08001a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fca7 	bl	80003d4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f000 f846 	bl	8001bc0 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20020000 	.word	0x20020000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000120 	.word	0x20000120
 8001b68:	20000138 	.word	0x20000138

08001b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <LoopForever+0xe>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <LoopForever+0x16>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b9a:	f000 f817 	bl	8001bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7ff fc3b 	bl	8001418 <main>

08001ba2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   r0, =_estack
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001bb0:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 8001bb4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001bb8:	20000134 	.word	0x20000134

08001bbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <__errno>:
 8001bc0:	4b01      	ldr	r3, [pc, #4]	; (8001bc8 <__errno+0x8>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000020 	.word	0x20000020

08001bcc <__libc_init_array>:
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4d0d      	ldr	r5, [pc, #52]	; (8001c04 <__libc_init_array+0x38>)
 8001bd0:	4c0d      	ldr	r4, [pc, #52]	; (8001c08 <__libc_init_array+0x3c>)
 8001bd2:	1b64      	subs	r4, r4, r5
 8001bd4:	10a4      	asrs	r4, r4, #2
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	42a6      	cmp	r6, r4
 8001bda:	d109      	bne.n	8001bf0 <__libc_init_array+0x24>
 8001bdc:	4d0b      	ldr	r5, [pc, #44]	; (8001c0c <__libc_init_array+0x40>)
 8001bde:	4c0c      	ldr	r4, [pc, #48]	; (8001c10 <__libc_init_array+0x44>)
 8001be0:	f001 f8d8 	bl	8002d94 <_init>
 8001be4:	1b64      	subs	r4, r4, r5
 8001be6:	10a4      	asrs	r4, r4, #2
 8001be8:	2600      	movs	r6, #0
 8001bea:	42a6      	cmp	r6, r4
 8001bec:	d105      	bne.n	8001bfa <__libc_init_array+0x2e>
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf4:	4798      	blx	r3
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7ee      	b.n	8001bd8 <__libc_init_array+0xc>
 8001bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfe:	4798      	blx	r3
 8001c00:	3601      	adds	r6, #1
 8001c02:	e7f2      	b.n	8001bea <__libc_init_array+0x1e>
 8001c04:	08002e48 	.word	0x08002e48
 8001c08:	08002e48 	.word	0x08002e48
 8001c0c:	08002e48 	.word	0x08002e48
 8001c10:	08002e4c 	.word	0x08002e4c

08001c14 <malloc>:
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <malloc+0xc>)
 8001c16:	4601      	mov	r1, r0
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f000 b875 	b.w	8001d08 <_malloc_r>
 8001c1e:	bf00      	nop
 8001c20:	20000020 	.word	0x20000020

08001c24 <memset>:
 8001c24:	4402      	add	r2, r0
 8001c26:	4603      	mov	r3, r0
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d100      	bne.n	8001c2e <memset+0xa>
 8001c2c:	4770      	bx	lr
 8001c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c32:	e7f9      	b.n	8001c28 <memset+0x4>

08001c34 <_free_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4605      	mov	r5, r0
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	d041      	beq.n	8001cc0 <_free_r+0x8c>
 8001c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c40:	1f0c      	subs	r4, r1, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfb8      	it	lt
 8001c46:	18e4      	addlt	r4, r4, r3
 8001c48:	f000 fcb8 	bl	80025bc <__malloc_lock>
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <_free_r+0x90>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	b933      	cbnz	r3, 8001c60 <_free_r+0x2c>
 8001c52:	6063      	str	r3, [r4, #4]
 8001c54:	6014      	str	r4, [r2, #0]
 8001c56:	4628      	mov	r0, r5
 8001c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c5c:	f000 bcb4 	b.w	80025c8 <__malloc_unlock>
 8001c60:	42a3      	cmp	r3, r4
 8001c62:	d908      	bls.n	8001c76 <_free_r+0x42>
 8001c64:	6820      	ldr	r0, [r4, #0]
 8001c66:	1821      	adds	r1, r4, r0
 8001c68:	428b      	cmp	r3, r1
 8001c6a:	bf01      	itttt	eq
 8001c6c:	6819      	ldreq	r1, [r3, #0]
 8001c6e:	685b      	ldreq	r3, [r3, #4]
 8001c70:	1809      	addeq	r1, r1, r0
 8001c72:	6021      	streq	r1, [r4, #0]
 8001c74:	e7ed      	b.n	8001c52 <_free_r+0x1e>
 8001c76:	461a      	mov	r2, r3
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	b10b      	cbz	r3, 8001c80 <_free_r+0x4c>
 8001c7c:	42a3      	cmp	r3, r4
 8001c7e:	d9fa      	bls.n	8001c76 <_free_r+0x42>
 8001c80:	6811      	ldr	r1, [r2, #0]
 8001c82:	1850      	adds	r0, r2, r1
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	d10b      	bne.n	8001ca0 <_free_r+0x6c>
 8001c88:	6820      	ldr	r0, [r4, #0]
 8001c8a:	4401      	add	r1, r0
 8001c8c:	1850      	adds	r0, r2, r1
 8001c8e:	4283      	cmp	r3, r0
 8001c90:	6011      	str	r1, [r2, #0]
 8001c92:	d1e0      	bne.n	8001c56 <_free_r+0x22>
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	6053      	str	r3, [r2, #4]
 8001c9a:	4401      	add	r1, r0
 8001c9c:	6011      	str	r1, [r2, #0]
 8001c9e:	e7da      	b.n	8001c56 <_free_r+0x22>
 8001ca0:	d902      	bls.n	8001ca8 <_free_r+0x74>
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	e7d6      	b.n	8001c56 <_free_r+0x22>
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	1821      	adds	r1, r4, r0
 8001cac:	428b      	cmp	r3, r1
 8001cae:	bf04      	itt	eq
 8001cb0:	6819      	ldreq	r1, [r3, #0]
 8001cb2:	685b      	ldreq	r3, [r3, #4]
 8001cb4:	6063      	str	r3, [r4, #4]
 8001cb6:	bf04      	itt	eq
 8001cb8:	1809      	addeq	r1, r1, r0
 8001cba:	6021      	streq	r1, [r4, #0]
 8001cbc:	6054      	str	r4, [r2, #4]
 8001cbe:	e7ca      	b.n	8001c56 <_free_r+0x22>
 8001cc0:	bd38      	pop	{r3, r4, r5, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000124 	.word	0x20000124

08001cc8 <sbrk_aligned>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4e0e      	ldr	r6, [pc, #56]	; (8001d04 <sbrk_aligned+0x3c>)
 8001ccc:	460c      	mov	r4, r1
 8001cce:	6831      	ldr	r1, [r6, #0]
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	b911      	cbnz	r1, 8001cda <sbrk_aligned+0x12>
 8001cd4:	f000 f8b8 	bl	8001e48 <_sbrk_r>
 8001cd8:	6030      	str	r0, [r6, #0]
 8001cda:	4621      	mov	r1, r4
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 f8b3 	bl	8001e48 <_sbrk_r>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	d00a      	beq.n	8001cfc <sbrk_aligned+0x34>
 8001ce6:	1cc4      	adds	r4, r0, #3
 8001ce8:	f024 0403 	bic.w	r4, r4, #3
 8001cec:	42a0      	cmp	r0, r4
 8001cee:	d007      	beq.n	8001d00 <sbrk_aligned+0x38>
 8001cf0:	1a21      	subs	r1, r4, r0
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f000 f8a8 	bl	8001e48 <_sbrk_r>
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	d101      	bne.n	8001d00 <sbrk_aligned+0x38>
 8001cfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001d00:	4620      	mov	r0, r4
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
 8001d04:	20000128 	.word	0x20000128

08001d08 <_malloc_r>:
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0c:	1ccd      	adds	r5, r1, #3
 8001d0e:	f025 0503 	bic.w	r5, r5, #3
 8001d12:	3508      	adds	r5, #8
 8001d14:	2d0c      	cmp	r5, #12
 8001d16:	bf38      	it	cc
 8001d18:	250c      	movcc	r5, #12
 8001d1a:	2d00      	cmp	r5, #0
 8001d1c:	4607      	mov	r7, r0
 8001d1e:	db01      	blt.n	8001d24 <_malloc_r+0x1c>
 8001d20:	42a9      	cmp	r1, r5
 8001d22:	d905      	bls.n	8001d30 <_malloc_r+0x28>
 8001d24:	230c      	movs	r3, #12
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	2600      	movs	r6, #0
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d30:	4e2e      	ldr	r6, [pc, #184]	; (8001dec <_malloc_r+0xe4>)
 8001d32:	f000 fc43 	bl	80025bc <__malloc_lock>
 8001d36:	6833      	ldr	r3, [r6, #0]
 8001d38:	461c      	mov	r4, r3
 8001d3a:	bb34      	cbnz	r4, 8001d8a <_malloc_r+0x82>
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	4638      	mov	r0, r7
 8001d40:	f7ff ffc2 	bl	8001cc8 <sbrk_aligned>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	4604      	mov	r4, r0
 8001d48:	d14d      	bne.n	8001de6 <_malloc_r+0xde>
 8001d4a:	6834      	ldr	r4, [r6, #0]
 8001d4c:	4626      	mov	r6, r4
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d140      	bne.n	8001dd4 <_malloc_r+0xcc>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	4631      	mov	r1, r6
 8001d56:	4638      	mov	r0, r7
 8001d58:	eb04 0803 	add.w	r8, r4, r3
 8001d5c:	f000 f874 	bl	8001e48 <_sbrk_r>
 8001d60:	4580      	cmp	r8, r0
 8001d62:	d13a      	bne.n	8001dda <_malloc_r+0xd2>
 8001d64:	6821      	ldr	r1, [r4, #0]
 8001d66:	3503      	adds	r5, #3
 8001d68:	1a6d      	subs	r5, r5, r1
 8001d6a:	f025 0503 	bic.w	r5, r5, #3
 8001d6e:	3508      	adds	r5, #8
 8001d70:	2d0c      	cmp	r5, #12
 8001d72:	bf38      	it	cc
 8001d74:	250c      	movcc	r5, #12
 8001d76:	4629      	mov	r1, r5
 8001d78:	4638      	mov	r0, r7
 8001d7a:	f7ff ffa5 	bl	8001cc8 <sbrk_aligned>
 8001d7e:	3001      	adds	r0, #1
 8001d80:	d02b      	beq.n	8001dda <_malloc_r+0xd2>
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	442b      	add	r3, r5
 8001d86:	6023      	str	r3, [r4, #0]
 8001d88:	e00e      	b.n	8001da8 <_malloc_r+0xa0>
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	1b52      	subs	r2, r2, r5
 8001d8e:	d41e      	bmi.n	8001dce <_malloc_r+0xc6>
 8001d90:	2a0b      	cmp	r2, #11
 8001d92:	d916      	bls.n	8001dc2 <_malloc_r+0xba>
 8001d94:	1961      	adds	r1, r4, r5
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	6025      	str	r5, [r4, #0]
 8001d9a:	bf18      	it	ne
 8001d9c:	6059      	strne	r1, [r3, #4]
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	bf08      	it	eq
 8001da2:	6031      	streq	r1, [r6, #0]
 8001da4:	5162      	str	r2, [r4, r5]
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	4638      	mov	r0, r7
 8001daa:	f104 060b 	add.w	r6, r4, #11
 8001dae:	f000 fc0b 	bl	80025c8 <__malloc_unlock>
 8001db2:	f026 0607 	bic.w	r6, r6, #7
 8001db6:	1d23      	adds	r3, r4, #4
 8001db8:	1af2      	subs	r2, r6, r3
 8001dba:	d0b6      	beq.n	8001d2a <_malloc_r+0x22>
 8001dbc:	1b9b      	subs	r3, r3, r6
 8001dbe:	50a3      	str	r3, [r4, r2]
 8001dc0:	e7b3      	b.n	8001d2a <_malloc_r+0x22>
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	42a3      	cmp	r3, r4
 8001dc6:	bf0c      	ite	eq
 8001dc8:	6032      	streq	r2, [r6, #0]
 8001dca:	605a      	strne	r2, [r3, #4]
 8001dcc:	e7ec      	b.n	8001da8 <_malloc_r+0xa0>
 8001dce:	4623      	mov	r3, r4
 8001dd0:	6864      	ldr	r4, [r4, #4]
 8001dd2:	e7b2      	b.n	8001d3a <_malloc_r+0x32>
 8001dd4:	4634      	mov	r4, r6
 8001dd6:	6876      	ldr	r6, [r6, #4]
 8001dd8:	e7b9      	b.n	8001d4e <_malloc_r+0x46>
 8001dda:	230c      	movs	r3, #12
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4638      	mov	r0, r7
 8001de0:	f000 fbf2 	bl	80025c8 <__malloc_unlock>
 8001de4:	e7a1      	b.n	8001d2a <_malloc_r+0x22>
 8001de6:	6025      	str	r5, [r4, #0]
 8001de8:	e7de      	b.n	8001da8 <_malloc_r+0xa0>
 8001dea:	bf00      	nop
 8001dec:	20000124 	.word	0x20000124

08001df0 <iprintf>:
 8001df0:	b40f      	push	{r0, r1, r2, r3}
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <iprintf+0x2c>)
 8001df4:	b513      	push	{r0, r1, r4, lr}
 8001df6:	681c      	ldr	r4, [r3, #0]
 8001df8:	b124      	cbz	r4, 8001e04 <iprintf+0x14>
 8001dfa:	69a3      	ldr	r3, [r4, #24]
 8001dfc:	b913      	cbnz	r3, 8001e04 <iprintf+0x14>
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f000 fad6 	bl	80023b0 <__sinit>
 8001e04:	ab05      	add	r3, sp, #20
 8001e06:	9a04      	ldr	r2, [sp, #16]
 8001e08:	68a1      	ldr	r1, [r4, #8]
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f000 fc09 	bl	8002624 <_vfiprintf_r>
 8001e12:	b002      	add	sp, #8
 8001e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e18:	b004      	add	sp, #16
 8001e1a:	4770      	bx	lr
 8001e1c:	20000020 	.word	0x20000020

08001e20 <putchar>:
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <putchar+0x24>)
 8001e24:	681c      	ldr	r4, [r3, #0]
 8001e26:	4605      	mov	r5, r0
 8001e28:	b124      	cbz	r4, 8001e34 <putchar+0x14>
 8001e2a:	69a3      	ldr	r3, [r4, #24]
 8001e2c:	b913      	cbnz	r3, 8001e34 <putchar+0x14>
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f000 fabe 	bl	80023b0 <__sinit>
 8001e34:	68a2      	ldr	r2, [r4, #8]
 8001e36:	4629      	mov	r1, r5
 8001e38:	4620      	mov	r0, r4
 8001e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e3e:	f000 beb5 	b.w	8002bac <_putc_r>
 8001e42:	bf00      	nop
 8001e44:	20000020 	.word	0x20000020

08001e48 <_sbrk_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4d06      	ldr	r5, [pc, #24]	; (8001e64 <_sbrk_r+0x1c>)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	f7ff fe54 	bl	8001b00 <_sbrk>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_sbrk_r+0x1a>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_sbrk_r+0x1a>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20000130 	.word	0x20000130

08001e68 <setbuf>:
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6e:	bf0c      	ite	eq
 8001e70:	2202      	moveq	r2, #2
 8001e72:	2200      	movne	r2, #0
 8001e74:	f000 b800 	b.w	8001e78 <setvbuf>

08001e78 <setvbuf>:
 8001e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <setvbuf+0x17c>)
 8001e80:	681f      	ldr	r7, [r3, #0]
 8001e82:	4604      	mov	r4, r0
 8001e84:	460e      	mov	r6, r1
 8001e86:	4690      	mov	r8, r2
 8001e88:	b127      	cbz	r7, 8001e94 <setvbuf+0x1c>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	b913      	cbnz	r3, 8001e94 <setvbuf+0x1c>
 8001e8e:	4638      	mov	r0, r7
 8001e90:	f000 fa8e 	bl	80023b0 <__sinit>
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <setvbuf+0x180>)
 8001e96:	429c      	cmp	r4, r3
 8001e98:	d167      	bne.n	8001f6a <setvbuf+0xf2>
 8001e9a:	687c      	ldr	r4, [r7, #4]
 8001e9c:	f1b8 0f02 	cmp.w	r8, #2
 8001ea0:	d006      	beq.n	8001eb0 <setvbuf+0x38>
 8001ea2:	f1b8 0f01 	cmp.w	r8, #1
 8001ea6:	f200 809f 	bhi.w	8001fe8 <setvbuf+0x170>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	f2c0 809c 	blt.w	8001fe8 <setvbuf+0x170>
 8001eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eb2:	07db      	lsls	r3, r3, #31
 8001eb4:	d405      	bmi.n	8001ec2 <setvbuf+0x4a>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	0598      	lsls	r0, r3, #22
 8001eba:	d402      	bmi.n	8001ec2 <setvbuf+0x4a>
 8001ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ebe:	f000 fb15 	bl	80024ec <__retarget_lock_acquire_recursive>
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	4638      	mov	r0, r7
 8001ec6:	f000 f9df 	bl	8002288 <_fflush_r>
 8001eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ecc:	b141      	cbz	r1, 8001ee0 <setvbuf+0x68>
 8001ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ed2:	4299      	cmp	r1, r3
 8001ed4:	d002      	beq.n	8001edc <setvbuf+0x64>
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	f7ff feac 	bl	8001c34 <_free_r>
 8001edc:	2300      	movs	r3, #0
 8001ede:	6363      	str	r3, [r4, #52]	; 0x34
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61a3      	str	r3, [r4, #24]
 8001ee4:	6063      	str	r3, [r4, #4]
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	0619      	lsls	r1, r3, #24
 8001eea:	d503      	bpl.n	8001ef4 <setvbuf+0x7c>
 8001eec:	6921      	ldr	r1, [r4, #16]
 8001eee:	4638      	mov	r0, r7
 8001ef0:	f7ff fea0 	bl	8001c34 <_free_r>
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f1b8 0f02 	cmp.w	r8, #2
 8001f02:	81a3      	strh	r3, [r4, #12]
 8001f04:	d06c      	beq.n	8001fe0 <setvbuf+0x168>
 8001f06:	ab01      	add	r3, sp, #4
 8001f08:	466a      	mov	r2, sp
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	f000 faef 	bl	80024f0 <__swhatbuf_r>
 8001f12:	89a3      	ldrh	r3, [r4, #12]
 8001f14:	4318      	orrs	r0, r3
 8001f16:	81a0      	strh	r0, [r4, #12]
 8001f18:	2d00      	cmp	r5, #0
 8001f1a:	d130      	bne.n	8001f7e <setvbuf+0x106>
 8001f1c:	9d00      	ldr	r5, [sp, #0]
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f7ff fe78 	bl	8001c14 <malloc>
 8001f24:	4606      	mov	r6, r0
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d155      	bne.n	8001fd6 <setvbuf+0x15e>
 8001f2a:	f8dd 9000 	ldr.w	r9, [sp]
 8001f2e:	45a9      	cmp	r9, r5
 8001f30:	d14a      	bne.n	8001fc8 <setvbuf+0x150>
 8001f32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f36:	2200      	movs	r2, #0
 8001f38:	60a2      	str	r2, [r4, #8]
 8001f3a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001f3e:	6022      	str	r2, [r4, #0]
 8001f40:	6122      	str	r2, [r4, #16]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f48:	6162      	str	r2, [r4, #20]
 8001f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	07d2      	lsls	r2, r2, #31
 8001f52:	81a3      	strh	r3, [r4, #12]
 8001f54:	d405      	bmi.n	8001f62 <setvbuf+0xea>
 8001f56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f5a:	d102      	bne.n	8001f62 <setvbuf+0xea>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f5e:	f000 fac6 	bl	80024ee <__retarget_lock_release_recursive>
 8001f62:	4628      	mov	r0, r5
 8001f64:	b003      	add	sp, #12
 8001f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <setvbuf+0x184>)
 8001f6c:	429c      	cmp	r4, r3
 8001f6e:	d101      	bne.n	8001f74 <setvbuf+0xfc>
 8001f70:	68bc      	ldr	r4, [r7, #8]
 8001f72:	e793      	b.n	8001e9c <setvbuf+0x24>
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <setvbuf+0x188>)
 8001f76:	429c      	cmp	r4, r3
 8001f78:	bf08      	it	eq
 8001f7a:	68fc      	ldreq	r4, [r7, #12]
 8001f7c:	e78e      	b.n	8001e9c <setvbuf+0x24>
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d0cd      	beq.n	8001f1e <setvbuf+0xa6>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	b913      	cbnz	r3, 8001f8c <setvbuf+0x114>
 8001f86:	4638      	mov	r0, r7
 8001f88:	f000 fa12 	bl	80023b0 <__sinit>
 8001f8c:	f1b8 0f01 	cmp.w	r8, #1
 8001f90:	bf08      	it	eq
 8001f92:	89a3      	ldrheq	r3, [r4, #12]
 8001f94:	6026      	str	r6, [r4, #0]
 8001f96:	bf04      	itt	eq
 8001f98:	f043 0301 	orreq.w	r3, r3, #1
 8001f9c:	81a3      	strheq	r3, [r4, #12]
 8001f9e:	89a2      	ldrh	r2, [r4, #12]
 8001fa0:	f012 0308 	ands.w	r3, r2, #8
 8001fa4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001fa8:	d01c      	beq.n	8001fe4 <setvbuf+0x16c>
 8001faa:	07d3      	lsls	r3, r2, #31
 8001fac:	bf41      	itttt	mi
 8001fae:	2300      	movmi	r3, #0
 8001fb0:	426d      	negmi	r5, r5
 8001fb2:	60a3      	strmi	r3, [r4, #8]
 8001fb4:	61a5      	strmi	r5, [r4, #24]
 8001fb6:	bf58      	it	pl
 8001fb8:	60a5      	strpl	r5, [r4, #8]
 8001fba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001fbc:	f015 0501 	ands.w	r5, r5, #1
 8001fc0:	d115      	bne.n	8001fee <setvbuf+0x176>
 8001fc2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001fc6:	e7c8      	b.n	8001f5a <setvbuf+0xe2>
 8001fc8:	4648      	mov	r0, r9
 8001fca:	f7ff fe23 	bl	8001c14 <malloc>
 8001fce:	4606      	mov	r6, r0
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d0ae      	beq.n	8001f32 <setvbuf+0xba>
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	e7d0      	b.n	8001f82 <setvbuf+0x10a>
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e7a8      	b.n	8001f36 <setvbuf+0xbe>
 8001fe4:	60a3      	str	r3, [r4, #8]
 8001fe6:	e7e8      	b.n	8001fba <setvbuf+0x142>
 8001fe8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001fec:	e7b9      	b.n	8001f62 <setvbuf+0xea>
 8001fee:	2500      	movs	r5, #0
 8001ff0:	e7b7      	b.n	8001f62 <setvbuf+0xea>
 8001ff2:	bf00      	nop
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	08002dd4 	.word	0x08002dd4
 8001ffc:	08002df4 	.word	0x08002df4
 8002000:	08002db4 	.word	0x08002db4

08002004 <__swbuf_r>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	460e      	mov	r6, r1
 8002008:	4614      	mov	r4, r2
 800200a:	4605      	mov	r5, r0
 800200c:	b118      	cbz	r0, 8002016 <__swbuf_r+0x12>
 800200e:	6983      	ldr	r3, [r0, #24]
 8002010:	b90b      	cbnz	r3, 8002016 <__swbuf_r+0x12>
 8002012:	f000 f9cd 	bl	80023b0 <__sinit>
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <__swbuf_r+0x98>)
 8002018:	429c      	cmp	r4, r3
 800201a:	d12b      	bne.n	8002074 <__swbuf_r+0x70>
 800201c:	686c      	ldr	r4, [r5, #4]
 800201e:	69a3      	ldr	r3, [r4, #24]
 8002020:	60a3      	str	r3, [r4, #8]
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	071a      	lsls	r2, r3, #28
 8002026:	d52f      	bpl.n	8002088 <__swbuf_r+0x84>
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	b36b      	cbz	r3, 8002088 <__swbuf_r+0x84>
 800202c:	6923      	ldr	r3, [r4, #16]
 800202e:	6820      	ldr	r0, [r4, #0]
 8002030:	1ac0      	subs	r0, r0, r3
 8002032:	6963      	ldr	r3, [r4, #20]
 8002034:	b2f6      	uxtb	r6, r6
 8002036:	4283      	cmp	r3, r0
 8002038:	4637      	mov	r7, r6
 800203a:	dc04      	bgt.n	8002046 <__swbuf_r+0x42>
 800203c:	4621      	mov	r1, r4
 800203e:	4628      	mov	r0, r5
 8002040:	f000 f922 	bl	8002288 <_fflush_r>
 8002044:	bb30      	cbnz	r0, 8002094 <__swbuf_r+0x90>
 8002046:	68a3      	ldr	r3, [r4, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60a3      	str	r3, [r4, #8]
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	6022      	str	r2, [r4, #0]
 8002052:	701e      	strb	r6, [r3, #0]
 8002054:	6963      	ldr	r3, [r4, #20]
 8002056:	3001      	adds	r0, #1
 8002058:	4283      	cmp	r3, r0
 800205a:	d004      	beq.n	8002066 <__swbuf_r+0x62>
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	07db      	lsls	r3, r3, #31
 8002060:	d506      	bpl.n	8002070 <__swbuf_r+0x6c>
 8002062:	2e0a      	cmp	r6, #10
 8002064:	d104      	bne.n	8002070 <__swbuf_r+0x6c>
 8002066:	4621      	mov	r1, r4
 8002068:	4628      	mov	r0, r5
 800206a:	f000 f90d 	bl	8002288 <_fflush_r>
 800206e:	b988      	cbnz	r0, 8002094 <__swbuf_r+0x90>
 8002070:	4638      	mov	r0, r7
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <__swbuf_r+0x9c>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d101      	bne.n	800207e <__swbuf_r+0x7a>
 800207a:	68ac      	ldr	r4, [r5, #8]
 800207c:	e7cf      	b.n	800201e <__swbuf_r+0x1a>
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <__swbuf_r+0xa0>)
 8002080:	429c      	cmp	r4, r3
 8002082:	bf08      	it	eq
 8002084:	68ec      	ldreq	r4, [r5, #12]
 8002086:	e7ca      	b.n	800201e <__swbuf_r+0x1a>
 8002088:	4621      	mov	r1, r4
 800208a:	4628      	mov	r0, r5
 800208c:	f000 f80c 	bl	80020a8 <__swsetup_r>
 8002090:	2800      	cmp	r0, #0
 8002092:	d0cb      	beq.n	800202c <__swbuf_r+0x28>
 8002094:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002098:	e7ea      	b.n	8002070 <__swbuf_r+0x6c>
 800209a:	bf00      	nop
 800209c:	08002dd4 	.word	0x08002dd4
 80020a0:	08002df4 	.word	0x08002df4
 80020a4:	08002db4 	.word	0x08002db4

080020a8 <__swsetup_r>:
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <__swsetup_r+0xcc>)
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	681d      	ldr	r5, [r3, #0]
 80020ae:	4606      	mov	r6, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	b125      	cbz	r5, 80020be <__swsetup_r+0x16>
 80020b4:	69ab      	ldr	r3, [r5, #24]
 80020b6:	b913      	cbnz	r3, 80020be <__swsetup_r+0x16>
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f979 	bl	80023b0 <__sinit>
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <__swsetup_r+0xd0>)
 80020c0:	429c      	cmp	r4, r3
 80020c2:	d10f      	bne.n	80020e4 <__swsetup_r+0x3c>
 80020c4:	686c      	ldr	r4, [r5, #4]
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020cc:	0719      	lsls	r1, r3, #28
 80020ce:	d42c      	bmi.n	800212a <__swsetup_r+0x82>
 80020d0:	06dd      	lsls	r5, r3, #27
 80020d2:	d411      	bmi.n	80020f8 <__swsetup_r+0x50>
 80020d4:	2309      	movs	r3, #9
 80020d6:	6033      	str	r3, [r6, #0]
 80020d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020dc:	81a3      	strh	r3, [r4, #12]
 80020de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e2:	e03e      	b.n	8002162 <__swsetup_r+0xba>
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <__swsetup_r+0xd4>)
 80020e6:	429c      	cmp	r4, r3
 80020e8:	d101      	bne.n	80020ee <__swsetup_r+0x46>
 80020ea:	68ac      	ldr	r4, [r5, #8]
 80020ec:	e7eb      	b.n	80020c6 <__swsetup_r+0x1e>
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <__swsetup_r+0xd8>)
 80020f0:	429c      	cmp	r4, r3
 80020f2:	bf08      	it	eq
 80020f4:	68ec      	ldreq	r4, [r5, #12]
 80020f6:	e7e6      	b.n	80020c6 <__swsetup_r+0x1e>
 80020f8:	0758      	lsls	r0, r3, #29
 80020fa:	d512      	bpl.n	8002122 <__swsetup_r+0x7a>
 80020fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020fe:	b141      	cbz	r1, 8002112 <__swsetup_r+0x6a>
 8002100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002104:	4299      	cmp	r1, r3
 8002106:	d002      	beq.n	800210e <__swsetup_r+0x66>
 8002108:	4630      	mov	r0, r6
 800210a:	f7ff fd93 	bl	8001c34 <_free_r>
 800210e:	2300      	movs	r3, #0
 8002110:	6363      	str	r3, [r4, #52]	; 0x34
 8002112:	89a3      	ldrh	r3, [r4, #12]
 8002114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	2300      	movs	r3, #0
 800211c:	6063      	str	r3, [r4, #4]
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	81a3      	strh	r3, [r4, #12]
 800212a:	6923      	ldr	r3, [r4, #16]
 800212c:	b94b      	cbnz	r3, 8002142 <__swsetup_r+0x9a>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d003      	beq.n	8002142 <__swsetup_r+0x9a>
 800213a:	4621      	mov	r1, r4
 800213c:	4630      	mov	r0, r6
 800213e:	f000 f9fd 	bl	800253c <__smakebuf_r>
 8002142:	89a0      	ldrh	r0, [r4, #12]
 8002144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002148:	f010 0301 	ands.w	r3, r0, #1
 800214c:	d00a      	beq.n	8002164 <__swsetup_r+0xbc>
 800214e:	2300      	movs	r3, #0
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	6963      	ldr	r3, [r4, #20]
 8002154:	425b      	negs	r3, r3
 8002156:	61a3      	str	r3, [r4, #24]
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	b943      	cbnz	r3, 800216e <__swsetup_r+0xc6>
 800215c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002160:	d1ba      	bne.n	80020d8 <__swsetup_r+0x30>
 8002162:	bd70      	pop	{r4, r5, r6, pc}
 8002164:	0781      	lsls	r1, r0, #30
 8002166:	bf58      	it	pl
 8002168:	6963      	ldrpl	r3, [r4, #20]
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	e7f4      	b.n	8002158 <__swsetup_r+0xb0>
 800216e:	2000      	movs	r0, #0
 8002170:	e7f7      	b.n	8002162 <__swsetup_r+0xba>
 8002172:	bf00      	nop
 8002174:	20000020 	.word	0x20000020
 8002178:	08002dd4 	.word	0x08002dd4
 800217c:	08002df4 	.word	0x08002df4
 8002180:	08002db4 	.word	0x08002db4

08002184 <__sflush_r>:
 8002184:	898a      	ldrh	r2, [r1, #12]
 8002186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002188:	4605      	mov	r5, r0
 800218a:	0710      	lsls	r0, r2, #28
 800218c:	460c      	mov	r4, r1
 800218e:	d457      	bmi.n	8002240 <__sflush_r+0xbc>
 8002190:	684b      	ldr	r3, [r1, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dc04      	bgt.n	80021a0 <__sflush_r+0x1c>
 8002196:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	dc01      	bgt.n	80021a0 <__sflush_r+0x1c>
 800219c:	2000      	movs	r0, #0
 800219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d0fa      	beq.n	800219c <__sflush_r+0x18>
 80021a6:	2300      	movs	r3, #0
 80021a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021ac:	682f      	ldr	r7, [r5, #0]
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	d032      	beq.n	8002218 <__sflush_r+0x94>
 80021b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	075a      	lsls	r2, r3, #29
 80021b8:	d505      	bpl.n	80021c6 <__sflush_r+0x42>
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021c0:	b10b      	cbz	r3, 80021c6 <__sflush_r+0x42>
 80021c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c4:	1ac0      	subs	r0, r0, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	4602      	mov	r2, r0
 80021ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021cc:	6a21      	ldr	r1, [r4, #32]
 80021ce:	4628      	mov	r0, r5
 80021d0:	47b0      	blx	r6
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	89a3      	ldrh	r3, [r4, #12]
 80021d6:	d106      	bne.n	80021e6 <__sflush_r+0x62>
 80021d8:	6829      	ldr	r1, [r5, #0]
 80021da:	291d      	cmp	r1, #29
 80021dc:	d82c      	bhi.n	8002238 <__sflush_r+0xb4>
 80021de:	4a29      	ldr	r2, [pc, #164]	; (8002284 <__sflush_r+0x100>)
 80021e0:	40ca      	lsrs	r2, r1
 80021e2:	07d6      	lsls	r6, r2, #31
 80021e4:	d528      	bpl.n	8002238 <__sflush_r+0xb4>
 80021e6:	2200      	movs	r2, #0
 80021e8:	6062      	str	r2, [r4, #4]
 80021ea:	04d9      	lsls	r1, r3, #19
 80021ec:	6922      	ldr	r2, [r4, #16]
 80021ee:	6022      	str	r2, [r4, #0]
 80021f0:	d504      	bpl.n	80021fc <__sflush_r+0x78>
 80021f2:	1c42      	adds	r2, r0, #1
 80021f4:	d101      	bne.n	80021fa <__sflush_r+0x76>
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	b903      	cbnz	r3, 80021fc <__sflush_r+0x78>
 80021fa:	6560      	str	r0, [r4, #84]	; 0x54
 80021fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021fe:	602f      	str	r7, [r5, #0]
 8002200:	2900      	cmp	r1, #0
 8002202:	d0cb      	beq.n	800219c <__sflush_r+0x18>
 8002204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002208:	4299      	cmp	r1, r3
 800220a:	d002      	beq.n	8002212 <__sflush_r+0x8e>
 800220c:	4628      	mov	r0, r5
 800220e:	f7ff fd11 	bl	8001c34 <_free_r>
 8002212:	2000      	movs	r0, #0
 8002214:	6360      	str	r0, [r4, #52]	; 0x34
 8002216:	e7c2      	b.n	800219e <__sflush_r+0x1a>
 8002218:	6a21      	ldr	r1, [r4, #32]
 800221a:	2301      	movs	r3, #1
 800221c:	4628      	mov	r0, r5
 800221e:	47b0      	blx	r6
 8002220:	1c41      	adds	r1, r0, #1
 8002222:	d1c7      	bne.n	80021b4 <__sflush_r+0x30>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0c4      	beq.n	80021b4 <__sflush_r+0x30>
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d001      	beq.n	8002232 <__sflush_r+0xae>
 800222e:	2b16      	cmp	r3, #22
 8002230:	d101      	bne.n	8002236 <__sflush_r+0xb2>
 8002232:	602f      	str	r7, [r5, #0]
 8002234:	e7b2      	b.n	800219c <__sflush_r+0x18>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	e7ae      	b.n	800219e <__sflush_r+0x1a>
 8002240:	690f      	ldr	r7, [r1, #16]
 8002242:	2f00      	cmp	r7, #0
 8002244:	d0aa      	beq.n	800219c <__sflush_r+0x18>
 8002246:	0793      	lsls	r3, r2, #30
 8002248:	680e      	ldr	r6, [r1, #0]
 800224a:	bf08      	it	eq
 800224c:	694b      	ldreq	r3, [r1, #20]
 800224e:	600f      	str	r7, [r1, #0]
 8002250:	bf18      	it	ne
 8002252:	2300      	movne	r3, #0
 8002254:	1bf6      	subs	r6, r6, r7
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	2e00      	cmp	r6, #0
 800225a:	dd9f      	ble.n	800219c <__sflush_r+0x18>
 800225c:	6a21      	ldr	r1, [r4, #32]
 800225e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002262:	4633      	mov	r3, r6
 8002264:	463a      	mov	r2, r7
 8002266:	4628      	mov	r0, r5
 8002268:	47e0      	blx	ip
 800226a:	2800      	cmp	r0, #0
 800226c:	dc06      	bgt.n	800227c <__sflush_r+0xf8>
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002274:	81a3      	strh	r3, [r4, #12]
 8002276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800227a:	e790      	b.n	800219e <__sflush_r+0x1a>
 800227c:	4407      	add	r7, r0
 800227e:	1a36      	subs	r6, r6, r0
 8002280:	e7ea      	b.n	8002258 <__sflush_r+0xd4>
 8002282:	bf00      	nop
 8002284:	20400001 	.word	0x20400001

08002288 <_fflush_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	690b      	ldr	r3, [r1, #16]
 800228c:	4605      	mov	r5, r0
 800228e:	460c      	mov	r4, r1
 8002290:	b913      	cbnz	r3, 8002298 <_fflush_r+0x10>
 8002292:	2500      	movs	r5, #0
 8002294:	4628      	mov	r0, r5
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	b118      	cbz	r0, 80022a2 <_fflush_r+0x1a>
 800229a:	6983      	ldr	r3, [r0, #24]
 800229c:	b90b      	cbnz	r3, 80022a2 <_fflush_r+0x1a>
 800229e:	f000 f887 	bl	80023b0 <__sinit>
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <_fflush_r+0x6c>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d11b      	bne.n	80022e0 <_fflush_r+0x58>
 80022a8:	686c      	ldr	r4, [r5, #4]
 80022aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ef      	beq.n	8002292 <_fflush_r+0xa>
 80022b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022b4:	07d0      	lsls	r0, r2, #31
 80022b6:	d404      	bmi.n	80022c2 <_fflush_r+0x3a>
 80022b8:	0599      	lsls	r1, r3, #22
 80022ba:	d402      	bmi.n	80022c2 <_fflush_r+0x3a>
 80022bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022be:	f000 f915 	bl	80024ec <__retarget_lock_acquire_recursive>
 80022c2:	4628      	mov	r0, r5
 80022c4:	4621      	mov	r1, r4
 80022c6:	f7ff ff5d 	bl	8002184 <__sflush_r>
 80022ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022cc:	07da      	lsls	r2, r3, #31
 80022ce:	4605      	mov	r5, r0
 80022d0:	d4e0      	bmi.n	8002294 <_fflush_r+0xc>
 80022d2:	89a3      	ldrh	r3, [r4, #12]
 80022d4:	059b      	lsls	r3, r3, #22
 80022d6:	d4dd      	bmi.n	8002294 <_fflush_r+0xc>
 80022d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022da:	f000 f908 	bl	80024ee <__retarget_lock_release_recursive>
 80022de:	e7d9      	b.n	8002294 <_fflush_r+0xc>
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <_fflush_r+0x70>)
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d101      	bne.n	80022ea <_fflush_r+0x62>
 80022e6:	68ac      	ldr	r4, [r5, #8]
 80022e8:	e7df      	b.n	80022aa <_fflush_r+0x22>
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <_fflush_r+0x74>)
 80022ec:	429c      	cmp	r4, r3
 80022ee:	bf08      	it	eq
 80022f0:	68ec      	ldreq	r4, [r5, #12]
 80022f2:	e7da      	b.n	80022aa <_fflush_r+0x22>
 80022f4:	08002dd4 	.word	0x08002dd4
 80022f8:	08002df4 	.word	0x08002df4
 80022fc:	08002db4 	.word	0x08002db4

08002300 <std>:
 8002300:	2300      	movs	r3, #0
 8002302:	b510      	push	{r4, lr}
 8002304:	4604      	mov	r4, r0
 8002306:	e9c0 3300 	strd	r3, r3, [r0]
 800230a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800230e:	6083      	str	r3, [r0, #8]
 8002310:	8181      	strh	r1, [r0, #12]
 8002312:	6643      	str	r3, [r0, #100]	; 0x64
 8002314:	81c2      	strh	r2, [r0, #14]
 8002316:	6183      	str	r3, [r0, #24]
 8002318:	4619      	mov	r1, r3
 800231a:	2208      	movs	r2, #8
 800231c:	305c      	adds	r0, #92	; 0x5c
 800231e:	f7ff fc81 	bl	8001c24 <memset>
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <std+0x38>)
 8002324:	6263      	str	r3, [r4, #36]	; 0x24
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <std+0x3c>)
 8002328:	62a3      	str	r3, [r4, #40]	; 0x28
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <std+0x40>)
 800232c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <std+0x44>)
 8002330:	6224      	str	r4, [r4, #32]
 8002332:	6323      	str	r3, [r4, #48]	; 0x30
 8002334:	bd10      	pop	{r4, pc}
 8002336:	bf00      	nop
 8002338:	08002c3d 	.word	0x08002c3d
 800233c:	08002c5f 	.word	0x08002c5f
 8002340:	08002c97 	.word	0x08002c97
 8002344:	08002cbb 	.word	0x08002cbb

08002348 <_cleanup_r>:
 8002348:	4901      	ldr	r1, [pc, #4]	; (8002350 <_cleanup_r+0x8>)
 800234a:	f000 b8af 	b.w	80024ac <_fwalk_reent>
 800234e:	bf00      	nop
 8002350:	08002289 	.word	0x08002289

08002354 <__sfmoreglue>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	2268      	movs	r2, #104	; 0x68
 8002358:	1e4d      	subs	r5, r1, #1
 800235a:	4355      	muls	r5, r2
 800235c:	460e      	mov	r6, r1
 800235e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002362:	f7ff fcd1 	bl	8001d08 <_malloc_r>
 8002366:	4604      	mov	r4, r0
 8002368:	b140      	cbz	r0, 800237c <__sfmoreglue+0x28>
 800236a:	2100      	movs	r1, #0
 800236c:	e9c0 1600 	strd	r1, r6, [r0]
 8002370:	300c      	adds	r0, #12
 8002372:	60a0      	str	r0, [r4, #8]
 8002374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002378:	f7ff fc54 	bl	8001c24 <memset>
 800237c:	4620      	mov	r0, r4
 800237e:	bd70      	pop	{r4, r5, r6, pc}

08002380 <__sfp_lock_acquire>:
 8002380:	4801      	ldr	r0, [pc, #4]	; (8002388 <__sfp_lock_acquire+0x8>)
 8002382:	f000 b8b3 	b.w	80024ec <__retarget_lock_acquire_recursive>
 8002386:	bf00      	nop
 8002388:	2000012d 	.word	0x2000012d

0800238c <__sfp_lock_release>:
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <__sfp_lock_release+0x8>)
 800238e:	f000 b8ae 	b.w	80024ee <__retarget_lock_release_recursive>
 8002392:	bf00      	nop
 8002394:	2000012d 	.word	0x2000012d

08002398 <__sinit_lock_acquire>:
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <__sinit_lock_acquire+0x8>)
 800239a:	f000 b8a7 	b.w	80024ec <__retarget_lock_acquire_recursive>
 800239e:	bf00      	nop
 80023a0:	2000012e 	.word	0x2000012e

080023a4 <__sinit_lock_release>:
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <__sinit_lock_release+0x8>)
 80023a6:	f000 b8a2 	b.w	80024ee <__retarget_lock_release_recursive>
 80023aa:	bf00      	nop
 80023ac:	2000012e 	.word	0x2000012e

080023b0 <__sinit>:
 80023b0:	b510      	push	{r4, lr}
 80023b2:	4604      	mov	r4, r0
 80023b4:	f7ff fff0 	bl	8002398 <__sinit_lock_acquire>
 80023b8:	69a3      	ldr	r3, [r4, #24]
 80023ba:	b11b      	cbz	r3, 80023c4 <__sinit+0x14>
 80023bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c0:	f7ff bff0 	b.w	80023a4 <__sinit_lock_release>
 80023c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023c8:	6523      	str	r3, [r4, #80]	; 0x50
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <__sinit+0x68>)
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <__sinit+0x6c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80023d2:	42a3      	cmp	r3, r4
 80023d4:	bf04      	itt	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	61a3      	streq	r3, [r4, #24]
 80023da:	4620      	mov	r0, r4
 80023dc:	f000 f820 	bl	8002420 <__sfp>
 80023e0:	6060      	str	r0, [r4, #4]
 80023e2:	4620      	mov	r0, r4
 80023e4:	f000 f81c 	bl	8002420 <__sfp>
 80023e8:	60a0      	str	r0, [r4, #8]
 80023ea:	4620      	mov	r0, r4
 80023ec:	f000 f818 	bl	8002420 <__sfp>
 80023f0:	2200      	movs	r2, #0
 80023f2:	60e0      	str	r0, [r4, #12]
 80023f4:	2104      	movs	r1, #4
 80023f6:	6860      	ldr	r0, [r4, #4]
 80023f8:	f7ff ff82 	bl	8002300 <std>
 80023fc:	68a0      	ldr	r0, [r4, #8]
 80023fe:	2201      	movs	r2, #1
 8002400:	2109      	movs	r1, #9
 8002402:	f7ff ff7d 	bl	8002300 <std>
 8002406:	68e0      	ldr	r0, [r4, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	2112      	movs	r1, #18
 800240c:	f7ff ff78 	bl	8002300 <std>
 8002410:	2301      	movs	r3, #1
 8002412:	61a3      	str	r3, [r4, #24]
 8002414:	e7d2      	b.n	80023bc <__sinit+0xc>
 8002416:	bf00      	nop
 8002418:	08002db0 	.word	0x08002db0
 800241c:	08002349 	.word	0x08002349

08002420 <__sfp>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	4607      	mov	r7, r0
 8002424:	f7ff ffac 	bl	8002380 <__sfp_lock_acquire>
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <__sfp+0x84>)
 800242a:	681e      	ldr	r6, [r3, #0]
 800242c:	69b3      	ldr	r3, [r6, #24]
 800242e:	b913      	cbnz	r3, 8002436 <__sfp+0x16>
 8002430:	4630      	mov	r0, r6
 8002432:	f7ff ffbd 	bl	80023b0 <__sinit>
 8002436:	3648      	adds	r6, #72	; 0x48
 8002438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800243c:	3b01      	subs	r3, #1
 800243e:	d503      	bpl.n	8002448 <__sfp+0x28>
 8002440:	6833      	ldr	r3, [r6, #0]
 8002442:	b30b      	cbz	r3, 8002488 <__sfp+0x68>
 8002444:	6836      	ldr	r6, [r6, #0]
 8002446:	e7f7      	b.n	8002438 <__sfp+0x18>
 8002448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800244c:	b9d5      	cbnz	r5, 8002484 <__sfp+0x64>
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <__sfp+0x88>)
 8002450:	60e3      	str	r3, [r4, #12]
 8002452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002456:	6665      	str	r5, [r4, #100]	; 0x64
 8002458:	f000 f847 	bl	80024ea <__retarget_lock_init_recursive>
 800245c:	f7ff ff96 	bl	800238c <__sfp_lock_release>
 8002460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002468:	6025      	str	r5, [r4, #0]
 800246a:	61a5      	str	r5, [r4, #24]
 800246c:	2208      	movs	r2, #8
 800246e:	4629      	mov	r1, r5
 8002470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002474:	f7ff fbd6 	bl	8001c24 <memset>
 8002478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800247c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002480:	4620      	mov	r0, r4
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002484:	3468      	adds	r4, #104	; 0x68
 8002486:	e7d9      	b.n	800243c <__sfp+0x1c>
 8002488:	2104      	movs	r1, #4
 800248a:	4638      	mov	r0, r7
 800248c:	f7ff ff62 	bl	8002354 <__sfmoreglue>
 8002490:	4604      	mov	r4, r0
 8002492:	6030      	str	r0, [r6, #0]
 8002494:	2800      	cmp	r0, #0
 8002496:	d1d5      	bne.n	8002444 <__sfp+0x24>
 8002498:	f7ff ff78 	bl	800238c <__sfp_lock_release>
 800249c:	230c      	movs	r3, #12
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	e7ee      	b.n	8002480 <__sfp+0x60>
 80024a2:	bf00      	nop
 80024a4:	08002db0 	.word	0x08002db0
 80024a8:	ffff0001 	.word	0xffff0001

080024ac <_fwalk_reent>:
 80024ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b0:	4606      	mov	r6, r0
 80024b2:	4688      	mov	r8, r1
 80024b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024b8:	2700      	movs	r7, #0
 80024ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024be:	f1b9 0901 	subs.w	r9, r9, #1
 80024c2:	d505      	bpl.n	80024d0 <_fwalk_reent+0x24>
 80024c4:	6824      	ldr	r4, [r4, #0]
 80024c6:	2c00      	cmp	r4, #0
 80024c8:	d1f7      	bne.n	80024ba <_fwalk_reent+0xe>
 80024ca:	4638      	mov	r0, r7
 80024cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024d0:	89ab      	ldrh	r3, [r5, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d907      	bls.n	80024e6 <_fwalk_reent+0x3a>
 80024d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024da:	3301      	adds	r3, #1
 80024dc:	d003      	beq.n	80024e6 <_fwalk_reent+0x3a>
 80024de:	4629      	mov	r1, r5
 80024e0:	4630      	mov	r0, r6
 80024e2:	47c0      	blx	r8
 80024e4:	4307      	orrs	r7, r0
 80024e6:	3568      	adds	r5, #104	; 0x68
 80024e8:	e7e9      	b.n	80024be <_fwalk_reent+0x12>

080024ea <__retarget_lock_init_recursive>:
 80024ea:	4770      	bx	lr

080024ec <__retarget_lock_acquire_recursive>:
 80024ec:	4770      	bx	lr

080024ee <__retarget_lock_release_recursive>:
 80024ee:	4770      	bx	lr

080024f0 <__swhatbuf_r>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	460e      	mov	r6, r1
 80024f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f8:	2900      	cmp	r1, #0
 80024fa:	b096      	sub	sp, #88	; 0x58
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	da08      	bge.n	8002514 <__swhatbuf_r+0x24>
 8002502:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	602a      	str	r2, [r5, #0]
 800250a:	061a      	lsls	r2, r3, #24
 800250c:	d410      	bmi.n	8002530 <__swhatbuf_r+0x40>
 800250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002512:	e00e      	b.n	8002532 <__swhatbuf_r+0x42>
 8002514:	466a      	mov	r2, sp
 8002516:	f000 fbf7 	bl	8002d08 <_fstat_r>
 800251a:	2800      	cmp	r0, #0
 800251c:	dbf1      	blt.n	8002502 <__swhatbuf_r+0x12>
 800251e:	9a01      	ldr	r2, [sp, #4]
 8002520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002528:	425a      	negs	r2, r3
 800252a:	415a      	adcs	r2, r3
 800252c:	602a      	str	r2, [r5, #0]
 800252e:	e7ee      	b.n	800250e <__swhatbuf_r+0x1e>
 8002530:	2340      	movs	r3, #64	; 0x40
 8002532:	2000      	movs	r0, #0
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	b016      	add	sp, #88	; 0x58
 8002538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800253c <__smakebuf_r>:
 800253c:	898b      	ldrh	r3, [r1, #12]
 800253e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002540:	079d      	lsls	r5, r3, #30
 8002542:	4606      	mov	r6, r0
 8002544:	460c      	mov	r4, r1
 8002546:	d507      	bpl.n	8002558 <__smakebuf_r+0x1c>
 8002548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	6123      	str	r3, [r4, #16]
 8002550:	2301      	movs	r3, #1
 8002552:	6163      	str	r3, [r4, #20]
 8002554:	b002      	add	sp, #8
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	ab01      	add	r3, sp, #4
 800255a:	466a      	mov	r2, sp
 800255c:	f7ff ffc8 	bl	80024f0 <__swhatbuf_r>
 8002560:	9900      	ldr	r1, [sp, #0]
 8002562:	4605      	mov	r5, r0
 8002564:	4630      	mov	r0, r6
 8002566:	f7ff fbcf 	bl	8001d08 <_malloc_r>
 800256a:	b948      	cbnz	r0, 8002580 <__smakebuf_r+0x44>
 800256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002570:	059a      	lsls	r2, r3, #22
 8002572:	d4ef      	bmi.n	8002554 <__smakebuf_r+0x18>
 8002574:	f023 0303 	bic.w	r3, r3, #3
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	81a3      	strh	r3, [r4, #12]
 800257e:	e7e3      	b.n	8002548 <__smakebuf_r+0xc>
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <__smakebuf_r+0x7c>)
 8002582:	62b3      	str	r3, [r6, #40]	; 0x28
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	6020      	str	r0, [r4, #0]
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	81a3      	strh	r3, [r4, #12]
 800258e:	9b00      	ldr	r3, [sp, #0]
 8002590:	6163      	str	r3, [r4, #20]
 8002592:	9b01      	ldr	r3, [sp, #4]
 8002594:	6120      	str	r0, [r4, #16]
 8002596:	b15b      	cbz	r3, 80025b0 <__smakebuf_r+0x74>
 8002598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800259c:	4630      	mov	r0, r6
 800259e:	f000 fbc5 	bl	8002d2c <_isatty_r>
 80025a2:	b128      	cbz	r0, 80025b0 <__smakebuf_r+0x74>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	89a0      	ldrh	r0, [r4, #12]
 80025b2:	4305      	orrs	r5, r0
 80025b4:	81a5      	strh	r5, [r4, #12]
 80025b6:	e7cd      	b.n	8002554 <__smakebuf_r+0x18>
 80025b8:	08002349 	.word	0x08002349

080025bc <__malloc_lock>:
 80025bc:	4801      	ldr	r0, [pc, #4]	; (80025c4 <__malloc_lock+0x8>)
 80025be:	f7ff bf95 	b.w	80024ec <__retarget_lock_acquire_recursive>
 80025c2:	bf00      	nop
 80025c4:	2000012c 	.word	0x2000012c

080025c8 <__malloc_unlock>:
 80025c8:	4801      	ldr	r0, [pc, #4]	; (80025d0 <__malloc_unlock+0x8>)
 80025ca:	f7ff bf90 	b.w	80024ee <__retarget_lock_release_recursive>
 80025ce:	bf00      	nop
 80025d0:	2000012c 	.word	0x2000012c

080025d4 <__sfputc_r>:
 80025d4:	6893      	ldr	r3, [r2, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	b410      	push	{r4}
 80025dc:	6093      	str	r3, [r2, #8]
 80025de:	da07      	bge.n	80025f0 <__sfputc_r+0x1c>
 80025e0:	6994      	ldr	r4, [r2, #24]
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	db01      	blt.n	80025ea <__sfputc_r+0x16>
 80025e6:	290a      	cmp	r1, #10
 80025e8:	d102      	bne.n	80025f0 <__sfputc_r+0x1c>
 80025ea:	bc10      	pop	{r4}
 80025ec:	f7ff bd0a 	b.w	8002004 <__swbuf_r>
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	1c58      	adds	r0, r3, #1
 80025f4:	6010      	str	r0, [r2, #0]
 80025f6:	7019      	strb	r1, [r3, #0]
 80025f8:	4608      	mov	r0, r1
 80025fa:	bc10      	pop	{r4}
 80025fc:	4770      	bx	lr

080025fe <__sfputs_r>:
 80025fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002600:	4606      	mov	r6, r0
 8002602:	460f      	mov	r7, r1
 8002604:	4614      	mov	r4, r2
 8002606:	18d5      	adds	r5, r2, r3
 8002608:	42ac      	cmp	r4, r5
 800260a:	d101      	bne.n	8002610 <__sfputs_r+0x12>
 800260c:	2000      	movs	r0, #0
 800260e:	e007      	b.n	8002620 <__sfputs_r+0x22>
 8002610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002614:	463a      	mov	r2, r7
 8002616:	4630      	mov	r0, r6
 8002618:	f7ff ffdc 	bl	80025d4 <__sfputc_r>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	d1f3      	bne.n	8002608 <__sfputs_r+0xa>
 8002620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002624 <_vfiprintf_r>:
 8002624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002628:	460d      	mov	r5, r1
 800262a:	b09d      	sub	sp, #116	; 0x74
 800262c:	4614      	mov	r4, r2
 800262e:	4698      	mov	r8, r3
 8002630:	4606      	mov	r6, r0
 8002632:	b118      	cbz	r0, 800263c <_vfiprintf_r+0x18>
 8002634:	6983      	ldr	r3, [r0, #24]
 8002636:	b90b      	cbnz	r3, 800263c <_vfiprintf_r+0x18>
 8002638:	f7ff feba 	bl	80023b0 <__sinit>
 800263c:	4b89      	ldr	r3, [pc, #548]	; (8002864 <_vfiprintf_r+0x240>)
 800263e:	429d      	cmp	r5, r3
 8002640:	d11b      	bne.n	800267a <_vfiprintf_r+0x56>
 8002642:	6875      	ldr	r5, [r6, #4]
 8002644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002646:	07d9      	lsls	r1, r3, #31
 8002648:	d405      	bmi.n	8002656 <_vfiprintf_r+0x32>
 800264a:	89ab      	ldrh	r3, [r5, #12]
 800264c:	059a      	lsls	r2, r3, #22
 800264e:	d402      	bmi.n	8002656 <_vfiprintf_r+0x32>
 8002650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002652:	f7ff ff4b 	bl	80024ec <__retarget_lock_acquire_recursive>
 8002656:	89ab      	ldrh	r3, [r5, #12]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	d501      	bpl.n	8002660 <_vfiprintf_r+0x3c>
 800265c:	692b      	ldr	r3, [r5, #16]
 800265e:	b9eb      	cbnz	r3, 800269c <_vfiprintf_r+0x78>
 8002660:	4629      	mov	r1, r5
 8002662:	4630      	mov	r0, r6
 8002664:	f7ff fd20 	bl	80020a8 <__swsetup_r>
 8002668:	b1c0      	cbz	r0, 800269c <_vfiprintf_r+0x78>
 800266a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800266c:	07dc      	lsls	r4, r3, #31
 800266e:	d50e      	bpl.n	800268e <_vfiprintf_r+0x6a>
 8002670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002674:	b01d      	add	sp, #116	; 0x74
 8002676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <_vfiprintf_r+0x244>)
 800267c:	429d      	cmp	r5, r3
 800267e:	d101      	bne.n	8002684 <_vfiprintf_r+0x60>
 8002680:	68b5      	ldr	r5, [r6, #8]
 8002682:	e7df      	b.n	8002644 <_vfiprintf_r+0x20>
 8002684:	4b79      	ldr	r3, [pc, #484]	; (800286c <_vfiprintf_r+0x248>)
 8002686:	429d      	cmp	r5, r3
 8002688:	bf08      	it	eq
 800268a:	68f5      	ldreq	r5, [r6, #12]
 800268c:	e7da      	b.n	8002644 <_vfiprintf_r+0x20>
 800268e:	89ab      	ldrh	r3, [r5, #12]
 8002690:	0598      	lsls	r0, r3, #22
 8002692:	d4ed      	bmi.n	8002670 <_vfiprintf_r+0x4c>
 8002694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002696:	f7ff ff2a 	bl	80024ee <__retarget_lock_release_recursive>
 800269a:	e7e9      	b.n	8002670 <_vfiprintf_r+0x4c>
 800269c:	2300      	movs	r3, #0
 800269e:	9309      	str	r3, [sp, #36]	; 0x24
 80026a0:	2320      	movs	r3, #32
 80026a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026aa:	2330      	movs	r3, #48	; 0x30
 80026ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002870 <_vfiprintf_r+0x24c>
 80026b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026b4:	f04f 0901 	mov.w	r9, #1
 80026b8:	4623      	mov	r3, r4
 80026ba:	469a      	mov	sl, r3
 80026bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026c0:	b10a      	cbz	r2, 80026c6 <_vfiprintf_r+0xa2>
 80026c2:	2a25      	cmp	r2, #37	; 0x25
 80026c4:	d1f9      	bne.n	80026ba <_vfiprintf_r+0x96>
 80026c6:	ebba 0b04 	subs.w	fp, sl, r4
 80026ca:	d00b      	beq.n	80026e4 <_vfiprintf_r+0xc0>
 80026cc:	465b      	mov	r3, fp
 80026ce:	4622      	mov	r2, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	4630      	mov	r0, r6
 80026d4:	f7ff ff93 	bl	80025fe <__sfputs_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	f000 80aa 	beq.w	8002832 <_vfiprintf_r+0x20e>
 80026de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026e0:	445a      	add	r2, fp
 80026e2:	9209      	str	r2, [sp, #36]	; 0x24
 80026e4:	f89a 3000 	ldrb.w	r3, [sl]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a2 	beq.w	8002832 <_vfiprintf_r+0x20e>
 80026ee:	2300      	movs	r3, #0
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026f8:	f10a 0a01 	add.w	sl, sl, #1
 80026fc:	9304      	str	r3, [sp, #16]
 80026fe:	9307      	str	r3, [sp, #28]
 8002700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002704:	931a      	str	r3, [sp, #104]	; 0x68
 8002706:	4654      	mov	r4, sl
 8002708:	2205      	movs	r2, #5
 800270a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800270e:	4858      	ldr	r0, [pc, #352]	; (8002870 <_vfiprintf_r+0x24c>)
 8002710:	f7fd fd6e 	bl	80001f0 <memchr>
 8002714:	9a04      	ldr	r2, [sp, #16]
 8002716:	b9d8      	cbnz	r0, 8002750 <_vfiprintf_r+0x12c>
 8002718:	06d1      	lsls	r1, r2, #27
 800271a:	bf44      	itt	mi
 800271c:	2320      	movmi	r3, #32
 800271e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002722:	0713      	lsls	r3, r2, #28
 8002724:	bf44      	itt	mi
 8002726:	232b      	movmi	r3, #43	; 0x2b
 8002728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800272c:	f89a 3000 	ldrb.w	r3, [sl]
 8002730:	2b2a      	cmp	r3, #42	; 0x2a
 8002732:	d015      	beq.n	8002760 <_vfiprintf_r+0x13c>
 8002734:	9a07      	ldr	r2, [sp, #28]
 8002736:	4654      	mov	r4, sl
 8002738:	2000      	movs	r0, #0
 800273a:	f04f 0c0a 	mov.w	ip, #10
 800273e:	4621      	mov	r1, r4
 8002740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002744:	3b30      	subs	r3, #48	; 0x30
 8002746:	2b09      	cmp	r3, #9
 8002748:	d94e      	bls.n	80027e8 <_vfiprintf_r+0x1c4>
 800274a:	b1b0      	cbz	r0, 800277a <_vfiprintf_r+0x156>
 800274c:	9207      	str	r2, [sp, #28]
 800274e:	e014      	b.n	800277a <_vfiprintf_r+0x156>
 8002750:	eba0 0308 	sub.w	r3, r0, r8
 8002754:	fa09 f303 	lsl.w	r3, r9, r3
 8002758:	4313      	orrs	r3, r2
 800275a:	9304      	str	r3, [sp, #16]
 800275c:	46a2      	mov	sl, r4
 800275e:	e7d2      	b.n	8002706 <_vfiprintf_r+0xe2>
 8002760:	9b03      	ldr	r3, [sp, #12]
 8002762:	1d19      	adds	r1, r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	9103      	str	r1, [sp, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	bfbb      	ittet	lt
 800276c:	425b      	neglt	r3, r3
 800276e:	f042 0202 	orrlt.w	r2, r2, #2
 8002772:	9307      	strge	r3, [sp, #28]
 8002774:	9307      	strlt	r3, [sp, #28]
 8002776:	bfb8      	it	lt
 8002778:	9204      	strlt	r2, [sp, #16]
 800277a:	7823      	ldrb	r3, [r4, #0]
 800277c:	2b2e      	cmp	r3, #46	; 0x2e
 800277e:	d10c      	bne.n	800279a <_vfiprintf_r+0x176>
 8002780:	7863      	ldrb	r3, [r4, #1]
 8002782:	2b2a      	cmp	r3, #42	; 0x2a
 8002784:	d135      	bne.n	80027f2 <_vfiprintf_r+0x1ce>
 8002786:	9b03      	ldr	r3, [sp, #12]
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	9203      	str	r2, [sp, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	bfb8      	it	lt
 8002792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002796:	3402      	adds	r4, #2
 8002798:	9305      	str	r3, [sp, #20]
 800279a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002874 <_vfiprintf_r+0x250>
 800279e:	7821      	ldrb	r1, [r4, #0]
 80027a0:	2203      	movs	r2, #3
 80027a2:	4650      	mov	r0, sl
 80027a4:	f7fd fd24 	bl	80001f0 <memchr>
 80027a8:	b140      	cbz	r0, 80027bc <_vfiprintf_r+0x198>
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	eba0 000a 	sub.w	r0, r0, sl
 80027b0:	fa03 f000 	lsl.w	r0, r3, r0
 80027b4:	9b04      	ldr	r3, [sp, #16]
 80027b6:	4303      	orrs	r3, r0
 80027b8:	3401      	adds	r4, #1
 80027ba:	9304      	str	r3, [sp, #16]
 80027bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c0:	482d      	ldr	r0, [pc, #180]	; (8002878 <_vfiprintf_r+0x254>)
 80027c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027c6:	2206      	movs	r2, #6
 80027c8:	f7fd fd12 	bl	80001f0 <memchr>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d03f      	beq.n	8002850 <_vfiprintf_r+0x22c>
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <_vfiprintf_r+0x258>)
 80027d2:	bb1b      	cbnz	r3, 800281c <_vfiprintf_r+0x1f8>
 80027d4:	9b03      	ldr	r3, [sp, #12]
 80027d6:	3307      	adds	r3, #7
 80027d8:	f023 0307 	bic.w	r3, r3, #7
 80027dc:	3308      	adds	r3, #8
 80027de:	9303      	str	r3, [sp, #12]
 80027e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027e2:	443b      	add	r3, r7
 80027e4:	9309      	str	r3, [sp, #36]	; 0x24
 80027e6:	e767      	b.n	80026b8 <_vfiprintf_r+0x94>
 80027e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80027ec:	460c      	mov	r4, r1
 80027ee:	2001      	movs	r0, #1
 80027f0:	e7a5      	b.n	800273e <_vfiprintf_r+0x11a>
 80027f2:	2300      	movs	r3, #0
 80027f4:	3401      	adds	r4, #1
 80027f6:	9305      	str	r3, [sp, #20]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0c0a 	mov.w	ip, #10
 80027fe:	4620      	mov	r0, r4
 8002800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002804:	3a30      	subs	r2, #48	; 0x30
 8002806:	2a09      	cmp	r2, #9
 8002808:	d903      	bls.n	8002812 <_vfiprintf_r+0x1ee>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0c5      	beq.n	800279a <_vfiprintf_r+0x176>
 800280e:	9105      	str	r1, [sp, #20]
 8002810:	e7c3      	b.n	800279a <_vfiprintf_r+0x176>
 8002812:	fb0c 2101 	mla	r1, ip, r1, r2
 8002816:	4604      	mov	r4, r0
 8002818:	2301      	movs	r3, #1
 800281a:	e7f0      	b.n	80027fe <_vfiprintf_r+0x1da>
 800281c:	ab03      	add	r3, sp, #12
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	462a      	mov	r2, r5
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <_vfiprintf_r+0x25c>)
 8002824:	a904      	add	r1, sp, #16
 8002826:	4630      	mov	r0, r6
 8002828:	f3af 8000 	nop.w
 800282c:	4607      	mov	r7, r0
 800282e:	1c78      	adds	r0, r7, #1
 8002830:	d1d6      	bne.n	80027e0 <_vfiprintf_r+0x1bc>
 8002832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002834:	07d9      	lsls	r1, r3, #31
 8002836:	d405      	bmi.n	8002844 <_vfiprintf_r+0x220>
 8002838:	89ab      	ldrh	r3, [r5, #12]
 800283a:	059a      	lsls	r2, r3, #22
 800283c:	d402      	bmi.n	8002844 <_vfiprintf_r+0x220>
 800283e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002840:	f7ff fe55 	bl	80024ee <__retarget_lock_release_recursive>
 8002844:	89ab      	ldrh	r3, [r5, #12]
 8002846:	065b      	lsls	r3, r3, #25
 8002848:	f53f af12 	bmi.w	8002670 <_vfiprintf_r+0x4c>
 800284c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800284e:	e711      	b.n	8002674 <_vfiprintf_r+0x50>
 8002850:	ab03      	add	r3, sp, #12
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	462a      	mov	r2, r5
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <_vfiprintf_r+0x25c>)
 8002858:	a904      	add	r1, sp, #16
 800285a:	4630      	mov	r0, r6
 800285c:	f000 f880 	bl	8002960 <_printf_i>
 8002860:	e7e4      	b.n	800282c <_vfiprintf_r+0x208>
 8002862:	bf00      	nop
 8002864:	08002dd4 	.word	0x08002dd4
 8002868:	08002df4 	.word	0x08002df4
 800286c:	08002db4 	.word	0x08002db4
 8002870:	08002e14 	.word	0x08002e14
 8002874:	08002e1a 	.word	0x08002e1a
 8002878:	08002e1e 	.word	0x08002e1e
 800287c:	00000000 	.word	0x00000000
 8002880:	080025ff 	.word	0x080025ff

08002884 <_printf_common>:
 8002884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	4616      	mov	r6, r2
 800288a:	4699      	mov	r9, r3
 800288c:	688a      	ldr	r2, [r1, #8]
 800288e:	690b      	ldr	r3, [r1, #16]
 8002890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002894:	4293      	cmp	r3, r2
 8002896:	bfb8      	it	lt
 8002898:	4613      	movlt	r3, r2
 800289a:	6033      	str	r3, [r6, #0]
 800289c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028a0:	4607      	mov	r7, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	b10a      	cbz	r2, 80028aa <_printf_common+0x26>
 80028a6:	3301      	adds	r3, #1
 80028a8:	6033      	str	r3, [r6, #0]
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	0699      	lsls	r1, r3, #26
 80028ae:	bf42      	ittt	mi
 80028b0:	6833      	ldrmi	r3, [r6, #0]
 80028b2:	3302      	addmi	r3, #2
 80028b4:	6033      	strmi	r3, [r6, #0]
 80028b6:	6825      	ldr	r5, [r4, #0]
 80028b8:	f015 0506 	ands.w	r5, r5, #6
 80028bc:	d106      	bne.n	80028cc <_printf_common+0x48>
 80028be:	f104 0a19 	add.w	sl, r4, #25
 80028c2:	68e3      	ldr	r3, [r4, #12]
 80028c4:	6832      	ldr	r2, [r6, #0]
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	dc26      	bgt.n	800291a <_printf_common+0x96>
 80028cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028d0:	1e13      	subs	r3, r2, #0
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	bf18      	it	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	0692      	lsls	r2, r2, #26
 80028da:	d42b      	bmi.n	8002934 <_printf_common+0xb0>
 80028dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028e0:	4649      	mov	r1, r9
 80028e2:	4638      	mov	r0, r7
 80028e4:	47c0      	blx	r8
 80028e6:	3001      	adds	r0, #1
 80028e8:	d01e      	beq.n	8002928 <_printf_common+0xa4>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	68e5      	ldr	r5, [r4, #12]
 80028ee:	6832      	ldr	r2, [r6, #0]
 80028f0:	f003 0306 	and.w	r3, r3, #6
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	bf08      	it	eq
 80028f8:	1aad      	subeq	r5, r5, r2
 80028fa:	68a3      	ldr	r3, [r4, #8]
 80028fc:	6922      	ldr	r2, [r4, #16]
 80028fe:	bf0c      	ite	eq
 8002900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002904:	2500      	movne	r5, #0
 8002906:	4293      	cmp	r3, r2
 8002908:	bfc4      	itt	gt
 800290a:	1a9b      	subgt	r3, r3, r2
 800290c:	18ed      	addgt	r5, r5, r3
 800290e:	2600      	movs	r6, #0
 8002910:	341a      	adds	r4, #26
 8002912:	42b5      	cmp	r5, r6
 8002914:	d11a      	bne.n	800294c <_printf_common+0xc8>
 8002916:	2000      	movs	r0, #0
 8002918:	e008      	b.n	800292c <_printf_common+0xa8>
 800291a:	2301      	movs	r3, #1
 800291c:	4652      	mov	r2, sl
 800291e:	4649      	mov	r1, r9
 8002920:	4638      	mov	r0, r7
 8002922:	47c0      	blx	r8
 8002924:	3001      	adds	r0, #1
 8002926:	d103      	bne.n	8002930 <_printf_common+0xac>
 8002928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002930:	3501      	adds	r5, #1
 8002932:	e7c6      	b.n	80028c2 <_printf_common+0x3e>
 8002934:	18e1      	adds	r1, r4, r3
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	2030      	movs	r0, #48	; 0x30
 800293a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800293e:	4422      	add	r2, r4
 8002940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002948:	3302      	adds	r3, #2
 800294a:	e7c7      	b.n	80028dc <_printf_common+0x58>
 800294c:	2301      	movs	r3, #1
 800294e:	4622      	mov	r2, r4
 8002950:	4649      	mov	r1, r9
 8002952:	4638      	mov	r0, r7
 8002954:	47c0      	blx	r8
 8002956:	3001      	adds	r0, #1
 8002958:	d0e6      	beq.n	8002928 <_printf_common+0xa4>
 800295a:	3601      	adds	r6, #1
 800295c:	e7d9      	b.n	8002912 <_printf_common+0x8e>
	...

08002960 <_printf_i>:
 8002960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002964:	7e0f      	ldrb	r7, [r1, #24]
 8002966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002968:	2f78      	cmp	r7, #120	; 0x78
 800296a:	4691      	mov	r9, r2
 800296c:	4680      	mov	r8, r0
 800296e:	460c      	mov	r4, r1
 8002970:	469a      	mov	sl, r3
 8002972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002976:	d807      	bhi.n	8002988 <_printf_i+0x28>
 8002978:	2f62      	cmp	r7, #98	; 0x62
 800297a:	d80a      	bhi.n	8002992 <_printf_i+0x32>
 800297c:	2f00      	cmp	r7, #0
 800297e:	f000 80d8 	beq.w	8002b32 <_printf_i+0x1d2>
 8002982:	2f58      	cmp	r7, #88	; 0x58
 8002984:	f000 80a3 	beq.w	8002ace <_printf_i+0x16e>
 8002988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800298c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002990:	e03a      	b.n	8002a08 <_printf_i+0xa8>
 8002992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002996:	2b15      	cmp	r3, #21
 8002998:	d8f6      	bhi.n	8002988 <_printf_i+0x28>
 800299a:	a101      	add	r1, pc, #4	; (adr r1, 80029a0 <_printf_i+0x40>)
 800299c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029a0:	080029f9 	.word	0x080029f9
 80029a4:	08002a0d 	.word	0x08002a0d
 80029a8:	08002989 	.word	0x08002989
 80029ac:	08002989 	.word	0x08002989
 80029b0:	08002989 	.word	0x08002989
 80029b4:	08002989 	.word	0x08002989
 80029b8:	08002a0d 	.word	0x08002a0d
 80029bc:	08002989 	.word	0x08002989
 80029c0:	08002989 	.word	0x08002989
 80029c4:	08002989 	.word	0x08002989
 80029c8:	08002989 	.word	0x08002989
 80029cc:	08002b19 	.word	0x08002b19
 80029d0:	08002a3d 	.word	0x08002a3d
 80029d4:	08002afb 	.word	0x08002afb
 80029d8:	08002989 	.word	0x08002989
 80029dc:	08002989 	.word	0x08002989
 80029e0:	08002b3b 	.word	0x08002b3b
 80029e4:	08002989 	.word	0x08002989
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	08002989 	.word	0x08002989
 80029f0:	08002989 	.word	0x08002989
 80029f4:	08002b03 	.word	0x08002b03
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	1d1a      	adds	r2, r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	602a      	str	r2, [r5, #0]
 8002a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0a3      	b.n	8002b54 <_printf_i+0x1f4>
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	6829      	ldr	r1, [r5, #0]
 8002a10:	0606      	lsls	r6, r0, #24
 8002a12:	f101 0304 	add.w	r3, r1, #4
 8002a16:	d50a      	bpl.n	8002a2e <_printf_i+0xce>
 8002a18:	680e      	ldr	r6, [r1, #0]
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	2e00      	cmp	r6, #0
 8002a1e:	da03      	bge.n	8002a28 <_printf_i+0xc8>
 8002a20:	232d      	movs	r3, #45	; 0x2d
 8002a22:	4276      	negs	r6, r6
 8002a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a28:	485e      	ldr	r0, [pc, #376]	; (8002ba4 <_printf_i+0x244>)
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	e019      	b.n	8002a62 <_printf_i+0x102>
 8002a2e:	680e      	ldr	r6, [r1, #0]
 8002a30:	602b      	str	r3, [r5, #0]
 8002a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a36:	bf18      	it	ne
 8002a38:	b236      	sxthne	r6, r6
 8002a3a:	e7ef      	b.n	8002a1c <_printf_i+0xbc>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	1d19      	adds	r1, r3, #4
 8002a42:	6029      	str	r1, [r5, #0]
 8002a44:	0601      	lsls	r1, r0, #24
 8002a46:	d501      	bpl.n	8002a4c <_printf_i+0xec>
 8002a48:	681e      	ldr	r6, [r3, #0]
 8002a4a:	e002      	b.n	8002a52 <_printf_i+0xf2>
 8002a4c:	0646      	lsls	r6, r0, #25
 8002a4e:	d5fb      	bpl.n	8002a48 <_printf_i+0xe8>
 8002a50:	881e      	ldrh	r6, [r3, #0]
 8002a52:	4854      	ldr	r0, [pc, #336]	; (8002ba4 <_printf_i+0x244>)
 8002a54:	2f6f      	cmp	r7, #111	; 0x6f
 8002a56:	bf0c      	ite	eq
 8002a58:	2308      	moveq	r3, #8
 8002a5a:	230a      	movne	r3, #10
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a62:	6865      	ldr	r5, [r4, #4]
 8002a64:	60a5      	str	r5, [r4, #8]
 8002a66:	2d00      	cmp	r5, #0
 8002a68:	bfa2      	ittt	ge
 8002a6a:	6821      	ldrge	r1, [r4, #0]
 8002a6c:	f021 0104 	bicge.w	r1, r1, #4
 8002a70:	6021      	strge	r1, [r4, #0]
 8002a72:	b90e      	cbnz	r6, 8002a78 <_printf_i+0x118>
 8002a74:	2d00      	cmp	r5, #0
 8002a76:	d04d      	beq.n	8002b14 <_printf_i+0x1b4>
 8002a78:	4615      	mov	r5, r2
 8002a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8002a82:	5dc7      	ldrb	r7, [r0, r7]
 8002a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a88:	4637      	mov	r7, r6
 8002a8a:	42bb      	cmp	r3, r7
 8002a8c:	460e      	mov	r6, r1
 8002a8e:	d9f4      	bls.n	8002a7a <_printf_i+0x11a>
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d10b      	bne.n	8002aac <_printf_i+0x14c>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	07de      	lsls	r6, r3, #31
 8002a98:	d508      	bpl.n	8002aac <_printf_i+0x14c>
 8002a9a:	6923      	ldr	r3, [r4, #16]
 8002a9c:	6861      	ldr	r1, [r4, #4]
 8002a9e:	4299      	cmp	r1, r3
 8002aa0:	bfde      	ittt	le
 8002aa2:	2330      	movle	r3, #48	; 0x30
 8002aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002aa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002aac:	1b52      	subs	r2, r2, r5
 8002aae:	6122      	str	r2, [r4, #16]
 8002ab0:	f8cd a000 	str.w	sl, [sp]
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	aa03      	add	r2, sp, #12
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4640      	mov	r0, r8
 8002abc:	f7ff fee2 	bl	8002884 <_printf_common>
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d14c      	bne.n	8002b5e <_printf_i+0x1fe>
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac8:	b004      	add	sp, #16
 8002aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ace:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <_printf_i+0x244>)
 8002ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ad4:	6829      	ldr	r1, [r5, #0]
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002adc:	6029      	str	r1, [r5, #0]
 8002ade:	061d      	lsls	r5, r3, #24
 8002ae0:	d514      	bpl.n	8002b0c <_printf_i+0x1ac>
 8002ae2:	07df      	lsls	r7, r3, #31
 8002ae4:	bf44      	itt	mi
 8002ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8002aea:	6023      	strmi	r3, [r4, #0]
 8002aec:	b91e      	cbnz	r6, 8002af6 <_printf_i+0x196>
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f023 0320 	bic.w	r3, r3, #32
 8002af4:	6023      	str	r3, [r4, #0]
 8002af6:	2310      	movs	r3, #16
 8002af8:	e7b0      	b.n	8002a5c <_printf_i+0xfc>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	f043 0320 	orr.w	r3, r3, #32
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	2378      	movs	r3, #120	; 0x78
 8002b04:	4828      	ldr	r0, [pc, #160]	; (8002ba8 <_printf_i+0x248>)
 8002b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b0a:	e7e3      	b.n	8002ad4 <_printf_i+0x174>
 8002b0c:	0659      	lsls	r1, r3, #25
 8002b0e:	bf48      	it	mi
 8002b10:	b2b6      	uxthmi	r6, r6
 8002b12:	e7e6      	b.n	8002ae2 <_printf_i+0x182>
 8002b14:	4615      	mov	r5, r2
 8002b16:	e7bb      	b.n	8002a90 <_printf_i+0x130>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	6826      	ldr	r6, [r4, #0]
 8002b1c:	6961      	ldr	r1, [r4, #20]
 8002b1e:	1d18      	adds	r0, r3, #4
 8002b20:	6028      	str	r0, [r5, #0]
 8002b22:	0635      	lsls	r5, r6, #24
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	d501      	bpl.n	8002b2c <_printf_i+0x1cc>
 8002b28:	6019      	str	r1, [r3, #0]
 8002b2a:	e002      	b.n	8002b32 <_printf_i+0x1d2>
 8002b2c:	0670      	lsls	r0, r6, #25
 8002b2e:	d5fb      	bpl.n	8002b28 <_printf_i+0x1c8>
 8002b30:	8019      	strh	r1, [r3, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	6123      	str	r3, [r4, #16]
 8002b36:	4615      	mov	r5, r2
 8002b38:	e7ba      	b.n	8002ab0 <_printf_i+0x150>
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	1d1a      	adds	r2, r3, #4
 8002b3e:	602a      	str	r2, [r5, #0]
 8002b40:	681d      	ldr	r5, [r3, #0]
 8002b42:	6862      	ldr	r2, [r4, #4]
 8002b44:	2100      	movs	r1, #0
 8002b46:	4628      	mov	r0, r5
 8002b48:	f7fd fb52 	bl	80001f0 <memchr>
 8002b4c:	b108      	cbz	r0, 8002b52 <_printf_i+0x1f2>
 8002b4e:	1b40      	subs	r0, r0, r5
 8002b50:	6060      	str	r0, [r4, #4]
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	6123      	str	r3, [r4, #16]
 8002b56:	2300      	movs	r3, #0
 8002b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b5c:	e7a8      	b.n	8002ab0 <_printf_i+0x150>
 8002b5e:	6923      	ldr	r3, [r4, #16]
 8002b60:	462a      	mov	r2, r5
 8002b62:	4649      	mov	r1, r9
 8002b64:	4640      	mov	r0, r8
 8002b66:	47d0      	blx	sl
 8002b68:	3001      	adds	r0, #1
 8002b6a:	d0ab      	beq.n	8002ac4 <_printf_i+0x164>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	079b      	lsls	r3, r3, #30
 8002b70:	d413      	bmi.n	8002b9a <_printf_i+0x23a>
 8002b72:	68e0      	ldr	r0, [r4, #12]
 8002b74:	9b03      	ldr	r3, [sp, #12]
 8002b76:	4298      	cmp	r0, r3
 8002b78:	bfb8      	it	lt
 8002b7a:	4618      	movlt	r0, r3
 8002b7c:	e7a4      	b.n	8002ac8 <_printf_i+0x168>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4632      	mov	r2, r6
 8002b82:	4649      	mov	r1, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	47d0      	blx	sl
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d09b      	beq.n	8002ac4 <_printf_i+0x164>
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	68e3      	ldr	r3, [r4, #12]
 8002b90:	9903      	ldr	r1, [sp, #12]
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	42ab      	cmp	r3, r5
 8002b96:	dcf2      	bgt.n	8002b7e <_printf_i+0x21e>
 8002b98:	e7eb      	b.n	8002b72 <_printf_i+0x212>
 8002b9a:	2500      	movs	r5, #0
 8002b9c:	f104 0619 	add.w	r6, r4, #25
 8002ba0:	e7f5      	b.n	8002b8e <_printf_i+0x22e>
 8002ba2:	bf00      	nop
 8002ba4:	08002e25 	.word	0x08002e25
 8002ba8:	08002e36 	.word	0x08002e36

08002bac <_putc_r>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	460d      	mov	r5, r1
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	b118      	cbz	r0, 8002bbe <_putc_r+0x12>
 8002bb6:	6983      	ldr	r3, [r0, #24]
 8002bb8:	b90b      	cbnz	r3, 8002bbe <_putc_r+0x12>
 8002bba:	f7ff fbf9 	bl	80023b0 <__sinit>
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <_putc_r+0x84>)
 8002bc0:	429c      	cmp	r4, r3
 8002bc2:	d124      	bne.n	8002c0e <_putc_r+0x62>
 8002bc4:	6874      	ldr	r4, [r6, #4]
 8002bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bc8:	07d8      	lsls	r0, r3, #31
 8002bca:	d405      	bmi.n	8002bd8 <_putc_r+0x2c>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	0599      	lsls	r1, r3, #22
 8002bd0:	d402      	bmi.n	8002bd8 <_putc_r+0x2c>
 8002bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bd4:	f7ff fc8a 	bl	80024ec <__retarget_lock_acquire_recursive>
 8002bd8:	68a3      	ldr	r3, [r4, #8]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	60a3      	str	r3, [r4, #8]
 8002be0:	da05      	bge.n	8002bee <_putc_r+0x42>
 8002be2:	69a2      	ldr	r2, [r4, #24]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	db1c      	blt.n	8002c22 <_putc_r+0x76>
 8002be8:	b2eb      	uxtb	r3, r5
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d019      	beq.n	8002c22 <_putc_r+0x76>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	701d      	strb	r5, [r3, #0]
 8002bf6:	b2ed      	uxtb	r5, r5
 8002bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bfa:	07da      	lsls	r2, r3, #31
 8002bfc:	d405      	bmi.n	8002c0a <_putc_r+0x5e>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	059b      	lsls	r3, r3, #22
 8002c02:	d402      	bmi.n	8002c0a <_putc_r+0x5e>
 8002c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c06:	f7ff fc72 	bl	80024ee <__retarget_lock_release_recursive>
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <_putc_r+0x88>)
 8002c10:	429c      	cmp	r4, r3
 8002c12:	d101      	bne.n	8002c18 <_putc_r+0x6c>
 8002c14:	68b4      	ldr	r4, [r6, #8]
 8002c16:	e7d6      	b.n	8002bc6 <_putc_r+0x1a>
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <_putc_r+0x8c>)
 8002c1a:	429c      	cmp	r4, r3
 8002c1c:	bf08      	it	eq
 8002c1e:	68f4      	ldreq	r4, [r6, #12]
 8002c20:	e7d1      	b.n	8002bc6 <_putc_r+0x1a>
 8002c22:	4629      	mov	r1, r5
 8002c24:	4622      	mov	r2, r4
 8002c26:	4630      	mov	r0, r6
 8002c28:	f7ff f9ec 	bl	8002004 <__swbuf_r>
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	e7e3      	b.n	8002bf8 <_putc_r+0x4c>
 8002c30:	08002dd4 	.word	0x08002dd4
 8002c34:	08002df4 	.word	0x08002df4
 8002c38:	08002db4 	.word	0x08002db4

08002c3c <__sread>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	460c      	mov	r4, r1
 8002c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c44:	f000 f894 	bl	8002d70 <_read_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	bfab      	itete	ge
 8002c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c50:	181b      	addge	r3, r3, r0
 8002c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c56:	bfac      	ite	ge
 8002c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c5a:	81a3      	strhlt	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__swrite>:
 8002c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c62:	461f      	mov	r7, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	4605      	mov	r5, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	d505      	bpl.n	8002c7c <__swrite+0x1e>
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	2302      	movs	r3, #2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f868 	bl	8002d4c <_lseek_r>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	4632      	mov	r2, r6
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c92:	f000 b817 	b.w	8002cc4 <_write_r>

08002c96 <__sseek>:
 8002c96:	b510      	push	{r4, lr}
 8002c98:	460c      	mov	r4, r1
 8002c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9e:	f000 f855 	bl	8002d4c <_lseek_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	bf15      	itete	ne
 8002ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cb2:	81a3      	strheq	r3, [r4, #12]
 8002cb4:	bf18      	it	ne
 8002cb6:	81a3      	strhne	r3, [r4, #12]
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <__sclose>:
 8002cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbe:	f000 b813 	b.w	8002ce8 <_close_r>
	...

08002cc4 <_write_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	; (8002ce4 <_write_r+0x20>)
 8002cc8:	4604      	mov	r4, r0
 8002cca:	4608      	mov	r0, r1
 8002ccc:	4611      	mov	r1, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7fe fec7 	bl	8001a66 <_write>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_write_r+0x1e>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_write_r+0x1e>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	20000130 	.word	0x20000130

08002ce8 <_close_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	; (8002d04 <_close_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fe fed3 	bl	8001a9e <_close>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_close_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_close_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	20000130 	.word	0x20000130

08002d08 <_fstat_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4d07      	ldr	r5, [pc, #28]	; (8002d28 <_fstat_r+0x20>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4604      	mov	r4, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	f7fe fecd 	bl	8001ab4 <_fstat>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	d102      	bne.n	8002d24 <_fstat_r+0x1c>
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	b103      	cbz	r3, 8002d24 <_fstat_r+0x1c>
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
 8002d26:	bf00      	nop
 8002d28:	20000130 	.word	0x20000130

08002d2c <_isatty_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d06      	ldr	r5, [pc, #24]	; (8002d48 <_isatty_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	f7fe fecb 	bl	8001ad2 <_isatty>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_isatty_r+0x1a>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_isatty_r+0x1a>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	20000130 	.word	0x20000130

08002d4c <_lseek_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_lseek_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fe fec3 	bl	8001ae6 <_lseek>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_lseek_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_lseek_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000130 	.word	0x20000130

08002d70 <_read_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4d07      	ldr	r5, [pc, #28]	; (8002d90 <_read_r+0x20>)
 8002d74:	4604      	mov	r4, r0
 8002d76:	4608      	mov	r0, r1
 8002d78:	4611      	mov	r1, r2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	602a      	str	r2, [r5, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7fe fe54 	bl	8001a2c <_read>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_read_r+0x1e>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_read_r+0x1e>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	20000130 	.word	0x20000130

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
