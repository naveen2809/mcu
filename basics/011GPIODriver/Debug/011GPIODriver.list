
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003450  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003758  08003758  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003758  08003758  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004418  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f9a  00000000  00000000  000244b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00025450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003d0  00000000  00000000  000258e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002da3  00000000  00000000  00025cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006207  00000000  00000000  00028a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e9eb  00000000  00000000  0002ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003d64d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018d8  00000000  00000000  0003d6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080035e8 	.word	0x080035e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080035e8 	.word	0x080035e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000090 	.word	0x20000090

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f002 f92d 	bl	8002530 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fd7c 	bl	8001de4 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 ff29 	bl	8001144 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f001 f967 	bl	80015c6 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000094 	.word	0x20000094

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 f90d 	bl	8002530 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 fd64 	bl	8001de4 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f001 f961 	bl	80015e8 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f001 f95c 	bl	80015e8 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f001 f99d 	bl	8001674 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f001 f998 	bl	8001674 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f001 f9cc 	bl	80016e6 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f001 f9c7 	bl	80016e6 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f001 fa08 	bl	8001772 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f001 fa03 	bl	8001772 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f001 f9da 	bl	800172a <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f001 f9d5 	bl	800172a <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fd23 	bl	8001de4 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fa07 	bl	80017ba <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fb18 	bl	80019e8 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fa52 	bl	8001866 <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 f8a5 	bl	8002530 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f001 fcfc 	bl	8001de4 <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f001 f8f9 	bl	80015e8 <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f001 f8f4 	bl	80015e8 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f001 f935 	bl	8001674 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f001 f930 	bl	8001674 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f001 f964 	bl	80016e6 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f001 f95f 	bl	80016e6 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f001 f9a0 	bl	8001772 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f001 f99b 	bl	8001772 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f001 f972 	bl	800172a <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f001 f96d 	bl	800172a <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fcbb 	bl	8001de4 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f99f 	bl	80017ba <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fab0 	bl	80019e8 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f9ea 	bl	8001866 <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fc07 	bl	8001cc4 <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <RTC_DS3231_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2204      	movs	r2, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 f82d 	bl	8002530 <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
 800052c:	e01a      	b.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d116      	bne.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 8000568:	7b3b      	ldrb	r3, [r7, #12]
 800056a:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	2204      	movs	r2, #4
 8000582:	f001 f981 	bl	8001888 <I2CMasterSendData>
	delay_us(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058a:	f7ff fe81 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2204      	movs	r2, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 ffca 	bl	8002530 <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b9b      	ldrb	r3, [r3, #14]
 80005a0:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7a9b      	ldrb	r3, [r3, #10]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7adb      	ldrb	r3, [r3, #11]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b1b      	ldrb	r3, [r3, #12]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b5b      	ldrb	r3, [r3, #13]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 80005e4:	2303      	movs	r3, #3
 80005e6:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 80005ec:	7a3b      	ldrb	r3, [r7, #8]
 80005ee:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	2205      	movs	r2, #5
 8000606:	f001 f93f 	bl	8001888 <I2CMasterSendData>

	return;
 800060a:	bf00      	nop
}
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008
 8000618:	2000000c 	.word	0x2000000c

0800061c <RTC_DS3231_Read_Calendar>:

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,RxBuf,7,0, SlaveAddressRTC);
 8000626:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <RTC_DS3231_Read_Calendar+0x198>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <RTC_DS3231_Read_Calendar+0x19c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2207      	movs	r2, #7
 8000638:	f001 fa08 	bl	8001a4c <I2CMaster_DS3231_RTC_Read>

	time->seconds = ((RxBuf[0] >> DS3231_RTC_TR_ST) & 0x7)*10 + ((RxBuf[0] >> DS3231_RTC_TR_SU) & 0xF);
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	701a      	strb	r2, [r3, #0]
	time->minutes = ((RxBuf[1] >> DS3231_RTC_TR_MNT) & 0x7)*10 + ((RxBuf[1] >> DS3231_RTC_TR_MNU) & 0xF);
 8000662:	7a7b      	ldrb	r3, [r7, #9]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4413      	add	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4413      	add	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	705a      	strb	r2, [r3, #1]
	if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)     //24 Hour Format
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	099b      	lsrs	r3, r3, #6
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d120      	bne.n	80006da <RTC_DS3231_Read_Calendar+0xbe>
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x3)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000698:	7abb      	ldrb	r3, [r7, #10]
 800069a:	091b      	lsrs	r3, r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	b25a      	sxtb	r2, r3
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	709a      	strb	r2, [r3, #2]
 80006d8:	e02c      	b.n	8000734 <RTC_DS3231_Read_Calendar+0x118>
	}
	else   //12 Hour Format
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x1)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 80006da:	7abb      	ldrb	r3, [r7, #10]
 80006dc:	091b      	lsrs	r3, r3, #4
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7abb      	ldrb	r3, [r7, #10]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_AMPM));
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	7abb      	ldrb	r3, [r7, #10]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	b2da      	uxtb	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	7abb      	ldrb	r3, [r7, #10]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	709a      	strb	r2, [r3, #2]
	}

	date->dayofweek = (RxBuf[3] & 0x7);
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	70da      	strb	r2, [r3, #3]
	date->date = ((RxBuf[4] >> DS3231_RTC_DR_DT) & 0x3)*10 + ((RxBuf[4] >> DS3231_RTC_DR_DU) & 0xF);
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	701a      	strb	r2, [r3, #0]
	date->month = ((RxBuf[5] >> DS3231_RTC_DR_MT) & 0x1)*10 + ((RxBuf[5] >> DS3231_RTC_DR_MU) & 0xF);
 8000766:	7b7b      	ldrb	r3, [r7, #13]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	705a      	strb	r2, [r3, #1]
	date->year = ((RxBuf[6] >> DS3231_RTC_DR_YT) & 0xF)*10 + ((RxBuf[6] >> DS3231_RTC_DR_YU) & 0xF);
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	709a      	strb	r2, [r3, #2]

	return;
 80007ac:	bf00      	nop
}
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008
 80007b8:	2000000c 	.word	0x2000000c

080007bc <RTC_DS3231_Display_Calendar_LCD>:

void RTC_DS3231_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(ds3231_display_count == 0)
 80007c6:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 809c 	bne.w	8000908 <RTC_DS3231_Display_Calendar_LCD+0x14c>
	{
		memset(&saved_time,0,sizeof(struct Time));
 80007d0:	2204      	movs	r2, #4
 80007d2:	2100      	movs	r1, #0
 80007d4:	4884      	ldr	r0, [pc, #528]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80007d6:	f001 feab 	bl	8002530 <memset>
		memset(&saved_date,0,sizeof(struct Date));
 80007da:	2204      	movs	r2, #4
 80007dc:	2100      	movs	r1, #0
 80007de:	4883      	ldr	r0, [pc, #524]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80007e0:	f001 fea6 	bl	8002530 <memset>

		//Print the Time Information
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)      //24 Hour Format
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	099b      	lsrs	r3, r3, #6
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d117      	bne.n	8000824 <RTC_DS3231_Display_Calendar_LCD+0x68>
		{
			lcd_pcf8574_clear_screen();
 80007f4:	f001 fa98 	bl	8001d28 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 80007f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007fc:	f7ff fd48 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000800:	f001 fa99 	bl	8001d36 <lcd_pcf8574_return_home>
			delay_us(3000);
 8000804:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000808:	f7ff fd42 	bl	8000290 <delay_us>
			printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	4619      	mov	r1, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	461a      	mov	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4874      	ldr	r0, [pc, #464]	; (80009f0 <RTC_DS3231_Display_Calendar_LCD+0x234>)
 800081e:	f001 ff6d 	bl	80026fc <iprintf>
 8000822:	e02c      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
		}
		else  //12 Hour Format
		{
			lcd_pcf8574_clear_screen();
 8000824:	f001 fa80 	bl	8001d28 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8000828:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800082c:	f7ff fd30 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000830:	f001 fa81 	bl	8001d36 <lcd_pcf8574_return_home>
			delay_us(3000);
 8000834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000838:	f7ff fd2a 	bl	8000290 <delay_us>
			if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)		//AM
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10c      	bne.n	8000866 <RTC_DS3231_Display_Calendar_LCD+0xaa>
			{
				printf("   %02d:%02d:%02d AM",(time->hours & 0xF),time->minutes,time->seconds);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	f003 010f 	and.w	r1, r3, #15
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	461a      	mov	r2, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4865      	ldr	r0, [pc, #404]	; (80009f4 <RTC_DS3231_Display_Calendar_LCD+0x238>)
 8000860:	f001 ff4c 	bl	80026fc <iprintf>
 8000864:	e00b      	b.n	800087e <RTC_DS3231_Display_Calendar_LCD+0xc2>
			}
			else
			{
				printf("   %02d:%02d:%02d PM",(time->hours & 0xF),time->minutes,time->seconds);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	f003 010f 	and.w	r1, r3, #15
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	485f      	ldr	r0, [pc, #380]	; (80009f8 <RTC_DS3231_Display_Calendar_LCD+0x23c>)
 800087a:	f001 ff3f 	bl	80026fc <iprintf>
			}
		}

		//Saving the time information
		saved_time.seconds = time->seconds;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000884:	701a      	strb	r2, [r3, #0]
		saved_time.minutes = time->minutes;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	785a      	ldrb	r2, [r3, #1]
 800088a:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800088c:	705a      	strb	r2, [r3, #1]
		saved_time.hours = time->hours;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789a      	ldrb	r2, [r3, #2]
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000894:	709a      	strb	r2, [r3, #2]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 8000896:	2100      	movs	r1, #0
 8000898:	2001      	movs	r0, #1
 800089a:	f001 fa53 	bl	8001d44 <lcd_pcf8574_set_position>
		delay_us(3000);
 800089e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a2:	f7ff fcf5 	bl	8000290 <delay_us>
		format_dow(date,dow);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 fa8f 	bl	8000dd0 <format_dow>
		format_mon(date,mon);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 fadd 	bl	8000e78 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	4602      	mov	r2, r0
 80008d6:	4849      	ldr	r0, [pc, #292]	; (80009fc <RTC_DS3231_Display_Calendar_LCD+0x240>)
 80008d8:	f001 ff10 	bl	80026fc <iprintf>

		//Saving the date information
		saved_date.date = date->date;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008e2:	701a      	strb	r2, [r3, #0]
		saved_date.month = date->month;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	785a      	ldrb	r2, [r3, #1]
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008ea:	705a      	strb	r2, [r3, #1]
		saved_date.year = date->year;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789a      	ldrb	r2, [r3, #2]
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008f2:	709a      	strb	r2, [r3, #2]
		saved_date.dayofweek = date->dayofweek;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	78da      	ldrb	r2, [r3, #3]
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <RTC_DS3231_Display_Calendar_LCD+0x230>)
 80008fa:	70da      	strb	r2, [r3, #3]

		//Update count value
		ds3231_display_count++;
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000904:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 8000906:	e128      	b.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)   //24 Hour Format
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	099b      	lsrs	r3, r3, #6
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d148      	bne.n	80009aa <RTC_DS3231_Display_Calendar_LCD+0x1ee>
			if(saved_time.seconds != time->seconds)
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d011      	beq.n	8000948 <RTC_DS3231_Display_Calendar_LCD+0x18c>
				lcd_pcf8574_set_position(0,10);
 8000924:	210a      	movs	r1, #10
 8000926:	2000      	movs	r0, #0
 8000928:	f001 fa0c 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 800092c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000930:	f7ff fcae 	bl	8000290 <delay_us>
				printf("%02d",time->seconds);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800093c:	f001 fede 	bl	80026fc <iprintf>
				saved_time.seconds = time->seconds;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000946:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800094a:	785a      	ldrb	r2, [r3, #1]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	429a      	cmp	r2, r3
 8000952:	d011      	beq.n	8000978 <RTC_DS3231_Display_Calendar_LCD+0x1bc>
				lcd_pcf8574_set_position(0,7);
 8000954:	2107      	movs	r1, #7
 8000956:	2000      	movs	r0, #0
 8000958:	f001 f9f4 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f7ff fc96 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	4619      	mov	r1, r3
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800096c:	f001 fec6 	bl	80026fc <iprintf>
				saved_time.minutes = time->minutes;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000976:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	429a      	cmp	r2, r3
 8000982:	d07d      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,4);
 8000984:	2104      	movs	r1, #4
 8000986:	2000      	movs	r0, #0
 8000988:	f001 f9dc 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f7ff fc7e 	bl	8000290 <delay_us>
				printf("%02d",time->hours);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	4619      	mov	r1, r3
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 800099c:	f001 feae 	bl	80026fc <iprintf>
				saved_time.hours = time->hours;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	789a      	ldrb	r2, [r3, #2]
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009a6:	709a      	strb	r2, [r3, #2]
 80009a8:	e06a      	b.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
			if(saved_time.seconds != time->seconds)
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d032      	beq.n	8000a1c <RTC_DS3231_Display_Calendar_LCD+0x260>
				lcd_pcf8574_set_position(0,9);
 80009b6:	2109      	movs	r1, #9
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f9c3 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c2:	f7ff fc65 	bl	8000290 <delay_us>
				if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)    //AM
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d118      	bne.n	8000a08 <RTC_DS3231_Display_Calendar_LCD+0x24c>
					printf("%02d AM",time->seconds);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <RTC_DS3231_Display_Calendar_LCD+0x248>)
 80009de:	f001 fe8d 	bl	80026fc <iprintf>
 80009e2:	e017      	b.n	8000a14 <RTC_DS3231_Display_Calendar_LCD+0x258>
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	200000c0 	.word	0x200000c0
 80009ec:	200000bc 	.word	0x200000bc
 80009f0:	08003600 	.word	0x08003600
 80009f4:	08003614 	.word	0x08003614
 80009f8:	0800362c 	.word	0x0800362c
 80009fc:	08003644 	.word	0x08003644
 8000a00:	08003658 	.word	0x08003658
 8000a04:	08003660 	.word	0x08003660
					printf("%02d PM",time->seconds);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4855      	ldr	r0, [pc, #340]	; (8000b64 <RTC_DS3231_Display_Calendar_LCD+0x3a8>)
 8000a10:	f001 fe74 	bl	80026fc <iprintf>
				saved_time.seconds = time->seconds;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000a1c:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a1e:	785a      	ldrb	r2, [r3, #1]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d011      	beq.n	8000a4c <RTC_DS3231_Display_Calendar_LCD+0x290>
				lcd_pcf8574_set_position(0,6);
 8000a28:	2106      	movs	r1, #6
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 f98a 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f7ff fc2c 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	484b      	ldr	r0, [pc, #300]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a40:	f001 fe5c 	bl	80026fc <iprintf>
				saved_time.minutes = time->minutes;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	785a      	ldrb	r2, [r3, #1]
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4a:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a4e:	789a      	ldrb	r2, [r3, #2]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d013      	beq.n	8000a80 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,3);
 8000a58:	2103      	movs	r1, #3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f972 	bl	8001d44 <lcd_pcf8574_set_position>
				delay_us(500);
 8000a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a64:	f7ff fc14 	bl	8000290 <delay_us>
				printf("%02d",(time->hours & 0xF));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	4619      	mov	r1, r3
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000a74:	f001 fe42 	bl	80026fc <iprintf>
				saved_time.hours = time->hours;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789a      	ldrb	r2, [r3, #2]
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000a7e:	709a      	strb	r2, [r3, #2]
		if(saved_date.date != date->date)
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d011      	beq.n	8000ab0 <RTC_DS3231_Display_Calendar_LCD+0x2f4>
			lcd_pcf8574_set_position(1,6);
 8000a8c:	2106      	movs	r1, #6
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 f958 	bl	8001d44 <lcd_pcf8574_set_position>
			delay_us(500);
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f7ff fbfa 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000aa4:	f001 fe2a 	bl	80026fc <iprintf>
			saved_date.date = date->date;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aae:	701a      	strb	r2, [r3, #0]
		if(saved_date.month != date->month)
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d017      	beq.n	8000aec <RTC_DS3231_Display_Calendar_LCD+0x330>
			lcd_pcf8574_set_position(1,9);
 8000abc:	2109      	movs	r1, #9
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f001 f940 	bl	8001d44 <lcd_pcf8574_set_position>
			delay_us(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fbe2 	bl	8000290 <delay_us>
			format_mon(date,mon);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f9d0 	bl	8000e78 <format_mon>
			printf("%s",mon);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000ae0:	f001 fe0c 	bl	80026fc <iprintf>
			saved_date.month = date->month;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	785a      	ldrb	r2, [r3, #1]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aea:	705a      	strb	r2, [r3, #1]
		if(saved_date.year != date->year)
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000aee:	789a      	ldrb	r2, [r3, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d011      	beq.n	8000b1c <RTC_DS3231_Display_Calendar_LCD+0x360>
			lcd_pcf8574_set_position(1,13);
 8000af8:	210d      	movs	r1, #13
 8000afa:	2001      	movs	r0, #1
 8000afc:	f001 f922 	bl	8001d44 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f7ff fbc4 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000b10:	f001 fdf4 	bl	80026fc <iprintf>
			saved_date.year = date->year;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	789a      	ldrb	r2, [r3, #2]
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1a:	709a      	strb	r2, [r3, #2]
		if(saved_date.dayofweek != date->dayofweek)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b1e:	78da      	ldrb	r2, [r3, #3]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d018      	beq.n	8000b5a <RTC_DS3231_Display_Calendar_LCD+0x39e>
			lcd_pcf8574_set_position(1,2);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 f90a 	bl	8001d44 <lcd_pcf8574_set_position>
			delay_us(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f7ff fbac 	bl	8000290 <delay_us>
			format_dow(date,dow);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f946 	bl	8000dd0 <format_dow>
			printf("%s",dow);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000b4c:	f001 fdd6 	bl	80026fc <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	78da      	ldrb	r2, [r3, #3]
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000b56:	70da      	strb	r2, [r3, #3]
	return;
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
}
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08003668 	.word	0x08003668
 8000b68:	200000c0 	.word	0x200000c0
 8000b6c:	08003658 	.word	0x08003658
 8000b70:	200000bc 	.word	0x200000bc
 8000b74:	08003670 	.word	0x08003670

08000b78 <RTC_DS3231_Config_Alarm>:

void RTC_DS3231_Config_Alarm(struct RTC_DS3231_AlarmConfig_t *pRTCAlarmConfig)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	uint8_t seconds, minutes, hours, date, control_register;

	seconds = (pRTCAlarmConfig->RTCAlarmSecondsUnits << DS3231_RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << DS3231_RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << DS3231_RTC_ALRMR_MSK1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	b25a      	sxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	011b      	lsls	r3, r3, #4
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	01db      	lsls	r3, r3, #7
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	757b      	strb	r3, [r7, #21]
	minutes = (pRTCAlarmConfig->RTCAlarmMinutesUnits << DS3231_RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << DS3231_RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << DS3231_RTC_ALRMR_MSK2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	795b      	ldrb	r3, [r3, #5]
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b25a      	sxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	01db      	lsls	r3, r3, #7
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	753b      	strb	r3, [r7, #20]

	if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_24)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7a5b      	ldrb	r3, [r3, #9]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d116      	bne.n	8000bf6 <RTC_DS3231_Config_Alarm+0x7e>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	79db      	ldrb	r3, [r3, #7]
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7a1b      	ldrb	r3, [r3, #8]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7a5b      	ldrb	r3, [r3, #9]
 8000bde:	019b      	lsls	r3, r3, #6
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7adb      	ldrb	r3, [r3, #11]
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	75fb      	strb	r3, [r7, #23]
 8000bf4:	e01f      	b.n	8000c36 <RTC_DS3231_Config_Alarm+0xbe>
	}
	else if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_12)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7a5b      	ldrb	r3, [r3, #9]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d11b      	bne.n	8000c36 <RTC_DS3231_Config_Alarm+0xbe>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << DS3231_RTC_ALRMR_AMPM) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	79db      	ldrb	r3, [r3, #7]
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7a1b      	ldrb	r3, [r3, #8]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7a9b      	ldrb	r3, [r3, #10]
 8000c14:	015b      	lsls	r3, r3, #5
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7a5b      	ldrb	r3, [r3, #9]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7adb      	ldrb	r3, [r3, #11]
 8000c2c:	01db      	lsls	r3, r3, #7
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	75fb      	strb	r3, [r7, #23]
	}

	if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_NO)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7bdb      	ldrb	r3, [r3, #15]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d110      	bne.n	8000c60 <RTC_DS3231_Config_Alarm+0xe8>
	{
		//Configure the Date
		date = (pRTCAlarmConfig->RTCAlarmDateUnits << DS3231_RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << DS3231_RTC_ALRMR_DT) | (0 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b1b      	ldrb	r3, [r3, #12]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7b5b      	ldrb	r3, [r3, #13]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b25a      	sxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7c1b      	ldrb	r3, [r3, #16]
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	75bb      	strb	r3, [r7, #22]
 8000c5e:	e00e      	b.n	8000c7e <RTC_DS3231_Config_Alarm+0x106>
	}
	else if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_YES)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7bdb      	ldrb	r3, [r3, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10a      	bne.n	8000c7e <RTC_DS3231_Config_Alarm+0x106>
	{
		//Configure the WeekDay
		date = (pRTCAlarmConfig->RTCAlarmDayOfWeek << DS3231_RTC_ALRMR_DU) | (1 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b9a      	ldrb	r2, [r3, #14]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7c1b      	ldrb	r3, [r3, #16]
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7c:	75bb      	strb	r3, [r7, #22]
	}

	//Configure the ALARM Parameters in the Device
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d113      	bne.n	8000cae <RTC_DS3231_Config_Alarm+0x136>
	{
		Tx_Buf[0] = 0x07;
 8000c86:	2307      	movs	r3, #7
 8000c88:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = seconds;
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = minutes;
 8000c8e:	7d3b      	ldrb	r3, [r7, #20]
 8000c90:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = hours;
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	73fb      	strb	r3, [r7, #15]
		Tx_Buf[4] = date;
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	743b      	strb	r3, [r7, #16]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f107 010c 	add.w	r1, r7, #12
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	f000 fdee 	bl	8001888 <I2CMasterSendData>
 8000cac:	e014      	b.n	8000cd8 <RTC_DS3231_Config_Alarm+0x160>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d110      	bne.n	8000cd8 <RTC_DS3231_Config_Alarm+0x160>
	{
		Tx_Buf[0] = 0x0B;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = minutes;
 8000cba:	7d3b      	ldrb	r3, [r7, #20]
 8000cbc:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = hours;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = date;
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	73fb      	strb	r3, [r7, #15]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f107 010c 	add.w	r1, r7, #12
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	f000 fdd8 	bl	8001888 <I2CMasterSendData>
	}

	//Enable the Alarm in the configuration register
	//a. Read the configuration register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&control_register,1,0x0E, SlaveAddressRTC);
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f107 010b 	add.w	r1, r7, #11
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	230e      	movs	r3, #14
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f000 feaf 	bl	8001a4c <I2CMaster_DS3231_RTC_Read>

	//b. Modify the Alarm Enable Bits
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <RTC_DS3231_Config_Alarm+0x18a>
	{
		control_register |= (1 << DS3231_RTC_CR_A1IE);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	72fb      	strb	r3, [r7, #11]
 8000d00:	e008      	b.n	8000d14 <RTC_DS3231_Config_Alarm+0x19c>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <RTC_DS3231_Config_Alarm+0x19c>
	{
		control_register |= (1 << DS3231_RTC_CR_A2IE);
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	72fb      	strb	r3, [r7, #11]
	}

	//c. Write to the configuration register
	Tx_Buf[0] = 0x0E;
 8000d14:	230e      	movs	r3, #14
 8000d16:	733b      	strb	r3, [r7, #12]
	Tx_Buf[1] = control_register;
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	737b      	strb	r3, [r7, #13]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <RTC_DS3231_Config_Alarm+0x1c4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f000 fdad 	bl	8001888 <I2CMasterSendData>

	return;
 8000d2e:	bf00      	nop
}
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <RTC_DS3231_Config_Alarm_Interrupt>:

void RTC_DS3231_Config_Alarm_Interrupt(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(DS3231_RTC_ALARM_INPUT_GPIO_PORT,DS3231_RTC_ALARM_INPUT_GPIO_PIN,EXTI_FALLING_TRIGGER,DS3231_RTC_ALARM_INPUT_IRQ_NUM);
 8000d44:	2306      	movs	r3, #6
 8000d46:	2201      	movs	r2, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4802      	ldr	r0, [pc, #8]	; (8000d54 <RTC_DS3231_Config_Alarm_Interrupt+0x14>)
 8000d4c:	f000 f914 	bl	8000f78 <configure_external_gpio_interrupt>

	return;
 8000d50:	bf00      	nop
}
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <RTC_DS3231_Clear_Alarm>:

	return reg;
}

void RTC_DS3231_Clear_Alarm(uint8_t AlarmSelection)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	uint8_t control_status_reg_address = 15;
 8000d62:	230f      	movs	r3, #15
 8000d64:	73fb      	strb	r3, [r7, #15]
	uint8_t Tx_Buf[2];

	//Read the Control Status Register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&reg,1,control_status_reg_address,SlaveAddressRTC);
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <RTC_DS3231_Clear_Alarm+0x70>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <RTC_DS3231_Clear_Alarm+0x74>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	f107 010e 	add.w	r1, r7, #14
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f000 fe67 	bl	8001a4c <I2CMaster_DS3231_RTC_Read>

	//Update the Control Status Register
	Tx_Buf[0] = control_status_reg_address;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	733b      	strb	r3, [r7, #12]

	if(AlarmSelection == DS3231_RTC_ALARM_1)
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <RTC_DS3231_Clear_Alarm+0x3c>
	{
		Tx_Buf[1] = reg & 0xFE;
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	737b      	strb	r3, [r7, #13]
 8000d92:	e007      	b.n	8000da4 <RTC_DS3231_Clear_Alarm+0x4c>
	}
	else if(AlarmSelection == DS3231_RTC_ALARM_2)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d104      	bne.n	8000da4 <RTC_DS3231_Clear_Alarm+0x4c>
	{
		Tx_Buf[1] = reg & 0xFD;
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	f023 0302 	bic.w	r3, r3, #2
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	737b      	strb	r3, [r7, #13]
	}

	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <RTC_DS3231_Clear_Alarm+0x70>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <RTC_DS3231_Clear_Alarm+0x74>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f107 010c 	add.w	r1, r7, #12
 8000db0:	2202      	movs	r2, #2
 8000db2:	f000 fd69 	bl	8001888 <I2CMasterSendData>
	delay_us(2000);
 8000db6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dba:	f7ff fa69 	bl	8000290 <delay_us>

	return;
 8000dbe:	bf00      	nop
}
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d834      	bhi.n	8000e4e <format_dow+0x7e>
 8000de4:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <format_dow+0x1c>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e09 	.word	0x08000e09
 8000df0:	08000e13 	.word	0x08000e13
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	08000e27 	.word	0x08000e27
 8000dfc:	08000e31 	.word	0x08000e31
 8000e00:	08000e3b 	.word	0x08000e3b
 8000e04:	08000e45 	.word	0x08000e45
	{
		case 1:
			strcpy(dow,"Mon");
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <format_dow+0x8c>)
 8000e0c:	6810      	ldr	r0, [r2, #0]
 8000e0e:	6018      	str	r0, [r3, #0]
			break;
 8000e10:	e01e      	b.n	8000e50 <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <format_dow+0x90>)
 8000e16:	6810      	ldr	r0, [r2, #0]
 8000e18:	6018      	str	r0, [r3, #0]
			break;
 8000e1a:	e019      	b.n	8000e50 <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <format_dow+0x94>)
 8000e20:	6810      	ldr	r0, [r2, #0]
 8000e22:	6018      	str	r0, [r3, #0]
			break;
 8000e24:	e014      	b.n	8000e50 <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <format_dow+0x98>)
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	6018      	str	r0, [r3, #0]
			break;
 8000e2e:	e00f      	b.n	8000e50 <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <format_dow+0x9c>)
 8000e34:	6810      	ldr	r0, [r2, #0]
 8000e36:	6018      	str	r0, [r3, #0]
			break;
 8000e38:	e00a      	b.n	8000e50 <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <format_dow+0xa0>)
 8000e3e:	6810      	ldr	r0, [r2, #0]
 8000e40:	6018      	str	r0, [r3, #0]
			break;
 8000e42:	e005      	b.n	8000e50 <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <format_dow+0xa4>)
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	6018      	str	r0, [r3, #0]
			break;
 8000e4c:	e000      	b.n	8000e50 <format_dow+0x80>
		default:
			break;
 8000e4e:	bf00      	nop
	}

	return;
 8000e50:	bf00      	nop
}
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	08003674 	.word	0x08003674
 8000e60:	08003678 	.word	0x08003678
 8000e64:	0800367c 	.word	0x0800367c
 8000e68:	08003680 	.word	0x08003680
 8000e6c:	08003684 	.word	0x08003684
 8000e70:	08003688 	.word	0x08003688
 8000e74:	0800368c 	.word	0x0800368c

08000e78 <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	switch(date->month)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	785b      	ldrb	r3, [r3, #1]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2b0b      	cmp	r3, #11
 8000e8a:	d857      	bhi.n	8000f3c <format_mon+0xc4>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <format_mon+0x1c>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ec5 	.word	0x08000ec5
 8000e98:	08000ecf 	.word	0x08000ecf
 8000e9c:	08000ed9 	.word	0x08000ed9
 8000ea0:	08000ee3 	.word	0x08000ee3
 8000ea4:	08000eed 	.word	0x08000eed
 8000ea8:	08000ef7 	.word	0x08000ef7
 8000eac:	08000f01 	.word	0x08000f01
 8000eb0:	08000f0b 	.word	0x08000f0b
 8000eb4:	08000f15 	.word	0x08000f15
 8000eb8:	08000f1f 	.word	0x08000f1f
 8000ebc:	08000f29 	.word	0x08000f29
 8000ec0:	08000f33 	.word	0x08000f33
	{
		case 1:
			strcpy(mon,"Jan");
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <format_mon+0xd0>)
 8000ec8:	6810      	ldr	r0, [r2, #0]
 8000eca:	6018      	str	r0, [r3, #0]
			break;
 8000ecc:	e037      	b.n	8000f3e <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <format_mon+0xd4>)
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	6018      	str	r0, [r3, #0]
			break;
 8000ed6:	e032      	b.n	8000f3e <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <format_mon+0xd8>)
 8000edc:	6810      	ldr	r0, [r2, #0]
 8000ede:	6018      	str	r0, [r3, #0]
			break;
 8000ee0:	e02d      	b.n	8000f3e <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <format_mon+0xdc>)
 8000ee6:	6810      	ldr	r0, [r2, #0]
 8000ee8:	6018      	str	r0, [r3, #0]
			break;
 8000eea:	e028      	b.n	8000f3e <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <format_mon+0xe0>)
 8000ef0:	6810      	ldr	r0, [r2, #0]
 8000ef2:	6018      	str	r0, [r3, #0]
			break;
 8000ef4:	e023      	b.n	8000f3e <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <format_mon+0xe4>)
 8000efa:	6810      	ldr	r0, [r2, #0]
 8000efc:	6018      	str	r0, [r3, #0]
			break;
 8000efe:	e01e      	b.n	8000f3e <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <format_mon+0xe8>)
 8000f04:	6810      	ldr	r0, [r2, #0]
 8000f06:	6018      	str	r0, [r3, #0]
			break;
 8000f08:	e019      	b.n	8000f3e <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <format_mon+0xec>)
 8000f0e:	6810      	ldr	r0, [r2, #0]
 8000f10:	6018      	str	r0, [r3, #0]
			break;
 8000f12:	e014      	b.n	8000f3e <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <format_mon+0xf0>)
 8000f18:	6810      	ldr	r0, [r2, #0]
 8000f1a:	6018      	str	r0, [r3, #0]
			break;
 8000f1c:	e00f      	b.n	8000f3e <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <format_mon+0xf4>)
 8000f22:	6810      	ldr	r0, [r2, #0]
 8000f24:	6018      	str	r0, [r3, #0]
			break;
 8000f26:	e00a      	b.n	8000f3e <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <format_mon+0xf8>)
 8000f2c:	6810      	ldr	r0, [r2, #0]
 8000f2e:	6018      	str	r0, [r3, #0]
			break;
 8000f30:	e005      	b.n	8000f3e <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <format_mon+0xfc>)
 8000f36:	6810      	ldr	r0, [r2, #0]
 8000f38:	6018      	str	r0, [r3, #0]
			break;
 8000f3a:	e000      	b.n	8000f3e <format_mon+0xc6>
		default:
			break;
 8000f3c:	bf00      	nop
	}

	return;
 8000f3e:	bf00      	nop
}
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	08003690 	.word	0x08003690
 8000f4c:	08003694 	.word	0x08003694
 8000f50:	08003698 	.word	0x08003698
 8000f54:	0800369c 	.word	0x0800369c
 8000f58:	080036a0 	.word	0x080036a0
 8000f5c:	080036a4 	.word	0x080036a4
 8000f60:	080036a8 	.word	0x080036a8
 8000f64:	080036ac 	.word	0x080036ac
 8000f68:	080036b0 	.word	0x080036b0
 8000f6c:	080036b4 	.word	0x080036b4
 8000f70:	080036b8 	.word	0x080036b8
 8000f74:	080036bc 	.word	0x080036bc

08000f78 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	70fb      	strb	r3, [r7, #3]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70bb      	strb	r3, [r7, #2]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <configure_external_gpio_interrupt+0x104>)
 8000f94:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <configure_external_gpio_interrupt+0x108>)
 8000f98:	61bb      	str	r3, [r7, #24]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <configure_external_gpio_interrupt+0x10c>)
 8000f9c:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <configure_external_gpio_interrupt+0x110>)
 8000fa0:	613b      	str	r3, [r7, #16]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <configure_external_gpio_interrupt+0x114>)
 8000fa4:	60fb      	str	r3, [r7, #12]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 ff1c 	bl	8001de4 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fb18 	bl	80015e8 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fb91 	bl	80016e6 <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fbd1 	bl	8001772 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fba7 	bl	800172a <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 8000fee:	78bb      	ldrb	r3, [r7, #2]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d108      	bne.n	8001006 <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 8001006:	78bb      	ldrb	r3, [r7, #2]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	431a      	orrs	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	60bb      	str	r3, [r7, #8]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	210f      	movs	r1, #15
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	43d2      	mvns	r2, r2
 800104c:	401a      	ands	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f81c 	bl	8001090 <gpio_port_name_to_num>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 f87c 	bl	800216c <NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023844 	.word	0x40023844
 8001080:	40013c00 	.word	0x40013c00
 8001084:	40013c08 	.word	0x40013c08
 8001088:	40013c0c 	.word	0x40013c0c
 800108c:	40013808 	.word	0x40013808

08001090 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <gpio_port_name_to_num+0x90>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d102      	bne.n	80010a6 <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e036      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <gpio_port_name_to_num+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d102      	bne.n	80010b4 <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e02f      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <gpio_port_name_to_num+0x98>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d102      	bne.n	80010c2 <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e028      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <gpio_port_name_to_num+0x9c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d102      	bne.n	80010d0 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 80010ca:	2303      	movs	r3, #3
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e021      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <gpio_port_name_to_num+0xa0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d102      	bne.n	80010de <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e01a      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <gpio_port_name_to_num+0xa4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d102      	bne.n	80010ec <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e013      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <gpio_port_name_to_num+0xa8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d102      	bne.n	80010fa <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 80010f4:	2306      	movs	r3, #6
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e00c      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <gpio_port_name_to_num+0xac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d102      	bne.n	8001108 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 8001102:	2307      	movs	r3, #7
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e005      	b.n	8001114 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <gpio_port_name_to_num+0xb0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8001110:	2308      	movs	r3, #8
 8001112:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40022000 	.word	0x40022000

08001144 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6852      	ldr	r2, [r2, #4]
 8001154:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6892      	ldr	r2, [r2, #8]
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7b5b      	ldrb	r3, [r3, #13]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d16a      	bne.n	800123e <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b9b      	ldrb	r3, [r3, #14]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d11c      	bne.n	80011ba <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0203 	bic.w	r2, r2, #3
 800118e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6912      	ldr	r2, [r2, #16]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011a8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80011b8:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d11c      	bne.n	80011fc <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0203 	bic.w	r2, r2, #3
 80011d0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6912      	ldr	r2, [r2, #16]
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011ea:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80011fa:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7b9b      	ldrb	r3, [r3, #14]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d11c      	bne.n	800123e <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0203 	bic.w	r2, r2, #3
 8001212:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6912      	ldr	r2, [r2, #16]
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800122c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800123c:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7d1b      	ldrb	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 80bf 	bne.w	80013c6 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7d5b      	ldrb	r3, [r3, #21]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d124      	bne.n	800129a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800125e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6992      	ldr	r2, [r2, #24]
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001278:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001288:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0210 	orr.w	r2, r2, #16
 8001298:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7d5b      	ldrb	r3, [r3, #21]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d124      	bne.n	80012ec <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012b0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6992      	ldr	r2, [r2, #24]
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012ca:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80012da:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7d5b      	ldrb	r3, [r3, #21]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d124      	bne.n	800133e <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001302:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6992      	ldr	r2, [r2, #24]
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800131c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800132c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0210 	orr.w	r2, r2, #16
 800133c:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7d5b      	ldrb	r3, [r3, #21]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d13f      	bne.n	80013c6 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001354:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001364:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001374:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0220 	bic.w	r2, r2, #32
 8001384:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001394:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013a4:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0210 	orr.w	r2, r2, #16
 80013c4:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7f1b      	ldrb	r3, [r3, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d16a      	bne.n	80014a4 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013dc:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7f5b      	ldrb	r3, [r3, #29]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d11c      	bne.n	8001420 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0203 	bic.w	r2, r2, #3
 80013f4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6a12      	ldr	r2, [r2, #32]
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	69da      	ldr	r2, [r3, #28]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800140e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800141e:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f5b      	ldrb	r3, [r3, #29]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d11c      	bne.n	8001462 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69da      	ldr	r2, [r3, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0203 	bic.w	r2, r2, #3
 8001436:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6a12      	ldr	r2, [r2, #32]
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001450:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69da      	ldr	r2, [r3, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001460:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7f5b      	ldrb	r3, [r3, #29]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d11c      	bne.n	80014a4 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0203 	bic.w	r2, r2, #3
 8001478:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6a12      	ldr	r2, [r2, #32]
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001492:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80014a2:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d16d      	bne.n	800158a <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014bc:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d11c      	bne.n	8001502 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80014d6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80014f0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001500:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001508:	2b03      	cmp	r3, #3
 800150a:	d11c      	bne.n	8001546 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800151a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69da      	ldr	r2, [r3, #28]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001534:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001544:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800154c:	2b04      	cmp	r3, #4
 800154e:	d11c      	bne.n	800158a <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800155e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001578:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001588:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 80015a2:	e00b      	b.n	80015bc <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7b1b      	ldrb	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	60da      	str	r2, [r3, #12]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
 80015f4:	4613      	mov	r3, r2
 80015f6:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	0052      	lsls	r2, r2, #1
 8001604:	2103      	movs	r1, #3
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	43d2      	mvns	r2, r2
 800160c:	401a      	ands	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	78b9      	ldrb	r1, [r7, #2]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	431a      	orrs	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	78b9      	ldrb	r1, [r7, #2]
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	fa01 f202 	lsl.w	r2, r1, r2
 8001664:	431a      	orrs	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	615a      	str	r2, [r3, #20]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	4613      	mov	r3, r2
 8001682:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8001696:	7afa      	ldrb	r2, [r7, #11]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	7aba      	ldrb	r2, [r7, #10]
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	210f      	movs	r1, #15
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	43d2      	mvns	r2, r2
 80016ac:	4611      	mov	r1, r2
 80016ae:	7afa      	ldrb	r2, [r7, #11]
 80016b0:	4019      	ands	r1, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3208      	adds	r2, #8
 80016b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80016ba:	7afa      	ldrb	r2, [r7, #11]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	78b9      	ldrb	r1, [r7, #2]
 80016c6:	7aba      	ldrb	r2, [r7, #10]
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	4611      	mov	r1, r2
 80016d0:	7afa      	ldrb	r2, [r7, #11]
 80016d2:	4319      	orrs	r1, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	43d2      	mvns	r2, r2
 8001708:	401a      	ands	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	78b9      	ldrb	r1, [r7, #2]
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
 8001736:	4613      	mov	r3, r2
 8001738:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	0052      	lsls	r2, r2, #1
 8001746:	2103      	movs	r1, #3
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	43d2      	mvns	r2, r2
 800174e:	401a      	ands	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	78b9      	ldrb	r1, [r7, #2]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	0052      	lsls	r2, r2, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	431a      	orrs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	60da      	str	r2, [r3, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	4613      	mov	r3, r2
 8001780:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	0052      	lsls	r2, r2, #1
 800178e:	2103      	movs	r1, #3
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	43d2      	mvns	r2, r2
 8001796:	401a      	ands	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	78b9      	ldrb	r1, [r7, #2]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	0052      	lsls	r2, r2, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	431a      	orrs	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	03db      	lsls	r3, r3, #15
 80017f8:	431a      	orrs	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10d      	bne.n	8001822 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	039b      	lsls	r3, r3, #14
 800181c:	431a      	orrs	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	431a      	orrs	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	029b      	lsls	r3, r3, #10
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	601a      	str	r2, [r3, #0]

}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f84c 	bl	8001938 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 80018a0:	bf00      	nop
 80018a2:	2101      	movs	r1, #1
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f869 	bl	800197c <I2C_GetFlagStatus>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f8      	beq.n	80018a2 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	4619      	mov	r1, r3
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f86f 	bl	80019a6 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 80018c8:	bf00      	nop
 80018ca:	2102      	movs	r1, #2
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f855 	bl	800197c <I2C_GetFlagStatus>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f8      	beq.n	80018ca <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f874 	bl	80019c6 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 80018de:	e012      	b.n	8001906 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 80018e0:	bf00      	nop
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f849 	bl	800197c <I2C_GetFlagStatus>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f8      	beq.n	80018e2 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	611a      	str	r2, [r3, #16]
		TxBuf++;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
		Len--;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e9      	bne.n	80018e0 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 800190c:	bf00      	nop
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f833 	bl	800197c <I2C_GetFlagStatus>
 8001916:	4603      	mov	r3, r0
 8001918:	2b01      	cmp	r3, #1
 800191a:	d1f8      	bne.n	800190e <I2CMasterSendData+0x86>
 800191c:	2104      	movs	r1, #4
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f82c 	bl	800197c <I2C_GetFlagStatus>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1f1      	bne.n	800190e <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f815 	bl	800195a <I2C_SendStopBit>

}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	621a      	str	r2, [r3, #32]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff ff66 	bl	8001938 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001a6c:	bf00      	nop
 8001a6e:	2101      	movs	r1, #1
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff ff83 	bl	800197c <I2C_GetFlagStatus>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f8      	beq.n	8001a6e <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 8001a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff ff88 	bl	80019a6 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001a96:	bf00      	nop
 8001a98:	2102      	movs	r1, #2
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff ff6e 	bl	800197c <I2C_GetFlagStatus>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f8      	beq.n	8001a98 <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ff8d 	bl	80019c6 <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8001ab0:	e015      	b.n	8001ade <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001ab2:	bf00      	nop
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff ff60 	bl	800197c <I2C_GetFlagStatus>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f8      	beq.n	8001ab4 <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001ac2:	7fbb      	ldrb	r3, [r7, #30]
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001acc:	461a      	mov	r2, r3
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	611a      	str	r2, [r3, #16]
		i++;
 8001ad2:	7fbb      	ldrb	r3, [r7, #30]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e6      	bne.n	8001ab2 <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001ae4:	bf00      	nop
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ff47 	bl	800197c <I2C_GetFlagStatus>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d1f8      	bne.n	8001ae6 <I2CMaster_DS3231_RTC_Read+0x9a>
 8001af4:	2104      	movs	r1, #4
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff ff40 	bl	800197c <I2C_GetFlagStatus>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d1f1      	bne.n	8001ae6 <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff ff18 	bl	8001938 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001b08:	bf00      	nop
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff35 	bl	800197c <I2C_GetFlagStatus>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f8      	beq.n	8001b0a <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 8001b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ff3a 	bl	80019a6 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001b32:	bf00      	nop
 8001b34:	2102      	movs	r1, #2
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff ff20 	bl	800197c <I2C_GetFlagStatus>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f8      	beq.n	8001b34 <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff ff3f 	bl	80019c6 <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d919      	bls.n	8001b82 <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff ff5a 	bl	8001a08 <I2CEnableAck>
		while(Len >= 2)
 8001b54:	e012      	b.n	8001b7c <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001b56:	bf00      	nop
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff ff0e 	bl	800197c <I2C_GetFlagStatus>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f8      	beq.n	8001b58 <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
			Len--;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d8e9      	bhi.n	8001b56 <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff ff4e 	bl	8001a2a <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001b8e:	bf00      	nop
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fef2 	bl	800197c <I2C_GetFlagStatus>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f8      	beq.n	8001b90 <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
		Len--;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fed0 	bl	800195a <I2C_SendStopBit>

	return;
 8001bba:	bf00      	nop
}
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8001bc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bca:	f7fe fb61 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001bce:	2030      	movs	r0, #48	; 0x30
 8001bd0:	f000 f846 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bd8:	f7fe fb5a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001bdc:	2030      	movs	r0, #48	; 0x30
 8001bde:	f000 f83f 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001be2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001be6:	f7fe fb53 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001bea:	2030      	movs	r0, #48	; 0x30
 8001bec:	f000 f838 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8001bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf4:	f7fe fb4c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8001bf8:	2020      	movs	r0, #32
 8001bfa:	f000 f831 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8001bfe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c02:	f7fe fb45 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001c06:	2028      	movs	r0, #40	; 0x28
 8001c08:	f000 f82a 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c10:	f7fe fb3e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8001c14:	2008      	movs	r0, #8
 8001c16:	f000 f823 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c1e:	f7fe fb37 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 f81c 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c2c:	f7fe fb30 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f000 f815 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c3a:	f7fe fb29 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c3e:	2006      	movs	r0, #6
 8001c40:	f000 f80e 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c44:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c48:	f7fe fb22 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001c4c:	200c      	movs	r0, #12
 8001c4e:	f000 f807 	bl	8001c60 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001c52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c56:	f7fe fb1b 	bl	8000290 <delay_us>

	return;
 8001c5a:	bf00      	nop
}
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f023 030f 	bic.w	r3, r3, #15
 8001c70:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	f043 030c 	orr.w	r3, r3, #12
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	f043 030c 	orr.w	r3, r3, #12
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <lcd_pcf8574_send_cmd+0x5c>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <lcd_pcf8574_send_cmd+0x60>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f107 0108 	add.w	r1, r7, #8
 8001cac:	2204      	movs	r2, #4
 8001cae:	f7ff fdeb 	bl	8001888 <I2CMasterSendData>

	return;
 8001cb2:	bf00      	nop
}
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f023 030f 	bic.w	r3, r3, #15
 8001cd4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	f043 030d 	orr.w	r3, r3, #13
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	f043 0309 	orr.w	r3, r3, #9
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	f043 030d 	orr.w	r3, r3, #13
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	f043 0309 	orr.w	r3, r3, #9
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <lcd_pcf8574_send_data+0x5c>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <lcd_pcf8574_send_data+0x60>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f107 0108 	add.w	r1, r7, #8
 8001d10:	2204      	movs	r2, #4
 8001d12:	f7ff fdb9 	bl	8001888 <I2CMasterSendData>

	return;
 8001d16:	bf00      	nop
}
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004

08001d28 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ff97 	bl	8001c60 <lcd_pcf8574_send_cmd>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f7ff ff90 	bl	8001c60 <lcd_pcf8574_send_cmd>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	71fb      	strb	r3, [r7, #7]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d108      	bne.n	8001d6c <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	2b27      	cmp	r3, #39	; 0x27
 8001d5e:	d802      	bhi.n	8001d66 <lcd_pcf8574_set_position+0x22>
			position = col;
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e011      	b.n	8001d8a <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e00e      	b.n	8001d8a <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d109      	bne.n	8001d86 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	2b27      	cmp	r3, #39	; 0x27
 8001d76:	d803      	bhi.n	8001d80 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	3340      	adds	r3, #64	; 0x40
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e004      	b.n	8001d8a <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001d80:	2340      	movs	r3, #64	; 0x40
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d90:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff63 	bl	8001c60 <lcd_pcf8574_send_cmd>

	return;
 8001d9a:	bf00      	nop
}
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <RTC_Alarm_IRQHandler+0x24>)
 8001dac:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001dae:	f000 f80d 	bl	8001dcc <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]

	return;
 8001dbe:	bf00      	nop
}
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40013c14 	.word	0x40013c14

08001dcc <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001dd6:	f7ff fc2b 	bl	8001630 <GPIOWritePin>

	return;
 8001dda:	bf00      	nop
}
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40020c00 	.word	0x40020c00

08001de4 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a88      	ldr	r2, [pc, #544]	; (8002010 <EnablePeriClk+0x22c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001df4:	4b87      	ldr	r3, [pc, #540]	; (8002014 <EnablePeriClk+0x230>)
 8001df6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001e04:	e19b      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a83      	ldr	r2, [pc, #524]	; (8002018 <EnablePeriClk+0x234>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d108      	bne.n	8001e20 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e0e:	4b81      	ldr	r3, [pc, #516]	; (8002014 <EnablePeriClk+0x230>)
 8001e10:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	e18e      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <EnablePeriClk+0x238>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <EnablePeriClk+0x230>)
 8001e2a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f043 0204 	orr.w	r2, r3, #4
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]
}
 8001e38:	e181      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a78      	ldr	r2, [pc, #480]	; (8002020 <EnablePeriClk+0x23c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d108      	bne.n	8001e54 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e42:	4b74      	ldr	r3, [pc, #464]	; (8002014 <EnablePeriClk+0x230>)
 8001e44:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f043 0208 	orr.w	r2, r3, #8
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	e174      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a73      	ldr	r2, [pc, #460]	; (8002024 <EnablePeriClk+0x240>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <EnablePeriClk+0x230>)
 8001e5e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	e167      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <EnablePeriClk+0x244>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d108      	bne.n	8001e88 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <EnablePeriClk+0x230>)
 8001e78:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	e15a      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a68      	ldr	r2, [pc, #416]	; (800202c <EnablePeriClk+0x248>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d108      	bne.n	8001ea2 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e90:	4b60      	ldr	r3, [pc, #384]	; (8002014 <EnablePeriClk+0x230>)
 8001e92:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	e14d      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a62      	ldr	r2, [pc, #392]	; (8002030 <EnablePeriClk+0x24c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <EnablePeriClk+0x230>)
 8001eac:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	e140      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a5d      	ldr	r2, [pc, #372]	; (8002034 <EnablePeriClk+0x250>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <EnablePeriClk+0x230>)
 8001ec6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	e133      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	; (8002038 <EnablePeriClk+0x254>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001ede:	4b57      	ldr	r3, [pc, #348]	; (800203c <EnablePeriClk+0x258>)
 8001ee0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	e126      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a53      	ldr	r2, [pc, #332]	; (8002040 <EnablePeriClk+0x25c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ef8:	4b52      	ldr	r3, [pc, #328]	; (8002044 <EnablePeriClk+0x260>)
 8001efa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	e119      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <EnablePeriClk+0x264>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f12:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <EnablePeriClk+0x260>)
 8001f14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	e10c      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <EnablePeriClk+0x268>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d108      	bne.n	8001f3e <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f2c:	4b45      	ldr	r3, [pc, #276]	; (8002044 <EnablePeriClk+0x260>)
 8001f2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	e0ff      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <EnablePeriClk+0x26c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d108      	bne.n	8001f58 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <EnablePeriClk+0x260>)
 8001f48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	e0f2      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <EnablePeriClk+0x270>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <EnablePeriClk+0x260>)
 8001f62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	e0e5      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <EnablePeriClk+0x274>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <EnablePeriClk+0x258>)
 8001f7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	e0d8      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a33      	ldr	r2, [pc, #204]	; (800205c <EnablePeriClk+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <EnablePeriClk+0x260>)
 8001f96:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	e0cb      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <EnablePeriClk+0x27c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <EnablePeriClk+0x260>)
 8001fb0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	e0be      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <EnablePeriClk+0x280>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <EnablePeriClk+0x260>)
 8001fca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]
}
 8001fd8:	e0b1      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	; (8002068 <EnablePeriClk+0x284>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d108      	bne.n	8001ff4 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <EnablePeriClk+0x260>)
 8001fe4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	e0a4      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <EnablePeriClk+0x288>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d139      	bne.n	8002070 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <EnablePeriClk+0x258>)
 8001ffe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
}
 800200c:	e097      	b.n	800213e <EnablePeriClk+0x35a>
 800200e:	bf00      	nop
 8002010:	40020000 	.word	0x40020000
 8002014:	40023830 	.word	0x40023830
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40022000 	.word	0x40022000
 8002038:	40013000 	.word	0x40013000
 800203c:	40023844 	.word	0x40023844
 8002040:	40003800 	.word	0x40003800
 8002044:	40023840 	.word	0x40023840
 8002048:	40003c00 	.word	0x40003c00
 800204c:	40005400 	.word	0x40005400
 8002050:	40005800 	.word	0x40005800
 8002054:	40005c00 	.word	0x40005c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40004400 	.word	0x40004400
 8002060:	40004800 	.word	0x40004800
 8002064:	40004c00 	.word	0x40004c00
 8002068:	40005000 	.word	0x40005000
 800206c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a35      	ldr	r2, [pc, #212]	; (8002148 <EnablePeriClk+0x364>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d108      	bne.n	800208a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <EnablePeriClk+0x368>)
 800207a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f043 0210 	orr.w	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	e059      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a30      	ldr	r2, [pc, #192]	; (8002150 <EnablePeriClk+0x36c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <EnablePeriClk+0x368>)
 8002094:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	e04c      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <EnablePeriClk+0x370>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <EnablePeriClk+0x374>)
 80020ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	e03f      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <EnablePeriClk+0x378>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <EnablePeriClk+0x374>)
 80020c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	e032      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d108      	bne.n	80020f2 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <EnablePeriClk+0x368>)
 80020e2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	e025      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <EnablePeriClk+0x37c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <EnablePeriClk+0x368>)
 80020fc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	e018      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <EnablePeriClk+0x380>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <EnablePeriClk+0x368>)
 8002116:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	e00b      	b.n	800213e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <EnablePeriClk+0x384>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d107      	bne.n	800213e <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <EnablePeriClk+0x368>)
 8002130:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f043 0208 	orr.w	r2, r3, #8
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40001000 	.word	0x40001000
 800214c:	40023840 	.word	0x40023840
 8002150:	40001400 	.word	0x40001400
 8002154:	40026000 	.word	0x40026000
 8002158:	40023830 	.word	0x40023830
 800215c:	40026400 	.word	0x40026400
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00

0800216c <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800218e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002192:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <main>:

struct Date date;
struct Time time;

int main(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0

	struct RTC_DS3231_Config_t ds3231_rtc_config;
	struct RTC_DS3231_AlarmConfig_t ds3231_rtc_alarm_config;

	//Configure the Timer
	configure_delay_timer();
 80021b6:	f7fe f883 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 80021ba:	f7fe f8a3 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <main+0x10c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fac0 	bl	800274c <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 80021cc:	483c      	ldr	r0, [pc, #240]	; (80022c0 <main+0x110>)
 80021ce:	f7fe f85f 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 80021d2:	f7ff fcf6 	bl	8001bc2 <lcd_pcf8574_init>
	delay_us(100000);
 80021d6:	483b      	ldr	r0, [pc, #236]	; (80022c4 <main+0x114>)
 80021d8:	f7fe f85a 	bl	8000290 <delay_us>

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 80021dc:	f7fe f8fa 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the parameters of the RTC
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	220f      	movs	r2, #15
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f9a1 	bl	8002530 <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	763b      	strb	r3, [r7, #24]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	767b      	strb	r3, [r7, #25]
	ds3231_rtc_config.RTCClockMinutesUnits = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	76bb      	strb	r3, [r7, #26]
	ds3231_rtc_config.RTCClockMinutesTens = 5;
 80021fa:	2305      	movs	r3, #5
 80021fc:	76fb      	strb	r3, [r7, #27]
	ds3231_rtc_config.RTCClockHoursUnits = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	773b      	strb	r3, [r7, #28]
	ds3231_rtc_config.RTCClockHoursTens = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	777b      	strb	r3, [r7, #29]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002206:	2301      	movs	r3, #1
 8002208:	77bb      	strb	r3, [r7, #30]
	ds3231_rtc_config.RTCClockAMPM = DS3231_RTC_HOUR_AM;
 800220a:	2300      	movs	r3, #0
 800220c:	77fb      	strb	r3, [r7, #31]
	ds3231_rtc_config.RTCClockDateUnits = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3020 	strb.w	r3, [r7, #32]
	ds3231_rtc_config.RTCClockDateTens = 2;
 8002214:	2302      	movs	r3, #2
 8002216:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ds3231_rtc_config.RTCClockMonthTens = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ds3231_rtc_config.RTCClockYearUnits = 4;
 8002226:	2304      	movs	r3, #4
 8002228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ds3231_rtc_config.RTCClockYearTens = 2;
 800222c:	2302      	movs	r3, #2
 800222e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ds3231_rtc_config.RTCClockDayOfWeek = RTC_CLK_DOW_SAT;
 8002232:	2306      	movs	r3, #6
 8002234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f93f 	bl	80004c0 <RTC_DS3231_Config_Calendar>
	delay_us(100000);
 8002242:	4820      	ldr	r0, [pc, #128]	; (80022c4 <main+0x114>)
 8002244:	f7fe f824 	bl	8000290 <delay_us>

	//Configure the DS3231 RTC Alarm
	memset(&ds3231_rtc_alarm_config,0,sizeof(ds3231_rtc_alarm_config));
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2211      	movs	r2, #17
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f96e 	bl	8002530 <memset>
	ds3231_rtc_alarm_config.RTCAlarmSelection = DS3231_RTC_ALARM_1;
 8002254:	2300      	movs	r3, #0
 8002256:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_alarm_config.RTCAlarmSecondsTens = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_NO;
 8002260:	2301      	movs	r3, #1
 8002262:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_alarm_config.RTCAlarmMinutesUnits = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_alarm_config.RTCAlarmMinutesTens = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_NO;
 800226c:	2301      	movs	r3, #1
 800226e:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_alarm_config.RTCAlarmHoursUnits = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_alarm_config.RTCAlarmHoursTens = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_alarm_config.RTCAlarmHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002278:	2301      	movs	r3, #1
 800227a:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_alarm_config.RTCAlarmAMPM = DS3231_RTC_HOUR_PM;
 800227c:	2301      	movs	r3, #1
 800227e:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_NO;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_alarm_config.RTCAlarmDateUnits = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_alarm_config.RTCAlarmDateTens = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_alarm_config.RTCAlarmDayOfWeek = RTC_CLK_DOW_FRI;
 800228c:	2305      	movs	r3, #5
 800228e:	74bb      	strb	r3, [r7, #18]
	ds3231_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8002290:	2301      	movs	r3, #1
 8002292:	74fb      	strb	r3, [r7, #19]
	ds3231_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8002294:	2301      	movs	r3, #1
 8002296:	753b      	strb	r3, [r7, #20]

	RTC_DS3231_Config_Alarm(&ds3231_rtc_alarm_config);
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fc6c 	bl	8000b78 <RTC_DS3231_Config_Alarm>
	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_1);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fd59 	bl	8000d58 <RTC_DS3231_Clear_Alarm>
	delay_us(10000);
 80022a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80022aa:	f7fd fff1 	bl	8000290 <delay_us>
	RTC_DS3231_Config_Alarm_Interrupt();
 80022ae:	f7fe fd47 	bl	8000d40 <RTC_DS3231_Config_Alarm_Interrupt>
	//RTC_DS3231_Config_Alarm_Output_GPIO();

	//Configure the Button Interrupt
	//RTC_DS3231_Config_Button_Interrupt();

	delay_us(10000);
 80022b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80022b6:	f7fd ffeb 	bl	8000290 <delay_us>

	while(1)
 80022ba:	e7fe      	b.n	80022ba <main+0x10a>
 80022bc:	20000010 	.word	0x20000010
 80022c0:	000f4240 	.word	0x000f4240
 80022c4:	000186a0 	.word	0x000186a0

080022c8 <EXTI0_IRQHandler>:
	return 0;
}

//Alarm Interrupt
void EXTI0_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <EXTI0_IRQHandler+0x34>)
 80022d0:	607b      	str	r3, [r7, #4]

	//Clearing the Alarm Interrupt
	*pEXTI_PR |= (1 << DS3231_RTC_ALARM_INPUT_GPIO_PIN);	//Clearing the EXTI_PR Register
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]

	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_1);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fd3a 	bl	8000d58 <RTC_DS3231_Clear_Alarm>

	//Update the LCD
	RTC_DS3231_Read_Calendar(&date,&time);
 80022e4:	4906      	ldr	r1, [pc, #24]	; (8002300 <EXTI0_IRQHandler+0x38>)
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <EXTI0_IRQHandler+0x3c>)
 80022e8:	f7fe f998 	bl	800061c <RTC_DS3231_Read_Calendar>
	RTC_DS3231_Display_Calendar_LCD(&date,&time);
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <EXTI0_IRQHandler+0x38>)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <EXTI0_IRQHandler+0x3c>)
 80022f0:	f7fe fa64 	bl	80007bc <RTC_DS3231_Display_Calendar_LCD>

	return;
 80022f4:	bf00      	nop
}
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013c14 	.word	0x40013c14
 8002300:	200000cc 	.word	0x200000cc
 8002304:	200000c8 	.word	0x200000c8

08002308 <EXTI2_IRQHandler>:

//Button Interrupt
void EXTI2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <EXTI2_IRQHandler+0x28>)
 8002310:	607b      	str	r3, [r7, #4]

	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_LOW);
 8002312:	2200      	movs	r2, #0
 8002314:	210f      	movs	r1, #15
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <EXTI2_IRQHandler+0x2c>)
 8002318:	f7ff f98a 	bl	8001630 <GPIOWritePin>

	//2. Clearing the Button Interrupt
	*pEXTI_PR |= (1 << BTN_INT_GPIO_PIN);		// Clearing the EXTI_PR Register
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	601a      	str	r2, [r3, #0]

	return;
 8002328:	bf00      	nop
}
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40013c14 	.word	0x40013c14
 8002334:	40020c00 	.word	0x40020c00

08002338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e00a      	b.n	8002360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234a:	f3af 8000 	nop.w
 800234e:	4601      	mov	r1, r0
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf0      	blt.n	800234a <_read+0x12>
  }

  return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e009      	b.n	8002398 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	60ba      	str	r2, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f889 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	dbf1      	blt.n	8002384 <_write+0x12>
  }
  return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_close>:

int _close(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d0:	605a      	str	r2, [r3, #4]
  return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <_isatty>:

int _isatty(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f000 f846 	bl	80024cc <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20020000 	.word	0x20020000
 800246c:	00000400 	.word	0x00000400
 8002470:	200000d0 	.word	0x200000d0
 8002474:	200000e8 	.word	0x200000e8

08002478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800247a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800247c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <LoopForever+0xe>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <LoopForever+0x16>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024a6:	f000 f817 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024aa:	f7ff fe81 	bl	80021b0 <main>

080024ae <LoopForever>:

LoopForever:
  b LoopForever
 80024ae:	e7fe      	b.n	80024ae <LoopForever>
  ldr   r0, =_estack
 80024b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024bc:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 80024c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024c4:	200000e4 	.word	0x200000e4

080024c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC_IRQHandler>
	...

080024cc <__errno>:
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <__errno+0x8>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000010 	.word	0x20000010

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4d0d      	ldr	r5, [pc, #52]	; (8002510 <__libc_init_array+0x38>)
 80024dc:	4c0d      	ldr	r4, [pc, #52]	; (8002514 <__libc_init_array+0x3c>)
 80024de:	1b64      	subs	r4, r4, r5
 80024e0:	10a4      	asrs	r4, r4, #2
 80024e2:	2600      	movs	r6, #0
 80024e4:	42a6      	cmp	r6, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	4d0b      	ldr	r5, [pc, #44]	; (8002518 <__libc_init_array+0x40>)
 80024ea:	4c0c      	ldr	r4, [pc, #48]	; (800251c <__libc_init_array+0x44>)
 80024ec:	f001 f87c 	bl	80035e8 <_init>
 80024f0:	1b64      	subs	r4, r4, r5
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	2600      	movs	r6, #0
 80024f6:	42a6      	cmp	r6, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002500:	4798      	blx	r3
 8002502:	3601      	adds	r6, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	f855 3b04 	ldr.w	r3, [r5], #4
 800250a:	4798      	blx	r3
 800250c:	3601      	adds	r6, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	08003758 	.word	0x08003758
 8002514:	08003758 	.word	0x08003758
 8002518:	08003758 	.word	0x08003758
 800251c:	0800375c 	.word	0x0800375c

08002520 <malloc>:
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <malloc+0xc>)
 8002522:	4601      	mov	r1, r0
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	f000 b875 	b.w	8002614 <_malloc_r>
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010

08002530 <memset>:
 8002530:	4402      	add	r2, r0
 8002532:	4603      	mov	r3, r0
 8002534:	4293      	cmp	r3, r2
 8002536:	d100      	bne.n	800253a <memset+0xa>
 8002538:	4770      	bx	lr
 800253a:	f803 1b01 	strb.w	r1, [r3], #1
 800253e:	e7f9      	b.n	8002534 <memset+0x4>

08002540 <_free_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4605      	mov	r5, r0
 8002544:	2900      	cmp	r1, #0
 8002546:	d041      	beq.n	80025cc <_free_r+0x8c>
 8002548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800254c:	1f0c      	subs	r4, r1, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	bfb8      	it	lt
 8002552:	18e4      	addlt	r4, r4, r3
 8002554:	f000 fca4 	bl	8002ea0 <__malloc_lock>
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <_free_r+0x90>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	b933      	cbnz	r3, 800256c <_free_r+0x2c>
 800255e:	6063      	str	r3, [r4, #4]
 8002560:	6014      	str	r4, [r2, #0]
 8002562:	4628      	mov	r0, r5
 8002564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002568:	f000 bca0 	b.w	8002eac <__malloc_unlock>
 800256c:	42a3      	cmp	r3, r4
 800256e:	d908      	bls.n	8002582 <_free_r+0x42>
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	1821      	adds	r1, r4, r0
 8002574:	428b      	cmp	r3, r1
 8002576:	bf01      	itttt	eq
 8002578:	6819      	ldreq	r1, [r3, #0]
 800257a:	685b      	ldreq	r3, [r3, #4]
 800257c:	1809      	addeq	r1, r1, r0
 800257e:	6021      	streq	r1, [r4, #0]
 8002580:	e7ed      	b.n	800255e <_free_r+0x1e>
 8002582:	461a      	mov	r2, r3
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b10b      	cbz	r3, 800258c <_free_r+0x4c>
 8002588:	42a3      	cmp	r3, r4
 800258a:	d9fa      	bls.n	8002582 <_free_r+0x42>
 800258c:	6811      	ldr	r1, [r2, #0]
 800258e:	1850      	adds	r0, r2, r1
 8002590:	42a0      	cmp	r0, r4
 8002592:	d10b      	bne.n	80025ac <_free_r+0x6c>
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	4401      	add	r1, r0
 8002598:	1850      	adds	r0, r2, r1
 800259a:	4283      	cmp	r3, r0
 800259c:	6011      	str	r1, [r2, #0]
 800259e:	d1e0      	bne.n	8002562 <_free_r+0x22>
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	6053      	str	r3, [r2, #4]
 80025a6:	4401      	add	r1, r0
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	e7da      	b.n	8002562 <_free_r+0x22>
 80025ac:	d902      	bls.n	80025b4 <_free_r+0x74>
 80025ae:	230c      	movs	r3, #12
 80025b0:	602b      	str	r3, [r5, #0]
 80025b2:	e7d6      	b.n	8002562 <_free_r+0x22>
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	1821      	adds	r1, r4, r0
 80025b8:	428b      	cmp	r3, r1
 80025ba:	bf04      	itt	eq
 80025bc:	6819      	ldreq	r1, [r3, #0]
 80025be:	685b      	ldreq	r3, [r3, #4]
 80025c0:	6063      	str	r3, [r4, #4]
 80025c2:	bf04      	itt	eq
 80025c4:	1809      	addeq	r1, r1, r0
 80025c6:	6021      	streq	r1, [r4, #0]
 80025c8:	6054      	str	r4, [r2, #4]
 80025ca:	e7ca      	b.n	8002562 <_free_r+0x22>
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
 80025ce:	bf00      	nop
 80025d0:	200000d4 	.word	0x200000d4

080025d4 <sbrk_aligned>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	4e0e      	ldr	r6, [pc, #56]	; (8002610 <sbrk_aligned+0x3c>)
 80025d8:	460c      	mov	r4, r1
 80025da:	6831      	ldr	r1, [r6, #0]
 80025dc:	4605      	mov	r5, r0
 80025de:	b911      	cbnz	r1, 80025e6 <sbrk_aligned+0x12>
 80025e0:	f000 f8a4 	bl	800272c <_sbrk_r>
 80025e4:	6030      	str	r0, [r6, #0]
 80025e6:	4621      	mov	r1, r4
 80025e8:	4628      	mov	r0, r5
 80025ea:	f000 f89f 	bl	800272c <_sbrk_r>
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	d00a      	beq.n	8002608 <sbrk_aligned+0x34>
 80025f2:	1cc4      	adds	r4, r0, #3
 80025f4:	f024 0403 	bic.w	r4, r4, #3
 80025f8:	42a0      	cmp	r0, r4
 80025fa:	d007      	beq.n	800260c <sbrk_aligned+0x38>
 80025fc:	1a21      	subs	r1, r4, r0
 80025fe:	4628      	mov	r0, r5
 8002600:	f000 f894 	bl	800272c <_sbrk_r>
 8002604:	3001      	adds	r0, #1
 8002606:	d101      	bne.n	800260c <sbrk_aligned+0x38>
 8002608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800260c:	4620      	mov	r0, r4
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	200000d8 	.word	0x200000d8

08002614 <_malloc_r>:
 8002614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002618:	1ccd      	adds	r5, r1, #3
 800261a:	f025 0503 	bic.w	r5, r5, #3
 800261e:	3508      	adds	r5, #8
 8002620:	2d0c      	cmp	r5, #12
 8002622:	bf38      	it	cc
 8002624:	250c      	movcc	r5, #12
 8002626:	2d00      	cmp	r5, #0
 8002628:	4607      	mov	r7, r0
 800262a:	db01      	blt.n	8002630 <_malloc_r+0x1c>
 800262c:	42a9      	cmp	r1, r5
 800262e:	d905      	bls.n	800263c <_malloc_r+0x28>
 8002630:	230c      	movs	r3, #12
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	2600      	movs	r6, #0
 8002636:	4630      	mov	r0, r6
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263c:	4e2e      	ldr	r6, [pc, #184]	; (80026f8 <_malloc_r+0xe4>)
 800263e:	f000 fc2f 	bl	8002ea0 <__malloc_lock>
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	461c      	mov	r4, r3
 8002646:	bb34      	cbnz	r4, 8002696 <_malloc_r+0x82>
 8002648:	4629      	mov	r1, r5
 800264a:	4638      	mov	r0, r7
 800264c:	f7ff ffc2 	bl	80025d4 <sbrk_aligned>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	4604      	mov	r4, r0
 8002654:	d14d      	bne.n	80026f2 <_malloc_r+0xde>
 8002656:	6834      	ldr	r4, [r6, #0]
 8002658:	4626      	mov	r6, r4
 800265a:	2e00      	cmp	r6, #0
 800265c:	d140      	bne.n	80026e0 <_malloc_r+0xcc>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	4631      	mov	r1, r6
 8002662:	4638      	mov	r0, r7
 8002664:	eb04 0803 	add.w	r8, r4, r3
 8002668:	f000 f860 	bl	800272c <_sbrk_r>
 800266c:	4580      	cmp	r8, r0
 800266e:	d13a      	bne.n	80026e6 <_malloc_r+0xd2>
 8002670:	6821      	ldr	r1, [r4, #0]
 8002672:	3503      	adds	r5, #3
 8002674:	1a6d      	subs	r5, r5, r1
 8002676:	f025 0503 	bic.w	r5, r5, #3
 800267a:	3508      	adds	r5, #8
 800267c:	2d0c      	cmp	r5, #12
 800267e:	bf38      	it	cc
 8002680:	250c      	movcc	r5, #12
 8002682:	4629      	mov	r1, r5
 8002684:	4638      	mov	r0, r7
 8002686:	f7ff ffa5 	bl	80025d4 <sbrk_aligned>
 800268a:	3001      	adds	r0, #1
 800268c:	d02b      	beq.n	80026e6 <_malloc_r+0xd2>
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	442b      	add	r3, r5
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	e00e      	b.n	80026b4 <_malloc_r+0xa0>
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	1b52      	subs	r2, r2, r5
 800269a:	d41e      	bmi.n	80026da <_malloc_r+0xc6>
 800269c:	2a0b      	cmp	r2, #11
 800269e:	d916      	bls.n	80026ce <_malloc_r+0xba>
 80026a0:	1961      	adds	r1, r4, r5
 80026a2:	42a3      	cmp	r3, r4
 80026a4:	6025      	str	r5, [r4, #0]
 80026a6:	bf18      	it	ne
 80026a8:	6059      	strne	r1, [r3, #4]
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	bf08      	it	eq
 80026ae:	6031      	streq	r1, [r6, #0]
 80026b0:	5162      	str	r2, [r4, r5]
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	4638      	mov	r0, r7
 80026b6:	f104 060b 	add.w	r6, r4, #11
 80026ba:	f000 fbf7 	bl	8002eac <__malloc_unlock>
 80026be:	f026 0607 	bic.w	r6, r6, #7
 80026c2:	1d23      	adds	r3, r4, #4
 80026c4:	1af2      	subs	r2, r6, r3
 80026c6:	d0b6      	beq.n	8002636 <_malloc_r+0x22>
 80026c8:	1b9b      	subs	r3, r3, r6
 80026ca:	50a3      	str	r3, [r4, r2]
 80026cc:	e7b3      	b.n	8002636 <_malloc_r+0x22>
 80026ce:	6862      	ldr	r2, [r4, #4]
 80026d0:	42a3      	cmp	r3, r4
 80026d2:	bf0c      	ite	eq
 80026d4:	6032      	streq	r2, [r6, #0]
 80026d6:	605a      	strne	r2, [r3, #4]
 80026d8:	e7ec      	b.n	80026b4 <_malloc_r+0xa0>
 80026da:	4623      	mov	r3, r4
 80026dc:	6864      	ldr	r4, [r4, #4]
 80026de:	e7b2      	b.n	8002646 <_malloc_r+0x32>
 80026e0:	4634      	mov	r4, r6
 80026e2:	6876      	ldr	r6, [r6, #4]
 80026e4:	e7b9      	b.n	800265a <_malloc_r+0x46>
 80026e6:	230c      	movs	r3, #12
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4638      	mov	r0, r7
 80026ec:	f000 fbde 	bl	8002eac <__malloc_unlock>
 80026f0:	e7a1      	b.n	8002636 <_malloc_r+0x22>
 80026f2:	6025      	str	r5, [r4, #0]
 80026f4:	e7de      	b.n	80026b4 <_malloc_r+0xa0>
 80026f6:	bf00      	nop
 80026f8:	200000d4 	.word	0x200000d4

080026fc <iprintf>:
 80026fc:	b40f      	push	{r0, r1, r2, r3}
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <iprintf+0x2c>)
 8002700:	b513      	push	{r0, r1, r4, lr}
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	b124      	cbz	r4, 8002710 <iprintf+0x14>
 8002706:	69a3      	ldr	r3, [r4, #24]
 8002708:	b913      	cbnz	r3, 8002710 <iprintf+0x14>
 800270a:	4620      	mov	r0, r4
 800270c:	f000 fac2 	bl	8002c94 <__sinit>
 8002710:	ab05      	add	r3, sp, #20
 8002712:	9a04      	ldr	r2, [sp, #16]
 8002714:	68a1      	ldr	r1, [r4, #8]
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fbf5 	bl	8002f08 <_vfiprintf_r>
 800271e:	b002      	add	sp, #8
 8002720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002724:	b004      	add	sp, #16
 8002726:	4770      	bx	lr
 8002728:	20000010 	.word	0x20000010

0800272c <_sbrk_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4d06      	ldr	r5, [pc, #24]	; (8002748 <_sbrk_r+0x1c>)
 8002730:	2300      	movs	r3, #0
 8002732:	4604      	mov	r4, r0
 8002734:	4608      	mov	r0, r1
 8002736:	602b      	str	r3, [r5, #0]
 8002738:	f7ff fe68 	bl	800240c <_sbrk>
 800273c:	1c43      	adds	r3, r0, #1
 800273e:	d102      	bne.n	8002746 <_sbrk_r+0x1a>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	b103      	cbz	r3, 8002746 <_sbrk_r+0x1a>
 8002744:	6023      	str	r3, [r4, #0]
 8002746:	bd38      	pop	{r3, r4, r5, pc}
 8002748:	200000e0 	.word	0x200000e0

0800274c <setbuf>:
 800274c:	2900      	cmp	r1, #0
 800274e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002752:	bf0c      	ite	eq
 8002754:	2202      	moveq	r2, #2
 8002756:	2200      	movne	r2, #0
 8002758:	f000 b800 	b.w	800275c <setvbuf>

0800275c <setvbuf>:
 800275c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002760:	461d      	mov	r5, r3
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <setvbuf+0x17c>)
 8002764:	681f      	ldr	r7, [r3, #0]
 8002766:	4604      	mov	r4, r0
 8002768:	460e      	mov	r6, r1
 800276a:	4690      	mov	r8, r2
 800276c:	b127      	cbz	r7, 8002778 <setvbuf+0x1c>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	b913      	cbnz	r3, 8002778 <setvbuf+0x1c>
 8002772:	4638      	mov	r0, r7
 8002774:	f000 fa8e 	bl	8002c94 <__sinit>
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <setvbuf+0x180>)
 800277a:	429c      	cmp	r4, r3
 800277c:	d167      	bne.n	800284e <setvbuf+0xf2>
 800277e:	687c      	ldr	r4, [r7, #4]
 8002780:	f1b8 0f02 	cmp.w	r8, #2
 8002784:	d006      	beq.n	8002794 <setvbuf+0x38>
 8002786:	f1b8 0f01 	cmp.w	r8, #1
 800278a:	f200 809f 	bhi.w	80028cc <setvbuf+0x170>
 800278e:	2d00      	cmp	r5, #0
 8002790:	f2c0 809c 	blt.w	80028cc <setvbuf+0x170>
 8002794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002796:	07db      	lsls	r3, r3, #31
 8002798:	d405      	bmi.n	80027a6 <setvbuf+0x4a>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	0598      	lsls	r0, r3, #22
 800279e:	d402      	bmi.n	80027a6 <setvbuf+0x4a>
 80027a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027a2:	f000 fb15 	bl	8002dd0 <__retarget_lock_acquire_recursive>
 80027a6:	4621      	mov	r1, r4
 80027a8:	4638      	mov	r0, r7
 80027aa:	f000 f9df 	bl	8002b6c <_fflush_r>
 80027ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027b0:	b141      	cbz	r1, 80027c4 <setvbuf+0x68>
 80027b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027b6:	4299      	cmp	r1, r3
 80027b8:	d002      	beq.n	80027c0 <setvbuf+0x64>
 80027ba:	4638      	mov	r0, r7
 80027bc:	f7ff fec0 	bl	8002540 <_free_r>
 80027c0:	2300      	movs	r3, #0
 80027c2:	6363      	str	r3, [r4, #52]	; 0x34
 80027c4:	2300      	movs	r3, #0
 80027c6:	61a3      	str	r3, [r4, #24]
 80027c8:	6063      	str	r3, [r4, #4]
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	0619      	lsls	r1, r3, #24
 80027ce:	d503      	bpl.n	80027d8 <setvbuf+0x7c>
 80027d0:	6921      	ldr	r1, [r4, #16]
 80027d2:	4638      	mov	r0, r7
 80027d4:	f7ff feb4 	bl	8002540 <_free_r>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	f1b8 0f02 	cmp.w	r8, #2
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	d06c      	beq.n	80028c4 <setvbuf+0x168>
 80027ea:	ab01      	add	r3, sp, #4
 80027ec:	466a      	mov	r2, sp
 80027ee:	4621      	mov	r1, r4
 80027f0:	4638      	mov	r0, r7
 80027f2:	f000 faef 	bl	8002dd4 <__swhatbuf_r>
 80027f6:	89a3      	ldrh	r3, [r4, #12]
 80027f8:	4318      	orrs	r0, r3
 80027fa:	81a0      	strh	r0, [r4, #12]
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	d130      	bne.n	8002862 <setvbuf+0x106>
 8002800:	9d00      	ldr	r5, [sp, #0]
 8002802:	4628      	mov	r0, r5
 8002804:	f7ff fe8c 	bl	8002520 <malloc>
 8002808:	4606      	mov	r6, r0
 800280a:	2800      	cmp	r0, #0
 800280c:	d155      	bne.n	80028ba <setvbuf+0x15e>
 800280e:	f8dd 9000 	ldr.w	r9, [sp]
 8002812:	45a9      	cmp	r9, r5
 8002814:	d14a      	bne.n	80028ac <setvbuf+0x150>
 8002816:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800281a:	2200      	movs	r2, #0
 800281c:	60a2      	str	r2, [r4, #8]
 800281e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002822:	6022      	str	r2, [r4, #0]
 8002824:	6122      	str	r2, [r4, #16]
 8002826:	2201      	movs	r2, #1
 8002828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800282c:	6162      	str	r2, [r4, #20]
 800282e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	07d2      	lsls	r2, r2, #31
 8002836:	81a3      	strh	r3, [r4, #12]
 8002838:	d405      	bmi.n	8002846 <setvbuf+0xea>
 800283a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800283e:	d102      	bne.n	8002846 <setvbuf+0xea>
 8002840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002842:	f000 fac6 	bl	8002dd2 <__retarget_lock_release_recursive>
 8002846:	4628      	mov	r0, r5
 8002848:	b003      	add	sp, #12
 800284a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <setvbuf+0x184>)
 8002850:	429c      	cmp	r4, r3
 8002852:	d101      	bne.n	8002858 <setvbuf+0xfc>
 8002854:	68bc      	ldr	r4, [r7, #8]
 8002856:	e793      	b.n	8002780 <setvbuf+0x24>
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <setvbuf+0x188>)
 800285a:	429c      	cmp	r4, r3
 800285c:	bf08      	it	eq
 800285e:	68fc      	ldreq	r4, [r7, #12]
 8002860:	e78e      	b.n	8002780 <setvbuf+0x24>
 8002862:	2e00      	cmp	r6, #0
 8002864:	d0cd      	beq.n	8002802 <setvbuf+0xa6>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	b913      	cbnz	r3, 8002870 <setvbuf+0x114>
 800286a:	4638      	mov	r0, r7
 800286c:	f000 fa12 	bl	8002c94 <__sinit>
 8002870:	f1b8 0f01 	cmp.w	r8, #1
 8002874:	bf08      	it	eq
 8002876:	89a3      	ldrheq	r3, [r4, #12]
 8002878:	6026      	str	r6, [r4, #0]
 800287a:	bf04      	itt	eq
 800287c:	f043 0301 	orreq.w	r3, r3, #1
 8002880:	81a3      	strheq	r3, [r4, #12]
 8002882:	89a2      	ldrh	r2, [r4, #12]
 8002884:	f012 0308 	ands.w	r3, r2, #8
 8002888:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800288c:	d01c      	beq.n	80028c8 <setvbuf+0x16c>
 800288e:	07d3      	lsls	r3, r2, #31
 8002890:	bf41      	itttt	mi
 8002892:	2300      	movmi	r3, #0
 8002894:	426d      	negmi	r5, r5
 8002896:	60a3      	strmi	r3, [r4, #8]
 8002898:	61a5      	strmi	r5, [r4, #24]
 800289a:	bf58      	it	pl
 800289c:	60a5      	strpl	r5, [r4, #8]
 800289e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80028a0:	f015 0501 	ands.w	r5, r5, #1
 80028a4:	d115      	bne.n	80028d2 <setvbuf+0x176>
 80028a6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80028aa:	e7c8      	b.n	800283e <setvbuf+0xe2>
 80028ac:	4648      	mov	r0, r9
 80028ae:	f7ff fe37 	bl	8002520 <malloc>
 80028b2:	4606      	mov	r6, r0
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d0ae      	beq.n	8002816 <setvbuf+0xba>
 80028b8:	464d      	mov	r5, r9
 80028ba:	89a3      	ldrh	r3, [r4, #12]
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	81a3      	strh	r3, [r4, #12]
 80028c2:	e7d0      	b.n	8002866 <setvbuf+0x10a>
 80028c4:	2500      	movs	r5, #0
 80028c6:	e7a8      	b.n	800281a <setvbuf+0xbe>
 80028c8:	60a3      	str	r3, [r4, #8]
 80028ca:	e7e8      	b.n	800289e <setvbuf+0x142>
 80028cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028d0:	e7b9      	b.n	8002846 <setvbuf+0xea>
 80028d2:	2500      	movs	r5, #0
 80028d4:	e7b7      	b.n	8002846 <setvbuf+0xea>
 80028d6:	bf00      	nop
 80028d8:	20000010 	.word	0x20000010
 80028dc:	080036e4 	.word	0x080036e4
 80028e0:	08003704 	.word	0x08003704
 80028e4:	080036c4 	.word	0x080036c4

080028e8 <__swbuf_r>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	460e      	mov	r6, r1
 80028ec:	4614      	mov	r4, r2
 80028ee:	4605      	mov	r5, r0
 80028f0:	b118      	cbz	r0, 80028fa <__swbuf_r+0x12>
 80028f2:	6983      	ldr	r3, [r0, #24]
 80028f4:	b90b      	cbnz	r3, 80028fa <__swbuf_r+0x12>
 80028f6:	f000 f9cd 	bl	8002c94 <__sinit>
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <__swbuf_r+0x98>)
 80028fc:	429c      	cmp	r4, r3
 80028fe:	d12b      	bne.n	8002958 <__swbuf_r+0x70>
 8002900:	686c      	ldr	r4, [r5, #4]
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	60a3      	str	r3, [r4, #8]
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	071a      	lsls	r2, r3, #28
 800290a:	d52f      	bpl.n	800296c <__swbuf_r+0x84>
 800290c:	6923      	ldr	r3, [r4, #16]
 800290e:	b36b      	cbz	r3, 800296c <__swbuf_r+0x84>
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	1ac0      	subs	r0, r0, r3
 8002916:	6963      	ldr	r3, [r4, #20]
 8002918:	b2f6      	uxtb	r6, r6
 800291a:	4283      	cmp	r3, r0
 800291c:	4637      	mov	r7, r6
 800291e:	dc04      	bgt.n	800292a <__swbuf_r+0x42>
 8002920:	4621      	mov	r1, r4
 8002922:	4628      	mov	r0, r5
 8002924:	f000 f922 	bl	8002b6c <_fflush_r>
 8002928:	bb30      	cbnz	r0, 8002978 <__swbuf_r+0x90>
 800292a:	68a3      	ldr	r3, [r4, #8]
 800292c:	3b01      	subs	r3, #1
 800292e:	60a3      	str	r3, [r4, #8]
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	6022      	str	r2, [r4, #0]
 8002936:	701e      	strb	r6, [r3, #0]
 8002938:	6963      	ldr	r3, [r4, #20]
 800293a:	3001      	adds	r0, #1
 800293c:	4283      	cmp	r3, r0
 800293e:	d004      	beq.n	800294a <__swbuf_r+0x62>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	07db      	lsls	r3, r3, #31
 8002944:	d506      	bpl.n	8002954 <__swbuf_r+0x6c>
 8002946:	2e0a      	cmp	r6, #10
 8002948:	d104      	bne.n	8002954 <__swbuf_r+0x6c>
 800294a:	4621      	mov	r1, r4
 800294c:	4628      	mov	r0, r5
 800294e:	f000 f90d 	bl	8002b6c <_fflush_r>
 8002952:	b988      	cbnz	r0, 8002978 <__swbuf_r+0x90>
 8002954:	4638      	mov	r0, r7
 8002956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <__swbuf_r+0x9c>)
 800295a:	429c      	cmp	r4, r3
 800295c:	d101      	bne.n	8002962 <__swbuf_r+0x7a>
 800295e:	68ac      	ldr	r4, [r5, #8]
 8002960:	e7cf      	b.n	8002902 <__swbuf_r+0x1a>
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <__swbuf_r+0xa0>)
 8002964:	429c      	cmp	r4, r3
 8002966:	bf08      	it	eq
 8002968:	68ec      	ldreq	r4, [r5, #12]
 800296a:	e7ca      	b.n	8002902 <__swbuf_r+0x1a>
 800296c:	4621      	mov	r1, r4
 800296e:	4628      	mov	r0, r5
 8002970:	f000 f80c 	bl	800298c <__swsetup_r>
 8002974:	2800      	cmp	r0, #0
 8002976:	d0cb      	beq.n	8002910 <__swbuf_r+0x28>
 8002978:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800297c:	e7ea      	b.n	8002954 <__swbuf_r+0x6c>
 800297e:	bf00      	nop
 8002980:	080036e4 	.word	0x080036e4
 8002984:	08003704 	.word	0x08003704
 8002988:	080036c4 	.word	0x080036c4

0800298c <__swsetup_r>:
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <__swsetup_r+0xcc>)
 800298e:	b570      	push	{r4, r5, r6, lr}
 8002990:	681d      	ldr	r5, [r3, #0]
 8002992:	4606      	mov	r6, r0
 8002994:	460c      	mov	r4, r1
 8002996:	b125      	cbz	r5, 80029a2 <__swsetup_r+0x16>
 8002998:	69ab      	ldr	r3, [r5, #24]
 800299a:	b913      	cbnz	r3, 80029a2 <__swsetup_r+0x16>
 800299c:	4628      	mov	r0, r5
 800299e:	f000 f979 	bl	8002c94 <__sinit>
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <__swsetup_r+0xd0>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d10f      	bne.n	80029c8 <__swsetup_r+0x3c>
 80029a8:	686c      	ldr	r4, [r5, #4]
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029b0:	0719      	lsls	r1, r3, #28
 80029b2:	d42c      	bmi.n	8002a0e <__swsetup_r+0x82>
 80029b4:	06dd      	lsls	r5, r3, #27
 80029b6:	d411      	bmi.n	80029dc <__swsetup_r+0x50>
 80029b8:	2309      	movs	r3, #9
 80029ba:	6033      	str	r3, [r6, #0]
 80029bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029c0:	81a3      	strh	r3, [r4, #12]
 80029c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c6:	e03e      	b.n	8002a46 <__swsetup_r+0xba>
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <__swsetup_r+0xd4>)
 80029ca:	429c      	cmp	r4, r3
 80029cc:	d101      	bne.n	80029d2 <__swsetup_r+0x46>
 80029ce:	68ac      	ldr	r4, [r5, #8]
 80029d0:	e7eb      	b.n	80029aa <__swsetup_r+0x1e>
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <__swsetup_r+0xd8>)
 80029d4:	429c      	cmp	r4, r3
 80029d6:	bf08      	it	eq
 80029d8:	68ec      	ldreq	r4, [r5, #12]
 80029da:	e7e6      	b.n	80029aa <__swsetup_r+0x1e>
 80029dc:	0758      	lsls	r0, r3, #29
 80029de:	d512      	bpl.n	8002a06 <__swsetup_r+0x7a>
 80029e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029e2:	b141      	cbz	r1, 80029f6 <__swsetup_r+0x6a>
 80029e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029e8:	4299      	cmp	r1, r3
 80029ea:	d002      	beq.n	80029f2 <__swsetup_r+0x66>
 80029ec:	4630      	mov	r0, r6
 80029ee:	f7ff fda7 	bl	8002540 <_free_r>
 80029f2:	2300      	movs	r3, #0
 80029f4:	6363      	str	r3, [r4, #52]	; 0x34
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029fc:	81a3      	strh	r3, [r4, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	6063      	str	r3, [r4, #4]
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	89a3      	ldrh	r3, [r4, #12]
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	81a3      	strh	r3, [r4, #12]
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	b94b      	cbnz	r3, 8002a26 <__swsetup_r+0x9a>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1c:	d003      	beq.n	8002a26 <__swsetup_r+0x9a>
 8002a1e:	4621      	mov	r1, r4
 8002a20:	4630      	mov	r0, r6
 8002a22:	f000 f9fd 	bl	8002e20 <__smakebuf_r>
 8002a26:	89a0      	ldrh	r0, [r4, #12]
 8002a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a2c:	f010 0301 	ands.w	r3, r0, #1
 8002a30:	d00a      	beq.n	8002a48 <__swsetup_r+0xbc>
 8002a32:	2300      	movs	r3, #0
 8002a34:	60a3      	str	r3, [r4, #8]
 8002a36:	6963      	ldr	r3, [r4, #20]
 8002a38:	425b      	negs	r3, r3
 8002a3a:	61a3      	str	r3, [r4, #24]
 8002a3c:	6923      	ldr	r3, [r4, #16]
 8002a3e:	b943      	cbnz	r3, 8002a52 <__swsetup_r+0xc6>
 8002a40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a44:	d1ba      	bne.n	80029bc <__swsetup_r+0x30>
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	0781      	lsls	r1, r0, #30
 8002a4a:	bf58      	it	pl
 8002a4c:	6963      	ldrpl	r3, [r4, #20]
 8002a4e:	60a3      	str	r3, [r4, #8]
 8002a50:	e7f4      	b.n	8002a3c <__swsetup_r+0xb0>
 8002a52:	2000      	movs	r0, #0
 8002a54:	e7f7      	b.n	8002a46 <__swsetup_r+0xba>
 8002a56:	bf00      	nop
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	080036e4 	.word	0x080036e4
 8002a60:	08003704 	.word	0x08003704
 8002a64:	080036c4 	.word	0x080036c4

08002a68 <__sflush_r>:
 8002a68:	898a      	ldrh	r2, [r1, #12]
 8002a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	0710      	lsls	r0, r2, #28
 8002a70:	460c      	mov	r4, r1
 8002a72:	d457      	bmi.n	8002b24 <__sflush_r+0xbc>
 8002a74:	684b      	ldr	r3, [r1, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dc04      	bgt.n	8002a84 <__sflush_r+0x1c>
 8002a7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dc01      	bgt.n	8002a84 <__sflush_r+0x1c>
 8002a80:	2000      	movs	r0, #0
 8002a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d0fa      	beq.n	8002a80 <__sflush_r+0x18>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a90:	682f      	ldr	r7, [r5, #0]
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	d032      	beq.n	8002afc <__sflush_r+0x94>
 8002a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	075a      	lsls	r2, r3, #29
 8002a9c:	d505      	bpl.n	8002aaa <__sflush_r+0x42>
 8002a9e:	6863      	ldr	r3, [r4, #4]
 8002aa0:	1ac0      	subs	r0, r0, r3
 8002aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa4:	b10b      	cbz	r3, 8002aaa <__sflush_r+0x42>
 8002aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aa8:	1ac0      	subs	r0, r0, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4602      	mov	r2, r0
 8002aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab0:	6a21      	ldr	r1, [r4, #32]
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	47b0      	blx	r6
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	d106      	bne.n	8002aca <__sflush_r+0x62>
 8002abc:	6829      	ldr	r1, [r5, #0]
 8002abe:	291d      	cmp	r1, #29
 8002ac0:	d82c      	bhi.n	8002b1c <__sflush_r+0xb4>
 8002ac2:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <__sflush_r+0x100>)
 8002ac4:	40ca      	lsrs	r2, r1
 8002ac6:	07d6      	lsls	r6, r2, #31
 8002ac8:	d528      	bpl.n	8002b1c <__sflush_r+0xb4>
 8002aca:	2200      	movs	r2, #0
 8002acc:	6062      	str	r2, [r4, #4]
 8002ace:	04d9      	lsls	r1, r3, #19
 8002ad0:	6922      	ldr	r2, [r4, #16]
 8002ad2:	6022      	str	r2, [r4, #0]
 8002ad4:	d504      	bpl.n	8002ae0 <__sflush_r+0x78>
 8002ad6:	1c42      	adds	r2, r0, #1
 8002ad8:	d101      	bne.n	8002ade <__sflush_r+0x76>
 8002ada:	682b      	ldr	r3, [r5, #0]
 8002adc:	b903      	cbnz	r3, 8002ae0 <__sflush_r+0x78>
 8002ade:	6560      	str	r0, [r4, #84]	; 0x54
 8002ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ae2:	602f      	str	r7, [r5, #0]
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d0cb      	beq.n	8002a80 <__sflush_r+0x18>
 8002ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aec:	4299      	cmp	r1, r3
 8002aee:	d002      	beq.n	8002af6 <__sflush_r+0x8e>
 8002af0:	4628      	mov	r0, r5
 8002af2:	f7ff fd25 	bl	8002540 <_free_r>
 8002af6:	2000      	movs	r0, #0
 8002af8:	6360      	str	r0, [r4, #52]	; 0x34
 8002afa:	e7c2      	b.n	8002a82 <__sflush_r+0x1a>
 8002afc:	6a21      	ldr	r1, [r4, #32]
 8002afe:	2301      	movs	r3, #1
 8002b00:	4628      	mov	r0, r5
 8002b02:	47b0      	blx	r6
 8002b04:	1c41      	adds	r1, r0, #1
 8002b06:	d1c7      	bne.n	8002a98 <__sflush_r+0x30>
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0c4      	beq.n	8002a98 <__sflush_r+0x30>
 8002b0e:	2b1d      	cmp	r3, #29
 8002b10:	d001      	beq.n	8002b16 <__sflush_r+0xae>
 8002b12:	2b16      	cmp	r3, #22
 8002b14:	d101      	bne.n	8002b1a <__sflush_r+0xb2>
 8002b16:	602f      	str	r7, [r5, #0]
 8002b18:	e7b2      	b.n	8002a80 <__sflush_r+0x18>
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	e7ae      	b.n	8002a82 <__sflush_r+0x1a>
 8002b24:	690f      	ldr	r7, [r1, #16]
 8002b26:	2f00      	cmp	r7, #0
 8002b28:	d0aa      	beq.n	8002a80 <__sflush_r+0x18>
 8002b2a:	0793      	lsls	r3, r2, #30
 8002b2c:	680e      	ldr	r6, [r1, #0]
 8002b2e:	bf08      	it	eq
 8002b30:	694b      	ldreq	r3, [r1, #20]
 8002b32:	600f      	str	r7, [r1, #0]
 8002b34:	bf18      	it	ne
 8002b36:	2300      	movne	r3, #0
 8002b38:	1bf6      	subs	r6, r6, r7
 8002b3a:	608b      	str	r3, [r1, #8]
 8002b3c:	2e00      	cmp	r6, #0
 8002b3e:	dd9f      	ble.n	8002a80 <__sflush_r+0x18>
 8002b40:	6a21      	ldr	r1, [r4, #32]
 8002b42:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002b46:	4633      	mov	r3, r6
 8002b48:	463a      	mov	r2, r7
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	47e0      	blx	ip
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	dc06      	bgt.n	8002b60 <__sflush_r+0xf8>
 8002b52:	89a3      	ldrh	r3, [r4, #12]
 8002b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b58:	81a3      	strh	r3, [r4, #12]
 8002b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b5e:	e790      	b.n	8002a82 <__sflush_r+0x1a>
 8002b60:	4407      	add	r7, r0
 8002b62:	1a36      	subs	r6, r6, r0
 8002b64:	e7ea      	b.n	8002b3c <__sflush_r+0xd4>
 8002b66:	bf00      	nop
 8002b68:	20400001 	.word	0x20400001

08002b6c <_fflush_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	690b      	ldr	r3, [r1, #16]
 8002b70:	4605      	mov	r5, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	b913      	cbnz	r3, 8002b7c <_fflush_r+0x10>
 8002b76:	2500      	movs	r5, #0
 8002b78:	4628      	mov	r0, r5
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	b118      	cbz	r0, 8002b86 <_fflush_r+0x1a>
 8002b7e:	6983      	ldr	r3, [r0, #24]
 8002b80:	b90b      	cbnz	r3, 8002b86 <_fflush_r+0x1a>
 8002b82:	f000 f887 	bl	8002c94 <__sinit>
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <_fflush_r+0x6c>)
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	d11b      	bne.n	8002bc4 <_fflush_r+0x58>
 8002b8c:	686c      	ldr	r4, [r5, #4]
 8002b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <_fflush_r+0xa>
 8002b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b98:	07d0      	lsls	r0, r2, #31
 8002b9a:	d404      	bmi.n	8002ba6 <_fflush_r+0x3a>
 8002b9c:	0599      	lsls	r1, r3, #22
 8002b9e:	d402      	bmi.n	8002ba6 <_fflush_r+0x3a>
 8002ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ba2:	f000 f915 	bl	8002dd0 <__retarget_lock_acquire_recursive>
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	4621      	mov	r1, r4
 8002baa:	f7ff ff5d 	bl	8002a68 <__sflush_r>
 8002bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bb0:	07da      	lsls	r2, r3, #31
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	d4e0      	bmi.n	8002b78 <_fflush_r+0xc>
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	059b      	lsls	r3, r3, #22
 8002bba:	d4dd      	bmi.n	8002b78 <_fflush_r+0xc>
 8002bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bbe:	f000 f908 	bl	8002dd2 <__retarget_lock_release_recursive>
 8002bc2:	e7d9      	b.n	8002b78 <_fflush_r+0xc>
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <_fflush_r+0x70>)
 8002bc6:	429c      	cmp	r4, r3
 8002bc8:	d101      	bne.n	8002bce <_fflush_r+0x62>
 8002bca:	68ac      	ldr	r4, [r5, #8]
 8002bcc:	e7df      	b.n	8002b8e <_fflush_r+0x22>
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <_fflush_r+0x74>)
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	bf08      	it	eq
 8002bd4:	68ec      	ldreq	r4, [r5, #12]
 8002bd6:	e7da      	b.n	8002b8e <_fflush_r+0x22>
 8002bd8:	080036e4 	.word	0x080036e4
 8002bdc:	08003704 	.word	0x08003704
 8002be0:	080036c4 	.word	0x080036c4

08002be4 <std>:
 8002be4:	2300      	movs	r3, #0
 8002be6:	b510      	push	{r4, lr}
 8002be8:	4604      	mov	r4, r0
 8002bea:	e9c0 3300 	strd	r3, r3, [r0]
 8002bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bf2:	6083      	str	r3, [r0, #8]
 8002bf4:	8181      	strh	r1, [r0, #12]
 8002bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8002bf8:	81c2      	strh	r2, [r0, #14]
 8002bfa:	6183      	str	r3, [r0, #24]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	2208      	movs	r2, #8
 8002c00:	305c      	adds	r0, #92	; 0x5c
 8002c02:	f7ff fc95 	bl	8002530 <memset>
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <std+0x38>)
 8002c08:	6263      	str	r3, [r4, #36]	; 0x24
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <std+0x3c>)
 8002c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <std+0x40>)
 8002c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <std+0x44>)
 8002c14:	6224      	str	r4, [r4, #32]
 8002c16:	6323      	str	r3, [r4, #48]	; 0x30
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	bf00      	nop
 8002c1c:	08003491 	.word	0x08003491
 8002c20:	080034b3 	.word	0x080034b3
 8002c24:	080034eb 	.word	0x080034eb
 8002c28:	0800350f 	.word	0x0800350f

08002c2c <_cleanup_r>:
 8002c2c:	4901      	ldr	r1, [pc, #4]	; (8002c34 <_cleanup_r+0x8>)
 8002c2e:	f000 b8af 	b.w	8002d90 <_fwalk_reent>
 8002c32:	bf00      	nop
 8002c34:	08002b6d 	.word	0x08002b6d

08002c38 <__sfmoreglue>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	2268      	movs	r2, #104	; 0x68
 8002c3c:	1e4d      	subs	r5, r1, #1
 8002c3e:	4355      	muls	r5, r2
 8002c40:	460e      	mov	r6, r1
 8002c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c46:	f7ff fce5 	bl	8002614 <_malloc_r>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	b140      	cbz	r0, 8002c60 <__sfmoreglue+0x28>
 8002c4e:	2100      	movs	r1, #0
 8002c50:	e9c0 1600 	strd	r1, r6, [r0]
 8002c54:	300c      	adds	r0, #12
 8002c56:	60a0      	str	r0, [r4, #8]
 8002c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c5c:	f7ff fc68 	bl	8002530 <memset>
 8002c60:	4620      	mov	r0, r4
 8002c62:	bd70      	pop	{r4, r5, r6, pc}

08002c64 <__sfp_lock_acquire>:
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <__sfp_lock_acquire+0x8>)
 8002c66:	f000 b8b3 	b.w	8002dd0 <__retarget_lock_acquire_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	200000dd 	.word	0x200000dd

08002c70 <__sfp_lock_release>:
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <__sfp_lock_release+0x8>)
 8002c72:	f000 b8ae 	b.w	8002dd2 <__retarget_lock_release_recursive>
 8002c76:	bf00      	nop
 8002c78:	200000dd 	.word	0x200000dd

08002c7c <__sinit_lock_acquire>:
 8002c7c:	4801      	ldr	r0, [pc, #4]	; (8002c84 <__sinit_lock_acquire+0x8>)
 8002c7e:	f000 b8a7 	b.w	8002dd0 <__retarget_lock_acquire_recursive>
 8002c82:	bf00      	nop
 8002c84:	200000de 	.word	0x200000de

08002c88 <__sinit_lock_release>:
 8002c88:	4801      	ldr	r0, [pc, #4]	; (8002c90 <__sinit_lock_release+0x8>)
 8002c8a:	f000 b8a2 	b.w	8002dd2 <__retarget_lock_release_recursive>
 8002c8e:	bf00      	nop
 8002c90:	200000de 	.word	0x200000de

08002c94 <__sinit>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4604      	mov	r4, r0
 8002c98:	f7ff fff0 	bl	8002c7c <__sinit_lock_acquire>
 8002c9c:	69a3      	ldr	r3, [r4, #24]
 8002c9e:	b11b      	cbz	r3, 8002ca8 <__sinit+0x14>
 8002ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca4:	f7ff bff0 	b.w	8002c88 <__sinit_lock_release>
 8002ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002cac:	6523      	str	r3, [r4, #80]	; 0x50
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <__sinit+0x68>)
 8002cb0:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <__sinit+0x6c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	bf04      	itt	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	61a3      	streq	r3, [r4, #24]
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 f820 	bl	8002d04 <__sfp>
 8002cc4:	6060      	str	r0, [r4, #4]
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f000 f81c 	bl	8002d04 <__sfp>
 8002ccc:	60a0      	str	r0, [r4, #8]
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f000 f818 	bl	8002d04 <__sfp>
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60e0      	str	r0, [r4, #12]
 8002cd8:	2104      	movs	r1, #4
 8002cda:	6860      	ldr	r0, [r4, #4]
 8002cdc:	f7ff ff82 	bl	8002be4 <std>
 8002ce0:	68a0      	ldr	r0, [r4, #8]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2109      	movs	r1, #9
 8002ce6:	f7ff ff7d 	bl	8002be4 <std>
 8002cea:	68e0      	ldr	r0, [r4, #12]
 8002cec:	2202      	movs	r2, #2
 8002cee:	2112      	movs	r1, #18
 8002cf0:	f7ff ff78 	bl	8002be4 <std>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	61a3      	str	r3, [r4, #24]
 8002cf8:	e7d2      	b.n	8002ca0 <__sinit+0xc>
 8002cfa:	bf00      	nop
 8002cfc:	080036c0 	.word	0x080036c0
 8002d00:	08002c2d 	.word	0x08002c2d

08002d04 <__sfp>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	4607      	mov	r7, r0
 8002d08:	f7ff ffac 	bl	8002c64 <__sfp_lock_acquire>
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <__sfp+0x84>)
 8002d0e:	681e      	ldr	r6, [r3, #0]
 8002d10:	69b3      	ldr	r3, [r6, #24]
 8002d12:	b913      	cbnz	r3, 8002d1a <__sfp+0x16>
 8002d14:	4630      	mov	r0, r6
 8002d16:	f7ff ffbd 	bl	8002c94 <__sinit>
 8002d1a:	3648      	adds	r6, #72	; 0x48
 8002d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	d503      	bpl.n	8002d2c <__sfp+0x28>
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	b30b      	cbz	r3, 8002d6c <__sfp+0x68>
 8002d28:	6836      	ldr	r6, [r6, #0]
 8002d2a:	e7f7      	b.n	8002d1c <__sfp+0x18>
 8002d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d30:	b9d5      	cbnz	r5, 8002d68 <__sfp+0x64>
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <__sfp+0x88>)
 8002d34:	60e3      	str	r3, [r4, #12]
 8002d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8002d3c:	f000 f847 	bl	8002dce <__retarget_lock_init_recursive>
 8002d40:	f7ff ff96 	bl	8002c70 <__sfp_lock_release>
 8002d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d4c:	6025      	str	r5, [r4, #0]
 8002d4e:	61a5      	str	r5, [r4, #24]
 8002d50:	2208      	movs	r2, #8
 8002d52:	4629      	mov	r1, r5
 8002d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d58:	f7ff fbea 	bl	8002530 <memset>
 8002d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d64:	4620      	mov	r0, r4
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d68:	3468      	adds	r4, #104	; 0x68
 8002d6a:	e7d9      	b.n	8002d20 <__sfp+0x1c>
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	4638      	mov	r0, r7
 8002d70:	f7ff ff62 	bl	8002c38 <__sfmoreglue>
 8002d74:	4604      	mov	r4, r0
 8002d76:	6030      	str	r0, [r6, #0]
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d1d5      	bne.n	8002d28 <__sfp+0x24>
 8002d7c:	f7ff ff78 	bl	8002c70 <__sfp_lock_release>
 8002d80:	230c      	movs	r3, #12
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	e7ee      	b.n	8002d64 <__sfp+0x60>
 8002d86:	bf00      	nop
 8002d88:	080036c0 	.word	0x080036c0
 8002d8c:	ffff0001 	.word	0xffff0001

08002d90 <_fwalk_reent>:
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d94:	4606      	mov	r6, r0
 8002d96:	4688      	mov	r8, r1
 8002d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d9c:	2700      	movs	r7, #0
 8002d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002da2:	f1b9 0901 	subs.w	r9, r9, #1
 8002da6:	d505      	bpl.n	8002db4 <_fwalk_reent+0x24>
 8002da8:	6824      	ldr	r4, [r4, #0]
 8002daa:	2c00      	cmp	r4, #0
 8002dac:	d1f7      	bne.n	8002d9e <_fwalk_reent+0xe>
 8002dae:	4638      	mov	r0, r7
 8002db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002db4:	89ab      	ldrh	r3, [r5, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d907      	bls.n	8002dca <_fwalk_reent+0x3a>
 8002dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	d003      	beq.n	8002dca <_fwalk_reent+0x3a>
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	47c0      	blx	r8
 8002dc8:	4307      	orrs	r7, r0
 8002dca:	3568      	adds	r5, #104	; 0x68
 8002dcc:	e7e9      	b.n	8002da2 <_fwalk_reent+0x12>

08002dce <__retarget_lock_init_recursive>:
 8002dce:	4770      	bx	lr

08002dd0 <__retarget_lock_acquire_recursive>:
 8002dd0:	4770      	bx	lr

08002dd2 <__retarget_lock_release_recursive>:
 8002dd2:	4770      	bx	lr

08002dd4 <__swhatbuf_r>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	b096      	sub	sp, #88	; 0x58
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	da08      	bge.n	8002df8 <__swhatbuf_r+0x24>
 8002de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	602a      	str	r2, [r5, #0]
 8002dee:	061a      	lsls	r2, r3, #24
 8002df0:	d410      	bmi.n	8002e14 <__swhatbuf_r+0x40>
 8002df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df6:	e00e      	b.n	8002e16 <__swhatbuf_r+0x42>
 8002df8:	466a      	mov	r2, sp
 8002dfa:	f000 fbaf 	bl	800355c <_fstat_r>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	dbf1      	blt.n	8002de6 <__swhatbuf_r+0x12>
 8002e02:	9a01      	ldr	r2, [sp, #4]
 8002e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e0c:	425a      	negs	r2, r3
 8002e0e:	415a      	adcs	r2, r3
 8002e10:	602a      	str	r2, [r5, #0]
 8002e12:	e7ee      	b.n	8002df2 <__swhatbuf_r+0x1e>
 8002e14:	2340      	movs	r3, #64	; 0x40
 8002e16:	2000      	movs	r0, #0
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	b016      	add	sp, #88	; 0x58
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e20 <__smakebuf_r>:
 8002e20:	898b      	ldrh	r3, [r1, #12]
 8002e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e24:	079d      	lsls	r5, r3, #30
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	d507      	bpl.n	8002e3c <__smakebuf_r+0x1c>
 8002e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e30:	6023      	str	r3, [r4, #0]
 8002e32:	6123      	str	r3, [r4, #16]
 8002e34:	2301      	movs	r3, #1
 8002e36:	6163      	str	r3, [r4, #20]
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	ab01      	add	r3, sp, #4
 8002e3e:	466a      	mov	r2, sp
 8002e40:	f7ff ffc8 	bl	8002dd4 <__swhatbuf_r>
 8002e44:	9900      	ldr	r1, [sp, #0]
 8002e46:	4605      	mov	r5, r0
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f7ff fbe3 	bl	8002614 <_malloc_r>
 8002e4e:	b948      	cbnz	r0, 8002e64 <__smakebuf_r+0x44>
 8002e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e54:	059a      	lsls	r2, r3, #22
 8002e56:	d4ef      	bmi.n	8002e38 <__smakebuf_r+0x18>
 8002e58:	f023 0303 	bic.w	r3, r3, #3
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	e7e3      	b.n	8002e2c <__smakebuf_r+0xc>
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <__smakebuf_r+0x7c>)
 8002e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	6020      	str	r0, [r4, #0]
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	81a3      	strh	r3, [r4, #12]
 8002e72:	9b00      	ldr	r3, [sp, #0]
 8002e74:	6163      	str	r3, [r4, #20]
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	6120      	str	r0, [r4, #16]
 8002e7a:	b15b      	cbz	r3, 8002e94 <__smakebuf_r+0x74>
 8002e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 fb7d 	bl	8003580 <_isatty_r>
 8002e86:	b128      	cbz	r0, 8002e94 <__smakebuf_r+0x74>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	89a0      	ldrh	r0, [r4, #12]
 8002e96:	4305      	orrs	r5, r0
 8002e98:	81a5      	strh	r5, [r4, #12]
 8002e9a:	e7cd      	b.n	8002e38 <__smakebuf_r+0x18>
 8002e9c:	08002c2d 	.word	0x08002c2d

08002ea0 <__malloc_lock>:
 8002ea0:	4801      	ldr	r0, [pc, #4]	; (8002ea8 <__malloc_lock+0x8>)
 8002ea2:	f7ff bf95 	b.w	8002dd0 <__retarget_lock_acquire_recursive>
 8002ea6:	bf00      	nop
 8002ea8:	200000dc 	.word	0x200000dc

08002eac <__malloc_unlock>:
 8002eac:	4801      	ldr	r0, [pc, #4]	; (8002eb4 <__malloc_unlock+0x8>)
 8002eae:	f7ff bf90 	b.w	8002dd2 <__retarget_lock_release_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	200000dc 	.word	0x200000dc

08002eb8 <__sfputc_r>:
 8002eb8:	6893      	ldr	r3, [r2, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	b410      	push	{r4}
 8002ec0:	6093      	str	r3, [r2, #8]
 8002ec2:	da07      	bge.n	8002ed4 <__sfputc_r+0x1c>
 8002ec4:	6994      	ldr	r4, [r2, #24]
 8002ec6:	42a3      	cmp	r3, r4
 8002ec8:	db01      	blt.n	8002ece <__sfputc_r+0x16>
 8002eca:	290a      	cmp	r1, #10
 8002ecc:	d102      	bne.n	8002ed4 <__sfputc_r+0x1c>
 8002ece:	bc10      	pop	{r4}
 8002ed0:	f7ff bd0a 	b.w	80028e8 <__swbuf_r>
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	1c58      	adds	r0, r3, #1
 8002ed8:	6010      	str	r0, [r2, #0]
 8002eda:	7019      	strb	r1, [r3, #0]
 8002edc:	4608      	mov	r0, r1
 8002ede:	bc10      	pop	{r4}
 8002ee0:	4770      	bx	lr

08002ee2 <__sfputs_r>:
 8002ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	460f      	mov	r7, r1
 8002ee8:	4614      	mov	r4, r2
 8002eea:	18d5      	adds	r5, r2, r3
 8002eec:	42ac      	cmp	r4, r5
 8002eee:	d101      	bne.n	8002ef4 <__sfputs_r+0x12>
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e007      	b.n	8002f04 <__sfputs_r+0x22>
 8002ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef8:	463a      	mov	r2, r7
 8002efa:	4630      	mov	r0, r6
 8002efc:	f7ff ffdc 	bl	8002eb8 <__sfputc_r>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d1f3      	bne.n	8002eec <__sfputs_r+0xa>
 8002f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f08 <_vfiprintf_r>:
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	b09d      	sub	sp, #116	; 0x74
 8002f10:	4614      	mov	r4, r2
 8002f12:	4698      	mov	r8, r3
 8002f14:	4606      	mov	r6, r0
 8002f16:	b118      	cbz	r0, 8002f20 <_vfiprintf_r+0x18>
 8002f18:	6983      	ldr	r3, [r0, #24]
 8002f1a:	b90b      	cbnz	r3, 8002f20 <_vfiprintf_r+0x18>
 8002f1c:	f7ff feba 	bl	8002c94 <__sinit>
 8002f20:	4b89      	ldr	r3, [pc, #548]	; (8003148 <_vfiprintf_r+0x240>)
 8002f22:	429d      	cmp	r5, r3
 8002f24:	d11b      	bne.n	8002f5e <_vfiprintf_r+0x56>
 8002f26:	6875      	ldr	r5, [r6, #4]
 8002f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f2a:	07d9      	lsls	r1, r3, #31
 8002f2c:	d405      	bmi.n	8002f3a <_vfiprintf_r+0x32>
 8002f2e:	89ab      	ldrh	r3, [r5, #12]
 8002f30:	059a      	lsls	r2, r3, #22
 8002f32:	d402      	bmi.n	8002f3a <_vfiprintf_r+0x32>
 8002f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f36:	f7ff ff4b 	bl	8002dd0 <__retarget_lock_acquire_recursive>
 8002f3a:	89ab      	ldrh	r3, [r5, #12]
 8002f3c:	071b      	lsls	r3, r3, #28
 8002f3e:	d501      	bpl.n	8002f44 <_vfiprintf_r+0x3c>
 8002f40:	692b      	ldr	r3, [r5, #16]
 8002f42:	b9eb      	cbnz	r3, 8002f80 <_vfiprintf_r+0x78>
 8002f44:	4629      	mov	r1, r5
 8002f46:	4630      	mov	r0, r6
 8002f48:	f7ff fd20 	bl	800298c <__swsetup_r>
 8002f4c:	b1c0      	cbz	r0, 8002f80 <_vfiprintf_r+0x78>
 8002f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f50:	07dc      	lsls	r4, r3, #31
 8002f52:	d50e      	bpl.n	8002f72 <_vfiprintf_r+0x6a>
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f58:	b01d      	add	sp, #116	; 0x74
 8002f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5e:	4b7b      	ldr	r3, [pc, #492]	; (800314c <_vfiprintf_r+0x244>)
 8002f60:	429d      	cmp	r5, r3
 8002f62:	d101      	bne.n	8002f68 <_vfiprintf_r+0x60>
 8002f64:	68b5      	ldr	r5, [r6, #8]
 8002f66:	e7df      	b.n	8002f28 <_vfiprintf_r+0x20>
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <_vfiprintf_r+0x248>)
 8002f6a:	429d      	cmp	r5, r3
 8002f6c:	bf08      	it	eq
 8002f6e:	68f5      	ldreq	r5, [r6, #12]
 8002f70:	e7da      	b.n	8002f28 <_vfiprintf_r+0x20>
 8002f72:	89ab      	ldrh	r3, [r5, #12]
 8002f74:	0598      	lsls	r0, r3, #22
 8002f76:	d4ed      	bmi.n	8002f54 <_vfiprintf_r+0x4c>
 8002f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f7a:	f7ff ff2a 	bl	8002dd2 <__retarget_lock_release_recursive>
 8002f7e:	e7e9      	b.n	8002f54 <_vfiprintf_r+0x4c>
 8002f80:	2300      	movs	r3, #0
 8002f82:	9309      	str	r3, [sp, #36]	; 0x24
 8002f84:	2320      	movs	r3, #32
 8002f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f8e:	2330      	movs	r3, #48	; 0x30
 8002f90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003154 <_vfiprintf_r+0x24c>
 8002f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f98:	f04f 0901 	mov.w	r9, #1
 8002f9c:	4623      	mov	r3, r4
 8002f9e:	469a      	mov	sl, r3
 8002fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fa4:	b10a      	cbz	r2, 8002faa <_vfiprintf_r+0xa2>
 8002fa6:	2a25      	cmp	r2, #37	; 0x25
 8002fa8:	d1f9      	bne.n	8002f9e <_vfiprintf_r+0x96>
 8002faa:	ebba 0b04 	subs.w	fp, sl, r4
 8002fae:	d00b      	beq.n	8002fc8 <_vfiprintf_r+0xc0>
 8002fb0:	465b      	mov	r3, fp
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f7ff ff93 	bl	8002ee2 <__sfputs_r>
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	f000 80aa 	beq.w	8003116 <_vfiprintf_r+0x20e>
 8002fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc4:	445a      	add	r2, fp
 8002fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a2 	beq.w	8003116 <_vfiprintf_r+0x20e>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fdc:	f10a 0a01 	add.w	sl, sl, #1
 8002fe0:	9304      	str	r3, [sp, #16]
 8002fe2:	9307      	str	r3, [sp, #28]
 8002fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8002fea:	4654      	mov	r4, sl
 8002fec:	2205      	movs	r2, #5
 8002fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff2:	4858      	ldr	r0, [pc, #352]	; (8003154 <_vfiprintf_r+0x24c>)
 8002ff4:	f7fd f8fc 	bl	80001f0 <memchr>
 8002ff8:	9a04      	ldr	r2, [sp, #16]
 8002ffa:	b9d8      	cbnz	r0, 8003034 <_vfiprintf_r+0x12c>
 8002ffc:	06d1      	lsls	r1, r2, #27
 8002ffe:	bf44      	itt	mi
 8003000:	2320      	movmi	r3, #32
 8003002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003006:	0713      	lsls	r3, r2, #28
 8003008:	bf44      	itt	mi
 800300a:	232b      	movmi	r3, #43	; 0x2b
 800300c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003010:	f89a 3000 	ldrb.w	r3, [sl]
 8003014:	2b2a      	cmp	r3, #42	; 0x2a
 8003016:	d015      	beq.n	8003044 <_vfiprintf_r+0x13c>
 8003018:	9a07      	ldr	r2, [sp, #28]
 800301a:	4654      	mov	r4, sl
 800301c:	2000      	movs	r0, #0
 800301e:	f04f 0c0a 	mov.w	ip, #10
 8003022:	4621      	mov	r1, r4
 8003024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003028:	3b30      	subs	r3, #48	; 0x30
 800302a:	2b09      	cmp	r3, #9
 800302c:	d94e      	bls.n	80030cc <_vfiprintf_r+0x1c4>
 800302e:	b1b0      	cbz	r0, 800305e <_vfiprintf_r+0x156>
 8003030:	9207      	str	r2, [sp, #28]
 8003032:	e014      	b.n	800305e <_vfiprintf_r+0x156>
 8003034:	eba0 0308 	sub.w	r3, r0, r8
 8003038:	fa09 f303 	lsl.w	r3, r9, r3
 800303c:	4313      	orrs	r3, r2
 800303e:	9304      	str	r3, [sp, #16]
 8003040:	46a2      	mov	sl, r4
 8003042:	e7d2      	b.n	8002fea <_vfiprintf_r+0xe2>
 8003044:	9b03      	ldr	r3, [sp, #12]
 8003046:	1d19      	adds	r1, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	9103      	str	r1, [sp, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	bfbb      	ittet	lt
 8003050:	425b      	neglt	r3, r3
 8003052:	f042 0202 	orrlt.w	r2, r2, #2
 8003056:	9307      	strge	r3, [sp, #28]
 8003058:	9307      	strlt	r3, [sp, #28]
 800305a:	bfb8      	it	lt
 800305c:	9204      	strlt	r2, [sp, #16]
 800305e:	7823      	ldrb	r3, [r4, #0]
 8003060:	2b2e      	cmp	r3, #46	; 0x2e
 8003062:	d10c      	bne.n	800307e <_vfiprintf_r+0x176>
 8003064:	7863      	ldrb	r3, [r4, #1]
 8003066:	2b2a      	cmp	r3, #42	; 0x2a
 8003068:	d135      	bne.n	80030d6 <_vfiprintf_r+0x1ce>
 800306a:	9b03      	ldr	r3, [sp, #12]
 800306c:	1d1a      	adds	r2, r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	9203      	str	r2, [sp, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	bfb8      	it	lt
 8003076:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800307a:	3402      	adds	r4, #2
 800307c:	9305      	str	r3, [sp, #20]
 800307e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003158 <_vfiprintf_r+0x250>
 8003082:	7821      	ldrb	r1, [r4, #0]
 8003084:	2203      	movs	r2, #3
 8003086:	4650      	mov	r0, sl
 8003088:	f7fd f8b2 	bl	80001f0 <memchr>
 800308c:	b140      	cbz	r0, 80030a0 <_vfiprintf_r+0x198>
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	eba0 000a 	sub.w	r0, r0, sl
 8003094:	fa03 f000 	lsl.w	r0, r3, r0
 8003098:	9b04      	ldr	r3, [sp, #16]
 800309a:	4303      	orrs	r3, r0
 800309c:	3401      	adds	r4, #1
 800309e:	9304      	str	r3, [sp, #16]
 80030a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a4:	482d      	ldr	r0, [pc, #180]	; (800315c <_vfiprintf_r+0x254>)
 80030a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030aa:	2206      	movs	r2, #6
 80030ac:	f7fd f8a0 	bl	80001f0 <memchr>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d03f      	beq.n	8003134 <_vfiprintf_r+0x22c>
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <_vfiprintf_r+0x258>)
 80030b6:	bb1b      	cbnz	r3, 8003100 <_vfiprintf_r+0x1f8>
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	3307      	adds	r3, #7
 80030bc:	f023 0307 	bic.w	r3, r3, #7
 80030c0:	3308      	adds	r3, #8
 80030c2:	9303      	str	r3, [sp, #12]
 80030c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c6:	443b      	add	r3, r7
 80030c8:	9309      	str	r3, [sp, #36]	; 0x24
 80030ca:	e767      	b.n	8002f9c <_vfiprintf_r+0x94>
 80030cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80030d0:	460c      	mov	r4, r1
 80030d2:	2001      	movs	r0, #1
 80030d4:	e7a5      	b.n	8003022 <_vfiprintf_r+0x11a>
 80030d6:	2300      	movs	r3, #0
 80030d8:	3401      	adds	r4, #1
 80030da:	9305      	str	r3, [sp, #20]
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 0c0a 	mov.w	ip, #10
 80030e2:	4620      	mov	r0, r4
 80030e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030e8:	3a30      	subs	r2, #48	; 0x30
 80030ea:	2a09      	cmp	r2, #9
 80030ec:	d903      	bls.n	80030f6 <_vfiprintf_r+0x1ee>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0c5      	beq.n	800307e <_vfiprintf_r+0x176>
 80030f2:	9105      	str	r1, [sp, #20]
 80030f4:	e7c3      	b.n	800307e <_vfiprintf_r+0x176>
 80030f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80030fa:	4604      	mov	r4, r0
 80030fc:	2301      	movs	r3, #1
 80030fe:	e7f0      	b.n	80030e2 <_vfiprintf_r+0x1da>
 8003100:	ab03      	add	r3, sp, #12
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	462a      	mov	r2, r5
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <_vfiprintf_r+0x25c>)
 8003108:	a904      	add	r1, sp, #16
 800310a:	4630      	mov	r0, r6
 800310c:	f3af 8000 	nop.w
 8003110:	4607      	mov	r7, r0
 8003112:	1c78      	adds	r0, r7, #1
 8003114:	d1d6      	bne.n	80030c4 <_vfiprintf_r+0x1bc>
 8003116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003118:	07d9      	lsls	r1, r3, #31
 800311a:	d405      	bmi.n	8003128 <_vfiprintf_r+0x220>
 800311c:	89ab      	ldrh	r3, [r5, #12]
 800311e:	059a      	lsls	r2, r3, #22
 8003120:	d402      	bmi.n	8003128 <_vfiprintf_r+0x220>
 8003122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003124:	f7ff fe55 	bl	8002dd2 <__retarget_lock_release_recursive>
 8003128:	89ab      	ldrh	r3, [r5, #12]
 800312a:	065b      	lsls	r3, r3, #25
 800312c:	f53f af12 	bmi.w	8002f54 <_vfiprintf_r+0x4c>
 8003130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003132:	e711      	b.n	8002f58 <_vfiprintf_r+0x50>
 8003134:	ab03      	add	r3, sp, #12
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	462a      	mov	r2, r5
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <_vfiprintf_r+0x25c>)
 800313c:	a904      	add	r1, sp, #16
 800313e:	4630      	mov	r0, r6
 8003140:	f000 f880 	bl	8003244 <_printf_i>
 8003144:	e7e4      	b.n	8003110 <_vfiprintf_r+0x208>
 8003146:	bf00      	nop
 8003148:	080036e4 	.word	0x080036e4
 800314c:	08003704 	.word	0x08003704
 8003150:	080036c4 	.word	0x080036c4
 8003154:	08003724 	.word	0x08003724
 8003158:	0800372a 	.word	0x0800372a
 800315c:	0800372e 	.word	0x0800372e
 8003160:	00000000 	.word	0x00000000
 8003164:	08002ee3 	.word	0x08002ee3

08003168 <_printf_common>:
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	4616      	mov	r6, r2
 800316e:	4699      	mov	r9, r3
 8003170:	688a      	ldr	r2, [r1, #8]
 8003172:	690b      	ldr	r3, [r1, #16]
 8003174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003178:	4293      	cmp	r3, r2
 800317a:	bfb8      	it	lt
 800317c:	4613      	movlt	r3, r2
 800317e:	6033      	str	r3, [r6, #0]
 8003180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003184:	4607      	mov	r7, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b10a      	cbz	r2, 800318e <_printf_common+0x26>
 800318a:	3301      	adds	r3, #1
 800318c:	6033      	str	r3, [r6, #0]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	0699      	lsls	r1, r3, #26
 8003192:	bf42      	ittt	mi
 8003194:	6833      	ldrmi	r3, [r6, #0]
 8003196:	3302      	addmi	r3, #2
 8003198:	6033      	strmi	r3, [r6, #0]
 800319a:	6825      	ldr	r5, [r4, #0]
 800319c:	f015 0506 	ands.w	r5, r5, #6
 80031a0:	d106      	bne.n	80031b0 <_printf_common+0x48>
 80031a2:	f104 0a19 	add.w	sl, r4, #25
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	6832      	ldr	r2, [r6, #0]
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	dc26      	bgt.n	80031fe <_printf_common+0x96>
 80031b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031b4:	1e13      	subs	r3, r2, #0
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	bf18      	it	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	0692      	lsls	r2, r2, #26
 80031be:	d42b      	bmi.n	8003218 <_printf_common+0xb0>
 80031c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031c4:	4649      	mov	r1, r9
 80031c6:	4638      	mov	r0, r7
 80031c8:	47c0      	blx	r8
 80031ca:	3001      	adds	r0, #1
 80031cc:	d01e      	beq.n	800320c <_printf_common+0xa4>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	68e5      	ldr	r5, [r4, #12]
 80031d2:	6832      	ldr	r2, [r6, #0]
 80031d4:	f003 0306 	and.w	r3, r3, #6
 80031d8:	2b04      	cmp	r3, #4
 80031da:	bf08      	it	eq
 80031dc:	1aad      	subeq	r5, r5, r2
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	6922      	ldr	r2, [r4, #16]
 80031e2:	bf0c      	ite	eq
 80031e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031e8:	2500      	movne	r5, #0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	bfc4      	itt	gt
 80031ee:	1a9b      	subgt	r3, r3, r2
 80031f0:	18ed      	addgt	r5, r5, r3
 80031f2:	2600      	movs	r6, #0
 80031f4:	341a      	adds	r4, #26
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	d11a      	bne.n	8003230 <_printf_common+0xc8>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e008      	b.n	8003210 <_printf_common+0xa8>
 80031fe:	2301      	movs	r3, #1
 8003200:	4652      	mov	r2, sl
 8003202:	4649      	mov	r1, r9
 8003204:	4638      	mov	r0, r7
 8003206:	47c0      	blx	r8
 8003208:	3001      	adds	r0, #1
 800320a:	d103      	bne.n	8003214 <_printf_common+0xac>
 800320c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	3501      	adds	r5, #1
 8003216:	e7c6      	b.n	80031a6 <_printf_common+0x3e>
 8003218:	18e1      	adds	r1, r4, r3
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	2030      	movs	r0, #48	; 0x30
 800321e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003222:	4422      	add	r2, r4
 8003224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800322c:	3302      	adds	r3, #2
 800322e:	e7c7      	b.n	80031c0 <_printf_common+0x58>
 8003230:	2301      	movs	r3, #1
 8003232:	4622      	mov	r2, r4
 8003234:	4649      	mov	r1, r9
 8003236:	4638      	mov	r0, r7
 8003238:	47c0      	blx	r8
 800323a:	3001      	adds	r0, #1
 800323c:	d0e6      	beq.n	800320c <_printf_common+0xa4>
 800323e:	3601      	adds	r6, #1
 8003240:	e7d9      	b.n	80031f6 <_printf_common+0x8e>
	...

08003244 <_printf_i>:
 8003244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003248:	7e0f      	ldrb	r7, [r1, #24]
 800324a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800324c:	2f78      	cmp	r7, #120	; 0x78
 800324e:	4691      	mov	r9, r2
 8003250:	4680      	mov	r8, r0
 8003252:	460c      	mov	r4, r1
 8003254:	469a      	mov	sl, r3
 8003256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800325a:	d807      	bhi.n	800326c <_printf_i+0x28>
 800325c:	2f62      	cmp	r7, #98	; 0x62
 800325e:	d80a      	bhi.n	8003276 <_printf_i+0x32>
 8003260:	2f00      	cmp	r7, #0
 8003262:	f000 80d8 	beq.w	8003416 <_printf_i+0x1d2>
 8003266:	2f58      	cmp	r7, #88	; 0x58
 8003268:	f000 80a3 	beq.w	80033b2 <_printf_i+0x16e>
 800326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003274:	e03a      	b.n	80032ec <_printf_i+0xa8>
 8003276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800327a:	2b15      	cmp	r3, #21
 800327c:	d8f6      	bhi.n	800326c <_printf_i+0x28>
 800327e:	a101      	add	r1, pc, #4	; (adr r1, 8003284 <_printf_i+0x40>)
 8003280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003284:	080032dd 	.word	0x080032dd
 8003288:	080032f1 	.word	0x080032f1
 800328c:	0800326d 	.word	0x0800326d
 8003290:	0800326d 	.word	0x0800326d
 8003294:	0800326d 	.word	0x0800326d
 8003298:	0800326d 	.word	0x0800326d
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	0800326d 	.word	0x0800326d
 80032a4:	0800326d 	.word	0x0800326d
 80032a8:	0800326d 	.word	0x0800326d
 80032ac:	0800326d 	.word	0x0800326d
 80032b0:	080033fd 	.word	0x080033fd
 80032b4:	08003321 	.word	0x08003321
 80032b8:	080033df 	.word	0x080033df
 80032bc:	0800326d 	.word	0x0800326d
 80032c0:	0800326d 	.word	0x0800326d
 80032c4:	0800341f 	.word	0x0800341f
 80032c8:	0800326d 	.word	0x0800326d
 80032cc:	08003321 	.word	0x08003321
 80032d0:	0800326d 	.word	0x0800326d
 80032d4:	0800326d 	.word	0x0800326d
 80032d8:	080033e7 	.word	0x080033e7
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	602a      	str	r2, [r5, #0]
 80032e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0a3      	b.n	8003438 <_printf_i+0x1f4>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	6829      	ldr	r1, [r5, #0]
 80032f4:	0606      	lsls	r6, r0, #24
 80032f6:	f101 0304 	add.w	r3, r1, #4
 80032fa:	d50a      	bpl.n	8003312 <_printf_i+0xce>
 80032fc:	680e      	ldr	r6, [r1, #0]
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	2e00      	cmp	r6, #0
 8003302:	da03      	bge.n	800330c <_printf_i+0xc8>
 8003304:	232d      	movs	r3, #45	; 0x2d
 8003306:	4276      	negs	r6, r6
 8003308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800330c:	485e      	ldr	r0, [pc, #376]	; (8003488 <_printf_i+0x244>)
 800330e:	230a      	movs	r3, #10
 8003310:	e019      	b.n	8003346 <_printf_i+0x102>
 8003312:	680e      	ldr	r6, [r1, #0]
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800331a:	bf18      	it	ne
 800331c:	b236      	sxthne	r6, r6
 800331e:	e7ef      	b.n	8003300 <_printf_i+0xbc>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1d19      	adds	r1, r3, #4
 8003326:	6029      	str	r1, [r5, #0]
 8003328:	0601      	lsls	r1, r0, #24
 800332a:	d501      	bpl.n	8003330 <_printf_i+0xec>
 800332c:	681e      	ldr	r6, [r3, #0]
 800332e:	e002      	b.n	8003336 <_printf_i+0xf2>
 8003330:	0646      	lsls	r6, r0, #25
 8003332:	d5fb      	bpl.n	800332c <_printf_i+0xe8>
 8003334:	881e      	ldrh	r6, [r3, #0]
 8003336:	4854      	ldr	r0, [pc, #336]	; (8003488 <_printf_i+0x244>)
 8003338:	2f6f      	cmp	r7, #111	; 0x6f
 800333a:	bf0c      	ite	eq
 800333c:	2308      	moveq	r3, #8
 800333e:	230a      	movne	r3, #10
 8003340:	2100      	movs	r1, #0
 8003342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003346:	6865      	ldr	r5, [r4, #4]
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	2d00      	cmp	r5, #0
 800334c:	bfa2      	ittt	ge
 800334e:	6821      	ldrge	r1, [r4, #0]
 8003350:	f021 0104 	bicge.w	r1, r1, #4
 8003354:	6021      	strge	r1, [r4, #0]
 8003356:	b90e      	cbnz	r6, 800335c <_printf_i+0x118>
 8003358:	2d00      	cmp	r5, #0
 800335a:	d04d      	beq.n	80033f8 <_printf_i+0x1b4>
 800335c:	4615      	mov	r5, r2
 800335e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003362:	fb03 6711 	mls	r7, r3, r1, r6
 8003366:	5dc7      	ldrb	r7, [r0, r7]
 8003368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800336c:	4637      	mov	r7, r6
 800336e:	42bb      	cmp	r3, r7
 8003370:	460e      	mov	r6, r1
 8003372:	d9f4      	bls.n	800335e <_printf_i+0x11a>
 8003374:	2b08      	cmp	r3, #8
 8003376:	d10b      	bne.n	8003390 <_printf_i+0x14c>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	07de      	lsls	r6, r3, #31
 800337c:	d508      	bpl.n	8003390 <_printf_i+0x14c>
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	6861      	ldr	r1, [r4, #4]
 8003382:	4299      	cmp	r1, r3
 8003384:	bfde      	ittt	le
 8003386:	2330      	movle	r3, #48	; 0x30
 8003388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800338c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003390:	1b52      	subs	r2, r2, r5
 8003392:	6122      	str	r2, [r4, #16]
 8003394:	f8cd a000 	str.w	sl, [sp]
 8003398:	464b      	mov	r3, r9
 800339a:	aa03      	add	r2, sp, #12
 800339c:	4621      	mov	r1, r4
 800339e:	4640      	mov	r0, r8
 80033a0:	f7ff fee2 	bl	8003168 <_printf_common>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d14c      	bne.n	8003442 <_printf_i+0x1fe>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ac:	b004      	add	sp, #16
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	4835      	ldr	r0, [pc, #212]	; (8003488 <_printf_i+0x244>)
 80033b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033b8:	6829      	ldr	r1, [r5, #0]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80033c0:	6029      	str	r1, [r5, #0]
 80033c2:	061d      	lsls	r5, r3, #24
 80033c4:	d514      	bpl.n	80033f0 <_printf_i+0x1ac>
 80033c6:	07df      	lsls	r7, r3, #31
 80033c8:	bf44      	itt	mi
 80033ca:	f043 0320 	orrmi.w	r3, r3, #32
 80033ce:	6023      	strmi	r3, [r4, #0]
 80033d0:	b91e      	cbnz	r6, 80033da <_printf_i+0x196>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f023 0320 	bic.w	r3, r3, #32
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	2310      	movs	r3, #16
 80033dc:	e7b0      	b.n	8003340 <_printf_i+0xfc>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f043 0320 	orr.w	r3, r3, #32
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	2378      	movs	r3, #120	; 0x78
 80033e8:	4828      	ldr	r0, [pc, #160]	; (800348c <_printf_i+0x248>)
 80033ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ee:	e7e3      	b.n	80033b8 <_printf_i+0x174>
 80033f0:	0659      	lsls	r1, r3, #25
 80033f2:	bf48      	it	mi
 80033f4:	b2b6      	uxthmi	r6, r6
 80033f6:	e7e6      	b.n	80033c6 <_printf_i+0x182>
 80033f8:	4615      	mov	r5, r2
 80033fa:	e7bb      	b.n	8003374 <_printf_i+0x130>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	6826      	ldr	r6, [r4, #0]
 8003400:	6961      	ldr	r1, [r4, #20]
 8003402:	1d18      	adds	r0, r3, #4
 8003404:	6028      	str	r0, [r5, #0]
 8003406:	0635      	lsls	r5, r6, #24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	d501      	bpl.n	8003410 <_printf_i+0x1cc>
 800340c:	6019      	str	r1, [r3, #0]
 800340e:	e002      	b.n	8003416 <_printf_i+0x1d2>
 8003410:	0670      	lsls	r0, r6, #25
 8003412:	d5fb      	bpl.n	800340c <_printf_i+0x1c8>
 8003414:	8019      	strh	r1, [r3, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	4615      	mov	r5, r2
 800341c:	e7ba      	b.n	8003394 <_printf_i+0x150>
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	1d1a      	adds	r2, r3, #4
 8003422:	602a      	str	r2, [r5, #0]
 8003424:	681d      	ldr	r5, [r3, #0]
 8003426:	6862      	ldr	r2, [r4, #4]
 8003428:	2100      	movs	r1, #0
 800342a:	4628      	mov	r0, r5
 800342c:	f7fc fee0 	bl	80001f0 <memchr>
 8003430:	b108      	cbz	r0, 8003436 <_printf_i+0x1f2>
 8003432:	1b40      	subs	r0, r0, r5
 8003434:	6060      	str	r0, [r4, #4]
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	6123      	str	r3, [r4, #16]
 800343a:	2300      	movs	r3, #0
 800343c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003440:	e7a8      	b.n	8003394 <_printf_i+0x150>
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	462a      	mov	r2, r5
 8003446:	4649      	mov	r1, r9
 8003448:	4640      	mov	r0, r8
 800344a:	47d0      	blx	sl
 800344c:	3001      	adds	r0, #1
 800344e:	d0ab      	beq.n	80033a8 <_printf_i+0x164>
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	079b      	lsls	r3, r3, #30
 8003454:	d413      	bmi.n	800347e <_printf_i+0x23a>
 8003456:	68e0      	ldr	r0, [r4, #12]
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	4298      	cmp	r0, r3
 800345c:	bfb8      	it	lt
 800345e:	4618      	movlt	r0, r3
 8003460:	e7a4      	b.n	80033ac <_printf_i+0x168>
 8003462:	2301      	movs	r3, #1
 8003464:	4632      	mov	r2, r6
 8003466:	4649      	mov	r1, r9
 8003468:	4640      	mov	r0, r8
 800346a:	47d0      	blx	sl
 800346c:	3001      	adds	r0, #1
 800346e:	d09b      	beq.n	80033a8 <_printf_i+0x164>
 8003470:	3501      	adds	r5, #1
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	9903      	ldr	r1, [sp, #12]
 8003476:	1a5b      	subs	r3, r3, r1
 8003478:	42ab      	cmp	r3, r5
 800347a:	dcf2      	bgt.n	8003462 <_printf_i+0x21e>
 800347c:	e7eb      	b.n	8003456 <_printf_i+0x212>
 800347e:	2500      	movs	r5, #0
 8003480:	f104 0619 	add.w	r6, r4, #25
 8003484:	e7f5      	b.n	8003472 <_printf_i+0x22e>
 8003486:	bf00      	nop
 8003488:	08003735 	.word	0x08003735
 800348c:	08003746 	.word	0x08003746

08003490 <__sread>:
 8003490:	b510      	push	{r4, lr}
 8003492:	460c      	mov	r4, r1
 8003494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003498:	f000 f894 	bl	80035c4 <_read_r>
 800349c:	2800      	cmp	r0, #0
 800349e:	bfab      	itete	ge
 80034a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034a2:	89a3      	ldrhlt	r3, [r4, #12]
 80034a4:	181b      	addge	r3, r3, r0
 80034a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034aa:	bfac      	ite	ge
 80034ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ae:	81a3      	strhlt	r3, [r4, #12]
 80034b0:	bd10      	pop	{r4, pc}

080034b2 <__swrite>:
 80034b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b6:	461f      	mov	r7, r3
 80034b8:	898b      	ldrh	r3, [r1, #12]
 80034ba:	05db      	lsls	r3, r3, #23
 80034bc:	4605      	mov	r5, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	4616      	mov	r6, r2
 80034c2:	d505      	bpl.n	80034d0 <__swrite+0x1e>
 80034c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c8:	2302      	movs	r3, #2
 80034ca:	2200      	movs	r2, #0
 80034cc:	f000 f868 	bl	80035a0 <_lseek_r>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034da:	81a3      	strh	r3, [r4, #12]
 80034dc:	4632      	mov	r2, r6
 80034de:	463b      	mov	r3, r7
 80034e0:	4628      	mov	r0, r5
 80034e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e6:	f000 b817 	b.w	8003518 <_write_r>

080034ea <__sseek>:
 80034ea:	b510      	push	{r4, lr}
 80034ec:	460c      	mov	r4, r1
 80034ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f2:	f000 f855 	bl	80035a0 <_lseek_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	bf15      	itete	ne
 80034fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80034fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003506:	81a3      	strheq	r3, [r4, #12]
 8003508:	bf18      	it	ne
 800350a:	81a3      	strhne	r3, [r4, #12]
 800350c:	bd10      	pop	{r4, pc}

0800350e <__sclose>:
 800350e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003512:	f000 b813 	b.w	800353c <_close_r>
	...

08003518 <_write_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d07      	ldr	r5, [pc, #28]	; (8003538 <_write_r+0x20>)
 800351c:	4604      	mov	r4, r0
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	2200      	movs	r2, #0
 8003524:	602a      	str	r2, [r5, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f7fe ff23 	bl	8002372 <_write>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <_write_r+0x1e>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	b103      	cbz	r3, 8003536 <_write_r+0x1e>
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	200000e0 	.word	0x200000e0

0800353c <_close_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4d06      	ldr	r5, [pc, #24]	; (8003558 <_close_r+0x1c>)
 8003540:	2300      	movs	r3, #0
 8003542:	4604      	mov	r4, r0
 8003544:	4608      	mov	r0, r1
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	f7fe ff2f 	bl	80023aa <_close>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d102      	bne.n	8003556 <_close_r+0x1a>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	b103      	cbz	r3, 8003556 <_close_r+0x1a>
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	200000e0 	.word	0x200000e0

0800355c <_fstat_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4d07      	ldr	r5, [pc, #28]	; (800357c <_fstat_r+0x20>)
 8003560:	2300      	movs	r3, #0
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	f7fe ff29 	bl	80023c0 <_fstat>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d102      	bne.n	8003578 <_fstat_r+0x1c>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	b103      	cbz	r3, 8003578 <_fstat_r+0x1c>
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	bd38      	pop	{r3, r4, r5, pc}
 800357a:	bf00      	nop
 800357c:	200000e0 	.word	0x200000e0

08003580 <_isatty_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d06      	ldr	r5, [pc, #24]	; (800359c <_isatty_r+0x1c>)
 8003584:	2300      	movs	r3, #0
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	f7fe ff27 	bl	80023de <_isatty>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_isatty_r+0x1a>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_isatty_r+0x1a>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	200000e0 	.word	0x200000e0

080035a0 <_lseek_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4d07      	ldr	r5, [pc, #28]	; (80035c0 <_lseek_r+0x20>)
 80035a4:	4604      	mov	r4, r0
 80035a6:	4608      	mov	r0, r1
 80035a8:	4611      	mov	r1, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	602a      	str	r2, [r5, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f7fe ff1f 	bl	80023f2 <_lseek>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_lseek_r+0x1e>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_lseek_r+0x1e>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	200000e0 	.word	0x200000e0

080035c4 <_read_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d07      	ldr	r5, [pc, #28]	; (80035e4 <_read_r+0x20>)
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7fe feb0 	bl	8002338 <_read>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_read_r+0x1e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_read_r+0x1e>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	200000e0 	.word	0x200000e0

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
