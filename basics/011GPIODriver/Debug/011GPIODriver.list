
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ac  080028ac  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080028ac  080028ac  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ac  080028ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080028b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000078  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a79  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b2a  00000000  00000000  00022b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00023640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000320  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000498c  00000000  00000000  00023d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004de1  00000000  00000000  000286b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cb55  00000000  00000000  0002d495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00039fea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001664  00000000  00000000  0003a03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080027c0 	.word	0x080027c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080027c0 	.word	0x080027c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <eeprom_at24cxx_read_sequential>:
	I2CMasterReceiveData(I2C_DEVICE,buffer,1,SlaveAddress);
	return;
}

void eeprom_at24cxx_read_sequential(uint16_t eeprom_address,uint8_t *buffer,uint16_t length)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	4603      	mov	r3, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	80fb      	strh	r3, [r7, #6]
 80002ac:	4613      	mov	r3, r2
 80002ae:	80bb      	strh	r3, [r7, #4]
	I2CMaster_AT24Cxx_EEPROM_Read_Sequential(I2C_DEVICE,buffer,length,eeprom_address,SlaveAddress);
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <eeprom_at24cxx_read_sequential+0x30>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	88ba      	ldrh	r2, [r7, #4]
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <eeprom_at24cxx_read_sequential+0x34>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	88f9      	ldrh	r1, [r7, #6]
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	460b      	mov	r3, r1
 80002c0:	6839      	ldr	r1, [r7, #0]
 80002c2:	f000 fcf4 	bl	8000cae <I2CMaster_AT24Cxx_EEPROM_Read_Sequential>
	return;
 80002c6:	bf00      	nop
}
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000004 	.word	0x20000004

080002d8 <configure_delay_timer>:
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
}

void configure_delay_timer(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <configure_delay_timer+0x3c>)
 80002de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e2:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002e4:	2228      	movs	r2, #40	; 0x28
 80002e6:	2100      	movs	r1, #0
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <configure_delay_timer+0x40>)
 80002ea:	f001 fa09 	bl	8001700 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <configure_delay_timer+0x3c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <configure_delay_timer+0x3c>)
 80002f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002fa:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000300:	f000 fd96 	bl	8000e30 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <configure_delay_timer+0x3c>)
 8000306:	f000 f8e1 	bl	80004cc <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <configure_delay_timer+0x3c>)
 800030c:	f000 fb06 	bl	800091c <General_Purpose_Timer_PeripheralEnable>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000088 	.word	0x20000088
 8000318:	2000008c 	.word	0x2000008c

0800031c <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_uart+0xb0>)
 8000322:	f000 fd85 	bl	8000e30 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2105      	movs	r1, #5
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_uart+0xb0>)
 800032c:	f000 fb07 	bl	800093e <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000330:	2202      	movs	r2, #2
 8000332:	2106      	movs	r1, #6
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_uart+0xb0>)
 8000336:	f000 fb02 	bl	800093e <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 800033a:	2207      	movs	r2, #7
 800033c:	2105      	movs	r1, #5
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_uart+0xb0>)
 8000340:	f000 fb21 	bl	8000986 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000344:	2207      	movs	r2, #7
 8000346:	2106      	movs	r1, #6
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_uart+0xb0>)
 800034a:	f000 fb1c 	bl	8000986 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800034e:	2200      	movs	r2, #0
 8000350:	2105      	movs	r1, #5
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_uart+0xb0>)
 8000354:	f000 fb50 	bl	80009f8 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000358:	2200      	movs	r2, #0
 800035a:	2106      	movs	r1, #6
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_uart+0xb0>)
 800035e:	f000 fb4b 	bl	80009f8 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2105      	movs	r1, #5
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_uart+0xb0>)
 8000368:	f000 fb8c 	bl	8000a84 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 800036c:	2202      	movs	r2, #2
 800036e:	2106      	movs	r1, #6
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_uart+0xb0>)
 8000372:	f000 fb87 	bl	8000a84 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2105      	movs	r1, #5
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_uart+0xb0>)
 800037c:	f000 fb5e 	bl	8000a3c <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 8000380:	2201      	movs	r2, #1
 8000382:	2106      	movs	r1, #6
 8000384:	4811      	ldr	r0, [pc, #68]	; (80003cc <configure_uart+0xb0>)
 8000386:	f000 fb59 	bl	8000a3c <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <configure_uart+0xb4>)
 800038c:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <configure_uart+0xb8>)
 800038e:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <configure_uart+0xb4>)
 8000392:	2202      	movs	r2, #2
 8000394:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_uart+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_uart+0xb4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <configure_uart+0xb4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <configure_uart+0xb4>)
 80003aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003ae:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <configure_uart+0xb4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 80003b6:	4807      	ldr	r0, [pc, #28]	; (80003d4 <configure_uart+0xb8>)
 80003b8:	f000 fd3a 	bl	8000e30 <EnablePeriClk>
	USART_Init(&Test_USART);
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <configure_uart+0xb4>)
 80003be:	f000 fefb 	bl	80011b8 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <configure_uart+0xb4>)
 80003c4:	f000 fff8 	bl	80013b8 <USART_PeripheralEnable>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40020c00 	.word	0x40020c00
 80003d0:	200000b4 	.word	0x200000b4
 80003d4:	40004400 	.word	0x40004400

080003d8 <configure_i2c>:

void configure_i2c(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003de:	463b      	mov	r3, r7
 80003e0:	2218      	movs	r2, #24
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f98b 	bl	8001700 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 80003ea:	482d      	ldr	r0, [pc, #180]	; (80004a0 <configure_i2c+0xc8>)
 80003ec:	f000 fd20 	bl	8000e30 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 80003f0:	2202      	movs	r2, #2
 80003f2:	2107      	movs	r1, #7
 80003f4:	482a      	ldr	r0, [pc, #168]	; (80004a0 <configure_i2c+0xc8>)
 80003f6:	f000 faa2 	bl	800093e <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 80003fa:	2202      	movs	r2, #2
 80003fc:	2106      	movs	r1, #6
 80003fe:	4828      	ldr	r0, [pc, #160]	; (80004a0 <configure_i2c+0xc8>)
 8000400:	f000 fa9d 	bl	800093e <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000404:	2204      	movs	r2, #4
 8000406:	2107      	movs	r1, #7
 8000408:	4825      	ldr	r0, [pc, #148]	; (80004a0 <configure_i2c+0xc8>)
 800040a:	f000 fabc 	bl	8000986 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800040e:	2204      	movs	r2, #4
 8000410:	2106      	movs	r1, #6
 8000412:	4823      	ldr	r0, [pc, #140]	; (80004a0 <configure_i2c+0xc8>)
 8000414:	f000 fab7 	bl	8000986 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000418:	2201      	movs	r2, #1
 800041a:	2107      	movs	r1, #7
 800041c:	4820      	ldr	r0, [pc, #128]	; (80004a0 <configure_i2c+0xc8>)
 800041e:	f000 faeb 	bl	80009f8 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 8000422:	2201      	movs	r2, #1
 8000424:	2106      	movs	r1, #6
 8000426:	481e      	ldr	r0, [pc, #120]	; (80004a0 <configure_i2c+0xc8>)
 8000428:	f000 fae6 	bl	80009f8 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 800042c:	2202      	movs	r2, #2
 800042e:	2107      	movs	r1, #7
 8000430:	481b      	ldr	r0, [pc, #108]	; (80004a0 <configure_i2c+0xc8>)
 8000432:	f000 fb27 	bl	8000a84 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000436:	2202      	movs	r2, #2
 8000438:	2106      	movs	r1, #6
 800043a:	4819      	ldr	r0, [pc, #100]	; (80004a0 <configure_i2c+0xc8>)
 800043c:	f000 fb22 	bl	8000a84 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 8000440:	2201      	movs	r2, #1
 8000442:	2107      	movs	r1, #7
 8000444:	4816      	ldr	r0, [pc, #88]	; (80004a0 <configure_i2c+0xc8>)
 8000446:	f000 faf9 	bl	8000a3c <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 800044a:	2201      	movs	r2, #1
 800044c:	2106      	movs	r1, #6
 800044e:	4814      	ldr	r0, [pc, #80]	; (80004a0 <configure_i2c+0xc8>)
 8000450:	f000 faf4 	bl	8000a3c <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000454:	2310      	movs	r3, #16
 8000456:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 8000460:	2350      	movs	r3, #80	; 0x50
 8000462:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000464:	2301      	movs	r3, #1
 8000466:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <configure_i2c+0xcc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fcdf 	bl	8000e30 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <configure_i2c+0xcc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	463a      	mov	r2, r7
 8000478:	4611      	mov	r1, r2
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fb26 	bl	8000acc <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <configure_i2c+0xcc>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2111      	movs	r1, #17
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fbdf 	bl	8000c4a <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <configure_i2c+0xcc>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb71 	bl	8000b78 <I2CEnable>

	return;
 8000496:	bf00      	nop
}
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40020400 	.word	0x40020400
 80004a4:	20000000 	.word	0x20000000

080004a8 <UART_SendChar>:

void UART_SendChar(uint8_t ch)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <UART_SendChar+0x20>)
 80004ba:	f000 ffa3 	bl	8001404 <USART_SendData>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000b4 	.word	0x200000b4

080004cc <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	6852      	ldr	r2, [r2, #4]
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	6892      	ldr	r2, [r2, #8]
 80004e6:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7b1b      	ldrb	r3, [r3, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d16a      	bne.n	80005c6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6a1a      	ldr	r2, [r3, #32]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f042 0201 	orr.w	r2, r2, #1
 80004fe:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7b5b      	ldrb	r3, [r3, #13]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d11c      	bne.n	8000542 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f022 0203 	bic.w	r2, r2, #3
 8000516:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	6912      	ldr	r2, [r2, #16]
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000530:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	699a      	ldr	r2, [r3, #24]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000540:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7b5b      	ldrb	r3, [r3, #13]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d11c      	bne.n	8000584 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	699a      	ldr	r2, [r3, #24]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f022 0203 	bic.w	r2, r2, #3
 8000558:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	6912      	ldr	r2, [r2, #16]
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000572:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000582:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7b5b      	ldrb	r3, [r3, #13]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d11c      	bne.n	80005c6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f022 0203 	bic.w	r2, r2, #3
 800059a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	6912      	ldr	r2, [r2, #16]
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	699a      	ldr	r2, [r3, #24]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005b4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80005c4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7d1b      	ldrb	r3, [r3, #20]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f040 80bf 	bne.w	800074e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7d5b      	ldrb	r3, [r3, #21]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d124      	bne.n	8000622 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005e6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6992      	ldr	r2, [r2, #24]
 80005f0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000600:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	699a      	ldr	r2, [r3, #24]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000610:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6a1a      	ldr	r2, [r3, #32]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f042 0210 	orr.w	r2, r2, #16
 8000620:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7d5b      	ldrb	r3, [r3, #21]
 8000626:	2b03      	cmp	r3, #3
 8000628:	d124      	bne.n	8000674 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000638:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6992      	ldr	r2, [r2, #24]
 8000642:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	699a      	ldr	r2, [r3, #24]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000652:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	699a      	ldr	r2, [r3, #24]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000662:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f042 0210 	orr.w	r2, r2, #16
 8000672:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7d5b      	ldrb	r3, [r3, #21]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d124      	bne.n	80006c6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800068a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6992      	ldr	r2, [r2, #24]
 8000694:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006a4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80006b4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6a1a      	ldr	r2, [r3, #32]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f042 0210 	orr.w	r2, r2, #16
 80006c4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7d5b      	ldrb	r3, [r3, #21]
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	d13f      	bne.n	800074e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006dc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006ec:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80006fc:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a1a      	ldr	r2, [r3, #32]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f022 0220 	bic.w	r2, r2, #32
 800070c:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a1a      	ldr	r2, [r3, #32]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800071c:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800072c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f042 0204 	orr.w	r2, r2, #4
 800073c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a1a      	ldr	r2, [r3, #32]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f042 0210 	orr.w	r2, r2, #16
 800074c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7f1b      	ldrb	r3, [r3, #28]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d16a      	bne.n	800082c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6a1a      	ldr	r2, [r3, #32]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000764:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7f5b      	ldrb	r3, [r3, #29]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d11c      	bne.n	80007a8 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	69da      	ldr	r2, [r3, #28]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0203 	bic.w	r2, r2, #3
 800077c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	6a12      	ldr	r2, [r2, #32]
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000796:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	69da      	ldr	r2, [r3, #28]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80007a6:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7f5b      	ldrb	r3, [r3, #29]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d11c      	bne.n	80007ea <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	69da      	ldr	r2, [r3, #28]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0203 	bic.w	r2, r2, #3
 80007be:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	6a12      	ldr	r2, [r2, #32]
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007d8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80007e8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7f5b      	ldrb	r3, [r3, #29]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d11c      	bne.n	800082c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69da      	ldr	r2, [r3, #28]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f022 0203 	bic.w	r2, r2, #3
 8000800:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	6a12      	ldr	r2, [r2, #32]
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800081a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800082a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000832:	2b00      	cmp	r3, #0
 8000834:	d16d      	bne.n	8000912 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6a1a      	ldr	r2, [r3, #32]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000844:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800084c:	2b02      	cmp	r3, #2
 800084e:	d11c      	bne.n	800088a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800085e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000878:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000888:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000890:	2b03      	cmp	r3, #3
 8000892:	d11c      	bne.n	80008ce <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008a2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008bc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80008cc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d11c      	bne.n	8000912 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008e6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000900:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	69da      	ldr	r2, [r3, #28]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000910:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	460b      	mov	r3, r1
 8000948:	70fb      	strb	r3, [r7, #3]
 800094a:	4613      	mov	r3, r2
 800094c:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	2103      	movs	r1, #3
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	43d2      	mvns	r2, r2
 8000962:	401a      	ands	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	78b9      	ldrb	r1, [r7, #2]
 800096e:	78fa      	ldrb	r2, [r7, #3]
 8000970:	0052      	lsls	r2, r2, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	431a      	orrs	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	601a      	str	r2, [r3, #0]

}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	70fb      	strb	r3, [r7, #3]
 8000992:	4613      	mov	r3, r2
 8000994:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80009a8:	7afa      	ldrb	r2, [r7, #11]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3208      	adds	r2, #8
 80009ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b2:	7aba      	ldrb	r2, [r7, #10]
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	210f      	movs	r1, #15
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	43d2      	mvns	r2, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	7afa      	ldrb	r2, [r7, #11]
 80009c2:	4019      	ands	r1, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3208      	adds	r2, #8
 80009c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80009cc:	7afa      	ldrb	r2, [r7, #11]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d6:	78b9      	ldrb	r1, [r7, #2]
 80009d8:	7aba      	ldrb	r2, [r7, #10]
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4611      	mov	r1, r2
 80009e2:	7afa      	ldrb	r2, [r7, #11]
 80009e4:	4319      	orrs	r1, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3208      	adds	r2, #8
 80009ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	78b9      	ldrb	r1, [r7, #2]
 8000a26:	78fa      	ldrb	r2, [r7, #3]
 8000a28:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	605a      	str	r2, [r3, #4]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	2103      	movs	r1, #3
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	43d2      	mvns	r2, r2
 8000a60:	401a      	ands	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	78b9      	ldrb	r1, [r7, #2]
 8000a6c:	78fa      	ldrb	r2, [r7, #3]
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	fa01 f202 	lsl.w	r2, r1, r2
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	60da      	str	r2, [r3, #12]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	4613      	mov	r3, r2
 8000a92:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	78fa      	ldrb	r2, [r7, #3]
 8000a9e:	0052      	lsls	r2, r2, #1
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	78b9      	ldrb	r1, [r7, #2]
 8000ab4:	78fa      	ldrb	r2, [r7, #3]
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	431a      	orrs	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	609a      	str	r2, [r3, #8]
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	431a      	orrs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	69da      	ldr	r2, [r3, #28]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	03db      	lsls	r3, r3, #15
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10d      	bne.n	8000b34 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	039b      	lsls	r3, r3, #14
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b3c:	f023 030f 	bic.w	r3, r3, #15
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	69da      	ldr	r2, [r3, #28]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	601a      	str	r2, [r3, #0]

}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f043 0201 	orr.w	r2, r3, #1
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000c18:	78fa      	ldrb	r2, [r7, #3]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	621a      	str	r2, [r3, #32]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <I2CMaster_AT24Cxx_EEPROM_Read_Sequential>:

void I2CMaster_AT24Cxx_EEPROM_Read_Sequential(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint16_t eeprom_address, uint8_t SlaveAddress)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b088      	sub	sp, #32
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	807b      	strh	r3, [r7, #2]
	uint8_t address_length,i;
	uint8_t data[2];
	uint8_t LocalSlaveAddress;

	address_length = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	77fb      	strb	r3, [r7, #31]
	data[0] = (uint8_t) (eeprom_address >> 8);
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	753b      	strb	r3, [r7, #20]
	data[1] = (uint8_t) (eeprom_address & 0xFF);
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	757b      	strb	r3, [r7, #21]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff ff60 	bl	8000b9a <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000cda:	bf00      	nop
 8000cdc:	2101      	movs	r1, #1
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff ff7d 	bl	8000bde <I2C_GetFlagStatus>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f8      	beq.n	8000cdc <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x2e>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 8000cea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff ff82 	bl	8000c08 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000d04:	bf00      	nop
 8000d06:	2102      	movs	r1, #2
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ff68 	bl	8000bde <I2C_GetFlagStatus>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f8      	beq.n	8000d06 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x58>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f7ff ff87 	bl	8000c28 <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8000d1e:	e015      	b.n	8000d4c <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x9e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000d20:	bf00      	nop
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff ff5a 	bl	8000bde <I2C_GetFlagStatus>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0f8      	beq.n	8000d22 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x74>
		pI2C->I2C_DR = data[i];
 8000d30:	7fbb      	ldrb	r3, [r7, #30]
 8000d32:	3320      	adds	r3, #32
 8000d34:	443b      	add	r3, r7
 8000d36:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	611a      	str	r2, [r3, #16]
		i++;
 8000d40:	7fbb      	ldrb	r3, [r7, #30]
 8000d42:	3301      	adds	r3, #1
 8000d44:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8000d46:	7ffb      	ldrb	r3, [r7, #31]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 8000d4c:	7ffb      	ldrb	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1e6      	bne.n	8000d20 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x72>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000d52:	bf00      	nop
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff ff41 	bl	8000bde <I2C_GetFlagStatus>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1f8      	bne.n	8000d54 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xa6>
 8000d62:	2104      	movs	r1, #4
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ff3a 	bl	8000bde <I2C_GetFlagStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d1f1      	bne.n	8000d54 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xa6>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f7ff ff12 	bl	8000b9a <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000d76:	bf00      	nop
 8000d78:	2101      	movs	r1, #1
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ff2f 	bl	8000bde <I2C_GetFlagStatus>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f8      	beq.n	8000d78 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xca>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 8000d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff ff34 	bl	8000c08 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000da0:	bf00      	nop
 8000da2:	2102      	movs	r1, #2
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff ff1a 	bl	8000bde <I2C_GetFlagStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f8      	beq.n	8000da2 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0xf4>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f7ff ff39 	bl	8000c28 <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d919      	bls.n	8000df0 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x142>
	{
		I2CEnableAck(I2CAddress);
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f7ff ff54 	bl	8000c6a <I2CEnableAck>
		while(Len >= 2)
 8000dc2:	e012      	b.n	8000dea <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x13c>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8000dc4:	bf00      	nop
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f7ff ff08 	bl	8000bde <I2C_GetFlagStatus>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f8      	beq.n	8000dc6 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x118>
			*RxBuf = pI2C->I2C_DR;
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
			Len--;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d8e9      	bhi.n	8000dc4 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x116>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d115      	bne.n	8000e22 <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x174>
	{
		I2CDisableAck(I2CAddress);
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff ff48 	bl	8000c8c <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8000dfc:	bf00      	nop
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff feec 	bl	8000bde <I2C_GetFlagStatus>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f8      	beq.n	8000dfe <I2CMaster_AT24Cxx_EEPROM_Read_Sequential+0x150>
		*RxBuf = pI2C->I2C_DR;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff feca 	bl	8000bbc <I2C_SendStopBit>

	return;
 8000e28:	bf00      	nop
}
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a88      	ldr	r2, [pc, #544]	; (800105c <EnablePeriClk+0x22c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d108      	bne.n	8000e52 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e40:	4b87      	ldr	r3, [pc, #540]	; (8001060 <EnablePeriClk+0x230>)
 8000e42:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000e50:	e19b      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a83      	ldr	r2, [pc, #524]	; (8001064 <EnablePeriClk+0x234>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d108      	bne.n	8000e6c <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e5a:	4b81      	ldr	r3, [pc, #516]	; (8001060 <EnablePeriClk+0x230>)
 8000e5c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f043 0202 	orr.w	r2, r3, #2
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	e18e      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a7e      	ldr	r2, [pc, #504]	; (8001068 <EnablePeriClk+0x238>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d108      	bne.n	8000e86 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e74:	4b7a      	ldr	r3, [pc, #488]	; (8001060 <EnablePeriClk+0x230>)
 8000e76:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f043 0204 	orr.w	r2, r3, #4
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	e181      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a78      	ldr	r2, [pc, #480]	; (800106c <EnablePeriClk+0x23c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d108      	bne.n	8000ea0 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e8e:	4b74      	ldr	r3, [pc, #464]	; (8001060 <EnablePeriClk+0x230>)
 8000e90:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0208 	orr.w	r2, r3, #8
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	e174      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a73      	ldr	r2, [pc, #460]	; (8001070 <EnablePeriClk+0x240>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d108      	bne.n	8000eba <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ea8:	4b6d      	ldr	r3, [pc, #436]	; (8001060 <EnablePeriClk+0x230>)
 8000eaa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f043 0210 	orr.w	r2, r3, #16
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	e167      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a6d      	ldr	r2, [pc, #436]	; (8001074 <EnablePeriClk+0x244>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d108      	bne.n	8000ed4 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <EnablePeriClk+0x230>)
 8000ec4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f043 0220 	orr.w	r2, r3, #32
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	e15a      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a68      	ldr	r2, [pc, #416]	; (8001078 <EnablePeriClk+0x248>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d108      	bne.n	8000eee <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <EnablePeriClk+0x230>)
 8000ede:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	e14d      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a62      	ldr	r2, [pc, #392]	; (800107c <EnablePeriClk+0x24c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d108      	bne.n	8000f08 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ef6:	4b5a      	ldr	r3, [pc, #360]	; (8001060 <EnablePeriClk+0x230>)
 8000ef8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	e140      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a5d      	ldr	r2, [pc, #372]	; (8001080 <EnablePeriClk+0x250>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d108      	bne.n	8000f22 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000f10:	4b53      	ldr	r3, [pc, #332]	; (8001060 <EnablePeriClk+0x230>)
 8000f12:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	e133      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <EnablePeriClk+0x254>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d108      	bne.n	8000f3c <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000f2a:	4b57      	ldr	r3, [pc, #348]	; (8001088 <EnablePeriClk+0x258>)
 8000f2c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	e126      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a53      	ldr	r2, [pc, #332]	; (800108c <EnablePeriClk+0x25c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d108      	bne.n	8000f56 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f44:	4b52      	ldr	r3, [pc, #328]	; (8001090 <EnablePeriClk+0x260>)
 8000f46:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	e119      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <EnablePeriClk+0x264>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d108      	bne.n	8000f70 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f5e:	4b4c      	ldr	r3, [pc, #304]	; (8001090 <EnablePeriClk+0x260>)
 8000f60:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	e10c      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a49      	ldr	r2, [pc, #292]	; (8001098 <EnablePeriClk+0x268>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d108      	bne.n	8000f8a <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f78:	4b45      	ldr	r3, [pc, #276]	; (8001090 <EnablePeriClk+0x260>)
 8000f7a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	e0ff      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <EnablePeriClk+0x26c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d108      	bne.n	8000fa4 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000f92:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <EnablePeriClk+0x260>)
 8000f94:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
}
 8000fa2:	e0f2      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <EnablePeriClk+0x270>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d108      	bne.n	8000fbe <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <EnablePeriClk+0x260>)
 8000fae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	e0e5      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <EnablePeriClk+0x274>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d108      	bne.n	8000fd8 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <EnablePeriClk+0x258>)
 8000fc8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f043 0210 	orr.w	r2, r3, #16
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	e0d8      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <EnablePeriClk+0x278>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d108      	bne.n	8000ff2 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <EnablePeriClk+0x260>)
 8000fe2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	e0cb      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <EnablePeriClk+0x27c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d108      	bne.n	800100c <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <EnablePeriClk+0x260>)
 8000ffc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	e0be      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <EnablePeriClk+0x280>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d108      	bne.n	8001026 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <EnablePeriClk+0x260>)
 8001016:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	e0b1      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <EnablePeriClk+0x284>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d108      	bne.n	8001040 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <EnablePeriClk+0x260>)
 8001030:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	e0a4      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <EnablePeriClk+0x288>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d139      	bne.n	80010bc <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <EnablePeriClk+0x258>)
 800104a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f043 0220 	orr.w	r2, r3, #32
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	e097      	b.n	800118a <EnablePeriClk+0x35a>
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	40023830 	.word	0x40023830
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40021c00 	.word	0x40021c00
 8001080:	40022000 	.word	0x40022000
 8001084:	40013000 	.word	0x40013000
 8001088:	40023844 	.word	0x40023844
 800108c:	40003800 	.word	0x40003800
 8001090:	40023840 	.word	0x40023840
 8001094:	40003c00 	.word	0x40003c00
 8001098:	40005400 	.word	0x40005400
 800109c:	40005800 	.word	0x40005800
 80010a0:	40005c00 	.word	0x40005c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40004800 	.word	0x40004800
 80010b0:	40004c00 	.word	0x40004c00
 80010b4:	40005000 	.word	0x40005000
 80010b8:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <EnablePeriClk+0x364>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d108      	bne.n	80010d6 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <EnablePeriClk+0x368>)
 80010c6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f043 0210 	orr.w	r2, r3, #16
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	e059      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <EnablePeriClk+0x36c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d108      	bne.n	80010f0 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <EnablePeriClk+0x368>)
 80010e0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f043 0220 	orr.w	r2, r3, #32
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	e04c      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <EnablePeriClk+0x370>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d108      	bne.n	800110a <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <EnablePeriClk+0x374>)
 80010fa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	e03f      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <EnablePeriClk+0x378>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d108      	bne.n	8001124 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <EnablePeriClk+0x374>)
 8001114:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	e032      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112a:	d108      	bne.n	800113e <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <EnablePeriClk+0x368>)
 800112e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	e025      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <EnablePeriClk+0x37c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d108      	bne.n	8001158 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <EnablePeriClk+0x368>)
 8001148:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f043 0202 	orr.w	r2, r3, #2
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	e018      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <EnablePeriClk+0x380>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d108      	bne.n	8001172 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <EnablePeriClk+0x368>)
 8001162:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f043 0204 	orr.w	r2, r3, #4
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	e00b      	b.n	800118a <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <EnablePeriClk+0x384>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d107      	bne.n	800118a <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <EnablePeriClk+0x368>)
 800117c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f043 0208 	orr.w	r2, r3, #8
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40001000 	.word	0x40001000
 8001198:	40023840 	.word	0x40023840
 800119c:	40001400 	.word	0x40001400
 80011a0:	40026000 	.word	0x40026000
 80011a4:	40023830 	.word	0x40023830
 80011a8:	40026400 	.word	0x40026400
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40000800 	.word	0x40000800
 80011b4:	40000c00 	.word	0x40000c00

080011b8 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d110      	bne.n	80011ea <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0208 	orr.w	r2, r2, #8
 80011d6:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0204 	bic.w	r2, r2, #4
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	e028      	b.n	800123c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d110      	bne.n	8001214 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0208 	bic.w	r2, r2, #8
 8001200:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0204 	orr.w	r2, r2, #4
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	e013      	b.n	800123c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d10f      	bne.n	800123c <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0208 	orr.w	r2, r2, #8
 800122a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0204 	orr.w	r2, r2, #4
 800123a:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	e00b      	b.n	800126e <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800126c:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800127c:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6919      	ldr	r1, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	031a      	lsls	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	e028      	b.n	80012fe <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d110      	bne.n	80012d6 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012c2:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	e013      	b.n	80012fe <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d10f      	bne.n	80012fe <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012ec:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012fc:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f8a7 	bl	8001458 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d110      	bne.n	8001334 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001320:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001330:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8001332:	e03d      	b.n	80013b0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d110      	bne.n	800135e <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800134a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800135a:	615a      	str	r2, [r3, #20]
}
 800135c:	e028      	b.n	80013b0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d110      	bne.n	8001388 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001384:	615a      	str	r2, [r3, #20]
}
 8001386:	e013      	b.n	80013b0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d10f      	bne.n	80013b0 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800139e:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ae:	615a      	str	r2, [r3, #20]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001410:	e012      	b.n	8001438 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8001412:	bf00      	nop
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff ffdf 	bl	80013da <USART_GetFlagStatus>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f8      	beq.n	8001414 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
		Len--;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3b01      	subs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1e9      	bne.n	8001412 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 800143e:	bf00      	nop
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffc9 	bl	80013da <USART_GetFlagStatus>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f8      	beq.n	8001440 <USART_SendData+0x3c>
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8001462:	f240 6383 	movw	r3, #1667	; 0x683
 8001466:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <main>:
#include "common_utils.h"

#define READ_BUFFER_SIZE 128

int main(void)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b0a7      	sub	sp, #156	; 0x9c
 8001480:	af00      	add	r7, sp, #0
	uint16_t eeprom_address = 0x0100;		//First byte of Page 1 (Address 65). Page size of EEPROM is 64 bytes
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	char message[]="Hello, World!!!";
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <main+0x90>)
 800148c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char read_buffer[READ_BUFFER_SIZE];

	uint16_t length,i;

	length = strlen(message);
 8001496:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fea8 	bl	80001f0 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	length = 25;
 80014a6:	2319      	movs	r3, #25
 80014a8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

	//Configure the Timer
	configure_delay_timer();
 80014ac:	f7fe ff14 	bl	80002d8 <configure_delay_timer>

	//Configure the UART
	configure_uart();
 80014b0:	f7fe ff34 	bl	800031c <configure_uart>

	//Configure the I2C Peripheral
	configure_i2c();
 80014b4:	f7fe ff90 	bl	80003d8 <configure_i2c>

	//Wait for EEPROM Write to be Completed
	delay_us(5000000);
*/
	//Read String of Bytes from EEPROM
	eeprom_at24cxx_read_sequential(eeprom_address,(uint8_t *)read_buffer,length);
 80014b8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80014bc:	4639      	mov	r1, r7
 80014be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe feec 	bl	80002a0 <eeprom_at24cxx_read_sequential>

	//Print the bytes read from EEPROM
	printf("Read String of Bytes from Address %x: ",eeprom_address);   //Ensure that printf() is redirected to UART in "syscalls.c" file
 80014c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014cc:	4619      	mov	r1, r3
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <main+0x94>)
 80014d0:	f000 f9fc 	bl	80018cc <iprintf>
	for(i=0;i<length;i++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80014da:	e00d      	b.n	80014f8 <main+0x7c>
		printf("%c",read_buffer[i]);
 80014dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014e0:	3398      	adds	r3, #152	; 0x98
 80014e2:	443b      	add	r3, r7
 80014e4:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fa07 	bl	80018fc <putchar>
	for(i=0;i<length;i++)
 80014ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014f2:	3301      	adds	r3, #1
 80014f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80014f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80014fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001500:	429a      	cmp	r2, r3
 8001502:	d3eb      	bcc.n	80014dc <main+0x60>
	printf("\r\n");
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <main+0x98>)
 8001506:	f000 fa7b 	bl	8001a00 <puts>

	while(1)
 800150a:	e7fe      	b.n	800150a <main+0x8e>
 800150c:	08002804 	.word	0x08002804
 8001510:	080027d8 	.word	0x080027d8
 8001514:	08002800 	.word	0x08002800

08001518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
  }

  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff9b 	bl	80004a8 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b0:	605a      	str	r2, [r3, #4]
  return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f000 f846 	bl	80016ac <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20020000 	.word	0x20020000
 800164c:	00000400 	.word	0x00000400
 8001650:	200000d0 	.word	0x200000d0
 8001654:	200000e8 	.word	0x200000e8

08001658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800165c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001686:	f000 f817 	bl	80016b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168a:	f7ff fef7 	bl	800147c <main>

0800168e <LoopForever>:

LoopForever:
  b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   r0, =_estack
 8001690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800169c:	080028b4 	.word	0x080028b4
  ldr r2, =_sbss
 80016a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016a4:	200000e4 	.word	0x200000e4

080016a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <__errno>:
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <__errno+0x8>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__libc_init_array>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	4d0d      	ldr	r5, [pc, #52]	; (80016f0 <__libc_init_array+0x38>)
 80016bc:	4c0d      	ldr	r4, [pc, #52]	; (80016f4 <__libc_init_array+0x3c>)
 80016be:	1b64      	subs	r4, r4, r5
 80016c0:	10a4      	asrs	r4, r4, #2
 80016c2:	2600      	movs	r6, #0
 80016c4:	42a6      	cmp	r6, r4
 80016c6:	d109      	bne.n	80016dc <__libc_init_array+0x24>
 80016c8:	4d0b      	ldr	r5, [pc, #44]	; (80016f8 <__libc_init_array+0x40>)
 80016ca:	4c0c      	ldr	r4, [pc, #48]	; (80016fc <__libc_init_array+0x44>)
 80016cc:	f001 f878 	bl	80027c0 <_init>
 80016d0:	1b64      	subs	r4, r4, r5
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	2600      	movs	r6, #0
 80016d6:	42a6      	cmp	r6, r4
 80016d8:	d105      	bne.n	80016e6 <__libc_init_array+0x2e>
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e0:	4798      	blx	r3
 80016e2:	3601      	adds	r6, #1
 80016e4:	e7ee      	b.n	80016c4 <__libc_init_array+0xc>
 80016e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ea:	4798      	blx	r3
 80016ec:	3601      	adds	r6, #1
 80016ee:	e7f2      	b.n	80016d6 <__libc_init_array+0x1e>
 80016f0:	080028ac 	.word	0x080028ac
 80016f4:	080028ac 	.word	0x080028ac
 80016f8:	080028ac 	.word	0x080028ac
 80016fc:	080028b0 	.word	0x080028b0

08001700 <memset>:
 8001700:	4402      	add	r2, r0
 8001702:	4603      	mov	r3, r0
 8001704:	4293      	cmp	r3, r2
 8001706:	d100      	bne.n	800170a <memset+0xa>
 8001708:	4770      	bx	lr
 800170a:	f803 1b01 	strb.w	r1, [r3], #1
 800170e:	e7f9      	b.n	8001704 <memset+0x4>

08001710 <_free_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4605      	mov	r5, r0
 8001714:	2900      	cmp	r1, #0
 8001716:	d041      	beq.n	800179c <_free_r+0x8c>
 8001718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800171c:	1f0c      	subs	r4, r1, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	bfb8      	it	lt
 8001722:	18e4      	addlt	r4, r4, r3
 8001724:	f000 fc60 	bl	8001fe8 <__malloc_lock>
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <_free_r+0x90>)
 800172a:	6813      	ldr	r3, [r2, #0]
 800172c:	b933      	cbnz	r3, 800173c <_free_r+0x2c>
 800172e:	6063      	str	r3, [r4, #4]
 8001730:	6014      	str	r4, [r2, #0]
 8001732:	4628      	mov	r0, r5
 8001734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001738:	f000 bc5c 	b.w	8001ff4 <__malloc_unlock>
 800173c:	42a3      	cmp	r3, r4
 800173e:	d908      	bls.n	8001752 <_free_r+0x42>
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	1821      	adds	r1, r4, r0
 8001744:	428b      	cmp	r3, r1
 8001746:	bf01      	itttt	eq
 8001748:	6819      	ldreq	r1, [r3, #0]
 800174a:	685b      	ldreq	r3, [r3, #4]
 800174c:	1809      	addeq	r1, r1, r0
 800174e:	6021      	streq	r1, [r4, #0]
 8001750:	e7ed      	b.n	800172e <_free_r+0x1e>
 8001752:	461a      	mov	r2, r3
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	b10b      	cbz	r3, 800175c <_free_r+0x4c>
 8001758:	42a3      	cmp	r3, r4
 800175a:	d9fa      	bls.n	8001752 <_free_r+0x42>
 800175c:	6811      	ldr	r1, [r2, #0]
 800175e:	1850      	adds	r0, r2, r1
 8001760:	42a0      	cmp	r0, r4
 8001762:	d10b      	bne.n	800177c <_free_r+0x6c>
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	4401      	add	r1, r0
 8001768:	1850      	adds	r0, r2, r1
 800176a:	4283      	cmp	r3, r0
 800176c:	6011      	str	r1, [r2, #0]
 800176e:	d1e0      	bne.n	8001732 <_free_r+0x22>
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	6053      	str	r3, [r2, #4]
 8001776:	4401      	add	r1, r0
 8001778:	6011      	str	r1, [r2, #0]
 800177a:	e7da      	b.n	8001732 <_free_r+0x22>
 800177c:	d902      	bls.n	8001784 <_free_r+0x74>
 800177e:	230c      	movs	r3, #12
 8001780:	602b      	str	r3, [r5, #0]
 8001782:	e7d6      	b.n	8001732 <_free_r+0x22>
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	1821      	adds	r1, r4, r0
 8001788:	428b      	cmp	r3, r1
 800178a:	bf04      	itt	eq
 800178c:	6819      	ldreq	r1, [r3, #0]
 800178e:	685b      	ldreq	r3, [r3, #4]
 8001790:	6063      	str	r3, [r4, #4]
 8001792:	bf04      	itt	eq
 8001794:	1809      	addeq	r1, r1, r0
 8001796:	6021      	streq	r1, [r4, #0]
 8001798:	6054      	str	r4, [r2, #4]
 800179a:	e7ca      	b.n	8001732 <_free_r+0x22>
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	bf00      	nop
 80017a0:	200000d4 	.word	0x200000d4

080017a4 <sbrk_aligned>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	4e0e      	ldr	r6, [pc, #56]	; (80017e0 <sbrk_aligned+0x3c>)
 80017a8:	460c      	mov	r4, r1
 80017aa:	6831      	ldr	r1, [r6, #0]
 80017ac:	4605      	mov	r5, r0
 80017ae:	b911      	cbnz	r1, 80017b6 <sbrk_aligned+0x12>
 80017b0:	f000 f92e 	bl	8001a10 <_sbrk_r>
 80017b4:	6030      	str	r0, [r6, #0]
 80017b6:	4621      	mov	r1, r4
 80017b8:	4628      	mov	r0, r5
 80017ba:	f000 f929 	bl	8001a10 <_sbrk_r>
 80017be:	1c43      	adds	r3, r0, #1
 80017c0:	d00a      	beq.n	80017d8 <sbrk_aligned+0x34>
 80017c2:	1cc4      	adds	r4, r0, #3
 80017c4:	f024 0403 	bic.w	r4, r4, #3
 80017c8:	42a0      	cmp	r0, r4
 80017ca:	d007      	beq.n	80017dc <sbrk_aligned+0x38>
 80017cc:	1a21      	subs	r1, r4, r0
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 f91e 	bl	8001a10 <_sbrk_r>
 80017d4:	3001      	adds	r0, #1
 80017d6:	d101      	bne.n	80017dc <sbrk_aligned+0x38>
 80017d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80017dc:	4620      	mov	r0, r4
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	200000d8 	.word	0x200000d8

080017e4 <_malloc_r>:
 80017e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e8:	1ccd      	adds	r5, r1, #3
 80017ea:	f025 0503 	bic.w	r5, r5, #3
 80017ee:	3508      	adds	r5, #8
 80017f0:	2d0c      	cmp	r5, #12
 80017f2:	bf38      	it	cc
 80017f4:	250c      	movcc	r5, #12
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	4607      	mov	r7, r0
 80017fa:	db01      	blt.n	8001800 <_malloc_r+0x1c>
 80017fc:	42a9      	cmp	r1, r5
 80017fe:	d905      	bls.n	800180c <_malloc_r+0x28>
 8001800:	230c      	movs	r3, #12
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	2600      	movs	r6, #0
 8001806:	4630      	mov	r0, r6
 8001808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800180c:	4e2e      	ldr	r6, [pc, #184]	; (80018c8 <_malloc_r+0xe4>)
 800180e:	f000 fbeb 	bl	8001fe8 <__malloc_lock>
 8001812:	6833      	ldr	r3, [r6, #0]
 8001814:	461c      	mov	r4, r3
 8001816:	bb34      	cbnz	r4, 8001866 <_malloc_r+0x82>
 8001818:	4629      	mov	r1, r5
 800181a:	4638      	mov	r0, r7
 800181c:	f7ff ffc2 	bl	80017a4 <sbrk_aligned>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	4604      	mov	r4, r0
 8001824:	d14d      	bne.n	80018c2 <_malloc_r+0xde>
 8001826:	6834      	ldr	r4, [r6, #0]
 8001828:	4626      	mov	r6, r4
 800182a:	2e00      	cmp	r6, #0
 800182c:	d140      	bne.n	80018b0 <_malloc_r+0xcc>
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	4631      	mov	r1, r6
 8001832:	4638      	mov	r0, r7
 8001834:	eb04 0803 	add.w	r8, r4, r3
 8001838:	f000 f8ea 	bl	8001a10 <_sbrk_r>
 800183c:	4580      	cmp	r8, r0
 800183e:	d13a      	bne.n	80018b6 <_malloc_r+0xd2>
 8001840:	6821      	ldr	r1, [r4, #0]
 8001842:	3503      	adds	r5, #3
 8001844:	1a6d      	subs	r5, r5, r1
 8001846:	f025 0503 	bic.w	r5, r5, #3
 800184a:	3508      	adds	r5, #8
 800184c:	2d0c      	cmp	r5, #12
 800184e:	bf38      	it	cc
 8001850:	250c      	movcc	r5, #12
 8001852:	4629      	mov	r1, r5
 8001854:	4638      	mov	r0, r7
 8001856:	f7ff ffa5 	bl	80017a4 <sbrk_aligned>
 800185a:	3001      	adds	r0, #1
 800185c:	d02b      	beq.n	80018b6 <_malloc_r+0xd2>
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	442b      	add	r3, r5
 8001862:	6023      	str	r3, [r4, #0]
 8001864:	e00e      	b.n	8001884 <_malloc_r+0xa0>
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	1b52      	subs	r2, r2, r5
 800186a:	d41e      	bmi.n	80018aa <_malloc_r+0xc6>
 800186c:	2a0b      	cmp	r2, #11
 800186e:	d916      	bls.n	800189e <_malloc_r+0xba>
 8001870:	1961      	adds	r1, r4, r5
 8001872:	42a3      	cmp	r3, r4
 8001874:	6025      	str	r5, [r4, #0]
 8001876:	bf18      	it	ne
 8001878:	6059      	strne	r1, [r3, #4]
 800187a:	6863      	ldr	r3, [r4, #4]
 800187c:	bf08      	it	eq
 800187e:	6031      	streq	r1, [r6, #0]
 8001880:	5162      	str	r2, [r4, r5]
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	4638      	mov	r0, r7
 8001886:	f104 060b 	add.w	r6, r4, #11
 800188a:	f000 fbb3 	bl	8001ff4 <__malloc_unlock>
 800188e:	f026 0607 	bic.w	r6, r6, #7
 8001892:	1d23      	adds	r3, r4, #4
 8001894:	1af2      	subs	r2, r6, r3
 8001896:	d0b6      	beq.n	8001806 <_malloc_r+0x22>
 8001898:	1b9b      	subs	r3, r3, r6
 800189a:	50a3      	str	r3, [r4, r2]
 800189c:	e7b3      	b.n	8001806 <_malloc_r+0x22>
 800189e:	6862      	ldr	r2, [r4, #4]
 80018a0:	42a3      	cmp	r3, r4
 80018a2:	bf0c      	ite	eq
 80018a4:	6032      	streq	r2, [r6, #0]
 80018a6:	605a      	strne	r2, [r3, #4]
 80018a8:	e7ec      	b.n	8001884 <_malloc_r+0xa0>
 80018aa:	4623      	mov	r3, r4
 80018ac:	6864      	ldr	r4, [r4, #4]
 80018ae:	e7b2      	b.n	8001816 <_malloc_r+0x32>
 80018b0:	4634      	mov	r4, r6
 80018b2:	6876      	ldr	r6, [r6, #4]
 80018b4:	e7b9      	b.n	800182a <_malloc_r+0x46>
 80018b6:	230c      	movs	r3, #12
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4638      	mov	r0, r7
 80018bc:	f000 fb9a 	bl	8001ff4 <__malloc_unlock>
 80018c0:	e7a1      	b.n	8001806 <_malloc_r+0x22>
 80018c2:	6025      	str	r5, [r4, #0]
 80018c4:	e7de      	b.n	8001884 <_malloc_r+0xa0>
 80018c6:	bf00      	nop
 80018c8:	200000d4 	.word	0x200000d4

080018cc <iprintf>:
 80018cc:	b40f      	push	{r0, r1, r2, r3}
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <iprintf+0x2c>)
 80018d0:	b513      	push	{r0, r1, r4, lr}
 80018d2:	681c      	ldr	r4, [r3, #0]
 80018d4:	b124      	cbz	r4, 80018e0 <iprintf+0x14>
 80018d6:	69a3      	ldr	r3, [r4, #24]
 80018d8:	b913      	cbnz	r3, 80018e0 <iprintf+0x14>
 80018da:	4620      	mov	r0, r4
 80018dc:	f000 fa7e 	bl	8001ddc <__sinit>
 80018e0:	ab05      	add	r3, sp, #20
 80018e2:	9a04      	ldr	r2, [sp, #16]
 80018e4:	68a1      	ldr	r1, [r4, #8]
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	4620      	mov	r0, r4
 80018ea:	f000 fbb1 	bl	8002050 <_vfiprintf_r>
 80018ee:	b002      	add	sp, #8
 80018f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f4:	b004      	add	sp, #16
 80018f6:	4770      	bx	lr
 80018f8:	20000008 	.word	0x20000008

080018fc <putchar>:
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <putchar+0x24>)
 8001900:	681c      	ldr	r4, [r3, #0]
 8001902:	4605      	mov	r5, r0
 8001904:	b124      	cbz	r4, 8001910 <putchar+0x14>
 8001906:	69a3      	ldr	r3, [r4, #24]
 8001908:	b913      	cbnz	r3, 8001910 <putchar+0x14>
 800190a:	4620      	mov	r0, r4
 800190c:	f000 fa66 	bl	8001ddc <__sinit>
 8001910:	68a2      	ldr	r2, [r4, #8]
 8001912:	4629      	mov	r1, r5
 8001914:	4620      	mov	r0, r4
 8001916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800191a:	f000 be5d 	b.w	80025d8 <_putc_r>
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <_puts_r>:
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	460e      	mov	r6, r1
 8001928:	4605      	mov	r5, r0
 800192a:	b118      	cbz	r0, 8001934 <_puts_r+0x10>
 800192c:	6983      	ldr	r3, [r0, #24]
 800192e:	b90b      	cbnz	r3, 8001934 <_puts_r+0x10>
 8001930:	f000 fa54 	bl	8001ddc <__sinit>
 8001934:	69ab      	ldr	r3, [r5, #24]
 8001936:	68ac      	ldr	r4, [r5, #8]
 8001938:	b913      	cbnz	r3, 8001940 <_puts_r+0x1c>
 800193a:	4628      	mov	r0, r5
 800193c:	f000 fa4e 	bl	8001ddc <__sinit>
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <_puts_r+0xd0>)
 8001942:	429c      	cmp	r4, r3
 8001944:	d120      	bne.n	8001988 <_puts_r+0x64>
 8001946:	686c      	ldr	r4, [r5, #4]
 8001948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800194a:	07db      	lsls	r3, r3, #31
 800194c:	d405      	bmi.n	800195a <_puts_r+0x36>
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	0598      	lsls	r0, r3, #22
 8001952:	d402      	bmi.n	800195a <_puts_r+0x36>
 8001954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001956:	f000 fadf 	bl	8001f18 <__retarget_lock_acquire_recursive>
 800195a:	89a3      	ldrh	r3, [r4, #12]
 800195c:	0719      	lsls	r1, r3, #28
 800195e:	d51d      	bpl.n	800199c <_puts_r+0x78>
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	b1db      	cbz	r3, 800199c <_puts_r+0x78>
 8001964:	3e01      	subs	r6, #1
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800196c:	3b01      	subs	r3, #1
 800196e:	60a3      	str	r3, [r4, #8]
 8001970:	bb39      	cbnz	r1, 80019c2 <_puts_r+0x9e>
 8001972:	2b00      	cmp	r3, #0
 8001974:	da38      	bge.n	80019e8 <_puts_r+0xc4>
 8001976:	4622      	mov	r2, r4
 8001978:	210a      	movs	r1, #10
 800197a:	4628      	mov	r0, r5
 800197c:	f000 f858 	bl	8001a30 <__swbuf_r>
 8001980:	3001      	adds	r0, #1
 8001982:	d011      	beq.n	80019a8 <_puts_r+0x84>
 8001984:	250a      	movs	r5, #10
 8001986:	e011      	b.n	80019ac <_puts_r+0x88>
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <_puts_r+0xd4>)
 800198a:	429c      	cmp	r4, r3
 800198c:	d101      	bne.n	8001992 <_puts_r+0x6e>
 800198e:	68ac      	ldr	r4, [r5, #8]
 8001990:	e7da      	b.n	8001948 <_puts_r+0x24>
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <_puts_r+0xd8>)
 8001994:	429c      	cmp	r4, r3
 8001996:	bf08      	it	eq
 8001998:	68ec      	ldreq	r4, [r5, #12]
 800199a:	e7d5      	b.n	8001948 <_puts_r+0x24>
 800199c:	4621      	mov	r1, r4
 800199e:	4628      	mov	r0, r5
 80019a0:	f000 f898 	bl	8001ad4 <__swsetup_r>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d0dd      	beq.n	8001964 <_puts_r+0x40>
 80019a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80019ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019ae:	07da      	lsls	r2, r3, #31
 80019b0:	d405      	bmi.n	80019be <_puts_r+0x9a>
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	059b      	lsls	r3, r3, #22
 80019b6:	d402      	bmi.n	80019be <_puts_r+0x9a>
 80019b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019ba:	f000 faae 	bl	8001f1a <__retarget_lock_release_recursive>
 80019be:	4628      	mov	r0, r5
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da04      	bge.n	80019d0 <_puts_r+0xac>
 80019c6:	69a2      	ldr	r2, [r4, #24]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dc06      	bgt.n	80019da <_puts_r+0xb6>
 80019cc:	290a      	cmp	r1, #10
 80019ce:	d004      	beq.n	80019da <_puts_r+0xb6>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	6022      	str	r2, [r4, #0]
 80019d6:	7019      	strb	r1, [r3, #0]
 80019d8:	e7c5      	b.n	8001966 <_puts_r+0x42>
 80019da:	4622      	mov	r2, r4
 80019dc:	4628      	mov	r0, r5
 80019de:	f000 f827 	bl	8001a30 <__swbuf_r>
 80019e2:	3001      	adds	r0, #1
 80019e4:	d1bf      	bne.n	8001966 <_puts_r+0x42>
 80019e6:	e7df      	b.n	80019a8 <_puts_r+0x84>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	250a      	movs	r5, #10
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	6022      	str	r2, [r4, #0]
 80019f0:	701d      	strb	r5, [r3, #0]
 80019f2:	e7db      	b.n	80019ac <_puts_r+0x88>
 80019f4:	08002838 	.word	0x08002838
 80019f8:	08002858 	.word	0x08002858
 80019fc:	08002818 	.word	0x08002818

08001a00 <puts>:
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <puts+0xc>)
 8001a02:	4601      	mov	r1, r0
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f7ff bf8d 	b.w	8001924 <_puts_r>
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <_sbrk_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d06      	ldr	r5, [pc, #24]	; (8001a2c <_sbrk_r+0x1c>)
 8001a14:	2300      	movs	r3, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	f7ff fde6 	bl	80015ec <_sbrk>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_sbrk_r+0x1a>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_sbrk_r+0x1a>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	200000e0 	.word	0x200000e0

08001a30 <__swbuf_r>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	460e      	mov	r6, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	4605      	mov	r5, r0
 8001a38:	b118      	cbz	r0, 8001a42 <__swbuf_r+0x12>
 8001a3a:	6983      	ldr	r3, [r0, #24]
 8001a3c:	b90b      	cbnz	r3, 8001a42 <__swbuf_r+0x12>
 8001a3e:	f000 f9cd 	bl	8001ddc <__sinit>
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <__swbuf_r+0x98>)
 8001a44:	429c      	cmp	r4, r3
 8001a46:	d12b      	bne.n	8001aa0 <__swbuf_r+0x70>
 8001a48:	686c      	ldr	r4, [r5, #4]
 8001a4a:	69a3      	ldr	r3, [r4, #24]
 8001a4c:	60a3      	str	r3, [r4, #8]
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	071a      	lsls	r2, r3, #28
 8001a52:	d52f      	bpl.n	8001ab4 <__swbuf_r+0x84>
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b36b      	cbz	r3, 8001ab4 <__swbuf_r+0x84>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	6963      	ldr	r3, [r4, #20]
 8001a60:	b2f6      	uxtb	r6, r6
 8001a62:	4283      	cmp	r3, r0
 8001a64:	4637      	mov	r7, r6
 8001a66:	dc04      	bgt.n	8001a72 <__swbuf_r+0x42>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 f922 	bl	8001cb4 <_fflush_r>
 8001a70:	bb30      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a72:	68a3      	ldr	r3, [r4, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60a3      	str	r3, [r4, #8]
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	6022      	str	r2, [r4, #0]
 8001a7e:	701e      	strb	r6, [r3, #0]
 8001a80:	6963      	ldr	r3, [r4, #20]
 8001a82:	3001      	adds	r0, #1
 8001a84:	4283      	cmp	r3, r0
 8001a86:	d004      	beq.n	8001a92 <__swbuf_r+0x62>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	07db      	lsls	r3, r3, #31
 8001a8c:	d506      	bpl.n	8001a9c <__swbuf_r+0x6c>
 8001a8e:	2e0a      	cmp	r6, #10
 8001a90:	d104      	bne.n	8001a9c <__swbuf_r+0x6c>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f90d 	bl	8001cb4 <_fflush_r>
 8001a9a:	b988      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <__swbuf_r+0x9c>)
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d101      	bne.n	8001aaa <__swbuf_r+0x7a>
 8001aa6:	68ac      	ldr	r4, [r5, #8]
 8001aa8:	e7cf      	b.n	8001a4a <__swbuf_r+0x1a>
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <__swbuf_r+0xa0>)
 8001aac:	429c      	cmp	r4, r3
 8001aae:	bf08      	it	eq
 8001ab0:	68ec      	ldreq	r4, [r5, #12]
 8001ab2:	e7ca      	b.n	8001a4a <__swbuf_r+0x1a>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f80c 	bl	8001ad4 <__swsetup_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d0cb      	beq.n	8001a58 <__swbuf_r+0x28>
 8001ac0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ac4:	e7ea      	b.n	8001a9c <__swbuf_r+0x6c>
 8001ac6:	bf00      	nop
 8001ac8:	08002838 	.word	0x08002838
 8001acc:	08002858 	.word	0x08002858
 8001ad0:	08002818 	.word	0x08002818

08001ad4 <__swsetup_r>:
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <__swsetup_r+0xcc>)
 8001ad6:	b570      	push	{r4, r5, r6, lr}
 8001ad8:	681d      	ldr	r5, [r3, #0]
 8001ada:	4606      	mov	r6, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	b125      	cbz	r5, 8001aea <__swsetup_r+0x16>
 8001ae0:	69ab      	ldr	r3, [r5, #24]
 8001ae2:	b913      	cbnz	r3, 8001aea <__swsetup_r+0x16>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 f979 	bl	8001ddc <__sinit>
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <__swsetup_r+0xd0>)
 8001aec:	429c      	cmp	r4, r3
 8001aee:	d10f      	bne.n	8001b10 <__swsetup_r+0x3c>
 8001af0:	686c      	ldr	r4, [r5, #4]
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001af8:	0719      	lsls	r1, r3, #28
 8001afa:	d42c      	bmi.n	8001b56 <__swsetup_r+0x82>
 8001afc:	06dd      	lsls	r5, r3, #27
 8001afe:	d411      	bmi.n	8001b24 <__swsetup_r+0x50>
 8001b00:	2309      	movs	r3, #9
 8001b02:	6033      	str	r3, [r6, #0]
 8001b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0e:	e03e      	b.n	8001b8e <__swsetup_r+0xba>
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <__swsetup_r+0xd4>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <__swsetup_r+0x46>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7eb      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <__swsetup_r+0xd8>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7e6      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b24:	0758      	lsls	r0, r3, #29
 8001b26:	d512      	bpl.n	8001b4e <__swsetup_r+0x7a>
 8001b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b2a:	b141      	cbz	r1, 8001b3e <__swsetup_r+0x6a>
 8001b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d002      	beq.n	8001b3a <__swsetup_r+0x66>
 8001b34:	4630      	mov	r0, r6
 8001b36:	f7ff fdeb 	bl	8001710 <_free_r>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b44:	81a3      	strh	r3, [r4, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	6063      	str	r3, [r4, #4]
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	6923      	ldr	r3, [r4, #16]
 8001b58:	b94b      	cbnz	r3, 8001b6e <__swsetup_r+0x9a>
 8001b5a:	89a3      	ldrh	r3, [r4, #12]
 8001b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b64:	d003      	beq.n	8001b6e <__swsetup_r+0x9a>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 f9fd 	bl	8001f68 <__smakebuf_r>
 8001b6e:	89a0      	ldrh	r0, [r4, #12]
 8001b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b74:	f010 0301 	ands.w	r3, r0, #1
 8001b78:	d00a      	beq.n	8001b90 <__swsetup_r+0xbc>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60a3      	str	r3, [r4, #8]
 8001b7e:	6963      	ldr	r3, [r4, #20]
 8001b80:	425b      	negs	r3, r3
 8001b82:	61a3      	str	r3, [r4, #24]
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	b943      	cbnz	r3, 8001b9a <__swsetup_r+0xc6>
 8001b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b8c:	d1ba      	bne.n	8001b04 <__swsetup_r+0x30>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	0781      	lsls	r1, r0, #30
 8001b92:	bf58      	it	pl
 8001b94:	6963      	ldrpl	r3, [r4, #20]
 8001b96:	60a3      	str	r3, [r4, #8]
 8001b98:	e7f4      	b.n	8001b84 <__swsetup_r+0xb0>
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	e7f7      	b.n	8001b8e <__swsetup_r+0xba>
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	08002838 	.word	0x08002838
 8001ba8:	08002858 	.word	0x08002858
 8001bac:	08002818 	.word	0x08002818

08001bb0 <__sflush_r>:
 8001bb0:	898a      	ldrh	r2, [r1, #12]
 8001bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	0710      	lsls	r0, r2, #28
 8001bb8:	460c      	mov	r4, r1
 8001bba:	d457      	bmi.n	8001c6c <__sflush_r+0xbc>
 8001bbc:	684b      	ldr	r3, [r1, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc04      	bgt.n	8001bcc <__sflush_r+0x1c>
 8001bc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	dc01      	bgt.n	8001bcc <__sflush_r+0x1c>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d0fa      	beq.n	8001bc8 <__sflush_r+0x18>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bd8:	682f      	ldr	r7, [r5, #0]
 8001bda:	602b      	str	r3, [r5, #0]
 8001bdc:	d032      	beq.n	8001c44 <__sflush_r+0x94>
 8001bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001be0:	89a3      	ldrh	r3, [r4, #12]
 8001be2:	075a      	lsls	r2, r3, #29
 8001be4:	d505      	bpl.n	8001bf2 <__sflush_r+0x42>
 8001be6:	6863      	ldr	r3, [r4, #4]
 8001be8:	1ac0      	subs	r0, r0, r3
 8001bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bec:	b10b      	cbz	r3, 8001bf2 <__sflush_r+0x42>
 8001bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bf0:	1ac0      	subs	r0, r0, r3
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bf8:	6a21      	ldr	r1, [r4, #32]
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	47b0      	blx	r6
 8001bfe:	1c43      	adds	r3, r0, #1
 8001c00:	89a3      	ldrh	r3, [r4, #12]
 8001c02:	d106      	bne.n	8001c12 <__sflush_r+0x62>
 8001c04:	6829      	ldr	r1, [r5, #0]
 8001c06:	291d      	cmp	r1, #29
 8001c08:	d82c      	bhi.n	8001c64 <__sflush_r+0xb4>
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <__sflush_r+0x100>)
 8001c0c:	40ca      	lsrs	r2, r1
 8001c0e:	07d6      	lsls	r6, r2, #31
 8001c10:	d528      	bpl.n	8001c64 <__sflush_r+0xb4>
 8001c12:	2200      	movs	r2, #0
 8001c14:	6062      	str	r2, [r4, #4]
 8001c16:	04d9      	lsls	r1, r3, #19
 8001c18:	6922      	ldr	r2, [r4, #16]
 8001c1a:	6022      	str	r2, [r4, #0]
 8001c1c:	d504      	bpl.n	8001c28 <__sflush_r+0x78>
 8001c1e:	1c42      	adds	r2, r0, #1
 8001c20:	d101      	bne.n	8001c26 <__sflush_r+0x76>
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	b903      	cbnz	r3, 8001c28 <__sflush_r+0x78>
 8001c26:	6560      	str	r0, [r4, #84]	; 0x54
 8001c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c2a:	602f      	str	r7, [r5, #0]
 8001c2c:	2900      	cmp	r1, #0
 8001c2e:	d0cb      	beq.n	8001bc8 <__sflush_r+0x18>
 8001c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c34:	4299      	cmp	r1, r3
 8001c36:	d002      	beq.n	8001c3e <__sflush_r+0x8e>
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7ff fd69 	bl	8001710 <_free_r>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	6360      	str	r0, [r4, #52]	; 0x34
 8001c42:	e7c2      	b.n	8001bca <__sflush_r+0x1a>
 8001c44:	6a21      	ldr	r1, [r4, #32]
 8001c46:	2301      	movs	r3, #1
 8001c48:	4628      	mov	r0, r5
 8001c4a:	47b0      	blx	r6
 8001c4c:	1c41      	adds	r1, r0, #1
 8001c4e:	d1c7      	bne.n	8001be0 <__sflush_r+0x30>
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0c4      	beq.n	8001be0 <__sflush_r+0x30>
 8001c56:	2b1d      	cmp	r3, #29
 8001c58:	d001      	beq.n	8001c5e <__sflush_r+0xae>
 8001c5a:	2b16      	cmp	r3, #22
 8001c5c:	d101      	bne.n	8001c62 <__sflush_r+0xb2>
 8001c5e:	602f      	str	r7, [r5, #0]
 8001c60:	e7b2      	b.n	8001bc8 <__sflush_r+0x18>
 8001c62:	89a3      	ldrh	r3, [r4, #12]
 8001c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c68:	81a3      	strh	r3, [r4, #12]
 8001c6a:	e7ae      	b.n	8001bca <__sflush_r+0x1a>
 8001c6c:	690f      	ldr	r7, [r1, #16]
 8001c6e:	2f00      	cmp	r7, #0
 8001c70:	d0aa      	beq.n	8001bc8 <__sflush_r+0x18>
 8001c72:	0793      	lsls	r3, r2, #30
 8001c74:	680e      	ldr	r6, [r1, #0]
 8001c76:	bf08      	it	eq
 8001c78:	694b      	ldreq	r3, [r1, #20]
 8001c7a:	600f      	str	r7, [r1, #0]
 8001c7c:	bf18      	it	ne
 8001c7e:	2300      	movne	r3, #0
 8001c80:	1bf6      	subs	r6, r6, r7
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	2e00      	cmp	r6, #0
 8001c86:	dd9f      	ble.n	8001bc8 <__sflush_r+0x18>
 8001c88:	6a21      	ldr	r1, [r4, #32]
 8001c8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001c8e:	4633      	mov	r3, r6
 8001c90:	463a      	mov	r2, r7
 8001c92:	4628      	mov	r0, r5
 8001c94:	47e0      	blx	ip
 8001c96:	2800      	cmp	r0, #0
 8001c98:	dc06      	bgt.n	8001ca8 <__sflush_r+0xf8>
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca0:	81a3      	strh	r3, [r4, #12]
 8001ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca6:	e790      	b.n	8001bca <__sflush_r+0x1a>
 8001ca8:	4407      	add	r7, r0
 8001caa:	1a36      	subs	r6, r6, r0
 8001cac:	e7ea      	b.n	8001c84 <__sflush_r+0xd4>
 8001cae:	bf00      	nop
 8001cb0:	20400001 	.word	0x20400001

08001cb4 <_fflush_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	690b      	ldr	r3, [r1, #16]
 8001cb8:	4605      	mov	r5, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	b913      	cbnz	r3, 8001cc4 <_fflush_r+0x10>
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	b118      	cbz	r0, 8001cce <_fflush_r+0x1a>
 8001cc6:	6983      	ldr	r3, [r0, #24]
 8001cc8:	b90b      	cbnz	r3, 8001cce <_fflush_r+0x1a>
 8001cca:	f000 f887 	bl	8001ddc <__sinit>
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <_fflush_r+0x6c>)
 8001cd0:	429c      	cmp	r4, r3
 8001cd2:	d11b      	bne.n	8001d0c <_fflush_r+0x58>
 8001cd4:	686c      	ldr	r4, [r5, #4]
 8001cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ef      	beq.n	8001cbe <_fflush_r+0xa>
 8001cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ce0:	07d0      	lsls	r0, r2, #31
 8001ce2:	d404      	bmi.n	8001cee <_fflush_r+0x3a>
 8001ce4:	0599      	lsls	r1, r3, #22
 8001ce6:	d402      	bmi.n	8001cee <_fflush_r+0x3a>
 8001ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cea:	f000 f915 	bl	8001f18 <__retarget_lock_acquire_recursive>
 8001cee:	4628      	mov	r0, r5
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__sflush_r>
 8001cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cf8:	07da      	lsls	r2, r3, #31
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	d4e0      	bmi.n	8001cc0 <_fflush_r+0xc>
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	059b      	lsls	r3, r3, #22
 8001d02:	d4dd      	bmi.n	8001cc0 <_fflush_r+0xc>
 8001d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d06:	f000 f908 	bl	8001f1a <__retarget_lock_release_recursive>
 8001d0a:	e7d9      	b.n	8001cc0 <_fflush_r+0xc>
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <_fflush_r+0x70>)
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d101      	bne.n	8001d16 <_fflush_r+0x62>
 8001d12:	68ac      	ldr	r4, [r5, #8]
 8001d14:	e7df      	b.n	8001cd6 <_fflush_r+0x22>
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <_fflush_r+0x74>)
 8001d18:	429c      	cmp	r4, r3
 8001d1a:	bf08      	it	eq
 8001d1c:	68ec      	ldreq	r4, [r5, #12]
 8001d1e:	e7da      	b.n	8001cd6 <_fflush_r+0x22>
 8001d20:	08002838 	.word	0x08002838
 8001d24:	08002858 	.word	0x08002858
 8001d28:	08002818 	.word	0x08002818

08001d2c <std>:
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	b510      	push	{r4, lr}
 8001d30:	4604      	mov	r4, r0
 8001d32:	e9c0 3300 	strd	r3, r3, [r0]
 8001d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d3a:	6083      	str	r3, [r0, #8]
 8001d3c:	8181      	strh	r1, [r0, #12]
 8001d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8001d40:	81c2      	strh	r2, [r0, #14]
 8001d42:	6183      	str	r3, [r0, #24]
 8001d44:	4619      	mov	r1, r3
 8001d46:	2208      	movs	r2, #8
 8001d48:	305c      	adds	r0, #92	; 0x5c
 8001d4a:	f7ff fcd9 	bl	8001700 <memset>
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <std+0x38>)
 8001d50:	6263      	str	r3, [r4, #36]	; 0x24
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <std+0x3c>)
 8001d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <std+0x40>)
 8001d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <std+0x44>)
 8001d5c:	6224      	str	r4, [r4, #32]
 8001d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	bf00      	nop
 8001d64:	08002669 	.word	0x08002669
 8001d68:	0800268b 	.word	0x0800268b
 8001d6c:	080026c3 	.word	0x080026c3
 8001d70:	080026e7 	.word	0x080026e7

08001d74 <_cleanup_r>:
 8001d74:	4901      	ldr	r1, [pc, #4]	; (8001d7c <_cleanup_r+0x8>)
 8001d76:	f000 b8af 	b.w	8001ed8 <_fwalk_reent>
 8001d7a:	bf00      	nop
 8001d7c:	08001cb5 	.word	0x08001cb5

08001d80 <__sfmoreglue>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	2268      	movs	r2, #104	; 0x68
 8001d84:	1e4d      	subs	r5, r1, #1
 8001d86:	4355      	muls	r5, r2
 8001d88:	460e      	mov	r6, r1
 8001d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d8e:	f7ff fd29 	bl	80017e4 <_malloc_r>
 8001d92:	4604      	mov	r4, r0
 8001d94:	b140      	cbz	r0, 8001da8 <__sfmoreglue+0x28>
 8001d96:	2100      	movs	r1, #0
 8001d98:	e9c0 1600 	strd	r1, r6, [r0]
 8001d9c:	300c      	adds	r0, #12
 8001d9e:	60a0      	str	r0, [r4, #8]
 8001da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001da4:	f7ff fcac 	bl	8001700 <memset>
 8001da8:	4620      	mov	r0, r4
 8001daa:	bd70      	pop	{r4, r5, r6, pc}

08001dac <__sfp_lock_acquire>:
 8001dac:	4801      	ldr	r0, [pc, #4]	; (8001db4 <__sfp_lock_acquire+0x8>)
 8001dae:	f000 b8b3 	b.w	8001f18 <__retarget_lock_acquire_recursive>
 8001db2:	bf00      	nop
 8001db4:	200000dd 	.word	0x200000dd

08001db8 <__sfp_lock_release>:
 8001db8:	4801      	ldr	r0, [pc, #4]	; (8001dc0 <__sfp_lock_release+0x8>)
 8001dba:	f000 b8ae 	b.w	8001f1a <__retarget_lock_release_recursive>
 8001dbe:	bf00      	nop
 8001dc0:	200000dd 	.word	0x200000dd

08001dc4 <__sinit_lock_acquire>:
 8001dc4:	4801      	ldr	r0, [pc, #4]	; (8001dcc <__sinit_lock_acquire+0x8>)
 8001dc6:	f000 b8a7 	b.w	8001f18 <__retarget_lock_acquire_recursive>
 8001dca:	bf00      	nop
 8001dcc:	200000de 	.word	0x200000de

08001dd0 <__sinit_lock_release>:
 8001dd0:	4801      	ldr	r0, [pc, #4]	; (8001dd8 <__sinit_lock_release+0x8>)
 8001dd2:	f000 b8a2 	b.w	8001f1a <__retarget_lock_release_recursive>
 8001dd6:	bf00      	nop
 8001dd8:	200000de 	.word	0x200000de

08001ddc <__sinit>:
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
 8001de0:	f7ff fff0 	bl	8001dc4 <__sinit_lock_acquire>
 8001de4:	69a3      	ldr	r3, [r4, #24]
 8001de6:	b11b      	cbz	r3, 8001df0 <__sinit+0x14>
 8001de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dec:	f7ff bff0 	b.w	8001dd0 <__sinit_lock_release>
 8001df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001df4:	6523      	str	r3, [r4, #80]	; 0x50
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <__sinit+0x68>)
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <__sinit+0x6c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001dfe:	42a3      	cmp	r3, r4
 8001e00:	bf04      	itt	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	61a3      	streq	r3, [r4, #24]
 8001e06:	4620      	mov	r0, r4
 8001e08:	f000 f820 	bl	8001e4c <__sfp>
 8001e0c:	6060      	str	r0, [r4, #4]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 f81c 	bl	8001e4c <__sfp>
 8001e14:	60a0      	str	r0, [r4, #8]
 8001e16:	4620      	mov	r0, r4
 8001e18:	f000 f818 	bl	8001e4c <__sfp>
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60e0      	str	r0, [r4, #12]
 8001e20:	2104      	movs	r1, #4
 8001e22:	6860      	ldr	r0, [r4, #4]
 8001e24:	f7ff ff82 	bl	8001d2c <std>
 8001e28:	68a0      	ldr	r0, [r4, #8]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2109      	movs	r1, #9
 8001e2e:	f7ff ff7d 	bl	8001d2c <std>
 8001e32:	68e0      	ldr	r0, [r4, #12]
 8001e34:	2202      	movs	r2, #2
 8001e36:	2112      	movs	r1, #18
 8001e38:	f7ff ff78 	bl	8001d2c <std>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61a3      	str	r3, [r4, #24]
 8001e40:	e7d2      	b.n	8001de8 <__sinit+0xc>
 8001e42:	bf00      	nop
 8001e44:	08002814 	.word	0x08002814
 8001e48:	08001d75 	.word	0x08001d75

08001e4c <__sfp>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	4607      	mov	r7, r0
 8001e50:	f7ff ffac 	bl	8001dac <__sfp_lock_acquire>
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <__sfp+0x84>)
 8001e56:	681e      	ldr	r6, [r3, #0]
 8001e58:	69b3      	ldr	r3, [r6, #24]
 8001e5a:	b913      	cbnz	r3, 8001e62 <__sfp+0x16>
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff ffbd 	bl	8001ddc <__sinit>
 8001e62:	3648      	adds	r6, #72	; 0x48
 8001e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	d503      	bpl.n	8001e74 <__sfp+0x28>
 8001e6c:	6833      	ldr	r3, [r6, #0]
 8001e6e:	b30b      	cbz	r3, 8001eb4 <__sfp+0x68>
 8001e70:	6836      	ldr	r6, [r6, #0]
 8001e72:	e7f7      	b.n	8001e64 <__sfp+0x18>
 8001e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e78:	b9d5      	cbnz	r5, 8001eb0 <__sfp+0x64>
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <__sfp+0x88>)
 8001e7c:	60e3      	str	r3, [r4, #12]
 8001e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e82:	6665      	str	r5, [r4, #100]	; 0x64
 8001e84:	f000 f847 	bl	8001f16 <__retarget_lock_init_recursive>
 8001e88:	f7ff ff96 	bl	8001db8 <__sfp_lock_release>
 8001e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e94:	6025      	str	r5, [r4, #0]
 8001e96:	61a5      	str	r5, [r4, #24]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ea0:	f7ff fc2e 	bl	8001700 <memset>
 8001ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001eac:	4620      	mov	r0, r4
 8001eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eb0:	3468      	adds	r4, #104	; 0x68
 8001eb2:	e7d9      	b.n	8001e68 <__sfp+0x1c>
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	f7ff ff62 	bl	8001d80 <__sfmoreglue>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	6030      	str	r0, [r6, #0]
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1d5      	bne.n	8001e70 <__sfp+0x24>
 8001ec4:	f7ff ff78 	bl	8001db8 <__sfp_lock_release>
 8001ec8:	230c      	movs	r3, #12
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	e7ee      	b.n	8001eac <__sfp+0x60>
 8001ece:	bf00      	nop
 8001ed0:	08002814 	.word	0x08002814
 8001ed4:	ffff0001 	.word	0xffff0001

08001ed8 <_fwalk_reent>:
 8001ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001edc:	4606      	mov	r6, r0
 8001ede:	4688      	mov	r8, r1
 8001ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ee4:	2700      	movs	r7, #0
 8001ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001eea:	f1b9 0901 	subs.w	r9, r9, #1
 8001eee:	d505      	bpl.n	8001efc <_fwalk_reent+0x24>
 8001ef0:	6824      	ldr	r4, [r4, #0]
 8001ef2:	2c00      	cmp	r4, #0
 8001ef4:	d1f7      	bne.n	8001ee6 <_fwalk_reent+0xe>
 8001ef6:	4638      	mov	r0, r7
 8001ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001efc:	89ab      	ldrh	r3, [r5, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d907      	bls.n	8001f12 <_fwalk_reent+0x3a>
 8001f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f06:	3301      	adds	r3, #1
 8001f08:	d003      	beq.n	8001f12 <_fwalk_reent+0x3a>
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	47c0      	blx	r8
 8001f10:	4307      	orrs	r7, r0
 8001f12:	3568      	adds	r5, #104	; 0x68
 8001f14:	e7e9      	b.n	8001eea <_fwalk_reent+0x12>

08001f16 <__retarget_lock_init_recursive>:
 8001f16:	4770      	bx	lr

08001f18 <__retarget_lock_acquire_recursive>:
 8001f18:	4770      	bx	lr

08001f1a <__retarget_lock_release_recursive>:
 8001f1a:	4770      	bx	lr

08001f1c <__swhatbuf_r>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	460e      	mov	r6, r1
 8001f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f24:	2900      	cmp	r1, #0
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	da08      	bge.n	8001f40 <__swhatbuf_r+0x24>
 8001f2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	602a      	str	r2, [r5, #0]
 8001f36:	061a      	lsls	r2, r3, #24
 8001f38:	d410      	bmi.n	8001f5c <__swhatbuf_r+0x40>
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	e00e      	b.n	8001f5e <__swhatbuf_r+0x42>
 8001f40:	466a      	mov	r2, sp
 8001f42:	f000 fbf7 	bl	8002734 <_fstat_r>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	dbf1      	blt.n	8001f2e <__swhatbuf_r+0x12>
 8001f4a:	9a01      	ldr	r2, [sp, #4]
 8001f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f54:	425a      	negs	r2, r3
 8001f56:	415a      	adcs	r2, r3
 8001f58:	602a      	str	r2, [r5, #0]
 8001f5a:	e7ee      	b.n	8001f3a <__swhatbuf_r+0x1e>
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	2000      	movs	r0, #0
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	b016      	add	sp, #88	; 0x58
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f68 <__smakebuf_r>:
 8001f68:	898b      	ldrh	r3, [r1, #12]
 8001f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f6c:	079d      	lsls	r5, r3, #30
 8001f6e:	4606      	mov	r6, r0
 8001f70:	460c      	mov	r4, r1
 8001f72:	d507      	bpl.n	8001f84 <__smakebuf_r+0x1c>
 8001f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	6123      	str	r3, [r4, #16]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	6163      	str	r3, [r4, #20]
 8001f80:	b002      	add	sp, #8
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	ab01      	add	r3, sp, #4
 8001f86:	466a      	mov	r2, sp
 8001f88:	f7ff ffc8 	bl	8001f1c <__swhatbuf_r>
 8001f8c:	9900      	ldr	r1, [sp, #0]
 8001f8e:	4605      	mov	r5, r0
 8001f90:	4630      	mov	r0, r6
 8001f92:	f7ff fc27 	bl	80017e4 <_malloc_r>
 8001f96:	b948      	cbnz	r0, 8001fac <__smakebuf_r+0x44>
 8001f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f9c:	059a      	lsls	r2, r3, #22
 8001f9e:	d4ef      	bmi.n	8001f80 <__smakebuf_r+0x18>
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	81a3      	strh	r3, [r4, #12]
 8001faa:	e7e3      	b.n	8001f74 <__smakebuf_r+0xc>
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <__smakebuf_r+0x7c>)
 8001fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	6020      	str	r0, [r4, #0]
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb8:	81a3      	strh	r3, [r4, #12]
 8001fba:	9b00      	ldr	r3, [sp, #0]
 8001fbc:	6163      	str	r3, [r4, #20]
 8001fbe:	9b01      	ldr	r3, [sp, #4]
 8001fc0:	6120      	str	r0, [r4, #16]
 8001fc2:	b15b      	cbz	r3, 8001fdc <__smakebuf_r+0x74>
 8001fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 fbc5 	bl	8002758 <_isatty_r>
 8001fce:	b128      	cbz	r0, 8001fdc <__smakebuf_r+0x74>
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	81a3      	strh	r3, [r4, #12]
 8001fdc:	89a0      	ldrh	r0, [r4, #12]
 8001fde:	4305      	orrs	r5, r0
 8001fe0:	81a5      	strh	r5, [r4, #12]
 8001fe2:	e7cd      	b.n	8001f80 <__smakebuf_r+0x18>
 8001fe4:	08001d75 	.word	0x08001d75

08001fe8 <__malloc_lock>:
 8001fe8:	4801      	ldr	r0, [pc, #4]	; (8001ff0 <__malloc_lock+0x8>)
 8001fea:	f7ff bf95 	b.w	8001f18 <__retarget_lock_acquire_recursive>
 8001fee:	bf00      	nop
 8001ff0:	200000dc 	.word	0x200000dc

08001ff4 <__malloc_unlock>:
 8001ff4:	4801      	ldr	r0, [pc, #4]	; (8001ffc <__malloc_unlock+0x8>)
 8001ff6:	f7ff bf90 	b.w	8001f1a <__retarget_lock_release_recursive>
 8001ffa:	bf00      	nop
 8001ffc:	200000dc 	.word	0x200000dc

08002000 <__sfputc_r>:
 8002000:	6893      	ldr	r3, [r2, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	b410      	push	{r4}
 8002008:	6093      	str	r3, [r2, #8]
 800200a:	da07      	bge.n	800201c <__sfputc_r+0x1c>
 800200c:	6994      	ldr	r4, [r2, #24]
 800200e:	42a3      	cmp	r3, r4
 8002010:	db01      	blt.n	8002016 <__sfputc_r+0x16>
 8002012:	290a      	cmp	r1, #10
 8002014:	d102      	bne.n	800201c <__sfputc_r+0x1c>
 8002016:	bc10      	pop	{r4}
 8002018:	f7ff bd0a 	b.w	8001a30 <__swbuf_r>
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	1c58      	adds	r0, r3, #1
 8002020:	6010      	str	r0, [r2, #0]
 8002022:	7019      	strb	r1, [r3, #0]
 8002024:	4608      	mov	r0, r1
 8002026:	bc10      	pop	{r4}
 8002028:	4770      	bx	lr

0800202a <__sfputs_r>:
 800202a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202c:	4606      	mov	r6, r0
 800202e:	460f      	mov	r7, r1
 8002030:	4614      	mov	r4, r2
 8002032:	18d5      	adds	r5, r2, r3
 8002034:	42ac      	cmp	r4, r5
 8002036:	d101      	bne.n	800203c <__sfputs_r+0x12>
 8002038:	2000      	movs	r0, #0
 800203a:	e007      	b.n	800204c <__sfputs_r+0x22>
 800203c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002040:	463a      	mov	r2, r7
 8002042:	4630      	mov	r0, r6
 8002044:	f7ff ffdc 	bl	8002000 <__sfputc_r>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d1f3      	bne.n	8002034 <__sfputs_r+0xa>
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002050 <_vfiprintf_r>:
 8002050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002054:	460d      	mov	r5, r1
 8002056:	b09d      	sub	sp, #116	; 0x74
 8002058:	4614      	mov	r4, r2
 800205a:	4698      	mov	r8, r3
 800205c:	4606      	mov	r6, r0
 800205e:	b118      	cbz	r0, 8002068 <_vfiprintf_r+0x18>
 8002060:	6983      	ldr	r3, [r0, #24]
 8002062:	b90b      	cbnz	r3, 8002068 <_vfiprintf_r+0x18>
 8002064:	f7ff feba 	bl	8001ddc <__sinit>
 8002068:	4b89      	ldr	r3, [pc, #548]	; (8002290 <_vfiprintf_r+0x240>)
 800206a:	429d      	cmp	r5, r3
 800206c:	d11b      	bne.n	80020a6 <_vfiprintf_r+0x56>
 800206e:	6875      	ldr	r5, [r6, #4]
 8002070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002072:	07d9      	lsls	r1, r3, #31
 8002074:	d405      	bmi.n	8002082 <_vfiprintf_r+0x32>
 8002076:	89ab      	ldrh	r3, [r5, #12]
 8002078:	059a      	lsls	r2, r3, #22
 800207a:	d402      	bmi.n	8002082 <_vfiprintf_r+0x32>
 800207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800207e:	f7ff ff4b 	bl	8001f18 <__retarget_lock_acquire_recursive>
 8002082:	89ab      	ldrh	r3, [r5, #12]
 8002084:	071b      	lsls	r3, r3, #28
 8002086:	d501      	bpl.n	800208c <_vfiprintf_r+0x3c>
 8002088:	692b      	ldr	r3, [r5, #16]
 800208a:	b9eb      	cbnz	r3, 80020c8 <_vfiprintf_r+0x78>
 800208c:	4629      	mov	r1, r5
 800208e:	4630      	mov	r0, r6
 8002090:	f7ff fd20 	bl	8001ad4 <__swsetup_r>
 8002094:	b1c0      	cbz	r0, 80020c8 <_vfiprintf_r+0x78>
 8002096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002098:	07dc      	lsls	r4, r3, #31
 800209a:	d50e      	bpl.n	80020ba <_vfiprintf_r+0x6a>
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	b01d      	add	sp, #116	; 0x74
 80020a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <_vfiprintf_r+0x244>)
 80020a8:	429d      	cmp	r5, r3
 80020aa:	d101      	bne.n	80020b0 <_vfiprintf_r+0x60>
 80020ac:	68b5      	ldr	r5, [r6, #8]
 80020ae:	e7df      	b.n	8002070 <_vfiprintf_r+0x20>
 80020b0:	4b79      	ldr	r3, [pc, #484]	; (8002298 <_vfiprintf_r+0x248>)
 80020b2:	429d      	cmp	r5, r3
 80020b4:	bf08      	it	eq
 80020b6:	68f5      	ldreq	r5, [r6, #12]
 80020b8:	e7da      	b.n	8002070 <_vfiprintf_r+0x20>
 80020ba:	89ab      	ldrh	r3, [r5, #12]
 80020bc:	0598      	lsls	r0, r3, #22
 80020be:	d4ed      	bmi.n	800209c <_vfiprintf_r+0x4c>
 80020c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020c2:	f7ff ff2a 	bl	8001f1a <__retarget_lock_release_recursive>
 80020c6:	e7e9      	b.n	800209c <_vfiprintf_r+0x4c>
 80020c8:	2300      	movs	r3, #0
 80020ca:	9309      	str	r3, [sp, #36]	; 0x24
 80020cc:	2320      	movs	r3, #32
 80020ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800229c <_vfiprintf_r+0x24c>
 80020dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020e0:	f04f 0901 	mov.w	r9, #1
 80020e4:	4623      	mov	r3, r4
 80020e6:	469a      	mov	sl, r3
 80020e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020ec:	b10a      	cbz	r2, 80020f2 <_vfiprintf_r+0xa2>
 80020ee:	2a25      	cmp	r2, #37	; 0x25
 80020f0:	d1f9      	bne.n	80020e6 <_vfiprintf_r+0x96>
 80020f2:	ebba 0b04 	subs.w	fp, sl, r4
 80020f6:	d00b      	beq.n	8002110 <_vfiprintf_r+0xc0>
 80020f8:	465b      	mov	r3, fp
 80020fa:	4622      	mov	r2, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	4630      	mov	r0, r6
 8002100:	f7ff ff93 	bl	800202a <__sfputs_r>
 8002104:	3001      	adds	r0, #1
 8002106:	f000 80aa 	beq.w	800225e <_vfiprintf_r+0x20e>
 800210a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800210c:	445a      	add	r2, fp
 800210e:	9209      	str	r2, [sp, #36]	; 0x24
 8002110:	f89a 3000 	ldrb.w	r3, [sl]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a2 	beq.w	800225e <_vfiprintf_r+0x20e>
 800211a:	2300      	movs	r3, #0
 800211c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002124:	f10a 0a01 	add.w	sl, sl, #1
 8002128:	9304      	str	r3, [sp, #16]
 800212a:	9307      	str	r3, [sp, #28]
 800212c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002130:	931a      	str	r3, [sp, #104]	; 0x68
 8002132:	4654      	mov	r4, sl
 8002134:	2205      	movs	r2, #5
 8002136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800213a:	4858      	ldr	r0, [pc, #352]	; (800229c <_vfiprintf_r+0x24c>)
 800213c:	f7fe f860 	bl	8000200 <memchr>
 8002140:	9a04      	ldr	r2, [sp, #16]
 8002142:	b9d8      	cbnz	r0, 800217c <_vfiprintf_r+0x12c>
 8002144:	06d1      	lsls	r1, r2, #27
 8002146:	bf44      	itt	mi
 8002148:	2320      	movmi	r3, #32
 800214a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800214e:	0713      	lsls	r3, r2, #28
 8002150:	bf44      	itt	mi
 8002152:	232b      	movmi	r3, #43	; 0x2b
 8002154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002158:	f89a 3000 	ldrb.w	r3, [sl]
 800215c:	2b2a      	cmp	r3, #42	; 0x2a
 800215e:	d015      	beq.n	800218c <_vfiprintf_r+0x13c>
 8002160:	9a07      	ldr	r2, [sp, #28]
 8002162:	4654      	mov	r4, sl
 8002164:	2000      	movs	r0, #0
 8002166:	f04f 0c0a 	mov.w	ip, #10
 800216a:	4621      	mov	r1, r4
 800216c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002170:	3b30      	subs	r3, #48	; 0x30
 8002172:	2b09      	cmp	r3, #9
 8002174:	d94e      	bls.n	8002214 <_vfiprintf_r+0x1c4>
 8002176:	b1b0      	cbz	r0, 80021a6 <_vfiprintf_r+0x156>
 8002178:	9207      	str	r2, [sp, #28]
 800217a:	e014      	b.n	80021a6 <_vfiprintf_r+0x156>
 800217c:	eba0 0308 	sub.w	r3, r0, r8
 8002180:	fa09 f303 	lsl.w	r3, r9, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	9304      	str	r3, [sp, #16]
 8002188:	46a2      	mov	sl, r4
 800218a:	e7d2      	b.n	8002132 <_vfiprintf_r+0xe2>
 800218c:	9b03      	ldr	r3, [sp, #12]
 800218e:	1d19      	adds	r1, r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	9103      	str	r1, [sp, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	bfbb      	ittet	lt
 8002198:	425b      	neglt	r3, r3
 800219a:	f042 0202 	orrlt.w	r2, r2, #2
 800219e:	9307      	strge	r3, [sp, #28]
 80021a0:	9307      	strlt	r3, [sp, #28]
 80021a2:	bfb8      	it	lt
 80021a4:	9204      	strlt	r2, [sp, #16]
 80021a6:	7823      	ldrb	r3, [r4, #0]
 80021a8:	2b2e      	cmp	r3, #46	; 0x2e
 80021aa:	d10c      	bne.n	80021c6 <_vfiprintf_r+0x176>
 80021ac:	7863      	ldrb	r3, [r4, #1]
 80021ae:	2b2a      	cmp	r3, #42	; 0x2a
 80021b0:	d135      	bne.n	800221e <_vfiprintf_r+0x1ce>
 80021b2:	9b03      	ldr	r3, [sp, #12]
 80021b4:	1d1a      	adds	r2, r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	9203      	str	r2, [sp, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bfb8      	it	lt
 80021be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80021c2:	3402      	adds	r4, #2
 80021c4:	9305      	str	r3, [sp, #20]
 80021c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80022a0 <_vfiprintf_r+0x250>
 80021ca:	7821      	ldrb	r1, [r4, #0]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4650      	mov	r0, sl
 80021d0:	f7fe f816 	bl	8000200 <memchr>
 80021d4:	b140      	cbz	r0, 80021e8 <_vfiprintf_r+0x198>
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	eba0 000a 	sub.w	r0, r0, sl
 80021dc:	fa03 f000 	lsl.w	r0, r3, r0
 80021e0:	9b04      	ldr	r3, [sp, #16]
 80021e2:	4303      	orrs	r3, r0
 80021e4:	3401      	adds	r4, #1
 80021e6:	9304      	str	r3, [sp, #16]
 80021e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021ec:	482d      	ldr	r0, [pc, #180]	; (80022a4 <_vfiprintf_r+0x254>)
 80021ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021f2:	2206      	movs	r2, #6
 80021f4:	f7fe f804 	bl	8000200 <memchr>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d03f      	beq.n	800227c <_vfiprintf_r+0x22c>
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <_vfiprintf_r+0x258>)
 80021fe:	bb1b      	cbnz	r3, 8002248 <_vfiprintf_r+0x1f8>
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	3307      	adds	r3, #7
 8002204:	f023 0307 	bic.w	r3, r3, #7
 8002208:	3308      	adds	r3, #8
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220e:	443b      	add	r3, r7
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
 8002212:	e767      	b.n	80020e4 <_vfiprintf_r+0x94>
 8002214:	fb0c 3202 	mla	r2, ip, r2, r3
 8002218:	460c      	mov	r4, r1
 800221a:	2001      	movs	r0, #1
 800221c:	e7a5      	b.n	800216a <_vfiprintf_r+0x11a>
 800221e:	2300      	movs	r3, #0
 8002220:	3401      	adds	r4, #1
 8002222:	9305      	str	r3, [sp, #20]
 8002224:	4619      	mov	r1, r3
 8002226:	f04f 0c0a 	mov.w	ip, #10
 800222a:	4620      	mov	r0, r4
 800222c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002230:	3a30      	subs	r2, #48	; 0x30
 8002232:	2a09      	cmp	r2, #9
 8002234:	d903      	bls.n	800223e <_vfiprintf_r+0x1ee>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0c5      	beq.n	80021c6 <_vfiprintf_r+0x176>
 800223a:	9105      	str	r1, [sp, #20]
 800223c:	e7c3      	b.n	80021c6 <_vfiprintf_r+0x176>
 800223e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002242:	4604      	mov	r4, r0
 8002244:	2301      	movs	r3, #1
 8002246:	e7f0      	b.n	800222a <_vfiprintf_r+0x1da>
 8002248:	ab03      	add	r3, sp, #12
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	462a      	mov	r2, r5
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <_vfiprintf_r+0x25c>)
 8002250:	a904      	add	r1, sp, #16
 8002252:	4630      	mov	r0, r6
 8002254:	f3af 8000 	nop.w
 8002258:	4607      	mov	r7, r0
 800225a:	1c78      	adds	r0, r7, #1
 800225c:	d1d6      	bne.n	800220c <_vfiprintf_r+0x1bc>
 800225e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002260:	07d9      	lsls	r1, r3, #31
 8002262:	d405      	bmi.n	8002270 <_vfiprintf_r+0x220>
 8002264:	89ab      	ldrh	r3, [r5, #12]
 8002266:	059a      	lsls	r2, r3, #22
 8002268:	d402      	bmi.n	8002270 <_vfiprintf_r+0x220>
 800226a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800226c:	f7ff fe55 	bl	8001f1a <__retarget_lock_release_recursive>
 8002270:	89ab      	ldrh	r3, [r5, #12]
 8002272:	065b      	lsls	r3, r3, #25
 8002274:	f53f af12 	bmi.w	800209c <_vfiprintf_r+0x4c>
 8002278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800227a:	e711      	b.n	80020a0 <_vfiprintf_r+0x50>
 800227c:	ab03      	add	r3, sp, #12
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	462a      	mov	r2, r5
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <_vfiprintf_r+0x25c>)
 8002284:	a904      	add	r1, sp, #16
 8002286:	4630      	mov	r0, r6
 8002288:	f000 f880 	bl	800238c <_printf_i>
 800228c:	e7e4      	b.n	8002258 <_vfiprintf_r+0x208>
 800228e:	bf00      	nop
 8002290:	08002838 	.word	0x08002838
 8002294:	08002858 	.word	0x08002858
 8002298:	08002818 	.word	0x08002818
 800229c:	08002878 	.word	0x08002878
 80022a0:	0800287e 	.word	0x0800287e
 80022a4:	08002882 	.word	0x08002882
 80022a8:	00000000 	.word	0x00000000
 80022ac:	0800202b 	.word	0x0800202b

080022b0 <_printf_common>:
 80022b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	4616      	mov	r6, r2
 80022b6:	4699      	mov	r9, r3
 80022b8:	688a      	ldr	r2, [r1, #8]
 80022ba:	690b      	ldr	r3, [r1, #16]
 80022bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bfb8      	it	lt
 80022c4:	4613      	movlt	r3, r2
 80022c6:	6033      	str	r3, [r6, #0]
 80022c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022cc:	4607      	mov	r7, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	b10a      	cbz	r2, 80022d6 <_printf_common+0x26>
 80022d2:	3301      	adds	r3, #1
 80022d4:	6033      	str	r3, [r6, #0]
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	0699      	lsls	r1, r3, #26
 80022da:	bf42      	ittt	mi
 80022dc:	6833      	ldrmi	r3, [r6, #0]
 80022de:	3302      	addmi	r3, #2
 80022e0:	6033      	strmi	r3, [r6, #0]
 80022e2:	6825      	ldr	r5, [r4, #0]
 80022e4:	f015 0506 	ands.w	r5, r5, #6
 80022e8:	d106      	bne.n	80022f8 <_printf_common+0x48>
 80022ea:	f104 0a19 	add.w	sl, r4, #25
 80022ee:	68e3      	ldr	r3, [r4, #12]
 80022f0:	6832      	ldr	r2, [r6, #0]
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	42ab      	cmp	r3, r5
 80022f6:	dc26      	bgt.n	8002346 <_printf_common+0x96>
 80022f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022fc:	1e13      	subs	r3, r2, #0
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	bf18      	it	ne
 8002302:	2301      	movne	r3, #1
 8002304:	0692      	lsls	r2, r2, #26
 8002306:	d42b      	bmi.n	8002360 <_printf_common+0xb0>
 8002308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800230c:	4649      	mov	r1, r9
 800230e:	4638      	mov	r0, r7
 8002310:	47c0      	blx	r8
 8002312:	3001      	adds	r0, #1
 8002314:	d01e      	beq.n	8002354 <_printf_common+0xa4>
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	68e5      	ldr	r5, [r4, #12]
 800231a:	6832      	ldr	r2, [r6, #0]
 800231c:	f003 0306 	and.w	r3, r3, #6
 8002320:	2b04      	cmp	r3, #4
 8002322:	bf08      	it	eq
 8002324:	1aad      	subeq	r5, r5, r2
 8002326:	68a3      	ldr	r3, [r4, #8]
 8002328:	6922      	ldr	r2, [r4, #16]
 800232a:	bf0c      	ite	eq
 800232c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002330:	2500      	movne	r5, #0
 8002332:	4293      	cmp	r3, r2
 8002334:	bfc4      	itt	gt
 8002336:	1a9b      	subgt	r3, r3, r2
 8002338:	18ed      	addgt	r5, r5, r3
 800233a:	2600      	movs	r6, #0
 800233c:	341a      	adds	r4, #26
 800233e:	42b5      	cmp	r5, r6
 8002340:	d11a      	bne.n	8002378 <_printf_common+0xc8>
 8002342:	2000      	movs	r0, #0
 8002344:	e008      	b.n	8002358 <_printf_common+0xa8>
 8002346:	2301      	movs	r3, #1
 8002348:	4652      	mov	r2, sl
 800234a:	4649      	mov	r1, r9
 800234c:	4638      	mov	r0, r7
 800234e:	47c0      	blx	r8
 8002350:	3001      	adds	r0, #1
 8002352:	d103      	bne.n	800235c <_printf_common+0xac>
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	3501      	adds	r5, #1
 800235e:	e7c6      	b.n	80022ee <_printf_common+0x3e>
 8002360:	18e1      	adds	r1, r4, r3
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	2030      	movs	r0, #48	; 0x30
 8002366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800236a:	4422      	add	r2, r4
 800236c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002374:	3302      	adds	r3, #2
 8002376:	e7c7      	b.n	8002308 <_printf_common+0x58>
 8002378:	2301      	movs	r3, #1
 800237a:	4622      	mov	r2, r4
 800237c:	4649      	mov	r1, r9
 800237e:	4638      	mov	r0, r7
 8002380:	47c0      	blx	r8
 8002382:	3001      	adds	r0, #1
 8002384:	d0e6      	beq.n	8002354 <_printf_common+0xa4>
 8002386:	3601      	adds	r6, #1
 8002388:	e7d9      	b.n	800233e <_printf_common+0x8e>
	...

0800238c <_printf_i>:
 800238c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002390:	7e0f      	ldrb	r7, [r1, #24]
 8002392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002394:	2f78      	cmp	r7, #120	; 0x78
 8002396:	4691      	mov	r9, r2
 8002398:	4680      	mov	r8, r0
 800239a:	460c      	mov	r4, r1
 800239c:	469a      	mov	sl, r3
 800239e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023a2:	d807      	bhi.n	80023b4 <_printf_i+0x28>
 80023a4:	2f62      	cmp	r7, #98	; 0x62
 80023a6:	d80a      	bhi.n	80023be <_printf_i+0x32>
 80023a8:	2f00      	cmp	r7, #0
 80023aa:	f000 80d8 	beq.w	800255e <_printf_i+0x1d2>
 80023ae:	2f58      	cmp	r7, #88	; 0x58
 80023b0:	f000 80a3 	beq.w	80024fa <_printf_i+0x16e>
 80023b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023bc:	e03a      	b.n	8002434 <_printf_i+0xa8>
 80023be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023c2:	2b15      	cmp	r3, #21
 80023c4:	d8f6      	bhi.n	80023b4 <_printf_i+0x28>
 80023c6:	a101      	add	r1, pc, #4	; (adr r1, 80023cc <_printf_i+0x40>)
 80023c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023cc:	08002425 	.word	0x08002425
 80023d0:	08002439 	.word	0x08002439
 80023d4:	080023b5 	.word	0x080023b5
 80023d8:	080023b5 	.word	0x080023b5
 80023dc:	080023b5 	.word	0x080023b5
 80023e0:	080023b5 	.word	0x080023b5
 80023e4:	08002439 	.word	0x08002439
 80023e8:	080023b5 	.word	0x080023b5
 80023ec:	080023b5 	.word	0x080023b5
 80023f0:	080023b5 	.word	0x080023b5
 80023f4:	080023b5 	.word	0x080023b5
 80023f8:	08002545 	.word	0x08002545
 80023fc:	08002469 	.word	0x08002469
 8002400:	08002527 	.word	0x08002527
 8002404:	080023b5 	.word	0x080023b5
 8002408:	080023b5 	.word	0x080023b5
 800240c:	08002567 	.word	0x08002567
 8002410:	080023b5 	.word	0x080023b5
 8002414:	08002469 	.word	0x08002469
 8002418:	080023b5 	.word	0x080023b5
 800241c:	080023b5 	.word	0x080023b5
 8002420:	0800252f 	.word	0x0800252f
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	602a      	str	r2, [r5, #0]
 800242c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002434:	2301      	movs	r3, #1
 8002436:	e0a3      	b.n	8002580 <_printf_i+0x1f4>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	6829      	ldr	r1, [r5, #0]
 800243c:	0606      	lsls	r6, r0, #24
 800243e:	f101 0304 	add.w	r3, r1, #4
 8002442:	d50a      	bpl.n	800245a <_printf_i+0xce>
 8002444:	680e      	ldr	r6, [r1, #0]
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	2e00      	cmp	r6, #0
 800244a:	da03      	bge.n	8002454 <_printf_i+0xc8>
 800244c:	232d      	movs	r3, #45	; 0x2d
 800244e:	4276      	negs	r6, r6
 8002450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002454:	485e      	ldr	r0, [pc, #376]	; (80025d0 <_printf_i+0x244>)
 8002456:	230a      	movs	r3, #10
 8002458:	e019      	b.n	800248e <_printf_i+0x102>
 800245a:	680e      	ldr	r6, [r1, #0]
 800245c:	602b      	str	r3, [r5, #0]
 800245e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002462:	bf18      	it	ne
 8002464:	b236      	sxthne	r6, r6
 8002466:	e7ef      	b.n	8002448 <_printf_i+0xbc>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	6820      	ldr	r0, [r4, #0]
 800246c:	1d19      	adds	r1, r3, #4
 800246e:	6029      	str	r1, [r5, #0]
 8002470:	0601      	lsls	r1, r0, #24
 8002472:	d501      	bpl.n	8002478 <_printf_i+0xec>
 8002474:	681e      	ldr	r6, [r3, #0]
 8002476:	e002      	b.n	800247e <_printf_i+0xf2>
 8002478:	0646      	lsls	r6, r0, #25
 800247a:	d5fb      	bpl.n	8002474 <_printf_i+0xe8>
 800247c:	881e      	ldrh	r6, [r3, #0]
 800247e:	4854      	ldr	r0, [pc, #336]	; (80025d0 <_printf_i+0x244>)
 8002480:	2f6f      	cmp	r7, #111	; 0x6f
 8002482:	bf0c      	ite	eq
 8002484:	2308      	moveq	r3, #8
 8002486:	230a      	movne	r3, #10
 8002488:	2100      	movs	r1, #0
 800248a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800248e:	6865      	ldr	r5, [r4, #4]
 8002490:	60a5      	str	r5, [r4, #8]
 8002492:	2d00      	cmp	r5, #0
 8002494:	bfa2      	ittt	ge
 8002496:	6821      	ldrge	r1, [r4, #0]
 8002498:	f021 0104 	bicge.w	r1, r1, #4
 800249c:	6021      	strge	r1, [r4, #0]
 800249e:	b90e      	cbnz	r6, 80024a4 <_printf_i+0x118>
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d04d      	beq.n	8002540 <_printf_i+0x1b4>
 80024a4:	4615      	mov	r5, r2
 80024a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80024aa:	fb03 6711 	mls	r7, r3, r1, r6
 80024ae:	5dc7      	ldrb	r7, [r0, r7]
 80024b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024b4:	4637      	mov	r7, r6
 80024b6:	42bb      	cmp	r3, r7
 80024b8:	460e      	mov	r6, r1
 80024ba:	d9f4      	bls.n	80024a6 <_printf_i+0x11a>
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d10b      	bne.n	80024d8 <_printf_i+0x14c>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	07de      	lsls	r6, r3, #31
 80024c4:	d508      	bpl.n	80024d8 <_printf_i+0x14c>
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	6861      	ldr	r1, [r4, #4]
 80024ca:	4299      	cmp	r1, r3
 80024cc:	bfde      	ittt	le
 80024ce:	2330      	movle	r3, #48	; 0x30
 80024d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80024d8:	1b52      	subs	r2, r2, r5
 80024da:	6122      	str	r2, [r4, #16]
 80024dc:	f8cd a000 	str.w	sl, [sp]
 80024e0:	464b      	mov	r3, r9
 80024e2:	aa03      	add	r2, sp, #12
 80024e4:	4621      	mov	r1, r4
 80024e6:	4640      	mov	r0, r8
 80024e8:	f7ff fee2 	bl	80022b0 <_printf_common>
 80024ec:	3001      	adds	r0, #1
 80024ee:	d14c      	bne.n	800258a <_printf_i+0x1fe>
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f4:	b004      	add	sp, #16
 80024f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fa:	4835      	ldr	r0, [pc, #212]	; (80025d0 <_printf_i+0x244>)
 80024fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002500:	6829      	ldr	r1, [r5, #0]
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	f851 6b04 	ldr.w	r6, [r1], #4
 8002508:	6029      	str	r1, [r5, #0]
 800250a:	061d      	lsls	r5, r3, #24
 800250c:	d514      	bpl.n	8002538 <_printf_i+0x1ac>
 800250e:	07df      	lsls	r7, r3, #31
 8002510:	bf44      	itt	mi
 8002512:	f043 0320 	orrmi.w	r3, r3, #32
 8002516:	6023      	strmi	r3, [r4, #0]
 8002518:	b91e      	cbnz	r6, 8002522 <_printf_i+0x196>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f023 0320 	bic.w	r3, r3, #32
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	2310      	movs	r3, #16
 8002524:	e7b0      	b.n	8002488 <_printf_i+0xfc>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	6023      	str	r3, [r4, #0]
 800252e:	2378      	movs	r3, #120	; 0x78
 8002530:	4828      	ldr	r0, [pc, #160]	; (80025d4 <_printf_i+0x248>)
 8002532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002536:	e7e3      	b.n	8002500 <_printf_i+0x174>
 8002538:	0659      	lsls	r1, r3, #25
 800253a:	bf48      	it	mi
 800253c:	b2b6      	uxthmi	r6, r6
 800253e:	e7e6      	b.n	800250e <_printf_i+0x182>
 8002540:	4615      	mov	r5, r2
 8002542:	e7bb      	b.n	80024bc <_printf_i+0x130>
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	6826      	ldr	r6, [r4, #0]
 8002548:	6961      	ldr	r1, [r4, #20]
 800254a:	1d18      	adds	r0, r3, #4
 800254c:	6028      	str	r0, [r5, #0]
 800254e:	0635      	lsls	r5, r6, #24
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	d501      	bpl.n	8002558 <_printf_i+0x1cc>
 8002554:	6019      	str	r1, [r3, #0]
 8002556:	e002      	b.n	800255e <_printf_i+0x1d2>
 8002558:	0670      	lsls	r0, r6, #25
 800255a:	d5fb      	bpl.n	8002554 <_printf_i+0x1c8>
 800255c:	8019      	strh	r1, [r3, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	6123      	str	r3, [r4, #16]
 8002562:	4615      	mov	r5, r2
 8002564:	e7ba      	b.n	80024dc <_printf_i+0x150>
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	602a      	str	r2, [r5, #0]
 800256c:	681d      	ldr	r5, [r3, #0]
 800256e:	6862      	ldr	r2, [r4, #4]
 8002570:	2100      	movs	r1, #0
 8002572:	4628      	mov	r0, r5
 8002574:	f7fd fe44 	bl	8000200 <memchr>
 8002578:	b108      	cbz	r0, 800257e <_printf_i+0x1f2>
 800257a:	1b40      	subs	r0, r0, r5
 800257c:	6060      	str	r0, [r4, #4]
 800257e:	6863      	ldr	r3, [r4, #4]
 8002580:	6123      	str	r3, [r4, #16]
 8002582:	2300      	movs	r3, #0
 8002584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002588:	e7a8      	b.n	80024dc <_printf_i+0x150>
 800258a:	6923      	ldr	r3, [r4, #16]
 800258c:	462a      	mov	r2, r5
 800258e:	4649      	mov	r1, r9
 8002590:	4640      	mov	r0, r8
 8002592:	47d0      	blx	sl
 8002594:	3001      	adds	r0, #1
 8002596:	d0ab      	beq.n	80024f0 <_printf_i+0x164>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	079b      	lsls	r3, r3, #30
 800259c:	d413      	bmi.n	80025c6 <_printf_i+0x23a>
 800259e:	68e0      	ldr	r0, [r4, #12]
 80025a0:	9b03      	ldr	r3, [sp, #12]
 80025a2:	4298      	cmp	r0, r3
 80025a4:	bfb8      	it	lt
 80025a6:	4618      	movlt	r0, r3
 80025a8:	e7a4      	b.n	80024f4 <_printf_i+0x168>
 80025aa:	2301      	movs	r3, #1
 80025ac:	4632      	mov	r2, r6
 80025ae:	4649      	mov	r1, r9
 80025b0:	4640      	mov	r0, r8
 80025b2:	47d0      	blx	sl
 80025b4:	3001      	adds	r0, #1
 80025b6:	d09b      	beq.n	80024f0 <_printf_i+0x164>
 80025b8:	3501      	adds	r5, #1
 80025ba:	68e3      	ldr	r3, [r4, #12]
 80025bc:	9903      	ldr	r1, [sp, #12]
 80025be:	1a5b      	subs	r3, r3, r1
 80025c0:	42ab      	cmp	r3, r5
 80025c2:	dcf2      	bgt.n	80025aa <_printf_i+0x21e>
 80025c4:	e7eb      	b.n	800259e <_printf_i+0x212>
 80025c6:	2500      	movs	r5, #0
 80025c8:	f104 0619 	add.w	r6, r4, #25
 80025cc:	e7f5      	b.n	80025ba <_printf_i+0x22e>
 80025ce:	bf00      	nop
 80025d0:	08002889 	.word	0x08002889
 80025d4:	0800289a 	.word	0x0800289a

080025d8 <_putc_r>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	460d      	mov	r5, r1
 80025dc:	4614      	mov	r4, r2
 80025de:	4606      	mov	r6, r0
 80025e0:	b118      	cbz	r0, 80025ea <_putc_r+0x12>
 80025e2:	6983      	ldr	r3, [r0, #24]
 80025e4:	b90b      	cbnz	r3, 80025ea <_putc_r+0x12>
 80025e6:	f7ff fbf9 	bl	8001ddc <__sinit>
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <_putc_r+0x84>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d124      	bne.n	800263a <_putc_r+0x62>
 80025f0:	6874      	ldr	r4, [r6, #4]
 80025f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025f4:	07d8      	lsls	r0, r3, #31
 80025f6:	d405      	bmi.n	8002604 <_putc_r+0x2c>
 80025f8:	89a3      	ldrh	r3, [r4, #12]
 80025fa:	0599      	lsls	r1, r3, #22
 80025fc:	d402      	bmi.n	8002604 <_putc_r+0x2c>
 80025fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002600:	f7ff fc8a 	bl	8001f18 <__retarget_lock_acquire_recursive>
 8002604:	68a3      	ldr	r3, [r4, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	60a3      	str	r3, [r4, #8]
 800260c:	da05      	bge.n	800261a <_putc_r+0x42>
 800260e:	69a2      	ldr	r2, [r4, #24]
 8002610:	4293      	cmp	r3, r2
 8002612:	db1c      	blt.n	800264e <_putc_r+0x76>
 8002614:	b2eb      	uxtb	r3, r5
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d019      	beq.n	800264e <_putc_r+0x76>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	6022      	str	r2, [r4, #0]
 8002620:	701d      	strb	r5, [r3, #0]
 8002622:	b2ed      	uxtb	r5, r5
 8002624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002626:	07da      	lsls	r2, r3, #31
 8002628:	d405      	bmi.n	8002636 <_putc_r+0x5e>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	059b      	lsls	r3, r3, #22
 800262e:	d402      	bmi.n	8002636 <_putc_r+0x5e>
 8002630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002632:	f7ff fc72 	bl	8001f1a <__retarget_lock_release_recursive>
 8002636:	4628      	mov	r0, r5
 8002638:	bd70      	pop	{r4, r5, r6, pc}
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <_putc_r+0x88>)
 800263c:	429c      	cmp	r4, r3
 800263e:	d101      	bne.n	8002644 <_putc_r+0x6c>
 8002640:	68b4      	ldr	r4, [r6, #8]
 8002642:	e7d6      	b.n	80025f2 <_putc_r+0x1a>
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_putc_r+0x8c>)
 8002646:	429c      	cmp	r4, r3
 8002648:	bf08      	it	eq
 800264a:	68f4      	ldreq	r4, [r6, #12]
 800264c:	e7d1      	b.n	80025f2 <_putc_r+0x1a>
 800264e:	4629      	mov	r1, r5
 8002650:	4622      	mov	r2, r4
 8002652:	4630      	mov	r0, r6
 8002654:	f7ff f9ec 	bl	8001a30 <__swbuf_r>
 8002658:	4605      	mov	r5, r0
 800265a:	e7e3      	b.n	8002624 <_putc_r+0x4c>
 800265c:	08002838 	.word	0x08002838
 8002660:	08002858 	.word	0x08002858
 8002664:	08002818 	.word	0x08002818

08002668 <__sread>:
 8002668:	b510      	push	{r4, lr}
 800266a:	460c      	mov	r4, r1
 800266c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002670:	f000 f894 	bl	800279c <_read_r>
 8002674:	2800      	cmp	r0, #0
 8002676:	bfab      	itete	ge
 8002678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800267a:	89a3      	ldrhlt	r3, [r4, #12]
 800267c:	181b      	addge	r3, r3, r0
 800267e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002682:	bfac      	ite	ge
 8002684:	6563      	strge	r3, [r4, #84]	; 0x54
 8002686:	81a3      	strhlt	r3, [r4, #12]
 8002688:	bd10      	pop	{r4, pc}

0800268a <__swrite>:
 800268a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800268e:	461f      	mov	r7, r3
 8002690:	898b      	ldrh	r3, [r1, #12]
 8002692:	05db      	lsls	r3, r3, #23
 8002694:	4605      	mov	r5, r0
 8002696:	460c      	mov	r4, r1
 8002698:	4616      	mov	r6, r2
 800269a:	d505      	bpl.n	80026a8 <__swrite+0x1e>
 800269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a0:	2302      	movs	r3, #2
 80026a2:	2200      	movs	r2, #0
 80026a4:	f000 f868 	bl	8002778 <_lseek_r>
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	4632      	mov	r2, r6
 80026b6:	463b      	mov	r3, r7
 80026b8:	4628      	mov	r0, r5
 80026ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026be:	f000 b817 	b.w	80026f0 <_write_r>

080026c2 <__sseek>:
 80026c2:	b510      	push	{r4, lr}
 80026c4:	460c      	mov	r4, r1
 80026c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ca:	f000 f855 	bl	8002778 <_lseek_r>
 80026ce:	1c43      	adds	r3, r0, #1
 80026d0:	89a3      	ldrh	r3, [r4, #12]
 80026d2:	bf15      	itete	ne
 80026d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80026d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026de:	81a3      	strheq	r3, [r4, #12]
 80026e0:	bf18      	it	ne
 80026e2:	81a3      	strhne	r3, [r4, #12]
 80026e4:	bd10      	pop	{r4, pc}

080026e6 <__sclose>:
 80026e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ea:	f000 b813 	b.w	8002714 <_close_r>
	...

080026f0 <_write_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4d07      	ldr	r5, [pc, #28]	; (8002710 <_write_r+0x20>)
 80026f4:	4604      	mov	r4, r0
 80026f6:	4608      	mov	r0, r1
 80026f8:	4611      	mov	r1, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	602a      	str	r2, [r5, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f7fe ff27 	bl	8001552 <_write>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_write_r+0x1e>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_write_r+0x1e>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	200000e0 	.word	0x200000e0

08002714 <_close_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d06      	ldr	r5, [pc, #24]	; (8002730 <_close_r+0x1c>)
 8002718:	2300      	movs	r3, #0
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7fe ff33 	bl	800158a <_close>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_close_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_close_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200000e0 	.word	0x200000e0

08002734 <_fstat_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	4d07      	ldr	r5, [pc, #28]	; (8002754 <_fstat_r+0x20>)
 8002738:	2300      	movs	r3, #0
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	602b      	str	r3, [r5, #0]
 8002742:	f7fe ff2d 	bl	80015a0 <_fstat>
 8002746:	1c43      	adds	r3, r0, #1
 8002748:	d102      	bne.n	8002750 <_fstat_r+0x1c>
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	b103      	cbz	r3, 8002750 <_fstat_r+0x1c>
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	bd38      	pop	{r3, r4, r5, pc}
 8002752:	bf00      	nop
 8002754:	200000e0 	.word	0x200000e0

08002758 <_isatty_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4d06      	ldr	r5, [pc, #24]	; (8002774 <_isatty_r+0x1c>)
 800275c:	2300      	movs	r3, #0
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	602b      	str	r3, [r5, #0]
 8002764:	f7fe ff2b 	bl	80015be <_isatty>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d102      	bne.n	8002772 <_isatty_r+0x1a>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <_isatty_r+0x1a>
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	200000e0 	.word	0x200000e0

08002778 <_lseek_r>:
 8002778:	b538      	push	{r3, r4, r5, lr}
 800277a:	4d07      	ldr	r5, [pc, #28]	; (8002798 <_lseek_r+0x20>)
 800277c:	4604      	mov	r4, r0
 800277e:	4608      	mov	r0, r1
 8002780:	4611      	mov	r1, r2
 8002782:	2200      	movs	r2, #0
 8002784:	602a      	str	r2, [r5, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f7fe ff23 	bl	80015d2 <_lseek>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_lseek_r+0x1e>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_lseek_r+0x1e>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	200000e0 	.word	0x200000e0

0800279c <_read_r>:
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	4d07      	ldr	r5, [pc, #28]	; (80027bc <_read_r+0x20>)
 80027a0:	4604      	mov	r4, r0
 80027a2:	4608      	mov	r0, r1
 80027a4:	4611      	mov	r1, r2
 80027a6:	2200      	movs	r2, #0
 80027a8:	602a      	str	r2, [r5, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f7fe feb4 	bl	8001518 <_read>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d102      	bne.n	80027ba <_read_r+0x1e>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	b103      	cbz	r3, 80027ba <_read_r+0x1e>
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	bd38      	pop	{r3, r4, r5, pc}
 80027bc:	200000e0 	.word	0x200000e0

080027c0 <_init>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr

080027cc <_fini>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr
