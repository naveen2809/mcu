
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a4  080031a4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080031a4  080031a4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a4  080031a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080031ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000068  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ab6  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dad  00000000  00000000  00023b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  00024918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000350  00000000  00000000  00024d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024bc  00000000  00000000  00025070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005353  00000000  00000000  0002752c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e1b7  00000000  00000000  0002c87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003aa36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016b0  00000000  00000000  0003aa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003074 	.word	0x08003074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08003074 	.word	0x08003074

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;								//PCF8574 I/O Expander Address
//uint8_t SlaveAddress = 0x50;								//AT24CXX EEPROM Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f001 fe73 	bl	8001fbc <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fabc 	bl	8001864 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 f941 	bl	8000574 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fb66 	bl	80009c4 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	200000a4 	.word	0x200000a4

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fe53 	bl	8001fbc <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 faa4 	bl	8001864 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fb60 	bl	80009e6 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fb5b 	bl	80009e6 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fb9c 	bl	8000a72 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fb97 	bl	8000a72 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fbcb 	bl	8000ae4 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fbc6 	bl	8000ae4 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fc07 	bl	8000b70 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 fc02 	bl	8000b70 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 fbd9 	bl	8000b28 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 fbd4 	bl	8000b28 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fa63 	bl	8001864 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fc06 	bl	8000bb8 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd17 	bl	8000de6 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc51 	bl	8000c64 <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fd91 	bl	8000f08 <lcd_pcf8574_send_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <configure_external_interrupt>:
#include "external_interrupt_config.h"

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name);

void configure_external_interrupt(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0

	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <configure_external_interrupt+0xb8>)
 80003f8:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 80003fa:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <configure_external_interrupt+0xbc>)
 80003fc:	613b      	str	r3, [r7, #16]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <configure_external_interrupt+0xc0>)
 8000400:	60fb      	str	r3, [r7, #12]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <configure_external_interrupt+0xc4>)
 8000404:	60bb      	str	r3, [r7, #8]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <configure_external_interrupt+0xc8>)
 8000408:	607b      	str	r3, [r7, #4]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(INTERRUPT_PORT);
 800040a:	482c      	ldr	r0, [pc, #176]	; (80004bc <configure_external_interrupt+0xcc>)
 800040c:	f001 fa2a 	bl	8001864 <EnablePeriClk>
	GPIOSetMode(INTERRUPT_PORT,INTERRUPT_PIN,GPIO_MODE_INPUT);
 8000410:	2200      	movs	r2, #0
 8000412:	2100      	movs	r1, #0
 8000414:	4829      	ldr	r0, [pc, #164]	; (80004bc <configure_external_interrupt+0xcc>)
 8000416:	f000 fae6 	bl	80009e6 <GPIOSetMode>
	GPIOSetOutputType(INTERRUPT_PORT,INTERRUPT_PIN,GPIO_OPTYPE_OD);
 800041a:	2201      	movs	r2, #1
 800041c:	2100      	movs	r1, #0
 800041e:	4827      	ldr	r0, [pc, #156]	; (80004bc <configure_external_interrupt+0xcc>)
 8000420:	f000 fb60 	bl	8000ae4 <GPIOSetOutputType>
	GPIOSetOutputSpeed(INTERRUPT_PORT,INTERRUPT_PIN,GPIO_OPSPEED_HIGH);
 8000424:	2202      	movs	r2, #2
 8000426:	2100      	movs	r1, #0
 8000428:	4824      	ldr	r0, [pc, #144]	; (80004bc <configure_external_interrupt+0xcc>)
 800042a:	f000 fba1 	bl	8000b70 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(INTERRUPT_PORT,INTERRUPT_PIN,GPIO_PULL_UP);
 800042e:	2201      	movs	r2, #1
 8000430:	2100      	movs	r1, #0
 8000432:	4822      	ldr	r0, [pc, #136]	; (80004bc <configure_external_interrupt+0xcc>)
 8000434:	f000 fb78 	bl	8000b28 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << INTERRUPT_PIN);  	// Setting the Interrupt Mask Register
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f043 0201 	orr.w	r2, r3, #1
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	601a      	str	r2, [r3, #0]
		*pEXTI_RTSR |= (1 << INTERRUPT_PIN); 	// Setting the Rising Trigger Set Register
	}

	if(EXTI_FALLING_TRIGGER_ENABLE == TRUE)
	{
		*pEXTI_FTSR |= (1 << INTERRUPT_PIN); 	// Setting the Falling Trigger Set Register
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f043 0201 	orr.w	r2, r3, #1
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	601a      	str	r2, [r3, #0]

	OFFSET = INTERRUPT_PIN%4;
 800045c:	2300      	movs	r3, #0
 800045e:	603b      	str	r3, [r7, #0]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	607b      	str	r3, [r7, #4]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	210f      	movs	r1, #15
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	43d2      	mvns	r2, r2
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(INTERRUPT_PORT) << OFFSET*4);
 8000480:	480e      	ldr	r0, [pc, #56]	; (80004bc <configure_external_interrupt+0xcc>)
 8000482:	f000 f81d 	bl	80004c0 <gpio_port_name_to_num>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	409a      	lsls	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
 800049a:	2006      	movs	r0, #6
 800049c:	f001 fba6 	bl	8001bec <NVIC_EnableIRQ>
}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40023844 	.word	0x40023844
 80004ac:	40013c00 	.word	0x40013c00
 80004b0:	40013c08 	.word	0x40013c08
 80004b4:	40013c0c 	.word	0x40013c0c
 80004b8:	40013808 	.word	0x40013808
 80004bc:	40020000 	.word	0x40020000

080004c0 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a21      	ldr	r2, [pc, #132]	; (8000550 <gpio_port_name_to_num+0x90>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d102      	bne.n	80004d6 <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e036      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <gpio_port_name_to_num+0x94>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d102      	bne.n	80004e4 <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 80004de:	2301      	movs	r3, #1
 80004e0:	73fb      	strb	r3, [r7, #15]
 80004e2:	e02f      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <gpio_port_name_to_num+0x98>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d102      	bne.n	80004f2 <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 80004ec:	2302      	movs	r3, #2
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e028      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <gpio_port_name_to_num+0x9c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d102      	bne.n	8000500 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 80004fa:	2303      	movs	r3, #3
 80004fc:	73fb      	strb	r3, [r7, #15]
 80004fe:	e021      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <gpio_port_name_to_num+0xa0>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d102      	bne.n	800050e <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	73fb      	strb	r3, [r7, #15]
 800050c:	e01a      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <gpio_port_name_to_num+0xa4>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d102      	bne.n	800051c <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 8000516:	2305      	movs	r3, #5
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e013      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <gpio_port_name_to_num+0xa8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d102      	bne.n	800052a <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 8000524:	2306      	movs	r3, #6
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e00c      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <gpio_port_name_to_num+0xac>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d102      	bne.n	8000538 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 8000532:	2307      	movs	r3, #7
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e005      	b.n	8000544 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <gpio_port_name_to_num+0xb0>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d101      	bne.n	8000544 <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000540:	2308      	movs	r3, #8
 8000542:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40020000 	.word	0x40020000
 8000554:	40020400 	.word	0x40020400
 8000558:	40020800 	.word	0x40020800
 800055c:	40020c00 	.word	0x40020c00
 8000560:	40021000 	.word	0x40021000
 8000564:	40021400 	.word	0x40021400
 8000568:	40021800 	.word	0x40021800
 800056c:	40021c00 	.word	0x40021c00
 8000570:	40022000 	.word	0x40022000

08000574 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6852      	ldr	r2, [r2, #4]
 8000584:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	6892      	ldr	r2, [r2, #8]
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7b1b      	ldrb	r3, [r3, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d16a      	bne.n	800066e <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6a1a      	ldr	r2, [r3, #32]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f042 0201 	orr.w	r2, r2, #1
 80005a6:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7b5b      	ldrb	r3, [r3, #13]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d11c      	bne.n	80005ea <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f022 0203 	bic.w	r2, r2, #3
 80005be:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6912      	ldr	r2, [r2, #16]
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005d8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80005e8:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7b5b      	ldrb	r3, [r3, #13]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d11c      	bne.n	800062c <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f022 0203 	bic.w	r2, r2, #3
 8000600:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	6912      	ldr	r2, [r2, #16]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800061a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	699a      	ldr	r2, [r3, #24]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800062a:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7b5b      	ldrb	r3, [r3, #13]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d11c      	bne.n	800066e <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f022 0203 	bic.w	r2, r2, #3
 8000642:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6912      	ldr	r2, [r2, #16]
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800065c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	699a      	ldr	r2, [r3, #24]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800066c:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7d1b      	ldrb	r3, [r3, #20]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 80bf 	bne.w	80007f6 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7d5b      	ldrb	r3, [r3, #21]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d124      	bne.n	80006ca <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800068e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	6992      	ldr	r2, [r2, #24]
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	699a      	ldr	r2, [r3, #24]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006a8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80006b8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6a1a      	ldr	r2, [r3, #32]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f042 0210 	orr.w	r2, r2, #16
 80006c8:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d5b      	ldrb	r3, [r3, #21]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d124      	bne.n	800071c <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006e0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6992      	ldr	r2, [r2, #24]
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006fa:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800070a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a1a      	ldr	r2, [r3, #32]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0210 	orr.w	r2, r2, #16
 800071a:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7d5b      	ldrb	r3, [r3, #21]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d124      	bne.n	800076e <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000732:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6992      	ldr	r2, [r2, #24]
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800074c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800075c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a1a      	ldr	r2, [r3, #32]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 0210 	orr.w	r2, r2, #16
 800076c:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7d5b      	ldrb	r3, [r3, #21]
 8000772:	2b08      	cmp	r3, #8
 8000774:	d13f      	bne.n	80007f6 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	699a      	ldr	r2, [r3, #24]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000784:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000794:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	699a      	ldr	r2, [r3, #24]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80007a4:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6a1a      	ldr	r2, [r3, #32]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f022 0220 	bic.w	r2, r2, #32
 80007b4:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6a1a      	ldr	r2, [r3, #32]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007c4:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80007d4:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f042 0204 	orr.w	r2, r2, #4
 80007e4:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f042 0210 	orr.w	r2, r2, #16
 80007f4:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7f1b      	ldrb	r3, [r3, #28]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d16a      	bne.n	80008d4 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a1a      	ldr	r2, [r3, #32]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800080c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7f5b      	ldrb	r3, [r3, #29]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d11c      	bne.n	8000850 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f022 0203 	bic.w	r2, r2, #3
 8000824:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6a12      	ldr	r2, [r2, #32]
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	69da      	ldr	r2, [r3, #28]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800083e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	69da      	ldr	r2, [r3, #28]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800084e:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7f5b      	ldrb	r3, [r3, #29]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d11c      	bne.n	8000892 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	69da      	ldr	r2, [r3, #28]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f022 0203 	bic.w	r2, r2, #3
 8000866:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	6a12      	ldr	r2, [r2, #32]
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69da      	ldr	r2, [r3, #28]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000880:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000890:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7f5b      	ldrb	r3, [r3, #29]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d11c      	bne.n	80008d4 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69da      	ldr	r2, [r3, #28]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0203 	bic.w	r2, r2, #3
 80008a8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	6a12      	ldr	r2, [r2, #32]
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008c2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80008d2:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d16d      	bne.n	80009ba <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6a1a      	ldr	r2, [r3, #32]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ec:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d11c      	bne.n	8000932 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	69da      	ldr	r2, [r3, #28]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000906:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69da      	ldr	r2, [r3, #28]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000920:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000930:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000938:	2b03      	cmp	r3, #3
 800093a:	d11c      	bne.n	8000976 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69da      	ldr	r2, [r3, #28]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800094a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000964:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000974:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800097c:	2b04      	cmp	r3, #4
 800097e:	d11c      	bne.n	80009ba <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800098e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	69da      	ldr	r2, [r3, #28]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009a8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80009b8:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70fb      	strb	r3, [r7, #3]
 80009f2:	4613      	mov	r3, r2
 80009f4:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	78fa      	ldrb	r2, [r7, #3]
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	2103      	movs	r1, #3
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	78b9      	ldrb	r1, [r7, #2]
 8000a16:	78fa      	ldrb	r2, [r7, #3]
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]

}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	460b      	mov	r3, r1
 8000a38:	70fb      	strb	r3, [r7, #3]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	78fa      	ldrb	r2, [r7, #3]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	78b9      	ldrb	r1, [r7, #2]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a62:	431a      	orrs	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	615a      	str	r2, [r3, #20]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	70fb      	strb	r3, [r7, #3]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000a94:	7afa      	ldrb	r2, [r7, #11]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3208      	adds	r2, #8
 8000a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9e:	7aba      	ldrb	r2, [r7, #10]
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	7afa      	ldrb	r2, [r7, #11]
 8000aae:	4019      	ands	r1, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000ab8:	7afa      	ldrb	r2, [r7, #11]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3208      	adds	r2, #8
 8000abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac2:	78b9      	ldrb	r1, [r7, #2]
 8000ac4:	7aba      	ldrb	r2, [r7, #10]
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	7afa      	ldrb	r2, [r7, #11]
 8000ad0:	4319      	orrs	r1, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
 8000af0:	4613      	mov	r3, r2
 8000af2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	78fa      	ldrb	r2, [r7, #3]
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	78b9      	ldrb	r1, [r7, #2]
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	fa01 f202 	lsl.w	r2, r1, r2
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	605a      	str	r2, [r3, #4]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	78fa      	ldrb	r2, [r7, #3]
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	2103      	movs	r1, #3
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	43d2      	mvns	r2, r2
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	78b9      	ldrb	r1, [r7, #2]
 8000b58:	78fa      	ldrb	r2, [r7, #3]
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	431a      	orrs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	60da      	str	r2, [r3, #12]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	0052      	lsls	r2, r2, #1
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	43d2      	mvns	r2, r2
 8000b94:	401a      	ands	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	78b9      	ldrb	r1, [r7, #2]
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	609a      	str	r2, [r3, #8]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	69da      	ldr	r2, [r3, #28]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	03db      	lsls	r3, r3, #15
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d10d      	bne.n	8000c20 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	039b      	lsls	r3, r3, #14
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c28:	f023 030f 	bic.w	r3, r3, #15
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	431a      	orrs	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	601a      	str	r2, [r3, #0]

}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f043 0201 	orr.w	r2, r3, #1
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 f84c 	bl	8000d36 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8000c9e:	bf00      	nop
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f000 f869 	bl	8000d7a <I2C_GetFlagStatus>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f8      	beq.n	8000ca0 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f86f 	bl	8000da4 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8000cc6:	bf00      	nop
 8000cc8:	2102      	movs	r1, #2
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f000 f855 	bl	8000d7a <I2C_GetFlagStatus>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f8      	beq.n	8000cc8 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f874 	bl	8000dc4 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8000cdc:	e012      	b.n	8000d04 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8000cde:	bf00      	nop
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 f849 	bl	8000d7a <I2C_GetFlagStatus>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f8      	beq.n	8000ce0 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
		Len--;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1e9      	bne.n	8000cde <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8000d0a:	bf00      	nop
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f000 f833 	bl	8000d7a <I2C_GetFlagStatus>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d1f8      	bne.n	8000d0c <I2CMasterSendData+0x86>
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f82c 	bl	8000d7a <I2C_GetFlagStatus>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d1f1      	bne.n	8000d0c <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 f815 	bl	8000d58 <I2C_SendStopBit>

}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8000db4:	78fa      	ldrb	r2, [r7, #3]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	621a      	str	r2, [r3, #32]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8000e0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e0e:	f7ff fa3f 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e12:	2030      	movs	r0, #48	; 0x30
 8000e14:	f000 f846 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8000e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e1c:	f7ff fa38 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e20:	2030      	movs	r0, #48	; 0x30
 8000e22:	f000 f83f 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8000e26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e2a:	f7ff fa31 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8000e2e:	2030      	movs	r0, #48	; 0x30
 8000e30:	f000 f838 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8000e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e38:	f7ff fa2a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	f000 f831 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8000e42:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e46:	f7ff fa23 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e4a:	2028      	movs	r0, #40	; 0x28
 8000e4c:	f000 f82a 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e54:	f7ff fa1c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e58:	2008      	movs	r0, #8
 8000e5a:	f000 f823 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e62:	f7ff fa15 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f81c 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e70:	f7ff fa0e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f000 f815 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e7e:	f7ff fa07 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e82:	2006      	movs	r0, #6
 8000e84:	f000 f80e 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e88:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e8c:	f7ff fa00 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e90:	200c      	movs	r0, #12
 8000e92:	f000 f807 	bl	8000ea4 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8000e96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e9a:	f7ff f9f9 	bl	8000290 <delay_us>

	return;
 8000e9e:	bf00      	nop
}
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f043 030c 	orr.w	r3, r3, #12
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	f043 030c 	orr.w	r3, r3, #12
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <lcd_pcf8574_send_cmd+0x5c>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <lcd_pcf8574_send_cmd+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f107 0108 	add.w	r1, r7, #8
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	f7ff fec8 	bl	8000c86 <I2CMasterSendData>

	return;
 8000ef6:	bf00      	nop
}
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <lcd_pcf8574_send_data+0x5c>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <lcd_pcf8574_send_data+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f107 0108 	add.w	r1, r7, #8
 8000f54:	2204      	movs	r2, #4
 8000f56:	f7ff fe96 	bl	8000c86 <I2CMasterSendData>

	return;
 8000f5a:	bf00      	nop
}
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff ff97 	bl	8000ea4 <lcd_pcf8574_send_cmd>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff ff90 	bl	8000ea4 <lcd_pcf8574_send_cmd>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d108      	bne.n	8000fb0 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	2b27      	cmp	r3, #39	; 0x27
 8000fa2:	d802      	bhi.n	8000faa <lcd_pcf8574_set_position+0x22>
			position = col;
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e011      	b.n	8000fce <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e00e      	b.n	8000fce <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d109      	bne.n	8000fca <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	2b27      	cmp	r3, #39	; 0x27
 8000fba:	d803      	bhi.n	8000fc4 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	3340      	adds	r3, #64	; 0x40
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e004      	b.n	8000fce <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8000fc4:	2340      	movs	r3, #64	; 0x40
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e001      	b.n	8000fce <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd4:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff63 	bl	8000ea4 <lcd_pcf8574_send_cmd>

	return;
 8000fde:	bf00      	nop
}
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <RTC_Config_Calendar>:
extern void RTC_Alarm_Interrupt_Callback(void);
static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_Config_Calendar(struct RTC_Config_t *pRTCConfig)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint32_t time_value = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
	uint32_t date_value = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]

	//1. Configure and Enable the RTC Clock
	//1.a Enable Write Access to the RTC Registers by enabling DBP bit in PWR_CR Register
	*pRCCPeriClkReg |= (1 << RCC_APB1ENR_PWR);
 8000ff8:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <RTC_Config_Calendar+0x1d0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <RTC_Config_Calendar+0x1d0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001006:	601a      	str	r2, [r3, #0]
	*pPWR_CR |= (1 << PWR_CR_DBP);
 8001008:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <RTC_Config_Calendar+0x1d4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <RTC_Config_Calendar+0x1d4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001016:	601a      	str	r2, [r3, #0]

	stm32_rtc->RTC_WPR = 0xCA;
 8001018:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	22ca      	movs	r2, #202	; 0xca
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
	stm32_rtc->RTC_WPR = 0x53;
 8001020:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2253      	movs	r2, #83	; 0x53
 8001026:	625a      	str	r2, [r3, #36]	; 0x24

	//1.a Configure the RTC Clock Source in in RCC_BDCR

	*pRCC_BDCR &= ~(3 << RCC_BDCR_RTCSEL);
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001036:	601a      	str	r2, [r3, #0]
	*pRCC_BDCR |= (pRTCConfig->RTCClockSource << RCC_BDCR_RTCSEL);
 8001038:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	4619      	mov	r1, r3
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

	//1.b If the RTC Clock Source is HSE, Turn On the HSE Oscillator
	//Also, configure the HSE PreScaler to generate 1 MHz RTCCLK
	if(pRTCConfig->RTCClockSource == RTC_CLK_SRC_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d122      	bne.n	800109c <RTC_Config_Calendar+0xb4>
	{
		//Turning on the HSE Oscillator
		*pRCC_CR |= (1 << HSE_ON_BITPOS);					//Turning on the HSE Oscillator
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <RTC_Config_Calendar+0x1e0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <RTC_Config_Calendar+0x1e0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001064:	601a      	str	r2, [r3, #0]
		while(!(*pRCC_CR & (1 << HSE_CHECK_BITPOS)));		//Checking whether HSE Oscillator is turned on and is stable
 8001066:	bf00      	nop
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <RTC_Config_Calendar+0x1e0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f8      	beq.n	8001068 <RTC_Config_Calendar+0x80>

		//Configure the HSE PreScaler to generate 1 MHz RTCCLK
		*pRCC_CFGR &= ~(31 << RCC_CFGR_RTCPRE);
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <RTC_Config_Calendar+0x1e4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <RTC_Config_Calendar+0x1e4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001084:	601a      	str	r2, [r3, #0]
		*pRCC_CFGR |= (pRTCConfig->RTCClockHSEPrescaler << RCC_CFGR_RTCPRE);
 8001086:	4b51      	ldr	r3, [pc, #324]	; (80011cc <RTC_Config_Calendar+0x1e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	4619      	mov	r1, r3
 8001094:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <RTC_Config_Calendar+0x1e4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
	}

	//1.c Enable the RTC Clock in RCC_BDCR
	*pRCC_BDCR |= (1 << RCC_BDCR_RTCEN);
 800109c:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <RTC_Config_Calendar+0x1dc>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010aa:	601a      	str	r2, [r3, #0]

	//2. Configure the RTC Calendar Parameters

	//2.b Enable the Initialization Mode
	stm32_rtc->RTC_ISR |= (1 << RTC_ISR_INIT);
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ba:	60da      	str	r2, [r3, #12]
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_INITF) & 0x1));
 80010bc:	bf00      	nop
 80010be:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f7      	beq.n	80010be <RTC_Config_Calendar+0xd6>

	//2.c Configure the PreScaler Values in RTC_PRER Register
	stm32_rtc->RTC_PRER &= ~(0x7FFF << RTC_PRER_PREDIV_S);
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010e0:	6113      	str	r3, [r2, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerS << RTC_PRER_PREDIV_S);
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	611a      	str	r2, [r3, #16]

	stm32_rtc->RTC_PRER &= ~(0x7F << RTC_PRER_PREDIV_A);
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001104:	611a      	str	r2, [r3, #16]
	stm32_rtc->RTC_PRER |= (pRTCConfig->RTCClockPrescalerA << RTC_PRER_PREDIV_A);
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	041b      	lsls	r3, r3, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	611a      	str	r2, [r3, #16]

	//2.d Configure the Time Parameters in RTC_TR Register
	time_value = (pRTCConfig->RTCClockSecondsUnits << RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << RTC_TR_ST) | (pRTCConfig->RTCClockMinutesUnits << RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << RTC_TR_MNT) | (pRTCConfig->RTCClockHoursUnits << RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << RTC_TR_PM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	79db      	ldrb	r3, [r3, #7]
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a1b      	ldrb	r3, [r3, #8]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7a5b      	ldrb	r3, [r3, #9]
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7a9b      	ldrb	r3, [r3, #10]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7adb      	ldrb	r3, [r3, #11]
 8001146:	051b      	lsls	r3, r3, #20
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b1b      	ldrb	r3, [r3, #12]
 800114e:	059b      	lsls	r3, r3, #22
 8001150:	4313      	orrs	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
	stm32_rtc->RTC_TR = time_value;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	601a      	str	r2, [r3, #0]

	//2.e Configure the Date Parameters in RTC_DR Register
	date_value = (pRTCConfig->RTCClockDateUnits << RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << RTC_DR_DT) | (pRTCConfig->RTCClockMonthUnits << RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << RTC_DR_MT) | (pRTCConfig->RTCClockYearUnits << RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << RTC_DR_YT) | (pRTCConfig->RTCClockDayOfWeek << RTC_DR_WDU);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b5b      	ldrb	r3, [r3, #13]
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7b9b      	ldrb	r3, [r3, #14]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7bdb      	ldrb	r3, [r3, #15]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7c1b      	ldrb	r3, [r3, #16]
 8001176:	031b      	lsls	r3, r3, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7c5b      	ldrb	r3, [r3, #17]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7c9b      	ldrb	r3, [r3, #18]
 8001186:	051b      	lsls	r3, r3, #20
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7cdb      	ldrb	r3, [r3, #19]
 800118e:	035b      	lsls	r3, r3, #13
 8001190:	4313      	orrs	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
	stm32_rtc->RTC_DR = date_value;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	605a      	str	r2, [r3, #4]

	//2.f Exit the Initialization Mode
	stm32_rtc->RTC_ISR &= ~(1 << RTC_ISR_INIT);
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <RTC_Config_Calendar+0x1d8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011aa:	60da      	str	r2, [r3, #12]

	return;
 80011ac:	bf00      	nop
}
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000018 	.word	0x20000018
 80011bc:	20000014 	.word	0x20000014
 80011c0:	2000001c 	.word	0x2000001c
 80011c4:	20000010 	.word	0x20000010
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2000000c 	.word	0x2000000c

080011d0 <RTC_Read_Calendar>:

void RTC_Read_Calendar(struct Date *date, struct Time *time)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	uint32_t time_value, date_value;

	//1. Wait for the RSF bit to be set in RTC_ISR register
	while(!((stm32_rtc->RTC_ISR >> RTC_ISR_RSF) & 0x1));
 80011da:	bf00      	nop
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <RTC_Read_Calendar+0x150>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f7      	beq.n	80011dc <RTC_Read_Calendar+0xc>

	//2. Read the current time value
	time_value = stm32_rtc->RTC_TR;
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <RTC_Read_Calendar+0x150>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60fb      	str	r3, [r7, #12]

	//3. Read the current date value
	date_value = stm32_rtc->RTC_DR;
 80011f4:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <RTC_Read_Calendar+0x150>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60bb      	str	r3, [r7, #8]

	//4. Format the time and date values
	//4.a Format the time values
	time->seconds = ((time_value >> RTC_TR_ST) & 0x7)*10 + ((time_value >> RTC_TR_SU) & 0xF);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	701a      	strb	r2, [r3, #0]
	time->minutes = ((time_value >> RTC_TR_MNT) & 0x7)*10 + ((time_value >> RTC_TR_MNU) & 0xF);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	0b1b      	lsrs	r3, r3, #12
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4413      	add	r3, r2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	705a      	strb	r2, [r3, #1]
	time->hours = ((time_value >> RTC_TR_HT) & 0x3)*10 + ((time_value >> RTC_TR_HU) & 0xF);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0d1b      	lsrs	r3, r3, #20
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	709a      	strb	r2, [r3, #2]
	time->timeformat = ((time_value >> RTC_TR_PM) & 0x1);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	0d9b      	lsrs	r3, r3, #22
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	70da      	strb	r2, [r3, #3]

	//4.b Format the date values
	date->date = ((date_value >> RTC_DR_DT) & 0x3)*10 + ((date_value >> RTC_DR_DU) & 0xF);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	701a      	strb	r2, [r3, #0]
	date->month = ((date_value >> RTC_DR_MT) & 0x1)*10 + ((date_value >> RTC_DR_MU) & 0xF);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	0b1b      	lsrs	r3, r3, #12
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	705a      	strb	r2, [r3, #1]
	date->year = ((date_value >> RTC_DR_YT) & 0xF)*10 + ((date_value >> RTC_DR_YU) & 0xF);
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	0d1b      	lsrs	r3, r3, #20
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	709a      	strb	r2, [r3, #2]
	date->dayofweek = ((date_value >> RTC_DR_WDU) & 0x7);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	0b5b      	lsrs	r3, r3, #13
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	b2da      	uxtb	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	70da      	strb	r2, [r3, #3]

	return;
 8001314:	bf00      	nop
}
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000001c 	.word	0x2000001c

08001324 <RTC_Display_Calendar_LCD>:

void RTC_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	struct Time saved_time;
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(count == 0)
 800132e:	4b89      	ldr	r3, [pc, #548]	; (8001554 <RTC_Display_Calendar_LCD+0x230>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d162      	bne.n	80013fc <RTC_Display_Calendar_LCD+0xd8>
	{
		//Print the Time Information
		lcd_pcf8574_clear_screen();
 8001336:	f7ff fe19 	bl	8000f6c <lcd_pcf8574_clear_screen>
		delay_us(3000);
 800133a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800133e:	f7fe ffa7 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 8001342:	f7ff fe1a 	bl	8000f7a <lcd_pcf8574_return_home>
		delay_us(3000);
 8001346:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800134a:	f7fe ffa1 	bl	8000290 <delay_us>
		printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	4619      	mov	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	461a      	mov	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	487e      	ldr	r0, [pc, #504]	; (8001558 <RTC_Display_Calendar_LCD+0x234>)
 8001360:	f000 ff12 	bl	8002188 <iprintf>

		//Saving the time information
		memset(&saved_time,0,sizeof(struct Time));
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2204      	movs	r2, #4
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fe25 	bl	8001fbc <memset>
		saved_time.seconds = time->seconds;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	743b      	strb	r3, [r7, #16]
		saved_time.minutes = time->minutes;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	747b      	strb	r3, [r7, #17]
		saved_time.hours = time->hours;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	789b      	ldrb	r3, [r3, #2]
 8001382:	74bb      	strb	r3, [r7, #18]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fdfe 	bl	8000f88 <lcd_pcf8574_set_position>
		delay_us(3000);
 800138c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001390:	f7fe ff7e 	bl	8000290 <delay_us>
		format_dow(date,dow);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f98e 	bl	80016bc <format_dow>
		format_mon(date,mon);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f9dc 	bl	8001764 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	f107 010c 	add.w	r1, r7, #12
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	4602      	mov	r2, r0
 80013c4:	4865      	ldr	r0, [pc, #404]	; (800155c <RTC_Display_Calendar_LCD+0x238>)
 80013c6:	f000 fedf 	bl	8002188 <iprintf>

		//Saving the date information
		memset(&saved_date,0,sizeof(struct Date));
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2204      	movs	r2, #4
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fdf2 	bl	8001fbc <memset>
		saved_date.date = date->date;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	753b      	strb	r3, [r7, #20]
		saved_date.month = date->month;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	757b      	strb	r3, [r7, #21]
		saved_date.year = date->year;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	75bb      	strb	r3, [r7, #22]
		saved_date.dayofweek = date->dayofweek;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	78db      	ldrb	r3, [r3, #3]
 80013ee:	75fb      	strb	r3, [r7, #23]

		//Update count value
		count++;
 80013f0:	4b58      	ldr	r3, [pc, #352]	; (8001554 <RTC_Display_Calendar_LCD+0x230>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a57      	ldr	r2, [pc, #348]	; (8001554 <RTC_Display_Calendar_LCD+0x230>)
 80013f8:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 80013fa:	e0a6      	b.n	800154a <RTC_Display_Calendar_LCD+0x226>
		if(saved_time.seconds != time->seconds)
 80013fc:	7c3a      	ldrb	r2, [r7, #16]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d010      	beq.n	8001428 <RTC_Display_Calendar_LCD+0x104>
			lcd_pcf8574_set_position(0,10);
 8001406:	210a      	movs	r1, #10
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fdbd 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 800140e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001412:	f7fe ff3d 	bl	8000290 <delay_us>
			printf("%02d",time->seconds);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	4850      	ldr	r0, [pc, #320]	; (8001560 <RTC_Display_Calendar_LCD+0x23c>)
 800141e:	f000 feb3 	bl	8002188 <iprintf>
			saved_time.seconds = time->seconds;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	743b      	strb	r3, [r7, #16]
		if(saved_time.minutes != time->minutes)
 8001428:	7c7a      	ldrb	r2, [r7, #17]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	429a      	cmp	r2, r3
 8001430:	d010      	beq.n	8001454 <RTC_Display_Calendar_LCD+0x130>
			lcd_pcf8574_set_position(0,7);
 8001432:	2107      	movs	r1, #7
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fda7 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143e:	f7fe ff27 	bl	8000290 <delay_us>
			printf("%02d",time->minutes);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	4619      	mov	r1, r3
 8001448:	4845      	ldr	r0, [pc, #276]	; (8001560 <RTC_Display_Calendar_LCD+0x23c>)
 800144a:	f000 fe9d 	bl	8002188 <iprintf>
			saved_time.minutes = time->minutes;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	747b      	strb	r3, [r7, #17]
		if(saved_time.hours != time->hours)
 8001454:	7cba      	ldrb	r2, [r7, #18]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	789b      	ldrb	r3, [r3, #2]
 800145a:	429a      	cmp	r2, r3
 800145c:	d010      	beq.n	8001480 <RTC_Display_Calendar_LCD+0x15c>
			lcd_pcf8574_set_position(0,4);
 800145e:	2104      	movs	r1, #4
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fd91 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f7fe ff11 	bl	8000290 <delay_us>
			printf("%02d",time->hours);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	789b      	ldrb	r3, [r3, #2]
 8001472:	4619      	mov	r1, r3
 8001474:	483a      	ldr	r0, [pc, #232]	; (8001560 <RTC_Display_Calendar_LCD+0x23c>)
 8001476:	f000 fe87 	bl	8002188 <iprintf>
			saved_time.hours = time->hours;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	789b      	ldrb	r3, [r3, #2]
 800147e:	74bb      	strb	r3, [r7, #18]
		if(saved_date.date != date->date)
 8001480:	7d3a      	ldrb	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d010      	beq.n	80014ac <RTC_Display_Calendar_LCD+0x188>
			lcd_pcf8574_set_position(1,6);
 800148a:	2106      	movs	r1, #6
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff fd7b 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f7fe fefb 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	482f      	ldr	r0, [pc, #188]	; (8001560 <RTC_Display_Calendar_LCD+0x23c>)
 80014a2:	f000 fe71 	bl	8002188 <iprintf>
			saved_date.date = date->date;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	753b      	strb	r3, [r7, #20]
		if(saved_date.month != date->month)
 80014ac:	7d7a      	ldrb	r2, [r7, #21]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d016      	beq.n	80014e4 <RTC_Display_Calendar_LCD+0x1c0>
			lcd_pcf8574_set_position(1,9);
 80014b6:	2109      	movs	r1, #9
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fd65 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 80014be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c2:	f7fe fee5 	bl	8000290 <delay_us>
			format_mon(date,mon);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f949 	bl	8001764 <format_mon>
			printf("%s",mon);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <RTC_Display_Calendar_LCD+0x240>)
 80014da:	f000 fe55 	bl	8002188 <iprintf>
			saved_date.month = date->month;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	785b      	ldrb	r3, [r3, #1]
 80014e2:	757b      	strb	r3, [r7, #21]
		if(saved_date.year != date->year)
 80014e4:	7dba      	ldrb	r2, [r7, #22]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d010      	beq.n	8001510 <RTC_Display_Calendar_LCD+0x1ec>
			lcd_pcf8574_set_position(1,13);
 80014ee:	210d      	movs	r1, #13
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff fd49 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 80014f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014fa:	f7fe fec9 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	4619      	mov	r1, r3
 8001504:	4816      	ldr	r0, [pc, #88]	; (8001560 <RTC_Display_Calendar_LCD+0x23c>)
 8001506:	f000 fe3f 	bl	8002188 <iprintf>
			saved_date.year = date->year;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	75bb      	strb	r3, [r7, #22]
		if(saved_date.dayofweek != date->dayofweek)
 8001510:	7dfa      	ldrb	r2, [r7, #23]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	429a      	cmp	r2, r3
 8001518:	d017      	beq.n	800154a <RTC_Display_Calendar_LCD+0x226>
			lcd_pcf8574_set_position(1,2);
 800151a:	2102      	movs	r1, #2
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fd33 	bl	8000f88 <lcd_pcf8574_set_position>
			delay_us(500);
 8001522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001526:	f7fe feb3 	bl	8000290 <delay_us>
			format_dow(date,dow);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8c3 	bl	80016bc <format_dow>
			printf("%s",dow);
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <RTC_Display_Calendar_LCD+0x240>)
 800153e:	f000 fe23 	bl	8002188 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	75fb      	strb	r3, [r7, #23]
	return;
 8001548:	bf00      	nop
 800154a:	bf00      	nop
}
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000cc 	.word	0x200000cc
 8001558:	0800308c 	.word	0x0800308c
 800155c:	080030a0 	.word	0x080030a0
 8001560:	080030b4 	.word	0x080030b4
 8001564:	080030bc 	.word	0x080030bc

08001568 <RTC_Config_Alarm>:

void RTC_Config_Alarm(struct RTC_AlarmConfig_t *pRTCAlarmConfig)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	uint32_t alarm_value = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]

	//1a. Configure the ALARM Parameters in the appropriate ALARM Register
	//1b. Enable the ALARM Interrupt in the RTC_CR Register
	//1c. Enable the ALARM in RTC_CR Register
	alarm_value = (pRTCAlarmConfig->RTCAlarmSecondsUnits << RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << RTC_ALRMR_MSK1) | (pRTCAlarmConfig->RTCAlarmMinutesUnits << RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << RTC_ALRMR_MSK2) | (pRTCAlarmConfig->RTCAlarmHoursUnits << RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << RTC_ALRMR_PM) | (pRTCAlarmConfig->RTCAlarmConsiderHours << RTC_ALRMR_MSK3) | (pRTCAlarmConfig->RTCAlarmDateUnits << RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << RTC_ALRMR_DT) | (pRTCAlarmConfig->RTCAlarmWeekDaySelection << RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << RTC_ALRMR_MSK4);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	01db      	lsls	r3, r3, #7
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	791b      	ldrb	r3, [r3, #4]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	795b      	ldrb	r3, [r3, #5]
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	799b      	ldrb	r3, [r3, #6]
 800159e:	03db      	lsls	r3, r3, #15
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	79db      	ldrb	r3, [r3, #7]
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7a1b      	ldrb	r3, [r3, #8]
 80015ae:	051b      	lsls	r3, r3, #20
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7a5b      	ldrb	r3, [r3, #9]
 80015b6:	059b      	lsls	r3, r3, #22
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7a9b      	ldrb	r3, [r3, #10]
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7adb      	ldrb	r3, [r3, #11]
 80015c6:	061b      	lsls	r3, r3, #24
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7b1b      	ldrb	r3, [r3, #12]
 80015ce:	071b      	lsls	r3, r3, #28
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b5b      	ldrb	r3, [r3, #13]
 80015d6:	079b      	lsls	r3, r3, #30
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b9b      	ldrb	r3, [r3, #14]
 80015de:	07db      	lsls	r3, r3, #31
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

	if(pRTCAlarmConfig->RTCAlarmSelection == RTC_ALARM_A)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d114      	bne.n	8001616 <RTC_Config_Alarm+0xae>
	{
		stm32_rtc->RTC_ALRMAR = alarm_value;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <RTC_Config_Alarm+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	61da      	str	r2, [r3, #28]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRAIE);
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <RTC_Config_Alarm+0xec>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <RTC_Config_Alarm+0xec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001602:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRAE);
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <RTC_Config_Alarm+0xec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <RTC_Config_Alarm+0xec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001612:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_ALRMBR = alarm_value;
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBIE);
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBE);
	}

	return;
 8001614:	e018      	b.n	8001648 <RTC_Config_Alarm+0xe0>
	else if(pRTCAlarmConfig->RTCAlarmSelection == RTC_ALARM_B)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d114      	bne.n	8001648 <RTC_Config_Alarm+0xe0>
		stm32_rtc->RTC_ALRMBR = alarm_value;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <RTC_Config_Alarm+0xec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	621a      	str	r2, [r3, #32]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBIE);
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <RTC_Config_Alarm+0xec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <RTC_Config_Alarm+0xec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001634:	609a      	str	r2, [r3, #8]
		stm32_rtc->RTC_CR |= (1 << RTC_CR_ALRBE);
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <RTC_Config_Alarm+0xec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <RTC_Config_Alarm+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001644:	609a      	str	r2, [r3, #8]
	return;
 8001646:	bf00      	nop
 8001648:	bf00      	nop
}
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000001c 	.word	0x2000001c

08001658 <RTC_Config_Alarm_Interrupt>:

void RTC_Config_Alarm_Interrupt(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <RTC_Config_Alarm_Interrupt+0x34>)
 8001660:	607b      	str	r3, [r7, #4]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <RTC_Config_Alarm_Interrupt+0x38>)
 8001664:	603b      	str	r3, [r7, #0]

	// 1. Configuring the EXTI Controller (External Interrupt Controller)
	*pEXTI_IMR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);  	// Setting the Interrupt Mask Register
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
	*pEXTI_RTSR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN); 	// Setting the Rising Trigger Set Register
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt in NVIC
	NVIC_EnableIRQ(RTC_ALARM_INTERRUPT_IRQ_NO);				// Enabling the interrupt
 800167e:	2029      	movs	r0, #41	; 0x29
 8001680:	f000 fab4 	bl	8001bec <NVIC_EnableIRQ>

	return;
 8001684:	bf00      	nop
}
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013c00 	.word	0x40013c00
 8001690:	40013c08 	.word	0x40013c08

08001694 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <RTC_Alarm_IRQHandler+0x24>)
 800169c:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 800169e:	f000 fb6d 	bl	8001d7c <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]

	return;
 80016ae:	bf00      	nop
}
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013c14 	.word	0x40013c14

080016bc <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	78db      	ldrb	r3, [r3, #3]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d834      	bhi.n	800173a <format_dow+0x7e>
 80016d0:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <format_dow+0x1c>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	080016f5 	.word	0x080016f5
 80016dc:	080016ff 	.word	0x080016ff
 80016e0:	08001709 	.word	0x08001709
 80016e4:	08001713 	.word	0x08001713
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	08001727 	.word	0x08001727
 80016f0:	08001731 	.word	0x08001731
	{
		case 1:
			strcpy(dow,"Mon");
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <format_dow+0x8c>)
 80016f8:	6810      	ldr	r0, [r2, #0]
 80016fa:	6018      	str	r0, [r3, #0]
			break;
 80016fc:	e01e      	b.n	800173c <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <format_dow+0x90>)
 8001702:	6810      	ldr	r0, [r2, #0]
 8001704:	6018      	str	r0, [r3, #0]
			break;
 8001706:	e019      	b.n	800173c <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <format_dow+0x94>)
 800170c:	6810      	ldr	r0, [r2, #0]
 800170e:	6018      	str	r0, [r3, #0]
			break;
 8001710:	e014      	b.n	800173c <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <format_dow+0x98>)
 8001716:	6810      	ldr	r0, [r2, #0]
 8001718:	6018      	str	r0, [r3, #0]
			break;
 800171a:	e00f      	b.n	800173c <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <format_dow+0x9c>)
 8001720:	6810      	ldr	r0, [r2, #0]
 8001722:	6018      	str	r0, [r3, #0]
			break;
 8001724:	e00a      	b.n	800173c <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <format_dow+0xa0>)
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	6018      	str	r0, [r3, #0]
			break;
 800172e:	e005      	b.n	800173c <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <format_dow+0xa4>)
 8001734:	6810      	ldr	r0, [r2, #0]
 8001736:	6018      	str	r0, [r3, #0]
			break;
 8001738:	e000      	b.n	800173c <format_dow+0x80>
		default:
			break;
 800173a:	bf00      	nop
	}

	return;
 800173c:	bf00      	nop
}
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	080030c0 	.word	0x080030c0
 800174c:	080030c4 	.word	0x080030c4
 8001750:	080030c8 	.word	0x080030c8
 8001754:	080030cc 	.word	0x080030cc
 8001758:	080030d0 	.word	0x080030d0
 800175c:	080030d4 	.word	0x080030d4
 8001760:	080030d8 	.word	0x080030d8

08001764 <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	switch(date->month)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	3b01      	subs	r3, #1
 8001774:	2b0b      	cmp	r3, #11
 8001776:	d857      	bhi.n	8001828 <format_mon+0xc4>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <format_mon+0x1c>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	080017b1 	.word	0x080017b1
 8001784:	080017bb 	.word	0x080017bb
 8001788:	080017c5 	.word	0x080017c5
 800178c:	080017cf 	.word	0x080017cf
 8001790:	080017d9 	.word	0x080017d9
 8001794:	080017e3 	.word	0x080017e3
 8001798:	080017ed 	.word	0x080017ed
 800179c:	080017f7 	.word	0x080017f7
 80017a0:	08001801 	.word	0x08001801
 80017a4:	0800180b 	.word	0x0800180b
 80017a8:	08001815 	.word	0x08001815
 80017ac:	0800181f 	.word	0x0800181f
	{
		case 1:
			strcpy(mon,"Jan");
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4a20      	ldr	r2, [pc, #128]	; (8001834 <format_mon+0xd0>)
 80017b4:	6810      	ldr	r0, [r2, #0]
 80017b6:	6018      	str	r0, [r3, #0]
			break;
 80017b8:	e037      	b.n	800182a <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <format_mon+0xd4>)
 80017be:	6810      	ldr	r0, [r2, #0]
 80017c0:	6018      	str	r0, [r3, #0]
			break;
 80017c2:	e032      	b.n	800182a <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <format_mon+0xd8>)
 80017c8:	6810      	ldr	r0, [r2, #0]
 80017ca:	6018      	str	r0, [r3, #0]
			break;
 80017cc:	e02d      	b.n	800182a <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <format_mon+0xdc>)
 80017d2:	6810      	ldr	r0, [r2, #0]
 80017d4:	6018      	str	r0, [r3, #0]
			break;
 80017d6:	e028      	b.n	800182a <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <format_mon+0xe0>)
 80017dc:	6810      	ldr	r0, [r2, #0]
 80017de:	6018      	str	r0, [r3, #0]
			break;
 80017e0:	e023      	b.n	800182a <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <format_mon+0xe4>)
 80017e6:	6810      	ldr	r0, [r2, #0]
 80017e8:	6018      	str	r0, [r3, #0]
			break;
 80017ea:	e01e      	b.n	800182a <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <format_mon+0xe8>)
 80017f0:	6810      	ldr	r0, [r2, #0]
 80017f2:	6018      	str	r0, [r3, #0]
			break;
 80017f4:	e019      	b.n	800182a <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <format_mon+0xec>)
 80017fa:	6810      	ldr	r0, [r2, #0]
 80017fc:	6018      	str	r0, [r3, #0]
			break;
 80017fe:	e014      	b.n	800182a <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <format_mon+0xf0>)
 8001804:	6810      	ldr	r0, [r2, #0]
 8001806:	6018      	str	r0, [r3, #0]
			break;
 8001808:	e00f      	b.n	800182a <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <format_mon+0xf4>)
 800180e:	6810      	ldr	r0, [r2, #0]
 8001810:	6018      	str	r0, [r3, #0]
			break;
 8001812:	e00a      	b.n	800182a <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <format_mon+0xf8>)
 8001818:	6810      	ldr	r0, [r2, #0]
 800181a:	6018      	str	r0, [r3, #0]
			break;
 800181c:	e005      	b.n	800182a <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <format_mon+0xfc>)
 8001822:	6810      	ldr	r0, [r2, #0]
 8001824:	6018      	str	r0, [r3, #0]
			break;
 8001826:	e000      	b.n	800182a <format_mon+0xc6>
		default:
			break;
 8001828:	bf00      	nop
	}

	return;
 800182a:	bf00      	nop
}
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	080030dc 	.word	0x080030dc
 8001838:	080030e0 	.word	0x080030e0
 800183c:	080030e4 	.word	0x080030e4
 8001840:	080030e8 	.word	0x080030e8
 8001844:	080030ec 	.word	0x080030ec
 8001848:	080030f0 	.word	0x080030f0
 800184c:	080030f4 	.word	0x080030f4
 8001850:	080030f8 	.word	0x080030f8
 8001854:	080030fc 	.word	0x080030fc
 8001858:	08003100 	.word	0x08003100
 800185c:	08003104 	.word	0x08003104
 8001860:	08003108 	.word	0x08003108

08001864 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a88      	ldr	r2, [pc, #544]	; (8001a90 <EnablePeriClk+0x22c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d108      	bne.n	8001886 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001874:	4b87      	ldr	r3, [pc, #540]	; (8001a94 <EnablePeriClk+0x230>)
 8001876:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001884:	e19b      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a83      	ldr	r2, [pc, #524]	; (8001a98 <EnablePeriClk+0x234>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d108      	bne.n	80018a0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800188e:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <EnablePeriClk+0x230>)
 8001890:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	e18e      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a7e      	ldr	r2, [pc, #504]	; (8001a9c <EnablePeriClk+0x238>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d108      	bne.n	80018ba <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <EnablePeriClk+0x230>)
 80018aa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	e181      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a78      	ldr	r2, [pc, #480]	; (8001aa0 <EnablePeriClk+0x23c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d108      	bne.n	80018d4 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <EnablePeriClk+0x230>)
 80018c4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f043 0208 	orr.w	r2, r3, #8
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	e174      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <EnablePeriClk+0x240>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d108      	bne.n	80018ee <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018dc:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <EnablePeriClk+0x230>)
 80018de:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 0210 	orr.w	r2, r3, #16
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	e167      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a6d      	ldr	r2, [pc, #436]	; (8001aa8 <EnablePeriClk+0x244>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80018f6:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <EnablePeriClk+0x230>)
 80018f8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	e15a      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a68      	ldr	r2, [pc, #416]	; (8001aac <EnablePeriClk+0x248>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d108      	bne.n	8001922 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001910:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <EnablePeriClk+0x230>)
 8001912:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	e14d      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a62      	ldr	r2, [pc, #392]	; (8001ab0 <EnablePeriClk+0x24c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800192a:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <EnablePeriClk+0x230>)
 800192c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	e140      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <EnablePeriClk+0x250>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d108      	bne.n	8001956 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <EnablePeriClk+0x230>)
 8001946:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	e133      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a57      	ldr	r2, [pc, #348]	; (8001ab8 <EnablePeriClk+0x254>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d108      	bne.n	8001970 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <EnablePeriClk+0x258>)
 8001960:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	e126      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <EnablePeriClk+0x25c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d108      	bne.n	800198a <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <EnablePeriClk+0x260>)
 800197a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	e119      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <EnablePeriClk+0x264>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <EnablePeriClk+0x260>)
 8001994:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	e10c      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <EnablePeriClk+0x268>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <EnablePeriClk+0x260>)
 80019ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]
}
 80019bc:	e0ff      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <EnablePeriClk+0x26c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d108      	bne.n	80019d8 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <EnablePeriClk+0x260>)
 80019c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	e0f2      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <EnablePeriClk+0x270>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <EnablePeriClk+0x260>)
 80019e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	e0e5      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <EnablePeriClk+0x274>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d108      	bne.n	8001a0c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <EnablePeriClk+0x258>)
 80019fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	e0d8      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a33      	ldr	r2, [pc, #204]	; (8001adc <EnablePeriClk+0x278>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <EnablePeriClk+0x260>)
 8001a16:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	e0cb      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a2d      	ldr	r2, [pc, #180]	; (8001ae0 <EnablePeriClk+0x27c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <EnablePeriClk+0x260>)
 8001a30:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	e0be      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <EnablePeriClk+0x280>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d108      	bne.n	8001a5a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <EnablePeriClk+0x260>)
 8001a4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	e0b1      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <EnablePeriClk+0x284>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d108      	bne.n	8001a74 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <EnablePeriClk+0x260>)
 8001a64:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	e0a4      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <EnablePeriClk+0x288>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d139      	bne.n	8001af0 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <EnablePeriClk+0x258>)
 8001a7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	e097      	b.n	8001bbe <EnablePeriClk+0x35a>
 8001a8e:	bf00      	nop
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40023830 	.word	0x40023830
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40013000 	.word	0x40013000
 8001abc:	40023844 	.word	0x40023844
 8001ac0:	40003800 	.word	0x40003800
 8001ac4:	40023840 	.word	0x40023840
 8001ac8:	40003c00 	.word	0x40003c00
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	40005c00 	.word	0x40005c00
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	40004c00 	.word	0x40004c00
 8001ae8:	40005000 	.word	0x40005000
 8001aec:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <EnablePeriClk+0x364>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <EnablePeriClk+0x368>)
 8001afa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	e059      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <EnablePeriClk+0x36c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <EnablePeriClk+0x368>)
 8001b14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f043 0220 	orr.w	r2, r3, #32
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	e04c      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <EnablePeriClk+0x370>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d108      	bne.n	8001b3e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <EnablePeriClk+0x374>)
 8001b2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	e03f      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <EnablePeriClk+0x378>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d108      	bne.n	8001b58 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <EnablePeriClk+0x374>)
 8001b48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	e032      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5e:	d108      	bne.n	8001b72 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <EnablePeriClk+0x368>)
 8001b62:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	e025      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <EnablePeriClk+0x37c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d108      	bne.n	8001b8c <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <EnablePeriClk+0x368>)
 8001b7c:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f043 0202 	orr.w	r2, r3, #2
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	e018      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <EnablePeriClk+0x380>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d108      	bne.n	8001ba6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <EnablePeriClk+0x368>)
 8001b96:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	e00b      	b.n	8001bbe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <EnablePeriClk+0x384>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d107      	bne.n	8001bbe <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <EnablePeriClk+0x368>)
 8001bb0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f043 0208 	orr.w	r2, r3, #8
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40001000 	.word	0x40001000
 8001bcc:	40023840 	.word	0x40023840
 8001bd0:	40001400 	.word	0x40001400
 8001bd4:	40026000 	.word	0x40026000
 8001bd8:	40023830 	.word	0x40023830
 8001bdc:	40026400 	.word	0x40026400
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40000c00 	.word	0x40000c00

08001bec <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001c0e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001c12:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <main>:

void RTC_Alarm_Interrupt_Callback(void);
void EXTI0_IRQHandler(void);

int main(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
	struct RTC_Config_t stm32_rtc_config;
	struct RTC_AlarmConfig_t stm32_rtc_alarm_config;


	//Configure the Timer
	configure_delay_timer();
 8001c36:	f7fe fb43 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 8001c3a:	f7fe fb63 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <main+0x134>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fac6 	bl	80021d8 <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 8001c4c:	4846      	ldr	r0, [pc, #280]	; (8001d68 <main+0x138>)
 8001c4e:	f7fe fb1f 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001c52:	f7ff f8d8 	bl	8000e06 <lcd_pcf8574_init>
	delay_us(100000);
 8001c56:	4845      	ldr	r0, [pc, #276]	; (8001d6c <main+0x13c>)
 8001c58:	f7fe fb1a 	bl	8000290 <delay_us>

	//Configure STM32 RTC Peripheral
	memset(&stm32_rtc_config,0,sizeof(stm32_rtc_config));
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2214      	movs	r2, #20
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f9a9 	bl	8001fbc <memset>
	stm32_rtc_config.RTCClockSource = RTC_CLK_SRC_HSE;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	753b      	strb	r3, [r7, #20]
	stm32_rtc_config.RTCClockHSEPrescaler = RTC_CLK_PRESCALER_DIV_8;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	757b      	strb	r3, [r7, #21]
	stm32_rtc_config.RTCClockPrescalerA = 99;
 8001c72:	2363      	movs	r3, #99	; 0x63
 8001c74:	75bb      	strb	r3, [r7, #22]
	stm32_rtc_config.RTCClockPrescalerS = 9999;
 8001c76:	f242 730f 	movw	r3, #9999	; 0x270f
 8001c7a:	833b      	strh	r3, [r7, #24]
	stm32_rtc_config.RTCClockSecondsUnits = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	76bb      	strb	r3, [r7, #26]
	stm32_rtc_config.RTCClockSecondsTens = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	76fb      	strb	r3, [r7, #27]
	stm32_rtc_config.RTCClockMinutesUnits = 5;
 8001c84:	2305      	movs	r3, #5
 8001c86:	773b      	strb	r3, [r7, #28]
	stm32_rtc_config.RTCClockMinutesTens = 3;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	777b      	strb	r3, [r7, #29]
	stm32_rtc_config.RTCClockHoursUnits = 7;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	77bb      	strb	r3, [r7, #30]
	stm32_rtc_config.RTCClockHoursTens = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
	stm32_rtc_config.RTCClockAMPM = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 3020 	strb.w	r3, [r7, #32]
	stm32_rtc_config.RTCClockDateUnits = 7;
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	stm32_rtc_config.RTCClockDateTens = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	stm32_rtc_config.RTCClockMonthUnits = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	stm32_rtc_config.RTCClockMonthTens = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	stm32_rtc_config.RTCClockYearUnits = 4;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	stm32_rtc_config.RTCClockYearTens = 2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	stm32_rtc_config.RTCClockDayOfWeek = 7;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RTC_Config_Calendar(&stm32_rtc_config);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f98d 	bl	8000fe8 <RTC_Config_Calendar>
	delay_us(10000);
 8001cce:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cd2:	f7fe fadd 	bl	8000290 <delay_us>

	//Configure the STM32 RTC Alarm
	memset(&stm32_rtc_alarm_config,0,sizeof(stm32_rtc_alarm_config));
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	220f      	movs	r2, #15
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f96d 	bl	8001fbc <memset>
	stm32_rtc_alarm_config.RTCAlarmSelection = RTC_ALARM_A;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	713b      	strb	r3, [r7, #4]
	stm32_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	717b      	strb	r3, [r7, #5]
	stm32_rtc_alarm_config.RTCAlarmSecondsTens = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	71bb      	strb	r3, [r7, #6]
	stm32_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_YES;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	stm32_rtc_alarm_config.RTCAlarmMinutesUnits = 7;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	723b      	strb	r3, [r7, #8]
	stm32_rtc_alarm_config.RTCAlarmMinutesTens = 3;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	727b      	strb	r3, [r7, #9]
	stm32_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_YES;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	72bb      	strb	r3, [r7, #10]
	stm32_rtc_alarm_config.RTCAlarmHoursUnits = 7;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	72fb      	strb	r3, [r7, #11]
	stm32_rtc_alarm_config.RTCAlarmHoursTens = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	733b      	strb	r3, [r7, #12]
	stm32_rtc_alarm_config.RTCAlarmAMPM = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	737b      	strb	r3, [r7, #13]
	stm32_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_YES;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73bb      	strb	r3, [r7, #14]
	stm32_rtc_alarm_config.RTCAlarmDateUnits = 7;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	73fb      	strb	r3, [r7, #15]
	stm32_rtc_alarm_config.RTCAlarmDateTens = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	743b      	strb	r3, [r7, #16]
	stm32_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8001d16:	2300      	movs	r3, #0
 8001d18:	747b      	strb	r3, [r7, #17]
	stm32_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	74bb      	strb	r3, [r7, #18]

	RTC_Config_Alarm(&stm32_rtc_alarm_config);
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc21 	bl	8001568 <RTC_Config_Alarm>
	RTC_Config_Alarm_Interrupt();
 8001d26:	f7ff fc97 	bl	8001658 <RTC_Config_Alarm_Interrupt>

	//Configure the GPIO Related to RTC Alarm
	EnablePeriClk(RTC_ALARM_GPIO_PORT);
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <main+0x140>)
 8001d2c:	f7ff fd9a 	bl	8001864 <EnablePeriClk>
	GPIOSetMode(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_MODE_OUTPUT);
 8001d30:	2201      	movs	r2, #1
 8001d32:	210f      	movs	r1, #15
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <main+0x140>)
 8001d36:	f7fe fe56 	bl	80009e6 <GPIOSetMode>
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_LOW);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	480c      	ldr	r0, [pc, #48]	; (8001d70 <main+0x140>)
 8001d40:	f7fe fe75 	bl	8000a2e <GPIOWritePin>

	//Configure the Button Interrupt
	configure_external_interrupt();
 8001d44:	f7fe fb54 	bl	80003f0 <configure_external_interrupt>

	delay_us(10000);
 8001d48:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d4c:	f7fe faa0 	bl	8000290 <delay_us>

	while(1)
	{
		RTC_Read_Calendar(&date,&time);
 8001d50:	4908      	ldr	r1, [pc, #32]	; (8001d74 <main+0x144>)
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <main+0x148>)
 8001d54:	f7ff fa3c 	bl	80011d0 <RTC_Read_Calendar>
		RTC_Display_Calendar_LCD(&date,&time);
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <main+0x144>)
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <main+0x148>)
 8001d5c:	f7ff fae2 	bl	8001324 <RTC_Display_Calendar_LCD>
		RTC_Read_Calendar(&date,&time);
 8001d60:	e7f6      	b.n	8001d50 <main+0x120>
 8001d62:	bf00      	nop
 8001d64:	20000020 	.word	0x20000020
 8001d68:	000f4240 	.word	0x000f4240
 8001d6c:	000186a0 	.word	0x000186a0
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	200000d4 	.word	0x200000d4
 8001d78:	200000d0 	.word	0x200000d0

08001d7c <RTC_Alarm_Interrupt_Callback>:

	return 0;
}

void RTC_Alarm_Interrupt_Callback(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001d80:	2201      	movs	r2, #1
 8001d82:	210f      	movs	r1, #15
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001d86:	f7fe fe52 	bl	8000a2e <GPIOWritePin>

	return;
 8001d8a:	bf00      	nop
}
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020c00 	.word	0x40020c00

08001d94 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <EXTI0_IRQHandler+0x28>)
 8001d9c:	607b      	str	r3, [r7, #4]

	//Handling the Interrupt
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_LOW);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	210f      	movs	r1, #15
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <EXTI0_IRQHandler+0x2c>)
 8001da4:	f7fe fe43 	bl	8000a2e <GPIOWritePin>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << INTERRUPT_PIN);		// Clearing the EXTI_PR Register
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	601a      	str	r2, [r3, #0]

	return;
 8001db4:	bf00      	nop
}
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013c14 	.word	0x40013c14
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
  }

  return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fadb 	bl	80003d4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
  }
  return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_close>:

int _close(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <_isatty>:

int _isatty(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f000 f846 	bl	8001f58 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20020000 	.word	0x20020000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	200000d8 	.word	0x200000d8
 8001f00:	200000f0 	.word	0x200000f0

08001f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopForever+0xe>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopForever+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f32:	f000 f817 	bl	8001f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f36:	f7ff fe7b 	bl	8001c30 <main>

08001f3a <LoopForever>:

LoopForever:
  b LoopForever
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
  ldr   r0, =_estack
 8001f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001f48:	080031ac 	.word	0x080031ac
  ldr r2, =_sbss
 8001f4c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001f50:	200000ec 	.word	0x200000ec

08001f54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC_IRQHandler>
	...

08001f58 <__errno>:
 8001f58:	4b01      	ldr	r3, [pc, #4]	; (8001f60 <__errno+0x8>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000020 	.word	0x20000020

08001f64 <__libc_init_array>:
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4d0d      	ldr	r5, [pc, #52]	; (8001f9c <__libc_init_array+0x38>)
 8001f68:	4c0d      	ldr	r4, [pc, #52]	; (8001fa0 <__libc_init_array+0x3c>)
 8001f6a:	1b64      	subs	r4, r4, r5
 8001f6c:	10a4      	asrs	r4, r4, #2
 8001f6e:	2600      	movs	r6, #0
 8001f70:	42a6      	cmp	r6, r4
 8001f72:	d109      	bne.n	8001f88 <__libc_init_array+0x24>
 8001f74:	4d0b      	ldr	r5, [pc, #44]	; (8001fa4 <__libc_init_array+0x40>)
 8001f76:	4c0c      	ldr	r4, [pc, #48]	; (8001fa8 <__libc_init_array+0x44>)
 8001f78:	f001 f87c 	bl	8003074 <_init>
 8001f7c:	1b64      	subs	r4, r4, r5
 8001f7e:	10a4      	asrs	r4, r4, #2
 8001f80:	2600      	movs	r6, #0
 8001f82:	42a6      	cmp	r6, r4
 8001f84:	d105      	bne.n	8001f92 <__libc_init_array+0x2e>
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f8c:	4798      	blx	r3
 8001f8e:	3601      	adds	r6, #1
 8001f90:	e7ee      	b.n	8001f70 <__libc_init_array+0xc>
 8001f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f96:	4798      	blx	r3
 8001f98:	3601      	adds	r6, #1
 8001f9a:	e7f2      	b.n	8001f82 <__libc_init_array+0x1e>
 8001f9c:	080031a4 	.word	0x080031a4
 8001fa0:	080031a4 	.word	0x080031a4
 8001fa4:	080031a4 	.word	0x080031a4
 8001fa8:	080031a8 	.word	0x080031a8

08001fac <malloc>:
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <malloc+0xc>)
 8001fae:	4601      	mov	r1, r0
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f000 b875 	b.w	80020a0 <_malloc_r>
 8001fb6:	bf00      	nop
 8001fb8:	20000020 	.word	0x20000020

08001fbc <memset>:
 8001fbc:	4402      	add	r2, r0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <memset+0xa>
 8001fc4:	4770      	bx	lr
 8001fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fca:	e7f9      	b.n	8001fc0 <memset+0x4>

08001fcc <_free_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4605      	mov	r5, r0
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	d041      	beq.n	8002058 <_free_r+0x8c>
 8001fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd8:	1f0c      	subs	r4, r1, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bfb8      	it	lt
 8001fde:	18e4      	addlt	r4, r4, r3
 8001fe0:	f000 fca4 	bl	800292c <__malloc_lock>
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <_free_r+0x90>)
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	b933      	cbnz	r3, 8001ff8 <_free_r+0x2c>
 8001fea:	6063      	str	r3, [r4, #4]
 8001fec:	6014      	str	r4, [r2, #0]
 8001fee:	4628      	mov	r0, r5
 8001ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff4:	f000 bca0 	b.w	8002938 <__malloc_unlock>
 8001ff8:	42a3      	cmp	r3, r4
 8001ffa:	d908      	bls.n	800200e <_free_r+0x42>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	1821      	adds	r1, r4, r0
 8002000:	428b      	cmp	r3, r1
 8002002:	bf01      	itttt	eq
 8002004:	6819      	ldreq	r1, [r3, #0]
 8002006:	685b      	ldreq	r3, [r3, #4]
 8002008:	1809      	addeq	r1, r1, r0
 800200a:	6021      	streq	r1, [r4, #0]
 800200c:	e7ed      	b.n	8001fea <_free_r+0x1e>
 800200e:	461a      	mov	r2, r3
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	b10b      	cbz	r3, 8002018 <_free_r+0x4c>
 8002014:	42a3      	cmp	r3, r4
 8002016:	d9fa      	bls.n	800200e <_free_r+0x42>
 8002018:	6811      	ldr	r1, [r2, #0]
 800201a:	1850      	adds	r0, r2, r1
 800201c:	42a0      	cmp	r0, r4
 800201e:	d10b      	bne.n	8002038 <_free_r+0x6c>
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	4401      	add	r1, r0
 8002024:	1850      	adds	r0, r2, r1
 8002026:	4283      	cmp	r3, r0
 8002028:	6011      	str	r1, [r2, #0]
 800202a:	d1e0      	bne.n	8001fee <_free_r+0x22>
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	6053      	str	r3, [r2, #4]
 8002032:	4401      	add	r1, r0
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	e7da      	b.n	8001fee <_free_r+0x22>
 8002038:	d902      	bls.n	8002040 <_free_r+0x74>
 800203a:	230c      	movs	r3, #12
 800203c:	602b      	str	r3, [r5, #0]
 800203e:	e7d6      	b.n	8001fee <_free_r+0x22>
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	1821      	adds	r1, r4, r0
 8002044:	428b      	cmp	r3, r1
 8002046:	bf04      	itt	eq
 8002048:	6819      	ldreq	r1, [r3, #0]
 800204a:	685b      	ldreq	r3, [r3, #4]
 800204c:	6063      	str	r3, [r4, #4]
 800204e:	bf04      	itt	eq
 8002050:	1809      	addeq	r1, r1, r0
 8002052:	6021      	streq	r1, [r4, #0]
 8002054:	6054      	str	r4, [r2, #4]
 8002056:	e7ca      	b.n	8001fee <_free_r+0x22>
 8002058:	bd38      	pop	{r3, r4, r5, pc}
 800205a:	bf00      	nop
 800205c:	200000dc 	.word	0x200000dc

08002060 <sbrk_aligned>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	4e0e      	ldr	r6, [pc, #56]	; (800209c <sbrk_aligned+0x3c>)
 8002064:	460c      	mov	r4, r1
 8002066:	6831      	ldr	r1, [r6, #0]
 8002068:	4605      	mov	r5, r0
 800206a:	b911      	cbnz	r1, 8002072 <sbrk_aligned+0x12>
 800206c:	f000 f8a4 	bl	80021b8 <_sbrk_r>
 8002070:	6030      	str	r0, [r6, #0]
 8002072:	4621      	mov	r1, r4
 8002074:	4628      	mov	r0, r5
 8002076:	f000 f89f 	bl	80021b8 <_sbrk_r>
 800207a:	1c43      	adds	r3, r0, #1
 800207c:	d00a      	beq.n	8002094 <sbrk_aligned+0x34>
 800207e:	1cc4      	adds	r4, r0, #3
 8002080:	f024 0403 	bic.w	r4, r4, #3
 8002084:	42a0      	cmp	r0, r4
 8002086:	d007      	beq.n	8002098 <sbrk_aligned+0x38>
 8002088:	1a21      	subs	r1, r4, r0
 800208a:	4628      	mov	r0, r5
 800208c:	f000 f894 	bl	80021b8 <_sbrk_r>
 8002090:	3001      	adds	r0, #1
 8002092:	d101      	bne.n	8002098 <sbrk_aligned+0x38>
 8002094:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002098:	4620      	mov	r0, r4
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	200000e0 	.word	0x200000e0

080020a0 <_malloc_r>:
 80020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a4:	1ccd      	adds	r5, r1, #3
 80020a6:	f025 0503 	bic.w	r5, r5, #3
 80020aa:	3508      	adds	r5, #8
 80020ac:	2d0c      	cmp	r5, #12
 80020ae:	bf38      	it	cc
 80020b0:	250c      	movcc	r5, #12
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	4607      	mov	r7, r0
 80020b6:	db01      	blt.n	80020bc <_malloc_r+0x1c>
 80020b8:	42a9      	cmp	r1, r5
 80020ba:	d905      	bls.n	80020c8 <_malloc_r+0x28>
 80020bc:	230c      	movs	r3, #12
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	2600      	movs	r6, #0
 80020c2:	4630      	mov	r0, r6
 80020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c8:	4e2e      	ldr	r6, [pc, #184]	; (8002184 <_malloc_r+0xe4>)
 80020ca:	f000 fc2f 	bl	800292c <__malloc_lock>
 80020ce:	6833      	ldr	r3, [r6, #0]
 80020d0:	461c      	mov	r4, r3
 80020d2:	bb34      	cbnz	r4, 8002122 <_malloc_r+0x82>
 80020d4:	4629      	mov	r1, r5
 80020d6:	4638      	mov	r0, r7
 80020d8:	f7ff ffc2 	bl	8002060 <sbrk_aligned>
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	4604      	mov	r4, r0
 80020e0:	d14d      	bne.n	800217e <_malloc_r+0xde>
 80020e2:	6834      	ldr	r4, [r6, #0]
 80020e4:	4626      	mov	r6, r4
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	d140      	bne.n	800216c <_malloc_r+0xcc>
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	4631      	mov	r1, r6
 80020ee:	4638      	mov	r0, r7
 80020f0:	eb04 0803 	add.w	r8, r4, r3
 80020f4:	f000 f860 	bl	80021b8 <_sbrk_r>
 80020f8:	4580      	cmp	r8, r0
 80020fa:	d13a      	bne.n	8002172 <_malloc_r+0xd2>
 80020fc:	6821      	ldr	r1, [r4, #0]
 80020fe:	3503      	adds	r5, #3
 8002100:	1a6d      	subs	r5, r5, r1
 8002102:	f025 0503 	bic.w	r5, r5, #3
 8002106:	3508      	adds	r5, #8
 8002108:	2d0c      	cmp	r5, #12
 800210a:	bf38      	it	cc
 800210c:	250c      	movcc	r5, #12
 800210e:	4629      	mov	r1, r5
 8002110:	4638      	mov	r0, r7
 8002112:	f7ff ffa5 	bl	8002060 <sbrk_aligned>
 8002116:	3001      	adds	r0, #1
 8002118:	d02b      	beq.n	8002172 <_malloc_r+0xd2>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	442b      	add	r3, r5
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	e00e      	b.n	8002140 <_malloc_r+0xa0>
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	1b52      	subs	r2, r2, r5
 8002126:	d41e      	bmi.n	8002166 <_malloc_r+0xc6>
 8002128:	2a0b      	cmp	r2, #11
 800212a:	d916      	bls.n	800215a <_malloc_r+0xba>
 800212c:	1961      	adds	r1, r4, r5
 800212e:	42a3      	cmp	r3, r4
 8002130:	6025      	str	r5, [r4, #0]
 8002132:	bf18      	it	ne
 8002134:	6059      	strne	r1, [r3, #4]
 8002136:	6863      	ldr	r3, [r4, #4]
 8002138:	bf08      	it	eq
 800213a:	6031      	streq	r1, [r6, #0]
 800213c:	5162      	str	r2, [r4, r5]
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	4638      	mov	r0, r7
 8002142:	f104 060b 	add.w	r6, r4, #11
 8002146:	f000 fbf7 	bl	8002938 <__malloc_unlock>
 800214a:	f026 0607 	bic.w	r6, r6, #7
 800214e:	1d23      	adds	r3, r4, #4
 8002150:	1af2      	subs	r2, r6, r3
 8002152:	d0b6      	beq.n	80020c2 <_malloc_r+0x22>
 8002154:	1b9b      	subs	r3, r3, r6
 8002156:	50a3      	str	r3, [r4, r2]
 8002158:	e7b3      	b.n	80020c2 <_malloc_r+0x22>
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	42a3      	cmp	r3, r4
 800215e:	bf0c      	ite	eq
 8002160:	6032      	streq	r2, [r6, #0]
 8002162:	605a      	strne	r2, [r3, #4]
 8002164:	e7ec      	b.n	8002140 <_malloc_r+0xa0>
 8002166:	4623      	mov	r3, r4
 8002168:	6864      	ldr	r4, [r4, #4]
 800216a:	e7b2      	b.n	80020d2 <_malloc_r+0x32>
 800216c:	4634      	mov	r4, r6
 800216e:	6876      	ldr	r6, [r6, #4]
 8002170:	e7b9      	b.n	80020e6 <_malloc_r+0x46>
 8002172:	230c      	movs	r3, #12
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4638      	mov	r0, r7
 8002178:	f000 fbde 	bl	8002938 <__malloc_unlock>
 800217c:	e7a1      	b.n	80020c2 <_malloc_r+0x22>
 800217e:	6025      	str	r5, [r4, #0]
 8002180:	e7de      	b.n	8002140 <_malloc_r+0xa0>
 8002182:	bf00      	nop
 8002184:	200000dc 	.word	0x200000dc

08002188 <iprintf>:
 8002188:	b40f      	push	{r0, r1, r2, r3}
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <iprintf+0x2c>)
 800218c:	b513      	push	{r0, r1, r4, lr}
 800218e:	681c      	ldr	r4, [r3, #0]
 8002190:	b124      	cbz	r4, 800219c <iprintf+0x14>
 8002192:	69a3      	ldr	r3, [r4, #24]
 8002194:	b913      	cbnz	r3, 800219c <iprintf+0x14>
 8002196:	4620      	mov	r0, r4
 8002198:	f000 fac2 	bl	8002720 <__sinit>
 800219c:	ab05      	add	r3, sp, #20
 800219e:	9a04      	ldr	r2, [sp, #16]
 80021a0:	68a1      	ldr	r1, [r4, #8]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	4620      	mov	r0, r4
 80021a6:	f000 fbf5 	bl	8002994 <_vfiprintf_r>
 80021aa:	b002      	add	sp, #8
 80021ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b0:	b004      	add	sp, #16
 80021b2:	4770      	bx	lr
 80021b4:	20000020 	.word	0x20000020

080021b8 <_sbrk_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d06      	ldr	r5, [pc, #24]	; (80021d4 <_sbrk_r+0x1c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7ff fe68 	bl	8001e98 <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_sbrk_r+0x1a>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_sbrk_r+0x1a>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	200000e8 	.word	0x200000e8

080021d8 <setbuf>:
 80021d8:	2900      	cmp	r1, #0
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	bf0c      	ite	eq
 80021e0:	2202      	moveq	r2, #2
 80021e2:	2200      	movne	r2, #0
 80021e4:	f000 b800 	b.w	80021e8 <setvbuf>

080021e8 <setvbuf>:
 80021e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021ec:	461d      	mov	r5, r3
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <setvbuf+0x17c>)
 80021f0:	681f      	ldr	r7, [r3, #0]
 80021f2:	4604      	mov	r4, r0
 80021f4:	460e      	mov	r6, r1
 80021f6:	4690      	mov	r8, r2
 80021f8:	b127      	cbz	r7, 8002204 <setvbuf+0x1c>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	b913      	cbnz	r3, 8002204 <setvbuf+0x1c>
 80021fe:	4638      	mov	r0, r7
 8002200:	f000 fa8e 	bl	8002720 <__sinit>
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <setvbuf+0x180>)
 8002206:	429c      	cmp	r4, r3
 8002208:	d167      	bne.n	80022da <setvbuf+0xf2>
 800220a:	687c      	ldr	r4, [r7, #4]
 800220c:	f1b8 0f02 	cmp.w	r8, #2
 8002210:	d006      	beq.n	8002220 <setvbuf+0x38>
 8002212:	f1b8 0f01 	cmp.w	r8, #1
 8002216:	f200 809f 	bhi.w	8002358 <setvbuf+0x170>
 800221a:	2d00      	cmp	r5, #0
 800221c:	f2c0 809c 	blt.w	8002358 <setvbuf+0x170>
 8002220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002222:	07db      	lsls	r3, r3, #31
 8002224:	d405      	bmi.n	8002232 <setvbuf+0x4a>
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	0598      	lsls	r0, r3, #22
 800222a:	d402      	bmi.n	8002232 <setvbuf+0x4a>
 800222c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800222e:	f000 fb15 	bl	800285c <__retarget_lock_acquire_recursive>
 8002232:	4621      	mov	r1, r4
 8002234:	4638      	mov	r0, r7
 8002236:	f000 f9df 	bl	80025f8 <_fflush_r>
 800223a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800223c:	b141      	cbz	r1, 8002250 <setvbuf+0x68>
 800223e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002242:	4299      	cmp	r1, r3
 8002244:	d002      	beq.n	800224c <setvbuf+0x64>
 8002246:	4638      	mov	r0, r7
 8002248:	f7ff fec0 	bl	8001fcc <_free_r>
 800224c:	2300      	movs	r3, #0
 800224e:	6363      	str	r3, [r4, #52]	; 0x34
 8002250:	2300      	movs	r3, #0
 8002252:	61a3      	str	r3, [r4, #24]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	0619      	lsls	r1, r3, #24
 800225a:	d503      	bpl.n	8002264 <setvbuf+0x7c>
 800225c:	6921      	ldr	r1, [r4, #16]
 800225e:	4638      	mov	r0, r7
 8002260:	f7ff feb4 	bl	8001fcc <_free_r>
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	f1b8 0f02 	cmp.w	r8, #2
 8002272:	81a3      	strh	r3, [r4, #12]
 8002274:	d06c      	beq.n	8002350 <setvbuf+0x168>
 8002276:	ab01      	add	r3, sp, #4
 8002278:	466a      	mov	r2, sp
 800227a:	4621      	mov	r1, r4
 800227c:	4638      	mov	r0, r7
 800227e:	f000 faef 	bl	8002860 <__swhatbuf_r>
 8002282:	89a3      	ldrh	r3, [r4, #12]
 8002284:	4318      	orrs	r0, r3
 8002286:	81a0      	strh	r0, [r4, #12]
 8002288:	2d00      	cmp	r5, #0
 800228a:	d130      	bne.n	80022ee <setvbuf+0x106>
 800228c:	9d00      	ldr	r5, [sp, #0]
 800228e:	4628      	mov	r0, r5
 8002290:	f7ff fe8c 	bl	8001fac <malloc>
 8002294:	4606      	mov	r6, r0
 8002296:	2800      	cmp	r0, #0
 8002298:	d155      	bne.n	8002346 <setvbuf+0x15e>
 800229a:	f8dd 9000 	ldr.w	r9, [sp]
 800229e:	45a9      	cmp	r9, r5
 80022a0:	d14a      	bne.n	8002338 <setvbuf+0x150>
 80022a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022a6:	2200      	movs	r2, #0
 80022a8:	60a2      	str	r2, [r4, #8]
 80022aa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80022ae:	6022      	str	r2, [r4, #0]
 80022b0:	6122      	str	r2, [r4, #16]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022b8:	6162      	str	r2, [r4, #20]
 80022ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	07d2      	lsls	r2, r2, #31
 80022c2:	81a3      	strh	r3, [r4, #12]
 80022c4:	d405      	bmi.n	80022d2 <setvbuf+0xea>
 80022c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80022ca:	d102      	bne.n	80022d2 <setvbuf+0xea>
 80022cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022ce:	f000 fac6 	bl	800285e <__retarget_lock_release_recursive>
 80022d2:	4628      	mov	r0, r5
 80022d4:	b003      	add	sp, #12
 80022d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <setvbuf+0x184>)
 80022dc:	429c      	cmp	r4, r3
 80022de:	d101      	bne.n	80022e4 <setvbuf+0xfc>
 80022e0:	68bc      	ldr	r4, [r7, #8]
 80022e2:	e793      	b.n	800220c <setvbuf+0x24>
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <setvbuf+0x188>)
 80022e6:	429c      	cmp	r4, r3
 80022e8:	bf08      	it	eq
 80022ea:	68fc      	ldreq	r4, [r7, #12]
 80022ec:	e78e      	b.n	800220c <setvbuf+0x24>
 80022ee:	2e00      	cmp	r6, #0
 80022f0:	d0cd      	beq.n	800228e <setvbuf+0xa6>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	b913      	cbnz	r3, 80022fc <setvbuf+0x114>
 80022f6:	4638      	mov	r0, r7
 80022f8:	f000 fa12 	bl	8002720 <__sinit>
 80022fc:	f1b8 0f01 	cmp.w	r8, #1
 8002300:	bf08      	it	eq
 8002302:	89a3      	ldrheq	r3, [r4, #12]
 8002304:	6026      	str	r6, [r4, #0]
 8002306:	bf04      	itt	eq
 8002308:	f043 0301 	orreq.w	r3, r3, #1
 800230c:	81a3      	strheq	r3, [r4, #12]
 800230e:	89a2      	ldrh	r2, [r4, #12]
 8002310:	f012 0308 	ands.w	r3, r2, #8
 8002314:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002318:	d01c      	beq.n	8002354 <setvbuf+0x16c>
 800231a:	07d3      	lsls	r3, r2, #31
 800231c:	bf41      	itttt	mi
 800231e:	2300      	movmi	r3, #0
 8002320:	426d      	negmi	r5, r5
 8002322:	60a3      	strmi	r3, [r4, #8]
 8002324:	61a5      	strmi	r5, [r4, #24]
 8002326:	bf58      	it	pl
 8002328:	60a5      	strpl	r5, [r4, #8]
 800232a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800232c:	f015 0501 	ands.w	r5, r5, #1
 8002330:	d115      	bne.n	800235e <setvbuf+0x176>
 8002332:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002336:	e7c8      	b.n	80022ca <setvbuf+0xe2>
 8002338:	4648      	mov	r0, r9
 800233a:	f7ff fe37 	bl	8001fac <malloc>
 800233e:	4606      	mov	r6, r0
 8002340:	2800      	cmp	r0, #0
 8002342:	d0ae      	beq.n	80022a2 <setvbuf+0xba>
 8002344:	464d      	mov	r5, r9
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	e7d0      	b.n	80022f2 <setvbuf+0x10a>
 8002350:	2500      	movs	r5, #0
 8002352:	e7a8      	b.n	80022a6 <setvbuf+0xbe>
 8002354:	60a3      	str	r3, [r4, #8]
 8002356:	e7e8      	b.n	800232a <setvbuf+0x142>
 8002358:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800235c:	e7b9      	b.n	80022d2 <setvbuf+0xea>
 800235e:	2500      	movs	r5, #0
 8002360:	e7b7      	b.n	80022d2 <setvbuf+0xea>
 8002362:	bf00      	nop
 8002364:	20000020 	.word	0x20000020
 8002368:	08003130 	.word	0x08003130
 800236c:	08003150 	.word	0x08003150
 8002370:	08003110 	.word	0x08003110

08002374 <__swbuf_r>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	460e      	mov	r6, r1
 8002378:	4614      	mov	r4, r2
 800237a:	4605      	mov	r5, r0
 800237c:	b118      	cbz	r0, 8002386 <__swbuf_r+0x12>
 800237e:	6983      	ldr	r3, [r0, #24]
 8002380:	b90b      	cbnz	r3, 8002386 <__swbuf_r+0x12>
 8002382:	f000 f9cd 	bl	8002720 <__sinit>
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <__swbuf_r+0x98>)
 8002388:	429c      	cmp	r4, r3
 800238a:	d12b      	bne.n	80023e4 <__swbuf_r+0x70>
 800238c:	686c      	ldr	r4, [r5, #4]
 800238e:	69a3      	ldr	r3, [r4, #24]
 8002390:	60a3      	str	r3, [r4, #8]
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	071a      	lsls	r2, r3, #28
 8002396:	d52f      	bpl.n	80023f8 <__swbuf_r+0x84>
 8002398:	6923      	ldr	r3, [r4, #16]
 800239a:	b36b      	cbz	r3, 80023f8 <__swbuf_r+0x84>
 800239c:	6923      	ldr	r3, [r4, #16]
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	1ac0      	subs	r0, r0, r3
 80023a2:	6963      	ldr	r3, [r4, #20]
 80023a4:	b2f6      	uxtb	r6, r6
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4637      	mov	r7, r6
 80023aa:	dc04      	bgt.n	80023b6 <__swbuf_r+0x42>
 80023ac:	4621      	mov	r1, r4
 80023ae:	4628      	mov	r0, r5
 80023b0:	f000 f922 	bl	80025f8 <_fflush_r>
 80023b4:	bb30      	cbnz	r0, 8002404 <__swbuf_r+0x90>
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60a3      	str	r3, [r4, #8]
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	6022      	str	r2, [r4, #0]
 80023c2:	701e      	strb	r6, [r3, #0]
 80023c4:	6963      	ldr	r3, [r4, #20]
 80023c6:	3001      	adds	r0, #1
 80023c8:	4283      	cmp	r3, r0
 80023ca:	d004      	beq.n	80023d6 <__swbuf_r+0x62>
 80023cc:	89a3      	ldrh	r3, [r4, #12]
 80023ce:	07db      	lsls	r3, r3, #31
 80023d0:	d506      	bpl.n	80023e0 <__swbuf_r+0x6c>
 80023d2:	2e0a      	cmp	r6, #10
 80023d4:	d104      	bne.n	80023e0 <__swbuf_r+0x6c>
 80023d6:	4621      	mov	r1, r4
 80023d8:	4628      	mov	r0, r5
 80023da:	f000 f90d 	bl	80025f8 <_fflush_r>
 80023de:	b988      	cbnz	r0, 8002404 <__swbuf_r+0x90>
 80023e0:	4638      	mov	r0, r7
 80023e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <__swbuf_r+0x9c>)
 80023e6:	429c      	cmp	r4, r3
 80023e8:	d101      	bne.n	80023ee <__swbuf_r+0x7a>
 80023ea:	68ac      	ldr	r4, [r5, #8]
 80023ec:	e7cf      	b.n	800238e <__swbuf_r+0x1a>
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <__swbuf_r+0xa0>)
 80023f0:	429c      	cmp	r4, r3
 80023f2:	bf08      	it	eq
 80023f4:	68ec      	ldreq	r4, [r5, #12]
 80023f6:	e7ca      	b.n	800238e <__swbuf_r+0x1a>
 80023f8:	4621      	mov	r1, r4
 80023fa:	4628      	mov	r0, r5
 80023fc:	f000 f80c 	bl	8002418 <__swsetup_r>
 8002400:	2800      	cmp	r0, #0
 8002402:	d0cb      	beq.n	800239c <__swbuf_r+0x28>
 8002404:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002408:	e7ea      	b.n	80023e0 <__swbuf_r+0x6c>
 800240a:	bf00      	nop
 800240c:	08003130 	.word	0x08003130
 8002410:	08003150 	.word	0x08003150
 8002414:	08003110 	.word	0x08003110

08002418 <__swsetup_r>:
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <__swsetup_r+0xcc>)
 800241a:	b570      	push	{r4, r5, r6, lr}
 800241c:	681d      	ldr	r5, [r3, #0]
 800241e:	4606      	mov	r6, r0
 8002420:	460c      	mov	r4, r1
 8002422:	b125      	cbz	r5, 800242e <__swsetup_r+0x16>
 8002424:	69ab      	ldr	r3, [r5, #24]
 8002426:	b913      	cbnz	r3, 800242e <__swsetup_r+0x16>
 8002428:	4628      	mov	r0, r5
 800242a:	f000 f979 	bl	8002720 <__sinit>
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <__swsetup_r+0xd0>)
 8002430:	429c      	cmp	r4, r3
 8002432:	d10f      	bne.n	8002454 <__swsetup_r+0x3c>
 8002434:	686c      	ldr	r4, [r5, #4]
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800243c:	0719      	lsls	r1, r3, #28
 800243e:	d42c      	bmi.n	800249a <__swsetup_r+0x82>
 8002440:	06dd      	lsls	r5, r3, #27
 8002442:	d411      	bmi.n	8002468 <__swsetup_r+0x50>
 8002444:	2309      	movs	r3, #9
 8002446:	6033      	str	r3, [r6, #0]
 8002448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800244c:	81a3      	strh	r3, [r4, #12]
 800244e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002452:	e03e      	b.n	80024d2 <__swsetup_r+0xba>
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <__swsetup_r+0xd4>)
 8002456:	429c      	cmp	r4, r3
 8002458:	d101      	bne.n	800245e <__swsetup_r+0x46>
 800245a:	68ac      	ldr	r4, [r5, #8]
 800245c:	e7eb      	b.n	8002436 <__swsetup_r+0x1e>
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <__swsetup_r+0xd8>)
 8002460:	429c      	cmp	r4, r3
 8002462:	bf08      	it	eq
 8002464:	68ec      	ldreq	r4, [r5, #12]
 8002466:	e7e6      	b.n	8002436 <__swsetup_r+0x1e>
 8002468:	0758      	lsls	r0, r3, #29
 800246a:	d512      	bpl.n	8002492 <__swsetup_r+0x7a>
 800246c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800246e:	b141      	cbz	r1, 8002482 <__swsetup_r+0x6a>
 8002470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002474:	4299      	cmp	r1, r3
 8002476:	d002      	beq.n	800247e <__swsetup_r+0x66>
 8002478:	4630      	mov	r0, r6
 800247a:	f7ff fda7 	bl	8001fcc <_free_r>
 800247e:	2300      	movs	r3, #0
 8002480:	6363      	str	r3, [r4, #52]	; 0x34
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002488:	81a3      	strh	r3, [r4, #12]
 800248a:	2300      	movs	r3, #0
 800248c:	6063      	str	r3, [r4, #4]
 800248e:	6923      	ldr	r3, [r4, #16]
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	89a3      	ldrh	r3, [r4, #12]
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	81a3      	strh	r3, [r4, #12]
 800249a:	6923      	ldr	r3, [r4, #16]
 800249c:	b94b      	cbnz	r3, 80024b2 <__swsetup_r+0x9a>
 800249e:	89a3      	ldrh	r3, [r4, #12]
 80024a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a8:	d003      	beq.n	80024b2 <__swsetup_r+0x9a>
 80024aa:	4621      	mov	r1, r4
 80024ac:	4630      	mov	r0, r6
 80024ae:	f000 f9fd 	bl	80028ac <__smakebuf_r>
 80024b2:	89a0      	ldrh	r0, [r4, #12]
 80024b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024b8:	f010 0301 	ands.w	r3, r0, #1
 80024bc:	d00a      	beq.n	80024d4 <__swsetup_r+0xbc>
 80024be:	2300      	movs	r3, #0
 80024c0:	60a3      	str	r3, [r4, #8]
 80024c2:	6963      	ldr	r3, [r4, #20]
 80024c4:	425b      	negs	r3, r3
 80024c6:	61a3      	str	r3, [r4, #24]
 80024c8:	6923      	ldr	r3, [r4, #16]
 80024ca:	b943      	cbnz	r3, 80024de <__swsetup_r+0xc6>
 80024cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024d0:	d1ba      	bne.n	8002448 <__swsetup_r+0x30>
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	0781      	lsls	r1, r0, #30
 80024d6:	bf58      	it	pl
 80024d8:	6963      	ldrpl	r3, [r4, #20]
 80024da:	60a3      	str	r3, [r4, #8]
 80024dc:	e7f4      	b.n	80024c8 <__swsetup_r+0xb0>
 80024de:	2000      	movs	r0, #0
 80024e0:	e7f7      	b.n	80024d2 <__swsetup_r+0xba>
 80024e2:	bf00      	nop
 80024e4:	20000020 	.word	0x20000020
 80024e8:	08003130 	.word	0x08003130
 80024ec:	08003150 	.word	0x08003150
 80024f0:	08003110 	.word	0x08003110

080024f4 <__sflush_r>:
 80024f4:	898a      	ldrh	r2, [r1, #12]
 80024f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f8:	4605      	mov	r5, r0
 80024fa:	0710      	lsls	r0, r2, #28
 80024fc:	460c      	mov	r4, r1
 80024fe:	d457      	bmi.n	80025b0 <__sflush_r+0xbc>
 8002500:	684b      	ldr	r3, [r1, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	dc04      	bgt.n	8002510 <__sflush_r+0x1c>
 8002506:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	dc01      	bgt.n	8002510 <__sflush_r+0x1c>
 800250c:	2000      	movs	r0, #0
 800250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002512:	2e00      	cmp	r6, #0
 8002514:	d0fa      	beq.n	800250c <__sflush_r+0x18>
 8002516:	2300      	movs	r3, #0
 8002518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800251c:	682f      	ldr	r7, [r5, #0]
 800251e:	602b      	str	r3, [r5, #0]
 8002520:	d032      	beq.n	8002588 <__sflush_r+0x94>
 8002522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	075a      	lsls	r2, r3, #29
 8002528:	d505      	bpl.n	8002536 <__sflush_r+0x42>
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	1ac0      	subs	r0, r0, r3
 800252e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002530:	b10b      	cbz	r3, 8002536 <__sflush_r+0x42>
 8002532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002534:	1ac0      	subs	r0, r0, r3
 8002536:	2300      	movs	r3, #0
 8002538:	4602      	mov	r2, r0
 800253a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800253c:	6a21      	ldr	r1, [r4, #32]
 800253e:	4628      	mov	r0, r5
 8002540:	47b0      	blx	r6
 8002542:	1c43      	adds	r3, r0, #1
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	d106      	bne.n	8002556 <__sflush_r+0x62>
 8002548:	6829      	ldr	r1, [r5, #0]
 800254a:	291d      	cmp	r1, #29
 800254c:	d82c      	bhi.n	80025a8 <__sflush_r+0xb4>
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <__sflush_r+0x100>)
 8002550:	40ca      	lsrs	r2, r1
 8002552:	07d6      	lsls	r6, r2, #31
 8002554:	d528      	bpl.n	80025a8 <__sflush_r+0xb4>
 8002556:	2200      	movs	r2, #0
 8002558:	6062      	str	r2, [r4, #4]
 800255a:	04d9      	lsls	r1, r3, #19
 800255c:	6922      	ldr	r2, [r4, #16]
 800255e:	6022      	str	r2, [r4, #0]
 8002560:	d504      	bpl.n	800256c <__sflush_r+0x78>
 8002562:	1c42      	adds	r2, r0, #1
 8002564:	d101      	bne.n	800256a <__sflush_r+0x76>
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	b903      	cbnz	r3, 800256c <__sflush_r+0x78>
 800256a:	6560      	str	r0, [r4, #84]	; 0x54
 800256c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800256e:	602f      	str	r7, [r5, #0]
 8002570:	2900      	cmp	r1, #0
 8002572:	d0cb      	beq.n	800250c <__sflush_r+0x18>
 8002574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002578:	4299      	cmp	r1, r3
 800257a:	d002      	beq.n	8002582 <__sflush_r+0x8e>
 800257c:	4628      	mov	r0, r5
 800257e:	f7ff fd25 	bl	8001fcc <_free_r>
 8002582:	2000      	movs	r0, #0
 8002584:	6360      	str	r0, [r4, #52]	; 0x34
 8002586:	e7c2      	b.n	800250e <__sflush_r+0x1a>
 8002588:	6a21      	ldr	r1, [r4, #32]
 800258a:	2301      	movs	r3, #1
 800258c:	4628      	mov	r0, r5
 800258e:	47b0      	blx	r6
 8002590:	1c41      	adds	r1, r0, #1
 8002592:	d1c7      	bne.n	8002524 <__sflush_r+0x30>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0c4      	beq.n	8002524 <__sflush_r+0x30>
 800259a:	2b1d      	cmp	r3, #29
 800259c:	d001      	beq.n	80025a2 <__sflush_r+0xae>
 800259e:	2b16      	cmp	r3, #22
 80025a0:	d101      	bne.n	80025a6 <__sflush_r+0xb2>
 80025a2:	602f      	str	r7, [r5, #0]
 80025a4:	e7b2      	b.n	800250c <__sflush_r+0x18>
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	e7ae      	b.n	800250e <__sflush_r+0x1a>
 80025b0:	690f      	ldr	r7, [r1, #16]
 80025b2:	2f00      	cmp	r7, #0
 80025b4:	d0aa      	beq.n	800250c <__sflush_r+0x18>
 80025b6:	0793      	lsls	r3, r2, #30
 80025b8:	680e      	ldr	r6, [r1, #0]
 80025ba:	bf08      	it	eq
 80025bc:	694b      	ldreq	r3, [r1, #20]
 80025be:	600f      	str	r7, [r1, #0]
 80025c0:	bf18      	it	ne
 80025c2:	2300      	movne	r3, #0
 80025c4:	1bf6      	subs	r6, r6, r7
 80025c6:	608b      	str	r3, [r1, #8]
 80025c8:	2e00      	cmp	r6, #0
 80025ca:	dd9f      	ble.n	800250c <__sflush_r+0x18>
 80025cc:	6a21      	ldr	r1, [r4, #32]
 80025ce:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80025d2:	4633      	mov	r3, r6
 80025d4:	463a      	mov	r2, r7
 80025d6:	4628      	mov	r0, r5
 80025d8:	47e0      	blx	ip
 80025da:	2800      	cmp	r0, #0
 80025dc:	dc06      	bgt.n	80025ec <__sflush_r+0xf8>
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ea:	e790      	b.n	800250e <__sflush_r+0x1a>
 80025ec:	4407      	add	r7, r0
 80025ee:	1a36      	subs	r6, r6, r0
 80025f0:	e7ea      	b.n	80025c8 <__sflush_r+0xd4>
 80025f2:	bf00      	nop
 80025f4:	20400001 	.word	0x20400001

080025f8 <_fflush_r>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	690b      	ldr	r3, [r1, #16]
 80025fc:	4605      	mov	r5, r0
 80025fe:	460c      	mov	r4, r1
 8002600:	b913      	cbnz	r3, 8002608 <_fflush_r+0x10>
 8002602:	2500      	movs	r5, #0
 8002604:	4628      	mov	r0, r5
 8002606:	bd38      	pop	{r3, r4, r5, pc}
 8002608:	b118      	cbz	r0, 8002612 <_fflush_r+0x1a>
 800260a:	6983      	ldr	r3, [r0, #24]
 800260c:	b90b      	cbnz	r3, 8002612 <_fflush_r+0x1a>
 800260e:	f000 f887 	bl	8002720 <__sinit>
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <_fflush_r+0x6c>)
 8002614:	429c      	cmp	r4, r3
 8002616:	d11b      	bne.n	8002650 <_fflush_r+0x58>
 8002618:	686c      	ldr	r4, [r5, #4]
 800261a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ef      	beq.n	8002602 <_fflush_r+0xa>
 8002622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002624:	07d0      	lsls	r0, r2, #31
 8002626:	d404      	bmi.n	8002632 <_fflush_r+0x3a>
 8002628:	0599      	lsls	r1, r3, #22
 800262a:	d402      	bmi.n	8002632 <_fflush_r+0x3a>
 800262c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800262e:	f000 f915 	bl	800285c <__retarget_lock_acquire_recursive>
 8002632:	4628      	mov	r0, r5
 8002634:	4621      	mov	r1, r4
 8002636:	f7ff ff5d 	bl	80024f4 <__sflush_r>
 800263a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800263c:	07da      	lsls	r2, r3, #31
 800263e:	4605      	mov	r5, r0
 8002640:	d4e0      	bmi.n	8002604 <_fflush_r+0xc>
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	059b      	lsls	r3, r3, #22
 8002646:	d4dd      	bmi.n	8002604 <_fflush_r+0xc>
 8002648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800264a:	f000 f908 	bl	800285e <__retarget_lock_release_recursive>
 800264e:	e7d9      	b.n	8002604 <_fflush_r+0xc>
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <_fflush_r+0x70>)
 8002652:	429c      	cmp	r4, r3
 8002654:	d101      	bne.n	800265a <_fflush_r+0x62>
 8002656:	68ac      	ldr	r4, [r5, #8]
 8002658:	e7df      	b.n	800261a <_fflush_r+0x22>
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <_fflush_r+0x74>)
 800265c:	429c      	cmp	r4, r3
 800265e:	bf08      	it	eq
 8002660:	68ec      	ldreq	r4, [r5, #12]
 8002662:	e7da      	b.n	800261a <_fflush_r+0x22>
 8002664:	08003130 	.word	0x08003130
 8002668:	08003150 	.word	0x08003150
 800266c:	08003110 	.word	0x08003110

08002670 <std>:
 8002670:	2300      	movs	r3, #0
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
 8002676:	e9c0 3300 	strd	r3, r3, [r0]
 800267a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800267e:	6083      	str	r3, [r0, #8]
 8002680:	8181      	strh	r1, [r0, #12]
 8002682:	6643      	str	r3, [r0, #100]	; 0x64
 8002684:	81c2      	strh	r2, [r0, #14]
 8002686:	6183      	str	r3, [r0, #24]
 8002688:	4619      	mov	r1, r3
 800268a:	2208      	movs	r2, #8
 800268c:	305c      	adds	r0, #92	; 0x5c
 800268e:	f7ff fc95 	bl	8001fbc <memset>
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <std+0x38>)
 8002694:	6263      	str	r3, [r4, #36]	; 0x24
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <std+0x3c>)
 8002698:	62a3      	str	r3, [r4, #40]	; 0x28
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <std+0x40>)
 800269c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <std+0x44>)
 80026a0:	6224      	str	r4, [r4, #32]
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	bf00      	nop
 80026a8:	08002f1d 	.word	0x08002f1d
 80026ac:	08002f3f 	.word	0x08002f3f
 80026b0:	08002f77 	.word	0x08002f77
 80026b4:	08002f9b 	.word	0x08002f9b

080026b8 <_cleanup_r>:
 80026b8:	4901      	ldr	r1, [pc, #4]	; (80026c0 <_cleanup_r+0x8>)
 80026ba:	f000 b8af 	b.w	800281c <_fwalk_reent>
 80026be:	bf00      	nop
 80026c0:	080025f9 	.word	0x080025f9

080026c4 <__sfmoreglue>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	2268      	movs	r2, #104	; 0x68
 80026c8:	1e4d      	subs	r5, r1, #1
 80026ca:	4355      	muls	r5, r2
 80026cc:	460e      	mov	r6, r1
 80026ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026d2:	f7ff fce5 	bl	80020a0 <_malloc_r>
 80026d6:	4604      	mov	r4, r0
 80026d8:	b140      	cbz	r0, 80026ec <__sfmoreglue+0x28>
 80026da:	2100      	movs	r1, #0
 80026dc:	e9c0 1600 	strd	r1, r6, [r0]
 80026e0:	300c      	adds	r0, #12
 80026e2:	60a0      	str	r0, [r4, #8]
 80026e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026e8:	f7ff fc68 	bl	8001fbc <memset>
 80026ec:	4620      	mov	r0, r4
 80026ee:	bd70      	pop	{r4, r5, r6, pc}

080026f0 <__sfp_lock_acquire>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sfp_lock_acquire+0x8>)
 80026f2:	f000 b8b3 	b.w	800285c <__retarget_lock_acquire_recursive>
 80026f6:	bf00      	nop
 80026f8:	200000e5 	.word	0x200000e5

080026fc <__sfp_lock_release>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__sfp_lock_release+0x8>)
 80026fe:	f000 b8ae 	b.w	800285e <__retarget_lock_release_recursive>
 8002702:	bf00      	nop
 8002704:	200000e5 	.word	0x200000e5

08002708 <__sinit_lock_acquire>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__sinit_lock_acquire+0x8>)
 800270a:	f000 b8a7 	b.w	800285c <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	200000e6 	.word	0x200000e6

08002714 <__sinit_lock_release>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__sinit_lock_release+0x8>)
 8002716:	f000 b8a2 	b.w	800285e <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	200000e6 	.word	0x200000e6

08002720 <__sinit>:
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	f7ff fff0 	bl	8002708 <__sinit_lock_acquire>
 8002728:	69a3      	ldr	r3, [r4, #24]
 800272a:	b11b      	cbz	r3, 8002734 <__sinit+0x14>
 800272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002730:	f7ff bff0 	b.w	8002714 <__sinit_lock_release>
 8002734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002738:	6523      	str	r3, [r4, #80]	; 0x50
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <__sinit+0x68>)
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <__sinit+0x6c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	62a2      	str	r2, [r4, #40]	; 0x28
 8002742:	42a3      	cmp	r3, r4
 8002744:	bf04      	itt	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	61a3      	streq	r3, [r4, #24]
 800274a:	4620      	mov	r0, r4
 800274c:	f000 f820 	bl	8002790 <__sfp>
 8002750:	6060      	str	r0, [r4, #4]
 8002752:	4620      	mov	r0, r4
 8002754:	f000 f81c 	bl	8002790 <__sfp>
 8002758:	60a0      	str	r0, [r4, #8]
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f818 	bl	8002790 <__sfp>
 8002760:	2200      	movs	r2, #0
 8002762:	60e0      	str	r0, [r4, #12]
 8002764:	2104      	movs	r1, #4
 8002766:	6860      	ldr	r0, [r4, #4]
 8002768:	f7ff ff82 	bl	8002670 <std>
 800276c:	68a0      	ldr	r0, [r4, #8]
 800276e:	2201      	movs	r2, #1
 8002770:	2109      	movs	r1, #9
 8002772:	f7ff ff7d 	bl	8002670 <std>
 8002776:	68e0      	ldr	r0, [r4, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	2112      	movs	r1, #18
 800277c:	f7ff ff78 	bl	8002670 <std>
 8002780:	2301      	movs	r3, #1
 8002782:	61a3      	str	r3, [r4, #24]
 8002784:	e7d2      	b.n	800272c <__sinit+0xc>
 8002786:	bf00      	nop
 8002788:	0800310c 	.word	0x0800310c
 800278c:	080026b9 	.word	0x080026b9

08002790 <__sfp>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	4607      	mov	r7, r0
 8002794:	f7ff ffac 	bl	80026f0 <__sfp_lock_acquire>
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <__sfp+0x84>)
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	69b3      	ldr	r3, [r6, #24]
 800279e:	b913      	cbnz	r3, 80027a6 <__sfp+0x16>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff ffbd 	bl	8002720 <__sinit>
 80027a6:	3648      	adds	r6, #72	; 0x48
 80027a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	d503      	bpl.n	80027b8 <__sfp+0x28>
 80027b0:	6833      	ldr	r3, [r6, #0]
 80027b2:	b30b      	cbz	r3, 80027f8 <__sfp+0x68>
 80027b4:	6836      	ldr	r6, [r6, #0]
 80027b6:	e7f7      	b.n	80027a8 <__sfp+0x18>
 80027b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027bc:	b9d5      	cbnz	r5, 80027f4 <__sfp+0x64>
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <__sfp+0x88>)
 80027c0:	60e3      	str	r3, [r4, #12]
 80027c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027c6:	6665      	str	r5, [r4, #100]	; 0x64
 80027c8:	f000 f847 	bl	800285a <__retarget_lock_init_recursive>
 80027cc:	f7ff ff96 	bl	80026fc <__sfp_lock_release>
 80027d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027d8:	6025      	str	r5, [r4, #0]
 80027da:	61a5      	str	r5, [r4, #24]
 80027dc:	2208      	movs	r2, #8
 80027de:	4629      	mov	r1, r5
 80027e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027e4:	f7ff fbea 	bl	8001fbc <memset>
 80027e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027f0:	4620      	mov	r0, r4
 80027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f4:	3468      	adds	r4, #104	; 0x68
 80027f6:	e7d9      	b.n	80027ac <__sfp+0x1c>
 80027f8:	2104      	movs	r1, #4
 80027fa:	4638      	mov	r0, r7
 80027fc:	f7ff ff62 	bl	80026c4 <__sfmoreglue>
 8002800:	4604      	mov	r4, r0
 8002802:	6030      	str	r0, [r6, #0]
 8002804:	2800      	cmp	r0, #0
 8002806:	d1d5      	bne.n	80027b4 <__sfp+0x24>
 8002808:	f7ff ff78 	bl	80026fc <__sfp_lock_release>
 800280c:	230c      	movs	r3, #12
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	e7ee      	b.n	80027f0 <__sfp+0x60>
 8002812:	bf00      	nop
 8002814:	0800310c 	.word	0x0800310c
 8002818:	ffff0001 	.word	0xffff0001

0800281c <_fwalk_reent>:
 800281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002820:	4606      	mov	r6, r0
 8002822:	4688      	mov	r8, r1
 8002824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002828:	2700      	movs	r7, #0
 800282a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800282e:	f1b9 0901 	subs.w	r9, r9, #1
 8002832:	d505      	bpl.n	8002840 <_fwalk_reent+0x24>
 8002834:	6824      	ldr	r4, [r4, #0]
 8002836:	2c00      	cmp	r4, #0
 8002838:	d1f7      	bne.n	800282a <_fwalk_reent+0xe>
 800283a:	4638      	mov	r0, r7
 800283c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002840:	89ab      	ldrh	r3, [r5, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d907      	bls.n	8002856 <_fwalk_reent+0x3a>
 8002846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800284a:	3301      	adds	r3, #1
 800284c:	d003      	beq.n	8002856 <_fwalk_reent+0x3a>
 800284e:	4629      	mov	r1, r5
 8002850:	4630      	mov	r0, r6
 8002852:	47c0      	blx	r8
 8002854:	4307      	orrs	r7, r0
 8002856:	3568      	adds	r5, #104	; 0x68
 8002858:	e7e9      	b.n	800282e <_fwalk_reent+0x12>

0800285a <__retarget_lock_init_recursive>:
 800285a:	4770      	bx	lr

0800285c <__retarget_lock_acquire_recursive>:
 800285c:	4770      	bx	lr

0800285e <__retarget_lock_release_recursive>:
 800285e:	4770      	bx	lr

08002860 <__swhatbuf_r>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	460e      	mov	r6, r1
 8002864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002868:	2900      	cmp	r1, #0
 800286a:	b096      	sub	sp, #88	; 0x58
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	da08      	bge.n	8002884 <__swhatbuf_r+0x24>
 8002872:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	602a      	str	r2, [r5, #0]
 800287a:	061a      	lsls	r2, r3, #24
 800287c:	d410      	bmi.n	80028a0 <__swhatbuf_r+0x40>
 800287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002882:	e00e      	b.n	80028a2 <__swhatbuf_r+0x42>
 8002884:	466a      	mov	r2, sp
 8002886:	f000 fbaf 	bl	8002fe8 <_fstat_r>
 800288a:	2800      	cmp	r0, #0
 800288c:	dbf1      	blt.n	8002872 <__swhatbuf_r+0x12>
 800288e:	9a01      	ldr	r2, [sp, #4]
 8002890:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002894:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002898:	425a      	negs	r2, r3
 800289a:	415a      	adcs	r2, r3
 800289c:	602a      	str	r2, [r5, #0]
 800289e:	e7ee      	b.n	800287e <__swhatbuf_r+0x1e>
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	2000      	movs	r0, #0
 80028a4:	6023      	str	r3, [r4, #0]
 80028a6:	b016      	add	sp, #88	; 0x58
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080028ac <__smakebuf_r>:
 80028ac:	898b      	ldrh	r3, [r1, #12]
 80028ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028b0:	079d      	lsls	r5, r3, #30
 80028b2:	4606      	mov	r6, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	d507      	bpl.n	80028c8 <__smakebuf_r+0x1c>
 80028b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	6123      	str	r3, [r4, #16]
 80028c0:	2301      	movs	r3, #1
 80028c2:	6163      	str	r3, [r4, #20]
 80028c4:	b002      	add	sp, #8
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	ab01      	add	r3, sp, #4
 80028ca:	466a      	mov	r2, sp
 80028cc:	f7ff ffc8 	bl	8002860 <__swhatbuf_r>
 80028d0:	9900      	ldr	r1, [sp, #0]
 80028d2:	4605      	mov	r5, r0
 80028d4:	4630      	mov	r0, r6
 80028d6:	f7ff fbe3 	bl	80020a0 <_malloc_r>
 80028da:	b948      	cbnz	r0, 80028f0 <__smakebuf_r+0x44>
 80028dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028e0:	059a      	lsls	r2, r3, #22
 80028e2:	d4ef      	bmi.n	80028c4 <__smakebuf_r+0x18>
 80028e4:	f023 0303 	bic.w	r3, r3, #3
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	e7e3      	b.n	80028b8 <__smakebuf_r+0xc>
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <__smakebuf_r+0x7c>)
 80028f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	6020      	str	r0, [r4, #0]
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	81a3      	strh	r3, [r4, #12]
 80028fe:	9b00      	ldr	r3, [sp, #0]
 8002900:	6163      	str	r3, [r4, #20]
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	6120      	str	r0, [r4, #16]
 8002906:	b15b      	cbz	r3, 8002920 <__smakebuf_r+0x74>
 8002908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800290c:	4630      	mov	r0, r6
 800290e:	f000 fb7d 	bl	800300c <_isatty_r>
 8002912:	b128      	cbz	r0, 8002920 <__smakebuf_r+0x74>
 8002914:	89a3      	ldrh	r3, [r4, #12]
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	89a0      	ldrh	r0, [r4, #12]
 8002922:	4305      	orrs	r5, r0
 8002924:	81a5      	strh	r5, [r4, #12]
 8002926:	e7cd      	b.n	80028c4 <__smakebuf_r+0x18>
 8002928:	080026b9 	.word	0x080026b9

0800292c <__malloc_lock>:
 800292c:	4801      	ldr	r0, [pc, #4]	; (8002934 <__malloc_lock+0x8>)
 800292e:	f7ff bf95 	b.w	800285c <__retarget_lock_acquire_recursive>
 8002932:	bf00      	nop
 8002934:	200000e4 	.word	0x200000e4

08002938 <__malloc_unlock>:
 8002938:	4801      	ldr	r0, [pc, #4]	; (8002940 <__malloc_unlock+0x8>)
 800293a:	f7ff bf90 	b.w	800285e <__retarget_lock_release_recursive>
 800293e:	bf00      	nop
 8002940:	200000e4 	.word	0x200000e4

08002944 <__sfputc_r>:
 8002944:	6893      	ldr	r3, [r2, #8]
 8002946:	3b01      	subs	r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	b410      	push	{r4}
 800294c:	6093      	str	r3, [r2, #8]
 800294e:	da07      	bge.n	8002960 <__sfputc_r+0x1c>
 8002950:	6994      	ldr	r4, [r2, #24]
 8002952:	42a3      	cmp	r3, r4
 8002954:	db01      	blt.n	800295a <__sfputc_r+0x16>
 8002956:	290a      	cmp	r1, #10
 8002958:	d102      	bne.n	8002960 <__sfputc_r+0x1c>
 800295a:	bc10      	pop	{r4}
 800295c:	f7ff bd0a 	b.w	8002374 <__swbuf_r>
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	1c58      	adds	r0, r3, #1
 8002964:	6010      	str	r0, [r2, #0]
 8002966:	7019      	strb	r1, [r3, #0]
 8002968:	4608      	mov	r0, r1
 800296a:	bc10      	pop	{r4}
 800296c:	4770      	bx	lr

0800296e <__sfputs_r>:
 800296e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002970:	4606      	mov	r6, r0
 8002972:	460f      	mov	r7, r1
 8002974:	4614      	mov	r4, r2
 8002976:	18d5      	adds	r5, r2, r3
 8002978:	42ac      	cmp	r4, r5
 800297a:	d101      	bne.n	8002980 <__sfputs_r+0x12>
 800297c:	2000      	movs	r0, #0
 800297e:	e007      	b.n	8002990 <__sfputs_r+0x22>
 8002980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002984:	463a      	mov	r2, r7
 8002986:	4630      	mov	r0, r6
 8002988:	f7ff ffdc 	bl	8002944 <__sfputc_r>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d1f3      	bne.n	8002978 <__sfputs_r+0xa>
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002994 <_vfiprintf_r>:
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	460d      	mov	r5, r1
 800299a:	b09d      	sub	sp, #116	; 0x74
 800299c:	4614      	mov	r4, r2
 800299e:	4698      	mov	r8, r3
 80029a0:	4606      	mov	r6, r0
 80029a2:	b118      	cbz	r0, 80029ac <_vfiprintf_r+0x18>
 80029a4:	6983      	ldr	r3, [r0, #24]
 80029a6:	b90b      	cbnz	r3, 80029ac <_vfiprintf_r+0x18>
 80029a8:	f7ff feba 	bl	8002720 <__sinit>
 80029ac:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <_vfiprintf_r+0x240>)
 80029ae:	429d      	cmp	r5, r3
 80029b0:	d11b      	bne.n	80029ea <_vfiprintf_r+0x56>
 80029b2:	6875      	ldr	r5, [r6, #4]
 80029b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029b6:	07d9      	lsls	r1, r3, #31
 80029b8:	d405      	bmi.n	80029c6 <_vfiprintf_r+0x32>
 80029ba:	89ab      	ldrh	r3, [r5, #12]
 80029bc:	059a      	lsls	r2, r3, #22
 80029be:	d402      	bmi.n	80029c6 <_vfiprintf_r+0x32>
 80029c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029c2:	f7ff ff4b 	bl	800285c <__retarget_lock_acquire_recursive>
 80029c6:	89ab      	ldrh	r3, [r5, #12]
 80029c8:	071b      	lsls	r3, r3, #28
 80029ca:	d501      	bpl.n	80029d0 <_vfiprintf_r+0x3c>
 80029cc:	692b      	ldr	r3, [r5, #16]
 80029ce:	b9eb      	cbnz	r3, 8002a0c <_vfiprintf_r+0x78>
 80029d0:	4629      	mov	r1, r5
 80029d2:	4630      	mov	r0, r6
 80029d4:	f7ff fd20 	bl	8002418 <__swsetup_r>
 80029d8:	b1c0      	cbz	r0, 8002a0c <_vfiprintf_r+0x78>
 80029da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029dc:	07dc      	lsls	r4, r3, #31
 80029de:	d50e      	bpl.n	80029fe <_vfiprintf_r+0x6a>
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e4:	b01d      	add	sp, #116	; 0x74
 80029e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ea:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <_vfiprintf_r+0x244>)
 80029ec:	429d      	cmp	r5, r3
 80029ee:	d101      	bne.n	80029f4 <_vfiprintf_r+0x60>
 80029f0:	68b5      	ldr	r5, [r6, #8]
 80029f2:	e7df      	b.n	80029b4 <_vfiprintf_r+0x20>
 80029f4:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <_vfiprintf_r+0x248>)
 80029f6:	429d      	cmp	r5, r3
 80029f8:	bf08      	it	eq
 80029fa:	68f5      	ldreq	r5, [r6, #12]
 80029fc:	e7da      	b.n	80029b4 <_vfiprintf_r+0x20>
 80029fe:	89ab      	ldrh	r3, [r5, #12]
 8002a00:	0598      	lsls	r0, r3, #22
 8002a02:	d4ed      	bmi.n	80029e0 <_vfiprintf_r+0x4c>
 8002a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a06:	f7ff ff2a 	bl	800285e <__retarget_lock_release_recursive>
 8002a0a:	e7e9      	b.n	80029e0 <_vfiprintf_r+0x4c>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a10:	2320      	movs	r3, #32
 8002a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a1a:	2330      	movs	r3, #48	; 0x30
 8002a1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002be0 <_vfiprintf_r+0x24c>
 8002a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a24:	f04f 0901 	mov.w	r9, #1
 8002a28:	4623      	mov	r3, r4
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a30:	b10a      	cbz	r2, 8002a36 <_vfiprintf_r+0xa2>
 8002a32:	2a25      	cmp	r2, #37	; 0x25
 8002a34:	d1f9      	bne.n	8002a2a <_vfiprintf_r+0x96>
 8002a36:	ebba 0b04 	subs.w	fp, sl, r4
 8002a3a:	d00b      	beq.n	8002a54 <_vfiprintf_r+0xc0>
 8002a3c:	465b      	mov	r3, fp
 8002a3e:	4622      	mov	r2, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	4630      	mov	r0, r6
 8002a44:	f7ff ff93 	bl	800296e <__sfputs_r>
 8002a48:	3001      	adds	r0, #1
 8002a4a:	f000 80aa 	beq.w	8002ba2 <_vfiprintf_r+0x20e>
 8002a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a50:	445a      	add	r2, fp
 8002a52:	9209      	str	r2, [sp, #36]	; 0x24
 8002a54:	f89a 3000 	ldrb.w	r3, [sl]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a2 	beq.w	8002ba2 <_vfiprintf_r+0x20e>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a68:	f10a 0a01 	add.w	sl, sl, #1
 8002a6c:	9304      	str	r3, [sp, #16]
 8002a6e:	9307      	str	r3, [sp, #28]
 8002a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a74:	931a      	str	r3, [sp, #104]	; 0x68
 8002a76:	4654      	mov	r4, sl
 8002a78:	2205      	movs	r2, #5
 8002a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a7e:	4858      	ldr	r0, [pc, #352]	; (8002be0 <_vfiprintf_r+0x24c>)
 8002a80:	f7fd fbb6 	bl	80001f0 <memchr>
 8002a84:	9a04      	ldr	r2, [sp, #16]
 8002a86:	b9d8      	cbnz	r0, 8002ac0 <_vfiprintf_r+0x12c>
 8002a88:	06d1      	lsls	r1, r2, #27
 8002a8a:	bf44      	itt	mi
 8002a8c:	2320      	movmi	r3, #32
 8002a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a92:	0713      	lsls	r3, r2, #28
 8002a94:	bf44      	itt	mi
 8002a96:	232b      	movmi	r3, #43	; 0x2b
 8002a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8002aa2:	d015      	beq.n	8002ad0 <_vfiprintf_r+0x13c>
 8002aa4:	9a07      	ldr	r2, [sp, #28]
 8002aa6:	4654      	mov	r4, sl
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f04f 0c0a 	mov.w	ip, #10
 8002aae:	4621      	mov	r1, r4
 8002ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ab4:	3b30      	subs	r3, #48	; 0x30
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d94e      	bls.n	8002b58 <_vfiprintf_r+0x1c4>
 8002aba:	b1b0      	cbz	r0, 8002aea <_vfiprintf_r+0x156>
 8002abc:	9207      	str	r2, [sp, #28]
 8002abe:	e014      	b.n	8002aea <_vfiprintf_r+0x156>
 8002ac0:	eba0 0308 	sub.w	r3, r0, r8
 8002ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	9304      	str	r3, [sp, #16]
 8002acc:	46a2      	mov	sl, r4
 8002ace:	e7d2      	b.n	8002a76 <_vfiprintf_r+0xe2>
 8002ad0:	9b03      	ldr	r3, [sp, #12]
 8002ad2:	1d19      	adds	r1, r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	9103      	str	r1, [sp, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bfbb      	ittet	lt
 8002adc:	425b      	neglt	r3, r3
 8002ade:	f042 0202 	orrlt.w	r2, r2, #2
 8002ae2:	9307      	strge	r3, [sp, #28]
 8002ae4:	9307      	strlt	r3, [sp, #28]
 8002ae6:	bfb8      	it	lt
 8002ae8:	9204      	strlt	r2, [sp, #16]
 8002aea:	7823      	ldrb	r3, [r4, #0]
 8002aec:	2b2e      	cmp	r3, #46	; 0x2e
 8002aee:	d10c      	bne.n	8002b0a <_vfiprintf_r+0x176>
 8002af0:	7863      	ldrb	r3, [r4, #1]
 8002af2:	2b2a      	cmp	r3, #42	; 0x2a
 8002af4:	d135      	bne.n	8002b62 <_vfiprintf_r+0x1ce>
 8002af6:	9b03      	ldr	r3, [sp, #12]
 8002af8:	1d1a      	adds	r2, r3, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	9203      	str	r2, [sp, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bfb8      	it	lt
 8002b02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b06:	3402      	adds	r4, #2
 8002b08:	9305      	str	r3, [sp, #20]
 8002b0a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002be4 <_vfiprintf_r+0x250>
 8002b0e:	7821      	ldrb	r1, [r4, #0]
 8002b10:	2203      	movs	r2, #3
 8002b12:	4650      	mov	r0, sl
 8002b14:	f7fd fb6c 	bl	80001f0 <memchr>
 8002b18:	b140      	cbz	r0, 8002b2c <_vfiprintf_r+0x198>
 8002b1a:	2340      	movs	r3, #64	; 0x40
 8002b1c:	eba0 000a 	sub.w	r0, r0, sl
 8002b20:	fa03 f000 	lsl.w	r0, r3, r0
 8002b24:	9b04      	ldr	r3, [sp, #16]
 8002b26:	4303      	orrs	r3, r0
 8002b28:	3401      	adds	r4, #1
 8002b2a:	9304      	str	r3, [sp, #16]
 8002b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b30:	482d      	ldr	r0, [pc, #180]	; (8002be8 <_vfiprintf_r+0x254>)
 8002b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b36:	2206      	movs	r2, #6
 8002b38:	f7fd fb5a 	bl	80001f0 <memchr>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d03f      	beq.n	8002bc0 <_vfiprintf_r+0x22c>
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <_vfiprintf_r+0x258>)
 8002b42:	bb1b      	cbnz	r3, 8002b8c <_vfiprintf_r+0x1f8>
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	3307      	adds	r3, #7
 8002b48:	f023 0307 	bic.w	r3, r3, #7
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	9303      	str	r3, [sp, #12]
 8002b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b52:	443b      	add	r3, r7
 8002b54:	9309      	str	r3, [sp, #36]	; 0x24
 8002b56:	e767      	b.n	8002a28 <_vfiprintf_r+0x94>
 8002b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	2001      	movs	r0, #1
 8002b60:	e7a5      	b.n	8002aae <_vfiprintf_r+0x11a>
 8002b62:	2300      	movs	r3, #0
 8002b64:	3401      	adds	r4, #1
 8002b66:	9305      	str	r3, [sp, #20]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 0c0a 	mov.w	ip, #10
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b74:	3a30      	subs	r2, #48	; 0x30
 8002b76:	2a09      	cmp	r2, #9
 8002b78:	d903      	bls.n	8002b82 <_vfiprintf_r+0x1ee>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0c5      	beq.n	8002b0a <_vfiprintf_r+0x176>
 8002b7e:	9105      	str	r1, [sp, #20]
 8002b80:	e7c3      	b.n	8002b0a <_vfiprintf_r+0x176>
 8002b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b86:	4604      	mov	r4, r0
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e7f0      	b.n	8002b6e <_vfiprintf_r+0x1da>
 8002b8c:	ab03      	add	r3, sp, #12
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	462a      	mov	r2, r5
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <_vfiprintf_r+0x25c>)
 8002b94:	a904      	add	r1, sp, #16
 8002b96:	4630      	mov	r0, r6
 8002b98:	f3af 8000 	nop.w
 8002b9c:	4607      	mov	r7, r0
 8002b9e:	1c78      	adds	r0, r7, #1
 8002ba0:	d1d6      	bne.n	8002b50 <_vfiprintf_r+0x1bc>
 8002ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ba4:	07d9      	lsls	r1, r3, #31
 8002ba6:	d405      	bmi.n	8002bb4 <_vfiprintf_r+0x220>
 8002ba8:	89ab      	ldrh	r3, [r5, #12]
 8002baa:	059a      	lsls	r2, r3, #22
 8002bac:	d402      	bmi.n	8002bb4 <_vfiprintf_r+0x220>
 8002bae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bb0:	f7ff fe55 	bl	800285e <__retarget_lock_release_recursive>
 8002bb4:	89ab      	ldrh	r3, [r5, #12]
 8002bb6:	065b      	lsls	r3, r3, #25
 8002bb8:	f53f af12 	bmi.w	80029e0 <_vfiprintf_r+0x4c>
 8002bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bbe:	e711      	b.n	80029e4 <_vfiprintf_r+0x50>
 8002bc0:	ab03      	add	r3, sp, #12
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <_vfiprintf_r+0x25c>)
 8002bc8:	a904      	add	r1, sp, #16
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f000 f880 	bl	8002cd0 <_printf_i>
 8002bd0:	e7e4      	b.n	8002b9c <_vfiprintf_r+0x208>
 8002bd2:	bf00      	nop
 8002bd4:	08003130 	.word	0x08003130
 8002bd8:	08003150 	.word	0x08003150
 8002bdc:	08003110 	.word	0x08003110
 8002be0:	08003170 	.word	0x08003170
 8002be4:	08003176 	.word	0x08003176
 8002be8:	0800317a 	.word	0x0800317a
 8002bec:	00000000 	.word	0x00000000
 8002bf0:	0800296f 	.word	0x0800296f

08002bf4 <_printf_common>:
 8002bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	4699      	mov	r9, r3
 8002bfc:	688a      	ldr	r2, [r1, #8]
 8002bfe:	690b      	ldr	r3, [r1, #16]
 8002c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bfb8      	it	lt
 8002c08:	4613      	movlt	r3, r2
 8002c0a:	6033      	str	r3, [r6, #0]
 8002c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c10:	4607      	mov	r7, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	b10a      	cbz	r2, 8002c1a <_printf_common+0x26>
 8002c16:	3301      	adds	r3, #1
 8002c18:	6033      	str	r3, [r6, #0]
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	0699      	lsls	r1, r3, #26
 8002c1e:	bf42      	ittt	mi
 8002c20:	6833      	ldrmi	r3, [r6, #0]
 8002c22:	3302      	addmi	r3, #2
 8002c24:	6033      	strmi	r3, [r6, #0]
 8002c26:	6825      	ldr	r5, [r4, #0]
 8002c28:	f015 0506 	ands.w	r5, r5, #6
 8002c2c:	d106      	bne.n	8002c3c <_printf_common+0x48>
 8002c2e:	f104 0a19 	add.w	sl, r4, #25
 8002c32:	68e3      	ldr	r3, [r4, #12]
 8002c34:	6832      	ldr	r2, [r6, #0]
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	42ab      	cmp	r3, r5
 8002c3a:	dc26      	bgt.n	8002c8a <_printf_common+0x96>
 8002c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c40:	1e13      	subs	r3, r2, #0
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	bf18      	it	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	0692      	lsls	r2, r2, #26
 8002c4a:	d42b      	bmi.n	8002ca4 <_printf_common+0xb0>
 8002c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c50:	4649      	mov	r1, r9
 8002c52:	4638      	mov	r0, r7
 8002c54:	47c0      	blx	r8
 8002c56:	3001      	adds	r0, #1
 8002c58:	d01e      	beq.n	8002c98 <_printf_common+0xa4>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	68e5      	ldr	r5, [r4, #12]
 8002c5e:	6832      	ldr	r2, [r6, #0]
 8002c60:	f003 0306 	and.w	r3, r3, #6
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	bf08      	it	eq
 8002c68:	1aad      	subeq	r5, r5, r2
 8002c6a:	68a3      	ldr	r3, [r4, #8]
 8002c6c:	6922      	ldr	r2, [r4, #16]
 8002c6e:	bf0c      	ite	eq
 8002c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c74:	2500      	movne	r5, #0
 8002c76:	4293      	cmp	r3, r2
 8002c78:	bfc4      	itt	gt
 8002c7a:	1a9b      	subgt	r3, r3, r2
 8002c7c:	18ed      	addgt	r5, r5, r3
 8002c7e:	2600      	movs	r6, #0
 8002c80:	341a      	adds	r4, #26
 8002c82:	42b5      	cmp	r5, r6
 8002c84:	d11a      	bne.n	8002cbc <_printf_common+0xc8>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e008      	b.n	8002c9c <_printf_common+0xa8>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4652      	mov	r2, sl
 8002c8e:	4649      	mov	r1, r9
 8002c90:	4638      	mov	r0, r7
 8002c92:	47c0      	blx	r8
 8002c94:	3001      	adds	r0, #1
 8002c96:	d103      	bne.n	8002ca0 <_printf_common+0xac>
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	e7c6      	b.n	8002c32 <_printf_common+0x3e>
 8002ca4:	18e1      	adds	r1, r4, r3
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	2030      	movs	r0, #48	; 0x30
 8002caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cae:	4422      	add	r2, r4
 8002cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cb8:	3302      	adds	r3, #2
 8002cba:	e7c7      	b.n	8002c4c <_printf_common+0x58>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	47c0      	blx	r8
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d0e6      	beq.n	8002c98 <_printf_common+0xa4>
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7d9      	b.n	8002c82 <_printf_common+0x8e>
	...

08002cd0 <_printf_i>:
 8002cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd4:	7e0f      	ldrb	r7, [r1, #24]
 8002cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cd8:	2f78      	cmp	r7, #120	; 0x78
 8002cda:	4691      	mov	r9, r2
 8002cdc:	4680      	mov	r8, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	469a      	mov	sl, r3
 8002ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ce6:	d807      	bhi.n	8002cf8 <_printf_i+0x28>
 8002ce8:	2f62      	cmp	r7, #98	; 0x62
 8002cea:	d80a      	bhi.n	8002d02 <_printf_i+0x32>
 8002cec:	2f00      	cmp	r7, #0
 8002cee:	f000 80d8 	beq.w	8002ea2 <_printf_i+0x1d2>
 8002cf2:	2f58      	cmp	r7, #88	; 0x58
 8002cf4:	f000 80a3 	beq.w	8002e3e <_printf_i+0x16e>
 8002cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d00:	e03a      	b.n	8002d78 <_printf_i+0xa8>
 8002d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d06:	2b15      	cmp	r3, #21
 8002d08:	d8f6      	bhi.n	8002cf8 <_printf_i+0x28>
 8002d0a:	a101      	add	r1, pc, #4	; (adr r1, 8002d10 <_printf_i+0x40>)
 8002d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002cf9 	.word	0x08002cf9
 8002d1c:	08002cf9 	.word	0x08002cf9
 8002d20:	08002cf9 	.word	0x08002cf9
 8002d24:	08002cf9 	.word	0x08002cf9
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002cf9 	.word	0x08002cf9
 8002d30:	08002cf9 	.word	0x08002cf9
 8002d34:	08002cf9 	.word	0x08002cf9
 8002d38:	08002cf9 	.word	0x08002cf9
 8002d3c:	08002e89 	.word	0x08002e89
 8002d40:	08002dad 	.word	0x08002dad
 8002d44:	08002e6b 	.word	0x08002e6b
 8002d48:	08002cf9 	.word	0x08002cf9
 8002d4c:	08002cf9 	.word	0x08002cf9
 8002d50:	08002eab 	.word	0x08002eab
 8002d54:	08002cf9 	.word	0x08002cf9
 8002d58:	08002dad 	.word	0x08002dad
 8002d5c:	08002cf9 	.word	0x08002cf9
 8002d60:	08002cf9 	.word	0x08002cf9
 8002d64:	08002e73 	.word	0x08002e73
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0a3      	b.n	8002ec4 <_printf_i+0x1f4>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	6829      	ldr	r1, [r5, #0]
 8002d80:	0606      	lsls	r6, r0, #24
 8002d82:	f101 0304 	add.w	r3, r1, #4
 8002d86:	d50a      	bpl.n	8002d9e <_printf_i+0xce>
 8002d88:	680e      	ldr	r6, [r1, #0]
 8002d8a:	602b      	str	r3, [r5, #0]
 8002d8c:	2e00      	cmp	r6, #0
 8002d8e:	da03      	bge.n	8002d98 <_printf_i+0xc8>
 8002d90:	232d      	movs	r3, #45	; 0x2d
 8002d92:	4276      	negs	r6, r6
 8002d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d98:	485e      	ldr	r0, [pc, #376]	; (8002f14 <_printf_i+0x244>)
 8002d9a:	230a      	movs	r3, #10
 8002d9c:	e019      	b.n	8002dd2 <_printf_i+0x102>
 8002d9e:	680e      	ldr	r6, [r1, #0]
 8002da0:	602b      	str	r3, [r5, #0]
 8002da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002da6:	bf18      	it	ne
 8002da8:	b236      	sxthne	r6, r6
 8002daa:	e7ef      	b.n	8002d8c <_printf_i+0xbc>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	6820      	ldr	r0, [r4, #0]
 8002db0:	1d19      	adds	r1, r3, #4
 8002db2:	6029      	str	r1, [r5, #0]
 8002db4:	0601      	lsls	r1, r0, #24
 8002db6:	d501      	bpl.n	8002dbc <_printf_i+0xec>
 8002db8:	681e      	ldr	r6, [r3, #0]
 8002dba:	e002      	b.n	8002dc2 <_printf_i+0xf2>
 8002dbc:	0646      	lsls	r6, r0, #25
 8002dbe:	d5fb      	bpl.n	8002db8 <_printf_i+0xe8>
 8002dc0:	881e      	ldrh	r6, [r3, #0]
 8002dc2:	4854      	ldr	r0, [pc, #336]	; (8002f14 <_printf_i+0x244>)
 8002dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2308      	moveq	r3, #8
 8002dca:	230a      	movne	r3, #10
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dd2:	6865      	ldr	r5, [r4, #4]
 8002dd4:	60a5      	str	r5, [r4, #8]
 8002dd6:	2d00      	cmp	r5, #0
 8002dd8:	bfa2      	ittt	ge
 8002dda:	6821      	ldrge	r1, [r4, #0]
 8002ddc:	f021 0104 	bicge.w	r1, r1, #4
 8002de0:	6021      	strge	r1, [r4, #0]
 8002de2:	b90e      	cbnz	r6, 8002de8 <_printf_i+0x118>
 8002de4:	2d00      	cmp	r5, #0
 8002de6:	d04d      	beq.n	8002e84 <_printf_i+0x1b4>
 8002de8:	4615      	mov	r5, r2
 8002dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dee:	fb03 6711 	mls	r7, r3, r1, r6
 8002df2:	5dc7      	ldrb	r7, [r0, r7]
 8002df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002df8:	4637      	mov	r7, r6
 8002dfa:	42bb      	cmp	r3, r7
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	d9f4      	bls.n	8002dea <_printf_i+0x11a>
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d10b      	bne.n	8002e1c <_printf_i+0x14c>
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	07de      	lsls	r6, r3, #31
 8002e08:	d508      	bpl.n	8002e1c <_printf_i+0x14c>
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	6861      	ldr	r1, [r4, #4]
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	bfde      	ittt	le
 8002e12:	2330      	movle	r3, #48	; 0x30
 8002e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e1c:	1b52      	subs	r2, r2, r5
 8002e1e:	6122      	str	r2, [r4, #16]
 8002e20:	f8cd a000 	str.w	sl, [sp]
 8002e24:	464b      	mov	r3, r9
 8002e26:	aa03      	add	r2, sp, #12
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff fee2 	bl	8002bf4 <_printf_common>
 8002e30:	3001      	adds	r0, #1
 8002e32:	d14c      	bne.n	8002ece <_printf_i+0x1fe>
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e38:	b004      	add	sp, #16
 8002e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3e:	4835      	ldr	r0, [pc, #212]	; (8002f14 <_printf_i+0x244>)
 8002e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e44:	6829      	ldr	r1, [r5, #0]
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e4c:	6029      	str	r1, [r5, #0]
 8002e4e:	061d      	lsls	r5, r3, #24
 8002e50:	d514      	bpl.n	8002e7c <_printf_i+0x1ac>
 8002e52:	07df      	lsls	r7, r3, #31
 8002e54:	bf44      	itt	mi
 8002e56:	f043 0320 	orrmi.w	r3, r3, #32
 8002e5a:	6023      	strmi	r3, [r4, #0]
 8002e5c:	b91e      	cbnz	r6, 8002e66 <_printf_i+0x196>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f023 0320 	bic.w	r3, r3, #32
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	2310      	movs	r3, #16
 8002e68:	e7b0      	b.n	8002dcc <_printf_i+0xfc>
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	f043 0320 	orr.w	r3, r3, #32
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	2378      	movs	r3, #120	; 0x78
 8002e74:	4828      	ldr	r0, [pc, #160]	; (8002f18 <_printf_i+0x248>)
 8002e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e7a:	e7e3      	b.n	8002e44 <_printf_i+0x174>
 8002e7c:	0659      	lsls	r1, r3, #25
 8002e7e:	bf48      	it	mi
 8002e80:	b2b6      	uxthmi	r6, r6
 8002e82:	e7e6      	b.n	8002e52 <_printf_i+0x182>
 8002e84:	4615      	mov	r5, r2
 8002e86:	e7bb      	b.n	8002e00 <_printf_i+0x130>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	6826      	ldr	r6, [r4, #0]
 8002e8c:	6961      	ldr	r1, [r4, #20]
 8002e8e:	1d18      	adds	r0, r3, #4
 8002e90:	6028      	str	r0, [r5, #0]
 8002e92:	0635      	lsls	r5, r6, #24
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	d501      	bpl.n	8002e9c <_printf_i+0x1cc>
 8002e98:	6019      	str	r1, [r3, #0]
 8002e9a:	e002      	b.n	8002ea2 <_printf_i+0x1d2>
 8002e9c:	0670      	lsls	r0, r6, #25
 8002e9e:	d5fb      	bpl.n	8002e98 <_printf_i+0x1c8>
 8002ea0:	8019      	strh	r1, [r3, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6123      	str	r3, [r4, #16]
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	e7ba      	b.n	8002e20 <_printf_i+0x150>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	1d1a      	adds	r2, r3, #4
 8002eae:	602a      	str	r2, [r5, #0]
 8002eb0:	681d      	ldr	r5, [r3, #0]
 8002eb2:	6862      	ldr	r2, [r4, #4]
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f7fd f99a 	bl	80001f0 <memchr>
 8002ebc:	b108      	cbz	r0, 8002ec2 <_printf_i+0x1f2>
 8002ebe:	1b40      	subs	r0, r0, r5
 8002ec0:	6060      	str	r0, [r4, #4]
 8002ec2:	6863      	ldr	r3, [r4, #4]
 8002ec4:	6123      	str	r3, [r4, #16]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ecc:	e7a8      	b.n	8002e20 <_printf_i+0x150>
 8002ece:	6923      	ldr	r3, [r4, #16]
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	47d0      	blx	sl
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d0ab      	beq.n	8002e34 <_printf_i+0x164>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	079b      	lsls	r3, r3, #30
 8002ee0:	d413      	bmi.n	8002f0a <_printf_i+0x23a>
 8002ee2:	68e0      	ldr	r0, [r4, #12]
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	bfb8      	it	lt
 8002eea:	4618      	movlt	r0, r3
 8002eec:	e7a4      	b.n	8002e38 <_printf_i+0x168>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4632      	mov	r2, r6
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	47d0      	blx	sl
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d09b      	beq.n	8002e34 <_printf_i+0x164>
 8002efc:	3501      	adds	r5, #1
 8002efe:	68e3      	ldr	r3, [r4, #12]
 8002f00:	9903      	ldr	r1, [sp, #12]
 8002f02:	1a5b      	subs	r3, r3, r1
 8002f04:	42ab      	cmp	r3, r5
 8002f06:	dcf2      	bgt.n	8002eee <_printf_i+0x21e>
 8002f08:	e7eb      	b.n	8002ee2 <_printf_i+0x212>
 8002f0a:	2500      	movs	r5, #0
 8002f0c:	f104 0619 	add.w	r6, r4, #25
 8002f10:	e7f5      	b.n	8002efe <_printf_i+0x22e>
 8002f12:	bf00      	nop
 8002f14:	08003181 	.word	0x08003181
 8002f18:	08003192 	.word	0x08003192

08002f1c <__sread>:
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	460c      	mov	r4, r1
 8002f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f24:	f000 f894 	bl	8003050 <_read_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	bfab      	itete	ge
 8002f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f30:	181b      	addge	r3, r3, r0
 8002f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f36:	bfac      	ite	ge
 8002f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f3a:	81a3      	strhlt	r3, [r4, #12]
 8002f3c:	bd10      	pop	{r4, pc}

08002f3e <__swrite>:
 8002f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f42:	461f      	mov	r7, r3
 8002f44:	898b      	ldrh	r3, [r1, #12]
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	4605      	mov	r5, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	d505      	bpl.n	8002f5c <__swrite+0x1e>
 8002f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f54:	2302      	movs	r3, #2
 8002f56:	2200      	movs	r2, #0
 8002f58:	f000 f868 	bl	800302c <_lseek_r>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f66:	81a3      	strh	r3, [r4, #12]
 8002f68:	4632      	mov	r2, r6
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f72:	f000 b817 	b.w	8002fa4 <_write_r>

08002f76 <__sseek>:
 8002f76:	b510      	push	{r4, lr}
 8002f78:	460c      	mov	r4, r1
 8002f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f7e:	f000 f855 	bl	800302c <_lseek_r>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	bf15      	itete	ne
 8002f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f92:	81a3      	strheq	r3, [r4, #12]
 8002f94:	bf18      	it	ne
 8002f96:	81a3      	strhne	r3, [r4, #12]
 8002f98:	bd10      	pop	{r4, pc}

08002f9a <__sclose>:
 8002f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f9e:	f000 b813 	b.w	8002fc8 <_close_r>
	...

08002fa4 <_write_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d07      	ldr	r5, [pc, #28]	; (8002fc4 <_write_r+0x20>)
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7fe ff23 	bl	8001dfe <_write>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_write_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_write_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	200000e8 	.word	0x200000e8

08002fc8 <_close_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4d06      	ldr	r5, [pc, #24]	; (8002fe4 <_close_r+0x1c>)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	602b      	str	r3, [r5, #0]
 8002fd4:	f7fe ff2f 	bl	8001e36 <_close>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d102      	bne.n	8002fe2 <_close_r+0x1a>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	b103      	cbz	r3, 8002fe2 <_close_r+0x1a>
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	bd38      	pop	{r3, r4, r5, pc}
 8002fe4:	200000e8 	.word	0x200000e8

08002fe8 <_fstat_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4d07      	ldr	r5, [pc, #28]	; (8003008 <_fstat_r+0x20>)
 8002fec:	2300      	movs	r3, #0
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	f7fe ff29 	bl	8001e4c <_fstat>
 8002ffa:	1c43      	adds	r3, r0, #1
 8002ffc:	d102      	bne.n	8003004 <_fstat_r+0x1c>
 8002ffe:	682b      	ldr	r3, [r5, #0]
 8003000:	b103      	cbz	r3, 8003004 <_fstat_r+0x1c>
 8003002:	6023      	str	r3, [r4, #0]
 8003004:	bd38      	pop	{r3, r4, r5, pc}
 8003006:	bf00      	nop
 8003008:	200000e8 	.word	0x200000e8

0800300c <_isatty_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d06      	ldr	r5, [pc, #24]	; (8003028 <_isatty_r+0x1c>)
 8003010:	2300      	movs	r3, #0
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7fe ff27 	bl	8001e6a <_isatty>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_isatty_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_isatty_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	200000e8 	.word	0x200000e8

0800302c <_lseek_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	4d07      	ldr	r5, [pc, #28]	; (800304c <_lseek_r+0x20>)
 8003030:	4604      	mov	r4, r0
 8003032:	4608      	mov	r0, r1
 8003034:	4611      	mov	r1, r2
 8003036:	2200      	movs	r2, #0
 8003038:	602a      	str	r2, [r5, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	f7fe ff1f 	bl	8001e7e <_lseek>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d102      	bne.n	800304a <_lseek_r+0x1e>
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	b103      	cbz	r3, 800304a <_lseek_r+0x1e>
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	200000e8 	.word	0x200000e8

08003050 <_read_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4d07      	ldr	r5, [pc, #28]	; (8003070 <_read_r+0x20>)
 8003054:	4604      	mov	r4, r0
 8003056:	4608      	mov	r0, r1
 8003058:	4611      	mov	r1, r2
 800305a:	2200      	movs	r2, #0
 800305c:	602a      	str	r2, [r5, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	f7fe feb0 	bl	8001dc4 <_read>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_read_r+0x1e>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_read_r+0x1e>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	200000e8 	.word	0x200000e8

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
