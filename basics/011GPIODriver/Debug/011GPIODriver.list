
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d50  08001d50  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d50  08001d50  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d50  08001d50  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d50  08001d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00005090  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000510c  2000510c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002961  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a67  00000000  00000000  00022a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00023470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000310  00000000  00000000  00023808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000226a  00000000  00000000  00023b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000043e2  00000000  00000000  00025d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e09c  00000000  00000000  0002a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00038200  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013cc  00000000  00000000  00038250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001c64 	.word	0x08001c64

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000080 	.word	0x20000080
 80001e4:	08001c64 	.word	0x08001c64

080001e8 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80001ec:	482a      	ldr	r0, [pc, #168]	; (8000298 <configure_uart+0xb0>)
 80001ee:	f000 f98b 	bl	8000508 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80001f2:	2202      	movs	r2, #2
 80001f4:	2105      	movs	r1, #5
 80001f6:	4828      	ldr	r0, [pc, #160]	; (8000298 <configure_uart+0xb0>)
 80001f8:	f000 f866 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80001fc:	2202      	movs	r2, #2
 80001fe:	2106      	movs	r1, #6
 8000200:	4825      	ldr	r0, [pc, #148]	; (8000298 <configure_uart+0xb0>)
 8000202:	f000 f861 	bl	80002c8 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 8000206:	2207      	movs	r2, #7
 8000208:	2105      	movs	r1, #5
 800020a:	4823      	ldr	r0, [pc, #140]	; (8000298 <configure_uart+0xb0>)
 800020c:	f000 f8b8 	bl	8000380 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000210:	2207      	movs	r2, #7
 8000212:	2106      	movs	r1, #6
 8000214:	4820      	ldr	r0, [pc, #128]	; (8000298 <configure_uart+0xb0>)
 8000216:	f000 f8b3 	bl	8000380 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800021a:	2200      	movs	r2, #0
 800021c:	2105      	movs	r1, #5
 800021e:	481e      	ldr	r0, [pc, #120]	; (8000298 <configure_uart+0xb0>)
 8000220:	f000 f8e7 	bl	80003f2 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000224:	2200      	movs	r2, #0
 8000226:	2106      	movs	r1, #6
 8000228:	481b      	ldr	r0, [pc, #108]	; (8000298 <configure_uart+0xb0>)
 800022a:	f000 f8e2 	bl	80003f2 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800022e:	2202      	movs	r2, #2
 8000230:	2105      	movs	r1, #5
 8000232:	4819      	ldr	r0, [pc, #100]	; (8000298 <configure_uart+0xb0>)
 8000234:	f000 f923 	bl	800047e <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000238:	2202      	movs	r2, #2
 800023a:	2106      	movs	r1, #6
 800023c:	4816      	ldr	r0, [pc, #88]	; (8000298 <configure_uart+0xb0>)
 800023e:	f000 f91e 	bl	800047e <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000242:	2201      	movs	r2, #1
 8000244:	2105      	movs	r1, #5
 8000246:	4814      	ldr	r0, [pc, #80]	; (8000298 <configure_uart+0xb0>)
 8000248:	f000 f8f5 	bl	8000436 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 800024c:	2201      	movs	r2, #1
 800024e:	2106      	movs	r1, #6
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <configure_uart+0xb0>)
 8000252:	f000 f8f0 	bl	8000436 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <configure_uart+0xb4>)
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <configure_uart+0xb8>)
 800025a:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <configure_uart+0xb4>)
 800025e:	2202      	movs	r2, #2
 8000260:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <configure_uart+0xb4>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <configure_uart+0xb4>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <configure_uart+0xb4>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <configure_uart+0xb4>)
 8000276:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800027a:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <configure_uart+0xb4>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <configure_uart+0xb8>)
 8000284:	f000 f940 	bl	8000508 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <configure_uart+0xb4>)
 800028a:	f000 fb01 	bl	8000890 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <configure_uart+0xb4>)
 8000290:	f000 fbfe 	bl	8000a90 <USART_PeripheralEnable>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40020c00 	.word	0x40020c00
 800029c:	20000098 	.word	0x20000098
 80002a0:	40004400 	.word	0x40004400

080002a4 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <UART_SendChar+0x20>)
 80002b6:	f000 fc11 	bl	8000adc <USART_SendData>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000098 	.word	0x20000098

080002c8 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
 80002d4:	4613      	mov	r3, r2
 80002d6:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	78fa      	ldrb	r2, [r7, #3]
 80002e2:	0052      	lsls	r2, r2, #1
 80002e4:	2103      	movs	r1, #3
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	78b9      	ldrb	r1, [r7, #2]
 80002f8:	78fa      	ldrb	r2, [r7, #3]
 80002fa:	0052      	lsls	r2, r2, #1
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	431a      	orrs	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]

}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
 800031c:	4613      	mov	r3, r2
 800031e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	2101      	movs	r1, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	401a      	ands	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	78b9      	ldrb	r1, [r7, #2]
 800033e:	78fa      	ldrb	r2, [r7, #3]
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <GPIOTogglePin>:

void GPIOTogglePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR ^= (1 << GPIOPinNum);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	78fa      	ldrb	r2, [r7, #3]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	405a      	eors	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	615a      	str	r2, [r3, #20]
}
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
 800038c:	4613      	mov	r3, r2
 800038e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	08db      	lsrs	r3, r3, #3
 8000398:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	f003 0307 	and.w	r3, r3, #7
 80003a0:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80003a2:	7afa      	ldrb	r2, [r7, #11]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3208      	adds	r2, #8
 80003a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003ac:	7aba      	ldrb	r2, [r7, #10]
 80003ae:	0092      	lsls	r2, r2, #2
 80003b0:	210f      	movs	r1, #15
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	7afa      	ldrb	r2, [r7, #11]
 80003bc:	4019      	ands	r1, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3208      	adds	r2, #8
 80003c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80003c6:	7afa      	ldrb	r2, [r7, #11]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3208      	adds	r2, #8
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d0:	78b9      	ldrb	r1, [r7, #2]
 80003d2:	7aba      	ldrb	r2, [r7, #10]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	7afa      	ldrb	r2, [r7, #11]
 80003de:	4319      	orrs	r1, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3208      	adds	r2, #8
 80003e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b085      	sub	sp, #20
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	460b      	mov	r3, r1
 80003fc:	70fb      	strb	r3, [r7, #3]
 80003fe:	4613      	mov	r3, r2
 8000400:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	78fa      	ldrb	r2, [r7, #3]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	401a      	ands	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	78b9      	ldrb	r1, [r7, #2]
 8000420:	78fa      	ldrb	r2, [r7, #3]
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	431a      	orrs	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	605a      	str	r2, [r3, #4]
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	78fa      	ldrb	r2, [r7, #3]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	2103      	movs	r1, #3
 8000454:	fa01 f202 	lsl.w	r2, r1, r2
 8000458:	43d2      	mvns	r2, r2
 800045a:	401a      	ands	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	78b9      	ldrb	r1, [r7, #2]
 8000466:	78fa      	ldrb	r2, [r7, #3]
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	431a      	orrs	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	60da      	str	r2, [r3, #12]
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	70fb      	strb	r3, [r7, #3]
 800048a:	4613      	mov	r3, r2
 800048c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	2103      	movs	r1, #3
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	401a      	ands	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	78b9      	ldrb	r1, [r7, #2]
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	609a      	str	r2, [r3, #8]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <RTC_Alarm_IRQHandler+0x24>)
 80004d0:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 80004d2:	f000 f80d 	bl	80004f0 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]

	return;
 80004e2:	bf00      	nop
}
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40013c14 	.word	0x40013c14

080004f0 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 80004f4:	2201      	movs	r2, #1
 80004f6:	210f      	movs	r1, #15
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <RTC_Alarm_Interrupt_Callback+0x14>)
 80004fa:	f7ff ff09 	bl	8000310 <GPIOWritePin>

	return;
 80004fe:	bf00      	nop
}
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020c00 	.word	0x40020c00

08000508 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a88      	ldr	r2, [pc, #544]	; (8000734 <EnablePeriClk+0x22c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d108      	bne.n	800052a <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000518:	4b87      	ldr	r3, [pc, #540]	; (8000738 <EnablePeriClk+0x230>)
 800051a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f043 0201 	orr.w	r2, r3, #1
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000528:	e19b      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a83      	ldr	r2, [pc, #524]	; (800073c <EnablePeriClk+0x234>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d108      	bne.n	8000544 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000532:	4b81      	ldr	r3, [pc, #516]	; (8000738 <EnablePeriClk+0x230>)
 8000534:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f043 0202 	orr.w	r2, r3, #2
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	e18e      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a7e      	ldr	r2, [pc, #504]	; (8000740 <EnablePeriClk+0x238>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d108      	bne.n	800055e <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800054c:	4b7a      	ldr	r3, [pc, #488]	; (8000738 <EnablePeriClk+0x230>)
 800054e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f043 0204 	orr.w	r2, r3, #4
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	e181      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a78      	ldr	r2, [pc, #480]	; (8000744 <EnablePeriClk+0x23c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d108      	bne.n	8000578 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000566:	4b74      	ldr	r3, [pc, #464]	; (8000738 <EnablePeriClk+0x230>)
 8000568:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f043 0208 	orr.w	r2, r3, #8
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	e174      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a73      	ldr	r2, [pc, #460]	; (8000748 <EnablePeriClk+0x240>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d108      	bne.n	8000592 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000580:	4b6d      	ldr	r3, [pc, #436]	; (8000738 <EnablePeriClk+0x230>)
 8000582:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f043 0210 	orr.w	r2, r3, #16
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	e167      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a6d      	ldr	r2, [pc, #436]	; (800074c <EnablePeriClk+0x244>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d108      	bne.n	80005ac <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800059a:	4b67      	ldr	r3, [pc, #412]	; (8000738 <EnablePeriClk+0x230>)
 800059c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f043 0220 	orr.w	r2, r3, #32
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	e15a      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a68      	ldr	r2, [pc, #416]	; (8000750 <EnablePeriClk+0x248>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d108      	bne.n	80005c6 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80005b4:	4b60      	ldr	r3, [pc, #384]	; (8000738 <EnablePeriClk+0x230>)
 80005b6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	e14d      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a62      	ldr	r2, [pc, #392]	; (8000754 <EnablePeriClk+0x24c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d108      	bne.n	80005e0 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80005ce:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <EnablePeriClk+0x230>)
 80005d0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	e140      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a5d      	ldr	r2, [pc, #372]	; (8000758 <EnablePeriClk+0x250>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d108      	bne.n	80005fa <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <EnablePeriClk+0x230>)
 80005ea:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	601a      	str	r2, [r3, #0]
}
 80005f8:	e133      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a57      	ldr	r2, [pc, #348]	; (800075c <EnablePeriClk+0x254>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d108      	bne.n	8000614 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <EnablePeriClk+0x258>)
 8000604:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	e126      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a53      	ldr	r2, [pc, #332]	; (8000764 <EnablePeriClk+0x25c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d108      	bne.n	800062e <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800061c:	4b52      	ldr	r3, [pc, #328]	; (8000768 <EnablePeriClk+0x260>)
 800061e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	e119      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a4e      	ldr	r2, [pc, #312]	; (800076c <EnablePeriClk+0x264>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d108      	bne.n	8000648 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <EnablePeriClk+0x260>)
 8000638:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	e10c      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a49      	ldr	r2, [pc, #292]	; (8000770 <EnablePeriClk+0x268>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d108      	bne.n	8000662 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000650:	4b45      	ldr	r3, [pc, #276]	; (8000768 <EnablePeriClk+0x260>)
 8000652:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	e0ff      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a43      	ldr	r2, [pc, #268]	; (8000774 <EnablePeriClk+0x26c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d108      	bne.n	800067c <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <EnablePeriClk+0x260>)
 800066c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	e0f2      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <EnablePeriClk+0x270>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d108      	bne.n	8000696 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <EnablePeriClk+0x260>)
 8000686:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	601a      	str	r2, [r3, #0]
}
 8000694:	e0e5      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a38      	ldr	r2, [pc, #224]	; (800077c <EnablePeriClk+0x274>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d108      	bne.n	80006b0 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <EnablePeriClk+0x258>)
 80006a0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f043 0210 	orr.w	r2, r3, #16
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	e0d8      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <EnablePeriClk+0x278>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d108      	bne.n	80006ca <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <EnablePeriClk+0x260>)
 80006ba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	e0cb      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <EnablePeriClk+0x27c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d108      	bne.n	80006e4 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <EnablePeriClk+0x260>)
 80006d4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	e0be      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <EnablePeriClk+0x280>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d108      	bne.n	80006fe <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <EnablePeriClk+0x260>)
 80006ee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	e0b1      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <EnablePeriClk+0x284>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d108      	bne.n	8000718 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <EnablePeriClk+0x260>)
 8000708:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	e0a4      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <EnablePeriClk+0x288>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d139      	bne.n	8000794 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <EnablePeriClk+0x258>)
 8000722:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f043 0220 	orr.w	r2, r3, #32
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	e097      	b.n	8000862 <EnablePeriClk+0x35a>
 8000732:	bf00      	nop
 8000734:	40020000 	.word	0x40020000
 8000738:	40023830 	.word	0x40023830
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00
 8000758:	40022000 	.word	0x40022000
 800075c:	40013000 	.word	0x40013000
 8000760:	40023844 	.word	0x40023844
 8000764:	40003800 	.word	0x40003800
 8000768:	40023840 	.word	0x40023840
 800076c:	40003c00 	.word	0x40003c00
 8000770:	40005400 	.word	0x40005400
 8000774:	40005800 	.word	0x40005800
 8000778:	40005c00 	.word	0x40005c00
 800077c:	40011000 	.word	0x40011000
 8000780:	40004400 	.word	0x40004400
 8000784:	40004800 	.word	0x40004800
 8000788:	40004c00 	.word	0x40004c00
 800078c:	40005000 	.word	0x40005000
 8000790:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a35      	ldr	r2, [pc, #212]	; (800086c <EnablePeriClk+0x364>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d108      	bne.n	80007ae <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <EnablePeriClk+0x368>)
 800079e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f043 0210 	orr.w	r2, r3, #16
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	e059      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a30      	ldr	r2, [pc, #192]	; (8000874 <EnablePeriClk+0x36c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d108      	bne.n	80007c8 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <EnablePeriClk+0x368>)
 80007b8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f043 0220 	orr.w	r2, r3, #32
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	e04c      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <EnablePeriClk+0x370>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d108      	bne.n	80007e2 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <EnablePeriClk+0x374>)
 80007d2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	e03f      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <EnablePeriClk+0x378>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d108      	bne.n	80007fc <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <EnablePeriClk+0x374>)
 80007ec:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	e032      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000802:	d108      	bne.n	8000816 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <EnablePeriClk+0x368>)
 8000806:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f043 0201 	orr.w	r2, r3, #1
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	e025      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <EnablePeriClk+0x37c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d108      	bne.n	8000830 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <EnablePeriClk+0x368>)
 8000820:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f043 0202 	orr.w	r2, r3, #2
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	e018      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <EnablePeriClk+0x380>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d108      	bne.n	800084a <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <EnablePeriClk+0x368>)
 800083a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f043 0204 	orr.w	r2, r3, #4
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	e00b      	b.n	8000862 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <EnablePeriClk+0x384>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d107      	bne.n	8000862 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <EnablePeriClk+0x368>)
 8000854:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f043 0208 	orr.w	r2, r3, #8
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40001000 	.word	0x40001000
 8000870:	40023840 	.word	0x40023840
 8000874:	40001400 	.word	0x40001400
 8000878:	40026000 	.word	0x40026000
 800087c:	40023830 	.word	0x40023830
 8000880:	40026400 	.word	0x40026400
 8000884:	40000400 	.word	0x40000400
 8000888:	40000800 	.word	0x40000800
 800088c:	40000c00 	.word	0x40000c00

08000890 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d110      	bne.n	80008c2 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0208 	orr.w	r2, r2, #8
 80008ae:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0204 	bic.w	r2, r2, #4
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	e028      	b.n	8000914 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d110      	bne.n	80008ec <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0208 	bic.w	r2, r2, #8
 80008d8:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f042 0204 	orr.w	r2, r2, #4
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	e013      	b.n	8000914 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d10f      	bne.n	8000914 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0208 	orr.w	r2, r2, #8
 8000902:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f042 0204 	orr.w	r2, r2, #4
 8000912:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d108      	bne.n	800092e <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	e00b      	b.n	8000946 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d107      	bne.n	8000946 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68da      	ldr	r2, [r3, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000944:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000954:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6919      	ldr	r1, [r3, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	031a      	lsls	r2, r3, #12
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d108      	bne.n	8000984 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	e028      	b.n	80009d6 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d110      	bne.n	80009ae <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800099a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68da      	ldr	r2, [r3, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	e013      	b.n	80009d6 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d10f      	bne.n	80009d6 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009c4:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009d4:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f8a7 	bl	8000b30 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d110      	bne.n	8000a0c <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009f8:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a08:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000a0a:	e03d      	b.n	8000a88 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d110      	bne.n	8000a36 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a22:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	e028      	b.n	8000a88 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d110      	bne.n	8000a60 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a4c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a5c:	615a      	str	r2, [r3, #20]
}
 8000a5e:	e013      	b.n	8000a88 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d10f      	bne.n	8000a88 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a76:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a86:	615a      	str	r2, [r3, #20]
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000aa6:	60da      	str	r2, [r3, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	460b      	mov	r3, r1
 8000abc:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000ae8:	e012      	b.n	8000b10 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8000aea:	bf00      	nop
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff ffdf 	bl	8000ab2 <USART_GetFlagStatus>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f8      	beq.n	8000aec <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1e9      	bne.n	8000aea <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8000b16:	bf00      	nop
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ffc9 	bl	8000ab2 <USART_GetFlagStatus>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f8      	beq.n	8000b18 <USART_SendData+0x3c>
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000b3a:	f240 6383 	movw	r3, #1667	; 0x683
 8000b3e:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	609a      	str	r2, [r3, #8]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e00a      	b.n	8000b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b64:	f3af 8000 	nop.w
 8000b68:	4601      	mov	r1, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	b2ca      	uxtb	r2, r1
 8000b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbf0      	blt.n	8000b64 <_read+0x12>
  }

  return len;
 8000b82:	687b      	ldr	r3, [r7, #4]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e009      	b.n	8000bb2 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb7c 	bl	80002a4 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dbf1      	blt.n	8000b9e <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_close>:

int _close(int file)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <_isatty>:

int _isatty(int file)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f000 fadc 	bl	8001210 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200000b4 	.word	0x200000b4
 8000c8c:	20005110 	.word	0x20005110

08000c90 <main>:
void task_sleep(uint32_t count);
void update_next_task(void);
void set_task_priority(uint32_t task, uint8_t priority);

int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	configure_leds();
 8000c94:	f000 f8c6 	bl	8000e24 <configure_leds>
	configure_uart();
 8000c98:	f7ff faa6 	bl	80001e8 <configure_uart>
	configure_systick_timer();
 8000c9c:	f000 f8e0 	bl	8000e60 <configure_systick_timer>
	initialize_task_stacks();
 8000ca0:	f000 f90c 	bl	8000ebc <initialize_task_stacks>
	enable_systick_timer();
 8000ca4:	f000 f8f8 	bl	8000e98 <enable_systick_timer>

	set_task_priority(0, 254);
 8000ca8:	21fe      	movs	r1, #254	; 0xfe
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fa6e 	bl	800118c <set_task_priority>
	set_task_priority(1, 1);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fa6a 	bl	800118c <set_task_priority>
	set_task_priority(2, 1);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 fa66 	bl	800118c <set_task_priority>
	set_task_priority(3, 0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 fa62 	bl	800118c <set_task_priority>
	set_task_priority(4, 1);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2004      	movs	r0, #4
 8000ccc:	f000 fa5e 	bl	800118c <set_task_priority>

	//Initialize PSP

	__asm volatile ("LDR R1, =current_sp");
 8000cd0:	4909      	ldr	r1, [pc, #36]	; (8000cf8 <main+0x68>)
	__asm volatile ("LDR R0, [R1]");
 8000cd2:	6808      	ldr	r0, [r1, #0]
	__asm volatile ("MSR PSP, R0");
 8000cd4:	f380 8809 	msr	PSP, r0

	//Change SP from MSP to PSP
	__asm volatile ("MRS R0, CONTROL");
 8000cd8:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");
 8000cdc:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000ce0:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("ISB");
 8000ce4:	f3bf 8f6f 	isb	sy

	current_task = 0;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <main+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
	idletask();
 8000cee:	f000 f805 	bl	8000cfc <idletask>

	while(1);
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x62>
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	200050e4 	.word	0x200050e4

08000cfc <idletask>:

	return 0;
}

void idletask(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("From Idle Task...\r\n");
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <idletask+0xc>)
 8000d02:	f000 fc03 	bl	800150c <puts>
 8000d06:	e7fb      	b.n	8000d00 <idletask+0x4>
 8000d08:	08001c7c 	.word	0x08001c7c

08000d0c <task1>:
	}
}

void task1(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_1 = TICK_COUNT_TASK_1;

	while(1)
	{
		printf("From Task 1...\r\n");
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <task1+0x2c>)
 8000d12:	f000 fbfb 	bl	800150c <puts>
		//printf("Task 1 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_1 <= tick_count)
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <task1+0x30>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <task1+0x34>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8f6      	bhi.n	8000d10 <task1+0x4>
		{
			target_tick_count_1 = tick_count + TICK_COUNT_TASK_1;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <task1+0x34>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3308      	adds	r3, #8
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <task1+0x30>)
 8000d2a:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_1);
 8000d2c:	210c      	movs	r1, #12
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <task1+0x38>)
 8000d30:	f7ff fb10 	bl	8000354 <GPIOTogglePin>
		printf("From Task 1...\r\n");
 8000d34:	e7ec      	b.n	8000d10 <task1+0x4>
 8000d36:	bf00      	nop
 8000d38:	08001c90 	.word	0x08001c90
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000b8 	.word	0x200000b8
 8000d44:	40020c00 	.word	0x40020c00

08000d48 <task2>:
		}
	}
}

void task2(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_2 = TICK_COUNT_TASK_2;

	while(1)
	{
		printf("From Task 2...\r\n");
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <task2+0x2c>)
 8000d4e:	f000 fbdd 	bl	800150c <puts>
		//printf("Task 2 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_2 <= tick_count)
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <task2+0x30>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <task2+0x34>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d8f6      	bhi.n	8000d4c <task2+0x4>
		{
			target_tick_count_2 = tick_count + TICK_COUNT_TASK_2;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <task2+0x34>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3316      	adds	r3, #22
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <task2+0x30>)
 8000d66:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_2);
 8000d68:	210d      	movs	r1, #13
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <task2+0x38>)
 8000d6c:	f7ff faf2 	bl	8000354 <GPIOTogglePin>
		printf("From Task 2...\r\n");
 8000d70:	e7ec      	b.n	8000d4c <task2+0x4>
 8000d72:	bf00      	nop
 8000d74:	08001ca0 	.word	0x08001ca0
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	200000b8 	.word	0x200000b8
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <task3>:
		}
	}
}

void task3(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_3 = TICK_COUNT_TASK_3;

	static int count = 0;

	if(count == 0)
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <task3+0x4c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10b      	bne.n	8000da8 <task3+0x24>
	{
		printf("Task 3 Going to Sleep...\r\n");
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <task3+0x50>)
 8000d92:	f000 fbbb 	bl	800150c <puts>
		count++;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <task3+0x4c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <task3+0x4c>)
 8000d9e:	6013      	str	r3, [r2, #0]
		task_sleep(0x1FF);
 8000da0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000da4:	f000 f950 	bl	8001048 <task_sleep>
	}

	while(1)
	{
		printf("From Task 3...\r\n");
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <task3+0x54>)
 8000daa:	f000 fbaf 	bl	800150c <puts>
		//printf("Task 3 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_3 <= tick_count)
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <task3+0x58>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <task3+0x5c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8f6      	bhi.n	8000da8 <task3+0x24>
		{
			target_tick_count_3 = tick_count + TICK_COUNT_TASK_3;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <task3+0x5c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3332      	adds	r3, #50	; 0x32
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <task3+0x58>)
 8000dc2:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_3);
 8000dc4:	210e      	movs	r1, #14
 8000dc6:	4807      	ldr	r0, [pc, #28]	; (8000de4 <task3+0x60>)
 8000dc8:	f7ff fac4 	bl	8000354 <GPIOTogglePin>
		printf("From Task 3...\r\n");
 8000dcc:	e7ec      	b.n	8000da8 <task3+0x24>
 8000dce:	bf00      	nop
 8000dd0:	200050f8 	.word	0x200050f8
 8000dd4:	08001cb0 	.word	0x08001cb0
 8000dd8:	08001ccc 	.word	0x08001ccc
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	40020c00 	.word	0x40020c00

08000de8 <task4>:
		}
	}
}

void task4(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_4 = TICK_COUNT_TASK_4;

	while(1)
	{
		printf("From Task 4...\r\n");
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <task4+0x2c>)
 8000dee:	f000 fb8d 	bl	800150c <puts>
		//printf("Task 4 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_4 <= tick_count)
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <task4+0x30>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <task4+0x34>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d8f6      	bhi.n	8000dec <task4+0x4>
		{
			target_tick_count_4 = tick_count + TICK_COUNT_TASK_4;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <task4+0x34>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3364      	adds	r3, #100	; 0x64
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <task4+0x30>)
 8000e06:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_4);
 8000e08:	210f      	movs	r1, #15
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <task4+0x38>)
 8000e0c:	f7ff faa2 	bl	8000354 <GPIOTogglePin>
		printf("From Task 4...\r\n");
 8000e10:	e7ec      	b.n	8000dec <task4+0x4>
 8000e12:	bf00      	nop
 8000e14:	08001cdc 	.word	0x08001cdc
 8000e18:	20000014 	.word	0x20000014
 8000e1c:	200000b8 	.word	0x200000b8
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <configure_leds>:
		}
	}
}

void configure_leds(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	EnablePeriClk(GPIOD);
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <configure_leds+0x38>)
 8000e2a:	f7ff fb6d 	bl	8000508 <EnablePeriClk>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_1, GPIO_MODE_OUTPUT);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	210c      	movs	r1, #12
 8000e32:	480a      	ldr	r0, [pc, #40]	; (8000e5c <configure_leds+0x38>)
 8000e34:	f7ff fa48 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_2, GPIO_MODE_OUTPUT);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	210d      	movs	r1, #13
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <configure_leds+0x38>)
 8000e3e:	f7ff fa43 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_3, GPIO_MODE_OUTPUT);
 8000e42:	2201      	movs	r2, #1
 8000e44:	210e      	movs	r1, #14
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <configure_leds+0x38>)
 8000e48:	f7ff fa3e 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_4, GPIO_MODE_OUTPUT);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	210f      	movs	r1, #15
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <configure_leds+0x38>)
 8000e52:	f7ff fa39 	bl	80002c8 <GPIOSetMode>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <configure_systick_timer>:

void configure_systick_timer(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
	uint32_t *pSYT_RVR = (uint32_t *) 0xE000E014U;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <configure_systick_timer+0x2c>)
 8000e68:	607b      	str	r3, [r7, #4]
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <configure_systick_timer+0x30>)
 8000e6c:	603b      	str	r3, [r7, #0]

	*pSYT_RVR = SYT_RELOAD_VALUE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <configure_systick_timer+0x34>)
 8000e72:	601a      	str	r2, [r3, #0]
	*pSYT_CFGR |= SYT_CONTROL_VALUE;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f043 0206 	orr.w	r2, r3, #6
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e014 	.word	0xe000e014
 8000e90:	e000e010 	.word	0xe000e010
 8000e94:	000fffff 	.word	0x000fffff

08000e98 <enable_systick_timer>:

void enable_systick_timer(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <enable_systick_timer+0x20>)
 8000ea0:	607b      	str	r3, [r7, #4]

	*pSYT_CFGR |= 0x1;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <initialize_task_stacks>:

void initialize_task_stacks(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
	uint32_t *p;
	uint32_t i;

	current_sp[0] = ((uint32_t) &tcbs[0].task_stack + 4*TASK_STACK_SIZE);
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <initialize_task_stacks+0xd4>)
 8000ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000eca:	6013      	str	r3, [r2, #0]

	current_sp[1] = ((uint32_t) &tcbs[1].task_stack + 4*TASK_STACK_SIZE - 4*16);
 8000ecc:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <initialize_task_stacks+0xdc>)
 8000ece:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000ed4:	6053      	str	r3, [r2, #4]
	p = (uint32_t*) ((uint32_t)current_sp[1]+14*4);
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	3338      	adds	r3, #56	; 0x38
 8000edc:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) task1;
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <initialize_task_stacks+0xe0>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t)current_sp[1]+15*4);
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	333c      	adds	r3, #60	; 0x3c
 8000eea:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) 0x01000000U;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ef2:	601a      	str	r2, [r3, #0]

	current_sp[2] = ((uint32_t) &tcbs[2].task_stack + 4*TASK_STACK_SIZE - 4*16);
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <initialize_task_stacks+0xe4>)
 8000ef6:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000efc:	6093      	str	r3, [r2, #8]
	p = (uint32_t*) ((uint32_t)current_sp[2]+14*4);
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	3338      	adds	r3, #56	; 0x38
 8000f04:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) task2;
 8000f06:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <initialize_task_stacks+0xe8>)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t)current_sp[2]+15*4);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	333c      	adds	r3, #60	; 0x3c
 8000f12:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) 0x01000000U;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f1a:	601a      	str	r2, [r3, #0]

	current_sp[3] = ((uint32_t) &tcbs[3].task_stack + 4*TASK_STACK_SIZE - 4*16);
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <initialize_task_stacks+0xec>)
 8000f1e:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f24:	60d3      	str	r3, [r2, #12]
	p = (uint32_t*) ((uint32_t)current_sp[3]+14*4);
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	3338      	adds	r3, #56	; 0x38
 8000f2c:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) task3;
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <initialize_task_stacks+0xf0>)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t)current_sp[3]+15*4);
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	333c      	adds	r3, #60	; 0x3c
 8000f3a:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) 0x01000000U;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f42:	601a      	str	r2, [r3, #0]

	current_sp[4] = ((uint32_t) &tcbs[4].task_stack + 4*TASK_STACK_SIZE - 4*16);
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <initialize_task_stacks+0xf4>)
 8000f46:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f4c:	6113      	str	r3, [r2, #16]
	p = (uint32_t*) ((uint32_t)current_sp[4]+14*4);
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	3338      	adds	r3, #56	; 0x38
 8000f54:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) task4;
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <initialize_task_stacks+0xf8>)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t)current_sp[4]+15*4);
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <initialize_task_stacks+0xd8>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	333c      	adds	r3, #60	; 0x3c
 8000f62:	603b      	str	r3, [r7, #0]
	*p = (uint32_t) 0x01000000U;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f6a:	601a      	str	r2, [r3, #0]

	//Initializing the Sleep Count to 0
	for(i=0;i<MAX_TASKS;i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	e005      	b.n	8000f7e <initialize_task_stacks+0xc2>
		tcbs[0].sleep_count = 0;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <initialize_task_stacks+0xfc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	for(i=0;i<MAX_TASKS;i++)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d9f6      	bls.n	8000f72 <initialize_task_stacks+0xb6>

}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	200000c4 	.word	0x200000c4
 8000f94:	200050e4 	.word	0x200050e4
 8000f98:	200010cc 	.word	0x200010cc
 8000f9c:	08000d0d 	.word	0x08000d0d
 8000fa0:	200020d4 	.word	0x200020d4
 8000fa4:	08000d49 	.word	0x08000d49
 8000fa8:	200030dc 	.word	0x200030dc
 8000fac:	08000d85 	.word	0x08000d85
 8000fb0:	200040e4 	.word	0x200040e4
 8000fb4:	08000de9 	.word	0x08000de9
 8000fb8:	200000bc 	.word	0x200000bc

08000fbc <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <SysTick_Handler+0x30>)
 8000fc4:	607b      	str	r3, [r7, #4]

	tick_count++;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <SysTick_Handler+0x34>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <SysTick_Handler+0x34>)
 8000fce:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 8000fd0:	f000 f85c 	bl	800108c <update_sleep_status>

	update_next_task();
 8000fd4:	f000 f888 	bl	80010e8 <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	e000ed04 	.word	0xe000ed04
 8000ff0:	200000b8 	.word	0x200000b8

08000ff4 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 8000ff4:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 8000ff8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 8000ffc:	490f      	ldr	r1, [pc, #60]	; (800103c <PendSV_Handler+0x48>)
	__asm volatile ("LDR R2, [R1]");
 8000ffe:	680a      	ldr	r2, [r1, #0]
	__asm volatile ("LDR R1, =current_sp");
 8001000:	490f      	ldr	r1, [pc, #60]	; (8001040 <PendSV_Handler+0x4c>)
	__asm volatile ("MOV R3, #4");
 8001002:	f04f 0304 	mov.w	r3, #4
	__asm volatile ("MUL R2, R2, R3");
 8001006:	fb02 f203 	mul.w	r2, r2, r3
	__asm volatile ("ADD R1, R1, R2");
 800100a:	4411      	add	r1, r2
	__asm volatile ("STR R0, [R1]");
 800100c:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <PendSV_Handler+0x50>)
	__asm volatile ("LDR R2, [R1]");
 8001010:	680a      	ldr	r2, [r1, #0]
	__asm volatile ("LDR R1, =current_sp");
 8001012:	490b      	ldr	r1, [pc, #44]	; (8001040 <PendSV_Handler+0x4c>)
	__asm volatile ("MOV R3, #4");
 8001014:	f04f 0304 	mov.w	r3, #4
	__asm volatile ("MUL R2, R2, R3");
 8001018:	fb02 f203 	mul.w	r2, r2, r3
	__asm volatile ("ADD R1, R1, R2");
 800101c:	4411      	add	r1, r2
	__asm volatile ("LDR R0, [R1]");
 800101e:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 8001020:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8001024:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <PendSV_Handler+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a02      	ldr	r2, [pc, #8]	; (8001038 <PendSV_Handler+0x44>)
 800102e:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 8001030:	4770      	bx	lr
}
 8001032:	bf00      	nop
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000
 800103c:	20000000 	.word	0x20000000
 8001040:	200050e4 	.word	0x200050e4
 8001044:	20000004 	.word	0x20000004

08001048 <task_sleep>:

void task_sleep(uint32_t count)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <task_sleep+0x38>)
 8001052:	60fb      	str	r3, [r7, #12]

	tcbs[current_task].sleep_count = count;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <task_sleep+0x3c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	490b      	ldr	r1, [pc, #44]	; (8001088 <task_sleep+0x40>)
 800105a:	4613      	mov	r3, r2
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]

	//Pending the SysTick Exception
	*pICSR |= 0x4000000U;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]

	return;
 8001074:	bf00      	nop
}
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed04 	.word	0xe000ed04
 8001084:	20000000 	.word	0x20000000
 8001088:	200000bc 	.word	0x200000bc

0800108c <update_sleep_status>:

void update_sleep_status(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0;i<MAX_TASKS;i++)
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e01d      	b.n	80010d4 <update_sleep_status+0x48>
	{
		if(tcbs[i].sleep_count > 0)
 8001098:	4912      	ldr	r1, [pc, #72]	; (80010e4 <update_sleep_status+0x58>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	025b      	lsls	r3, r3, #9
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d010      	beq.n	80010ce <update_sleep_status+0x42>
		{
			tcbs[i].sleep_count--;
 80010ac:	490d      	ldr	r1, [pc, #52]	; (80010e4 <update_sleep_status+0x58>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1e59      	subs	r1, r3, #1
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <update_sleep_status+0x58>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4403      	add	r3, r0
 80010cc:	6019      	str	r1, [r3, #0]
	for(i=0;i<MAX_TASKS;i++)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d9de      	bls.n	8001098 <update_sleep_status+0xc>
		}
	}

	return;
 80010da:	bf00      	nop
}
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <update_next_task>:

void update_next_task(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint32_t best_task;

	next_task = current_task;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <update_next_task+0x94>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <update_next_task+0x98>)
 80010f8:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = (next_task+1)%(MAX_TASKS);
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <update_next_task+0x98>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1c59      	adds	r1, r3, #1
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <update_next_task+0x9c>)
 8001102:	fba3 2301 	umull	r2, r3, r3, r1
 8001106:	089a      	lsrs	r2, r3, #2
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	1aca      	subs	r2, r1, r3
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <update_next_task+0x98>)
 8001112:	601a      	str	r2, [r3, #0]

		if(tcbs[next_task].priority < max_priority && tcbs[next_task].sleep_count==0)
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <update_next_task+0x98>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	491b      	ldr	r1, [pc, #108]	; (8001188 <update_next_task+0xa0>)
 800111a:	4613      	mov	r3, r2
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3304      	adds	r3, #4
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	429a      	cmp	r2, r3
 800112c:	d918      	bls.n	8001160 <update_next_task+0x78>
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <update_next_task+0x98>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4915      	ldr	r1, [pc, #84]	; (8001188 <update_next_task+0xa0>)
 8001134:	4613      	mov	r3, r2
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <update_next_task+0x78>
		{
			max_priority = tcbs[next_task].priority;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <update_next_task+0x98>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	490f      	ldr	r1, [pc, #60]	; (8001188 <update_next_task+0xa0>)
 800114a:	4613      	mov	r3, r2
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3304      	adds	r3, #4
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <update_next_task+0x98>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <update_next_task+0x98>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <update_next_task+0x94>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d1c6      	bne.n	80010fa <update_next_task+0x12>

	next_task = best_task;
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <update_next_task+0x98>)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6013      	str	r3, [r2, #0]

	return;
 8001172:	bf00      	nop
}
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004
 8001184:	cccccccd 	.word	0xcccccccd
 8001188:	200000bc 	.word	0x200000bc

0800118c <set_task_priority>:

void set_task_priority(uint32_t task, uint8_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	tcbs[task].priority = priority;
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <set_task_priority+0x2c>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	3304      	adds	r3, #4
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	701a      	strb	r2, [r3, #0]

	return;
 80011ac:	bf00      	nop
}
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200000bc 	.word	0x200000bc

080011bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	; (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	; (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011ea:	f000 f817 	bl	800121c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ee:	f7ff fd4f 	bl	8000c90 <main>

080011f2 <LoopForever>:

LoopForever:
  b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   r0, =_estack
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001200:	08001d58 	.word	0x08001d58
  ldr r2, =_sbss
 8001204:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001208:	2000510c 	.word	0x2000510c

0800120c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <__errno>:
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <__errno+0x8>)
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000018 	.word	0x20000018

0800121c <__libc_init_array>:
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	4d0d      	ldr	r5, [pc, #52]	; (8001254 <__libc_init_array+0x38>)
 8001220:	4c0d      	ldr	r4, [pc, #52]	; (8001258 <__libc_init_array+0x3c>)
 8001222:	1b64      	subs	r4, r4, r5
 8001224:	10a4      	asrs	r4, r4, #2
 8001226:	2600      	movs	r6, #0
 8001228:	42a6      	cmp	r6, r4
 800122a:	d109      	bne.n	8001240 <__libc_init_array+0x24>
 800122c:	4d0b      	ldr	r5, [pc, #44]	; (800125c <__libc_init_array+0x40>)
 800122e:	4c0c      	ldr	r4, [pc, #48]	; (8001260 <__libc_init_array+0x44>)
 8001230:	f000 fd18 	bl	8001c64 <_init>
 8001234:	1b64      	subs	r4, r4, r5
 8001236:	10a4      	asrs	r4, r4, #2
 8001238:	2600      	movs	r6, #0
 800123a:	42a6      	cmp	r6, r4
 800123c:	d105      	bne.n	800124a <__libc_init_array+0x2e>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	f855 3b04 	ldr.w	r3, [r5], #4
 8001244:	4798      	blx	r3
 8001246:	3601      	adds	r6, #1
 8001248:	e7ee      	b.n	8001228 <__libc_init_array+0xc>
 800124a:	f855 3b04 	ldr.w	r3, [r5], #4
 800124e:	4798      	blx	r3
 8001250:	3601      	adds	r6, #1
 8001252:	e7f2      	b.n	800123a <__libc_init_array+0x1e>
 8001254:	08001d50 	.word	0x08001d50
 8001258:	08001d50 	.word	0x08001d50
 800125c:	08001d50 	.word	0x08001d50
 8001260:	08001d54 	.word	0x08001d54

08001264 <memset>:
 8001264:	4402      	add	r2, r0
 8001266:	4603      	mov	r3, r0
 8001268:	4293      	cmp	r3, r2
 800126a:	d100      	bne.n	800126e <memset+0xa>
 800126c:	4770      	bx	lr
 800126e:	f803 1b01 	strb.w	r1, [r3], #1
 8001272:	e7f9      	b.n	8001268 <memset+0x4>

08001274 <_free_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4605      	mov	r5, r0
 8001278:	2900      	cmp	r1, #0
 800127a:	d041      	beq.n	8001300 <_free_r+0x8c>
 800127c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001280:	1f0c      	subs	r4, r1, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	bfb8      	it	lt
 8001286:	18e4      	addlt	r4, r4, r3
 8001288:	f000 fc34 	bl	8001af4 <__malloc_lock>
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <_free_r+0x90>)
 800128e:	6813      	ldr	r3, [r2, #0]
 8001290:	b933      	cbnz	r3, 80012a0 <_free_r+0x2c>
 8001292:	6063      	str	r3, [r4, #4]
 8001294:	6014      	str	r4, [r2, #0]
 8001296:	4628      	mov	r0, r5
 8001298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800129c:	f000 bc30 	b.w	8001b00 <__malloc_unlock>
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	d908      	bls.n	80012b6 <_free_r+0x42>
 80012a4:	6820      	ldr	r0, [r4, #0]
 80012a6:	1821      	adds	r1, r4, r0
 80012a8:	428b      	cmp	r3, r1
 80012aa:	bf01      	itttt	eq
 80012ac:	6819      	ldreq	r1, [r3, #0]
 80012ae:	685b      	ldreq	r3, [r3, #4]
 80012b0:	1809      	addeq	r1, r1, r0
 80012b2:	6021      	streq	r1, [r4, #0]
 80012b4:	e7ed      	b.n	8001292 <_free_r+0x1e>
 80012b6:	461a      	mov	r2, r3
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	b10b      	cbz	r3, 80012c0 <_free_r+0x4c>
 80012bc:	42a3      	cmp	r3, r4
 80012be:	d9fa      	bls.n	80012b6 <_free_r+0x42>
 80012c0:	6811      	ldr	r1, [r2, #0]
 80012c2:	1850      	adds	r0, r2, r1
 80012c4:	42a0      	cmp	r0, r4
 80012c6:	d10b      	bne.n	80012e0 <_free_r+0x6c>
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	4401      	add	r1, r0
 80012cc:	1850      	adds	r0, r2, r1
 80012ce:	4283      	cmp	r3, r0
 80012d0:	6011      	str	r1, [r2, #0]
 80012d2:	d1e0      	bne.n	8001296 <_free_r+0x22>
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6053      	str	r3, [r2, #4]
 80012da:	4401      	add	r1, r0
 80012dc:	6011      	str	r1, [r2, #0]
 80012de:	e7da      	b.n	8001296 <_free_r+0x22>
 80012e0:	d902      	bls.n	80012e8 <_free_r+0x74>
 80012e2:	230c      	movs	r3, #12
 80012e4:	602b      	str	r3, [r5, #0]
 80012e6:	e7d6      	b.n	8001296 <_free_r+0x22>
 80012e8:	6820      	ldr	r0, [r4, #0]
 80012ea:	1821      	adds	r1, r4, r0
 80012ec:	428b      	cmp	r3, r1
 80012ee:	bf04      	itt	eq
 80012f0:	6819      	ldreq	r1, [r3, #0]
 80012f2:	685b      	ldreq	r3, [r3, #4]
 80012f4:	6063      	str	r3, [r4, #4]
 80012f6:	bf04      	itt	eq
 80012f8:	1809      	addeq	r1, r1, r0
 80012fa:	6021      	streq	r1, [r4, #0]
 80012fc:	6054      	str	r4, [r2, #4]
 80012fe:	e7ca      	b.n	8001296 <_free_r+0x22>
 8001300:	bd38      	pop	{r3, r4, r5, pc}
 8001302:	bf00      	nop
 8001304:	200050fc 	.word	0x200050fc

08001308 <sbrk_aligned>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4e0e      	ldr	r6, [pc, #56]	; (8001344 <sbrk_aligned+0x3c>)
 800130c:	460c      	mov	r4, r1
 800130e:	6831      	ldr	r1, [r6, #0]
 8001310:	4605      	mov	r5, r0
 8001312:	b911      	cbnz	r1, 800131a <sbrk_aligned+0x12>
 8001314:	f000 f902 	bl	800151c <_sbrk_r>
 8001318:	6030      	str	r0, [r6, #0]
 800131a:	4621      	mov	r1, r4
 800131c:	4628      	mov	r0, r5
 800131e:	f000 f8fd 	bl	800151c <_sbrk_r>
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	d00a      	beq.n	800133c <sbrk_aligned+0x34>
 8001326:	1cc4      	adds	r4, r0, #3
 8001328:	f024 0403 	bic.w	r4, r4, #3
 800132c:	42a0      	cmp	r0, r4
 800132e:	d007      	beq.n	8001340 <sbrk_aligned+0x38>
 8001330:	1a21      	subs	r1, r4, r0
 8001332:	4628      	mov	r0, r5
 8001334:	f000 f8f2 	bl	800151c <_sbrk_r>
 8001338:	3001      	adds	r0, #1
 800133a:	d101      	bne.n	8001340 <sbrk_aligned+0x38>
 800133c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001340:	4620      	mov	r0, r4
 8001342:	bd70      	pop	{r4, r5, r6, pc}
 8001344:	20005100 	.word	0x20005100

08001348 <_malloc_r>:
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134c:	1ccd      	adds	r5, r1, #3
 800134e:	f025 0503 	bic.w	r5, r5, #3
 8001352:	3508      	adds	r5, #8
 8001354:	2d0c      	cmp	r5, #12
 8001356:	bf38      	it	cc
 8001358:	250c      	movcc	r5, #12
 800135a:	2d00      	cmp	r5, #0
 800135c:	4607      	mov	r7, r0
 800135e:	db01      	blt.n	8001364 <_malloc_r+0x1c>
 8001360:	42a9      	cmp	r1, r5
 8001362:	d905      	bls.n	8001370 <_malloc_r+0x28>
 8001364:	230c      	movs	r3, #12
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	2600      	movs	r6, #0
 800136a:	4630      	mov	r0, r6
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	4e2e      	ldr	r6, [pc, #184]	; (800142c <_malloc_r+0xe4>)
 8001372:	f000 fbbf 	bl	8001af4 <__malloc_lock>
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	461c      	mov	r4, r3
 800137a:	bb34      	cbnz	r4, 80013ca <_malloc_r+0x82>
 800137c:	4629      	mov	r1, r5
 800137e:	4638      	mov	r0, r7
 8001380:	f7ff ffc2 	bl	8001308 <sbrk_aligned>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	4604      	mov	r4, r0
 8001388:	d14d      	bne.n	8001426 <_malloc_r+0xde>
 800138a:	6834      	ldr	r4, [r6, #0]
 800138c:	4626      	mov	r6, r4
 800138e:	2e00      	cmp	r6, #0
 8001390:	d140      	bne.n	8001414 <_malloc_r+0xcc>
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	4631      	mov	r1, r6
 8001396:	4638      	mov	r0, r7
 8001398:	eb04 0803 	add.w	r8, r4, r3
 800139c:	f000 f8be 	bl	800151c <_sbrk_r>
 80013a0:	4580      	cmp	r8, r0
 80013a2:	d13a      	bne.n	800141a <_malloc_r+0xd2>
 80013a4:	6821      	ldr	r1, [r4, #0]
 80013a6:	3503      	adds	r5, #3
 80013a8:	1a6d      	subs	r5, r5, r1
 80013aa:	f025 0503 	bic.w	r5, r5, #3
 80013ae:	3508      	adds	r5, #8
 80013b0:	2d0c      	cmp	r5, #12
 80013b2:	bf38      	it	cc
 80013b4:	250c      	movcc	r5, #12
 80013b6:	4629      	mov	r1, r5
 80013b8:	4638      	mov	r0, r7
 80013ba:	f7ff ffa5 	bl	8001308 <sbrk_aligned>
 80013be:	3001      	adds	r0, #1
 80013c0:	d02b      	beq.n	800141a <_malloc_r+0xd2>
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	442b      	add	r3, r5
 80013c6:	6023      	str	r3, [r4, #0]
 80013c8:	e00e      	b.n	80013e8 <_malloc_r+0xa0>
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	1b52      	subs	r2, r2, r5
 80013ce:	d41e      	bmi.n	800140e <_malloc_r+0xc6>
 80013d0:	2a0b      	cmp	r2, #11
 80013d2:	d916      	bls.n	8001402 <_malloc_r+0xba>
 80013d4:	1961      	adds	r1, r4, r5
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	6025      	str	r5, [r4, #0]
 80013da:	bf18      	it	ne
 80013dc:	6059      	strne	r1, [r3, #4]
 80013de:	6863      	ldr	r3, [r4, #4]
 80013e0:	bf08      	it	eq
 80013e2:	6031      	streq	r1, [r6, #0]
 80013e4:	5162      	str	r2, [r4, r5]
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	4638      	mov	r0, r7
 80013ea:	f104 060b 	add.w	r6, r4, #11
 80013ee:	f000 fb87 	bl	8001b00 <__malloc_unlock>
 80013f2:	f026 0607 	bic.w	r6, r6, #7
 80013f6:	1d23      	adds	r3, r4, #4
 80013f8:	1af2      	subs	r2, r6, r3
 80013fa:	d0b6      	beq.n	800136a <_malloc_r+0x22>
 80013fc:	1b9b      	subs	r3, r3, r6
 80013fe:	50a3      	str	r3, [r4, r2]
 8001400:	e7b3      	b.n	800136a <_malloc_r+0x22>
 8001402:	6862      	ldr	r2, [r4, #4]
 8001404:	42a3      	cmp	r3, r4
 8001406:	bf0c      	ite	eq
 8001408:	6032      	streq	r2, [r6, #0]
 800140a:	605a      	strne	r2, [r3, #4]
 800140c:	e7ec      	b.n	80013e8 <_malloc_r+0xa0>
 800140e:	4623      	mov	r3, r4
 8001410:	6864      	ldr	r4, [r4, #4]
 8001412:	e7b2      	b.n	800137a <_malloc_r+0x32>
 8001414:	4634      	mov	r4, r6
 8001416:	6876      	ldr	r6, [r6, #4]
 8001418:	e7b9      	b.n	800138e <_malloc_r+0x46>
 800141a:	230c      	movs	r3, #12
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4638      	mov	r0, r7
 8001420:	f000 fb6e 	bl	8001b00 <__malloc_unlock>
 8001424:	e7a1      	b.n	800136a <_malloc_r+0x22>
 8001426:	6025      	str	r5, [r4, #0]
 8001428:	e7de      	b.n	80013e8 <_malloc_r+0xa0>
 800142a:	bf00      	nop
 800142c:	200050fc 	.word	0x200050fc

08001430 <_puts_r>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	460e      	mov	r6, r1
 8001434:	4605      	mov	r5, r0
 8001436:	b118      	cbz	r0, 8001440 <_puts_r+0x10>
 8001438:	6983      	ldr	r3, [r0, #24]
 800143a:	b90b      	cbnz	r3, 8001440 <_puts_r+0x10>
 800143c:	f000 fa54 	bl	80018e8 <__sinit>
 8001440:	69ab      	ldr	r3, [r5, #24]
 8001442:	68ac      	ldr	r4, [r5, #8]
 8001444:	b913      	cbnz	r3, 800144c <_puts_r+0x1c>
 8001446:	4628      	mov	r0, r5
 8001448:	f000 fa4e 	bl	80018e8 <__sinit>
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <_puts_r+0xd0>)
 800144e:	429c      	cmp	r4, r3
 8001450:	d120      	bne.n	8001494 <_puts_r+0x64>
 8001452:	686c      	ldr	r4, [r5, #4]
 8001454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001456:	07db      	lsls	r3, r3, #31
 8001458:	d405      	bmi.n	8001466 <_puts_r+0x36>
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	0598      	lsls	r0, r3, #22
 800145e:	d402      	bmi.n	8001466 <_puts_r+0x36>
 8001460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001462:	f000 fadf 	bl	8001a24 <__retarget_lock_acquire_recursive>
 8001466:	89a3      	ldrh	r3, [r4, #12]
 8001468:	0719      	lsls	r1, r3, #28
 800146a:	d51d      	bpl.n	80014a8 <_puts_r+0x78>
 800146c:	6923      	ldr	r3, [r4, #16]
 800146e:	b1db      	cbz	r3, 80014a8 <_puts_r+0x78>
 8001470:	3e01      	subs	r6, #1
 8001472:	68a3      	ldr	r3, [r4, #8]
 8001474:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001478:	3b01      	subs	r3, #1
 800147a:	60a3      	str	r3, [r4, #8]
 800147c:	bb39      	cbnz	r1, 80014ce <_puts_r+0x9e>
 800147e:	2b00      	cmp	r3, #0
 8001480:	da38      	bge.n	80014f4 <_puts_r+0xc4>
 8001482:	4622      	mov	r2, r4
 8001484:	210a      	movs	r1, #10
 8001486:	4628      	mov	r0, r5
 8001488:	f000 f858 	bl	800153c <__swbuf_r>
 800148c:	3001      	adds	r0, #1
 800148e:	d011      	beq.n	80014b4 <_puts_r+0x84>
 8001490:	250a      	movs	r5, #10
 8001492:	e011      	b.n	80014b8 <_puts_r+0x88>
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <_puts_r+0xd4>)
 8001496:	429c      	cmp	r4, r3
 8001498:	d101      	bne.n	800149e <_puts_r+0x6e>
 800149a:	68ac      	ldr	r4, [r5, #8]
 800149c:	e7da      	b.n	8001454 <_puts_r+0x24>
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <_puts_r+0xd8>)
 80014a0:	429c      	cmp	r4, r3
 80014a2:	bf08      	it	eq
 80014a4:	68ec      	ldreq	r4, [r5, #12]
 80014a6:	e7d5      	b.n	8001454 <_puts_r+0x24>
 80014a8:	4621      	mov	r1, r4
 80014aa:	4628      	mov	r0, r5
 80014ac:	f000 f898 	bl	80015e0 <__swsetup_r>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d0dd      	beq.n	8001470 <_puts_r+0x40>
 80014b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80014b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ba:	07da      	lsls	r2, r3, #31
 80014bc:	d405      	bmi.n	80014ca <_puts_r+0x9a>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	059b      	lsls	r3, r3, #22
 80014c2:	d402      	bmi.n	80014ca <_puts_r+0x9a>
 80014c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c6:	f000 faae 	bl	8001a26 <__retarget_lock_release_recursive>
 80014ca:	4628      	mov	r0, r5
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da04      	bge.n	80014dc <_puts_r+0xac>
 80014d2:	69a2      	ldr	r2, [r4, #24]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc06      	bgt.n	80014e6 <_puts_r+0xb6>
 80014d8:	290a      	cmp	r1, #10
 80014da:	d004      	beq.n	80014e6 <_puts_r+0xb6>
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	7019      	strb	r1, [r3, #0]
 80014e4:	e7c5      	b.n	8001472 <_puts_r+0x42>
 80014e6:	4622      	mov	r2, r4
 80014e8:	4628      	mov	r0, r5
 80014ea:	f000 f827 	bl	800153c <__swbuf_r>
 80014ee:	3001      	adds	r0, #1
 80014f0:	d1bf      	bne.n	8001472 <_puts_r+0x42>
 80014f2:	e7df      	b.n	80014b4 <_puts_r+0x84>
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	250a      	movs	r5, #10
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	6022      	str	r2, [r4, #0]
 80014fc:	701d      	strb	r5, [r3, #0]
 80014fe:	e7db      	b.n	80014b8 <_puts_r+0x88>
 8001500:	08001d10 	.word	0x08001d10
 8001504:	08001d30 	.word	0x08001d30
 8001508:	08001cf0 	.word	0x08001cf0

0800150c <puts>:
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <puts+0xc>)
 800150e:	4601      	mov	r1, r0
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f7ff bf8d 	b.w	8001430 <_puts_r>
 8001516:	bf00      	nop
 8001518:	20000018 	.word	0x20000018

0800151c <_sbrk_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4d06      	ldr	r5, [pc, #24]	; (8001538 <_sbrk_r+0x1c>)
 8001520:	2300      	movs	r3, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	602b      	str	r3, [r5, #0]
 8001528:	f7ff fb7c 	bl	8000c24 <_sbrk>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_sbrk_r+0x1a>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_sbrk_r+0x1a>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	20005108 	.word	0x20005108

0800153c <__swbuf_r>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	460e      	mov	r6, r1
 8001540:	4614      	mov	r4, r2
 8001542:	4605      	mov	r5, r0
 8001544:	b118      	cbz	r0, 800154e <__swbuf_r+0x12>
 8001546:	6983      	ldr	r3, [r0, #24]
 8001548:	b90b      	cbnz	r3, 800154e <__swbuf_r+0x12>
 800154a:	f000 f9cd 	bl	80018e8 <__sinit>
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <__swbuf_r+0x98>)
 8001550:	429c      	cmp	r4, r3
 8001552:	d12b      	bne.n	80015ac <__swbuf_r+0x70>
 8001554:	686c      	ldr	r4, [r5, #4]
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	60a3      	str	r3, [r4, #8]
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	071a      	lsls	r2, r3, #28
 800155e:	d52f      	bpl.n	80015c0 <__swbuf_r+0x84>
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	b36b      	cbz	r3, 80015c0 <__swbuf_r+0x84>
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	1ac0      	subs	r0, r0, r3
 800156a:	6963      	ldr	r3, [r4, #20]
 800156c:	b2f6      	uxtb	r6, r6
 800156e:	4283      	cmp	r3, r0
 8001570:	4637      	mov	r7, r6
 8001572:	dc04      	bgt.n	800157e <__swbuf_r+0x42>
 8001574:	4621      	mov	r1, r4
 8001576:	4628      	mov	r0, r5
 8001578:	f000 f922 	bl	80017c0 <_fflush_r>
 800157c:	bb30      	cbnz	r0, 80015cc <__swbuf_r+0x90>
 800157e:	68a3      	ldr	r3, [r4, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60a3      	str	r3, [r4, #8]
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	6022      	str	r2, [r4, #0]
 800158a:	701e      	strb	r6, [r3, #0]
 800158c:	6963      	ldr	r3, [r4, #20]
 800158e:	3001      	adds	r0, #1
 8001590:	4283      	cmp	r3, r0
 8001592:	d004      	beq.n	800159e <__swbuf_r+0x62>
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	07db      	lsls	r3, r3, #31
 8001598:	d506      	bpl.n	80015a8 <__swbuf_r+0x6c>
 800159a:	2e0a      	cmp	r6, #10
 800159c:	d104      	bne.n	80015a8 <__swbuf_r+0x6c>
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f90d 	bl	80017c0 <_fflush_r>
 80015a6:	b988      	cbnz	r0, 80015cc <__swbuf_r+0x90>
 80015a8:	4638      	mov	r0, r7
 80015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <__swbuf_r+0x9c>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	d101      	bne.n	80015b6 <__swbuf_r+0x7a>
 80015b2:	68ac      	ldr	r4, [r5, #8]
 80015b4:	e7cf      	b.n	8001556 <__swbuf_r+0x1a>
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <__swbuf_r+0xa0>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	bf08      	it	eq
 80015bc:	68ec      	ldreq	r4, [r5, #12]
 80015be:	e7ca      	b.n	8001556 <__swbuf_r+0x1a>
 80015c0:	4621      	mov	r1, r4
 80015c2:	4628      	mov	r0, r5
 80015c4:	f000 f80c 	bl	80015e0 <__swsetup_r>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0cb      	beq.n	8001564 <__swbuf_r+0x28>
 80015cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80015d0:	e7ea      	b.n	80015a8 <__swbuf_r+0x6c>
 80015d2:	bf00      	nop
 80015d4:	08001d10 	.word	0x08001d10
 80015d8:	08001d30 	.word	0x08001d30
 80015dc:	08001cf0 	.word	0x08001cf0

080015e0 <__swsetup_r>:
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <__swsetup_r+0xcc>)
 80015e2:	b570      	push	{r4, r5, r6, lr}
 80015e4:	681d      	ldr	r5, [r3, #0]
 80015e6:	4606      	mov	r6, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	b125      	cbz	r5, 80015f6 <__swsetup_r+0x16>
 80015ec:	69ab      	ldr	r3, [r5, #24]
 80015ee:	b913      	cbnz	r3, 80015f6 <__swsetup_r+0x16>
 80015f0:	4628      	mov	r0, r5
 80015f2:	f000 f979 	bl	80018e8 <__sinit>
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <__swsetup_r+0xd0>)
 80015f8:	429c      	cmp	r4, r3
 80015fa:	d10f      	bne.n	800161c <__swsetup_r+0x3c>
 80015fc:	686c      	ldr	r4, [r5, #4]
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001604:	0719      	lsls	r1, r3, #28
 8001606:	d42c      	bmi.n	8001662 <__swsetup_r+0x82>
 8001608:	06dd      	lsls	r5, r3, #27
 800160a:	d411      	bmi.n	8001630 <__swsetup_r+0x50>
 800160c:	2309      	movs	r3, #9
 800160e:	6033      	str	r3, [r6, #0]
 8001610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001614:	81a3      	strh	r3, [r4, #12]
 8001616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800161a:	e03e      	b.n	800169a <__swsetup_r+0xba>
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <__swsetup_r+0xd4>)
 800161e:	429c      	cmp	r4, r3
 8001620:	d101      	bne.n	8001626 <__swsetup_r+0x46>
 8001622:	68ac      	ldr	r4, [r5, #8]
 8001624:	e7eb      	b.n	80015fe <__swsetup_r+0x1e>
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <__swsetup_r+0xd8>)
 8001628:	429c      	cmp	r4, r3
 800162a:	bf08      	it	eq
 800162c:	68ec      	ldreq	r4, [r5, #12]
 800162e:	e7e6      	b.n	80015fe <__swsetup_r+0x1e>
 8001630:	0758      	lsls	r0, r3, #29
 8001632:	d512      	bpl.n	800165a <__swsetup_r+0x7a>
 8001634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001636:	b141      	cbz	r1, 800164a <__swsetup_r+0x6a>
 8001638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800163c:	4299      	cmp	r1, r3
 800163e:	d002      	beq.n	8001646 <__swsetup_r+0x66>
 8001640:	4630      	mov	r0, r6
 8001642:	f7ff fe17 	bl	8001274 <_free_r>
 8001646:	2300      	movs	r3, #0
 8001648:	6363      	str	r3, [r4, #52]	; 0x34
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001650:	81a3      	strh	r3, [r4, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	6063      	str	r3, [r4, #4]
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	81a3      	strh	r3, [r4, #12]
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	b94b      	cbnz	r3, 800167a <__swsetup_r+0x9a>
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d003      	beq.n	800167a <__swsetup_r+0x9a>
 8001672:	4621      	mov	r1, r4
 8001674:	4630      	mov	r0, r6
 8001676:	f000 f9fd 	bl	8001a74 <__smakebuf_r>
 800167a:	89a0      	ldrh	r0, [r4, #12]
 800167c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001680:	f010 0301 	ands.w	r3, r0, #1
 8001684:	d00a      	beq.n	800169c <__swsetup_r+0xbc>
 8001686:	2300      	movs	r3, #0
 8001688:	60a3      	str	r3, [r4, #8]
 800168a:	6963      	ldr	r3, [r4, #20]
 800168c:	425b      	negs	r3, r3
 800168e:	61a3      	str	r3, [r4, #24]
 8001690:	6923      	ldr	r3, [r4, #16]
 8001692:	b943      	cbnz	r3, 80016a6 <__swsetup_r+0xc6>
 8001694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001698:	d1ba      	bne.n	8001610 <__swsetup_r+0x30>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	0781      	lsls	r1, r0, #30
 800169e:	bf58      	it	pl
 80016a0:	6963      	ldrpl	r3, [r4, #20]
 80016a2:	60a3      	str	r3, [r4, #8]
 80016a4:	e7f4      	b.n	8001690 <__swsetup_r+0xb0>
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7f7      	b.n	800169a <__swsetup_r+0xba>
 80016aa:	bf00      	nop
 80016ac:	20000018 	.word	0x20000018
 80016b0:	08001d10 	.word	0x08001d10
 80016b4:	08001d30 	.word	0x08001d30
 80016b8:	08001cf0 	.word	0x08001cf0

080016bc <__sflush_r>:
 80016bc:	898a      	ldrh	r2, [r1, #12]
 80016be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c0:	4605      	mov	r5, r0
 80016c2:	0710      	lsls	r0, r2, #28
 80016c4:	460c      	mov	r4, r1
 80016c6:	d457      	bmi.n	8001778 <__sflush_r+0xbc>
 80016c8:	684b      	ldr	r3, [r1, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dc04      	bgt.n	80016d8 <__sflush_r+0x1c>
 80016ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc01      	bgt.n	80016d8 <__sflush_r+0x1c>
 80016d4:	2000      	movs	r0, #0
 80016d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016da:	2e00      	cmp	r6, #0
 80016dc:	d0fa      	beq.n	80016d4 <__sflush_r+0x18>
 80016de:	2300      	movs	r3, #0
 80016e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016e4:	682f      	ldr	r7, [r5, #0]
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	d032      	beq.n	8001750 <__sflush_r+0x94>
 80016ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	075a      	lsls	r2, r3, #29
 80016f0:	d505      	bpl.n	80016fe <__sflush_r+0x42>
 80016f2:	6863      	ldr	r3, [r4, #4]
 80016f4:	1ac0      	subs	r0, r0, r3
 80016f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016f8:	b10b      	cbz	r3, 80016fe <__sflush_r+0x42>
 80016fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016fc:	1ac0      	subs	r0, r0, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	4602      	mov	r2, r0
 8001702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001704:	6a21      	ldr	r1, [r4, #32]
 8001706:	4628      	mov	r0, r5
 8001708:	47b0      	blx	r6
 800170a:	1c43      	adds	r3, r0, #1
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	d106      	bne.n	800171e <__sflush_r+0x62>
 8001710:	6829      	ldr	r1, [r5, #0]
 8001712:	291d      	cmp	r1, #29
 8001714:	d82c      	bhi.n	8001770 <__sflush_r+0xb4>
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <__sflush_r+0x100>)
 8001718:	40ca      	lsrs	r2, r1
 800171a:	07d6      	lsls	r6, r2, #31
 800171c:	d528      	bpl.n	8001770 <__sflush_r+0xb4>
 800171e:	2200      	movs	r2, #0
 8001720:	6062      	str	r2, [r4, #4]
 8001722:	04d9      	lsls	r1, r3, #19
 8001724:	6922      	ldr	r2, [r4, #16]
 8001726:	6022      	str	r2, [r4, #0]
 8001728:	d504      	bpl.n	8001734 <__sflush_r+0x78>
 800172a:	1c42      	adds	r2, r0, #1
 800172c:	d101      	bne.n	8001732 <__sflush_r+0x76>
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	b903      	cbnz	r3, 8001734 <__sflush_r+0x78>
 8001732:	6560      	str	r0, [r4, #84]	; 0x54
 8001734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001736:	602f      	str	r7, [r5, #0]
 8001738:	2900      	cmp	r1, #0
 800173a:	d0cb      	beq.n	80016d4 <__sflush_r+0x18>
 800173c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001740:	4299      	cmp	r1, r3
 8001742:	d002      	beq.n	800174a <__sflush_r+0x8e>
 8001744:	4628      	mov	r0, r5
 8001746:	f7ff fd95 	bl	8001274 <_free_r>
 800174a:	2000      	movs	r0, #0
 800174c:	6360      	str	r0, [r4, #52]	; 0x34
 800174e:	e7c2      	b.n	80016d6 <__sflush_r+0x1a>
 8001750:	6a21      	ldr	r1, [r4, #32]
 8001752:	2301      	movs	r3, #1
 8001754:	4628      	mov	r0, r5
 8001756:	47b0      	blx	r6
 8001758:	1c41      	adds	r1, r0, #1
 800175a:	d1c7      	bne.n	80016ec <__sflush_r+0x30>
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0c4      	beq.n	80016ec <__sflush_r+0x30>
 8001762:	2b1d      	cmp	r3, #29
 8001764:	d001      	beq.n	800176a <__sflush_r+0xae>
 8001766:	2b16      	cmp	r3, #22
 8001768:	d101      	bne.n	800176e <__sflush_r+0xb2>
 800176a:	602f      	str	r7, [r5, #0]
 800176c:	e7b2      	b.n	80016d4 <__sflush_r+0x18>
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001774:	81a3      	strh	r3, [r4, #12]
 8001776:	e7ae      	b.n	80016d6 <__sflush_r+0x1a>
 8001778:	690f      	ldr	r7, [r1, #16]
 800177a:	2f00      	cmp	r7, #0
 800177c:	d0aa      	beq.n	80016d4 <__sflush_r+0x18>
 800177e:	0793      	lsls	r3, r2, #30
 8001780:	680e      	ldr	r6, [r1, #0]
 8001782:	bf08      	it	eq
 8001784:	694b      	ldreq	r3, [r1, #20]
 8001786:	600f      	str	r7, [r1, #0]
 8001788:	bf18      	it	ne
 800178a:	2300      	movne	r3, #0
 800178c:	1bf6      	subs	r6, r6, r7
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	2e00      	cmp	r6, #0
 8001792:	dd9f      	ble.n	80016d4 <__sflush_r+0x18>
 8001794:	6a21      	ldr	r1, [r4, #32]
 8001796:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800179a:	4633      	mov	r3, r6
 800179c:	463a      	mov	r2, r7
 800179e:	4628      	mov	r0, r5
 80017a0:	47e0      	blx	ip
 80017a2:	2800      	cmp	r0, #0
 80017a4:	dc06      	bgt.n	80017b4 <__sflush_r+0xf8>
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	81a3      	strh	r3, [r4, #12]
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b2:	e790      	b.n	80016d6 <__sflush_r+0x1a>
 80017b4:	4407      	add	r7, r0
 80017b6:	1a36      	subs	r6, r6, r0
 80017b8:	e7ea      	b.n	8001790 <__sflush_r+0xd4>
 80017ba:	bf00      	nop
 80017bc:	20400001 	.word	0x20400001

080017c0 <_fflush_r>:
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	690b      	ldr	r3, [r1, #16]
 80017c4:	4605      	mov	r5, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	b913      	cbnz	r3, 80017d0 <_fflush_r+0x10>
 80017ca:	2500      	movs	r5, #0
 80017cc:	4628      	mov	r0, r5
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
 80017d0:	b118      	cbz	r0, 80017da <_fflush_r+0x1a>
 80017d2:	6983      	ldr	r3, [r0, #24]
 80017d4:	b90b      	cbnz	r3, 80017da <_fflush_r+0x1a>
 80017d6:	f000 f887 	bl	80018e8 <__sinit>
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <_fflush_r+0x6c>)
 80017dc:	429c      	cmp	r4, r3
 80017de:	d11b      	bne.n	8001818 <_fflush_r+0x58>
 80017e0:	686c      	ldr	r4, [r5, #4]
 80017e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0ef      	beq.n	80017ca <_fflush_r+0xa>
 80017ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017ec:	07d0      	lsls	r0, r2, #31
 80017ee:	d404      	bmi.n	80017fa <_fflush_r+0x3a>
 80017f0:	0599      	lsls	r1, r3, #22
 80017f2:	d402      	bmi.n	80017fa <_fflush_r+0x3a>
 80017f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017f6:	f000 f915 	bl	8001a24 <__retarget_lock_acquire_recursive>
 80017fa:	4628      	mov	r0, r5
 80017fc:	4621      	mov	r1, r4
 80017fe:	f7ff ff5d 	bl	80016bc <__sflush_r>
 8001802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001804:	07da      	lsls	r2, r3, #31
 8001806:	4605      	mov	r5, r0
 8001808:	d4e0      	bmi.n	80017cc <_fflush_r+0xc>
 800180a:	89a3      	ldrh	r3, [r4, #12]
 800180c:	059b      	lsls	r3, r3, #22
 800180e:	d4dd      	bmi.n	80017cc <_fflush_r+0xc>
 8001810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001812:	f000 f908 	bl	8001a26 <__retarget_lock_release_recursive>
 8001816:	e7d9      	b.n	80017cc <_fflush_r+0xc>
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <_fflush_r+0x70>)
 800181a:	429c      	cmp	r4, r3
 800181c:	d101      	bne.n	8001822 <_fflush_r+0x62>
 800181e:	68ac      	ldr	r4, [r5, #8]
 8001820:	e7df      	b.n	80017e2 <_fflush_r+0x22>
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <_fflush_r+0x74>)
 8001824:	429c      	cmp	r4, r3
 8001826:	bf08      	it	eq
 8001828:	68ec      	ldreq	r4, [r5, #12]
 800182a:	e7da      	b.n	80017e2 <_fflush_r+0x22>
 800182c:	08001d10 	.word	0x08001d10
 8001830:	08001d30 	.word	0x08001d30
 8001834:	08001cf0 	.word	0x08001cf0

08001838 <std>:
 8001838:	2300      	movs	r3, #0
 800183a:	b510      	push	{r4, lr}
 800183c:	4604      	mov	r4, r0
 800183e:	e9c0 3300 	strd	r3, r3, [r0]
 8001842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001846:	6083      	str	r3, [r0, #8]
 8001848:	8181      	strh	r1, [r0, #12]
 800184a:	6643      	str	r3, [r0, #100]	; 0x64
 800184c:	81c2      	strh	r2, [r0, #14]
 800184e:	6183      	str	r3, [r0, #24]
 8001850:	4619      	mov	r1, r3
 8001852:	2208      	movs	r2, #8
 8001854:	305c      	adds	r0, #92	; 0x5c
 8001856:	f7ff fd05 	bl	8001264 <memset>
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <std+0x38>)
 800185c:	6263      	str	r3, [r4, #36]	; 0x24
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <std+0x3c>)
 8001860:	62a3      	str	r3, [r4, #40]	; 0x28
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x40>)
 8001864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x44>)
 8001868:	6224      	str	r4, [r4, #32]
 800186a:	6323      	str	r3, [r4, #48]	; 0x30
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop
 8001870:	08001b0d 	.word	0x08001b0d
 8001874:	08001b2f 	.word	0x08001b2f
 8001878:	08001b67 	.word	0x08001b67
 800187c:	08001b8b 	.word	0x08001b8b

08001880 <_cleanup_r>:
 8001880:	4901      	ldr	r1, [pc, #4]	; (8001888 <_cleanup_r+0x8>)
 8001882:	f000 b8af 	b.w	80019e4 <_fwalk_reent>
 8001886:	bf00      	nop
 8001888:	080017c1 	.word	0x080017c1

0800188c <__sfmoreglue>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	2268      	movs	r2, #104	; 0x68
 8001890:	1e4d      	subs	r5, r1, #1
 8001892:	4355      	muls	r5, r2
 8001894:	460e      	mov	r6, r1
 8001896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800189a:	f7ff fd55 	bl	8001348 <_malloc_r>
 800189e:	4604      	mov	r4, r0
 80018a0:	b140      	cbz	r0, 80018b4 <__sfmoreglue+0x28>
 80018a2:	2100      	movs	r1, #0
 80018a4:	e9c0 1600 	strd	r1, r6, [r0]
 80018a8:	300c      	adds	r0, #12
 80018aa:	60a0      	str	r0, [r4, #8]
 80018ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018b0:	f7ff fcd8 	bl	8001264 <memset>
 80018b4:	4620      	mov	r0, r4
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <__sfp_lock_acquire>:
 80018b8:	4801      	ldr	r0, [pc, #4]	; (80018c0 <__sfp_lock_acquire+0x8>)
 80018ba:	f000 b8b3 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 80018be:	bf00      	nop
 80018c0:	20005105 	.word	0x20005105

080018c4 <__sfp_lock_release>:
 80018c4:	4801      	ldr	r0, [pc, #4]	; (80018cc <__sfp_lock_release+0x8>)
 80018c6:	f000 b8ae 	b.w	8001a26 <__retarget_lock_release_recursive>
 80018ca:	bf00      	nop
 80018cc:	20005105 	.word	0x20005105

080018d0 <__sinit_lock_acquire>:
 80018d0:	4801      	ldr	r0, [pc, #4]	; (80018d8 <__sinit_lock_acquire+0x8>)
 80018d2:	f000 b8a7 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 80018d6:	bf00      	nop
 80018d8:	20005106 	.word	0x20005106

080018dc <__sinit_lock_release>:
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <__sinit_lock_release+0x8>)
 80018de:	f000 b8a2 	b.w	8001a26 <__retarget_lock_release_recursive>
 80018e2:	bf00      	nop
 80018e4:	20005106 	.word	0x20005106

080018e8 <__sinit>:
 80018e8:	b510      	push	{r4, lr}
 80018ea:	4604      	mov	r4, r0
 80018ec:	f7ff fff0 	bl	80018d0 <__sinit_lock_acquire>
 80018f0:	69a3      	ldr	r3, [r4, #24]
 80018f2:	b11b      	cbz	r3, 80018fc <__sinit+0x14>
 80018f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f8:	f7ff bff0 	b.w	80018dc <__sinit_lock_release>
 80018fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001900:	6523      	str	r3, [r4, #80]	; 0x50
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <__sinit+0x68>)
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <__sinit+0x6c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	62a2      	str	r2, [r4, #40]	; 0x28
 800190a:	42a3      	cmp	r3, r4
 800190c:	bf04      	itt	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	61a3      	streq	r3, [r4, #24]
 8001912:	4620      	mov	r0, r4
 8001914:	f000 f820 	bl	8001958 <__sfp>
 8001918:	6060      	str	r0, [r4, #4]
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f81c 	bl	8001958 <__sfp>
 8001920:	60a0      	str	r0, [r4, #8]
 8001922:	4620      	mov	r0, r4
 8001924:	f000 f818 	bl	8001958 <__sfp>
 8001928:	2200      	movs	r2, #0
 800192a:	60e0      	str	r0, [r4, #12]
 800192c:	2104      	movs	r1, #4
 800192e:	6860      	ldr	r0, [r4, #4]
 8001930:	f7ff ff82 	bl	8001838 <std>
 8001934:	68a0      	ldr	r0, [r4, #8]
 8001936:	2201      	movs	r2, #1
 8001938:	2109      	movs	r1, #9
 800193a:	f7ff ff7d 	bl	8001838 <std>
 800193e:	68e0      	ldr	r0, [r4, #12]
 8001940:	2202      	movs	r2, #2
 8001942:	2112      	movs	r1, #18
 8001944:	f7ff ff78 	bl	8001838 <std>
 8001948:	2301      	movs	r3, #1
 800194a:	61a3      	str	r3, [r4, #24]
 800194c:	e7d2      	b.n	80018f4 <__sinit+0xc>
 800194e:	bf00      	nop
 8001950:	08001cec 	.word	0x08001cec
 8001954:	08001881 	.word	0x08001881

08001958 <__sfp>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	4607      	mov	r7, r0
 800195c:	f7ff ffac 	bl	80018b8 <__sfp_lock_acquire>
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <__sfp+0x84>)
 8001962:	681e      	ldr	r6, [r3, #0]
 8001964:	69b3      	ldr	r3, [r6, #24]
 8001966:	b913      	cbnz	r3, 800196e <__sfp+0x16>
 8001968:	4630      	mov	r0, r6
 800196a:	f7ff ffbd 	bl	80018e8 <__sinit>
 800196e:	3648      	adds	r6, #72	; 0x48
 8001970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001974:	3b01      	subs	r3, #1
 8001976:	d503      	bpl.n	8001980 <__sfp+0x28>
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	b30b      	cbz	r3, 80019c0 <__sfp+0x68>
 800197c:	6836      	ldr	r6, [r6, #0]
 800197e:	e7f7      	b.n	8001970 <__sfp+0x18>
 8001980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001984:	b9d5      	cbnz	r5, 80019bc <__sfp+0x64>
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <__sfp+0x88>)
 8001988:	60e3      	str	r3, [r4, #12]
 800198a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800198e:	6665      	str	r5, [r4, #100]	; 0x64
 8001990:	f000 f847 	bl	8001a22 <__retarget_lock_init_recursive>
 8001994:	f7ff ff96 	bl	80018c4 <__sfp_lock_release>
 8001998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800199c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019a0:	6025      	str	r5, [r4, #0]
 80019a2:	61a5      	str	r5, [r4, #24]
 80019a4:	2208      	movs	r2, #8
 80019a6:	4629      	mov	r1, r5
 80019a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019ac:	f7ff fc5a 	bl	8001264 <memset>
 80019b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019b8:	4620      	mov	r0, r4
 80019ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019bc:	3468      	adds	r4, #104	; 0x68
 80019be:	e7d9      	b.n	8001974 <__sfp+0x1c>
 80019c0:	2104      	movs	r1, #4
 80019c2:	4638      	mov	r0, r7
 80019c4:	f7ff ff62 	bl	800188c <__sfmoreglue>
 80019c8:	4604      	mov	r4, r0
 80019ca:	6030      	str	r0, [r6, #0]
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1d5      	bne.n	800197c <__sfp+0x24>
 80019d0:	f7ff ff78 	bl	80018c4 <__sfp_lock_release>
 80019d4:	230c      	movs	r3, #12
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	e7ee      	b.n	80019b8 <__sfp+0x60>
 80019da:	bf00      	nop
 80019dc:	08001cec 	.word	0x08001cec
 80019e0:	ffff0001 	.word	0xffff0001

080019e4 <_fwalk_reent>:
 80019e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e8:	4606      	mov	r6, r0
 80019ea:	4688      	mov	r8, r1
 80019ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019f0:	2700      	movs	r7, #0
 80019f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019f6:	f1b9 0901 	subs.w	r9, r9, #1
 80019fa:	d505      	bpl.n	8001a08 <_fwalk_reent+0x24>
 80019fc:	6824      	ldr	r4, [r4, #0]
 80019fe:	2c00      	cmp	r4, #0
 8001a00:	d1f7      	bne.n	80019f2 <_fwalk_reent+0xe>
 8001a02:	4638      	mov	r0, r7
 8001a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a08:	89ab      	ldrh	r3, [r5, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d907      	bls.n	8001a1e <_fwalk_reent+0x3a>
 8001a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a12:	3301      	adds	r3, #1
 8001a14:	d003      	beq.n	8001a1e <_fwalk_reent+0x3a>
 8001a16:	4629      	mov	r1, r5
 8001a18:	4630      	mov	r0, r6
 8001a1a:	47c0      	blx	r8
 8001a1c:	4307      	orrs	r7, r0
 8001a1e:	3568      	adds	r5, #104	; 0x68
 8001a20:	e7e9      	b.n	80019f6 <_fwalk_reent+0x12>

08001a22 <__retarget_lock_init_recursive>:
 8001a22:	4770      	bx	lr

08001a24 <__retarget_lock_acquire_recursive>:
 8001a24:	4770      	bx	lr

08001a26 <__retarget_lock_release_recursive>:
 8001a26:	4770      	bx	lr

08001a28 <__swhatbuf_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	460e      	mov	r6, r1
 8001a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a30:	2900      	cmp	r1, #0
 8001a32:	b096      	sub	sp, #88	; 0x58
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	da08      	bge.n	8001a4c <__swhatbuf_r+0x24>
 8001a3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	602a      	str	r2, [r5, #0]
 8001a42:	061a      	lsls	r2, r3, #24
 8001a44:	d410      	bmi.n	8001a68 <__swhatbuf_r+0x40>
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	e00e      	b.n	8001a6a <__swhatbuf_r+0x42>
 8001a4c:	466a      	mov	r2, sp
 8001a4e:	f000 f8c3 	bl	8001bd8 <_fstat_r>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	dbf1      	blt.n	8001a3a <__swhatbuf_r+0x12>
 8001a56:	9a01      	ldr	r2, [sp, #4]
 8001a58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a60:	425a      	negs	r2, r3
 8001a62:	415a      	adcs	r2, r3
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	e7ee      	b.n	8001a46 <__swhatbuf_r+0x1e>
 8001a68:	2340      	movs	r3, #64	; 0x40
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	b016      	add	sp, #88	; 0x58
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a74 <__smakebuf_r>:
 8001a74:	898b      	ldrh	r3, [r1, #12]
 8001a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a78:	079d      	lsls	r5, r3, #30
 8001a7a:	4606      	mov	r6, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	d507      	bpl.n	8001a90 <__smakebuf_r+0x1c>
 8001a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	6123      	str	r3, [r4, #16]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	6163      	str	r3, [r4, #20]
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	ab01      	add	r3, sp, #4
 8001a92:	466a      	mov	r2, sp
 8001a94:	f7ff ffc8 	bl	8001a28 <__swhatbuf_r>
 8001a98:	9900      	ldr	r1, [sp, #0]
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f7ff fc53 	bl	8001348 <_malloc_r>
 8001aa2:	b948      	cbnz	r0, 8001ab8 <__smakebuf_r+0x44>
 8001aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aa8:	059a      	lsls	r2, r3, #22
 8001aaa:	d4ef      	bmi.n	8001a8c <__smakebuf_r+0x18>
 8001aac:	f023 0303 	bic.w	r3, r3, #3
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	81a3      	strh	r3, [r4, #12]
 8001ab6:	e7e3      	b.n	8001a80 <__smakebuf_r+0xc>
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <__smakebuf_r+0x7c>)
 8001aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	6020      	str	r0, [r4, #0]
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	81a3      	strh	r3, [r4, #12]
 8001ac6:	9b00      	ldr	r3, [sp, #0]
 8001ac8:	6163      	str	r3, [r4, #20]
 8001aca:	9b01      	ldr	r3, [sp, #4]
 8001acc:	6120      	str	r0, [r4, #16]
 8001ace:	b15b      	cbz	r3, 8001ae8 <__smakebuf_r+0x74>
 8001ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ad4:	4630      	mov	r0, r6
 8001ad6:	f000 f891 	bl	8001bfc <_isatty_r>
 8001ada:	b128      	cbz	r0, 8001ae8 <__smakebuf_r+0x74>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	89a0      	ldrh	r0, [r4, #12]
 8001aea:	4305      	orrs	r5, r0
 8001aec:	81a5      	strh	r5, [r4, #12]
 8001aee:	e7cd      	b.n	8001a8c <__smakebuf_r+0x18>
 8001af0:	08001881 	.word	0x08001881

08001af4 <__malloc_lock>:
 8001af4:	4801      	ldr	r0, [pc, #4]	; (8001afc <__malloc_lock+0x8>)
 8001af6:	f7ff bf95 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 8001afa:	bf00      	nop
 8001afc:	20005104 	.word	0x20005104

08001b00 <__malloc_unlock>:
 8001b00:	4801      	ldr	r0, [pc, #4]	; (8001b08 <__malloc_unlock+0x8>)
 8001b02:	f7ff bf90 	b.w	8001a26 <__retarget_lock_release_recursive>
 8001b06:	bf00      	nop
 8001b08:	20005104 	.word	0x20005104

08001b0c <__sread>:
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	460c      	mov	r4, r1
 8001b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b14:	f000 f894 	bl	8001c40 <_read_r>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	bfab      	itete	ge
 8001b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b20:	181b      	addge	r3, r3, r0
 8001b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b26:	bfac      	ite	ge
 8001b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b2a:	81a3      	strhlt	r3, [r4, #12]
 8001b2c:	bd10      	pop	{r4, pc}

08001b2e <__swrite>:
 8001b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b32:	461f      	mov	r7, r3
 8001b34:	898b      	ldrh	r3, [r1, #12]
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	4605      	mov	r5, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	4616      	mov	r6, r2
 8001b3e:	d505      	bpl.n	8001b4c <__swrite+0x1e>
 8001b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b44:	2302      	movs	r3, #2
 8001b46:	2200      	movs	r2, #0
 8001b48:	f000 f868 	bl	8001c1c <_lseek_r>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	4632      	mov	r2, r6
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b62:	f000 b817 	b.w	8001b94 <_write_r>

08001b66 <__sseek>:
 8001b66:	b510      	push	{r4, lr}
 8001b68:	460c      	mov	r4, r1
 8001b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b6e:	f000 f855 	bl	8001c1c <_lseek_r>
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	bf15      	itete	ne
 8001b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b82:	81a3      	strheq	r3, [r4, #12]
 8001b84:	bf18      	it	ne
 8001b86:	81a3      	strhne	r3, [r4, #12]
 8001b88:	bd10      	pop	{r4, pc}

08001b8a <__sclose>:
 8001b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b8e:	f000 b813 	b.w	8001bb8 <_close_r>
	...

08001b94 <_write_r>:
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	4d07      	ldr	r5, [pc, #28]	; (8001bb4 <_write_r+0x20>)
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	602a      	str	r2, [r5, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f7fe fff2 	bl	8000b8c <_write>
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d102      	bne.n	8001bb2 <_write_r+0x1e>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	b103      	cbz	r3, 8001bb2 <_write_r+0x1e>
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	20005108 	.word	0x20005108

08001bb8 <_close_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d06      	ldr	r5, [pc, #24]	; (8001bd4 <_close_r+0x1c>)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	f7fe fffe 	bl	8000bc4 <_close>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_close_r+0x1a>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_close_r+0x1a>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	20005108 	.word	0x20005108

08001bd8 <_fstat_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4d07      	ldr	r5, [pc, #28]	; (8001bf8 <_fstat_r+0x20>)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	602b      	str	r3, [r5, #0]
 8001be6:	f7fe fff8 	bl	8000bda <_fstat>
 8001bea:	1c43      	adds	r3, r0, #1
 8001bec:	d102      	bne.n	8001bf4 <_fstat_r+0x1c>
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	b103      	cbz	r3, 8001bf4 <_fstat_r+0x1c>
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20005108 	.word	0x20005108

08001bfc <_isatty_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4d06      	ldr	r5, [pc, #24]	; (8001c18 <_isatty_r+0x1c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	602b      	str	r3, [r5, #0]
 8001c08:	f7fe fff6 	bl	8000bf8 <_isatty>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_isatty_r+0x1a>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_isatty_r+0x1a>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20005108 	.word	0x20005108

08001c1c <_lseek_r>:
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	4d07      	ldr	r5, [pc, #28]	; (8001c3c <_lseek_r+0x20>)
 8001c20:	4604      	mov	r4, r0
 8001c22:	4608      	mov	r0, r1
 8001c24:	4611      	mov	r1, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	602a      	str	r2, [r5, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7fe ffee 	bl	8000c0c <_lseek>
 8001c30:	1c43      	adds	r3, r0, #1
 8001c32:	d102      	bne.n	8001c3a <_lseek_r+0x1e>
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	b103      	cbz	r3, 8001c3a <_lseek_r+0x1e>
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	20005108 	.word	0x20005108

08001c40 <_read_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4d07      	ldr	r5, [pc, #28]	; (8001c60 <_read_r+0x20>)
 8001c44:	4604      	mov	r4, r0
 8001c46:	4608      	mov	r0, r1
 8001c48:	4611      	mov	r1, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	602a      	str	r2, [r5, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7fe ff7f 	bl	8000b52 <_read>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_read_r+0x1e>
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_read_r+0x1e>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	20005108 	.word	0x20005108

08001c64 <_init>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	bf00      	nop
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr

08001c70 <_fini>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	bf00      	nop
 8001c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c76:	bc08      	pop	{r3}
 8001c78:	469e      	mov	lr, r3
 8001c7a:	4770      	bx	lr
