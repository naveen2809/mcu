
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004204  08004204  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004204  08004204  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000000f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004cae  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001151  00000000  00000000  00024d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000510  00000000  00000000  00025ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000438  00000000  00000000  000263d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003223  00000000  00000000  00026808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ded  00000000  00000000  00029a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ed4f  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003f567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b1c  00000000  00000000  0003f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800405c 	.word	0x0800405c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800405c 	.word	0x0800405c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000ac 	.word	0x200000ac

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f002 fe0b 	bl	8002eec <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fe60 	bl	8001fac <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 ffdd 	bl	80012ac <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f001 fa1b 	bl	800172e <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000ac 	.word	0x200000ac
 8000300:	200000b0 	.word	0x200000b0

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 fdeb 	bl	8002eec <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 fe48 	bl	8001fac <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f001 fa26 	bl	8001772 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f001 fa21 	bl	8001772 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f001 fa81 	bl	800183c <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f001 fa7c 	bl	800183c <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f001 fab0 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f001 faab 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f001 faec 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f001 fae7 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f001 fabe 	bl	80018f2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f001 fab9 	bl	80018f2 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fe07 	bl	8001fac <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 faeb 	bl	8001982 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fbfc 	bl	8001bb0 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fb36 	bl	8001a2e <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fd83 	bl	8002eec <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f001 fde0 	bl	8001fac <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f001 f9be 	bl	8001772 <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f001 f9b9 	bl	8001772 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f001 fa19 	bl	800183c <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f001 fa14 	bl	800183c <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f001 fa48 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f001 fa43 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f001 fa84 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f001 fa7f 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f001 fa56 	bl	80018f2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f001 fa51 	bl	80018f2 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fd9f 	bl	8001fac <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fa83 	bl	8001982 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fb94 	bl	8001bb0 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f001 face 	bl	8001a2e <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fceb 	bl	8001e8c <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <check_sensor_response>:
#include "gpio_driver.h"
#include "common_utils.h"
#include "dht11_driver.h"

uint8_t check_sensor_response(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t sample[2];

	//Read First Sample
	delay_us(40);
 80004c6:	2028      	movs	r0, #40	; 0x28
 80004c8:	f7ff fee2 	bl	8000290 <delay_us>
	sample[0] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80004cc:	2107      	movs	r1, #7
 80004ce:	4811      	ldr	r0, [pc, #68]	; (8000514 <check_sensor_response+0x54>)
 80004d0:	f001 f973 	bl	80017ba <GPIOReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	713b      	strb	r3, [r7, #4]

	//Read Second Sample
	delay_us(80);
 80004d8:	2050      	movs	r0, #80	; 0x50
 80004da:	f7ff fed9 	bl	8000290 <delay_us>
	sample[1] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80004de:	2107      	movs	r1, #7
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <check_sensor_response+0x54>)
 80004e2:	f001 f96a 	bl	80017ba <GPIOReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	717b      	strb	r3, [r7, #5]

	//Wait till the end of the response
	while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80004ea:	bf00      	nop
 80004ec:	2107      	movs	r1, #7
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <check_sensor_response+0x54>)
 80004f0:	f001 f963 	bl	80017ba <GPIOReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f8      	bne.n	80004ec <check_sensor_response+0x2c>

	if(sample[0]==GPIO_LOW && sample[1]==GPIO_HIGH)
 80004fa:	793b      	ldrb	r3, [r7, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d104      	bne.n	800050a <check_sensor_response+0x4a>
 8000500:	797b      	ldrb	r3, [r7, #5]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d101      	bne.n	800050a <check_sensor_response+0x4a>
	{
		return 1;
 8000506:	2301      	movs	r3, #1
 8000508:	e000      	b.n	800050c <check_sensor_response+0x4c>
	}
	else
	{
		return 0;
 800050a:	2300      	movs	r3, #0
	}
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <read_dht11_sensor>:

uint8_t read_dht11_sensor(uint8_t *data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t sensor_response;
	uint8_t current_bit;
	uint8_t i;

	//GPIO Configuration for Sensor Data Pin
	EnablePeriClk(DHT11_SENSOR_PORT);
 8000520:	4840      	ldr	r0, [pc, #256]	; (8000624 <read_dht11_sensor+0x10c>)
 8000522:	f001 fd43 	bl	8001fac <EnablePeriClk>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_OUTPUT);
 8000526:	2201      	movs	r2, #1
 8000528:	2107      	movs	r1, #7
 800052a:	483e      	ldr	r0, [pc, #248]	; (8000624 <read_dht11_sensor+0x10c>)
 800052c:	f001 f921 	bl	8001772 <GPIOSetMode>
	GPIOSetOutputType(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPTYPE_OD);
 8000530:	2201      	movs	r2, #1
 8000532:	2107      	movs	r1, #7
 8000534:	483b      	ldr	r0, [pc, #236]	; (8000624 <read_dht11_sensor+0x10c>)
 8000536:	f001 f9ba 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputSpeed(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPSPEED_HIGH);
 800053a:	2202      	movs	r2, #2
 800053c:	2107      	movs	r1, #7
 800053e:	4839      	ldr	r0, [pc, #228]	; (8000624 <read_dht11_sensor+0x10c>)
 8000540:	f001 f9fb 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_PULL_UP);
 8000544:	2201      	movs	r2, #1
 8000546:	2107      	movs	r1, #7
 8000548:	4836      	ldr	r0, [pc, #216]	; (8000624 <read_dht11_sensor+0x10c>)
 800054a:	f001 f9d2 	bl	80018f2 <GPIOSetPullUpDownConfig>

	//Triggering the Sensor
	delay_us(18000);
 800054e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000552:	f7ff fe9d 	bl	8000290 <delay_us>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_INPUT);
 8000556:	2200      	movs	r2, #0
 8000558:	2107      	movs	r1, #7
 800055a:	4832      	ldr	r0, [pc, #200]	; (8000624 <read_dht11_sensor+0x10c>)
 800055c:	f001 f909 	bl	8001772 <GPIOSetMode>

	//Checking for Sensor Response
	sensor_response = check_sensor_response();
 8000560:	f7ff ffae 	bl	80004c0 <check_sensor_response>
 8000564:	4603      	mov	r3, r0
 8000566:	73bb      	strb	r3, [r7, #14]

	//Reading the Sensor Data
	if(sensor_response == 1)
 8000568:	7bbb      	ldrb	r3, [r7, #14]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d155      	bne.n	800061a <read_dht11_sensor+0x102>
	{
		for(i=0;i<40;i++)
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	e04f      	b.n	8000614 <read_dht11_sensor+0xfc>
		{
			while(!(GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 8000574:	bf00      	nop
 8000576:	2107      	movs	r1, #7
 8000578:	482a      	ldr	r0, [pc, #168]	; (8000624 <read_dht11_sensor+0x10c>)
 800057a:	f001 f91e 	bl	80017ba <GPIOReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f8      	beq.n	8000576 <read_dht11_sensor+0x5e>
			delay_us(40);
 8000584:	2028      	movs	r0, #40	; 0x28
 8000586:	f7ff fe83 	bl	8000290 <delay_us>
			current_bit = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 800058a:	2107      	movs	r1, #7
 800058c:	4825      	ldr	r0, [pc, #148]	; (8000624 <read_dht11_sensor+0x10c>)
 800058e:	f001 f914 	bl	80017ba <GPIOReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	737b      	strb	r3, [r7, #13]
			if(current_bit == GPIO_HIGH)
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d117      	bne.n	80005cc <read_dht11_sensor+0xb4>
			{
				data[(i/8)] |= (1 << (7-(i%8)));
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	08db      	lsrs	r3, r3, #3
 80005a0:	b2d8      	uxtb	r0, r3
 80005a2:	4602      	mov	r2, r0
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25a      	sxtb	r2, r3
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	43db      	mvns	r3, r3
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25a      	sxtb	r2, r3
 80005c0:	4601      	mov	r1, r0
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	440b      	add	r3, r1
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e018      	b.n	80005fe <read_dht11_sensor+0xe6>
			}
			else
			{
				data[(i/8)] &= ~(1 << (7-(i%8)));
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	b2d8      	uxtb	r0, r3
 80005d2:	4602      	mov	r2, r0
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	43db      	mvns	r3, r3
 80005e0:	f003 0307 	and.w	r3, r3, #7
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4013      	ands	r3, r2
 80005f2:	b25a      	sxtb	r2, r3
 80005f4:	4601      	mov	r1, r0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	440b      	add	r3, r1
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	701a      	strb	r2, [r3, #0]
			}
			while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80005fe:	bf00      	nop
 8000600:	2107      	movs	r1, #7
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <read_dht11_sensor+0x10c>)
 8000604:	f001 f8d9 	bl	80017ba <GPIOReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f8      	bne.n	8000600 <read_dht11_sensor+0xe8>
		for(i=0;i<40;i++)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b27      	cmp	r3, #39	; 0x27
 8000618:	d9ac      	bls.n	8000574 <read_dht11_sensor+0x5c>
		}
	}

	return sensor_response;
 800061a:	7bbb      	ldrb	r3, [r7, #14]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <RTC_DS3231_Config_Calendar>:

static void format_dow(struct Date *date,char *dow);
static void format_mon(struct Date *date,char *mon);

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2204      	movs	r2, #4
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc57 	bl	8002eec <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25a      	sxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	78db      	ldrb	r3, [r3, #3]
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	b25b      	sxtb	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b25b      	sxtb	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	799b      	ldrb	r3, [r3, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d111      	bne.n	8000696 <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	b25a      	sxtb	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	b25b      	sxtb	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b25a      	sxtb	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	019b      	lsls	r3, r3, #6
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b25b      	sxtb	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73bb      	strb	r3, [r7, #14]
 8000694:	e01a      	b.n	80006cc <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	799b      	ldrb	r3, [r3, #6]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d116      	bne.n	80006cc <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	b25a      	sxtb	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	015b      	lsls	r3, r3, #5
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 80006cc:	2300      	movs	r3, #0
 80006ce:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 80006d0:	7b3b      	ldrb	r3, [r7, #12]
 80006d2:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 80006d4:	7b7b      	ldrb	r3, [r7, #13]
 80006d6:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <RTC_DS3231_Config_Calendar+0x154>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <RTC_DS3231_Config_Calendar+0x158>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f107 0110 	add.w	r1, r7, #16
 80006e8:	2204      	movs	r2, #4
 80006ea:	f001 f9b1 	bl	8001a50 <I2CMasterSendData>
	delay_us(2000);
 80006ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f2:	f7ff fdcd 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2204      	movs	r2, #4
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fbf4 	bl	8002eec <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7b9b      	ldrb	r3, [r3, #14]
 8000708:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a1b      	ldrb	r3, [r3, #8]
 800070e:	b25a      	sxtb	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a5b      	ldrb	r3, [r3, #9]
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a9b      	ldrb	r3, [r3, #10]
 8000724:	b25a      	sxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7adb      	ldrb	r3, [r3, #11]
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b25b      	sxtb	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7b1b      	ldrb	r3, [r3, #12]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b5b      	ldrb	r3, [r3, #13]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	b25b      	sxtb	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 800074c:	2303      	movs	r3, #3
 800074e:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 8000754:	7a3b      	ldrb	r3, [r7, #8]
 8000756:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 8000758:	7a7b      	ldrb	r3, [r7, #9]
 800075a:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 800075c:	7abb      	ldrb	r3, [r7, #10]
 800075e:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <RTC_DS3231_Config_Calendar+0x154>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <RTC_DS3231_Config_Calendar+0x158>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f107 0110 	add.w	r1, r7, #16
 800076c:	2205      	movs	r2, #5
 800076e:	f001 f96f 	bl	8001a50 <I2CMasterSendData>

	return;
 8000772:	bf00      	nop
}
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008
 8000780:	2000000c 	.word	0x2000000c

08000784 <RTC_DS3231_Read_Calendar>:

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af02      	add	r7, sp, #8
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,RxBuf,7,0, SlaveAddressRTC);
 800078e:	4b63      	ldr	r3, [pc, #396]	; (800091c <RTC_DS3231_Read_Calendar+0x198>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	4b63      	ldr	r3, [pc, #396]	; (8000920 <RTC_DS3231_Read_Calendar+0x19c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	2207      	movs	r2, #7
 80007a0:	f001 fa38 	bl	8001c14 <I2CMaster_DS3231_RTC_Read>

	time->seconds = ((RxBuf[0] >> DS3231_RTC_TR_ST) & 0x7)*10 + ((RxBuf[0] >> DS3231_RTC_TR_SU) & 0xF);
 80007a4:	7a3b      	ldrb	r3, [r7, #8]
 80007a6:	091b      	lsrs	r3, r3, #4
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	7a3b      	ldrb	r3, [r7, #8]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4413      	add	r3, r2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
	time->minutes = ((RxBuf[1] >> DS3231_RTC_TR_MNT) & 0x7)*10 + ((RxBuf[1] >> DS3231_RTC_TR_MNU) & 0xF);
 80007ca:	7a7b      	ldrb	r3, [r7, #9]
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	4413      	add	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	7a7b      	ldrb	r3, [r7, #9]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4413      	add	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	705a      	strb	r2, [r3, #1]
	if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)     //24 Hour Format
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d120      	bne.n	8000842 <RTC_DS3231_Read_Calendar+0xbe>
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x3)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000800:	7abb      	ldrb	r3, [r7, #10]
 8000802:	091b      	lsrs	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	7abb      	ldrb	r3, [r7, #10]
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4413      	add	r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	b25a      	sxtb	r2, r3
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	709a      	strb	r2, [r3, #2]
 8000840:	e02c      	b.n	800089c <RTC_DS3231_Read_Calendar+0x118>
	}
	else   //12 Hour Format
	{
		time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x1)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000842:	7abb      	ldrb	r3, [r7, #10]
 8000844:	091b      	lsrs	r3, r3, #4
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b2da      	uxtb	r2, r3
 8000858:	7abb      	ldrb	r3, [r7, #10]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_AMPM));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	b25a      	sxtb	r2, r3
 800086e:	7abb      	ldrb	r3, [r7, #10]
 8000870:	b25b      	sxtb	r3, r3
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	b25b      	sxtb	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b25b      	sxtb	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	709a      	strb	r2, [r3, #2]
		time->hours |= (RxBuf[2] & (1 << DS3231_RTC_TR_HOUR_FORMAT));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	b25a      	sxtb	r2, r3
 8000888:	7abb      	ldrb	r3, [r7, #10]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	709a      	strb	r2, [r3, #2]
	}

	date->dayofweek = (RxBuf[3] & 0x7);
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	70da      	strb	r2, [r3, #3]
	date->date = ((RxBuf[4] >> DS3231_RTC_DR_DT) & 0x3)*10 + ((RxBuf[4] >> DS3231_RTC_DR_DU) & 0xF);
 80008a8:	7b3b      	ldrb	r3, [r7, #12]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	7b3b      	ldrb	r3, [r7, #12]
 80008c0:	f003 030f 	and.w	r3, r3, #15
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	701a      	strb	r2, [r3, #0]
	date->month = ((RxBuf[5] >> DS3231_RTC_DR_MT) & 0x1)*10 + ((RxBuf[5] >> DS3231_RTC_DR_MU) & 0xF);
 80008ce:	7b7b      	ldrb	r3, [r7, #13]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	4413      	add	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	705a      	strb	r2, [r3, #1]
	date->year = ((RxBuf[6] >> DS3231_RTC_DR_YT) & 0xF)*10 + ((RxBuf[6] >> DS3231_RTC_DR_YU) & 0xF);
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b2da      	uxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	709a      	strb	r2, [r3, #2]

	return;
 8000914:	bf00      	nop
}
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000008 	.word	0x20000008
 8000920:	2000000c 	.word	0x2000000c

08000924 <RTC_DS3231_Display_Calendar_LCD>:

void RTC_DS3231_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af02      	add	r7, sp, #8
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(ds3231_display_count == 0)
 800092e:	4b87      	ldr	r3, [pc, #540]	; (8000b4c <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	f040 809c 	bne.w	8000a70 <RTC_DS3231_Display_Calendar_LCD+0x14c>
	{
		memset(&saved_time,0,sizeof(struct Time));
 8000938:	2204      	movs	r2, #4
 800093a:	2100      	movs	r1, #0
 800093c:	4884      	ldr	r0, [pc, #528]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 800093e:	f002 fad5 	bl	8002eec <memset>
		memset(&saved_date,0,sizeof(struct Date));
 8000942:	2204      	movs	r2, #4
 8000944:	2100      	movs	r1, #0
 8000946:	4883      	ldr	r0, [pc, #524]	; (8000b54 <RTC_DS3231_Display_Calendar_LCD+0x230>)
 8000948:	f002 fad0 	bl	8002eec <memset>

		//Print the Time Information
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)      //24 Hour Format
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	099b      	lsrs	r3, r3, #6
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d117      	bne.n	800098c <RTC_DS3231_Display_Calendar_LCD+0x68>
		{
			lcd_pcf8574_clear_screen();
 800095c:	f001 fac8 	bl	8001ef0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8000960:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000964:	f7ff fc94 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000968:	f001 fac9 	bl	8001efe <lcd_pcf8574_return_home>
			delay_us(3000);
 800096c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000970:	f7ff fc8e 	bl	8000290 <delay_us>
			printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	4619      	mov	r1, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	461a      	mov	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4874      	ldr	r0, [pc, #464]	; (8000b58 <RTC_DS3231_Display_Calendar_LCD+0x234>)
 8000986:	f002 fb97 	bl	80030b8 <iprintf>
 800098a:	e02c      	b.n	80009e6 <RTC_DS3231_Display_Calendar_LCD+0xc2>
		}
		else  //12 Hour Format
		{
			lcd_pcf8574_clear_screen();
 800098c:	f001 fab0 	bl	8001ef0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8000990:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000994:	f7ff fc7c 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8000998:	f001 fab1 	bl	8001efe <lcd_pcf8574_return_home>
			delay_us(3000);
 800099c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a0:	f7ff fc76 	bl	8000290 <delay_us>
			if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)		//AM
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10c      	bne.n	80009ce <RTC_DS3231_Display_Calendar_LCD+0xaa>
			{
				printf("   %02d:%02d:%02d AM",(time->hours & 0xF),time->minutes,time->seconds);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	f003 010f 	and.w	r1, r3, #15
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	461a      	mov	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4865      	ldr	r0, [pc, #404]	; (8000b5c <RTC_DS3231_Display_Calendar_LCD+0x238>)
 80009c8:	f002 fb76 	bl	80030b8 <iprintf>
 80009cc:	e00b      	b.n	80009e6 <RTC_DS3231_Display_Calendar_LCD+0xc2>
			}
			else
			{
				printf("   %02d:%02d:%02d PM",(time->hours & 0xF),time->minutes,time->seconds);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	789b      	ldrb	r3, [r3, #2]
 80009d2:	f003 010f 	and.w	r1, r3, #15
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	785b      	ldrb	r3, [r3, #1]
 80009da:	461a      	mov	r2, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	485f      	ldr	r0, [pc, #380]	; (8000b60 <RTC_DS3231_Display_Calendar_LCD+0x23c>)
 80009e2:	f002 fb69 	bl	80030b8 <iprintf>
			}
		}

		//Saving the time information
		saved_time.seconds = time->seconds;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009ec:	701a      	strb	r2, [r3, #0]
		saved_time.minutes = time->minutes;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	785a      	ldrb	r2, [r3, #1]
 80009f2:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009f4:	705a      	strb	r2, [r3, #1]
		saved_time.hours = time->hours;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	789a      	ldrb	r2, [r3, #2]
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 80009fc:	709a      	strb	r2, [r3, #2]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2001      	movs	r0, #1
 8000a02:	f001 fa83 	bl	8001f0c <lcd_pcf8574_set_position>
		delay_us(3000);
 8000a06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a0a:	f7ff fc41 	bl	8000290 <delay_us>
		format_dow(date,dow);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 fa8f 	bl	8000f38 <format_dow>
		format_mon(date,mon);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 fadd 	bl	8000fe0 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	461a      	mov	r2, r3
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	f107 010c 	add.w	r1, r7, #12
 8000a3a:	9200      	str	r2, [sp, #0]
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	4849      	ldr	r0, [pc, #292]	; (8000b64 <RTC_DS3231_Display_Calendar_LCD+0x240>)
 8000a40:	f002 fb3a 	bl	80030b8 <iprintf>

		//Saving the date information
		saved_date.date = date->date;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <RTC_DS3231_Display_Calendar_LCD+0x230>)
 8000a4a:	701a      	strb	r2, [r3, #0]
		saved_date.month = date->month;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	785a      	ldrb	r2, [r3, #1]
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <RTC_DS3231_Display_Calendar_LCD+0x230>)
 8000a52:	705a      	strb	r2, [r3, #1]
		saved_date.year = date->year;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	789a      	ldrb	r2, [r3, #2]
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <RTC_DS3231_Display_Calendar_LCD+0x230>)
 8000a5a:	709a      	strb	r2, [r3, #2]
		saved_date.dayofweek = date->dayofweek;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	78da      	ldrb	r2, [r3, #3]
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <RTC_DS3231_Display_Calendar_LCD+0x230>)
 8000a62:	70da      	strb	r2, [r3, #3]

		//Update count value
		ds3231_display_count++;
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <RTC_DS3231_Display_Calendar_LCD+0x228>)
 8000a6c:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 8000a6e:	e128      	b.n	8000cc2 <RTC_DS3231_Display_Calendar_LCD+0x39e>
		if(((time->hours >> DS3231_RTC_TR_HOUR_FORMAT) & 0x1) == 0)   //24 Hour Format
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d148      	bne.n	8000b12 <RTC_DS3231_Display_Calendar_LCD+0x1ee>
			if(saved_time.seconds != time->seconds)
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d011      	beq.n	8000ab0 <RTC_DS3231_Display_Calendar_LCD+0x18c>
				lcd_pcf8574_set_position(0,10);
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f001 fa3c 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f7ff fbfa 	bl	8000290 <delay_us>
				printf("%02d",time->seconds);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4831      	ldr	r0, [pc, #196]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 8000aa4:	f002 fb08 	bl	80030b8 <iprintf>
				saved_time.seconds = time->seconds;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000aae:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d011      	beq.n	8000ae0 <RTC_DS3231_Display_Calendar_LCD+0x1bc>
				lcd_pcf8574_set_position(0,7);
 8000abc:	2107      	movs	r1, #7
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f001 fa24 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fbe2 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 8000ad4:	f002 faf0 	bl	80030b8 <iprintf>
				saved_time.minutes = time->minutes;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	785a      	ldrb	r2, [r3, #1]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000ade:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000ae2:	789a      	ldrb	r2, [r3, #2]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	789b      	ldrb	r3, [r3, #2]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d07d      	beq.n	8000be8 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,4);
 8000aec:	2104      	movs	r1, #4
 8000aee:	2000      	movs	r0, #0
 8000af0:	f001 fa0c 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f7ff fbca 	bl	8000290 <delay_us>
				printf("%02d",time->hours);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4819      	ldr	r0, [pc, #100]	; (8000b68 <RTC_DS3231_Display_Calendar_LCD+0x244>)
 8000b04:	f002 fad8 	bl	80030b8 <iprintf>
				saved_time.hours = time->hours;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	789a      	ldrb	r2, [r3, #2]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000b0e:	709a      	strb	r2, [r3, #2]
 8000b10:	e06a      	b.n	8000be8 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
			if(saved_time.seconds != time->seconds)
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <RTC_DS3231_Display_Calendar_LCD+0x22c>)
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d032      	beq.n	8000b84 <RTC_DS3231_Display_Calendar_LCD+0x260>
				lcd_pcf8574_set_position(0,9);
 8000b1e:	2109      	movs	r1, #9
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f9f3 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2a:	f7ff fbb1 	bl	8000290 <delay_us>
				if(((time->hours >> DS3231_RTC_TR_AMPM) & 0x1) == 0)    //AM
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d118      	bne.n	8000b70 <RTC_DS3231_Display_Calendar_LCD+0x24c>
					printf("%02d AM",time->seconds);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <RTC_DS3231_Display_Calendar_LCD+0x248>)
 8000b46:	f002 fab7 	bl	80030b8 <iprintf>
 8000b4a:	e017      	b.n	8000b7c <RTC_DS3231_Display_Calendar_LCD+0x258>
 8000b4c:	200000e0 	.word	0x200000e0
 8000b50:	200000dc 	.word	0x200000dc
 8000b54:	200000d8 	.word	0x200000d8
 8000b58:	08004074 	.word	0x08004074
 8000b5c:	08004088 	.word	0x08004088
 8000b60:	080040a0 	.word	0x080040a0
 8000b64:	080040b8 	.word	0x080040b8
 8000b68:	080040cc 	.word	0x080040cc
 8000b6c:	080040d4 	.word	0x080040d4
					printf("%02d PM",time->seconds);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4855      	ldr	r0, [pc, #340]	; (8000ccc <RTC_DS3231_Display_Calendar_LCD+0x3a8>)
 8000b78:	f002 fa9e 	bl	80030b8 <iprintf>
				saved_time.seconds = time->seconds;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000b82:	701a      	strb	r2, [r3, #0]
			if(saved_time.minutes != time->minutes)
 8000b84:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000b86:	785a      	ldrb	r2, [r3, #1]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	785b      	ldrb	r3, [r3, #1]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d011      	beq.n	8000bb4 <RTC_DS3231_Display_Calendar_LCD+0x290>
				lcd_pcf8574_set_position(0,6);
 8000b90:	2106      	movs	r1, #6
 8000b92:	2000      	movs	r0, #0
 8000b94:	f001 f9ba 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9c:	f7ff fb78 	bl	8000290 <delay_us>
				printf("%02d",time->minutes);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	484b      	ldr	r0, [pc, #300]	; (8000cd4 <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000ba8:	f002 fa86 	bl	80030b8 <iprintf>
				saved_time.minutes = time->minutes;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	785a      	ldrb	r2, [r3, #1]
 8000bb0:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000bb2:	705a      	strb	r2, [r3, #1]
			if(saved_time.hours != time->hours)
 8000bb4:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000bb6:	789a      	ldrb	r2, [r3, #2]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d013      	beq.n	8000be8 <RTC_DS3231_Display_Calendar_LCD+0x2c4>
				lcd_pcf8574_set_position(0,3);
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f001 f9a2 	bl	8001f0c <lcd_pcf8574_set_position>
				delay_us(500);
 8000bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bcc:	f7ff fb60 	bl	8000290 <delay_us>
				printf("%02d",(time->hours & 0xF));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	4619      	mov	r1, r3
 8000bda:	483e      	ldr	r0, [pc, #248]	; (8000cd4 <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000bdc:	f002 fa6c 	bl	80030b8 <iprintf>
				saved_time.hours = time->hours;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	789a      	ldrb	r2, [r3, #2]
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <RTC_DS3231_Display_Calendar_LCD+0x3ac>)
 8000be6:	709a      	strb	r2, [r3, #2]
		if(saved_date.date != date->date)
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d011      	beq.n	8000c18 <RTC_DS3231_Display_Calendar_LCD+0x2f4>
			lcd_pcf8574_set_position(1,6);
 8000bf4:	2106      	movs	r1, #6
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f001 f988 	bl	8001f0c <lcd_pcf8574_set_position>
			delay_us(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f7ff fb46 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000c0c:	f002 fa54 	bl	80030b8 <iprintf>
			saved_date.date = date->date;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c16:	701a      	strb	r2, [r3, #0]
		if(saved_date.month != date->month)
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c1a:	785a      	ldrb	r2, [r3, #1]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d017      	beq.n	8000c54 <RTC_DS3231_Display_Calendar_LCD+0x330>
			lcd_pcf8574_set_position(1,9);
 8000c24:	2109      	movs	r1, #9
 8000c26:	2001      	movs	r0, #1
 8000c28:	f001 f970 	bl	8001f0c <lcd_pcf8574_set_position>
			delay_us(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c30:	f7ff fb2e 	bl	8000290 <delay_us>
			format_mon(date,mon);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f9d0 	bl	8000fe0 <format_mon>
			printf("%s",mon);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	4825      	ldr	r0, [pc, #148]	; (8000cdc <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000c48:	f002 fa36 	bl	80030b8 <iprintf>
			saved_date.month = date->month;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	785a      	ldrb	r2, [r3, #1]
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c52:	705a      	strb	r2, [r3, #1]
		if(saved_date.year != date->year)
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c56:	789a      	ldrb	r2, [r3, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d011      	beq.n	8000c84 <RTC_DS3231_Display_Calendar_LCD+0x360>
			lcd_pcf8574_set_position(1,13);
 8000c60:	210d      	movs	r1, #13
 8000c62:	2001      	movs	r0, #1
 8000c64:	f001 f952 	bl	8001f0c <lcd_pcf8574_set_position>
			delay_us(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6c:	f7ff fb10 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <RTC_DS3231_Display_Calendar_LCD+0x3b0>)
 8000c78:	f002 fa1e 	bl	80030b8 <iprintf>
			saved_date.year = date->year;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	789a      	ldrb	r2, [r3, #2]
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c82:	709a      	strb	r2, [r3, #2]
		if(saved_date.dayofweek != date->dayofweek)
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000c86:	78da      	ldrb	r2, [r3, #3]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d018      	beq.n	8000cc2 <RTC_DS3231_Display_Calendar_LCD+0x39e>
			lcd_pcf8574_set_position(1,2);
 8000c90:	2102      	movs	r1, #2
 8000c92:	2001      	movs	r0, #1
 8000c94:	f001 f93a 	bl	8001f0c <lcd_pcf8574_set_position>
			delay_us(500);
 8000c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9c:	f7ff faf8 	bl	8000290 <delay_us>
			format_dow(date,dow);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f946 	bl	8000f38 <format_dow>
			printf("%s",dow);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <RTC_DS3231_Display_Calendar_LCD+0x3b8>)
 8000cb4:	f002 fa00 	bl	80030b8 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	78da      	ldrb	r2, [r3, #3]
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <RTC_DS3231_Display_Calendar_LCD+0x3b4>)
 8000cbe:	70da      	strb	r2, [r3, #3]
	return;
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
}
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	080040dc 	.word	0x080040dc
 8000cd0:	200000dc 	.word	0x200000dc
 8000cd4:	080040cc 	.word	0x080040cc
 8000cd8:	200000d8 	.word	0x200000d8
 8000cdc:	080040e4 	.word	0x080040e4

08000ce0 <RTC_DS3231_Config_Alarm>:

void RTC_DS3231_Config_Alarm(struct RTC_DS3231_AlarmConfig_t *pRTCAlarmConfig)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	uint8_t seconds, minutes, hours, date, control_register;

	seconds = (pRTCAlarmConfig->RTCAlarmSecondsUnits << DS3231_RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << DS3231_RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << DS3231_RTC_ALRMR_MSK1);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	785b      	ldrb	r3, [r3, #1]
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	78db      	ldrb	r3, [r3, #3]
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	757b      	strb	r3, [r7, #21]
	minutes = (pRTCAlarmConfig->RTCAlarmMinutesUnits << DS3231_RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << DS3231_RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << DS3231_RTC_ALRMR_MSK2);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	799b      	ldrb	r3, [r3, #6]
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	753b      	strb	r3, [r7, #20]

	if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_24)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7a5b      	ldrb	r3, [r3, #9]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d116      	bne.n	8000d5e <RTC_DS3231_Config_Alarm+0x7e>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	79db      	ldrb	r3, [r3, #7]
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7a5b      	ldrb	r3, [r3, #9]
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7adb      	ldrb	r3, [r3, #11]
 8000d52:	01db      	lsls	r3, r3, #7
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	75fb      	strb	r3, [r7, #23]
 8000d5c:	e01f      	b.n	8000d9e <RTC_DS3231_Config_Alarm+0xbe>
	}
	else if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_12)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a5b      	ldrb	r3, [r3, #9]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d11b      	bne.n	8000d9e <RTC_DS3231_Config_Alarm+0xbe>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << DS3231_RTC_ALRMR_AMPM) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	79db      	ldrb	r3, [r3, #7]
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7a1b      	ldrb	r3, [r3, #8]
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b25a      	sxtb	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7a9b      	ldrb	r3, [r3, #10]
 8000d7c:	015b      	lsls	r3, r3, #5
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7adb      	ldrb	r3, [r3, #11]
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	75fb      	strb	r3, [r7, #23]
	}

	if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_NO)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7bdb      	ldrb	r3, [r3, #15]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d110      	bne.n	8000dc8 <RTC_DS3231_Config_Alarm+0xe8>
	{
		//Configure the Date
		date = (pRTCAlarmConfig->RTCAlarmDateUnits << DS3231_RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << DS3231_RTC_ALRMR_DT) | (0 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b1b      	ldrb	r3, [r3, #12]
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7b5b      	ldrb	r3, [r3, #13]
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7c1b      	ldrb	r3, [r3, #16]
 8000dbc:	01db      	lsls	r3, r3, #7
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	75bb      	strb	r3, [r7, #22]
 8000dc6:	e00e      	b.n	8000de6 <RTC_DS3231_Config_Alarm+0x106>
	}
	else if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_YES)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7bdb      	ldrb	r3, [r3, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10a      	bne.n	8000de6 <RTC_DS3231_Config_Alarm+0x106>
	{
		//Configure the WeekDay
		date = (pRTCAlarmConfig->RTCAlarmDayOfWeek << DS3231_RTC_ALRMR_DU) | (1 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7b9a      	ldrb	r2, [r3, #14]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7c1b      	ldrb	r3, [r3, #16]
 8000dd8:	01db      	lsls	r3, r3, #7
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	75bb      	strb	r3, [r7, #22]
	}

	//Configure the ALARM Parameters in the Device
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d113      	bne.n	8000e16 <RTC_DS3231_Config_Alarm+0x136>
	{
		Tx_Buf[0] = 0x07;
 8000dee:	2307      	movs	r3, #7
 8000df0:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = seconds;
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = minutes;
 8000df6:	7d3b      	ldrb	r3, [r7, #20]
 8000df8:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = hours;
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	73fb      	strb	r3, [r7, #15]
		Tx_Buf[4] = date;
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	743b      	strb	r3, [r7, #16]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <RTC_DS3231_Config_Alarm+0x1c4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	2205      	movs	r2, #5
 8000e10:	f000 fe1e 	bl	8001a50 <I2CMasterSendData>
 8000e14:	e014      	b.n	8000e40 <RTC_DS3231_Config_Alarm+0x160>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d110      	bne.n	8000e40 <RTC_DS3231_Config_Alarm+0x160>
	{
		Tx_Buf[0] = 0x0B;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = minutes;
 8000e22:	7d3b      	ldrb	r3, [r7, #20]
 8000e24:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = hours;
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = date;
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	73fb      	strb	r3, [r7, #15]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <RTC_DS3231_Config_Alarm+0x1c4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f107 010c 	add.w	r1, r7, #12
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	f000 fe08 	bl	8001a50 <I2CMasterSendData>
	}

	//Enable the Alarm in the configuration register
	//a. Read the configuration register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&control_register,1,0x0E, SlaveAddressRTC);
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <RTC_DS3231_Config_Alarm+0x1c4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	f107 010b 	add.w	r1, r7, #11
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	230e      	movs	r3, #14
 8000e50:	2201      	movs	r2, #1
 8000e52:	f000 fedf 	bl	8001c14 <I2CMaster_DS3231_RTC_Read>

	//b. Modify the Alarm Enable Bits
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <RTC_DS3231_Config_Alarm+0x18a>
	{
		control_register |= (1 << DS3231_RTC_CR_A1IE);
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	72fb      	strb	r3, [r7, #11]
 8000e68:	e008      	b.n	8000e7c <RTC_DS3231_Config_Alarm+0x19c>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d104      	bne.n	8000e7c <RTC_DS3231_Config_Alarm+0x19c>
	{
		control_register |= (1 << DS3231_RTC_CR_A2IE);
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	72fb      	strb	r3, [r7, #11]
	}

	//c. Write to the configuration register
	Tx_Buf[0] = 0x0E;
 8000e7c:	230e      	movs	r3, #14
 8000e7e:	733b      	strb	r3, [r7, #12]
	Tx_Buf[1] = control_register;
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	737b      	strb	r3, [r7, #13]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <RTC_DS3231_Config_Alarm+0x1c4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f107 010c 	add.w	r1, r7, #12
 8000e90:	2202      	movs	r2, #2
 8000e92:	f000 fddd 	bl	8001a50 <I2CMasterSendData>

	return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <RTC_DS3231_Config_Alarm_Interrupt>:

void RTC_DS3231_Config_Alarm_Interrupt(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(DS3231_RTC_ALARM_INPUT_GPIO_PORT,DS3231_RTC_ALARM_INPUT_GPIO_PIN,EXTI_FALLING_TRIGGER,DS3231_RTC_ALARM_INPUT_IRQ_NUM);
 8000eac:	2328      	movs	r3, #40	; 0x28
 8000eae:	2201      	movs	r2, #1
 8000eb0:	210a      	movs	r1, #10
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <RTC_DS3231_Config_Alarm_Interrupt+0x14>)
 8000eb4:	f000 f914 	bl	80010e0 <configure_external_gpio_interrupt>

	return;
 8000eb8:	bf00      	nop
}
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <RTC_DS3231_Clear_Alarm>:

	return reg;
}

void RTC_DS3231_Clear_Alarm(uint8_t AlarmSelection)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	uint8_t control_status_reg_address = 15;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	73fb      	strb	r3, [r7, #15]
	uint8_t Tx_Buf[2];

	//Read the Control Status Register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&reg,1,control_status_reg_address,SlaveAddressRTC);
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <RTC_DS3231_Clear_Alarm+0x70>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <RTC_DS3231_Clear_Alarm+0x74>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	f107 010e 	add.w	r1, r7, #14
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f000 fe97 	bl	8001c14 <I2CMaster_DS3231_RTC_Read>

	//Update the Control Status Register
	Tx_Buf[0] = control_status_reg_address;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	733b      	strb	r3, [r7, #12]

	if(AlarmSelection == DS3231_RTC_ALARM_1)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <RTC_DS3231_Clear_Alarm+0x3c>
	{
		Tx_Buf[1] = reg & 0xFE;
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	737b      	strb	r3, [r7, #13]
 8000efa:	e007      	b.n	8000f0c <RTC_DS3231_Clear_Alarm+0x4c>
	}
	else if(AlarmSelection == DS3231_RTC_ALARM_2)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d104      	bne.n	8000f0c <RTC_DS3231_Clear_Alarm+0x4c>
	{
		Tx_Buf[1] = reg & 0xFD;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f023 0302 	bic.w	r3, r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	737b      	strb	r3, [r7, #13]
	}

	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <RTC_DS3231_Clear_Alarm+0x70>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <RTC_DS3231_Clear_Alarm+0x74>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f107 010c 	add.w	r1, r7, #12
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f000 fd99 	bl	8001a50 <I2CMasterSendData>
	delay_us(2000);
 8000f1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f22:	f7ff f9b5 	bl	8000290 <delay_us>

	return;
 8000f26:	bf00      	nop
}
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	2000000c 	.word	0x2000000c

08000f38 <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d834      	bhi.n	8000fb6 <format_dow+0x7e>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <format_dow+0x1c>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f71 	.word	0x08000f71
 8000f58:	08000f7b 	.word	0x08000f7b
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	08000f8f 	.word	0x08000f8f
 8000f64:	08000f99 	.word	0x08000f99
 8000f68:	08000fa3 	.word	0x08000fa3
 8000f6c:	08000fad 	.word	0x08000fad
	{
		case 1:
			strcpy(dow,"Mon");
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <format_dow+0x8c>)
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	6018      	str	r0, [r3, #0]
			break;
 8000f78:	e01e      	b.n	8000fb8 <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <format_dow+0x90>)
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	6018      	str	r0, [r3, #0]
			break;
 8000f82:	e019      	b.n	8000fb8 <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <format_dow+0x94>)
 8000f88:	6810      	ldr	r0, [r2, #0]
 8000f8a:	6018      	str	r0, [r3, #0]
			break;
 8000f8c:	e014      	b.n	8000fb8 <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <format_dow+0x98>)
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
			break;
 8000f96:	e00f      	b.n	8000fb8 <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <format_dow+0x9c>)
 8000f9c:	6810      	ldr	r0, [r2, #0]
 8000f9e:	6018      	str	r0, [r3, #0]
			break;
 8000fa0:	e00a      	b.n	8000fb8 <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <format_dow+0xa0>)
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	6018      	str	r0, [r3, #0]
			break;
 8000faa:	e005      	b.n	8000fb8 <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <format_dow+0xa4>)
 8000fb0:	6810      	ldr	r0, [r2, #0]
 8000fb2:	6018      	str	r0, [r3, #0]
			break;
 8000fb4:	e000      	b.n	8000fb8 <format_dow+0x80>
		default:
			break;
 8000fb6:	bf00      	nop
	}

	return;
 8000fb8:	bf00      	nop
}
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	080040e8 	.word	0x080040e8
 8000fc8:	080040ec 	.word	0x080040ec
 8000fcc:	080040f0 	.word	0x080040f0
 8000fd0:	080040f4 	.word	0x080040f4
 8000fd4:	080040f8 	.word	0x080040f8
 8000fd8:	080040fc 	.word	0x080040fc
 8000fdc:	08004100 	.word	0x08004100

08000fe0 <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	switch(date->month)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	2b0b      	cmp	r3, #11
 8000ff2:	d857      	bhi.n	80010a4 <format_mon+0xc4>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <format_mon+0x1c>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	0800102d 	.word	0x0800102d
 8001000:	08001037 	.word	0x08001037
 8001004:	08001041 	.word	0x08001041
 8001008:	0800104b 	.word	0x0800104b
 800100c:	08001055 	.word	0x08001055
 8001010:	0800105f 	.word	0x0800105f
 8001014:	08001069 	.word	0x08001069
 8001018:	08001073 	.word	0x08001073
 800101c:	0800107d 	.word	0x0800107d
 8001020:	08001087 	.word	0x08001087
 8001024:	08001091 	.word	0x08001091
 8001028:	0800109b 	.word	0x0800109b
	{
		case 1:
			strcpy(mon,"Jan");
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <format_mon+0xd0>)
 8001030:	6810      	ldr	r0, [r2, #0]
 8001032:	6018      	str	r0, [r3, #0]
			break;
 8001034:	e037      	b.n	80010a6 <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <format_mon+0xd4>)
 800103a:	6810      	ldr	r0, [r2, #0]
 800103c:	6018      	str	r0, [r3, #0]
			break;
 800103e:	e032      	b.n	80010a6 <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <format_mon+0xd8>)
 8001044:	6810      	ldr	r0, [r2, #0]
 8001046:	6018      	str	r0, [r3, #0]
			break;
 8001048:	e02d      	b.n	80010a6 <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <format_mon+0xdc>)
 800104e:	6810      	ldr	r0, [r2, #0]
 8001050:	6018      	str	r0, [r3, #0]
			break;
 8001052:	e028      	b.n	80010a6 <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <format_mon+0xe0>)
 8001058:	6810      	ldr	r0, [r2, #0]
 800105a:	6018      	str	r0, [r3, #0]
			break;
 800105c:	e023      	b.n	80010a6 <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <format_mon+0xe4>)
 8001062:	6810      	ldr	r0, [r2, #0]
 8001064:	6018      	str	r0, [r3, #0]
			break;
 8001066:	e01e      	b.n	80010a6 <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <format_mon+0xe8>)
 800106c:	6810      	ldr	r0, [r2, #0]
 800106e:	6018      	str	r0, [r3, #0]
			break;
 8001070:	e019      	b.n	80010a6 <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <format_mon+0xec>)
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	6018      	str	r0, [r3, #0]
			break;
 800107a:	e014      	b.n	80010a6 <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <format_mon+0xf0>)
 8001080:	6810      	ldr	r0, [r2, #0]
 8001082:	6018      	str	r0, [r3, #0]
			break;
 8001084:	e00f      	b.n	80010a6 <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <format_mon+0xf4>)
 800108a:	6810      	ldr	r0, [r2, #0]
 800108c:	6018      	str	r0, [r3, #0]
			break;
 800108e:	e00a      	b.n	80010a6 <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <format_mon+0xf8>)
 8001094:	6810      	ldr	r0, [r2, #0]
 8001096:	6018      	str	r0, [r3, #0]
			break;
 8001098:	e005      	b.n	80010a6 <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <format_mon+0xfc>)
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	6018      	str	r0, [r3, #0]
			break;
 80010a2:	e000      	b.n	80010a6 <format_mon+0xc6>
		default:
			break;
 80010a4:	bf00      	nop
	}

	return;
 80010a6:	bf00      	nop
}
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	08004104 	.word	0x08004104
 80010b4:	08004108 	.word	0x08004108
 80010b8:	0800410c 	.word	0x0800410c
 80010bc:	08004110 	.word	0x08004110
 80010c0:	08004114 	.word	0x08004114
 80010c4:	08004118 	.word	0x08004118
 80010c8:	0800411c 	.word	0x0800411c
 80010cc:	08004120 	.word	0x08004120
 80010d0:	08004124 	.word	0x08004124
 80010d4:	08004128 	.word	0x08004128
 80010d8:	0800412c 	.word	0x0800412c
 80010dc:	08004130 	.word	0x08004130

080010e0 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	70fb      	strb	r3, [r7, #3]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70bb      	strb	r3, [r7, #2]
 80010f6:	4613      	mov	r3, r2
 80010f8:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <configure_external_gpio_interrupt+0x104>)
 80010fc:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <configure_external_gpio_interrupt+0x108>)
 8001100:	61bb      	str	r3, [r7, #24]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <configure_external_gpio_interrupt+0x10c>)
 8001104:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <configure_external_gpio_interrupt+0x110>)
 8001108:	613b      	str	r3, [r7, #16]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <configure_external_gpio_interrupt+0x114>)
 800110c:	60fb      	str	r3, [r7, #12]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 ff4c 	bl	8001fac <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fb29 	bl	8001772 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fbc1 	bl	80018ae <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	2202      	movs	r2, #2
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fc01 	bl	800193a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2201      	movs	r2, #1
 800113c:	4619      	mov	r1, r3
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fbd7 	bl	80018f2 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	2101      	movs	r1, #1
 800114c:	fa01 f202 	lsl.w	r2, r1, r2
 8001150:	431a      	orrs	r2, r3
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 8001156:	78bb      	ldrb	r3, [r7, #2]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d108      	bne.n	800116e <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 800116e:	78bb      	ldrb	r3, [r7, #2]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	78fa      	ldrb	r2, [r7, #3]
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	431a      	orrs	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	60bb      	str	r3, [r7, #8]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	210f      	movs	r1, #15
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	43d2      	mvns	r2, r2
 80011b4:	401a      	ands	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f81c 	bl	80011f8 <gpio_port_name_to_num>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f8ac 	bl	8002334 <NVIC_EnableIRQ>
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023844 	.word	0x40023844
 80011e8:	40013c00 	.word	0x40013c00
 80011ec:	40013c08 	.word	0x40013c08
 80011f0:	40013c0c 	.word	0x40013c0c
 80011f4:	40013808 	.word	0x40013808

080011f8 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <gpio_port_name_to_num+0x90>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e036      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <gpio_port_name_to_num+0x94>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d102      	bne.n	800121c <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e02f      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <gpio_port_name_to_num+0x98>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e028      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <gpio_port_name_to_num+0x9c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d102      	bne.n	8001238 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8001232:	2303      	movs	r3, #3
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e021      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <gpio_port_name_to_num+0xa0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d102      	bne.n	8001246 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8001240:	2304      	movs	r3, #4
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e01a      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <gpio_port_name_to_num+0xa4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 800124e:	2305      	movs	r3, #5
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e013      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <gpio_port_name_to_num+0xa8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d102      	bne.n	8001262 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 800125c:	2306      	movs	r3, #6
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e00c      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <gpio_port_name_to_num+0xac>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d102      	bne.n	8001270 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 800126a:	2307      	movs	r3, #7
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e005      	b.n	800127c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <gpio_port_name_to_num+0xb0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8001278:	2308      	movs	r3, #8
 800127a:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	40022000 	.word	0x40022000

080012ac <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6852      	ldr	r2, [r2, #4]
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6892      	ldr	r2, [r2, #8]
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7b5b      	ldrb	r3, [r3, #13]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d16a      	bne.n	80013a6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a1a      	ldr	r2, [r3, #32]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b9b      	ldrb	r3, [r3, #14]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d11c      	bne.n	8001322 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0203 	bic.w	r2, r2, #3
 80012f6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6912      	ldr	r2, [r2, #16]
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001310:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001320:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7b9b      	ldrb	r3, [r3, #14]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d11c      	bne.n	8001364 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0203 	bic.w	r2, r2, #3
 8001338:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6912      	ldr	r2, [r2, #16]
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001352:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001362:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7b9b      	ldrb	r3, [r3, #14]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d11c      	bne.n	80013a6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0203 	bic.w	r2, r2, #3
 800137a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6912      	ldr	r2, [r2, #16]
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001394:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80013a4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7d1b      	ldrb	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 80bf 	bne.w	800152e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d5b      	ldrb	r3, [r3, #21]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d124      	bne.n	8001402 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013c6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6992      	ldr	r2, [r2, #24]
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80013e0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80013f0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0210 	orr.w	r2, r2, #16
 8001400:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7d5b      	ldrb	r3, [r3, #21]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d124      	bne.n	8001454 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001418:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6992      	ldr	r2, [r2, #24]
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001432:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001442:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7d5b      	ldrb	r3, [r3, #21]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d124      	bne.n	80014a6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800146a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6992      	ldr	r2, [r2, #24]
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001484:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001494:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0210 	orr.w	r2, r2, #16
 80014a4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7d5b      	ldrb	r3, [r3, #21]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d13f      	bne.n	800152e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014bc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014cc:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699a      	ldr	r2, [r3, #24]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80014dc:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0220 	bic.w	r2, r2, #32
 80014ec:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fc:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800150c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0204 	orr.w	r2, r2, #4
 800151c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0210 	orr.w	r2, r2, #16
 800152c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f1b      	ldrb	r3, [r3, #28]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d16a      	bne.n	800160c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001544:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7f5b      	ldrb	r3, [r3, #29]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d11c      	bne.n	8001588 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0203 	bic.w	r2, r2, #3
 800155c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a12      	ldr	r2, [r2, #32]
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001576:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001586:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7f5b      	ldrb	r3, [r3, #29]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d11c      	bne.n	80015ca <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0203 	bic.w	r2, r2, #3
 800159e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6a12      	ldr	r2, [r2, #32]
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015b8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80015c8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7f5b      	ldrb	r3, [r3, #29]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d11c      	bne.n	800160c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0203 	bic.w	r2, r2, #3
 80015e0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a12      	ldr	r2, [r2, #32]
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015fa:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800160a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001612:	2b00      	cmp	r3, #0
 8001614:	d16d      	bne.n	80016f2 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001624:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800162c:	2b02      	cmp	r3, #2
 800162e:	d11c      	bne.n	800166a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800163e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001658:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001668:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001670:	2b03      	cmp	r3, #3
 8001672:	d11c      	bne.n	80016ae <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001682:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800169c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80016ac:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11c      	bne.n	80016f2 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80016c6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80016e0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80016f0:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 800170a:	e00b      	b.n	8001724 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7b1b      	ldrb	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <General_Purpose_Timer_ClearUpdateEventFlag>:
{
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
}

void General_Purpose_Timer_ClearUpdateEventFlag(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_SR &= ~(1 << TIMx_SR_UIF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	611a      	str	r2, [r3, #16]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	4613      	mov	r3, r2
 8001780:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	0052      	lsls	r2, r2, #1
 800178e:	2103      	movs	r1, #3
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	43d2      	mvns	r2, r2
 8001796:	401a      	ands	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	78b9      	ldrb	r1, [r7, #2]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	0052      	lsls	r2, r2, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	601a      	str	r2, [r3, #0]

}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b087      	sub	sp, #28
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2201      	movs	r2, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	60fb      	str	r3, [r7, #12]

	return value;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <GPIOWritePin>:

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	4613      	mov	r3, r2
 8001806:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	43d2      	mvns	r2, r2
 800181a:	401a      	ands	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	78b9      	ldrb	r1, [r7, #2]
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	615a      	str	r2, [r3, #20]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800185e:	7afa      	ldrb	r2, [r7, #11]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	7aba      	ldrb	r2, [r7, #10]
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	210f      	movs	r1, #15
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	43d2      	mvns	r2, r2
 8001874:	4611      	mov	r1, r2
 8001876:	7afa      	ldrb	r2, [r7, #11]
 8001878:	4019      	ands	r1, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3208      	adds	r2, #8
 800187e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8001882:	7afa      	ldrb	r2, [r7, #11]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	78b9      	ldrb	r1, [r7, #2]
 800188e:	7aba      	ldrb	r2, [r7, #10]
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4611      	mov	r1, r2
 8001898:	7afa      	ldrb	r2, [r7, #11]
 800189a:	4319      	orrs	r1, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3208      	adds	r2, #8
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
 80018ba:	4613      	mov	r3, r2
 80018bc:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	43d2      	mvns	r2, r2
 80018d0:	401a      	ands	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	78b9      	ldrb	r1, [r7, #2]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	4613      	mov	r3, r2
 8001900:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	2103      	movs	r1, #3
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	43d2      	mvns	r2, r2
 8001916:	401a      	ands	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	78b9      	ldrb	r1, [r7, #2]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	0052      	lsls	r2, r2, #1
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	431a      	orrs	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
 8001946:	4613      	mov	r3, r2
 8001948:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	0052      	lsls	r2, r2, #1
 8001956:	2103      	movs	r1, #3
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	78b9      	ldrb	r1, [r7, #2]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	0052      	lsls	r2, r2, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	03db      	lsls	r3, r3, #15
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10d      	bne.n	80019ea <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	039b      	lsls	r3, r3, #14
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80019f2:	f023 030f 	bic.w	r3, r3, #15
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]

}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f84c 	bl	8001b00 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001a68:	bf00      	nop
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f869 	bl	8001b44 <I2C_GetFlagStatus>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f8      	beq.n	8001a6a <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f86f 	bl	8001b6e <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001a90:	bf00      	nop
 8001a92:	2102      	movs	r1, #2
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f855 	bl	8001b44 <I2C_GetFlagStatus>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f8      	beq.n	8001a92 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f874 	bl	8001b8e <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 8001aa6:	e012      	b.n	8001ace <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001aa8:	bf00      	nop
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f849 	bl	8001b44 <I2C_GetFlagStatus>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f8      	beq.n	8001aaa <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	611a      	str	r2, [r3, #16]
		TxBuf++;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
		Len--;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e9      	bne.n	8001aa8 <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001ad4:	bf00      	nop
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f833 	bl	8001b44 <I2C_GetFlagStatus>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d1f8      	bne.n	8001ad6 <I2CMasterSendData+0x86>
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f82c 	bl	8001b44 <I2C_GetFlagStatus>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1f1      	bne.n	8001ad6 <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f815 	bl	8001b22 <I2C_SendStopBit>

}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	621a      	str	r2, [r3, #32]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff ff66 	bl	8001b00 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001c34:	bf00      	nop
 8001c36:	2101      	movs	r1, #1
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff ff83 	bl	8001b44 <I2C_GetFlagStatus>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f8      	beq.n	8001c36 <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 8001c44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff ff88 	bl	8001b6e <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001c5e:	bf00      	nop
 8001c60:	2102      	movs	r1, #2
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff ff6e 	bl	8001b44 <I2C_GetFlagStatus>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f8      	beq.n	8001c60 <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff ff8d 	bl	8001b8e <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 8001c78:	e015      	b.n	8001ca6 <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001c7a:	bf00      	nop
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff ff60 	bl	8001b44 <I2C_GetFlagStatus>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f8      	beq.n	8001c7c <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001c8a:	7fbb      	ldrb	r3, [r7, #30]
 8001c8c:	3320      	adds	r3, #32
 8001c8e:	443b      	add	r3, r7
 8001c90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001c94:	461a      	mov	r2, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	611a      	str	r2, [r3, #16]
		i++;
 8001c9a:	7fbb      	ldrb	r3, [r7, #30]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e6      	bne.n	8001c7a <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001cac:	bf00      	nop
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff ff47 	bl	8001b44 <I2C_GetFlagStatus>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d1f8      	bne.n	8001cae <I2CMaster_DS3231_RTC_Read+0x9a>
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff ff40 	bl	8001b44 <I2C_GetFlagStatus>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d1f1      	bne.n	8001cae <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ff18 	bl	8001b00 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 8001cd0:	bf00      	nop
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ff35 	bl	8001b44 <I2C_GetFlagStatus>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f8      	beq.n	8001cd2 <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 8001ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff ff3a 	bl	8001b6e <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001cfa:	bf00      	nop
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff ff20 	bl	8001b44 <I2C_GetFlagStatus>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f8      	beq.n	8001cfc <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ff3f 	bl	8001b8e <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d919      	bls.n	8001d4a <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff5a 	bl	8001bd0 <I2CEnableAck>
		while(Len >= 2)
 8001d1c:	e012      	b.n	8001d44 <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001d1e:	bf00      	nop
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff ff0e 	bl	8001b44 <I2C_GetFlagStatus>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f8      	beq.n	8001d20 <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
			Len--;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d8e9      	bhi.n	8001d1e <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d115      	bne.n	8001d7c <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ff4e 	bl	8001bf2 <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001d56:	bf00      	nop
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fef2 	bl	8001b44 <I2C_GetFlagStatus>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f8      	beq.n	8001d58 <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
		Len--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff fed0 	bl	8001b22 <I2C_SendStopBit>

	return;
 8001d82:	bf00      	nop
}
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8001d8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d92:	f7fe fa7d 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001d96:	2030      	movs	r0, #48	; 0x30
 8001d98:	f000 f846 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001d9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001da0:	f7fe fa76 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001da4:	2030      	movs	r0, #48	; 0x30
 8001da6:	f000 f83f 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001daa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dae:	f7fe fa6f 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001db2:	2030      	movs	r0, #48	; 0x30
 8001db4:	f000 f838 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(50000);
 8001db8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dbc:	f7fe fa68 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 8001dc0:	2020      	movs	r0, #32
 8001dc2:	f000 f831 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(5000);
 8001dc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8001dca:	f7fe fa61 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dce:	2028      	movs	r0, #40	; 0x28
 8001dd0:	f000 f82a 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001dd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dd8:	f7fe fa5a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 8001ddc:	2008      	movs	r0, #8
 8001dde:	f000 f823 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001de2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001de6:	f7fe fa53 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 f81c 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001df0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001df4:	f7fe fa4c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f000 f815 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001dfe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e02:	f7fe fa45 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e06:	2006      	movs	r0, #6
 8001e08:	f000 f80e 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001e0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e10:	f7fe fa3e 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e14:	200c      	movs	r0, #12
 8001e16:	f000 f807 	bl	8001e28 <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001e1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e1e:	f7fe fa37 	bl	8000290 <delay_us>

	return;
 8001e22:	bf00      	nop
}
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f023 030f 	bic.w	r3, r3, #15
 8001e38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	f043 030c 	orr.w	r3, r3, #12
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	f043 030c 	orr.w	r3, r3, #12
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <lcd_pcf8574_send_cmd+0x5c>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <lcd_pcf8574_send_cmd+0x60>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f107 0108 	add.w	r1, r7, #8
 8001e74:	2204      	movs	r2, #4
 8001e76:	f7ff fdeb 	bl	8001a50 <I2CMasterSendData>

	return;
 8001e7a:	bf00      	nop
}
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000004 	.word	0x20000004

08001e8c <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f023 030f 	bic.w	r3, r3, #15
 8001e9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	f043 030d 	orr.w	r3, r3, #13
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	f043 0309 	orr.w	r3, r3, #9
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	f043 030d 	orr.w	r3, r3, #13
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	f043 0309 	orr.w	r3, r3, #9
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <lcd_pcf8574_send_data+0x5c>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <lcd_pcf8574_send_data+0x60>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f107 0108 	add.w	r1, r7, #8
 8001ed8:	2204      	movs	r2, #4
 8001eda:	f7ff fdb9 	bl	8001a50 <I2CMasterSendData>

	return;
 8001ede:	bf00      	nop
}
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004

08001ef0 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff ff97 	bl	8001e28 <lcd_pcf8574_send_cmd>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 8001f02:	2002      	movs	r0, #2
 8001f04:	f7ff ff90 	bl	8001e28 <lcd_pcf8574_send_cmd>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	460a      	mov	r2, r1
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	2b27      	cmp	r3, #39	; 0x27
 8001f26:	d802      	bhi.n	8001f2e <lcd_pcf8574_set_position+0x22>
			position = col;
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e011      	b.n	8001f52 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e00e      	b.n	8001f52 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d109      	bne.n	8001f4e <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	2b27      	cmp	r3, #39	; 0x27
 8001f3e:	d803      	bhi.n	8001f48 <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	3340      	adds	r3, #64	; 0x40
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e004      	b.n	8001f52 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 8001f48:	2340      	movs	r3, #64	; 0x40
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e001      	b.n	8001f52 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f58:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff63 	bl	8001e28 <lcd_pcf8574_send_cmd>

	return;
 8001f62:	bf00      	nop
}
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <RTC_Alarm_IRQHandler+0x24>)
 8001f74:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8001f76:	f000 f80d 	bl	8001f94 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]

	return;
 8001f86:	bf00      	nop
}
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40013c14 	.word	0x40013c14

08001f94 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <RTC_Alarm_Interrupt_Callback+0x14>)
 8001f9e:	f7ff fc2b 	bl	80017f8 <GPIOWritePin>

	return;
 8001fa2:	bf00      	nop
}
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020c00 	.word	0x40020c00

08001fac <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a88      	ldr	r2, [pc, #544]	; (80021d8 <EnablePeriClk+0x22c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001fbc:	4b87      	ldr	r3, [pc, #540]	; (80021dc <EnablePeriClk+0x230>)
 8001fbe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001fcc:	e19b      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a83      	ldr	r2, [pc, #524]	; (80021e0 <EnablePeriClk+0x234>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001fd6:	4b81      	ldr	r3, [pc, #516]	; (80021dc <EnablePeriClk+0x230>)
 8001fd8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	e18e      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	; (80021e4 <EnablePeriClk+0x238>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001ff0:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <EnablePeriClk+0x230>)
 8001ff2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f043 0204 	orr.w	r2, r3, #4
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	e181      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <EnablePeriClk+0x23c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <EnablePeriClk+0x230>)
 800200c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f043 0208 	orr.w	r2, r3, #8
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	e174      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a73      	ldr	r2, [pc, #460]	; (80021ec <EnablePeriClk+0x240>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <EnablePeriClk+0x230>)
 8002026:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f043 0210 	orr.w	r2, r3, #16
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	e167      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <EnablePeriClk+0x244>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <EnablePeriClk+0x230>)
 8002040:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	e15a      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <EnablePeriClk+0x248>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002058:	4b60      	ldr	r3, [pc, #384]	; (80021dc <EnablePeriClk+0x230>)
 800205a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	e14d      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a62      	ldr	r2, [pc, #392]	; (80021f8 <EnablePeriClk+0x24c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d108      	bne.n	8002084 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002072:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <EnablePeriClk+0x230>)
 8002074:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]
}
 8002082:	e140      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <EnablePeriClk+0x250>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <EnablePeriClk+0x230>)
 800208e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]
}
 800209c:	e133      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <EnablePeriClk+0x254>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <EnablePeriClk+0x258>)
 80020a8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	e126      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a53      	ldr	r2, [pc, #332]	; (8002208 <EnablePeriClk+0x25c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <EnablePeriClk+0x260>)
 80020c2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	e119      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <EnablePeriClk+0x264>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020da:	4b4c      	ldr	r3, [pc, #304]	; (800220c <EnablePeriClk+0x260>)
 80020dc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	e10c      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a49      	ldr	r2, [pc, #292]	; (8002214 <EnablePeriClk+0x268>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d108      	bne.n	8002106 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80020f4:	4b45      	ldr	r3, [pc, #276]	; (800220c <EnablePeriClk+0x260>)
 80020f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	e0ff      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a43      	ldr	r2, [pc, #268]	; (8002218 <EnablePeriClk+0x26c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800210e:	4b3f      	ldr	r3, [pc, #252]	; (800220c <EnablePeriClk+0x260>)
 8002110:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	e0f2      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <EnablePeriClk+0x270>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <EnablePeriClk+0x260>)
 800212a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	e0e5      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a38      	ldr	r2, [pc, #224]	; (8002220 <EnablePeriClk+0x274>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <EnablePeriClk+0x258>)
 8002144:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	e0d8      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a33      	ldr	r2, [pc, #204]	; (8002224 <EnablePeriClk+0x278>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <EnablePeriClk+0x260>)
 800215e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	e0cb      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <EnablePeriClk+0x27c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <EnablePeriClk+0x260>)
 8002178:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	e0be      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <EnablePeriClk+0x280>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <EnablePeriClk+0x260>)
 8002192:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	e0b1      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <EnablePeriClk+0x284>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d108      	bne.n	80021bc <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <EnablePeriClk+0x260>)
 80021ac:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	e0a4      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <EnablePeriClk+0x288>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d139      	bne.n	8002238 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <EnablePeriClk+0x258>)
 80021c6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	e097      	b.n	8002306 <EnablePeriClk+0x35a>
 80021d6:	bf00      	nop
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40023830 	.word	0x40023830
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40022000 	.word	0x40022000
 8002200:	40013000 	.word	0x40013000
 8002204:	40023844 	.word	0x40023844
 8002208:	40003800 	.word	0x40003800
 800220c:	40023840 	.word	0x40023840
 8002210:	40003c00 	.word	0x40003c00
 8002214:	40005400 	.word	0x40005400
 8002218:	40005800 	.word	0x40005800
 800221c:	40005c00 	.word	0x40005c00
 8002220:	40011000 	.word	0x40011000
 8002224:	40004400 	.word	0x40004400
 8002228:	40004800 	.word	0x40004800
 800222c:	40004c00 	.word	0x40004c00
 8002230:	40005000 	.word	0x40005000
 8002234:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <EnablePeriClk+0x364>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <EnablePeriClk+0x368>)
 8002242:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]
}
 8002250:	e059      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a30      	ldr	r2, [pc, #192]	; (8002318 <EnablePeriClk+0x36c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d108      	bne.n	800226c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <EnablePeriClk+0x368>)
 800225c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	e04c      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a2b      	ldr	r2, [pc, #172]	; (800231c <EnablePeriClk+0x370>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <EnablePeriClk+0x374>)
 8002276:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	e03f      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <EnablePeriClk+0x378>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <EnablePeriClk+0x374>)
 8002290:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	e032      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d108      	bne.n	80022ba <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <EnablePeriClk+0x368>)
 80022aa:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	e025      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <EnablePeriClk+0x37c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d108      	bne.n	80022d4 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <EnablePeriClk+0x368>)
 80022c4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	e018      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <EnablePeriClk+0x380>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <EnablePeriClk+0x368>)
 80022de:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	e00b      	b.n	8002306 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <EnablePeriClk+0x384>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d107      	bne.n	8002306 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <EnablePeriClk+0x368>)
 80022f8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f043 0208 	orr.w	r2, r3, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40001000 	.word	0x40001000
 8002314:	40023840 	.word	0x40023840
 8002318:	40001400 	.word	0x40001400
 800231c:	40026000 	.word	0x40026000
 8002320:	40023830 	.word	0x40023830
 8002324:	40026400 	.word	0x40026400
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800
 8002330:	40000c00 	.word	0x40000c00

08002334 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002356:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800235a:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <main>:
static void enable_interrupts(void);
static void configure_ds3231_rtc_module(void);
static void configure_timer5(void);

int main(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	//Configure the Timer
	configure_delay_timer();
 800237c:	f7fd ffa0 	bl	80002c0 <configure_delay_timer>

	//Configure the I2C Peripheral
	configure_i2c();
 8002380:	f7fd ffc0 	bl	8000304 <configure_i2c>

	//Disable printf() buffering
	setbuf(stdout, NULL);
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <main+0xd4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fecf 	bl	8003130 <setbuf>

	//Initialize the LCD module
	delay_us(1000000);
 8002392:	482f      	ldr	r0, [pc, #188]	; (8002450 <main+0xd8>)
 8002394:	f7fd ff7c 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8002398:	f7ff fcf7 	bl	8001d8a <lcd_pcf8574_init>
	delay_us(100000);
 800239c:	482d      	ldr	r0, [pc, #180]	; (8002454 <main+0xdc>)
 800239e:	f7fd ff77 	bl	8000290 <delay_us>


	lcd_pcf8574_clear_screen();
 80023a2:	f7ff fda5 	bl	8001ef0 <lcd_pcf8574_clear_screen>
	delay_us(3000);
 80023a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023aa:	f7fd ff71 	bl	8000290 <delay_us>
	lcd_pcf8574_return_home();
 80023ae:	f7ff fda6 	bl	8001efe <lcd_pcf8574_return_home>
	delay_us(3000);
 80023b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023b6:	f7fd ff6b 	bl	8000290 <delay_us>
	//printf(">");

	//GPIO Configuration for Columns of Matrix Keypad
	EnablePeriClk(GPIO_PORT_COL);
 80023ba:	4827      	ldr	r0, [pc, #156]	; (8002458 <main+0xe0>)
 80023bc:	f7ff fdf6 	bl	8001fac <EnablePeriClk>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_1, GPIO_MODE_OUTPUT);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2100      	movs	r1, #0
 80023c4:	4824      	ldr	r0, [pc, #144]	; (8002458 <main+0xe0>)
 80023c6:	f7ff f9d4 	bl	8001772 <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_2, GPIO_MODE_OUTPUT);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2101      	movs	r1, #1
 80023ce:	4822      	ldr	r0, [pc, #136]	; (8002458 <main+0xe0>)
 80023d0:	f7ff f9cf 	bl	8001772 <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_3, GPIO_MODE_OUTPUT);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2102      	movs	r1, #2
 80023d8:	481f      	ldr	r0, [pc, #124]	; (8002458 <main+0xe0>)
 80023da:	f7ff f9ca 	bl	8001772 <GPIOSetMode>
	GPIOSetMode(GPIO_PORT_COL, GPIO_COL_4, GPIO_MODE_OUTPUT);
 80023de:	2201      	movs	r2, #1
 80023e0:	2103      	movs	r1, #3
 80023e2:	481d      	ldr	r0, [pc, #116]	; (8002458 <main+0xe0>)
 80023e4:	f7ff f9c5 	bl	8001772 <GPIOSetMode>

	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_1,GPIO_LOW);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	481a      	ldr	r0, [pc, #104]	; (8002458 <main+0xe0>)
 80023ee:	f7ff fa03 	bl	80017f8 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_2,GPIO_LOW);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	4818      	ldr	r0, [pc, #96]	; (8002458 <main+0xe0>)
 80023f8:	f7ff f9fe 	bl	80017f8 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_3,GPIO_LOW);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4815      	ldr	r0, [pc, #84]	; (8002458 <main+0xe0>)
 8002402:	f7ff f9f9 	bl	80017f8 <GPIOWritePin>
	GPIOWritePin(GPIO_PORT_COL, GPIO_COL_4,GPIO_LOW);
 8002406:	2200      	movs	r2, #0
 8002408:	2103      	movs	r1, #3
 800240a:	4813      	ldr	r0, [pc, #76]	; (8002458 <main+0xe0>)
 800240c:	f7ff f9f4 	bl	80017f8 <GPIOWritePin>

	//GPIO Configuration for Rows of Matrix Keypad
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_1,EXTI_FALLING_TRIGGER,GPIO_ROW_1_IRQ_NUM);
 8002410:	2306      	movs	r3, #6
 8002412:	2201      	movs	r2, #1
 8002414:	2100      	movs	r1, #0
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <main+0xe4>)
 8002418:	f7fe fe62 	bl	80010e0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_2,EXTI_FALLING_TRIGGER,GPIO_ROW_2_IRQ_NUM);
 800241c:	2307      	movs	r3, #7
 800241e:	2201      	movs	r2, #1
 8002420:	2101      	movs	r1, #1
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <main+0xe4>)
 8002424:	f7fe fe5c 	bl	80010e0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_3,EXTI_FALLING_TRIGGER,GPIO_ROW_3_IRQ_NUM);
 8002428:	2308      	movs	r3, #8
 800242a:	2201      	movs	r2, #1
 800242c:	2102      	movs	r1, #2
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <main+0xe4>)
 8002430:	f7fe fe56 	bl	80010e0 <configure_external_gpio_interrupt>
	configure_external_gpio_interrupt(GPIO_PORT_ROW,GPIO_ROW_4,EXTI_FALLING_TRIGGER,GPIO_ROW_4_IRQ_NUM);
 8002434:	2309      	movs	r3, #9
 8002436:	2201      	movs	r2, #1
 8002438:	2103      	movs	r1, #3
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <main+0xe4>)
 800243c:	f7fe fe50 	bl	80010e0 <configure_external_gpio_interrupt>

	//Initialize the Periodic Interrupts for the Temperature Module
	configure_timer5();
 8002440:	f000 fbd6 	bl	8002bf0 <configure_timer5>

	//Initialize the DS3231 RTC Module
	configure_ds3231_rtc_module();
 8002444:	f000 fb36 	bl	8002ab4 <configure_ds3231_rtc_module>

	while(1)
 8002448:	e7fe      	b.n	8002448 <main+0xd0>
 800244a:	bf00      	nop
 800244c:	2000002c 	.word	0x2000002c
 8002450:	000f4240 	.word	0x000f4240
 8002454:	000186a0 	.word	0x000186a0
 8002458:	40020800 	.word	0x40020800
 800245c:	40020000 	.word	0x40020000

08002460 <calculation>:

	return 0;
}

int calculation(uint8_t *buffer, uint8_t count)
{
 8002460:	b480      	push	{r7}
 8002462:	b08b      	sub	sp, #44	; 0x2c
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
	int num1,num2,value,i,j,k,place_value;
	uint8_t operation;

	i=0;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
	//Parsing the first number
	while(buffer[i]>=48 && buffer[i] <=57)
 8002470:	e002      	b.n	8002478 <calculation+0x18>
		i++;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3301      	adds	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
	while(buffer[i]>=48 && buffer[i] <=57)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b2f      	cmp	r3, #47	; 0x2f
 8002482:	d905      	bls.n	8002490 <calculation+0x30>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b39      	cmp	r3, #57	; 0x39
 800248e:	d9f0      	bls.n	8002472 <calculation+0x12>

	operation = buffer[i];
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	72fb      	strb	r3, [r7, #11]

	num1 = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e020      	b.n	80024e8 <calculation+0x88>
	{
		place_value = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	e008      	b.n	80024c4 <calculation+0x64>
			place_value *= 10;
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
		for(k=i-1;k>j;k--)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dcf2      	bgt.n	80024b2 <calculation+0x52>
		num1 += (buffer[j]-48)*place_value;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3b30      	subs	r3, #48	; 0x30
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4413      	add	r3, r2
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
	for(j=i-1;j>=0;j--)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dadb      	bge.n	80024a6 <calculation+0x46>
	}

	//Parsing the second number
	num2 = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	3b02      	subs	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e020      	b.n	800253c <calculation+0xdc>
	{
			place_value = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	3b02      	subs	r3, #2
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	e008      	b.n	8002518 <calculation+0xb8>
				place_value *= 10;
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
			for(k=count-2;k>j;k--)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	3b01      	subs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	dcf2      	bgt.n	8002506 <calculation+0xa6>
			num2 += (buffer[j]-48)*place_value;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3b30      	subs	r3, #48	; 0x30
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	4413      	add	r3, r2
 8002534:	623b      	str	r3, [r7, #32]
	for(j=count-2;j>i;j--)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3b01      	subs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	429a      	cmp	r2, r3
 8002542:	dcda      	bgt.n	80024fa <calculation+0x9a>
	}

	switch(operation)
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	2b03      	cmp	r3, #3
 800254a:	d821      	bhi.n	8002590 <calculation+0x130>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <calculation+0xf4>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002565 	.word	0x08002565
 8002558:	0800256f 	.word	0x0800256f
 800255c:	08002579 	.word	0x08002579
 8002560:	08002585 	.word	0x08002585
	{
		case 'A':
			value = num1 + num2;
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	4413      	add	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
			break;
 800256c:	e011      	b.n	8002592 <calculation+0x132>
		case 'B':
			value = num1 - num2;
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	61fb      	str	r3, [r7, #28]
			break;
 8002576:	e00c      	b.n	8002592 <calculation+0x132>
		case 'C':
			value = num1 * num2;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	61fb      	str	r3, [r7, #28]
			break;
 8002582:	e006      	b.n	8002592 <calculation+0x132>
		case 'D':
			value = num1 / num2;
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	fb92 f3f3 	sdiv	r3, r2, r3
 800258c:	61fb      	str	r3, [r7, #28]
			break;
 800258e:	e000      	b.n	8002592 <calculation+0x132>
		default:
			break;
 8002590:	bf00      	nop
	}

	return value;
 8002592:	69fb      	ldr	r3, [r7, #28]

}
 8002594:	4618      	mov	r0, r3
 8002596:	372c      	adds	r7, #44	; 0x2c
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <EXTI0_IRQHandler+0xa0>)
 80025a8:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	disable_interrupts();
 80025aa:	f000 fa75 	bl	8002a98 <disable_interrupts>

	row=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e02e      	b.n	8002616 <EXTI0_IRQHandler+0x76>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <EXTI0_IRQHandler+0xa4>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	2201      	movs	r2, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	4821      	ldr	r0, [pc, #132]	; (8002648 <EXTI0_IRQHandler+0xa8>)
 80025c4:	f7ff f918 	bl	80017f8 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4a20      	ldr	r2, [pc, #128]	; (800264c <EXTI0_IRQHandler+0xac>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	4619      	mov	r1, r3
 80025d0:	481f      	ldr	r0, [pc, #124]	; (8002650 <EXTI0_IRQHandler+0xb0>)
 80025d2:	f7ff f8f2 	bl	80017ba <GPIOReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d111      	bne.n	8002600 <EXTI0_IRQHandler+0x60>
		{
			c = char_matrix[row][col];
 80025dc:	79fa      	ldrb	r2, [r7, #7]
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	491c      	ldr	r1, [pc, #112]	; (8002654 <EXTI0_IRQHandler+0xb4>)
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	440a      	add	r2, r1
 80025e6:	4413      	add	r3, r2
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <EXTI0_IRQHandler+0xb8>)
 80025ec:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_1_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <EXTI0_IRQHandler+0xa4>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4813      	ldr	r0, [pc, #76]	; (8002648 <EXTI0_IRQHandler+0xa8>)
 80025fa:	f7ff f8fd 	bl	80017f8 <GPIOWritePin>

			break;
 80025fe:	e00d      	b.n	800261c <EXTI0_IRQHandler+0x7c>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <EXTI0_IRQHandler+0xa4>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	2200      	movs	r2, #0
 8002608:	4619      	mov	r1, r3
 800260a:	480f      	ldr	r0, [pc, #60]	; (8002648 <EXTI0_IRQHandler+0xa8>)
 800260c:	f7ff f8f4 	bl	80017f8 <GPIOWritePin>
	for(col=0;col<4;col++)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3301      	adds	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d9cd      	bls.n	80025b8 <EXTI0_IRQHandler+0x18>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 800261c:	480f      	ldr	r0, [pc, #60]	; (800265c <EXTI0_IRQHandler+0xbc>)
 800261e:	f7fd fe37 	bl	8000290 <delay_us>

	process_key_press();
 8002622:	f000 f93d 	bl	80028a0 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_1);		// Clearing the EXTI_PR Register
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_1_IRQ_NUM);

	enable_interrupts();
 8002632:	f000 fa38 	bl	8002aa6 <enable_interrupts>

	return;
 8002636:	bf00      	nop
}
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40013c14 	.word	0x40013c14
 8002644:	20000010 	.word	0x20000010
 8002648:	40020800 	.word	0x40020800
 800264c:	20000014 	.word	0x20000014
 8002650:	40020000 	.word	0x40020000
 8002654:	20000018 	.word	0x20000018
 8002658:	20000135 	.word	0x20000135
 800265c:	0007a120 	.word	0x0007a120

08002660 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <EXTI1_IRQHandler+0xa0>)
 8002668:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	disable_interrupts();
 800266a:	f000 fa15 	bl	8002a98 <disable_interrupts>

	row=1;
 800266e:	2301      	movs	r3, #1
 8002670:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e02e      	b.n	80026d6 <EXTI1_IRQHandler+0x76>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <EXTI1_IRQHandler+0xa4>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	2201      	movs	r2, #1
 8002680:	4619      	mov	r1, r3
 8002682:	4821      	ldr	r0, [pc, #132]	; (8002708 <EXTI1_IRQHandler+0xa8>)
 8002684:	f7ff f8b8 	bl	80017f8 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	4a20      	ldr	r2, [pc, #128]	; (800270c <EXTI1_IRQHandler+0xac>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	4619      	mov	r1, r3
 8002690:	481f      	ldr	r0, [pc, #124]	; (8002710 <EXTI1_IRQHandler+0xb0>)
 8002692:	f7ff f892 	bl	80017ba <GPIOReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d111      	bne.n	80026c0 <EXTI1_IRQHandler+0x60>
		{
			c = char_matrix[row][col];
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	491c      	ldr	r1, [pc, #112]	; (8002714 <EXTI1_IRQHandler+0xb4>)
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	440a      	add	r2, r1
 80026a6:	4413      	add	r3, r2
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <EXTI1_IRQHandler+0xb8>)
 80026ac:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_2_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <EXTI1_IRQHandler+0xa4>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	2200      	movs	r2, #0
 80026b6:	4619      	mov	r1, r3
 80026b8:	4813      	ldr	r0, [pc, #76]	; (8002708 <EXTI1_IRQHandler+0xa8>)
 80026ba:	f7ff f89d 	bl	80017f8 <GPIOWritePin>

			break;
 80026be:	e00d      	b.n	80026dc <EXTI1_IRQHandler+0x7c>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <EXTI1_IRQHandler+0xa4>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	480f      	ldr	r0, [pc, #60]	; (8002708 <EXTI1_IRQHandler+0xa8>)
 80026cc:	f7ff f894 	bl	80017f8 <GPIOWritePin>
	for(col=0;col<4;col++)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d9cd      	bls.n	8002678 <EXTI1_IRQHandler+0x18>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <EXTI1_IRQHandler+0xbc>)
 80026de:	f7fd fdd7 	bl	8000290 <delay_us>

	process_key_press();
 80026e2:	f000 f8dd 	bl	80028a0 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_2);		// Clearing the EXTI_PR Register
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f043 0202 	orr.w	r2, r3, #2
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_2_IRQ_NUM);

	enable_interrupts();
 80026f2:	f000 f9d8 	bl	8002aa6 <enable_interrupts>

	return;
 80026f6:	bf00      	nop
}
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40013c14 	.word	0x40013c14
 8002704:	20000010 	.word	0x20000010
 8002708:	40020800 	.word	0x40020800
 800270c:	20000014 	.word	0x20000014
 8002710:	40020000 	.word	0x40020000
 8002714:	20000018 	.word	0x20000018
 8002718:	20000135 	.word	0x20000135
 800271c:	0007a120 	.word	0x0007a120

08002720 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <EXTI2_IRQHandler+0xa0>)
 8002728:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	disable_interrupts();
 800272a:	f000 f9b5 	bl	8002a98 <disable_interrupts>

	row=2;
 800272e:	2302      	movs	r3, #2
 8002730:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e02e      	b.n	8002796 <EXTI2_IRQHandler+0x76>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <EXTI2_IRQHandler+0xa4>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	2201      	movs	r2, #1
 8002740:	4619      	mov	r1, r3
 8002742:	4821      	ldr	r0, [pc, #132]	; (80027c8 <EXTI2_IRQHandler+0xa8>)
 8002744:	f7ff f858 	bl	80017f8 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <EXTI2_IRQHandler+0xac>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	4619      	mov	r1, r3
 8002750:	481f      	ldr	r0, [pc, #124]	; (80027d0 <EXTI2_IRQHandler+0xb0>)
 8002752:	f7ff f832 	bl	80017ba <GPIOReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d111      	bne.n	8002780 <EXTI2_IRQHandler+0x60>
		{
			c = char_matrix[row][col];
 800275c:	79fa      	ldrb	r2, [r7, #7]
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	491c      	ldr	r1, [pc, #112]	; (80027d4 <EXTI2_IRQHandler+0xb4>)
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	440a      	add	r2, r1
 8002766:	4413      	add	r3, r2
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <EXTI2_IRQHandler+0xb8>)
 800276c:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_3_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <EXTI2_IRQHandler+0xa4>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	2200      	movs	r2, #0
 8002776:	4619      	mov	r1, r3
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <EXTI2_IRQHandler+0xa8>)
 800277a:	f7ff f83d 	bl	80017f8 <GPIOWritePin>

			break;
 800277e:	e00d      	b.n	800279c <EXTI2_IRQHandler+0x7c>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <EXTI2_IRQHandler+0xa4>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	480f      	ldr	r0, [pc, #60]	; (80027c8 <EXTI2_IRQHandler+0xa8>)
 800278c:	f7ff f834 	bl	80017f8 <GPIOWritePin>
	for(col=0;col<4;col++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d9cd      	bls.n	8002738 <EXTI2_IRQHandler+0x18>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <EXTI2_IRQHandler+0xbc>)
 800279e:	f7fd fd77 	bl	8000290 <delay_us>

	process_key_press();
 80027a2:	f000 f87d 	bl	80028a0 <process_key_press>
	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_3);		// Clearing the EXTI_PR Register
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_3_IRQ_NUM);

	enable_interrupts();
 80027b2:	f000 f978 	bl	8002aa6 <enable_interrupts>

	return;
 80027b6:	bf00      	nop
}
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40013c14 	.word	0x40013c14
 80027c4:	20000010 	.word	0x20000010
 80027c8:	40020800 	.word	0x40020800
 80027cc:	20000014 	.word	0x20000014
 80027d0:	40020000 	.word	0x40020000
 80027d4:	20000018 	.word	0x20000018
 80027d8:	20000135 	.word	0x20000135
 80027dc:	0007a120 	.word	0x0007a120

080027e0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <EXTI3_IRQHandler+0xa0>)
 80027e8:	60bb      	str	r3, [r7, #8]
	uint8_t row,col;

	disable_interrupts();
 80027ea:	f000 f955 	bl	8002a98 <disable_interrupts>

	row=3;
 80027ee:	2303      	movs	r3, #3
 80027f0:	71fb      	strb	r3, [r7, #7]
	//Handling the Interrupt
	for(col=0;col<4;col++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e02e      	b.n	8002856 <EXTI3_IRQHandler+0x76>
	{
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_HIGH);
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <EXTI3_IRQHandler+0xa4>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	2201      	movs	r2, #1
 8002800:	4619      	mov	r1, r3
 8002802:	4821      	ldr	r0, [pc, #132]	; (8002888 <EXTI3_IRQHandler+0xa8>)
 8002804:	f7fe fff8 	bl	80017f8 <GPIOWritePin>
		if(GPIOReadPin(GPIO_PORT_ROW, gpio_row[row]) == GPIO_HIGH)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4a20      	ldr	r2, [pc, #128]	; (800288c <EXTI3_IRQHandler+0xac>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	4619      	mov	r1, r3
 8002810:	481f      	ldr	r0, [pc, #124]	; (8002890 <EXTI3_IRQHandler+0xb0>)
 8002812:	f7fe ffd2 	bl	80017ba <GPIOReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d111      	bne.n	8002840 <EXTI3_IRQHandler+0x60>
		{
			c = char_matrix[row][col];
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	491c      	ldr	r1, [pc, #112]	; (8002894 <EXTI3_IRQHandler+0xb4>)
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	440a      	add	r2, r1
 8002826:	4413      	add	r3, r2
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <EXTI3_IRQHandler+0xb8>)
 800282c:	701a      	strb	r2, [r3, #0]

			//Disabling the Interrupt
			//NVIC_DisableIRQ(GPIO_ROW_4_IRQ_NUM);

			GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	4a14      	ldr	r2, [pc, #80]	; (8002884 <EXTI3_IRQHandler+0xa4>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	2200      	movs	r2, #0
 8002836:	4619      	mov	r1, r3
 8002838:	4813      	ldr	r0, [pc, #76]	; (8002888 <EXTI3_IRQHandler+0xa8>)
 800283a:	f7fe ffdd 	bl	80017f8 <GPIOWritePin>

			break;
 800283e:	e00d      	b.n	800285c <EXTI3_IRQHandler+0x7c>
		}
		GPIOWritePin(GPIO_PORT_COL, gpio_col[col],GPIO_LOW);
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <EXTI3_IRQHandler+0xa4>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	2200      	movs	r2, #0
 8002848:	4619      	mov	r1, r3
 800284a:	480f      	ldr	r0, [pc, #60]	; (8002888 <EXTI3_IRQHandler+0xa8>)
 800284c:	f7fe ffd4 	bl	80017f8 <GPIOWritePin>
	for(col=0;col<4;col++)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	3301      	adds	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d9cd      	bls.n	80027f8 <EXTI3_IRQHandler+0x18>
	}

	//printf("%c\r\n",c);

	delay_us(500000);
 800285c:	480f      	ldr	r0, [pc, #60]	; (800289c <EXTI3_IRQHandler+0xbc>)
 800285e:	f7fd fd17 	bl	8000290 <delay_us>

	process_key_press();
 8002862:	f000 f81d 	bl	80028a0 <process_key_press>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << GPIO_ROW_4);		// Clearing the EXTI_PR Register
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f043 0208 	orr.w	r2, r3, #8
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	601a      	str	r2, [r3, #0]

	//Re-Enabling the Interrupt
	//NVIC_EnableIRQ(GPIO_ROW_4_IRQ_NUM);

	enable_interrupts();
 8002872:	f000 f918 	bl	8002aa6 <enable_interrupts>

	return;
 8002876:	bf00      	nop
}
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40013c14 	.word	0x40013c14
 8002884:	20000010 	.word	0x20000010
 8002888:	40020800 	.word	0x40020800
 800288c:	20000014 	.word	0x20000014
 8002890:	40020000 	.word	0x40020000
 8002894:	20000018 	.word	0x20000018
 8002898:	20000135 	.word	0x20000135
 800289c:	0007a120 	.word	0x0007a120

080028a0 <process_key_press>:

static void process_key_press(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
	uint8_t printed_c;
	int value;

	if(calculator_mode == 1)
 80028a6:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <process_key_press+0x1d8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80a2 	bne.w	80029f4 <process_key_press+0x154>
	{
		char_buffer[char_count] = c;
 80028b0:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <process_key_press+0x1dc>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <process_key_press+0x1e0>)
 80028b8:	7819      	ldrb	r1, [r3, #0]
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <process_key_press+0x1e4>)
 80028bc:	5499      	strb	r1, [r3, r2]
		char_count++;
 80028be:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <process_key_press+0x1dc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <process_key_press+0x1dc>)
 80028c8:	701a      	strb	r2, [r3, #0]

		if(c>=48 && c<=57)
 80028ca:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <process_key_press+0x1e0>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b2f      	cmp	r3, #47	; 0x2f
 80028d0:	d90b      	bls.n	80028ea <process_key_press+0x4a>
 80028d2:	4b6b      	ldr	r3, [pc, #428]	; (8002a80 <process_key_press+0x1e0>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b39      	cmp	r3, #57	; 0x39
 80028d8:	d807      	bhi.n	80028ea <process_key_press+0x4a>
		{
			printed_c = c;
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <process_key_press+0x1e0>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
			printf("%c", printed_c);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fc00 	bl	80030e8 <putchar>
			return;
 80028e8:	e0c3      	b.n	8002a72 <process_key_press+0x1d2>
		}
		else
		{
			if(c == 'A')
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <process_key_press+0x1e0>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b41      	cmp	r3, #65	; 0x41
 80028f0:	d119      	bne.n	8002926 <process_key_press+0x86>
			{
				if(char_count != 1)
 80028f2:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <process_key_press+0x1dc>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d006      	beq.n	8002908 <process_key_press+0x68>
				{
					printed_c = '+';
 80028fa:	232b      	movs	r3, #43	; 0x2b
 80028fc:	71fb      	strb	r3, [r7, #7]
					printf("%c", printed_c);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fbf1 	bl	80030e8 <putchar>
					return;
 8002906:	e0b4      	b.n	8002a72 <process_key_press+0x1d2>
				}
				else if(char_count == 1)
 8002908:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <process_key_press+0x1dc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	f040 80b0 	bne.w	8002a72 <process_key_press+0x1d2>
				{
					calculator_mode = 0;
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <process_key_press+0x1d8>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
					clock_mode = 0;
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <process_key_press+0x1e8>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
					temp_mode = 1;
 800291e:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <process_key_press+0x1ec>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
					return;
 8002924:	e0a5      	b.n	8002a72 <process_key_press+0x1d2>
				}
			}
			else if(c == 'B')
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <process_key_press+0x1e0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b42      	cmp	r3, #66	; 0x42
 800292c:	d106      	bne.n	800293c <process_key_press+0x9c>
			{
				printed_c = '-';
 800292e:	232d      	movs	r3, #45	; 0x2d
 8002930:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fbd7 	bl	80030e8 <putchar>
				return;
 800293a:	e09a      	b.n	8002a72 <process_key_press+0x1d2>
			}
			else if(c == 'C')
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <process_key_press+0x1e0>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b43      	cmp	r3, #67	; 0x43
 8002942:	d11c      	bne.n	800297e <process_key_press+0xde>
			{
				if(char_count != 1)
 8002944:	4b4d      	ldr	r3, [pc, #308]	; (8002a7c <process_key_press+0x1dc>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d006      	beq.n	800295a <process_key_press+0xba>
				{
					printed_c = 'x';
 800294c:	2378      	movs	r3, #120	; 0x78
 800294e:	71fb      	strb	r3, [r7, #7]
					printf("%c", printed_c);
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fbc8 	bl	80030e8 <putchar>
					return;
 8002958:	e08b      	b.n	8002a72 <process_key_press+0x1d2>
				}
				else if(char_count == 1)
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <process_key_press+0x1dc>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 8087 	bne.w	8002a72 <process_key_press+0x1d2>
				{
					calculator_mode = 0;
 8002964:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <process_key_press+0x1d8>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
					clock_mode = 1;
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <process_key_press+0x1e8>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
					temp_mode = 0;
 8002970:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <process_key_press+0x1ec>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
					ds3231_display_count = 0;
 8002976:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <process_key_press+0x1f0>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e079      	b.n	8002a72 <process_key_press+0x1d2>
				}
			}
			else if(c == 'D')
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <process_key_press+0x1e0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b44      	cmp	r3, #68	; 0x44
 8002984:	d106      	bne.n	8002994 <process_key_press+0xf4>
			{
				printed_c = '/';
 8002986:	232f      	movs	r3, #47	; 0x2f
 8002988:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fbab 	bl	80030e8 <putchar>
				return;
 8002992:	e06e      	b.n	8002a72 <process_key_press+0x1d2>
			}
			else if(c == '#')
 8002994:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <process_key_press+0x1e0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b23      	cmp	r3, #35	; 0x23
 800299a:	d114      	bne.n	80029c6 <process_key_press+0x126>
			{
				printed_c = '=';
 800299c:	233d      	movs	r3, #61	; 0x3d
 800299e:	71fb      	strb	r3, [r7, #7]
				printf("%c", printed_c);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fba0 	bl	80030e8 <putchar>
				value = calculation(char_buffer,char_count);
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <process_key_press+0x1dc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	4835      	ldr	r0, [pc, #212]	; (8002a84 <process_key_press+0x1e4>)
 80029b0:	f7ff fd56 	bl	8002460 <calculation>
 80029b4:	6038      	str	r0, [r7, #0]
				printf("%d", value);
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	4836      	ldr	r0, [pc, #216]	; (8002a94 <process_key_press+0x1f4>)
 80029ba:	f000 fb7d 	bl	80030b8 <iprintf>
				char_count = 0;
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <process_key_press+0x1dc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
				return;
 80029c4:	e055      	b.n	8002a72 <process_key_press+0x1d2>
			}
			else if(c == '*')
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <process_key_press+0x1e0>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b2a      	cmp	r3, #42	; 0x2a
 80029cc:	d151      	bne.n	8002a72 <process_key_press+0x1d2>
			{
				char_count = 0;
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <process_key_press+0x1dc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
				lcd_pcf8574_clear_screen();
 80029d4:	f7ff fa8c 	bl	8001ef0 <lcd_pcf8574_clear_screen>
				delay_us(3000);
 80029d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029dc:	f7fd fc58 	bl	8000290 <delay_us>
				lcd_pcf8574_return_home();
 80029e0:	f7ff fa8d 	bl	8001efe <lcd_pcf8574_return_home>
				delay_us(3000);
 80029e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029e8:	f7fd fc52 	bl	8000290 <delay_us>
				printf(">");
 80029ec:	203e      	movs	r0, #62	; 0x3e
 80029ee:	f000 fb7b 	bl	80030e8 <putchar>
				return;
 80029f2:	e03e      	b.n	8002a72 <process_key_press+0x1d2>
			}
		}
	}
	else
	{
		if(c == '*')
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <process_key_press+0x1e0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b2a      	cmp	r3, #42	; 0x2a
 80029fa:	d11b      	bne.n	8002a34 <process_key_press+0x194>
		{
			calculator_mode = 1;
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <process_key_press+0x1d8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
			clock_mode = 0;
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <process_key_press+0x1e8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
			temp_mode = 0;
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <process_key_press+0x1ec>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
			char_count = 0;
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <process_key_press+0x1dc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
			lcd_pcf8574_clear_screen();
 8002a14:	f7ff fa6c 	bl	8001ef0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8002a18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a1c:	f7fd fc38 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8002a20:	f7ff fa6d 	bl	8001efe <lcd_pcf8574_return_home>
			delay_us(3000);
 8002a24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a28:	f7fd fc32 	bl	8000290 <delay_us>
			printf(">");
 8002a2c:	203e      	movs	r0, #62	; 0x3e
 8002a2e:	f000 fb5b 	bl	80030e8 <putchar>
			return;
 8002a32:	e01e      	b.n	8002a72 <process_key_press+0x1d2>
		}
		else if(c == 'A')
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <process_key_press+0x1e0>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b41      	cmp	r3, #65	; 0x41
 8002a3a:	d109      	bne.n	8002a50 <process_key_press+0x1b0>
		{
			calculator_mode = 0;
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <process_key_press+0x1d8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
			clock_mode = 0;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <process_key_press+0x1e8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
			temp_mode = 1;
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <process_key_press+0x1ec>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
			return;
 8002a4e:	e010      	b.n	8002a72 <process_key_press+0x1d2>
		}
		else if(c == 'C')
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <process_key_press+0x1e0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b43      	cmp	r3, #67	; 0x43
 8002a56:	d10c      	bne.n	8002a72 <process_key_press+0x1d2>
		{
			calculator_mode = 0;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <process_key_press+0x1d8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
			clock_mode = 1;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <process_key_press+0x1e8>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
			temp_mode = 0;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <process_key_press+0x1ec>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
			ds3231_display_count = 0;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <process_key_press+0x1f0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
			return;
 8002a70:	bf00      	nop
		}
	}
}
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000136 	.word	0x20000136
 8002a7c:	20000134 	.word	0x20000134
 8002a80:	20000135 	.word	0x20000135
 8002a84:	200000e4 	.word	0x200000e4
 8002a88:	20000028 	.word	0x20000028
 8002a8c:	20000137 	.word	0x20000137
 8002a90:	200000e0 	.word	0x200000e0
 8002a94:	08004134 	.word	0x08004134

08002a98 <disable_interrupts>:

static void disable_interrupts(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	__asm volatile ("CPSID I");
 8002a9c:	b672      	cpsid	i

	return;
 8002a9e:	bf00      	nop
}
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <enable_interrupts>:

static void enable_interrupts(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
	__asm volatile ("CPSIE I");
 8002aaa:	b662      	cpsie	i

	return;
 8002aac:	bf00      	nop
}
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <configure_ds3231_rtc_module>:

static void configure_ds3231_rtc_module(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
	struct RTC_DS3231_Config_t ds3231_rtc_config;
	struct RTC_DS3231_AlarmConfig_t ds3231_rtc_alarm_config;

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 8002aba:	f7fd fc8b 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the DS3231 RTC Calendar Parameters
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fa10 	bl	8002eec <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	763b      	strb	r3, [r7, #24]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	767b      	strb	r3, [r7, #25]
	ds3231_rtc_config.RTCClockMinutesUnits = 8;
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	76bb      	strb	r3, [r7, #26]
	ds3231_rtc_config.RTCClockMinutesTens = 2;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	76fb      	strb	r3, [r7, #27]
	ds3231_rtc_config.RTCClockHoursUnits = 1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	773b      	strb	r3, [r7, #28]
	ds3231_rtc_config.RTCClockHoursTens = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	777b      	strb	r3, [r7, #29]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77bb      	strb	r3, [r7, #30]
	ds3231_rtc_config.RTCClockAMPM = DS3231_RTC_HOUR_AM;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77fb      	strb	r3, [r7, #31]
	ds3231_rtc_config.RTCClockDateUnits = 7;
 8002aec:	2307      	movs	r3, #7
 8002aee:	f887 3020 	strb.w	r3, [r7, #32]
	ds3231_rtc_config.RTCClockDateTens = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ds3231_rtc_config.RTCClockMonthTens = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ds3231_rtc_config.RTCClockYearUnits = 4;
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ds3231_rtc_config.RTCClockYearTens = 2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ds3231_rtc_config.RTCClockDayOfWeek = RTC_CLK_DOW_THU;
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 8002b16:	f107 0318 	add.w	r3, r7, #24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd84 	bl	8000628 <RTC_DS3231_Config_Calendar>
	delay_us(10000);
 8002b20:	f242 7010 	movw	r0, #10000	; 0x2710
 8002b24:	f7fd fbb4 	bl	8000290 <delay_us>

	//Configure the DS3231 RTC Alarm 1 To Generate Interrupt Every Second
	memset(&ds3231_rtc_alarm_config,0,sizeof(ds3231_rtc_alarm_config));
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2211      	movs	r2, #17
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f9dc 	bl	8002eec <memset>
	ds3231_rtc_alarm_config.RTCAlarmSelection = DS3231_RTC_ALARM_1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_alarm_config.RTCAlarmSecondsTens = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_NO;
 8002b40:	2301      	movs	r3, #1
 8002b42:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_alarm_config.RTCAlarmMinutesUnits = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_alarm_config.RTCAlarmMinutesTens = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_NO;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_alarm_config.RTCAlarmHoursUnits = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_alarm_config.RTCAlarmHoursTens = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_alarm_config.RTCAlarmHourFormat = DS3231_RTC_HOUR_FORMAT_12;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_alarm_config.RTCAlarmAMPM = DS3231_RTC_HOUR_PM;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_NO;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_alarm_config.RTCAlarmDateUnits = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_alarm_config.RTCAlarmDateTens = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_alarm_config.RTCAlarmDayOfWeek = RTC_CLK_DOW_FRI;
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	74bb      	strb	r3, [r7, #18]
	ds3231_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8002b70:	2301      	movs	r3, #1
 8002b72:	74fb      	strb	r3, [r7, #19]
	ds3231_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8002b74:	2301      	movs	r3, #1
 8002b76:	753b      	strb	r3, [r7, #20]

	RTC_DS3231_Config_Alarm(&ds3231_rtc_alarm_config);
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f8b0 	bl	8000ce0 <RTC_DS3231_Config_Alarm>
	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_1);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe f99d 	bl	8000ec0 <RTC_DS3231_Clear_Alarm>
	delay_us(10000);
 8002b86:	f242 7010 	movw	r0, #10000	; 0x2710
 8002b8a:	f7fd fb81 	bl	8000290 <delay_us>
	RTC_DS3231_Config_Alarm_Interrupt();
 8002b8e:	f7fe f98b 	bl	8000ea8 <RTC_DS3231_Config_Alarm_Interrupt>

	return;
 8002b92:	bf00      	nop
}
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <EXTI15_10_IRQHandler+0x44>)
 8002ba4:	607b      	str	r3, [r7, #4]

	//Clearing the Alarm Interrupt
	*pEXTI_PR |= (1 << DS3231_RTC_ALARM_INPUT_GPIO_PIN);	//Clearing the EXTI_PR Register
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]

	RTC_DS3231_Clear_Alarm(DS3231_RTC_ALARM_1);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fe f984 	bl	8000ec0 <RTC_DS3231_Clear_Alarm>

	disable_interrupts();
 8002bb8:	f7ff ff6e 	bl	8002a98 <disable_interrupts>

	if(clock_mode == 1)
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <EXTI15_10_IRQHandler+0x48>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <EXTI15_10_IRQHandler+0x38>
	{
		//Update the LCD
		RTC_DS3231_Read_Calendar(&date,&time);
 8002bc4:	4908      	ldr	r1, [pc, #32]	; (8002be8 <EXTI15_10_IRQHandler+0x4c>)
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <EXTI15_10_IRQHandler+0x50>)
 8002bc8:	f7fd fddc 	bl	8000784 <RTC_DS3231_Read_Calendar>
		RTC_DS3231_Display_Calendar_LCD(&date,&time);
 8002bcc:	4906      	ldr	r1, [pc, #24]	; (8002be8 <EXTI15_10_IRQHandler+0x4c>)
 8002bce:	4807      	ldr	r0, [pc, #28]	; (8002bec <EXTI15_10_IRQHandler+0x50>)
 8002bd0:	f7fd fea8 	bl	8000924 <RTC_DS3231_Display_Calendar_LCD>
	}

	enable_interrupts();
 8002bd4:	f7ff ff67 	bl	8002aa6 <enable_interrupts>

	return;
 8002bd8:	bf00      	nop
}
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40013c14 	.word	0x40013c14
 8002be4:	20000028 	.word	0x20000028
 8002be8:	2000013c 	.word	0x2000013c
 8002bec:	20000138 	.word	0x20000138

08002bf0 <configure_timer5>:

static void configure_timer5(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	TIM5_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM5;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <configure_timer5+0x44>)
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <configure_timer5+0x48>)
 8002bf8:	601a      	str	r2, [r3, #0]
	memset(&TIM5_Handle.General_Purpose_Timer_Config,0,sizeof(TIM5_Handle.General_Purpose_Timer_Config));
 8002bfa:	2228      	movs	r2, #40	; 0x28
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	480f      	ldr	r0, [pc, #60]	; (8002c3c <configure_timer5+0x4c>)
 8002c00:	f000 f974 	bl	8002eec <memset>
	TIM5_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <configure_timer5+0x44>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
	TIM5_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0x4C4B400;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <configure_timer5+0x44>)
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <configure_timer5+0x50>)
 8002c0e:	609a      	str	r2, [r3, #8]
	TIM5_Handle.General_Purpose_Timer_Config.Timer_UpdateInterruptConfig = TIMER_UPDATE_INTERRUPT_ENABLE;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <configure_timer5+0x44>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	731a      	strb	r2, [r3, #12]

	EnablePeriClk(TIM5);
 8002c16:	4808      	ldr	r0, [pc, #32]	; (8002c38 <configure_timer5+0x48>)
 8002c18:	f7ff f9c8 	bl	8001fac <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM5_Handle);
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <configure_timer5+0x44>)
 8002c1e:	f7fe fb45 	bl	80012ac <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM5_Handle);
 8002c22:	4804      	ldr	r0, [pc, #16]	; (8002c34 <configure_timer5+0x44>)
 8002c24:	f7fe fd83 	bl	800172e <General_Purpose_Timer_PeripheralEnable>

	NVIC_EnableIRQ(TIMER5_IRQ_NUM);
 8002c28:	2032      	movs	r0, #50	; 0x32
 8002c2a:	f7ff fb83 	bl	8002334 <NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000140 	.word	0x20000140
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	20000144 	.word	0x20000144
 8002c40:	04c4b400 	.word	0x04c4b400

08002c44 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	//DHT11 Sensor Related Variables
	uint8_t dht11_sensor_response;
	uint8_t dht11_sensor_data[5];

	disable_interrupts();
 8002c4a:	f7ff ff25 	bl	8002a98 <disable_interrupts>

	if(temp_mode == 1)
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <TIM5_IRQHandler+0x9c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d13d      	bne.n	8002cd2 <TIM5_IRQHandler+0x8e>
	{
		//Read the DHT11 Sensor
		dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 8002c56:	463b      	mov	r3, r7
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc5d 	bl	8000518 <read_dht11_sensor>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]

		if(dht11_sensor_response)
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d022      	beq.n	8002cae <TIM5_IRQHandler+0x6a>
		{
			//Ensure that printf() is redirected to LCD in "syscalls.c" file
			//Print RH Data
			lcd_pcf8574_clear_screen();
 8002c68:	f7ff f942 	bl	8001ef0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8002c6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c70:	f7fd fb0e 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8002c74:	f7ff f943 	bl	8001efe <lcd_pcf8574_return_home>
			delay_us(3000);
 8002c78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c7c:	f7fd fb08 	bl	8000290 <delay_us>
			printf("RH:   %2d.%d %%",dht11_sensor_data[0],dht11_sensor_data[1]);
 8002c80:	783b      	ldrb	r3, [r7, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <TIM5_IRQHandler+0xa0>)
 8002c8a:	f000 fa15 	bl	80030b8 <iprintf>

			//Print TEMP Data
			lcd_pcf8574_set_position(1,0);
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7ff f93b 	bl	8001f0c <lcd_pcf8574_set_position>
			delay_us(3000);
 8002c96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c9a:	f7fd faf9 	bl	8000290 <delay_us>
			printf("TEMP: %2d.%d C",dht11_sensor_data[2],dht11_sensor_data[3]);
 8002c9e:	78bb      	ldrb	r3, [r7, #2]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <TIM5_IRQHandler+0xa4>)
 8002ca8:	f000 fa06 	bl	80030b8 <iprintf>
 8002cac:	e00e      	b.n	8002ccc <TIM5_IRQHandler+0x88>
		}
		else
		{
			lcd_pcf8574_clear_screen();
 8002cae:	f7ff f91f 	bl	8001ef0 <lcd_pcf8574_clear_screen>
			delay_us(3000);
 8002cb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cb6:	f7fd faeb 	bl	8000290 <delay_us>
			lcd_pcf8574_return_home();
 8002cba:	f7ff f920 	bl	8001efe <lcd_pcf8574_return_home>
			delay_us(3000);
 8002cbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cc2:	f7fd fae5 	bl	8000290 <delay_us>
			printf("Sensor Read Failed");
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <TIM5_IRQHandler+0xa8>)
 8002cc8:	f000 f9f6 	bl	80030b8 <iprintf>
		}

		//Clear the TIM5 Interrupt
		General_Purpose_Timer_ClearUpdateEventFlag(&TIM5_Handle);
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <TIM5_IRQHandler+0xac>)
 8002cce:	f7fe fd3f 	bl	8001750 <General_Purpose_Timer_ClearUpdateEventFlag>
	}

	enable_interrupts();
 8002cd2:	f7ff fee8 	bl	8002aa6 <enable_interrupts>

	return;
 8002cd6:	bf00      	nop
}
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000137 	.word	0x20000137
 8002ce4:	08004138 	.word	0x08004138
 8002ce8:	08004148 	.word	0x08004148
 8002cec:	08004158 	.word	0x08004158
 8002cf0:	20000140 	.word	0x20000140

08002cf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
  }

  return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fbab 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
  }
  return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <_isatty>:

int _isatty(int file)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f000 f846 	bl	8002e88 <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <_sbrk+0x64>)
 8002e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20020000 	.word	0x20020000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	2000016c 	.word	0x2000016c
 8002e30:	20000180 	.word	0x20000180

08002e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e3e:	490d      	ldr	r1, [pc, #52]	; (8002e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <LoopForever+0xe>)
  movs r3, #0
 8002e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e44:	e002      	b.n	8002e4c <LoopCopyDataInit>

08002e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4a:	3304      	adds	r3, #4

08002e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e50:	d3f9      	bcc.n	8002e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e54:	4c0a      	ldr	r4, [pc, #40]	; (8002e80 <LoopForever+0x16>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e58:	e001      	b.n	8002e5e <LoopFillZerobss>

08002e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e5c:	3204      	adds	r2, #4

08002e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e60:	d3fb      	bcc.n	8002e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e62:	f000 f817 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e66:	f7ff fa87 	bl	8002378 <main>

08002e6a <LoopForever>:

LoopForever:
  b LoopForever
 8002e6a:	e7fe      	b.n	8002e6a <LoopForever>
  ldr   r0, =_estack
 8002e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e74:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e78:	0800420c 	.word	0x0800420c
  ldr r2, =_sbss
 8002e7c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e80:	20000180 	.word	0x20000180

08002e84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC_IRQHandler>
	...

08002e88 <__errno>:
 8002e88:	4b01      	ldr	r3, [pc, #4]	; (8002e90 <__errno+0x8>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000002c 	.word	0x2000002c

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4d0d      	ldr	r5, [pc, #52]	; (8002ecc <__libc_init_array+0x38>)
 8002e98:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	4d0b      	ldr	r5, [pc, #44]	; (8002ed4 <__libc_init_array+0x40>)
 8002ea6:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <__libc_init_array+0x44>)
 8002ea8:	f001 f8d8 	bl	800405c <_init>
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08004204 	.word	0x08004204
 8002ed0:	08004204 	.word	0x08004204
 8002ed4:	08004204 	.word	0x08004204
 8002ed8:	08004208 	.word	0x08004208

08002edc <malloc>:
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <malloc+0xc>)
 8002ede:	4601      	mov	r1, r0
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	f000 b875 	b.w	8002fd0 <_malloc_r>
 8002ee6:	bf00      	nop
 8002ee8:	2000002c 	.word	0x2000002c

08002eec <memset>:
 8002eec:	4402      	add	r2, r0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d041      	beq.n	8002f88 <_free_r+0x8c>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 fcb8 	bl	8003884 <__malloc_lock>
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <_free_r+0x90>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	b933      	cbnz	r3, 8002f28 <_free_r+0x2c>
 8002f1a:	6063      	str	r3, [r4, #4]
 8002f1c:	6014      	str	r4, [r2, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f24:	f000 bcb4 	b.w	8003890 <__malloc_unlock>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d908      	bls.n	8002f3e <_free_r+0x42>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	bf01      	itttt	eq
 8002f34:	6819      	ldreq	r1, [r3, #0]
 8002f36:	685b      	ldreq	r3, [r3, #4]
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	e7ed      	b.n	8002f1a <_free_r+0x1e>
 8002f3e:	461a      	mov	r2, r3
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b10b      	cbz	r3, 8002f48 <_free_r+0x4c>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d9fa      	bls.n	8002f3e <_free_r+0x42>
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	1850      	adds	r0, r2, r1
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d10b      	bne.n	8002f68 <_free_r+0x6c>
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	4401      	add	r1, r0
 8002f54:	1850      	adds	r0, r2, r1
 8002f56:	4283      	cmp	r3, r0
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	d1e0      	bne.n	8002f1e <_free_r+0x22>
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6053      	str	r3, [r2, #4]
 8002f62:	4401      	add	r1, r0
 8002f64:	6011      	str	r1, [r2, #0]
 8002f66:	e7da      	b.n	8002f1e <_free_r+0x22>
 8002f68:	d902      	bls.n	8002f70 <_free_r+0x74>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	e7d6      	b.n	8002f1e <_free_r+0x22>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	bf04      	itt	eq
 8002f78:	6819      	ldreq	r1, [r3, #0]
 8002f7a:	685b      	ldreq	r3, [r3, #4]
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	bf04      	itt	eq
 8002f80:	1809      	addeq	r1, r1, r0
 8002f82:	6021      	streq	r1, [r4, #0]
 8002f84:	6054      	str	r4, [r2, #4]
 8002f86:	e7ca      	b.n	8002f1e <_free_r+0x22>
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000170 	.word	0x20000170

08002f90 <sbrk_aligned>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4e0e      	ldr	r6, [pc, #56]	; (8002fcc <sbrk_aligned+0x3c>)
 8002f94:	460c      	mov	r4, r1
 8002f96:	6831      	ldr	r1, [r6, #0]
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b911      	cbnz	r1, 8002fa2 <sbrk_aligned+0x12>
 8002f9c:	f000 f8b8 	bl	8003110 <_sbrk_r>
 8002fa0:	6030      	str	r0, [r6, #0]
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 f8b3 	bl	8003110 <_sbrk_r>
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d00a      	beq.n	8002fc4 <sbrk_aligned+0x34>
 8002fae:	1cc4      	adds	r4, r0, #3
 8002fb0:	f024 0403 	bic.w	r4, r4, #3
 8002fb4:	42a0      	cmp	r0, r4
 8002fb6:	d007      	beq.n	8002fc8 <sbrk_aligned+0x38>
 8002fb8:	1a21      	subs	r1, r4, r0
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 f8a8 	bl	8003110 <_sbrk_r>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d101      	bne.n	8002fc8 <sbrk_aligned+0x38>
 8002fc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fc8:	4620      	mov	r0, r4
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	20000174 	.word	0x20000174

08002fd0 <_malloc_r>:
 8002fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd4:	1ccd      	adds	r5, r1, #3
 8002fd6:	f025 0503 	bic.w	r5, r5, #3
 8002fda:	3508      	adds	r5, #8
 8002fdc:	2d0c      	cmp	r5, #12
 8002fde:	bf38      	it	cc
 8002fe0:	250c      	movcc	r5, #12
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	4607      	mov	r7, r0
 8002fe6:	db01      	blt.n	8002fec <_malloc_r+0x1c>
 8002fe8:	42a9      	cmp	r1, r5
 8002fea:	d905      	bls.n	8002ff8 <_malloc_r+0x28>
 8002fec:	230c      	movs	r3, #12
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff8:	4e2e      	ldr	r6, [pc, #184]	; (80030b4 <_malloc_r+0xe4>)
 8002ffa:	f000 fc43 	bl	8003884 <__malloc_lock>
 8002ffe:	6833      	ldr	r3, [r6, #0]
 8003000:	461c      	mov	r4, r3
 8003002:	bb34      	cbnz	r4, 8003052 <_malloc_r+0x82>
 8003004:	4629      	mov	r1, r5
 8003006:	4638      	mov	r0, r7
 8003008:	f7ff ffc2 	bl	8002f90 <sbrk_aligned>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	4604      	mov	r4, r0
 8003010:	d14d      	bne.n	80030ae <_malloc_r+0xde>
 8003012:	6834      	ldr	r4, [r6, #0]
 8003014:	4626      	mov	r6, r4
 8003016:	2e00      	cmp	r6, #0
 8003018:	d140      	bne.n	800309c <_malloc_r+0xcc>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	4631      	mov	r1, r6
 800301e:	4638      	mov	r0, r7
 8003020:	eb04 0803 	add.w	r8, r4, r3
 8003024:	f000 f874 	bl	8003110 <_sbrk_r>
 8003028:	4580      	cmp	r8, r0
 800302a:	d13a      	bne.n	80030a2 <_malloc_r+0xd2>
 800302c:	6821      	ldr	r1, [r4, #0]
 800302e:	3503      	adds	r5, #3
 8003030:	1a6d      	subs	r5, r5, r1
 8003032:	f025 0503 	bic.w	r5, r5, #3
 8003036:	3508      	adds	r5, #8
 8003038:	2d0c      	cmp	r5, #12
 800303a:	bf38      	it	cc
 800303c:	250c      	movcc	r5, #12
 800303e:	4629      	mov	r1, r5
 8003040:	4638      	mov	r0, r7
 8003042:	f7ff ffa5 	bl	8002f90 <sbrk_aligned>
 8003046:	3001      	adds	r0, #1
 8003048:	d02b      	beq.n	80030a2 <_malloc_r+0xd2>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	442b      	add	r3, r5
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	e00e      	b.n	8003070 <_malloc_r+0xa0>
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	1b52      	subs	r2, r2, r5
 8003056:	d41e      	bmi.n	8003096 <_malloc_r+0xc6>
 8003058:	2a0b      	cmp	r2, #11
 800305a:	d916      	bls.n	800308a <_malloc_r+0xba>
 800305c:	1961      	adds	r1, r4, r5
 800305e:	42a3      	cmp	r3, r4
 8003060:	6025      	str	r5, [r4, #0]
 8003062:	bf18      	it	ne
 8003064:	6059      	strne	r1, [r3, #4]
 8003066:	6863      	ldr	r3, [r4, #4]
 8003068:	bf08      	it	eq
 800306a:	6031      	streq	r1, [r6, #0]
 800306c:	5162      	str	r2, [r4, r5]
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	4638      	mov	r0, r7
 8003072:	f104 060b 	add.w	r6, r4, #11
 8003076:	f000 fc0b 	bl	8003890 <__malloc_unlock>
 800307a:	f026 0607 	bic.w	r6, r6, #7
 800307e:	1d23      	adds	r3, r4, #4
 8003080:	1af2      	subs	r2, r6, r3
 8003082:	d0b6      	beq.n	8002ff2 <_malloc_r+0x22>
 8003084:	1b9b      	subs	r3, r3, r6
 8003086:	50a3      	str	r3, [r4, r2]
 8003088:	e7b3      	b.n	8002ff2 <_malloc_r+0x22>
 800308a:	6862      	ldr	r2, [r4, #4]
 800308c:	42a3      	cmp	r3, r4
 800308e:	bf0c      	ite	eq
 8003090:	6032      	streq	r2, [r6, #0]
 8003092:	605a      	strne	r2, [r3, #4]
 8003094:	e7ec      	b.n	8003070 <_malloc_r+0xa0>
 8003096:	4623      	mov	r3, r4
 8003098:	6864      	ldr	r4, [r4, #4]
 800309a:	e7b2      	b.n	8003002 <_malloc_r+0x32>
 800309c:	4634      	mov	r4, r6
 800309e:	6876      	ldr	r6, [r6, #4]
 80030a0:	e7b9      	b.n	8003016 <_malloc_r+0x46>
 80030a2:	230c      	movs	r3, #12
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4638      	mov	r0, r7
 80030a8:	f000 fbf2 	bl	8003890 <__malloc_unlock>
 80030ac:	e7a1      	b.n	8002ff2 <_malloc_r+0x22>
 80030ae:	6025      	str	r5, [r4, #0]
 80030b0:	e7de      	b.n	8003070 <_malloc_r+0xa0>
 80030b2:	bf00      	nop
 80030b4:	20000170 	.word	0x20000170

080030b8 <iprintf>:
 80030b8:	b40f      	push	{r0, r1, r2, r3}
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <iprintf+0x2c>)
 80030bc:	b513      	push	{r0, r1, r4, lr}
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	b124      	cbz	r4, 80030cc <iprintf+0x14>
 80030c2:	69a3      	ldr	r3, [r4, #24]
 80030c4:	b913      	cbnz	r3, 80030cc <iprintf+0x14>
 80030c6:	4620      	mov	r0, r4
 80030c8:	f000 fad6 	bl	8003678 <__sinit>
 80030cc:	ab05      	add	r3, sp, #20
 80030ce:	9a04      	ldr	r2, [sp, #16]
 80030d0:	68a1      	ldr	r1, [r4, #8]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	4620      	mov	r0, r4
 80030d6:	f000 fc09 	bl	80038ec <_vfiprintf_r>
 80030da:	b002      	add	sp, #8
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e0:	b004      	add	sp, #16
 80030e2:	4770      	bx	lr
 80030e4:	2000002c 	.word	0x2000002c

080030e8 <putchar>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <putchar+0x24>)
 80030ec:	681c      	ldr	r4, [r3, #0]
 80030ee:	4605      	mov	r5, r0
 80030f0:	b124      	cbz	r4, 80030fc <putchar+0x14>
 80030f2:	69a3      	ldr	r3, [r4, #24]
 80030f4:	b913      	cbnz	r3, 80030fc <putchar+0x14>
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 fabe 	bl	8003678 <__sinit>
 80030fc:	68a2      	ldr	r2, [r4, #8]
 80030fe:	4629      	mov	r1, r5
 8003100:	4620      	mov	r0, r4
 8003102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003106:	f000 beb5 	b.w	8003e74 <_putc_r>
 800310a:	bf00      	nop
 800310c:	2000002c 	.word	0x2000002c

08003110 <_sbrk_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4d06      	ldr	r5, [pc, #24]	; (800312c <_sbrk_r+0x1c>)
 8003114:	2300      	movs	r3, #0
 8003116:	4604      	mov	r4, r0
 8003118:	4608      	mov	r0, r1
 800311a:	602b      	str	r3, [r5, #0]
 800311c:	f7ff fe54 	bl	8002dc8 <_sbrk>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d102      	bne.n	800312a <_sbrk_r+0x1a>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	b103      	cbz	r3, 800312a <_sbrk_r+0x1a>
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	2000017c 	.word	0x2000017c

08003130 <setbuf>:
 8003130:	2900      	cmp	r1, #0
 8003132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003136:	bf0c      	ite	eq
 8003138:	2202      	moveq	r2, #2
 800313a:	2200      	movne	r2, #0
 800313c:	f000 b800 	b.w	8003140 <setvbuf>

08003140 <setvbuf>:
 8003140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003144:	461d      	mov	r5, r3
 8003146:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <setvbuf+0x17c>)
 8003148:	681f      	ldr	r7, [r3, #0]
 800314a:	4604      	mov	r4, r0
 800314c:	460e      	mov	r6, r1
 800314e:	4690      	mov	r8, r2
 8003150:	b127      	cbz	r7, 800315c <setvbuf+0x1c>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	b913      	cbnz	r3, 800315c <setvbuf+0x1c>
 8003156:	4638      	mov	r0, r7
 8003158:	f000 fa8e 	bl	8003678 <__sinit>
 800315c:	4b58      	ldr	r3, [pc, #352]	; (80032c0 <setvbuf+0x180>)
 800315e:	429c      	cmp	r4, r3
 8003160:	d167      	bne.n	8003232 <setvbuf+0xf2>
 8003162:	687c      	ldr	r4, [r7, #4]
 8003164:	f1b8 0f02 	cmp.w	r8, #2
 8003168:	d006      	beq.n	8003178 <setvbuf+0x38>
 800316a:	f1b8 0f01 	cmp.w	r8, #1
 800316e:	f200 809f 	bhi.w	80032b0 <setvbuf+0x170>
 8003172:	2d00      	cmp	r5, #0
 8003174:	f2c0 809c 	blt.w	80032b0 <setvbuf+0x170>
 8003178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800317a:	07db      	lsls	r3, r3, #31
 800317c:	d405      	bmi.n	800318a <setvbuf+0x4a>
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	0598      	lsls	r0, r3, #22
 8003182:	d402      	bmi.n	800318a <setvbuf+0x4a>
 8003184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003186:	f000 fb15 	bl	80037b4 <__retarget_lock_acquire_recursive>
 800318a:	4621      	mov	r1, r4
 800318c:	4638      	mov	r0, r7
 800318e:	f000 f9df 	bl	8003550 <_fflush_r>
 8003192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003194:	b141      	cbz	r1, 80031a8 <setvbuf+0x68>
 8003196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800319a:	4299      	cmp	r1, r3
 800319c:	d002      	beq.n	80031a4 <setvbuf+0x64>
 800319e:	4638      	mov	r0, r7
 80031a0:	f7ff feac 	bl	8002efc <_free_r>
 80031a4:	2300      	movs	r3, #0
 80031a6:	6363      	str	r3, [r4, #52]	; 0x34
 80031a8:	2300      	movs	r3, #0
 80031aa:	61a3      	str	r3, [r4, #24]
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	0619      	lsls	r1, r3, #24
 80031b2:	d503      	bpl.n	80031bc <setvbuf+0x7c>
 80031b4:	6921      	ldr	r1, [r4, #16]
 80031b6:	4638      	mov	r0, r7
 80031b8:	f7ff fea0 	bl	8002efc <_free_r>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	f1b8 0f02 	cmp.w	r8, #2
 80031ca:	81a3      	strh	r3, [r4, #12]
 80031cc:	d06c      	beq.n	80032a8 <setvbuf+0x168>
 80031ce:	ab01      	add	r3, sp, #4
 80031d0:	466a      	mov	r2, sp
 80031d2:	4621      	mov	r1, r4
 80031d4:	4638      	mov	r0, r7
 80031d6:	f000 faef 	bl	80037b8 <__swhatbuf_r>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	4318      	orrs	r0, r3
 80031de:	81a0      	strh	r0, [r4, #12]
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d130      	bne.n	8003246 <setvbuf+0x106>
 80031e4:	9d00      	ldr	r5, [sp, #0]
 80031e6:	4628      	mov	r0, r5
 80031e8:	f7ff fe78 	bl	8002edc <malloc>
 80031ec:	4606      	mov	r6, r0
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d155      	bne.n	800329e <setvbuf+0x15e>
 80031f2:	f8dd 9000 	ldr.w	r9, [sp]
 80031f6:	45a9      	cmp	r9, r5
 80031f8:	d14a      	bne.n	8003290 <setvbuf+0x150>
 80031fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031fe:	2200      	movs	r2, #0
 8003200:	60a2      	str	r2, [r4, #8]
 8003202:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003206:	6022      	str	r2, [r4, #0]
 8003208:	6122      	str	r2, [r4, #16]
 800320a:	2201      	movs	r2, #1
 800320c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003210:	6162      	str	r2, [r4, #20]
 8003212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	07d2      	lsls	r2, r2, #31
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	d405      	bmi.n	800322a <setvbuf+0xea>
 800321e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003222:	d102      	bne.n	800322a <setvbuf+0xea>
 8003224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003226:	f000 fac6 	bl	80037b6 <__retarget_lock_release_recursive>
 800322a:	4628      	mov	r0, r5
 800322c:	b003      	add	sp, #12
 800322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <setvbuf+0x184>)
 8003234:	429c      	cmp	r4, r3
 8003236:	d101      	bne.n	800323c <setvbuf+0xfc>
 8003238:	68bc      	ldr	r4, [r7, #8]
 800323a:	e793      	b.n	8003164 <setvbuf+0x24>
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <setvbuf+0x188>)
 800323e:	429c      	cmp	r4, r3
 8003240:	bf08      	it	eq
 8003242:	68fc      	ldreq	r4, [r7, #12]
 8003244:	e78e      	b.n	8003164 <setvbuf+0x24>
 8003246:	2e00      	cmp	r6, #0
 8003248:	d0cd      	beq.n	80031e6 <setvbuf+0xa6>
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	b913      	cbnz	r3, 8003254 <setvbuf+0x114>
 800324e:	4638      	mov	r0, r7
 8003250:	f000 fa12 	bl	8003678 <__sinit>
 8003254:	f1b8 0f01 	cmp.w	r8, #1
 8003258:	bf08      	it	eq
 800325a:	89a3      	ldrheq	r3, [r4, #12]
 800325c:	6026      	str	r6, [r4, #0]
 800325e:	bf04      	itt	eq
 8003260:	f043 0301 	orreq.w	r3, r3, #1
 8003264:	81a3      	strheq	r3, [r4, #12]
 8003266:	89a2      	ldrh	r2, [r4, #12]
 8003268:	f012 0308 	ands.w	r3, r2, #8
 800326c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003270:	d01c      	beq.n	80032ac <setvbuf+0x16c>
 8003272:	07d3      	lsls	r3, r2, #31
 8003274:	bf41      	itttt	mi
 8003276:	2300      	movmi	r3, #0
 8003278:	426d      	negmi	r5, r5
 800327a:	60a3      	strmi	r3, [r4, #8]
 800327c:	61a5      	strmi	r5, [r4, #24]
 800327e:	bf58      	it	pl
 8003280:	60a5      	strpl	r5, [r4, #8]
 8003282:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003284:	f015 0501 	ands.w	r5, r5, #1
 8003288:	d115      	bne.n	80032b6 <setvbuf+0x176>
 800328a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800328e:	e7c8      	b.n	8003222 <setvbuf+0xe2>
 8003290:	4648      	mov	r0, r9
 8003292:	f7ff fe23 	bl	8002edc <malloc>
 8003296:	4606      	mov	r6, r0
 8003298:	2800      	cmp	r0, #0
 800329a:	d0ae      	beq.n	80031fa <setvbuf+0xba>
 800329c:	464d      	mov	r5, r9
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	e7d0      	b.n	800324a <setvbuf+0x10a>
 80032a8:	2500      	movs	r5, #0
 80032aa:	e7a8      	b.n	80031fe <setvbuf+0xbe>
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	e7e8      	b.n	8003282 <setvbuf+0x142>
 80032b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80032b4:	e7b9      	b.n	800322a <setvbuf+0xea>
 80032b6:	2500      	movs	r5, #0
 80032b8:	e7b7      	b.n	800322a <setvbuf+0xea>
 80032ba:	bf00      	nop
 80032bc:	2000002c 	.word	0x2000002c
 80032c0:	08004190 	.word	0x08004190
 80032c4:	080041b0 	.word	0x080041b0
 80032c8:	08004170 	.word	0x08004170

080032cc <__swbuf_r>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	460e      	mov	r6, r1
 80032d0:	4614      	mov	r4, r2
 80032d2:	4605      	mov	r5, r0
 80032d4:	b118      	cbz	r0, 80032de <__swbuf_r+0x12>
 80032d6:	6983      	ldr	r3, [r0, #24]
 80032d8:	b90b      	cbnz	r3, 80032de <__swbuf_r+0x12>
 80032da:	f000 f9cd 	bl	8003678 <__sinit>
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <__swbuf_r+0x98>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	d12b      	bne.n	800333c <__swbuf_r+0x70>
 80032e4:	686c      	ldr	r4, [r5, #4]
 80032e6:	69a3      	ldr	r3, [r4, #24]
 80032e8:	60a3      	str	r3, [r4, #8]
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	071a      	lsls	r2, r3, #28
 80032ee:	d52f      	bpl.n	8003350 <__swbuf_r+0x84>
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	b36b      	cbz	r3, 8003350 <__swbuf_r+0x84>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	1ac0      	subs	r0, r0, r3
 80032fa:	6963      	ldr	r3, [r4, #20]
 80032fc:	b2f6      	uxtb	r6, r6
 80032fe:	4283      	cmp	r3, r0
 8003300:	4637      	mov	r7, r6
 8003302:	dc04      	bgt.n	800330e <__swbuf_r+0x42>
 8003304:	4621      	mov	r1, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 f922 	bl	8003550 <_fflush_r>
 800330c:	bb30      	cbnz	r0, 800335c <__swbuf_r+0x90>
 800330e:	68a3      	ldr	r3, [r4, #8]
 8003310:	3b01      	subs	r3, #1
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	701e      	strb	r6, [r3, #0]
 800331c:	6963      	ldr	r3, [r4, #20]
 800331e:	3001      	adds	r0, #1
 8003320:	4283      	cmp	r3, r0
 8003322:	d004      	beq.n	800332e <__swbuf_r+0x62>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	07db      	lsls	r3, r3, #31
 8003328:	d506      	bpl.n	8003338 <__swbuf_r+0x6c>
 800332a:	2e0a      	cmp	r6, #10
 800332c:	d104      	bne.n	8003338 <__swbuf_r+0x6c>
 800332e:	4621      	mov	r1, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f000 f90d 	bl	8003550 <_fflush_r>
 8003336:	b988      	cbnz	r0, 800335c <__swbuf_r+0x90>
 8003338:	4638      	mov	r0, r7
 800333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <__swbuf_r+0x9c>)
 800333e:	429c      	cmp	r4, r3
 8003340:	d101      	bne.n	8003346 <__swbuf_r+0x7a>
 8003342:	68ac      	ldr	r4, [r5, #8]
 8003344:	e7cf      	b.n	80032e6 <__swbuf_r+0x1a>
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <__swbuf_r+0xa0>)
 8003348:	429c      	cmp	r4, r3
 800334a:	bf08      	it	eq
 800334c:	68ec      	ldreq	r4, [r5, #12]
 800334e:	e7ca      	b.n	80032e6 <__swbuf_r+0x1a>
 8003350:	4621      	mov	r1, r4
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f80c 	bl	8003370 <__swsetup_r>
 8003358:	2800      	cmp	r0, #0
 800335a:	d0cb      	beq.n	80032f4 <__swbuf_r+0x28>
 800335c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003360:	e7ea      	b.n	8003338 <__swbuf_r+0x6c>
 8003362:	bf00      	nop
 8003364:	08004190 	.word	0x08004190
 8003368:	080041b0 	.word	0x080041b0
 800336c:	08004170 	.word	0x08004170

08003370 <__swsetup_r>:
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <__swsetup_r+0xcc>)
 8003372:	b570      	push	{r4, r5, r6, lr}
 8003374:	681d      	ldr	r5, [r3, #0]
 8003376:	4606      	mov	r6, r0
 8003378:	460c      	mov	r4, r1
 800337a:	b125      	cbz	r5, 8003386 <__swsetup_r+0x16>
 800337c:	69ab      	ldr	r3, [r5, #24]
 800337e:	b913      	cbnz	r3, 8003386 <__swsetup_r+0x16>
 8003380:	4628      	mov	r0, r5
 8003382:	f000 f979 	bl	8003678 <__sinit>
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <__swsetup_r+0xd0>)
 8003388:	429c      	cmp	r4, r3
 800338a:	d10f      	bne.n	80033ac <__swsetup_r+0x3c>
 800338c:	686c      	ldr	r4, [r5, #4]
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003394:	0719      	lsls	r1, r3, #28
 8003396:	d42c      	bmi.n	80033f2 <__swsetup_r+0x82>
 8003398:	06dd      	lsls	r5, r3, #27
 800339a:	d411      	bmi.n	80033c0 <__swsetup_r+0x50>
 800339c:	2309      	movs	r3, #9
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033a4:	81a3      	strh	r3, [r4, #12]
 80033a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033aa:	e03e      	b.n	800342a <__swsetup_r+0xba>
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <__swsetup_r+0xd4>)
 80033ae:	429c      	cmp	r4, r3
 80033b0:	d101      	bne.n	80033b6 <__swsetup_r+0x46>
 80033b2:	68ac      	ldr	r4, [r5, #8]
 80033b4:	e7eb      	b.n	800338e <__swsetup_r+0x1e>
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <__swsetup_r+0xd8>)
 80033b8:	429c      	cmp	r4, r3
 80033ba:	bf08      	it	eq
 80033bc:	68ec      	ldreq	r4, [r5, #12]
 80033be:	e7e6      	b.n	800338e <__swsetup_r+0x1e>
 80033c0:	0758      	lsls	r0, r3, #29
 80033c2:	d512      	bpl.n	80033ea <__swsetup_r+0x7a>
 80033c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c6:	b141      	cbz	r1, 80033da <__swsetup_r+0x6a>
 80033c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d002      	beq.n	80033d6 <__swsetup_r+0x66>
 80033d0:	4630      	mov	r0, r6
 80033d2:	f7ff fd93 	bl	8002efc <_free_r>
 80033d6:	2300      	movs	r3, #0
 80033d8:	6363      	str	r3, [r4, #52]	; 0x34
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	2300      	movs	r3, #0
 80033e4:	6063      	str	r3, [r4, #4]
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	6923      	ldr	r3, [r4, #16]
 80033f4:	b94b      	cbnz	r3, 800340a <__swsetup_r+0x9a>
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d003      	beq.n	800340a <__swsetup_r+0x9a>
 8003402:	4621      	mov	r1, r4
 8003404:	4630      	mov	r0, r6
 8003406:	f000 f9fd 	bl	8003804 <__smakebuf_r>
 800340a:	89a0      	ldrh	r0, [r4, #12]
 800340c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003410:	f010 0301 	ands.w	r3, r0, #1
 8003414:	d00a      	beq.n	800342c <__swsetup_r+0xbc>
 8003416:	2300      	movs	r3, #0
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	6963      	ldr	r3, [r4, #20]
 800341c:	425b      	negs	r3, r3
 800341e:	61a3      	str	r3, [r4, #24]
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	b943      	cbnz	r3, 8003436 <__swsetup_r+0xc6>
 8003424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003428:	d1ba      	bne.n	80033a0 <__swsetup_r+0x30>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	0781      	lsls	r1, r0, #30
 800342e:	bf58      	it	pl
 8003430:	6963      	ldrpl	r3, [r4, #20]
 8003432:	60a3      	str	r3, [r4, #8]
 8003434:	e7f4      	b.n	8003420 <__swsetup_r+0xb0>
 8003436:	2000      	movs	r0, #0
 8003438:	e7f7      	b.n	800342a <__swsetup_r+0xba>
 800343a:	bf00      	nop
 800343c:	2000002c 	.word	0x2000002c
 8003440:	08004190 	.word	0x08004190
 8003444:	080041b0 	.word	0x080041b0
 8003448:	08004170 	.word	0x08004170

0800344c <__sflush_r>:
 800344c:	898a      	ldrh	r2, [r1, #12]
 800344e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003450:	4605      	mov	r5, r0
 8003452:	0710      	lsls	r0, r2, #28
 8003454:	460c      	mov	r4, r1
 8003456:	d457      	bmi.n	8003508 <__sflush_r+0xbc>
 8003458:	684b      	ldr	r3, [r1, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	dc04      	bgt.n	8003468 <__sflush_r+0x1c>
 800345e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	dc01      	bgt.n	8003468 <__sflush_r+0x1c>
 8003464:	2000      	movs	r0, #0
 8003466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800346a:	2e00      	cmp	r6, #0
 800346c:	d0fa      	beq.n	8003464 <__sflush_r+0x18>
 800346e:	2300      	movs	r3, #0
 8003470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003474:	682f      	ldr	r7, [r5, #0]
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	d032      	beq.n	80034e0 <__sflush_r+0x94>
 800347a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	075a      	lsls	r2, r3, #29
 8003480:	d505      	bpl.n	800348e <__sflush_r+0x42>
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	1ac0      	subs	r0, r0, r3
 8003486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003488:	b10b      	cbz	r3, 800348e <__sflush_r+0x42>
 800348a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800348c:	1ac0      	subs	r0, r0, r3
 800348e:	2300      	movs	r3, #0
 8003490:	4602      	mov	r2, r0
 8003492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003494:	6a21      	ldr	r1, [r4, #32]
 8003496:	4628      	mov	r0, r5
 8003498:	47b0      	blx	r6
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	d106      	bne.n	80034ae <__sflush_r+0x62>
 80034a0:	6829      	ldr	r1, [r5, #0]
 80034a2:	291d      	cmp	r1, #29
 80034a4:	d82c      	bhi.n	8003500 <__sflush_r+0xb4>
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <__sflush_r+0x100>)
 80034a8:	40ca      	lsrs	r2, r1
 80034aa:	07d6      	lsls	r6, r2, #31
 80034ac:	d528      	bpl.n	8003500 <__sflush_r+0xb4>
 80034ae:	2200      	movs	r2, #0
 80034b0:	6062      	str	r2, [r4, #4]
 80034b2:	04d9      	lsls	r1, r3, #19
 80034b4:	6922      	ldr	r2, [r4, #16]
 80034b6:	6022      	str	r2, [r4, #0]
 80034b8:	d504      	bpl.n	80034c4 <__sflush_r+0x78>
 80034ba:	1c42      	adds	r2, r0, #1
 80034bc:	d101      	bne.n	80034c2 <__sflush_r+0x76>
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	b903      	cbnz	r3, 80034c4 <__sflush_r+0x78>
 80034c2:	6560      	str	r0, [r4, #84]	; 0x54
 80034c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034c6:	602f      	str	r7, [r5, #0]
 80034c8:	2900      	cmp	r1, #0
 80034ca:	d0cb      	beq.n	8003464 <__sflush_r+0x18>
 80034cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d0:	4299      	cmp	r1, r3
 80034d2:	d002      	beq.n	80034da <__sflush_r+0x8e>
 80034d4:	4628      	mov	r0, r5
 80034d6:	f7ff fd11 	bl	8002efc <_free_r>
 80034da:	2000      	movs	r0, #0
 80034dc:	6360      	str	r0, [r4, #52]	; 0x34
 80034de:	e7c2      	b.n	8003466 <__sflush_r+0x1a>
 80034e0:	6a21      	ldr	r1, [r4, #32]
 80034e2:	2301      	movs	r3, #1
 80034e4:	4628      	mov	r0, r5
 80034e6:	47b0      	blx	r6
 80034e8:	1c41      	adds	r1, r0, #1
 80034ea:	d1c7      	bne.n	800347c <__sflush_r+0x30>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0c4      	beq.n	800347c <__sflush_r+0x30>
 80034f2:	2b1d      	cmp	r3, #29
 80034f4:	d001      	beq.n	80034fa <__sflush_r+0xae>
 80034f6:	2b16      	cmp	r3, #22
 80034f8:	d101      	bne.n	80034fe <__sflush_r+0xb2>
 80034fa:	602f      	str	r7, [r5, #0]
 80034fc:	e7b2      	b.n	8003464 <__sflush_r+0x18>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	e7ae      	b.n	8003466 <__sflush_r+0x1a>
 8003508:	690f      	ldr	r7, [r1, #16]
 800350a:	2f00      	cmp	r7, #0
 800350c:	d0aa      	beq.n	8003464 <__sflush_r+0x18>
 800350e:	0793      	lsls	r3, r2, #30
 8003510:	680e      	ldr	r6, [r1, #0]
 8003512:	bf08      	it	eq
 8003514:	694b      	ldreq	r3, [r1, #20]
 8003516:	600f      	str	r7, [r1, #0]
 8003518:	bf18      	it	ne
 800351a:	2300      	movne	r3, #0
 800351c:	1bf6      	subs	r6, r6, r7
 800351e:	608b      	str	r3, [r1, #8]
 8003520:	2e00      	cmp	r6, #0
 8003522:	dd9f      	ble.n	8003464 <__sflush_r+0x18>
 8003524:	6a21      	ldr	r1, [r4, #32]
 8003526:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800352a:	4633      	mov	r3, r6
 800352c:	463a      	mov	r2, r7
 800352e:	4628      	mov	r0, r5
 8003530:	47e0      	blx	ip
 8003532:	2800      	cmp	r0, #0
 8003534:	dc06      	bgt.n	8003544 <__sflush_r+0xf8>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003542:	e790      	b.n	8003466 <__sflush_r+0x1a>
 8003544:	4407      	add	r7, r0
 8003546:	1a36      	subs	r6, r6, r0
 8003548:	e7ea      	b.n	8003520 <__sflush_r+0xd4>
 800354a:	bf00      	nop
 800354c:	20400001 	.word	0x20400001

08003550 <_fflush_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	690b      	ldr	r3, [r1, #16]
 8003554:	4605      	mov	r5, r0
 8003556:	460c      	mov	r4, r1
 8003558:	b913      	cbnz	r3, 8003560 <_fflush_r+0x10>
 800355a:	2500      	movs	r5, #0
 800355c:	4628      	mov	r0, r5
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	b118      	cbz	r0, 800356a <_fflush_r+0x1a>
 8003562:	6983      	ldr	r3, [r0, #24]
 8003564:	b90b      	cbnz	r3, 800356a <_fflush_r+0x1a>
 8003566:	f000 f887 	bl	8003678 <__sinit>
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <_fflush_r+0x6c>)
 800356c:	429c      	cmp	r4, r3
 800356e:	d11b      	bne.n	80035a8 <_fflush_r+0x58>
 8003570:	686c      	ldr	r4, [r5, #4]
 8003572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ef      	beq.n	800355a <_fflush_r+0xa>
 800357a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800357c:	07d0      	lsls	r0, r2, #31
 800357e:	d404      	bmi.n	800358a <_fflush_r+0x3a>
 8003580:	0599      	lsls	r1, r3, #22
 8003582:	d402      	bmi.n	800358a <_fflush_r+0x3a>
 8003584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003586:	f000 f915 	bl	80037b4 <__retarget_lock_acquire_recursive>
 800358a:	4628      	mov	r0, r5
 800358c:	4621      	mov	r1, r4
 800358e:	f7ff ff5d 	bl	800344c <__sflush_r>
 8003592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003594:	07da      	lsls	r2, r3, #31
 8003596:	4605      	mov	r5, r0
 8003598:	d4e0      	bmi.n	800355c <_fflush_r+0xc>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	059b      	lsls	r3, r3, #22
 800359e:	d4dd      	bmi.n	800355c <_fflush_r+0xc>
 80035a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a2:	f000 f908 	bl	80037b6 <__retarget_lock_release_recursive>
 80035a6:	e7d9      	b.n	800355c <_fflush_r+0xc>
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_fflush_r+0x70>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d101      	bne.n	80035b2 <_fflush_r+0x62>
 80035ae:	68ac      	ldr	r4, [r5, #8]
 80035b0:	e7df      	b.n	8003572 <_fflush_r+0x22>
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <_fflush_r+0x74>)
 80035b4:	429c      	cmp	r4, r3
 80035b6:	bf08      	it	eq
 80035b8:	68ec      	ldreq	r4, [r5, #12]
 80035ba:	e7da      	b.n	8003572 <_fflush_r+0x22>
 80035bc:	08004190 	.word	0x08004190
 80035c0:	080041b0 	.word	0x080041b0
 80035c4:	08004170 	.word	0x08004170

080035c8 <std>:
 80035c8:	2300      	movs	r3, #0
 80035ca:	b510      	push	{r4, lr}
 80035cc:	4604      	mov	r4, r0
 80035ce:	e9c0 3300 	strd	r3, r3, [r0]
 80035d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035d6:	6083      	str	r3, [r0, #8]
 80035d8:	8181      	strh	r1, [r0, #12]
 80035da:	6643      	str	r3, [r0, #100]	; 0x64
 80035dc:	81c2      	strh	r2, [r0, #14]
 80035de:	6183      	str	r3, [r0, #24]
 80035e0:	4619      	mov	r1, r3
 80035e2:	2208      	movs	r2, #8
 80035e4:	305c      	adds	r0, #92	; 0x5c
 80035e6:	f7ff fc81 	bl	8002eec <memset>
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <std+0x38>)
 80035ec:	6263      	str	r3, [r4, #36]	; 0x24
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <std+0x3c>)
 80035f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <std+0x40>)
 80035f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <std+0x44>)
 80035f8:	6224      	str	r4, [r4, #32]
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	08003f05 	.word	0x08003f05
 8003604:	08003f27 	.word	0x08003f27
 8003608:	08003f5f 	.word	0x08003f5f
 800360c:	08003f83 	.word	0x08003f83

08003610 <_cleanup_r>:
 8003610:	4901      	ldr	r1, [pc, #4]	; (8003618 <_cleanup_r+0x8>)
 8003612:	f000 b8af 	b.w	8003774 <_fwalk_reent>
 8003616:	bf00      	nop
 8003618:	08003551 	.word	0x08003551

0800361c <__sfmoreglue>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	2268      	movs	r2, #104	; 0x68
 8003620:	1e4d      	subs	r5, r1, #1
 8003622:	4355      	muls	r5, r2
 8003624:	460e      	mov	r6, r1
 8003626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800362a:	f7ff fcd1 	bl	8002fd0 <_malloc_r>
 800362e:	4604      	mov	r4, r0
 8003630:	b140      	cbz	r0, 8003644 <__sfmoreglue+0x28>
 8003632:	2100      	movs	r1, #0
 8003634:	e9c0 1600 	strd	r1, r6, [r0]
 8003638:	300c      	adds	r0, #12
 800363a:	60a0      	str	r0, [r4, #8]
 800363c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003640:	f7ff fc54 	bl	8002eec <memset>
 8003644:	4620      	mov	r0, r4
 8003646:	bd70      	pop	{r4, r5, r6, pc}

08003648 <__sfp_lock_acquire>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__sfp_lock_acquire+0x8>)
 800364a:	f000 b8b3 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 800364e:	bf00      	nop
 8003650:	20000179 	.word	0x20000179

08003654 <__sfp_lock_release>:
 8003654:	4801      	ldr	r0, [pc, #4]	; (800365c <__sfp_lock_release+0x8>)
 8003656:	f000 b8ae 	b.w	80037b6 <__retarget_lock_release_recursive>
 800365a:	bf00      	nop
 800365c:	20000179 	.word	0x20000179

08003660 <__sinit_lock_acquire>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__sinit_lock_acquire+0x8>)
 8003662:	f000 b8a7 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	2000017a 	.word	0x2000017a

0800366c <__sinit_lock_release>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__sinit_lock_release+0x8>)
 800366e:	f000 b8a2 	b.w	80037b6 <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	2000017a 	.word	0x2000017a

08003678 <__sinit>:
 8003678:	b510      	push	{r4, lr}
 800367a:	4604      	mov	r4, r0
 800367c:	f7ff fff0 	bl	8003660 <__sinit_lock_acquire>
 8003680:	69a3      	ldr	r3, [r4, #24]
 8003682:	b11b      	cbz	r3, 800368c <__sinit+0x14>
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f7ff bff0 	b.w	800366c <__sinit_lock_release>
 800368c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003690:	6523      	str	r3, [r4, #80]	; 0x50
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <__sinit+0x68>)
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <__sinit+0x6c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62a2      	str	r2, [r4, #40]	; 0x28
 800369a:	42a3      	cmp	r3, r4
 800369c:	bf04      	itt	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	61a3      	streq	r3, [r4, #24]
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 f820 	bl	80036e8 <__sfp>
 80036a8:	6060      	str	r0, [r4, #4]
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 f81c 	bl	80036e8 <__sfp>
 80036b0:	60a0      	str	r0, [r4, #8]
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 f818 	bl	80036e8 <__sfp>
 80036b8:	2200      	movs	r2, #0
 80036ba:	60e0      	str	r0, [r4, #12]
 80036bc:	2104      	movs	r1, #4
 80036be:	6860      	ldr	r0, [r4, #4]
 80036c0:	f7ff ff82 	bl	80035c8 <std>
 80036c4:	68a0      	ldr	r0, [r4, #8]
 80036c6:	2201      	movs	r2, #1
 80036c8:	2109      	movs	r1, #9
 80036ca:	f7ff ff7d 	bl	80035c8 <std>
 80036ce:	68e0      	ldr	r0, [r4, #12]
 80036d0:	2202      	movs	r2, #2
 80036d2:	2112      	movs	r1, #18
 80036d4:	f7ff ff78 	bl	80035c8 <std>
 80036d8:	2301      	movs	r3, #1
 80036da:	61a3      	str	r3, [r4, #24]
 80036dc:	e7d2      	b.n	8003684 <__sinit+0xc>
 80036de:	bf00      	nop
 80036e0:	0800416c 	.word	0x0800416c
 80036e4:	08003611 	.word	0x08003611

080036e8 <__sfp>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	4607      	mov	r7, r0
 80036ec:	f7ff ffac 	bl	8003648 <__sfp_lock_acquire>
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <__sfp+0x84>)
 80036f2:	681e      	ldr	r6, [r3, #0]
 80036f4:	69b3      	ldr	r3, [r6, #24]
 80036f6:	b913      	cbnz	r3, 80036fe <__sfp+0x16>
 80036f8:	4630      	mov	r0, r6
 80036fa:	f7ff ffbd 	bl	8003678 <__sinit>
 80036fe:	3648      	adds	r6, #72	; 0x48
 8003700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	d503      	bpl.n	8003710 <__sfp+0x28>
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	b30b      	cbz	r3, 8003750 <__sfp+0x68>
 800370c:	6836      	ldr	r6, [r6, #0]
 800370e:	e7f7      	b.n	8003700 <__sfp+0x18>
 8003710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003714:	b9d5      	cbnz	r5, 800374c <__sfp+0x64>
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <__sfp+0x88>)
 8003718:	60e3      	str	r3, [r4, #12]
 800371a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800371e:	6665      	str	r5, [r4, #100]	; 0x64
 8003720:	f000 f847 	bl	80037b2 <__retarget_lock_init_recursive>
 8003724:	f7ff ff96 	bl	8003654 <__sfp_lock_release>
 8003728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800372c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003730:	6025      	str	r5, [r4, #0]
 8003732:	61a5      	str	r5, [r4, #24]
 8003734:	2208      	movs	r2, #8
 8003736:	4629      	mov	r1, r5
 8003738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800373c:	f7ff fbd6 	bl	8002eec <memset>
 8003740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003748:	4620      	mov	r0, r4
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374c:	3468      	adds	r4, #104	; 0x68
 800374e:	e7d9      	b.n	8003704 <__sfp+0x1c>
 8003750:	2104      	movs	r1, #4
 8003752:	4638      	mov	r0, r7
 8003754:	f7ff ff62 	bl	800361c <__sfmoreglue>
 8003758:	4604      	mov	r4, r0
 800375a:	6030      	str	r0, [r6, #0]
 800375c:	2800      	cmp	r0, #0
 800375e:	d1d5      	bne.n	800370c <__sfp+0x24>
 8003760:	f7ff ff78 	bl	8003654 <__sfp_lock_release>
 8003764:	230c      	movs	r3, #12
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	e7ee      	b.n	8003748 <__sfp+0x60>
 800376a:	bf00      	nop
 800376c:	0800416c 	.word	0x0800416c
 8003770:	ffff0001 	.word	0xffff0001

08003774 <_fwalk_reent>:
 8003774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003778:	4606      	mov	r6, r0
 800377a:	4688      	mov	r8, r1
 800377c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003780:	2700      	movs	r7, #0
 8003782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003786:	f1b9 0901 	subs.w	r9, r9, #1
 800378a:	d505      	bpl.n	8003798 <_fwalk_reent+0x24>
 800378c:	6824      	ldr	r4, [r4, #0]
 800378e:	2c00      	cmp	r4, #0
 8003790:	d1f7      	bne.n	8003782 <_fwalk_reent+0xe>
 8003792:	4638      	mov	r0, r7
 8003794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003798:	89ab      	ldrh	r3, [r5, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d907      	bls.n	80037ae <_fwalk_reent+0x3a>
 800379e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037a2:	3301      	adds	r3, #1
 80037a4:	d003      	beq.n	80037ae <_fwalk_reent+0x3a>
 80037a6:	4629      	mov	r1, r5
 80037a8:	4630      	mov	r0, r6
 80037aa:	47c0      	blx	r8
 80037ac:	4307      	orrs	r7, r0
 80037ae:	3568      	adds	r5, #104	; 0x68
 80037b0:	e7e9      	b.n	8003786 <_fwalk_reent+0x12>

080037b2 <__retarget_lock_init_recursive>:
 80037b2:	4770      	bx	lr

080037b4 <__retarget_lock_acquire_recursive>:
 80037b4:	4770      	bx	lr

080037b6 <__retarget_lock_release_recursive>:
 80037b6:	4770      	bx	lr

080037b8 <__swhatbuf_r>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	460e      	mov	r6, r1
 80037bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c0:	2900      	cmp	r1, #0
 80037c2:	b096      	sub	sp, #88	; 0x58
 80037c4:	4614      	mov	r4, r2
 80037c6:	461d      	mov	r5, r3
 80037c8:	da08      	bge.n	80037dc <__swhatbuf_r+0x24>
 80037ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	602a      	str	r2, [r5, #0]
 80037d2:	061a      	lsls	r2, r3, #24
 80037d4:	d410      	bmi.n	80037f8 <__swhatbuf_r+0x40>
 80037d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037da:	e00e      	b.n	80037fa <__swhatbuf_r+0x42>
 80037dc:	466a      	mov	r2, sp
 80037de:	f000 fbf7 	bl	8003fd0 <_fstat_r>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	dbf1      	blt.n	80037ca <__swhatbuf_r+0x12>
 80037e6:	9a01      	ldr	r2, [sp, #4]
 80037e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037f0:	425a      	negs	r2, r3
 80037f2:	415a      	adcs	r2, r3
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	e7ee      	b.n	80037d6 <__swhatbuf_r+0x1e>
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	2000      	movs	r0, #0
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	b016      	add	sp, #88	; 0x58
 8003800:	bd70      	pop	{r4, r5, r6, pc}
	...

08003804 <__smakebuf_r>:
 8003804:	898b      	ldrh	r3, [r1, #12]
 8003806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003808:	079d      	lsls	r5, r3, #30
 800380a:	4606      	mov	r6, r0
 800380c:	460c      	mov	r4, r1
 800380e:	d507      	bpl.n	8003820 <__smakebuf_r+0x1c>
 8003810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	6123      	str	r3, [r4, #16]
 8003818:	2301      	movs	r3, #1
 800381a:	6163      	str	r3, [r4, #20]
 800381c:	b002      	add	sp, #8
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	ab01      	add	r3, sp, #4
 8003822:	466a      	mov	r2, sp
 8003824:	f7ff ffc8 	bl	80037b8 <__swhatbuf_r>
 8003828:	9900      	ldr	r1, [sp, #0]
 800382a:	4605      	mov	r5, r0
 800382c:	4630      	mov	r0, r6
 800382e:	f7ff fbcf 	bl	8002fd0 <_malloc_r>
 8003832:	b948      	cbnz	r0, 8003848 <__smakebuf_r+0x44>
 8003834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003838:	059a      	lsls	r2, r3, #22
 800383a:	d4ef      	bmi.n	800381c <__smakebuf_r+0x18>
 800383c:	f023 0303 	bic.w	r3, r3, #3
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	81a3      	strh	r3, [r4, #12]
 8003846:	e7e3      	b.n	8003810 <__smakebuf_r+0xc>
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <__smakebuf_r+0x7c>)
 800384a:	62b3      	str	r3, [r6, #40]	; 0x28
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	6020      	str	r0, [r4, #0]
 8003850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	9b00      	ldr	r3, [sp, #0]
 8003858:	6163      	str	r3, [r4, #20]
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	6120      	str	r0, [r4, #16]
 800385e:	b15b      	cbz	r3, 8003878 <__smakebuf_r+0x74>
 8003860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003864:	4630      	mov	r0, r6
 8003866:	f000 fbc5 	bl	8003ff4 <_isatty_r>
 800386a:	b128      	cbz	r0, 8003878 <__smakebuf_r+0x74>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	89a0      	ldrh	r0, [r4, #12]
 800387a:	4305      	orrs	r5, r0
 800387c:	81a5      	strh	r5, [r4, #12]
 800387e:	e7cd      	b.n	800381c <__smakebuf_r+0x18>
 8003880:	08003611 	.word	0x08003611

08003884 <__malloc_lock>:
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <__malloc_lock+0x8>)
 8003886:	f7ff bf95 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 800388a:	bf00      	nop
 800388c:	20000178 	.word	0x20000178

08003890 <__malloc_unlock>:
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <__malloc_unlock+0x8>)
 8003892:	f7ff bf90 	b.w	80037b6 <__retarget_lock_release_recursive>
 8003896:	bf00      	nop
 8003898:	20000178 	.word	0x20000178

0800389c <__sfputc_r>:
 800389c:	6893      	ldr	r3, [r2, #8]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	b410      	push	{r4}
 80038a4:	6093      	str	r3, [r2, #8]
 80038a6:	da07      	bge.n	80038b8 <__sfputc_r+0x1c>
 80038a8:	6994      	ldr	r4, [r2, #24]
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	db01      	blt.n	80038b2 <__sfputc_r+0x16>
 80038ae:	290a      	cmp	r1, #10
 80038b0:	d102      	bne.n	80038b8 <__sfputc_r+0x1c>
 80038b2:	bc10      	pop	{r4}
 80038b4:	f7ff bd0a 	b.w	80032cc <__swbuf_r>
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	1c58      	adds	r0, r3, #1
 80038bc:	6010      	str	r0, [r2, #0]
 80038be:	7019      	strb	r1, [r3, #0]
 80038c0:	4608      	mov	r0, r1
 80038c2:	bc10      	pop	{r4}
 80038c4:	4770      	bx	lr

080038c6 <__sfputs_r>:
 80038c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c8:	4606      	mov	r6, r0
 80038ca:	460f      	mov	r7, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	18d5      	adds	r5, r2, r3
 80038d0:	42ac      	cmp	r4, r5
 80038d2:	d101      	bne.n	80038d8 <__sfputs_r+0x12>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e007      	b.n	80038e8 <__sfputs_r+0x22>
 80038d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038dc:	463a      	mov	r2, r7
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff ffdc 	bl	800389c <__sfputc_r>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d1f3      	bne.n	80038d0 <__sfputs_r+0xa>
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038ec <_vfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	460d      	mov	r5, r1
 80038f2:	b09d      	sub	sp, #116	; 0x74
 80038f4:	4614      	mov	r4, r2
 80038f6:	4698      	mov	r8, r3
 80038f8:	4606      	mov	r6, r0
 80038fa:	b118      	cbz	r0, 8003904 <_vfiprintf_r+0x18>
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	b90b      	cbnz	r3, 8003904 <_vfiprintf_r+0x18>
 8003900:	f7ff feba 	bl	8003678 <__sinit>
 8003904:	4b89      	ldr	r3, [pc, #548]	; (8003b2c <_vfiprintf_r+0x240>)
 8003906:	429d      	cmp	r5, r3
 8003908:	d11b      	bne.n	8003942 <_vfiprintf_r+0x56>
 800390a:	6875      	ldr	r5, [r6, #4]
 800390c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800390e:	07d9      	lsls	r1, r3, #31
 8003910:	d405      	bmi.n	800391e <_vfiprintf_r+0x32>
 8003912:	89ab      	ldrh	r3, [r5, #12]
 8003914:	059a      	lsls	r2, r3, #22
 8003916:	d402      	bmi.n	800391e <_vfiprintf_r+0x32>
 8003918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800391a:	f7ff ff4b 	bl	80037b4 <__retarget_lock_acquire_recursive>
 800391e:	89ab      	ldrh	r3, [r5, #12]
 8003920:	071b      	lsls	r3, r3, #28
 8003922:	d501      	bpl.n	8003928 <_vfiprintf_r+0x3c>
 8003924:	692b      	ldr	r3, [r5, #16]
 8003926:	b9eb      	cbnz	r3, 8003964 <_vfiprintf_r+0x78>
 8003928:	4629      	mov	r1, r5
 800392a:	4630      	mov	r0, r6
 800392c:	f7ff fd20 	bl	8003370 <__swsetup_r>
 8003930:	b1c0      	cbz	r0, 8003964 <_vfiprintf_r+0x78>
 8003932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003934:	07dc      	lsls	r4, r3, #31
 8003936:	d50e      	bpl.n	8003956 <_vfiprintf_r+0x6a>
 8003938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800393c:	b01d      	add	sp, #116	; 0x74
 800393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003942:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <_vfiprintf_r+0x244>)
 8003944:	429d      	cmp	r5, r3
 8003946:	d101      	bne.n	800394c <_vfiprintf_r+0x60>
 8003948:	68b5      	ldr	r5, [r6, #8]
 800394a:	e7df      	b.n	800390c <_vfiprintf_r+0x20>
 800394c:	4b79      	ldr	r3, [pc, #484]	; (8003b34 <_vfiprintf_r+0x248>)
 800394e:	429d      	cmp	r5, r3
 8003950:	bf08      	it	eq
 8003952:	68f5      	ldreq	r5, [r6, #12]
 8003954:	e7da      	b.n	800390c <_vfiprintf_r+0x20>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	0598      	lsls	r0, r3, #22
 800395a:	d4ed      	bmi.n	8003938 <_vfiprintf_r+0x4c>
 800395c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395e:	f7ff ff2a 	bl	80037b6 <__retarget_lock_release_recursive>
 8003962:	e7e9      	b.n	8003938 <_vfiprintf_r+0x4c>
 8003964:	2300      	movs	r3, #0
 8003966:	9309      	str	r3, [sp, #36]	; 0x24
 8003968:	2320      	movs	r3, #32
 800396a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800396e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003972:	2330      	movs	r3, #48	; 0x30
 8003974:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b38 <_vfiprintf_r+0x24c>
 8003978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800397c:	f04f 0901 	mov.w	r9, #1
 8003980:	4623      	mov	r3, r4
 8003982:	469a      	mov	sl, r3
 8003984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003988:	b10a      	cbz	r2, 800398e <_vfiprintf_r+0xa2>
 800398a:	2a25      	cmp	r2, #37	; 0x25
 800398c:	d1f9      	bne.n	8003982 <_vfiprintf_r+0x96>
 800398e:	ebba 0b04 	subs.w	fp, sl, r4
 8003992:	d00b      	beq.n	80039ac <_vfiprintf_r+0xc0>
 8003994:	465b      	mov	r3, fp
 8003996:	4622      	mov	r2, r4
 8003998:	4629      	mov	r1, r5
 800399a:	4630      	mov	r0, r6
 800399c:	f7ff ff93 	bl	80038c6 <__sfputs_r>
 80039a0:	3001      	adds	r0, #1
 80039a2:	f000 80aa 	beq.w	8003afa <_vfiprintf_r+0x20e>
 80039a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a8:	445a      	add	r2, fp
 80039aa:	9209      	str	r2, [sp, #36]	; 0x24
 80039ac:	f89a 3000 	ldrb.w	r3, [sl]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a2 	beq.w	8003afa <_vfiprintf_r+0x20e>
 80039b6:	2300      	movs	r3, #0
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039c0:	f10a 0a01 	add.w	sl, sl, #1
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	9307      	str	r3, [sp, #28]
 80039c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039cc:	931a      	str	r3, [sp, #104]	; 0x68
 80039ce:	4654      	mov	r4, sl
 80039d0:	2205      	movs	r2, #5
 80039d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d6:	4858      	ldr	r0, [pc, #352]	; (8003b38 <_vfiprintf_r+0x24c>)
 80039d8:	f7fc fc0a 	bl	80001f0 <memchr>
 80039dc:	9a04      	ldr	r2, [sp, #16]
 80039de:	b9d8      	cbnz	r0, 8003a18 <_vfiprintf_r+0x12c>
 80039e0:	06d1      	lsls	r1, r2, #27
 80039e2:	bf44      	itt	mi
 80039e4:	2320      	movmi	r3, #32
 80039e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ea:	0713      	lsls	r3, r2, #28
 80039ec:	bf44      	itt	mi
 80039ee:	232b      	movmi	r3, #43	; 0x2b
 80039f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039f4:	f89a 3000 	ldrb.w	r3, [sl]
 80039f8:	2b2a      	cmp	r3, #42	; 0x2a
 80039fa:	d015      	beq.n	8003a28 <_vfiprintf_r+0x13c>
 80039fc:	9a07      	ldr	r2, [sp, #28]
 80039fe:	4654      	mov	r4, sl
 8003a00:	2000      	movs	r0, #0
 8003a02:	f04f 0c0a 	mov.w	ip, #10
 8003a06:	4621      	mov	r1, r4
 8003a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a0c:	3b30      	subs	r3, #48	; 0x30
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d94e      	bls.n	8003ab0 <_vfiprintf_r+0x1c4>
 8003a12:	b1b0      	cbz	r0, 8003a42 <_vfiprintf_r+0x156>
 8003a14:	9207      	str	r2, [sp, #28]
 8003a16:	e014      	b.n	8003a42 <_vfiprintf_r+0x156>
 8003a18:	eba0 0308 	sub.w	r3, r0, r8
 8003a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	46a2      	mov	sl, r4
 8003a26:	e7d2      	b.n	80039ce <_vfiprintf_r+0xe2>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	1d19      	adds	r1, r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	9103      	str	r1, [sp, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bfbb      	ittet	lt
 8003a34:	425b      	neglt	r3, r3
 8003a36:	f042 0202 	orrlt.w	r2, r2, #2
 8003a3a:	9307      	strge	r3, [sp, #28]
 8003a3c:	9307      	strlt	r3, [sp, #28]
 8003a3e:	bfb8      	it	lt
 8003a40:	9204      	strlt	r2, [sp, #16]
 8003a42:	7823      	ldrb	r3, [r4, #0]
 8003a44:	2b2e      	cmp	r3, #46	; 0x2e
 8003a46:	d10c      	bne.n	8003a62 <_vfiprintf_r+0x176>
 8003a48:	7863      	ldrb	r3, [r4, #1]
 8003a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4c:	d135      	bne.n	8003aba <_vfiprintf_r+0x1ce>
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	9203      	str	r2, [sp, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a5e:	3402      	adds	r4, #2
 8003a60:	9305      	str	r3, [sp, #20]
 8003a62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b3c <_vfiprintf_r+0x250>
 8003a66:	7821      	ldrb	r1, [r4, #0]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4650      	mov	r0, sl
 8003a6c:	f7fc fbc0 	bl	80001f0 <memchr>
 8003a70:	b140      	cbz	r0, 8003a84 <_vfiprintf_r+0x198>
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	eba0 000a 	sub.w	r0, r0, sl
 8003a78:	fa03 f000 	lsl.w	r0, r3, r0
 8003a7c:	9b04      	ldr	r3, [sp, #16]
 8003a7e:	4303      	orrs	r3, r0
 8003a80:	3401      	adds	r4, #1
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a88:	482d      	ldr	r0, [pc, #180]	; (8003b40 <_vfiprintf_r+0x254>)
 8003a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8e:	2206      	movs	r2, #6
 8003a90:	f7fc fbae 	bl	80001f0 <memchr>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d03f      	beq.n	8003b18 <_vfiprintf_r+0x22c>
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <_vfiprintf_r+0x258>)
 8003a9a:	bb1b      	cbnz	r3, 8003ae4 <_vfiprintf_r+0x1f8>
 8003a9c:	9b03      	ldr	r3, [sp, #12]
 8003a9e:	3307      	adds	r3, #7
 8003aa0:	f023 0307 	bic.w	r3, r3, #7
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	9303      	str	r3, [sp, #12]
 8003aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aaa:	443b      	add	r3, r7
 8003aac:	9309      	str	r3, [sp, #36]	; 0x24
 8003aae:	e767      	b.n	8003980 <_vfiprintf_r+0x94>
 8003ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	e7a5      	b.n	8003a06 <_vfiprintf_r+0x11a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	3401      	adds	r4, #1
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f04f 0c0a 	mov.w	ip, #10
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003acc:	3a30      	subs	r2, #48	; 0x30
 8003ace:	2a09      	cmp	r2, #9
 8003ad0:	d903      	bls.n	8003ada <_vfiprintf_r+0x1ee>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0c5      	beq.n	8003a62 <_vfiprintf_r+0x176>
 8003ad6:	9105      	str	r1, [sp, #20]
 8003ad8:	e7c3      	b.n	8003a62 <_vfiprintf_r+0x176>
 8003ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ade:	4604      	mov	r4, r0
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e7f0      	b.n	8003ac6 <_vfiprintf_r+0x1da>
 8003ae4:	ab03      	add	r3, sp, #12
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <_vfiprintf_r+0x25c>)
 8003aec:	a904      	add	r1, sp, #16
 8003aee:	4630      	mov	r0, r6
 8003af0:	f3af 8000 	nop.w
 8003af4:	4607      	mov	r7, r0
 8003af6:	1c78      	adds	r0, r7, #1
 8003af8:	d1d6      	bne.n	8003aa8 <_vfiprintf_r+0x1bc>
 8003afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003afc:	07d9      	lsls	r1, r3, #31
 8003afe:	d405      	bmi.n	8003b0c <_vfiprintf_r+0x220>
 8003b00:	89ab      	ldrh	r3, [r5, #12]
 8003b02:	059a      	lsls	r2, r3, #22
 8003b04:	d402      	bmi.n	8003b0c <_vfiprintf_r+0x220>
 8003b06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b08:	f7ff fe55 	bl	80037b6 <__retarget_lock_release_recursive>
 8003b0c:	89ab      	ldrh	r3, [r5, #12]
 8003b0e:	065b      	lsls	r3, r3, #25
 8003b10:	f53f af12 	bmi.w	8003938 <_vfiprintf_r+0x4c>
 8003b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b16:	e711      	b.n	800393c <_vfiprintf_r+0x50>
 8003b18:	ab03      	add	r3, sp, #12
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <_vfiprintf_r+0x25c>)
 8003b20:	a904      	add	r1, sp, #16
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f880 	bl	8003c28 <_printf_i>
 8003b28:	e7e4      	b.n	8003af4 <_vfiprintf_r+0x208>
 8003b2a:	bf00      	nop
 8003b2c:	08004190 	.word	0x08004190
 8003b30:	080041b0 	.word	0x080041b0
 8003b34:	08004170 	.word	0x08004170
 8003b38:	080041d0 	.word	0x080041d0
 8003b3c:	080041d6 	.word	0x080041d6
 8003b40:	080041da 	.word	0x080041da
 8003b44:	00000000 	.word	0x00000000
 8003b48:	080038c7 	.word	0x080038c7

08003b4c <_printf_common>:
 8003b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b50:	4616      	mov	r6, r2
 8003b52:	4699      	mov	r9, r3
 8003b54:	688a      	ldr	r2, [r1, #8]
 8003b56:	690b      	ldr	r3, [r1, #16]
 8003b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bfb8      	it	lt
 8003b60:	4613      	movlt	r3, r2
 8003b62:	6033      	str	r3, [r6, #0]
 8003b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b68:	4607      	mov	r7, r0
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	b10a      	cbz	r2, 8003b72 <_printf_common+0x26>
 8003b6e:	3301      	adds	r3, #1
 8003b70:	6033      	str	r3, [r6, #0]
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	0699      	lsls	r1, r3, #26
 8003b76:	bf42      	ittt	mi
 8003b78:	6833      	ldrmi	r3, [r6, #0]
 8003b7a:	3302      	addmi	r3, #2
 8003b7c:	6033      	strmi	r3, [r6, #0]
 8003b7e:	6825      	ldr	r5, [r4, #0]
 8003b80:	f015 0506 	ands.w	r5, r5, #6
 8003b84:	d106      	bne.n	8003b94 <_printf_common+0x48>
 8003b86:	f104 0a19 	add.w	sl, r4, #25
 8003b8a:	68e3      	ldr	r3, [r4, #12]
 8003b8c:	6832      	ldr	r2, [r6, #0]
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	42ab      	cmp	r3, r5
 8003b92:	dc26      	bgt.n	8003be2 <_printf_common+0x96>
 8003b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b98:	1e13      	subs	r3, r2, #0
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	bf18      	it	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	0692      	lsls	r2, r2, #26
 8003ba2:	d42b      	bmi.n	8003bfc <_printf_common+0xb0>
 8003ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4638      	mov	r0, r7
 8003bac:	47c0      	blx	r8
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d01e      	beq.n	8003bf0 <_printf_common+0xa4>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	68e5      	ldr	r5, [r4, #12]
 8003bb6:	6832      	ldr	r2, [r6, #0]
 8003bb8:	f003 0306 	and.w	r3, r3, #6
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	bf08      	it	eq
 8003bc0:	1aad      	subeq	r5, r5, r2
 8003bc2:	68a3      	ldr	r3, [r4, #8]
 8003bc4:	6922      	ldr	r2, [r4, #16]
 8003bc6:	bf0c      	ite	eq
 8003bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bcc:	2500      	movne	r5, #0
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	bfc4      	itt	gt
 8003bd2:	1a9b      	subgt	r3, r3, r2
 8003bd4:	18ed      	addgt	r5, r5, r3
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	341a      	adds	r4, #26
 8003bda:	42b5      	cmp	r5, r6
 8003bdc:	d11a      	bne.n	8003c14 <_printf_common+0xc8>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e008      	b.n	8003bf4 <_printf_common+0xa8>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4652      	mov	r2, sl
 8003be6:	4649      	mov	r1, r9
 8003be8:	4638      	mov	r0, r7
 8003bea:	47c0      	blx	r8
 8003bec:	3001      	adds	r0, #1
 8003bee:	d103      	bne.n	8003bf8 <_printf_common+0xac>
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf8:	3501      	adds	r5, #1
 8003bfa:	e7c6      	b.n	8003b8a <_printf_common+0x3e>
 8003bfc:	18e1      	adds	r1, r4, r3
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	2030      	movs	r0, #48	; 0x30
 8003c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c06:	4422      	add	r2, r4
 8003c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c10:	3302      	adds	r3, #2
 8003c12:	e7c7      	b.n	8003ba4 <_printf_common+0x58>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4622      	mov	r2, r4
 8003c18:	4649      	mov	r1, r9
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	47c0      	blx	r8
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d0e6      	beq.n	8003bf0 <_printf_common+0xa4>
 8003c22:	3601      	adds	r6, #1
 8003c24:	e7d9      	b.n	8003bda <_printf_common+0x8e>
	...

08003c28 <_printf_i>:
 8003c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	7e0f      	ldrb	r7, [r1, #24]
 8003c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c30:	2f78      	cmp	r7, #120	; 0x78
 8003c32:	4691      	mov	r9, r2
 8003c34:	4680      	mov	r8, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	469a      	mov	sl, r3
 8003c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c3e:	d807      	bhi.n	8003c50 <_printf_i+0x28>
 8003c40:	2f62      	cmp	r7, #98	; 0x62
 8003c42:	d80a      	bhi.n	8003c5a <_printf_i+0x32>
 8003c44:	2f00      	cmp	r7, #0
 8003c46:	f000 80d8 	beq.w	8003dfa <_printf_i+0x1d2>
 8003c4a:	2f58      	cmp	r7, #88	; 0x58
 8003c4c:	f000 80a3 	beq.w	8003d96 <_printf_i+0x16e>
 8003c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c58:	e03a      	b.n	8003cd0 <_printf_i+0xa8>
 8003c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c5e:	2b15      	cmp	r3, #21
 8003c60:	d8f6      	bhi.n	8003c50 <_printf_i+0x28>
 8003c62:	a101      	add	r1, pc, #4	; (adr r1, 8003c68 <_printf_i+0x40>)
 8003c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c68:	08003cc1 	.word	0x08003cc1
 8003c6c:	08003cd5 	.word	0x08003cd5
 8003c70:	08003c51 	.word	0x08003c51
 8003c74:	08003c51 	.word	0x08003c51
 8003c78:	08003c51 	.word	0x08003c51
 8003c7c:	08003c51 	.word	0x08003c51
 8003c80:	08003cd5 	.word	0x08003cd5
 8003c84:	08003c51 	.word	0x08003c51
 8003c88:	08003c51 	.word	0x08003c51
 8003c8c:	08003c51 	.word	0x08003c51
 8003c90:	08003c51 	.word	0x08003c51
 8003c94:	08003de1 	.word	0x08003de1
 8003c98:	08003d05 	.word	0x08003d05
 8003c9c:	08003dc3 	.word	0x08003dc3
 8003ca0:	08003c51 	.word	0x08003c51
 8003ca4:	08003c51 	.word	0x08003c51
 8003ca8:	08003e03 	.word	0x08003e03
 8003cac:	08003c51 	.word	0x08003c51
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003c51 	.word	0x08003c51
 8003cb8:	08003c51 	.word	0x08003c51
 8003cbc:	08003dcb 	.word	0x08003dcb
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	1d1a      	adds	r2, r3, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	602a      	str	r2, [r5, #0]
 8003cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0a3      	b.n	8003e1c <_printf_i+0x1f4>
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	6829      	ldr	r1, [r5, #0]
 8003cd8:	0606      	lsls	r6, r0, #24
 8003cda:	f101 0304 	add.w	r3, r1, #4
 8003cde:	d50a      	bpl.n	8003cf6 <_printf_i+0xce>
 8003ce0:	680e      	ldr	r6, [r1, #0]
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	2e00      	cmp	r6, #0
 8003ce6:	da03      	bge.n	8003cf0 <_printf_i+0xc8>
 8003ce8:	232d      	movs	r3, #45	; 0x2d
 8003cea:	4276      	negs	r6, r6
 8003cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf0:	485e      	ldr	r0, [pc, #376]	; (8003e6c <_printf_i+0x244>)
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	e019      	b.n	8003d2a <_printf_i+0x102>
 8003cf6:	680e      	ldr	r6, [r1, #0]
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cfe:	bf18      	it	ne
 8003d00:	b236      	sxthne	r6, r6
 8003d02:	e7ef      	b.n	8003ce4 <_printf_i+0xbc>
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	1d19      	adds	r1, r3, #4
 8003d0a:	6029      	str	r1, [r5, #0]
 8003d0c:	0601      	lsls	r1, r0, #24
 8003d0e:	d501      	bpl.n	8003d14 <_printf_i+0xec>
 8003d10:	681e      	ldr	r6, [r3, #0]
 8003d12:	e002      	b.n	8003d1a <_printf_i+0xf2>
 8003d14:	0646      	lsls	r6, r0, #25
 8003d16:	d5fb      	bpl.n	8003d10 <_printf_i+0xe8>
 8003d18:	881e      	ldrh	r6, [r3, #0]
 8003d1a:	4854      	ldr	r0, [pc, #336]	; (8003e6c <_printf_i+0x244>)
 8003d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d1e:	bf0c      	ite	eq
 8003d20:	2308      	moveq	r3, #8
 8003d22:	230a      	movne	r3, #10
 8003d24:	2100      	movs	r1, #0
 8003d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d2a:	6865      	ldr	r5, [r4, #4]
 8003d2c:	60a5      	str	r5, [r4, #8]
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	bfa2      	ittt	ge
 8003d32:	6821      	ldrge	r1, [r4, #0]
 8003d34:	f021 0104 	bicge.w	r1, r1, #4
 8003d38:	6021      	strge	r1, [r4, #0]
 8003d3a:	b90e      	cbnz	r6, 8003d40 <_printf_i+0x118>
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	d04d      	beq.n	8003ddc <_printf_i+0x1b4>
 8003d40:	4615      	mov	r5, r2
 8003d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d46:	fb03 6711 	mls	r7, r3, r1, r6
 8003d4a:	5dc7      	ldrb	r7, [r0, r7]
 8003d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d50:	4637      	mov	r7, r6
 8003d52:	42bb      	cmp	r3, r7
 8003d54:	460e      	mov	r6, r1
 8003d56:	d9f4      	bls.n	8003d42 <_printf_i+0x11a>
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d10b      	bne.n	8003d74 <_printf_i+0x14c>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	07de      	lsls	r6, r3, #31
 8003d60:	d508      	bpl.n	8003d74 <_printf_i+0x14c>
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	6861      	ldr	r1, [r4, #4]
 8003d66:	4299      	cmp	r1, r3
 8003d68:	bfde      	ittt	le
 8003d6a:	2330      	movle	r3, #48	; 0x30
 8003d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d74:	1b52      	subs	r2, r2, r5
 8003d76:	6122      	str	r2, [r4, #16]
 8003d78:	f8cd a000 	str.w	sl, [sp]
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	aa03      	add	r2, sp, #12
 8003d80:	4621      	mov	r1, r4
 8003d82:	4640      	mov	r0, r8
 8003d84:	f7ff fee2 	bl	8003b4c <_printf_common>
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d14c      	bne.n	8003e26 <_printf_i+0x1fe>
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d90:	b004      	add	sp, #16
 8003d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d96:	4835      	ldr	r0, [pc, #212]	; (8003e6c <_printf_i+0x244>)
 8003d98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d9c:	6829      	ldr	r1, [r5, #0]
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003da4:	6029      	str	r1, [r5, #0]
 8003da6:	061d      	lsls	r5, r3, #24
 8003da8:	d514      	bpl.n	8003dd4 <_printf_i+0x1ac>
 8003daa:	07df      	lsls	r7, r3, #31
 8003dac:	bf44      	itt	mi
 8003dae:	f043 0320 	orrmi.w	r3, r3, #32
 8003db2:	6023      	strmi	r3, [r4, #0]
 8003db4:	b91e      	cbnz	r6, 8003dbe <_printf_i+0x196>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	f023 0320 	bic.w	r3, r3, #32
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	e7b0      	b.n	8003d24 <_printf_i+0xfc>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	f043 0320 	orr.w	r3, r3, #32
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	2378      	movs	r3, #120	; 0x78
 8003dcc:	4828      	ldr	r0, [pc, #160]	; (8003e70 <_printf_i+0x248>)
 8003dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dd2:	e7e3      	b.n	8003d9c <_printf_i+0x174>
 8003dd4:	0659      	lsls	r1, r3, #25
 8003dd6:	bf48      	it	mi
 8003dd8:	b2b6      	uxthmi	r6, r6
 8003dda:	e7e6      	b.n	8003daa <_printf_i+0x182>
 8003ddc:	4615      	mov	r5, r2
 8003dde:	e7bb      	b.n	8003d58 <_printf_i+0x130>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	6826      	ldr	r6, [r4, #0]
 8003de4:	6961      	ldr	r1, [r4, #20]
 8003de6:	1d18      	adds	r0, r3, #4
 8003de8:	6028      	str	r0, [r5, #0]
 8003dea:	0635      	lsls	r5, r6, #24
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	d501      	bpl.n	8003df4 <_printf_i+0x1cc>
 8003df0:	6019      	str	r1, [r3, #0]
 8003df2:	e002      	b.n	8003dfa <_printf_i+0x1d2>
 8003df4:	0670      	lsls	r0, r6, #25
 8003df6:	d5fb      	bpl.n	8003df0 <_printf_i+0x1c8>
 8003df8:	8019      	strh	r1, [r3, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	4615      	mov	r5, r2
 8003e00:	e7ba      	b.n	8003d78 <_printf_i+0x150>
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	602a      	str	r2, [r5, #0]
 8003e08:	681d      	ldr	r5, [r3, #0]
 8003e0a:	6862      	ldr	r2, [r4, #4]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f7fc f9ee 	bl	80001f0 <memchr>
 8003e14:	b108      	cbz	r0, 8003e1a <_printf_i+0x1f2>
 8003e16:	1b40      	subs	r0, r0, r5
 8003e18:	6060      	str	r0, [r4, #4]
 8003e1a:	6863      	ldr	r3, [r4, #4]
 8003e1c:	6123      	str	r3, [r4, #16]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e24:	e7a8      	b.n	8003d78 <_printf_i+0x150>
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	462a      	mov	r2, r5
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	47d0      	blx	sl
 8003e30:	3001      	adds	r0, #1
 8003e32:	d0ab      	beq.n	8003d8c <_printf_i+0x164>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	079b      	lsls	r3, r3, #30
 8003e38:	d413      	bmi.n	8003e62 <_printf_i+0x23a>
 8003e3a:	68e0      	ldr	r0, [r4, #12]
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	bfb8      	it	lt
 8003e42:	4618      	movlt	r0, r3
 8003e44:	e7a4      	b.n	8003d90 <_printf_i+0x168>
 8003e46:	2301      	movs	r3, #1
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	47d0      	blx	sl
 8003e50:	3001      	adds	r0, #1
 8003e52:	d09b      	beq.n	8003d8c <_printf_i+0x164>
 8003e54:	3501      	adds	r5, #1
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	9903      	ldr	r1, [sp, #12]
 8003e5a:	1a5b      	subs	r3, r3, r1
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	dcf2      	bgt.n	8003e46 <_printf_i+0x21e>
 8003e60:	e7eb      	b.n	8003e3a <_printf_i+0x212>
 8003e62:	2500      	movs	r5, #0
 8003e64:	f104 0619 	add.w	r6, r4, #25
 8003e68:	e7f5      	b.n	8003e56 <_printf_i+0x22e>
 8003e6a:	bf00      	nop
 8003e6c:	080041e1 	.word	0x080041e1
 8003e70:	080041f2 	.word	0x080041f2

08003e74 <_putc_r>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	460d      	mov	r5, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	b118      	cbz	r0, 8003e86 <_putc_r+0x12>
 8003e7e:	6983      	ldr	r3, [r0, #24]
 8003e80:	b90b      	cbnz	r3, 8003e86 <_putc_r+0x12>
 8003e82:	f7ff fbf9 	bl	8003678 <__sinit>
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <_putc_r+0x84>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d124      	bne.n	8003ed6 <_putc_r+0x62>
 8003e8c:	6874      	ldr	r4, [r6, #4]
 8003e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e90:	07d8      	lsls	r0, r3, #31
 8003e92:	d405      	bmi.n	8003ea0 <_putc_r+0x2c>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	0599      	lsls	r1, r3, #22
 8003e98:	d402      	bmi.n	8003ea0 <_putc_r+0x2c>
 8003e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e9c:	f7ff fc8a 	bl	80037b4 <__retarget_lock_acquire_recursive>
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	60a3      	str	r3, [r4, #8]
 8003ea8:	da05      	bge.n	8003eb6 <_putc_r+0x42>
 8003eaa:	69a2      	ldr	r2, [r4, #24]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	db1c      	blt.n	8003eea <_putc_r+0x76>
 8003eb0:	b2eb      	uxtb	r3, r5
 8003eb2:	2b0a      	cmp	r3, #10
 8003eb4:	d019      	beq.n	8003eea <_putc_r+0x76>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	6022      	str	r2, [r4, #0]
 8003ebc:	701d      	strb	r5, [r3, #0]
 8003ebe:	b2ed      	uxtb	r5, r5
 8003ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec2:	07da      	lsls	r2, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_putc_r+0x5e>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	059b      	lsls	r3, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_putc_r+0x5e>
 8003ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ece:	f7ff fc72 	bl	80037b6 <__retarget_lock_release_recursive>
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <_putc_r+0x88>)
 8003ed8:	429c      	cmp	r4, r3
 8003eda:	d101      	bne.n	8003ee0 <_putc_r+0x6c>
 8003edc:	68b4      	ldr	r4, [r6, #8]
 8003ede:	e7d6      	b.n	8003e8e <_putc_r+0x1a>
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_putc_r+0x8c>)
 8003ee2:	429c      	cmp	r4, r3
 8003ee4:	bf08      	it	eq
 8003ee6:	68f4      	ldreq	r4, [r6, #12]
 8003ee8:	e7d1      	b.n	8003e8e <_putc_r+0x1a>
 8003eea:	4629      	mov	r1, r5
 8003eec:	4622      	mov	r2, r4
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f7ff f9ec 	bl	80032cc <__swbuf_r>
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	e7e3      	b.n	8003ec0 <_putc_r+0x4c>
 8003ef8:	08004190 	.word	0x08004190
 8003efc:	080041b0 	.word	0x080041b0
 8003f00:	08004170 	.word	0x08004170

08003f04 <__sread>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	460c      	mov	r4, r1
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	f000 f894 	bl	8004038 <_read_r>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	bfab      	itete	ge
 8003f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f16:	89a3      	ldrhlt	r3, [r4, #12]
 8003f18:	181b      	addge	r3, r3, r0
 8003f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f1e:	bfac      	ite	ge
 8003f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f22:	81a3      	strhlt	r3, [r4, #12]
 8003f24:	bd10      	pop	{r4, pc}

08003f26 <__swrite>:
 8003f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	898b      	ldrh	r3, [r1, #12]
 8003f2e:	05db      	lsls	r3, r3, #23
 8003f30:	4605      	mov	r5, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	4616      	mov	r6, r2
 8003f36:	d505      	bpl.n	8003f44 <__swrite+0x1e>
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f000 f868 	bl	8004014 <_lseek_r>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	4632      	mov	r2, r6
 8003f52:	463b      	mov	r3, r7
 8003f54:	4628      	mov	r0, r5
 8003f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	f000 b817 	b.w	8003f8c <_write_r>

08003f5e <__sseek>:
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	460c      	mov	r4, r1
 8003f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f66:	f000 f855 	bl	8004014 <_lseek_r>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	bf15      	itete	ne
 8003f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f7a:	81a3      	strheq	r3, [r4, #12]
 8003f7c:	bf18      	it	ne
 8003f7e:	81a3      	strhne	r3, [r4, #12]
 8003f80:	bd10      	pop	{r4, pc}

08003f82 <__sclose>:
 8003f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f86:	f000 b813 	b.w	8003fb0 <_close_r>
	...

08003f8c <_write_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d07      	ldr	r5, [pc, #28]	; (8003fac <_write_r+0x20>)
 8003f90:	4604      	mov	r4, r0
 8003f92:	4608      	mov	r0, r1
 8003f94:	4611      	mov	r1, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fe fec7 	bl	8002d2e <_write>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_write_r+0x1e>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_write_r+0x1e>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	2000017c 	.word	0x2000017c

08003fb0 <_close_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4d06      	ldr	r5, [pc, #24]	; (8003fcc <_close_r+0x1c>)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f7fe fed3 	bl	8002d66 <_close>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_close_r+0x1a>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_close_r+0x1a>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	2000017c 	.word	0x2000017c

08003fd0 <_fstat_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d07      	ldr	r5, [pc, #28]	; (8003ff0 <_fstat_r+0x20>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	f7fe fecd 	bl	8002d7c <_fstat>
 8003fe2:	1c43      	adds	r3, r0, #1
 8003fe4:	d102      	bne.n	8003fec <_fstat_r+0x1c>
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	b103      	cbz	r3, 8003fec <_fstat_r+0x1c>
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000017c 	.word	0x2000017c

08003ff4 <_isatty_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d06      	ldr	r5, [pc, #24]	; (8004010 <_isatty_r+0x1c>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	f7fe fecb 	bl	8002d9a <_isatty>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_isatty_r+0x1a>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_isatty_r+0x1a>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	2000017c 	.word	0x2000017c

08004014 <_lseek_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	; (8004034 <_lseek_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fe fec3 	bl	8002dae <_lseek>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_lseek_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_lseek_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	2000017c 	.word	0x2000017c

08004038 <_read_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d07      	ldr	r5, [pc, #28]	; (8004058 <_read_r+0x20>)
 800403c:	4604      	mov	r4, r0
 800403e:	4608      	mov	r0, r1
 8004040:	4611      	mov	r1, r2
 8004042:	2200      	movs	r2, #0
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fe fe54 	bl	8002cf4 <_read>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_read_r+0x1e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_read_r+0x1e>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	2000017c 	.word	0x2000017c

0800405c <_init>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr

08004068 <_fini>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr
