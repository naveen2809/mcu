
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001438  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080015e0  080015e0  000115e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001650  08001650  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001650  08001650  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000074  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020028  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d68  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000adb  00000000  00000000  00022dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000390  00000000  00000000  00023898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002f8  00000000  00000000  00023c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021a4  00000000  00000000  00023f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000497d  00000000  00000000  000260c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dfb5  00000000  00000000  0002aa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000389f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d20  00000000  00000000  00038a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080015c8 	.word	0x080015c8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	080015c8 	.word	0x080015c8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <delay_us+0x2c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 8000208:	bf00      	nop
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <delay_us+0x2c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	011b      	lsls	r3, r3, #4
 8000214:	429a      	cmp	r2, r3
 8000216:	d3f8      	bcc.n	800020a <delay_us+0x12>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000044 	.word	0x20000044

08000228 <configure_delay_timer>:

void configure_delay_timer(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <configure_delay_timer+0x3c>)
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 8000234:	2228      	movs	r2, #40	; 0x28
 8000236:	2100      	movs	r1, #0
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <configure_delay_timer+0x40>)
 800023a:	f001 f9bd 	bl	80015b8 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <configure_delay_timer+0x3c>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <configure_delay_timer+0x3c>)
 8000246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800024a:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 800024c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000250:	f000 fcb0 	bl	8000bb4 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <configure_delay_timer+0x3c>)
 8000256:	f000 f951 	bl	80004fc <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <configure_delay_timer+0x3c>)
 800025c:	f000 fb8f 	bl	800097e <General_Purpose_Timer_PeripheralEnable>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000044 	.word	0x20000044
 8000268:	20000048 	.word	0x20000048

0800026c <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000270:	482a      	ldr	r0, [pc, #168]	; (800031c <configure_uart+0xb0>)
 8000272:	f000 fc9f 	bl	8000bb4 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000276:	2202      	movs	r2, #2
 8000278:	2105      	movs	r1, #5
 800027a:	4828      	ldr	r0, [pc, #160]	; (800031c <configure_uart+0xb0>)
 800027c:	f000 fb90 	bl	80009a0 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000280:	2202      	movs	r2, #2
 8000282:	2106      	movs	r1, #6
 8000284:	4825      	ldr	r0, [pc, #148]	; (800031c <configure_uart+0xb0>)
 8000286:	f000 fb8b 	bl	80009a0 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 800028a:	2207      	movs	r2, #7
 800028c:	2105      	movs	r1, #5
 800028e:	4823      	ldr	r0, [pc, #140]	; (800031c <configure_uart+0xb0>)
 8000290:	f000 fbcc 	bl	8000a2c <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000294:	2207      	movs	r2, #7
 8000296:	2106      	movs	r1, #6
 8000298:	4820      	ldr	r0, [pc, #128]	; (800031c <configure_uart+0xb0>)
 800029a:	f000 fbc7 	bl	8000a2c <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800029e:	2200      	movs	r2, #0
 80002a0:	2105      	movs	r1, #5
 80002a2:	481e      	ldr	r0, [pc, #120]	; (800031c <configure_uart+0xb0>)
 80002a4:	f000 fbfb 	bl	8000a9e <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2106      	movs	r1, #6
 80002ac:	481b      	ldr	r0, [pc, #108]	; (800031c <configure_uart+0xb0>)
 80002ae:	f000 fbf6 	bl	8000a9e <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80002b2:	2202      	movs	r2, #2
 80002b4:	2105      	movs	r1, #5
 80002b6:	4819      	ldr	r0, [pc, #100]	; (800031c <configure_uart+0xb0>)
 80002b8:	f000 fc37 	bl	8000b2a <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80002bc:	2202      	movs	r2, #2
 80002be:	2106      	movs	r1, #6
 80002c0:	4816      	ldr	r0, [pc, #88]	; (800031c <configure_uart+0xb0>)
 80002c2:	f000 fc32 	bl	8000b2a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2105      	movs	r1, #5
 80002ca:	4814      	ldr	r0, [pc, #80]	; (800031c <configure_uart+0xb0>)
 80002cc:	f000 fc09 	bl	8000ae2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2106      	movs	r1, #6
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <configure_uart+0xb0>)
 80002d6:	f000 fc04 	bl	8000ae2 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <configure_uart+0xb4>)
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <configure_uart+0xb8>)
 80002de:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <configure_uart+0xb4>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <configure_uart+0xb4>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <configure_uart+0xb4>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <configure_uart+0xb4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <configure_uart+0xb4>)
 80002fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002fe:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <configure_uart+0xb4>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <configure_uart+0xb8>)
 8000308:	f000 fc54 	bl	8000bb4 <EnablePeriClk>
	USART_Init(&Test_USART);
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <configure_uart+0xb4>)
 800030e:	f000 fe59 	bl	8000fc4 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000312:	4803      	ldr	r0, [pc, #12]	; (8000320 <configure_uart+0xb4>)
 8000314:	f000 ff56 	bl	80011c4 <USART_PeripheralEnable>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40020c00 	.word	0x40020c00
 8000320:	20000070 	.word	0x20000070
 8000324:	40004400 	.word	0x40004400

08000328 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4603      	mov	r3, r0
 8000338:	70fb      	strb	r3, [r7, #3]
 800033a:	460b      	mov	r3, r1
 800033c:	70bb      	strb	r3, [r7, #2]
 800033e:	4613      	mov	r3, r2
 8000340:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <configure_external_gpio_interrupt+0x10c>)
 8000344:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 8000346:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <configure_external_gpio_interrupt+0x110>)
 8000348:	623b      	str	r3, [r7, #32]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <configure_external_gpio_interrupt+0x114>)
 800034c:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 800034e:	4b3c      	ldr	r3, [pc, #240]	; (8000440 <configure_external_gpio_interrupt+0x118>)
 8000350:	61bb      	str	r3, [r7, #24]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8000352:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <configure_external_gpio_interrupt+0x11c>)
 8000354:	617b      	str	r3, [r7, #20]
	uint32_t OFFSET;
	uint32_t OFFSET_ADDRESS;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 fc2c 	bl	8000bb4 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2200      	movs	r2, #0
 8000360:	4619      	mov	r1, r3
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f000 fb1c 	bl	80009a0 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 fb95 	bl	8000a9e <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2202      	movs	r2, #2
 8000378:	4619      	mov	r1, r3
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 fbd5 	bl	8000b2a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 fbab 	bl	8000ae2 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 800038c:	6a3b      	ldr	r3, [r7, #32]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	78fa      	ldrb	r2, [r7, #3]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	431a      	orrs	r2, r3
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 800039e:	78bb      	ldrb	r3, [r7, #2]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d108      	bne.n	80003b6 <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	78fa      	ldrb	r2, [r7, #3]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	431a      	orrs	r2, r3
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 80003b6:	78bb      	ldrb	r3, [r7, #2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d108      	bne.n	80003ce <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	78fa      	ldrb	r2, [r7, #3]
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	431a      	orrs	r2, r3
 80003ca:	69bb      	ldr	r3, [r7, #24]
 80003cc:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 80003ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	f003 0303 	and.w	r3, r3, #3
 80003e0:	613b      	str	r3, [r7, #16]
	OFFSET_ADDRESS = gpio_pin/4;
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	60fb      	str	r3, [r7, #12]
	pSYSCFG_EXTI_CR_ADDR += OFFSET_ADDRESS;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	4413      	add	r3, r2
 80003f2:	617b      	str	r3, [r7, #20]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	693a      	ldr	r2, [r7, #16]
 80003fa:	0092      	lsls	r2, r2, #2
 80003fc:	210f      	movs	r1, #15
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	43d2      	mvns	r2, r2
 8000404:	401a      	ands	r2, r3
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f81c 	bl	8000448 <gpio_port_name_to_num>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	409a      	lsls	r2, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	431a      	orrs	r2, r3
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 8000424:	787b      	ldrb	r3, [r7, #1]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fd88 	bl	8000f3c <NVIC_EnableIRQ>
}
 800042c:	bf00      	nop
 800042e:	3728      	adds	r7, #40	; 0x28
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40023844 	.word	0x40023844
 8000438:	40013c00 	.word	0x40013c00
 800043c:	40013c08 	.word	0x40013c08
 8000440:	40013c0c 	.word	0x40013c0c
 8000444:	40013808 	.word	0x40013808

08000448 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a21      	ldr	r2, [pc, #132]	; (80004d8 <gpio_port_name_to_num+0x90>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d102      	bne.n	800045e <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	e036      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1e      	ldr	r2, [pc, #120]	; (80004dc <gpio_port_name_to_num+0x94>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d102      	bne.n	800046c <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
 800046a:	e02f      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <gpio_port_name_to_num+0x98>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d102      	bne.n	800047a <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8000474:	2302      	movs	r3, #2
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e028      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <gpio_port_name_to_num+0x9c>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d102      	bne.n	8000488 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8000482:	2303      	movs	r3, #3
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	e021      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <gpio_port_name_to_num+0xa0>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d102      	bne.n	8000496 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000490:	2304      	movs	r3, #4
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e01a      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <gpio_port_name_to_num+0xa4>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d102      	bne.n	80004a4 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 800049e:	2305      	movs	r3, #5
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	e013      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <gpio_port_name_to_num+0xa8>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d102      	bne.n	80004b2 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 80004ac:	2306      	movs	r3, #6
 80004ae:	73fb      	strb	r3, [r7, #15]
 80004b0:	e00c      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <gpio_port_name_to_num+0xac>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d102      	bne.n	80004c0 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 80004ba:	2307      	movs	r3, #7
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e005      	b.n	80004cc <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <gpio_port_name_to_num+0xb0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d101      	bne.n	80004cc <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 80004c8:	2308      	movs	r3, #8
 80004ca:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40021400 	.word	0x40021400
 80004f0:	40021800 	.word	0x40021800
 80004f4:	40021c00 	.word	0x40021c00
 80004f8:	40022000 	.word	0x40022000

080004fc <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	6852      	ldr	r2, [r2, #4]
 800050c:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	6892      	ldr	r2, [r2, #8]
 8000516:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7b5b      	ldrb	r3, [r3, #13]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d16a      	bne.n	80005f6 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a1a      	ldr	r2, [r3, #32]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b9b      	ldrb	r3, [r3, #14]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d11c      	bne.n	8000572 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f022 0203 	bic.w	r2, r2, #3
 8000546:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6912      	ldr	r2, [r2, #16]
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	699a      	ldr	r2, [r3, #24]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000560:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	699a      	ldr	r2, [r3, #24]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000570:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7b9b      	ldrb	r3, [r3, #14]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d11c      	bne.n	80005b4 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	699a      	ldr	r2, [r3, #24]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f022 0203 	bic.w	r2, r2, #3
 8000588:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	6912      	ldr	r2, [r2, #16]
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005a2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80005b2:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7b9b      	ldrb	r3, [r3, #14]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d11c      	bne.n	80005f6 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f022 0203 	bic.w	r2, r2, #3
 80005ca:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	6912      	ldr	r2, [r2, #16]
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80005e4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	699a      	ldr	r2, [r3, #24]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80005f4:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7d1b      	ldrb	r3, [r3, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 80bf 	bne.w	800077e <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7d5b      	ldrb	r3, [r3, #21]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d124      	bne.n	8000652 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	699a      	ldr	r2, [r3, #24]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000616:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	6992      	ldr	r2, [r2, #24]
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000630:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000640:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6a1a      	ldr	r2, [r3, #32]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f042 0210 	orr.w	r2, r2, #16
 8000650:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7d5b      	ldrb	r3, [r3, #21]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d124      	bne.n	80006a4 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	699a      	ldr	r2, [r3, #24]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000668:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	6992      	ldr	r2, [r2, #24]
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000682:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000692:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a1a      	ldr	r2, [r3, #32]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0210 	orr.w	r2, r2, #16
 80006a2:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7d5b      	ldrb	r3, [r3, #21]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d124      	bne.n	80006f6 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	699a      	ldr	r2, [r3, #24]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006ba:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6992      	ldr	r2, [r2, #24]
 80006c4:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80006d4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80006e4:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a1a      	ldr	r2, [r3, #32]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f042 0210 	orr.w	r2, r2, #16
 80006f4:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7d5b      	ldrb	r3, [r3, #21]
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d13f      	bne.n	800077e <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800070c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	699a      	ldr	r2, [r3, #24]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800071c:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800072c:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6a1a      	ldr	r2, [r3, #32]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0220 	bic.w	r2, r2, #32
 800073c:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a1a      	ldr	r2, [r3, #32]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800074c:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800075c:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 0204 	orr.w	r2, r2, #4
 800076c:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6a1a      	ldr	r2, [r3, #32]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f042 0210 	orr.w	r2, r2, #16
 800077c:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7f1b      	ldrb	r3, [r3, #28]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d16a      	bne.n	800085c <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a1a      	ldr	r2, [r3, #32]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000794:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7f5b      	ldrb	r3, [r3, #29]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d11c      	bne.n	80007d8 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f022 0203 	bic.w	r2, r2, #3
 80007ac:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	6a12      	ldr	r2, [r2, #32]
 80007b6:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007c6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80007d6:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7f5b      	ldrb	r3, [r3, #29]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11c      	bne.n	800081a <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0203 	bic.w	r2, r2, #3
 80007ee:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	6a12      	ldr	r2, [r2, #32]
 80007f8:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000808:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000818:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7f5b      	ldrb	r3, [r3, #29]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d11c      	bne.n	800085c <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f022 0203 	bic.w	r2, r2, #3
 8000830:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	6a12      	ldr	r2, [r2, #32]
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800084a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	69da      	ldr	r2, [r3, #28]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800085a:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000862:	2b00      	cmp	r3, #0
 8000864:	d16d      	bne.n	8000942 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6a1a      	ldr	r2, [r3, #32]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000874:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800087c:	2b02      	cmp	r3, #2
 800087e:	d11c      	bne.n	80008ba <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	69da      	ldr	r2, [r3, #28]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800088e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69da      	ldr	r2, [r3, #28]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008a8:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80008b8:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d11c      	bne.n	80008fe <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008d2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008dc:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008ec:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	69da      	ldr	r2, [r3, #28]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80008fc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000904:	2b04      	cmp	r3, #4
 8000906:	d11c      	bne.n	8000942 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	69da      	ldr	r2, [r3, #28]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000916:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000930:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000940:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7b1b      	ldrb	r3, [r3, #12]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d108      	bne.n	800095c <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 800095a:	e00b      	b.n	8000974 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7b1b      	ldrb	r3, [r3, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d107      	bne.n	8000974 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	60da      	str	r2, [r3, #12]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
 80009ac:	4613      	mov	r3, r2
 80009ae:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	2103      	movs	r1, #3
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	401a      	ands	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	78b9      	ldrb	r1, [r7, #2]
 80009d0:	78fa      	ldrb	r2, [r7, #3]
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	431a      	orrs	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	601a      	str	r2, [r3, #0]

}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
 80009f4:	4613      	mov	r3, r2
 80009f6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	78fa      	ldrb	r2, [r7, #3]
 8000a02:	2101      	movs	r1, #1
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	78b9      	ldrb	r1, [r7, #2]
 8000a16:	78fa      	ldrb	r2, [r7, #3]
 8000a18:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	615a      	str	r2, [r3, #20]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000a4e:	7afa      	ldrb	r2, [r7, #11]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3208      	adds	r2, #8
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	7aba      	ldrb	r2, [r7, #10]
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a62:	43d2      	mvns	r2, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	7afa      	ldrb	r2, [r7, #11]
 8000a68:	4019      	ands	r1, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000a72:	7afa      	ldrb	r2, [r7, #11]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3208      	adds	r2, #8
 8000a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7c:	78b9      	ldrb	r1, [r7, #2]
 8000a7e:	7aba      	ldrb	r2, [r7, #10]
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4611      	mov	r1, r2
 8000a88:	7afa      	ldrb	r2, [r7, #11]
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	70fb      	strb	r3, [r7, #3]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	78fa      	ldrb	r2, [r7, #3]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	43d2      	mvns	r2, r2
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	78b9      	ldrb	r1, [r7, #2]
 8000acc:	78fa      	ldrb	r2, [r7, #3]
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	605a      	str	r2, [r3, #4]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	70fb      	strb	r3, [r7, #3]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	78fa      	ldrb	r2, [r7, #3]
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	78b9      	ldrb	r1, [r7, #2]
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	0052      	lsls	r2, r2, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60da      	str	r2, [r3, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	70fb      	strb	r3, [r7, #3]
 8000b36:	4613      	mov	r3, r2
 8000b38:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	78fa      	ldrb	r2, [r7, #3]
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	2103      	movs	r1, #3
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	78b9      	ldrb	r1, [r7, #2]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	431a      	orrs	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	609a      	str	r2, [r3, #8]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
	...

08000b74 <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <RTC_Alarm_IRQHandler+0x24>)
 8000b7c:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000b7e:	f000 f80d 	bl	8000b9c <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]

	return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013c14 	.word	0x40013c14

08000b9c <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <RTC_Alarm_Interrupt_Callback+0x14>)
 8000ba6:	f7ff ff1f 	bl	80009e8 <GPIOWritePin>

	return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a88      	ldr	r2, [pc, #544]	; (8000de0 <EnablePeriClk+0x22c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d108      	bne.n	8000bd6 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bc4:	4b87      	ldr	r3, [pc, #540]	; (8000de4 <EnablePeriClk+0x230>)
 8000bc6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f043 0201 	orr.w	r2, r3, #1
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000bd4:	e19b      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a83      	ldr	r2, [pc, #524]	; (8000de8 <EnablePeriClk+0x234>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d108      	bne.n	8000bf0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bde:	4b81      	ldr	r3, [pc, #516]	; (8000de4 <EnablePeriClk+0x230>)
 8000be0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f043 0202 	orr.w	r2, r3, #2
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	e18e      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a7e      	ldr	r2, [pc, #504]	; (8000dec <EnablePeriClk+0x238>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d108      	bne.n	8000c0a <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000bf8:	4b7a      	ldr	r3, [pc, #488]	; (8000de4 <EnablePeriClk+0x230>)
 8000bfa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f043 0204 	orr.w	r2, r3, #4
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	e181      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a78      	ldr	r2, [pc, #480]	; (8000df0 <EnablePeriClk+0x23c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d108      	bne.n	8000c24 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c12:	4b74      	ldr	r3, [pc, #464]	; (8000de4 <EnablePeriClk+0x230>)
 8000c14:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f043 0208 	orr.w	r2, r3, #8
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	601a      	str	r2, [r3, #0]
}
 8000c22:	e174      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a73      	ldr	r2, [pc, #460]	; (8000df4 <EnablePeriClk+0x240>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d108      	bne.n	8000c3e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c2c:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <EnablePeriClk+0x230>)
 8000c2e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f043 0210 	orr.w	r2, r3, #16
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	e167      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a6d      	ldr	r2, [pc, #436]	; (8000df8 <EnablePeriClk+0x244>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d108      	bne.n	8000c58 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c46:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <EnablePeriClk+0x230>)
 8000c48:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f043 0220 	orr.w	r2, r3, #32
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	e15a      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <EnablePeriClk+0x248>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d108      	bne.n	8000c72 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c60:	4b60      	ldr	r3, [pc, #384]	; (8000de4 <EnablePeriClk+0x230>)
 8000c62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	e14d      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a62      	ldr	r2, [pc, #392]	; (8000e00 <EnablePeriClk+0x24c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d108      	bne.n	8000c8c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c7a:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <EnablePeriClk+0x230>)
 8000c7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	e140      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a5d      	ldr	r2, [pc, #372]	; (8000e04 <EnablePeriClk+0x250>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d108      	bne.n	8000ca6 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000c94:	4b53      	ldr	r3, [pc, #332]	; (8000de4 <EnablePeriClk+0x230>)
 8000c96:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	e133      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a57      	ldr	r2, [pc, #348]	; (8000e08 <EnablePeriClk+0x254>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d108      	bne.n	8000cc0 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000cae:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <EnablePeriClk+0x258>)
 8000cb0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	e126      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a53      	ldr	r2, [pc, #332]	; (8000e10 <EnablePeriClk+0x25c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d108      	bne.n	8000cda <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cc8:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <EnablePeriClk+0x260>)
 8000cca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	e119      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4e      	ldr	r2, [pc, #312]	; (8000e18 <EnablePeriClk+0x264>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d108      	bne.n	8000cf4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <EnablePeriClk+0x260>)
 8000ce4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	e10c      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a49      	ldr	r2, [pc, #292]	; (8000e1c <EnablePeriClk+0x268>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d108      	bne.n	8000d0e <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <EnablePeriClk+0x260>)
 8000cfe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	e0ff      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a43      	ldr	r2, [pc, #268]	; (8000e20 <EnablePeriClk+0x26c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d108      	bne.n	8000d28 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <EnablePeriClk+0x260>)
 8000d18:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	601a      	str	r2, [r3, #0]
}
 8000d26:	e0f2      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3e      	ldr	r2, [pc, #248]	; (8000e24 <EnablePeriClk+0x270>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d108      	bne.n	8000d42 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <EnablePeriClk+0x260>)
 8000d32:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	e0e5      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <EnablePeriClk+0x274>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d108      	bne.n	8000d5c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <EnablePeriClk+0x258>)
 8000d4c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f043 0210 	orr.w	r2, r3, #16
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	e0d8      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <EnablePeriClk+0x278>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d108      	bne.n	8000d76 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <EnablePeriClk+0x260>)
 8000d66:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	e0cb      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <EnablePeriClk+0x27c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d108      	bne.n	8000d90 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <EnablePeriClk+0x260>)
 8000d80:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	e0be      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <EnablePeriClk+0x280>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d108      	bne.n	8000daa <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <EnablePeriClk+0x260>)
 8000d9a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	e0b1      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <EnablePeriClk+0x284>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d108      	bne.n	8000dc4 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <EnablePeriClk+0x260>)
 8000db4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	e0a4      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <EnablePeriClk+0x288>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d139      	bne.n	8000e40 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <EnablePeriClk+0x258>)
 8000dce:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f043 0220 	orr.w	r2, r3, #32
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	e097      	b.n	8000f0e <EnablePeriClk+0x35a>
 8000dde:	bf00      	nop
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40023830 	.word	0x40023830
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40021c00 	.word	0x40021c00
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023844 	.word	0x40023844
 8000e10:	40003800 	.word	0x40003800
 8000e14:	40023840 	.word	0x40023840
 8000e18:	40003c00 	.word	0x40003c00
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40005800 	.word	0x40005800
 8000e24:	40005c00 	.word	0x40005c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40004800 	.word	0x40004800
 8000e34:	40004c00 	.word	0x40004c00
 8000e38:	40005000 	.word	0x40005000
 8000e3c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <EnablePeriClk+0x364>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d108      	bne.n	8000e5a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <EnablePeriClk+0x368>)
 8000e4a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f043 0210 	orr.w	r2, r3, #16
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	e059      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <EnablePeriClk+0x36c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d108      	bne.n	8000e74 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <EnablePeriClk+0x368>)
 8000e64:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f043 0220 	orr.w	r2, r3, #32
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	601a      	str	r2, [r3, #0]
}
 8000e72:	e04c      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <EnablePeriClk+0x370>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d108      	bne.n	8000e8e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <EnablePeriClk+0x374>)
 8000e7e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	e03f      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <EnablePeriClk+0x378>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d108      	bne.n	8000ea8 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <EnablePeriClk+0x374>)
 8000e98:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	e032      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eae:	d108      	bne.n	8000ec2 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <EnablePeriClk+0x368>)
 8000eb2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 0201 	orr.w	r2, r3, #1
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	e025      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <EnablePeriClk+0x37c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d108      	bne.n	8000edc <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <EnablePeriClk+0x368>)
 8000ecc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	e018      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <EnablePeriClk+0x380>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d108      	bne.n	8000ef6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <EnablePeriClk+0x368>)
 8000ee6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f043 0204 	orr.w	r2, r3, #4
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	e00b      	b.n	8000f0e <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <EnablePeriClk+0x384>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d107      	bne.n	8000f0e <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <EnablePeriClk+0x368>)
 8000f00:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f043 0208 	orr.w	r2, r3, #8
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	40023840 	.word	0x40023840
 8000f20:	40001400 	.word	0x40001400
 8000f24:	40026000 	.word	0x40026000
 8000f28:	40023830 	.word	0x40023830
 8000f2c:	40026400 	.word	0x40026400
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40000800 	.word	0x40000800
 8000f38:	40000c00 	.word	0x40000c00

08000f3c <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f5e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000f62:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	431a      	orrs	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <NVIC_IRQSetPending>:

		*pNVIC_ICER |= (1 << NVICBitPos);
}

void NVIC_IRQSetPending(uint8_t IRQNum)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISPR;
	uint32_t NVICRegisterNum = IRQNum/32;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	613b      	str	r3, [r7, #16]

	pNVIC_ISPR = (uint32_t*) NVIC_ISPR_BASE_ADDR + NVICRegisterNum;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fa2:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8000fa6:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISPR |=  (1 << NVICBitPos);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	601a      	str	r2, [r3, #0]

	return;
 8000fba:	bf00      	nop
}
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d110      	bne.n	8000ff6 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0208 	orr.w	r2, r2, #8
 8000fe2:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	e028      	b.n	8001048 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d110      	bne.n	8001020 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0208 	bic.w	r2, r2, #8
 800100c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0204 	orr.w	r2, r2, #4
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	e013      	b.n	8001048 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d10f      	bne.n	8001048 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0208 	orr.w	r2, r2, #8
 8001036:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0204 	orr.w	r2, r2, #4
 8001046:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d108      	bne.n	8001062 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	e00b      	b.n	800107a <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001078:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001088:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6919      	ldr	r1, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	031a      	lsls	r2, r3, #12
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	e028      	b.n	800110a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d110      	bne.n	80010e2 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010ce:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	e013      	b.n	800110a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d10f      	bne.n	800110a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f8:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001108:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f87d 	bl	8001210 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d110      	bne.n	8001140 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800112c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800113c:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 800113e:	e03d      	b.n	80011bc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d110      	bne.n	800116a <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001156:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001166:	615a      	str	r2, [r3, #20]
}
 8001168:	e028      	b.n	80011bc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d110      	bne.n	8001194 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001180:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001190:	615a      	str	r2, [r3, #20]
}
 8001192:	e013      	b.n	80011bc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d10f      	bne.n	80011bc <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011aa:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ba:	615a      	str	r2, [r3, #20]
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011da:	60da      	str	r2, [r3, #12]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 800121a:	f240 6383 	movw	r3, #1667	; 0x683
 800121e:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <USART_EnableRXNEInterrupt>:
	}

}

void USART_EnableRXNEInterrupt(struct USART_Handle_t *pUSART_Handle)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RXNEIE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	60da      	str	r2, [r3, #12]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <USART_EnableTXEInterrupt>:

void USART_EnableTXEInterrupt(struct USART_Handle_t *pUSART_Handle)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TXEIE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <USART_DisableTXEInterrupt>:

void USART_DisableTXEInterrupt(struct USART_Handle_t *pUSART_Handle)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TXEIE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	60da      	str	r2, [r3, #12]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <USART_SendData_Interrupt>:

void USART_SendData_Interrupt(char *pTxBuf, uint32_t Len, uint8_t usart_irq_num)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	4613      	mov	r3, r2
 80012a4:	71fb      	strb	r3, [r7, #7]

	//Synchronization mechanism to guard against successive calls to the this function
	//Ensures processing of first message is completed before taking up new message
	while(usart_available == FALSE);
 80012a6:	bf00      	nop
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <USART_SendData_Interrupt+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0fb      	beq.n	80012a8 <USART_SendData_Interrupt+0x10>

	usart_available = FALSE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <USART_SendData_Interrupt+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

	//Update the data buffers and enable the interrupt
	usart_tx_message = pTxBuf;
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <USART_SendData_Interrupt+0x5c>)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6013      	str	r3, [r2, #0]
	usart_tx_message_len = Len;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <USART_SendData_Interrupt+0x60>)
 80012c0:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(usart_irq_num);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe39 	bl	8000f3c <NVIC_EnableIRQ>
	usart_tx_count = 0;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <USART_SendData_Interrupt+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
	usart_tx_begin = TRUE;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <USART_SendData_Interrupt+0x68>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	delay_us(5000);
 80012d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80012da:	f7fe ff8d 	bl	80001f8 <delay_us>
	NVIC_IRQSetPending(usart_irq_num);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe4d 	bl	8000f80 <NVIC_IRQSetPending>

	return;
 80012e6:	bf00      	nop
}
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	2000008c 	.word	0x2000008c
 80012f8:	20000090 	.word	0x20000090
 80012fc:	20000094 	.word	0x20000094
 8001300:	20000098 	.word	0x20000098

08001304 <USART_Tx_Interrupt_Callback>:

void USART_Tx_Interrupt_Callback(struct USART_Handle_t *pUSART_Handle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if(usart_tx_begin == TRUE)
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <USART_Tx_Interrupt_Callback+0x6c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <USART_Tx_Interrupt_Callback+0x20>
	{
		USART_EnableTXEInterrupt(pUSART_Handle);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff9c 	bl	8001254 <USART_EnableTXEInterrupt>
		usart_tx_begin = FALSE;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <USART_Tx_Interrupt_Callback+0x6c>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
		return;
 8001322:	e021      	b.n	8001368 <USART_Tx_Interrupt_Callback+0x64>
	}

	if(usart_tx_count < usart_tx_message_len)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <USART_Tx_Interrupt_Callback+0x70>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <USART_Tx_Interrupt_Callback+0x74>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	da0e      	bge.n	800134e <USART_Tx_Interrupt_Callback+0x4a>
	{
		pUSART_Handle->pUSART->USART_DR = usart_tx_message[usart_tx_count];
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <USART_Tx_Interrupt_Callback+0x78>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <USART_Tx_Interrupt_Callback+0x70>)
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
		usart_tx_count++;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <USART_Tx_Interrupt_Callback+0x70>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <USART_Tx_Interrupt_Callback+0x70>)
 800134c:	6013      	str	r3, [r2, #0]
	}

	if(usart_tx_count == usart_tx_message_len)
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <USART_Tx_Interrupt_Callback+0x70>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <USART_Tx_Interrupt_Callback+0x74>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d105      	bne.n	8001366 <USART_Tx_Interrupt_Callback+0x62>
	{
		USART_DisableTXEInterrupt(pUSART_Handle);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff8b 	bl	8001276 <USART_DisableTXEInterrupt>
		usart_available = TRUE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <USART_Tx_Interrupt_Callback+0x7c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	}

	return;
 8001366:	bf00      	nop
}
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000098 	.word	0x20000098
 8001374:	20000094 	.word	0x20000094
 8001378:	20000090 	.word	0x20000090
 800137c:	2000008c 	.word	0x2000008c
 8001380:	20000000 	.word	0x20000000

08001384 <USART_Rx_Interrupt_Callback>:

void USART_Rx_Interrupt_Callback(struct USART_Handle_t *pUSART_Handle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	USART_RX_Interrupt_Application_Callback(pUSART_Handle->pUSART->USART_DR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f883 	bl	80014a0 <USART_RX_Interrupt_Application_Callback>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <ITM_SendChar+0x44>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <ITM_SendChar+0x44>)
 80013b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <ITM_SendChar+0x48>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <ITM_SendChar+0x48>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80013c6:	bf00      	nop
 80013c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f8      	beq.n	80013c8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80013d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000edfc 	.word	0xe000edfc
 80013ec:	e0000e00 	.word	0xe0000e00

080013f0 <main>:
extern void ITM_SendChar(uint8_t ch);

char message_isr[] = "This message is from Button ISR\r\n";

int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	; 0x70
 80013f4:	af00      	add	r7, sp, #0
	char message1[] = "Message 1\r\n";
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <main+0x68>)
 80013f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char message[] = "Testing Optimized and Updated UART Interrupt Driver With Synchronization Support: Hello World!!!\r\n";
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <main+0x6c>)
 8001404:	463b      	mov	r3, r7
 8001406:	4611      	mov	r1, r2
 8001408:	2263      	movs	r2, #99	; 0x63
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8c6 	bl	800159c <memcpy>

	//Configure the Timer
	configure_delay_timer();
 8001410:	f7fe ff0a 	bl	8000228 <configure_delay_timer>

	//Configure UART
	configure_uart();
 8001414:	f7fe ff2a 	bl	800026c <configure_uart>

	//Configure the Button Interrupt
	configure_external_gpio_interrupt(BTN_INT_GPIO_PORT,BTN_INT_GPIO_PIN,EXTI_FALLING_TRIGGER,BTN_INT_IRQ_NUM);
 8001418:	2306      	movs	r3, #6
 800141a:	2201      	movs	r2, #1
 800141c:	2100      	movs	r1, #0
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <main+0x70>)
 8001420:	f7fe ff82 	bl	8000328 <configure_external_gpio_interrupt>

	//Enable the UART Interrupt
	USART_SendData_Interrupt(message1,strlen(message1),USART2_IRQ_NUM);
 8001424:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fedd 	bl	80001e8 <strlen>
 800142e:	4601      	mov	r1, r0
 8001430:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001434:	2226      	movs	r2, #38	; 0x26
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff2e 	bl	8001298 <USART_SendData_Interrupt>
	USART_SendData_Interrupt(message,strlen(message),USART2_IRQ_NUM);
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fed2 	bl	80001e8 <strlen>
 8001444:	4601      	mov	r1, r0
 8001446:	463b      	mov	r3, r7
 8001448:	2226      	movs	r2, #38	; 0x26
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff24 	bl	8001298 <USART_SendData_Interrupt>

	//Enable the Receive Interrupt
	USART_EnableRXNEInterrupt(&Test_USART);
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <main+0x74>)
 8001452:	f7ff feee 	bl	8001232 <USART_EnableRXNEInterrupt>

	while(1)
 8001456:	e7fe      	b.n	8001456 <main+0x66>
 8001458:	080015e0 	.word	0x080015e0
 800145c:	080015ec 	.word	0x080015ec
 8001460:	40020c00 	.word	0x40020c00
 8001464:	20000070 	.word	0x20000070

08001468 <USART2_IRQHandler>:

	return 0;
}

void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

	if(USART_GetFlagStatus(&Test_USART,USART_FLAG_TXE))
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <USART2_IRQHandler+0x34>)
 8001470:	f7ff feb9 	bl	80011e6 <USART_GetFlagStatus>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <USART2_IRQHandler+0x18>
	{
		USART_Tx_Interrupt_Callback(&Test_USART);
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <USART2_IRQHandler+0x34>)
 800147c:	f7ff ff42 	bl	8001304 <USART_Tx_Interrupt_Callback>
	}

	if(USART_GetFlagStatus(&Test_USART,USART_FLAG_RXNE))
 8001480:	2120      	movs	r1, #32
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <USART2_IRQHandler+0x34>)
 8001484:	f7ff feaf 	bl	80011e6 <USART_GetFlagStatus>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <USART2_IRQHandler+0x2e>
	{
		USART_Rx_Interrupt_Callback(&Test_USART);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <USART2_IRQHandler+0x34>)
 8001490:	f7ff ff78 	bl	8001384 <USART_Rx_Interrupt_Callback>
	}

	return;
 8001494:	bf00      	nop
 8001496:	bf00      	nop
}
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000070 	.word	0x20000070

080014a0 <USART_RX_Interrupt_Application_Callback>:

void USART_RX_Interrupt_Application_Callback(uint8_t data)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(data);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff79 	bl	80013a4 <ITM_SendChar>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <EXTI0_IRQHandler+0x38>)
 80014c4:	607b      	str	r3, [r7, #4]

	//Handling the Interrupt
	USART_SendData_Interrupt(message_isr,strlen(message_isr),USART2_IRQ_NUM);
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <EXTI0_IRQHandler+0x3c>)
 80014c8:	f7fe fe8e 	bl	80001e8 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2226      	movs	r2, #38	; 0x26
 80014d0:	4619      	mov	r1, r3
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <EXTI0_IRQHandler+0x3c>)
 80014d4:	f7ff fee0 	bl	8001298 <USART_SendData_Interrupt>

	//De-bouncing the switch
	delay_us(500000);
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <EXTI0_IRQHandler+0x40>)
 80014da:	f7fe fe8d 	bl	80001f8 <delay_us>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << BTN_INT_GPIO_PIN);		// Clearing the EXTI_PR Register
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]

	return;
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013c14 	.word	0x40013c14
 80014f8:	20000004 	.word	0x20000004
 80014fc:	0007a120 	.word	0x0007a120

08001500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001502:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800152e:	f000 f811 	bl	8001554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001532:	f7ff ff5d 	bl	80013f0 <main>

08001536 <LoopForever>:

LoopForever:
  b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   r0, =_estack
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001544:	08001658 	.word	0x08001658
  ldr r2, =_sbss
 8001548:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800154c:	2000009c 	.word	0x2000009c

08001550 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <__libc_init_array>:
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	4d0d      	ldr	r5, [pc, #52]	; (800158c <__libc_init_array+0x38>)
 8001558:	4c0d      	ldr	r4, [pc, #52]	; (8001590 <__libc_init_array+0x3c>)
 800155a:	1b64      	subs	r4, r4, r5
 800155c:	10a4      	asrs	r4, r4, #2
 800155e:	2600      	movs	r6, #0
 8001560:	42a6      	cmp	r6, r4
 8001562:	d109      	bne.n	8001578 <__libc_init_array+0x24>
 8001564:	4d0b      	ldr	r5, [pc, #44]	; (8001594 <__libc_init_array+0x40>)
 8001566:	4c0c      	ldr	r4, [pc, #48]	; (8001598 <__libc_init_array+0x44>)
 8001568:	f000 f82e 	bl	80015c8 <_init>
 800156c:	1b64      	subs	r4, r4, r5
 800156e:	10a4      	asrs	r4, r4, #2
 8001570:	2600      	movs	r6, #0
 8001572:	42a6      	cmp	r6, r4
 8001574:	d105      	bne.n	8001582 <__libc_init_array+0x2e>
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	f855 3b04 	ldr.w	r3, [r5], #4
 800157c:	4798      	blx	r3
 800157e:	3601      	adds	r6, #1
 8001580:	e7ee      	b.n	8001560 <__libc_init_array+0xc>
 8001582:	f855 3b04 	ldr.w	r3, [r5], #4
 8001586:	4798      	blx	r3
 8001588:	3601      	adds	r6, #1
 800158a:	e7f2      	b.n	8001572 <__libc_init_array+0x1e>
 800158c:	08001650 	.word	0x08001650
 8001590:	08001650 	.word	0x08001650
 8001594:	08001650 	.word	0x08001650
 8001598:	08001654 	.word	0x08001654

0800159c <memcpy>:
 800159c:	440a      	add	r2, r1
 800159e:	4291      	cmp	r1, r2
 80015a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80015a4:	d100      	bne.n	80015a8 <memcpy+0xc>
 80015a6:	4770      	bx	lr
 80015a8:	b510      	push	{r4, lr}
 80015aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80015b2:	4291      	cmp	r1, r2
 80015b4:	d1f9      	bne.n	80015aa <memcpy+0xe>
 80015b6:	bd10      	pop	{r4, pc}

080015b8 <memset>:
 80015b8:	4402      	add	r2, r0
 80015ba:	4603      	mov	r3, r0
 80015bc:	4293      	cmp	r3, r2
 80015be:	d100      	bne.n	80015c2 <memset+0xa>
 80015c0:	4770      	bx	lr
 80015c2:	f803 1b01 	strb.w	r1, [r3], #1
 80015c6:	e7f9      	b.n	80015bc <memset+0x4>

080015c8 <_init>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr

080015d4 <_fini>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	bf00      	nop
 80015d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015da:	bc08      	pop	{r3}
 80015dc:	469e      	mov	lr, r3
 80015de:	4770      	bx	lr
