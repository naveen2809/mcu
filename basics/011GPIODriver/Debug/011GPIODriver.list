
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a00  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c60  08001c60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001c60  08001c60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c60  08001c60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000058  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a41  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ae0  00000000  00000000  00022adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  000235c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000318  00000000  00000000  00023970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002518  00000000  00000000  00023c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a67  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e0fc  00000000  00000000  0002ac07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00038d03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001400  00000000  00000000  00038d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001b90 	.word	0x08001b90

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08001b90 	.word	0x08001b90

080001e8 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80001ec:	482a      	ldr	r0, [pc, #168]	; (8000298 <configure_uart+0xb0>)
 80001ee:	f000 faed 	bl	80007cc <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80001f2:	2202      	movs	r2, #2
 80001f4:	2105      	movs	r1, #5
 80001f6:	4828      	ldr	r0, [pc, #160]	; (8000298 <configure_uart+0xb0>)
 80001f8:	f000 f866 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80001fc:	2202      	movs	r2, #2
 80001fe:	2106      	movs	r1, #6
 8000200:	4825      	ldr	r0, [pc, #148]	; (8000298 <configure_uart+0xb0>)
 8000202:	f000 f861 	bl	80002c8 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 8000206:	2207      	movs	r2, #7
 8000208:	2105      	movs	r1, #5
 800020a:	4823      	ldr	r0, [pc, #140]	; (8000298 <configure_uart+0xb0>)
 800020c:	f000 f8b8 	bl	8000380 <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 8000210:	2207      	movs	r2, #7
 8000212:	2106      	movs	r1, #6
 8000214:	4820      	ldr	r0, [pc, #128]	; (8000298 <configure_uart+0xb0>)
 8000216:	f000 f8b3 	bl	8000380 <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 800021a:	2200      	movs	r2, #0
 800021c:	2105      	movs	r1, #5
 800021e:	481e      	ldr	r0, [pc, #120]	; (8000298 <configure_uart+0xb0>)
 8000220:	f000 f8e7 	bl	80003f2 <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000224:	2200      	movs	r2, #0
 8000226:	2106      	movs	r1, #6
 8000228:	481b      	ldr	r0, [pc, #108]	; (8000298 <configure_uart+0xb0>)
 800022a:	f000 f8e2 	bl	80003f2 <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800022e:	2202      	movs	r2, #2
 8000230:	2105      	movs	r1, #5
 8000232:	4819      	ldr	r0, [pc, #100]	; (8000298 <configure_uart+0xb0>)
 8000234:	f000 f923 	bl	800047e <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000238:	2202      	movs	r2, #2
 800023a:	2106      	movs	r1, #6
 800023c:	4816      	ldr	r0, [pc, #88]	; (8000298 <configure_uart+0xb0>)
 800023e:	f000 f91e 	bl	800047e <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000242:	2201      	movs	r2, #1
 8000244:	2105      	movs	r1, #5
 8000246:	4814      	ldr	r0, [pc, #80]	; (8000298 <configure_uart+0xb0>)
 8000248:	f000 f8f5 	bl	8000436 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 800024c:	2201      	movs	r2, #1
 800024e:	2106      	movs	r1, #6
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <configure_uart+0xb0>)
 8000252:	f000 f8f0 	bl	8000436 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <configure_uart+0xb4>)
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <configure_uart+0xb8>)
 800025a:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <configure_uart+0xb4>)
 800025e:	2202      	movs	r2, #2
 8000260:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <configure_uart+0xb4>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <configure_uart+0xb4>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <configure_uart+0xb4>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <configure_uart+0xb4>)
 8000276:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800027a:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <configure_uart+0xb4>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <configure_uart+0xb8>)
 8000284:	f000 faa2 	bl	80007cc <EnablePeriClk>
	USART_Init(&Test_USART);
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <configure_uart+0xb4>)
 800028a:	f000 fc63 	bl	8000b54 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <configure_uart+0xb4>)
 8000290:	f000 fd60 	bl	8000d54 <USART_PeripheralEnable>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40020c00 	.word	0x40020c00
 800029c:	20000090 	.word	0x20000090
 80002a0:	40004400 	.word	0x40004400

080002a4 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <UART_SendChar+0x20>)
 80002b6:	f000 fd73 	bl	8000da0 <USART_SendData>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000090 	.word	0x20000090

080002c8 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
 80002d4:	4613      	mov	r3, r2
 80002d6:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	78fa      	ldrb	r2, [r7, #3]
 80002e2:	0052      	lsls	r2, r2, #1
 80002e4:	2103      	movs	r1, #3
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	78b9      	ldrb	r1, [r7, #2]
 80002f8:	78fa      	ldrb	r2, [r7, #3]
 80002fa:	0052      	lsls	r2, r2, #1
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	431a      	orrs	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]

}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
 800031c:	4613      	mov	r3, r2
 800031e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	2101      	movs	r1, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	401a      	ands	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	78b9      	ldrb	r1, [r7, #2]
 800033e:	78fa      	ldrb	r2, [r7, #3]
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <GPIOTogglePin>:

void GPIOTogglePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR ^= (1 << GPIOPinNum);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	78fa      	ldrb	r2, [r7, #3]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	405a      	eors	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	615a      	str	r2, [r3, #20]
}
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
 800038c:	4613      	mov	r3, r2
 800038e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	08db      	lsrs	r3, r3, #3
 8000398:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	f003 0307 	and.w	r3, r3, #7
 80003a0:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80003a2:	7afa      	ldrb	r2, [r7, #11]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3208      	adds	r2, #8
 80003a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003ac:	7aba      	ldrb	r2, [r7, #10]
 80003ae:	0092      	lsls	r2, r2, #2
 80003b0:	210f      	movs	r1, #15
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	7afa      	ldrb	r2, [r7, #11]
 80003bc:	4019      	ands	r1, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3208      	adds	r2, #8
 80003c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 80003c6:	7afa      	ldrb	r2, [r7, #11]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3208      	adds	r2, #8
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d0:	78b9      	ldrb	r1, [r7, #2]
 80003d2:	7aba      	ldrb	r2, [r7, #10]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	7afa      	ldrb	r2, [r7, #11]
 80003de:	4319      	orrs	r1, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3208      	adds	r2, #8
 80003e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b085      	sub	sp, #20
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	460b      	mov	r3, r1
 80003fc:	70fb      	strb	r3, [r7, #3]
 80003fe:	4613      	mov	r3, r2
 8000400:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	78fa      	ldrb	r2, [r7, #3]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	401a      	ands	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	78b9      	ldrb	r1, [r7, #2]
 8000420:	78fa      	ldrb	r2, [r7, #3]
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	431a      	orrs	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	605a      	str	r2, [r3, #4]
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	78fa      	ldrb	r2, [r7, #3]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	2103      	movs	r1, #3
 8000454:	fa01 f202 	lsl.w	r2, r1, r2
 8000458:	43d2      	mvns	r2, r2
 800045a:	401a      	ands	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	78b9      	ldrb	r1, [r7, #2]
 8000466:	78fa      	ldrb	r2, [r7, #3]
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	431a      	orrs	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	60da      	str	r2, [r3, #12]
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	70fb      	strb	r3, [r7, #3]
 800048a:	4613      	mov	r3, r2
 800048c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	2103      	movs	r1, #3
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	401a      	ands	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	78b9      	ldrb	r1, [r7, #2]
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	609a      	str	r2, [r3, #8]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <idletask>:
uint32_t tick_count = 0;
struct TCB *current_task = NULL;
struct TCB *next_task = NULL;

void idletask(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("From Idle Task...\r\n");
 80004cc:	4801      	ldr	r0, [pc, #4]	; (80004d4 <idletask+0xc>)
 80004ce:	f000 ffb3 	bl	8001438 <puts>
 80004d2:	e7fb      	b.n	80004cc <idletask+0x4>
 80004d4:	08001ba8 	.word	0x08001ba8

080004d8 <configure_systick_timer>:
	}
}

void configure_systick_timer(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
	uint32_t *pSYT_RVR = (uint32_t *) 0xE000E014U;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <configure_systick_timer+0x2c>)
 80004e0:	607b      	str	r3, [r7, #4]
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <configure_systick_timer+0x30>)
 80004e4:	603b      	str	r3, [r7, #0]

	*pSYT_RVR = SYT_RELOAD_VALUE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <configure_systick_timer+0x34>)
 80004ea:	601a      	str	r2, [r3, #0]
	*pSYT_CFGR |= SYT_CONTROL_VALUE;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f043 0206 	orr.w	r2, r3, #6
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e014 	.word	0xe000e014
 8000508:	e000e010 	.word	0xe000e010
 800050c:	000fffff 	.word	0x000fffff

08000510 <enable_systick_timer>:

void enable_systick_timer(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <enable_systick_timer+0x20>)
 8000518:	607b      	str	r3, [r7, #4]

	*pSYT_CFGR |= 0x1;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 0201 	orr.w	r2, r3, #1
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	e000e010 	.word	0xe000e010

08000534 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <SysTick_Handler+0x30>)
 800053c:	607b      	str	r3, [r7, #4]

	tick_count++;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <SysTick_Handler+0x34>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <SysTick_Handler+0x34>)
 8000546:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 8000548:	f000 f8d0 	bl	80006ec <update_sleep_status>

	update_next_task();
 800054c:	f000 f8ec 	bl	8000728 <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	e000ed04 	.word	0xe000ed04
 8000568:	200000ac 	.word	0x200000ac

0800056c <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 800056c:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 8000570:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 8000574:	4909      	ldr	r1, [pc, #36]	; (800059c <PendSV_Handler+0x30>)
	__asm volatile ("LDR R1, [R1]");
 8000576:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("STR R0, [R1]");
 8000578:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <PendSV_Handler+0x34>)
	__asm volatile ("LDR R1, [R1]");
 800057c:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("LDR R0, [R1]");
 800057e:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 8000580:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8000584:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <PendSV_Handler+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a02      	ldr	r2, [pc, #8]	; (8000598 <PendSV_Handler+0x2c>)
 800058e:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 8000590:	4770      	bx	lr
}
 8000592:	bf00      	nop
 8000594:	200000b4 	.word	0x200000b4
 8000598:	200000b0 	.word	0x200000b0
 800059c:	200000b0 	.word	0x200000b0
 80005a0:	200000b4 	.word	0x200000b4

080005a4 <os_create_task>:

void os_create_task(void (*task)(void),uint8_t task_priority,uint32_t task_stack_size)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b089      	sub	sp, #36	; 0x24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	460b      	mov	r3, r1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	72fb      	strb	r3, [r7, #11]
	uint32_t *p;
	struct TCB *last_task, *new_task;

	if(current_task == NULL)						//Adding the idle task
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <os_create_task+0x10c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d135      	bne.n	8000626 <os_create_task+0x82>
	{
		current_task = (struct TCB *) malloc(sizeof(struct TCB));
 80005ba:	2014      	movs	r0, #20
 80005bc:	f000 fde0 	bl	8001180 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <os_create_task+0x10c>)
 80005c6:	601a      	str	r2, [r3, #0]

		current_task->priority = IDLE_TASK_PRIORITY;
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <os_create_task+0x10c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	22fe      	movs	r2, #254	; 0xfe
 80005ce:	711a      	strb	r2, [r3, #4]
		current_task->sleep_count = 0;
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <os_create_task+0x10c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]

		current_task->task_stack = (uint32_t *) malloc(IDLE_TASK_STACK_SIZE*4);
 80005d8:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <os_create_task+0x10c>)
 80005da:	681c      	ldr	r4, [r3, #0]
 80005dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005e0:	f000 fdce 	bl	8001180 <malloc>
 80005e4:	4603      	mov	r3, r0
 80005e6:	60e3      	str	r3, [r4, #12]
		current_task->current_sp = ((uint32_t) current_task->task_stack + 4*IDLE_TASK_STACK_SIZE - 4*16);
 80005e8:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <os_create_task+0x10c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <os_create_task+0x10c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 80005f8:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+14*4);
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <os_create_task+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3338      	adds	r3, #56	; 0x38
 8000602:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) idletask;
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <os_create_task+0x110>)
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+15*4);
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <os_create_task+0x10c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	333c      	adds	r3, #60	; 0x3c
 8000612:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) 0x01000000U;
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800061a:	601a      	str	r2, [r3, #0]

		current_task->next = current_task;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <os_create_task+0x10c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <os_create_task+0x10c>)
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	611a      	str	r2, [r3, #16]
	}

	//Go to end of list
	last_task = current_task;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <os_create_task+0x10c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 800062c:	e002      	b.n	8000634 <os_create_task+0x90>
	{
		last_task = last_task->next;
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	691b      	ldr	r3, [r3, #16]
 8000632:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	691a      	ldr	r2, [r3, #16]
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <os_create_task+0x10c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d1f6      	bne.n	800062e <os_create_task+0x8a>
	}

	//Add new task
	new_task = (struct TCB *) malloc(sizeof(struct TCB));
 8000640:	2014      	movs	r0, #20
 8000642:	f000 fd9d 	bl	8001180 <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
	last_task->next = new_task;
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	611a      	str	r2, [r3, #16]

	new_task->priority = task_priority;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	7afa      	ldrb	r2, [r7, #11]
 8000654:	711a      	strb	r2, [r3, #4]
	new_task->sleep_count = 0;
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]

	new_task->task_stack = (uint32_t *) malloc(task_stack_size*4);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fd8d 	bl	8001180 <malloc>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	60da      	str	r2, [r3, #12]
	new_task->current_sp = ((uint32_t) new_task->task_stack + 4*task_stack_size - 4*16);
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+14*4);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3338      	adds	r3, #56	; 0x38
 8000688:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) task;
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+15*4);
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	333c      	adds	r3, #60	; 0x3c
 8000696:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) 0x01000000U;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800069e:	601a      	str	r2, [r3, #0]

	new_task->next = current_task;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <os_create_task+0x10c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	611a      	str	r2, [r3, #16]

	return;
 80006a8:	bf00      	nop
}
 80006aa:	3724      	adds	r7, #36	; 0x24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	080004c9 	.word	0x080004c9

080006b8 <os_start>:

void os_start(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	configure_systick_timer();
 80006bc:	f7ff ff0c 	bl	80004d8 <configure_systick_timer>
	enable_systick_timer();
 80006c0:	f7ff ff26 	bl	8000510 <enable_systick_timer>

	//Initialize PSP
	__asm volatile ("LDR R1, =current_task");
 80006c4:	4908      	ldr	r1, [pc, #32]	; (80006e8 <os_start+0x30>)
	__asm volatile ("LDR R0, [R1]");
 80006c6:	6808      	ldr	r0, [r1, #0]
	__asm volatile ("LDR R0, [R0]");
 80006c8:	6800      	ldr	r0, [r0, #0]
	__asm volatile ("MSR PSP, R0");
 80006ca:	f380 8809 	msr	PSP, r0

	//Change SP from MSP to PSP
	__asm volatile ("MRS R0, CONTROL");
 80006ce:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");
 80006d2:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80006d6:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("ISB");
 80006da:	f3bf 8f6f 	isb	sy

	idletask();
 80006de:	f7ff fef3 	bl	80004c8 <idletask>

	return;
 80006e2:	bf00      	nop
}
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	0000      	.short	0x0000
 80006e8:	200000b0 	.word	0x200000b0

080006ec <update_sleep_status>:

	return;
}

void update_sleep_status(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	struct TCB *present_task;

	present_task = current_task;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <update_sleep_status+0x38>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	607b      	str	r3, [r7, #4]

	do
	{
		if(present_task->sleep_count > 0)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <update_sleep_status+0x1e>
		{
			present_task->sleep_count--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	609a      	str	r2, [r3, #8]
		}
		present_task = present_task->next;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	607b      	str	r3, [r7, #4]
	}
	while(present_task != current_task);
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <update_sleep_status+0x38>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	d1ee      	bne.n	80006f8 <update_sleep_status+0xc>

	return;
 800071a:	bf00      	nop
}
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200000b0 	.word	0x200000b0

08000728 <update_next_task>:

void update_next_task(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 800072e:	23ff      	movs	r3, #255	; 0xff
 8000730:	71fb      	strb	r3, [r7, #7]
	struct TCB *best_task;

	next_task = current_task;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <update_next_task+0x5c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <update_next_task+0x60>)
 8000738:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = next_task->next;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <update_next_task+0x60>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <update_next_task+0x60>)
 8000742:	6013      	str	r3, [r2, #0]

		if(next_task->priority < max_priority && next_task->sleep_count==0)
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <update_next_task+0x60>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	429a      	cmp	r2, r3
 800074e:	d90b      	bls.n	8000768 <update_next_task+0x40>
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <update_next_task+0x60>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d106      	bne.n	8000768 <update_next_task+0x40>
		{
			max_priority = next_task->priority;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <update_next_task+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <update_next_task+0x60>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <update_next_task+0x60>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <update_next_task+0x5c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d1e2      	bne.n	800073a <update_next_task+0x12>

	next_task = best_task;
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <update_next_task+0x60>)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	6013      	str	r3, [r2, #0]

	return;
 800077a:	bf00      	nop
}
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000b0 	.word	0x200000b0
 8000788:	200000b4 	.word	0x200000b4

0800078c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <RTC_Alarm_IRQHandler+0x24>)
 8000794:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000796:	f000 f80d 	bl	80007b4 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]

	return;
 80007a6:	bf00      	nop
}
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013c14 	.word	0x40013c14

080007b4 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 80007b8:	2201      	movs	r2, #1
 80007ba:	210f      	movs	r1, #15
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <RTC_Alarm_Interrupt_Callback+0x14>)
 80007be:	f7ff fda7 	bl	8000310 <GPIOWritePin>

	return;
 80007c2:	bf00      	nop
}
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020c00 	.word	0x40020c00

080007cc <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a88      	ldr	r2, [pc, #544]	; (80009f8 <EnablePeriClk+0x22c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d108      	bne.n	80007ee <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007dc:	4b87      	ldr	r3, [pc, #540]	; (80009fc <EnablePeriClk+0x230>)
 80007de:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f043 0201 	orr.w	r2, r3, #1
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 80007ec:	e19b      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a83      	ldr	r2, [pc, #524]	; (8000a00 <EnablePeriClk+0x234>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d108      	bne.n	8000808 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007f6:	4b81      	ldr	r3, [pc, #516]	; (80009fc <EnablePeriClk+0x230>)
 80007f8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f043 0202 	orr.w	r2, r3, #2
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	e18e      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a7e      	ldr	r2, [pc, #504]	; (8000a04 <EnablePeriClk+0x238>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d108      	bne.n	8000822 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000810:	4b7a      	ldr	r3, [pc, #488]	; (80009fc <EnablePeriClk+0x230>)
 8000812:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f043 0204 	orr.w	r2, r3, #4
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	e181      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a78      	ldr	r2, [pc, #480]	; (8000a08 <EnablePeriClk+0x23c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d108      	bne.n	800083c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800082a:	4b74      	ldr	r3, [pc, #464]	; (80009fc <EnablePeriClk+0x230>)
 800082c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f043 0208 	orr.w	r2, r3, #8
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	e174      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <EnablePeriClk+0x240>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d108      	bne.n	8000856 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000844:	4b6d      	ldr	r3, [pc, #436]	; (80009fc <EnablePeriClk+0x230>)
 8000846:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f043 0210 	orr.w	r2, r3, #16
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	e167      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a6d      	ldr	r2, [pc, #436]	; (8000a10 <EnablePeriClk+0x244>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d108      	bne.n	8000870 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <EnablePeriClk+0x230>)
 8000860:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f043 0220 	orr.w	r2, r3, #32
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]
}
 800086e:	e15a      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <EnablePeriClk+0x248>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d108      	bne.n	800088a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000878:	4b60      	ldr	r3, [pc, #384]	; (80009fc <EnablePeriClk+0x230>)
 800087a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	e14d      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a62      	ldr	r2, [pc, #392]	; (8000a18 <EnablePeriClk+0x24c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d108      	bne.n	80008a4 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <EnablePeriClk+0x230>)
 8000894:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	601a      	str	r2, [r3, #0]
}
 80008a2:	e140      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a5d      	ldr	r2, [pc, #372]	; (8000a1c <EnablePeriClk+0x250>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d108      	bne.n	80008be <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80008ac:	4b53      	ldr	r3, [pc, #332]	; (80009fc <EnablePeriClk+0x230>)
 80008ae:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	e133      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a57      	ldr	r2, [pc, #348]	; (8000a20 <EnablePeriClk+0x254>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d108      	bne.n	80008d8 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <EnablePeriClk+0x258>)
 80008c8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	e126      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a53      	ldr	r2, [pc, #332]	; (8000a28 <EnablePeriClk+0x25c>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d108      	bne.n	80008f2 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <EnablePeriClk+0x260>)
 80008e2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	e119      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a4e      	ldr	r2, [pc, #312]	; (8000a30 <EnablePeriClk+0x264>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d108      	bne.n	800090c <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <EnablePeriClk+0x260>)
 80008fc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	601a      	str	r2, [r3, #0]
}
 800090a:	e10c      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a49      	ldr	r2, [pc, #292]	; (8000a34 <EnablePeriClk+0x268>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d108      	bne.n	8000926 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <EnablePeriClk+0x260>)
 8000916:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	e0ff      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <EnablePeriClk+0x26c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d108      	bne.n	8000940 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <EnablePeriClk+0x260>)
 8000930:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	e0f2      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a3e      	ldr	r2, [pc, #248]	; (8000a3c <EnablePeriClk+0x270>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d108      	bne.n	800095a <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000948:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <EnablePeriClk+0x260>)
 800094a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	e0e5      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <EnablePeriClk+0x274>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d108      	bne.n	8000974 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <EnablePeriClk+0x258>)
 8000964:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f043 0210 	orr.w	r2, r3, #16
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	e0d8      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <EnablePeriClk+0x278>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d108      	bne.n	800098e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <EnablePeriClk+0x260>)
 800097e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	e0cb      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <EnablePeriClk+0x27c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d108      	bne.n	80009a8 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <EnablePeriClk+0x260>)
 8000998:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	e0be      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <EnablePeriClk+0x280>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d108      	bne.n	80009c2 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <EnablePeriClk+0x260>)
 80009b2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	e0b1      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <EnablePeriClk+0x284>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d108      	bne.n	80009dc <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <EnablePeriClk+0x260>)
 80009cc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	e0a4      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <EnablePeriClk+0x288>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d139      	bne.n	8000a58 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <EnablePeriClk+0x258>)
 80009e6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f043 0220 	orr.w	r2, r3, #32
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	e097      	b.n	8000b26 <EnablePeriClk+0x35a>
 80009f6:	bf00      	nop
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40023830 	.word	0x40023830
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40021400 	.word	0x40021400
 8000a14:	40021800 	.word	0x40021800
 8000a18:	40021c00 	.word	0x40021c00
 8000a1c:	40022000 	.word	0x40022000
 8000a20:	40013000 	.word	0x40013000
 8000a24:	40023844 	.word	0x40023844
 8000a28:	40003800 	.word	0x40003800
 8000a2c:	40023840 	.word	0x40023840
 8000a30:	40003c00 	.word	0x40003c00
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40005800 	.word	0x40005800
 8000a3c:	40005c00 	.word	0x40005c00
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40004800 	.word	0x40004800
 8000a4c:	40004c00 	.word	0x40004c00
 8000a50:	40005000 	.word	0x40005000
 8000a54:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <EnablePeriClk+0x364>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d108      	bne.n	8000a72 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <EnablePeriClk+0x368>)
 8000a62:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f043 0210 	orr.w	r2, r3, #16
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	e059      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <EnablePeriClk+0x36c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d108      	bne.n	8000a8c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <EnablePeriClk+0x368>)
 8000a7c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f043 0220 	orr.w	r2, r3, #32
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	e04c      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <EnablePeriClk+0x370>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d108      	bne.n	8000aa6 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <EnablePeriClk+0x374>)
 8000a96:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	e03f      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <EnablePeriClk+0x378>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d108      	bne.n	8000ac0 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <EnablePeriClk+0x374>)
 8000ab0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	e032      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac6:	d108      	bne.n	8000ada <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <EnablePeriClk+0x368>)
 8000aca:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	e025      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <EnablePeriClk+0x37c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d108      	bne.n	8000af4 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <EnablePeriClk+0x368>)
 8000ae4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f043 0202 	orr.w	r2, r3, #2
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	e018      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <EnablePeriClk+0x380>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d108      	bne.n	8000b0e <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <EnablePeriClk+0x368>)
 8000afe:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f043 0204 	orr.w	r2, r3, #4
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	e00b      	b.n	8000b26 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <EnablePeriClk+0x384>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d107      	bne.n	8000b26 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <EnablePeriClk+0x368>)
 8000b18:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f043 0208 	orr.w	r2, r3, #8
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40001000 	.word	0x40001000
 8000b34:	40023840 	.word	0x40023840
 8000b38:	40001400 	.word	0x40001400
 8000b3c:	40026000 	.word	0x40026000
 8000b40:	40023830 	.word	0x40023830
 8000b44:	40026400 	.word	0x40026400
 8000b48:	40000400 	.word	0x40000400
 8000b4c:	40000800 	.word	0x40000800
 8000b50:	40000c00 	.word	0x40000c00

08000b54 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d110      	bne.n	8000b86 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 0208 	orr.w	r2, r2, #8
 8000b72:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0204 	bic.w	r2, r2, #4
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	e028      	b.n	8000bd8 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d110      	bne.n	8000bb0 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0208 	bic.w	r2, r2, #8
 8000b9c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0204 	orr.w	r2, r2, #4
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	e013      	b.n	8000bd8 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d10f      	bne.n	8000bd8 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0208 	orr.w	r2, r2, #8
 8000bc6:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0204 	orr.w	r2, r2, #4
 8000bd6:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d108      	bne.n	8000bf2 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	e00b      	b.n	8000c0a <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d107      	bne.n	8000c0a <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c08:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c18:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6919      	ldr	r1, [r3, #16]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	031a      	lsls	r2, r3, #12
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d108      	bne.n	8000c48 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	e028      	b.n	8000c9a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d110      	bne.n	8000c72 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c5e:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	e013      	b.n	8000c9a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d10f      	bne.n	8000c9a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c88:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c98:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f8a7 	bl	8000df4 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d110      	bne.n	8000cd0 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cbc:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ccc:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000cce:	e03d      	b.n	8000d4c <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d110      	bne.n	8000cfa <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ce6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cf6:	615a      	str	r2, [r3, #20]
}
 8000cf8:	e028      	b.n	8000d4c <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d110      	bne.n	8000d24 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d10:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d20:	615a      	str	r2, [r3, #20]
}
 8000d22:	e013      	b.n	8000d4c <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d10f      	bne.n	8000d4c <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d3a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	695a      	ldr	r2, [r3, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d4a:	615a      	str	r2, [r3, #20]
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d6a:	60da      	str	r2, [r3, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000dac:	e012      	b.n	8000dd4 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8000dae:	bf00      	nop
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff ffdf 	bl	8000d76 <USART_GetFlagStatus>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f8      	beq.n	8000db0 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
		Len--;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e9      	bne.n	8000dae <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8000dda:	bf00      	nop
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff ffc9 	bl	8000d76 <USART_GetFlagStatus>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f8      	beq.n	8000ddc <USART_SendData+0x3c>
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000dfe:	f240 6383 	movw	r3, #1667	; 0x683
 8000e02:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	609a      	str	r2, [r3, #8]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
void task2(void);
void task3(void);
void task4(void);

int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	configure_leds();
 8000e1c:	f000 f89e 	bl	8000f5c <configure_leds>
	configure_uart();
 8000e20:	f7ff f9e2 	bl	80001e8 <configure_uart>

	os_create_task(task1,0,1024);
 8000e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0x44>)
 8000e2c:	f7ff fbba 	bl	80005a4 <os_create_task>
	os_create_task(task2,1,1024);
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	2101      	movs	r1, #1
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <main+0x48>)
 8000e38:	f7ff fbb4 	bl	80005a4 <os_create_task>
	os_create_task(task3,2,1024);
 8000e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e40:	2102      	movs	r1, #2
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <main+0x4c>)
 8000e44:	f7ff fbae 	bl	80005a4 <os_create_task>
	os_create_task(task4,3,1024);
 8000e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <main+0x50>)
 8000e50:	f7ff fba8 	bl	80005a4 <os_create_task>
	os_start();
 8000e54:	f7ff fc30 	bl	80006b8 <os_start>

	while(1);
 8000e58:	e7fe      	b.n	8000e58 <main+0x40>
 8000e5a:	bf00      	nop
 8000e5c:	08000e6d 	.word	0x08000e6d
 8000e60:	08000ea9 	.word	0x08000ea9
 8000e64:	08000ee5 	.word	0x08000ee5
 8000e68:	08000f21 	.word	0x08000f21

08000e6c <task1>:

	return 0;
}

void task1(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_1 = TICK_COUNT_TASK_1;

	while(1)
	{
		printf("From Task 1...\r\n");
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <task1+0x2c>)
 8000e72:	f000 fae1 	bl	8001438 <puts>
		//printf("Task 1 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_1 <= tick_count)
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <task1+0x30>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <task1+0x34>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d8f6      	bhi.n	8000e70 <task1+0x4>
		{
			target_tick_count_1 = tick_count + TICK_COUNT_TASK_1;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <task1+0x34>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3308      	adds	r3, #8
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <task1+0x30>)
 8000e8a:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_1);
 8000e8c:	210c      	movs	r1, #12
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <task1+0x38>)
 8000e90:	f7ff fa60 	bl	8000354 <GPIOTogglePin>
		printf("From Task 1...\r\n");
 8000e94:	e7ec      	b.n	8000e70 <task1+0x4>
 8000e96:	bf00      	nop
 8000e98:	08001bbc 	.word	0x08001bbc
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	200000ac 	.word	0x200000ac
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <task2>:
		}
	}
}

void task2(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_2 = TICK_COUNT_TASK_2;

	while(1)
	{
		printf("From Task 2...\r\n");
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <task2+0x2c>)
 8000eae:	f000 fac3 	bl	8001438 <puts>
		//printf("Task 2 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_2 <= tick_count)
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <task2+0x30>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <task2+0x34>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8f6      	bhi.n	8000eac <task2+0x4>
		{
			target_tick_count_2 = tick_count + TICK_COUNT_TASK_2;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <task2+0x34>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3316      	adds	r3, #22
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <task2+0x30>)
 8000ec6:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_2);
 8000ec8:	210d      	movs	r1, #13
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <task2+0x38>)
 8000ecc:	f7ff fa42 	bl	8000354 <GPIOTogglePin>
		printf("From Task 2...\r\n");
 8000ed0:	e7ec      	b.n	8000eac <task2+0x4>
 8000ed2:	bf00      	nop
 8000ed4:	08001bcc 	.word	0x08001bcc
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	200000ac 	.word	0x200000ac
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <task3>:
		}
	}
}

void task3(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	}
	*/

	while(1)
	{
		printf("From Task 3...\r\n");
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <task3+0x2c>)
 8000eea:	f000 faa5 	bl	8001438 <puts>
		//printf("Task 3 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_3 <= tick_count)
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <task3+0x30>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <task3+0x34>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d8f6      	bhi.n	8000ee8 <task3+0x4>
		{
			target_tick_count_3 = tick_count + TICK_COUNT_TASK_3;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <task3+0x34>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3332      	adds	r3, #50	; 0x32
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <task3+0x30>)
 8000f02:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_3);
 8000f04:	210e      	movs	r1, #14
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <task3+0x38>)
 8000f08:	f7ff fa24 	bl	8000354 <GPIOTogglePin>
		printf("From Task 3...\r\n");
 8000f0c:	e7ec      	b.n	8000ee8 <task3+0x4>
 8000f0e:	bf00      	nop
 8000f10:	08001bdc 	.word	0x08001bdc
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200000ac 	.word	0x200000ac
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <task4>:
		}
	}
}

void task4(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	static uint32_t target_tick_count_4 = TICK_COUNT_TASK_4;

	while(1)
	{
		printf("From Task 4...\r\n");
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <task4+0x2c>)
 8000f26:	f000 fa87 	bl	8001438 <puts>
		//printf("Task 4 Going to Sleep...\r\n");
		//task_sleep(0xFFFFFFFF);
		if(target_tick_count_4 <= tick_count)
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <task4+0x30>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <task4+0x34>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d8f6      	bhi.n	8000f24 <task4+0x4>
		{
			target_tick_count_4 = tick_count + TICK_COUNT_TASK_4;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <task4+0x34>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3364      	adds	r3, #100	; 0x64
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <task4+0x30>)
 8000f3e:	6013      	str	r3, [r2, #0]
			GPIOTogglePin(GPIOD, GPIO_PIN_LED_4);
 8000f40:	210f      	movs	r1, #15
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <task4+0x38>)
 8000f44:	f7ff fa06 	bl	8000354 <GPIOTogglePin>
		printf("From Task 4...\r\n");
 8000f48:	e7ec      	b.n	8000f24 <task4+0x4>
 8000f4a:	bf00      	nop
 8000f4c:	08001bec 	.word	0x08001bec
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	200000ac 	.word	0x200000ac
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <configure_leds>:
		}
	}
}

void configure_leds(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	EnablePeriClk(GPIOD);
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <configure_leds+0x38>)
 8000f62:	f7ff fc33 	bl	80007cc <EnablePeriClk>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_1, GPIO_MODE_OUTPUT);
 8000f66:	2201      	movs	r2, #1
 8000f68:	210c      	movs	r1, #12
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <configure_leds+0x38>)
 8000f6c:	f7ff f9ac 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_2, GPIO_MODE_OUTPUT);
 8000f70:	2201      	movs	r2, #1
 8000f72:	210d      	movs	r1, #13
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <configure_leds+0x38>)
 8000f76:	f7ff f9a7 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_3, GPIO_MODE_OUTPUT);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	210e      	movs	r1, #14
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <configure_leds+0x38>)
 8000f80:	f7ff f9a2 	bl	80002c8 <GPIOSetMode>
	GPIOSetMode(GPIOD, GPIO_PIN_LED_4, GPIO_MODE_OUTPUT);
 8000f84:	2201      	movs	r2, #1
 8000f86:	210f      	movs	r1, #15
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <configure_leds+0x38>)
 8000f8a:	f7ff f99d 	bl	80002c8 <GPIOSetMode>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
  }

  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f959 	bl	80002a4 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	605a      	str	r2, [r3, #4]
  return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f000 f846 	bl	800112c <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20020000 	.word	0x20020000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	200000b8 	.word	0x200000b8
 80010d4:	200000d0 	.word	0x200000d0

080010d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001106:	f000 f817 	bl	8001138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fe85 	bl	8000e18 <main>

0800110e <LoopForever>:

LoopForever:
  b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   r0, =_estack
 8001110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800111c:	08001c68 	.word	0x08001c68
  ldr r2, =_sbss
 8001120:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001124:	200000cc 	.word	0x200000cc

08001128 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <__errno>:
 800112c:	4b01      	ldr	r3, [pc, #4]	; (8001134 <__errno+0x8>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000010 	.word	0x20000010

08001138 <__libc_init_array>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	4d0d      	ldr	r5, [pc, #52]	; (8001170 <__libc_init_array+0x38>)
 800113c:	4c0d      	ldr	r4, [pc, #52]	; (8001174 <__libc_init_array+0x3c>)
 800113e:	1b64      	subs	r4, r4, r5
 8001140:	10a4      	asrs	r4, r4, #2
 8001142:	2600      	movs	r6, #0
 8001144:	42a6      	cmp	r6, r4
 8001146:	d109      	bne.n	800115c <__libc_init_array+0x24>
 8001148:	4d0b      	ldr	r5, [pc, #44]	; (8001178 <__libc_init_array+0x40>)
 800114a:	4c0c      	ldr	r4, [pc, #48]	; (800117c <__libc_init_array+0x44>)
 800114c:	f000 fd20 	bl	8001b90 <_init>
 8001150:	1b64      	subs	r4, r4, r5
 8001152:	10a4      	asrs	r4, r4, #2
 8001154:	2600      	movs	r6, #0
 8001156:	42a6      	cmp	r6, r4
 8001158:	d105      	bne.n	8001166 <__libc_init_array+0x2e>
 800115a:	bd70      	pop	{r4, r5, r6, pc}
 800115c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001160:	4798      	blx	r3
 8001162:	3601      	adds	r6, #1
 8001164:	e7ee      	b.n	8001144 <__libc_init_array+0xc>
 8001166:	f855 3b04 	ldr.w	r3, [r5], #4
 800116a:	4798      	blx	r3
 800116c:	3601      	adds	r6, #1
 800116e:	e7f2      	b.n	8001156 <__libc_init_array+0x1e>
 8001170:	08001c60 	.word	0x08001c60
 8001174:	08001c60 	.word	0x08001c60
 8001178:	08001c60 	.word	0x08001c60
 800117c:	08001c64 	.word	0x08001c64

08001180 <malloc>:
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <malloc+0xc>)
 8001182:	4601      	mov	r1, r0
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f000 b875 	b.w	8001274 <_malloc_r>
 800118a:	bf00      	nop
 800118c:	20000010 	.word	0x20000010

08001190 <memset>:
 8001190:	4402      	add	r2, r0
 8001192:	4603      	mov	r3, r0
 8001194:	4293      	cmp	r3, r2
 8001196:	d100      	bne.n	800119a <memset+0xa>
 8001198:	4770      	bx	lr
 800119a:	f803 1b01 	strb.w	r1, [r3], #1
 800119e:	e7f9      	b.n	8001194 <memset+0x4>

080011a0 <_free_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4605      	mov	r5, r0
 80011a4:	2900      	cmp	r1, #0
 80011a6:	d041      	beq.n	800122c <_free_r+0x8c>
 80011a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011ac:	1f0c      	subs	r4, r1, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bfb8      	it	lt
 80011b2:	18e4      	addlt	r4, r4, r3
 80011b4:	f000 fc34 	bl	8001a20 <__malloc_lock>
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <_free_r+0x90>)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	b933      	cbnz	r3, 80011cc <_free_r+0x2c>
 80011be:	6063      	str	r3, [r4, #4]
 80011c0:	6014      	str	r4, [r2, #0]
 80011c2:	4628      	mov	r0, r5
 80011c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011c8:	f000 bc30 	b.w	8001a2c <__malloc_unlock>
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d908      	bls.n	80011e2 <_free_r+0x42>
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	1821      	adds	r1, r4, r0
 80011d4:	428b      	cmp	r3, r1
 80011d6:	bf01      	itttt	eq
 80011d8:	6819      	ldreq	r1, [r3, #0]
 80011da:	685b      	ldreq	r3, [r3, #4]
 80011dc:	1809      	addeq	r1, r1, r0
 80011de:	6021      	streq	r1, [r4, #0]
 80011e0:	e7ed      	b.n	80011be <_free_r+0x1e>
 80011e2:	461a      	mov	r2, r3
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	b10b      	cbz	r3, 80011ec <_free_r+0x4c>
 80011e8:	42a3      	cmp	r3, r4
 80011ea:	d9fa      	bls.n	80011e2 <_free_r+0x42>
 80011ec:	6811      	ldr	r1, [r2, #0]
 80011ee:	1850      	adds	r0, r2, r1
 80011f0:	42a0      	cmp	r0, r4
 80011f2:	d10b      	bne.n	800120c <_free_r+0x6c>
 80011f4:	6820      	ldr	r0, [r4, #0]
 80011f6:	4401      	add	r1, r0
 80011f8:	1850      	adds	r0, r2, r1
 80011fa:	4283      	cmp	r3, r0
 80011fc:	6011      	str	r1, [r2, #0]
 80011fe:	d1e0      	bne.n	80011c2 <_free_r+0x22>
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	6053      	str	r3, [r2, #4]
 8001206:	4401      	add	r1, r0
 8001208:	6011      	str	r1, [r2, #0]
 800120a:	e7da      	b.n	80011c2 <_free_r+0x22>
 800120c:	d902      	bls.n	8001214 <_free_r+0x74>
 800120e:	230c      	movs	r3, #12
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	e7d6      	b.n	80011c2 <_free_r+0x22>
 8001214:	6820      	ldr	r0, [r4, #0]
 8001216:	1821      	adds	r1, r4, r0
 8001218:	428b      	cmp	r3, r1
 800121a:	bf04      	itt	eq
 800121c:	6819      	ldreq	r1, [r3, #0]
 800121e:	685b      	ldreq	r3, [r3, #4]
 8001220:	6063      	str	r3, [r4, #4]
 8001222:	bf04      	itt	eq
 8001224:	1809      	addeq	r1, r1, r0
 8001226:	6021      	streq	r1, [r4, #0]
 8001228:	6054      	str	r4, [r2, #4]
 800122a:	e7ca      	b.n	80011c2 <_free_r+0x22>
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop
 8001230:	200000bc 	.word	0x200000bc

08001234 <sbrk_aligned>:
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	4e0e      	ldr	r6, [pc, #56]	; (8001270 <sbrk_aligned+0x3c>)
 8001238:	460c      	mov	r4, r1
 800123a:	6831      	ldr	r1, [r6, #0]
 800123c:	4605      	mov	r5, r0
 800123e:	b911      	cbnz	r1, 8001246 <sbrk_aligned+0x12>
 8001240:	f000 f902 	bl	8001448 <_sbrk_r>
 8001244:	6030      	str	r0, [r6, #0]
 8001246:	4621      	mov	r1, r4
 8001248:	4628      	mov	r0, r5
 800124a:	f000 f8fd 	bl	8001448 <_sbrk_r>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	d00a      	beq.n	8001268 <sbrk_aligned+0x34>
 8001252:	1cc4      	adds	r4, r0, #3
 8001254:	f024 0403 	bic.w	r4, r4, #3
 8001258:	42a0      	cmp	r0, r4
 800125a:	d007      	beq.n	800126c <sbrk_aligned+0x38>
 800125c:	1a21      	subs	r1, r4, r0
 800125e:	4628      	mov	r0, r5
 8001260:	f000 f8f2 	bl	8001448 <_sbrk_r>
 8001264:	3001      	adds	r0, #1
 8001266:	d101      	bne.n	800126c <sbrk_aligned+0x38>
 8001268:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800126c:	4620      	mov	r0, r4
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	200000c0 	.word	0x200000c0

08001274 <_malloc_r>:
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001278:	1ccd      	adds	r5, r1, #3
 800127a:	f025 0503 	bic.w	r5, r5, #3
 800127e:	3508      	adds	r5, #8
 8001280:	2d0c      	cmp	r5, #12
 8001282:	bf38      	it	cc
 8001284:	250c      	movcc	r5, #12
 8001286:	2d00      	cmp	r5, #0
 8001288:	4607      	mov	r7, r0
 800128a:	db01      	blt.n	8001290 <_malloc_r+0x1c>
 800128c:	42a9      	cmp	r1, r5
 800128e:	d905      	bls.n	800129c <_malloc_r+0x28>
 8001290:	230c      	movs	r3, #12
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	2600      	movs	r6, #0
 8001296:	4630      	mov	r0, r6
 8001298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129c:	4e2e      	ldr	r6, [pc, #184]	; (8001358 <_malloc_r+0xe4>)
 800129e:	f000 fbbf 	bl	8001a20 <__malloc_lock>
 80012a2:	6833      	ldr	r3, [r6, #0]
 80012a4:	461c      	mov	r4, r3
 80012a6:	bb34      	cbnz	r4, 80012f6 <_malloc_r+0x82>
 80012a8:	4629      	mov	r1, r5
 80012aa:	4638      	mov	r0, r7
 80012ac:	f7ff ffc2 	bl	8001234 <sbrk_aligned>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	4604      	mov	r4, r0
 80012b4:	d14d      	bne.n	8001352 <_malloc_r+0xde>
 80012b6:	6834      	ldr	r4, [r6, #0]
 80012b8:	4626      	mov	r6, r4
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d140      	bne.n	8001340 <_malloc_r+0xcc>
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	4631      	mov	r1, r6
 80012c2:	4638      	mov	r0, r7
 80012c4:	eb04 0803 	add.w	r8, r4, r3
 80012c8:	f000 f8be 	bl	8001448 <_sbrk_r>
 80012cc:	4580      	cmp	r8, r0
 80012ce:	d13a      	bne.n	8001346 <_malloc_r+0xd2>
 80012d0:	6821      	ldr	r1, [r4, #0]
 80012d2:	3503      	adds	r5, #3
 80012d4:	1a6d      	subs	r5, r5, r1
 80012d6:	f025 0503 	bic.w	r5, r5, #3
 80012da:	3508      	adds	r5, #8
 80012dc:	2d0c      	cmp	r5, #12
 80012de:	bf38      	it	cc
 80012e0:	250c      	movcc	r5, #12
 80012e2:	4629      	mov	r1, r5
 80012e4:	4638      	mov	r0, r7
 80012e6:	f7ff ffa5 	bl	8001234 <sbrk_aligned>
 80012ea:	3001      	adds	r0, #1
 80012ec:	d02b      	beq.n	8001346 <_malloc_r+0xd2>
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	442b      	add	r3, r5
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	e00e      	b.n	8001314 <_malloc_r+0xa0>
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	1b52      	subs	r2, r2, r5
 80012fa:	d41e      	bmi.n	800133a <_malloc_r+0xc6>
 80012fc:	2a0b      	cmp	r2, #11
 80012fe:	d916      	bls.n	800132e <_malloc_r+0xba>
 8001300:	1961      	adds	r1, r4, r5
 8001302:	42a3      	cmp	r3, r4
 8001304:	6025      	str	r5, [r4, #0]
 8001306:	bf18      	it	ne
 8001308:	6059      	strne	r1, [r3, #4]
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	bf08      	it	eq
 800130e:	6031      	streq	r1, [r6, #0]
 8001310:	5162      	str	r2, [r4, r5]
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	4638      	mov	r0, r7
 8001316:	f104 060b 	add.w	r6, r4, #11
 800131a:	f000 fb87 	bl	8001a2c <__malloc_unlock>
 800131e:	f026 0607 	bic.w	r6, r6, #7
 8001322:	1d23      	adds	r3, r4, #4
 8001324:	1af2      	subs	r2, r6, r3
 8001326:	d0b6      	beq.n	8001296 <_malloc_r+0x22>
 8001328:	1b9b      	subs	r3, r3, r6
 800132a:	50a3      	str	r3, [r4, r2]
 800132c:	e7b3      	b.n	8001296 <_malloc_r+0x22>
 800132e:	6862      	ldr	r2, [r4, #4]
 8001330:	42a3      	cmp	r3, r4
 8001332:	bf0c      	ite	eq
 8001334:	6032      	streq	r2, [r6, #0]
 8001336:	605a      	strne	r2, [r3, #4]
 8001338:	e7ec      	b.n	8001314 <_malloc_r+0xa0>
 800133a:	4623      	mov	r3, r4
 800133c:	6864      	ldr	r4, [r4, #4]
 800133e:	e7b2      	b.n	80012a6 <_malloc_r+0x32>
 8001340:	4634      	mov	r4, r6
 8001342:	6876      	ldr	r6, [r6, #4]
 8001344:	e7b9      	b.n	80012ba <_malloc_r+0x46>
 8001346:	230c      	movs	r3, #12
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4638      	mov	r0, r7
 800134c:	f000 fb6e 	bl	8001a2c <__malloc_unlock>
 8001350:	e7a1      	b.n	8001296 <_malloc_r+0x22>
 8001352:	6025      	str	r5, [r4, #0]
 8001354:	e7de      	b.n	8001314 <_malloc_r+0xa0>
 8001356:	bf00      	nop
 8001358:	200000bc 	.word	0x200000bc

0800135c <_puts_r>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	460e      	mov	r6, r1
 8001360:	4605      	mov	r5, r0
 8001362:	b118      	cbz	r0, 800136c <_puts_r+0x10>
 8001364:	6983      	ldr	r3, [r0, #24]
 8001366:	b90b      	cbnz	r3, 800136c <_puts_r+0x10>
 8001368:	f000 fa54 	bl	8001814 <__sinit>
 800136c:	69ab      	ldr	r3, [r5, #24]
 800136e:	68ac      	ldr	r4, [r5, #8]
 8001370:	b913      	cbnz	r3, 8001378 <_puts_r+0x1c>
 8001372:	4628      	mov	r0, r5
 8001374:	f000 fa4e 	bl	8001814 <__sinit>
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <_puts_r+0xd0>)
 800137a:	429c      	cmp	r4, r3
 800137c:	d120      	bne.n	80013c0 <_puts_r+0x64>
 800137e:	686c      	ldr	r4, [r5, #4]
 8001380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001382:	07db      	lsls	r3, r3, #31
 8001384:	d405      	bmi.n	8001392 <_puts_r+0x36>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	0598      	lsls	r0, r3, #22
 800138a:	d402      	bmi.n	8001392 <_puts_r+0x36>
 800138c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800138e:	f000 fadf 	bl	8001950 <__retarget_lock_acquire_recursive>
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	0719      	lsls	r1, r3, #28
 8001396:	d51d      	bpl.n	80013d4 <_puts_r+0x78>
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	b1db      	cbz	r3, 80013d4 <_puts_r+0x78>
 800139c:	3e01      	subs	r6, #1
 800139e:	68a3      	ldr	r3, [r4, #8]
 80013a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60a3      	str	r3, [r4, #8]
 80013a8:	bb39      	cbnz	r1, 80013fa <_puts_r+0x9e>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da38      	bge.n	8001420 <_puts_r+0xc4>
 80013ae:	4622      	mov	r2, r4
 80013b0:	210a      	movs	r1, #10
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 f858 	bl	8001468 <__swbuf_r>
 80013b8:	3001      	adds	r0, #1
 80013ba:	d011      	beq.n	80013e0 <_puts_r+0x84>
 80013bc:	250a      	movs	r5, #10
 80013be:	e011      	b.n	80013e4 <_puts_r+0x88>
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <_puts_r+0xd4>)
 80013c2:	429c      	cmp	r4, r3
 80013c4:	d101      	bne.n	80013ca <_puts_r+0x6e>
 80013c6:	68ac      	ldr	r4, [r5, #8]
 80013c8:	e7da      	b.n	8001380 <_puts_r+0x24>
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <_puts_r+0xd8>)
 80013cc:	429c      	cmp	r4, r3
 80013ce:	bf08      	it	eq
 80013d0:	68ec      	ldreq	r4, [r5, #12]
 80013d2:	e7d5      	b.n	8001380 <_puts_r+0x24>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f898 	bl	800150c <__swsetup_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d0dd      	beq.n	800139c <_puts_r+0x40>
 80013e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80013e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013e6:	07da      	lsls	r2, r3, #31
 80013e8:	d405      	bmi.n	80013f6 <_puts_r+0x9a>
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	059b      	lsls	r3, r3, #22
 80013ee:	d402      	bmi.n	80013f6 <_puts_r+0x9a>
 80013f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013f2:	f000 faae 	bl	8001952 <__retarget_lock_release_recursive>
 80013f6:	4628      	mov	r0, r5
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da04      	bge.n	8001408 <_puts_r+0xac>
 80013fe:	69a2      	ldr	r2, [r4, #24]
 8001400:	429a      	cmp	r2, r3
 8001402:	dc06      	bgt.n	8001412 <_puts_r+0xb6>
 8001404:	290a      	cmp	r1, #10
 8001406:	d004      	beq.n	8001412 <_puts_r+0xb6>
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	6022      	str	r2, [r4, #0]
 800140e:	7019      	strb	r1, [r3, #0]
 8001410:	e7c5      	b.n	800139e <_puts_r+0x42>
 8001412:	4622      	mov	r2, r4
 8001414:	4628      	mov	r0, r5
 8001416:	f000 f827 	bl	8001468 <__swbuf_r>
 800141a:	3001      	adds	r0, #1
 800141c:	d1bf      	bne.n	800139e <_puts_r+0x42>
 800141e:	e7df      	b.n	80013e0 <_puts_r+0x84>
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	250a      	movs	r5, #10
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	6022      	str	r2, [r4, #0]
 8001428:	701d      	strb	r5, [r3, #0]
 800142a:	e7db      	b.n	80013e4 <_puts_r+0x88>
 800142c:	08001c20 	.word	0x08001c20
 8001430:	08001c40 	.word	0x08001c40
 8001434:	08001c00 	.word	0x08001c00

08001438 <puts>:
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <puts+0xc>)
 800143a:	4601      	mov	r1, r0
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f7ff bf8d 	b.w	800135c <_puts_r>
 8001442:	bf00      	nop
 8001444:	20000010 	.word	0x20000010

08001448 <_sbrk_r>:
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	4d06      	ldr	r5, [pc, #24]	; (8001464 <_sbrk_r+0x1c>)
 800144c:	2300      	movs	r3, #0
 800144e:	4604      	mov	r4, r0
 8001450:	4608      	mov	r0, r1
 8001452:	602b      	str	r3, [r5, #0]
 8001454:	f7ff fe0a 	bl	800106c <_sbrk>
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	d102      	bne.n	8001462 <_sbrk_r+0x1a>
 800145c:	682b      	ldr	r3, [r5, #0]
 800145e:	b103      	cbz	r3, 8001462 <_sbrk_r+0x1a>
 8001460:	6023      	str	r3, [r4, #0]
 8001462:	bd38      	pop	{r3, r4, r5, pc}
 8001464:	200000c8 	.word	0x200000c8

08001468 <__swbuf_r>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	460e      	mov	r6, r1
 800146c:	4614      	mov	r4, r2
 800146e:	4605      	mov	r5, r0
 8001470:	b118      	cbz	r0, 800147a <__swbuf_r+0x12>
 8001472:	6983      	ldr	r3, [r0, #24]
 8001474:	b90b      	cbnz	r3, 800147a <__swbuf_r+0x12>
 8001476:	f000 f9cd 	bl	8001814 <__sinit>
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <__swbuf_r+0x98>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d12b      	bne.n	80014d8 <__swbuf_r+0x70>
 8001480:	686c      	ldr	r4, [r5, #4]
 8001482:	69a3      	ldr	r3, [r4, #24]
 8001484:	60a3      	str	r3, [r4, #8]
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	071a      	lsls	r2, r3, #28
 800148a:	d52f      	bpl.n	80014ec <__swbuf_r+0x84>
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	b36b      	cbz	r3, 80014ec <__swbuf_r+0x84>
 8001490:	6923      	ldr	r3, [r4, #16]
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	6963      	ldr	r3, [r4, #20]
 8001498:	b2f6      	uxtb	r6, r6
 800149a:	4283      	cmp	r3, r0
 800149c:	4637      	mov	r7, r6
 800149e:	dc04      	bgt.n	80014aa <__swbuf_r+0x42>
 80014a0:	4621      	mov	r1, r4
 80014a2:	4628      	mov	r0, r5
 80014a4:	f000 f922 	bl	80016ec <_fflush_r>
 80014a8:	bb30      	cbnz	r0, 80014f8 <__swbuf_r+0x90>
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60a3      	str	r3, [r4, #8]
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	6022      	str	r2, [r4, #0]
 80014b6:	701e      	strb	r6, [r3, #0]
 80014b8:	6963      	ldr	r3, [r4, #20]
 80014ba:	3001      	adds	r0, #1
 80014bc:	4283      	cmp	r3, r0
 80014be:	d004      	beq.n	80014ca <__swbuf_r+0x62>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	07db      	lsls	r3, r3, #31
 80014c4:	d506      	bpl.n	80014d4 <__swbuf_r+0x6c>
 80014c6:	2e0a      	cmp	r6, #10
 80014c8:	d104      	bne.n	80014d4 <__swbuf_r+0x6c>
 80014ca:	4621      	mov	r1, r4
 80014cc:	4628      	mov	r0, r5
 80014ce:	f000 f90d 	bl	80016ec <_fflush_r>
 80014d2:	b988      	cbnz	r0, 80014f8 <__swbuf_r+0x90>
 80014d4:	4638      	mov	r0, r7
 80014d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <__swbuf_r+0x9c>)
 80014da:	429c      	cmp	r4, r3
 80014dc:	d101      	bne.n	80014e2 <__swbuf_r+0x7a>
 80014de:	68ac      	ldr	r4, [r5, #8]
 80014e0:	e7cf      	b.n	8001482 <__swbuf_r+0x1a>
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <__swbuf_r+0xa0>)
 80014e4:	429c      	cmp	r4, r3
 80014e6:	bf08      	it	eq
 80014e8:	68ec      	ldreq	r4, [r5, #12]
 80014ea:	e7ca      	b.n	8001482 <__swbuf_r+0x1a>
 80014ec:	4621      	mov	r1, r4
 80014ee:	4628      	mov	r0, r5
 80014f0:	f000 f80c 	bl	800150c <__swsetup_r>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d0cb      	beq.n	8001490 <__swbuf_r+0x28>
 80014f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80014fc:	e7ea      	b.n	80014d4 <__swbuf_r+0x6c>
 80014fe:	bf00      	nop
 8001500:	08001c20 	.word	0x08001c20
 8001504:	08001c40 	.word	0x08001c40
 8001508:	08001c00 	.word	0x08001c00

0800150c <__swsetup_r>:
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <__swsetup_r+0xcc>)
 800150e:	b570      	push	{r4, r5, r6, lr}
 8001510:	681d      	ldr	r5, [r3, #0]
 8001512:	4606      	mov	r6, r0
 8001514:	460c      	mov	r4, r1
 8001516:	b125      	cbz	r5, 8001522 <__swsetup_r+0x16>
 8001518:	69ab      	ldr	r3, [r5, #24]
 800151a:	b913      	cbnz	r3, 8001522 <__swsetup_r+0x16>
 800151c:	4628      	mov	r0, r5
 800151e:	f000 f979 	bl	8001814 <__sinit>
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <__swsetup_r+0xd0>)
 8001524:	429c      	cmp	r4, r3
 8001526:	d10f      	bne.n	8001548 <__swsetup_r+0x3c>
 8001528:	686c      	ldr	r4, [r5, #4]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001530:	0719      	lsls	r1, r3, #28
 8001532:	d42c      	bmi.n	800158e <__swsetup_r+0x82>
 8001534:	06dd      	lsls	r5, r3, #27
 8001536:	d411      	bmi.n	800155c <__swsetup_r+0x50>
 8001538:	2309      	movs	r3, #9
 800153a:	6033      	str	r3, [r6, #0]
 800153c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001546:	e03e      	b.n	80015c6 <__swsetup_r+0xba>
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <__swsetup_r+0xd4>)
 800154a:	429c      	cmp	r4, r3
 800154c:	d101      	bne.n	8001552 <__swsetup_r+0x46>
 800154e:	68ac      	ldr	r4, [r5, #8]
 8001550:	e7eb      	b.n	800152a <__swsetup_r+0x1e>
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <__swsetup_r+0xd8>)
 8001554:	429c      	cmp	r4, r3
 8001556:	bf08      	it	eq
 8001558:	68ec      	ldreq	r4, [r5, #12]
 800155a:	e7e6      	b.n	800152a <__swsetup_r+0x1e>
 800155c:	0758      	lsls	r0, r3, #29
 800155e:	d512      	bpl.n	8001586 <__swsetup_r+0x7a>
 8001560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001562:	b141      	cbz	r1, 8001576 <__swsetup_r+0x6a>
 8001564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001568:	4299      	cmp	r1, r3
 800156a:	d002      	beq.n	8001572 <__swsetup_r+0x66>
 800156c:	4630      	mov	r0, r6
 800156e:	f7ff fe17 	bl	80011a0 <_free_r>
 8001572:	2300      	movs	r3, #0
 8001574:	6363      	str	r3, [r4, #52]	; 0x34
 8001576:	89a3      	ldrh	r3, [r4, #12]
 8001578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800157c:	81a3      	strh	r3, [r4, #12]
 800157e:	2300      	movs	r3, #0
 8001580:	6063      	str	r3, [r4, #4]
 8001582:	6923      	ldr	r3, [r4, #16]
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	81a3      	strh	r3, [r4, #12]
 800158e:	6923      	ldr	r3, [r4, #16]
 8001590:	b94b      	cbnz	r3, 80015a6 <__swsetup_r+0x9a>
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159c:	d003      	beq.n	80015a6 <__swsetup_r+0x9a>
 800159e:	4621      	mov	r1, r4
 80015a0:	4630      	mov	r0, r6
 80015a2:	f000 f9fd 	bl	80019a0 <__smakebuf_r>
 80015a6:	89a0      	ldrh	r0, [r4, #12]
 80015a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015ac:	f010 0301 	ands.w	r3, r0, #1
 80015b0:	d00a      	beq.n	80015c8 <__swsetup_r+0xbc>
 80015b2:	2300      	movs	r3, #0
 80015b4:	60a3      	str	r3, [r4, #8]
 80015b6:	6963      	ldr	r3, [r4, #20]
 80015b8:	425b      	negs	r3, r3
 80015ba:	61a3      	str	r3, [r4, #24]
 80015bc:	6923      	ldr	r3, [r4, #16]
 80015be:	b943      	cbnz	r3, 80015d2 <__swsetup_r+0xc6>
 80015c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015c4:	d1ba      	bne.n	800153c <__swsetup_r+0x30>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	0781      	lsls	r1, r0, #30
 80015ca:	bf58      	it	pl
 80015cc:	6963      	ldrpl	r3, [r4, #20]
 80015ce:	60a3      	str	r3, [r4, #8]
 80015d0:	e7f4      	b.n	80015bc <__swsetup_r+0xb0>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e7f7      	b.n	80015c6 <__swsetup_r+0xba>
 80015d6:	bf00      	nop
 80015d8:	20000010 	.word	0x20000010
 80015dc:	08001c20 	.word	0x08001c20
 80015e0:	08001c40 	.word	0x08001c40
 80015e4:	08001c00 	.word	0x08001c00

080015e8 <__sflush_r>:
 80015e8:	898a      	ldrh	r2, [r1, #12]
 80015ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ec:	4605      	mov	r5, r0
 80015ee:	0710      	lsls	r0, r2, #28
 80015f0:	460c      	mov	r4, r1
 80015f2:	d457      	bmi.n	80016a4 <__sflush_r+0xbc>
 80015f4:	684b      	ldr	r3, [r1, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc04      	bgt.n	8001604 <__sflush_r+0x1c>
 80015fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dc01      	bgt.n	8001604 <__sflush_r+0x1c>
 8001600:	2000      	movs	r0, #0
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001606:	2e00      	cmp	r6, #0
 8001608:	d0fa      	beq.n	8001600 <__sflush_r+0x18>
 800160a:	2300      	movs	r3, #0
 800160c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001610:	682f      	ldr	r7, [r5, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	d032      	beq.n	800167c <__sflush_r+0x94>
 8001616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001618:	89a3      	ldrh	r3, [r4, #12]
 800161a:	075a      	lsls	r2, r3, #29
 800161c:	d505      	bpl.n	800162a <__sflush_r+0x42>
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	1ac0      	subs	r0, r0, r3
 8001622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001624:	b10b      	cbz	r3, 800162a <__sflush_r+0x42>
 8001626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001628:	1ac0      	subs	r0, r0, r3
 800162a:	2300      	movs	r3, #0
 800162c:	4602      	mov	r2, r0
 800162e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001630:	6a21      	ldr	r1, [r4, #32]
 8001632:	4628      	mov	r0, r5
 8001634:	47b0      	blx	r6
 8001636:	1c43      	adds	r3, r0, #1
 8001638:	89a3      	ldrh	r3, [r4, #12]
 800163a:	d106      	bne.n	800164a <__sflush_r+0x62>
 800163c:	6829      	ldr	r1, [r5, #0]
 800163e:	291d      	cmp	r1, #29
 8001640:	d82c      	bhi.n	800169c <__sflush_r+0xb4>
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <__sflush_r+0x100>)
 8001644:	40ca      	lsrs	r2, r1
 8001646:	07d6      	lsls	r6, r2, #31
 8001648:	d528      	bpl.n	800169c <__sflush_r+0xb4>
 800164a:	2200      	movs	r2, #0
 800164c:	6062      	str	r2, [r4, #4]
 800164e:	04d9      	lsls	r1, r3, #19
 8001650:	6922      	ldr	r2, [r4, #16]
 8001652:	6022      	str	r2, [r4, #0]
 8001654:	d504      	bpl.n	8001660 <__sflush_r+0x78>
 8001656:	1c42      	adds	r2, r0, #1
 8001658:	d101      	bne.n	800165e <__sflush_r+0x76>
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	b903      	cbnz	r3, 8001660 <__sflush_r+0x78>
 800165e:	6560      	str	r0, [r4, #84]	; 0x54
 8001660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001662:	602f      	str	r7, [r5, #0]
 8001664:	2900      	cmp	r1, #0
 8001666:	d0cb      	beq.n	8001600 <__sflush_r+0x18>
 8001668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800166c:	4299      	cmp	r1, r3
 800166e:	d002      	beq.n	8001676 <__sflush_r+0x8e>
 8001670:	4628      	mov	r0, r5
 8001672:	f7ff fd95 	bl	80011a0 <_free_r>
 8001676:	2000      	movs	r0, #0
 8001678:	6360      	str	r0, [r4, #52]	; 0x34
 800167a:	e7c2      	b.n	8001602 <__sflush_r+0x1a>
 800167c:	6a21      	ldr	r1, [r4, #32]
 800167e:	2301      	movs	r3, #1
 8001680:	4628      	mov	r0, r5
 8001682:	47b0      	blx	r6
 8001684:	1c41      	adds	r1, r0, #1
 8001686:	d1c7      	bne.n	8001618 <__sflush_r+0x30>
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0c4      	beq.n	8001618 <__sflush_r+0x30>
 800168e:	2b1d      	cmp	r3, #29
 8001690:	d001      	beq.n	8001696 <__sflush_r+0xae>
 8001692:	2b16      	cmp	r3, #22
 8001694:	d101      	bne.n	800169a <__sflush_r+0xb2>
 8001696:	602f      	str	r7, [r5, #0]
 8001698:	e7b2      	b.n	8001600 <__sflush_r+0x18>
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	81a3      	strh	r3, [r4, #12]
 80016a2:	e7ae      	b.n	8001602 <__sflush_r+0x1a>
 80016a4:	690f      	ldr	r7, [r1, #16]
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	d0aa      	beq.n	8001600 <__sflush_r+0x18>
 80016aa:	0793      	lsls	r3, r2, #30
 80016ac:	680e      	ldr	r6, [r1, #0]
 80016ae:	bf08      	it	eq
 80016b0:	694b      	ldreq	r3, [r1, #20]
 80016b2:	600f      	str	r7, [r1, #0]
 80016b4:	bf18      	it	ne
 80016b6:	2300      	movne	r3, #0
 80016b8:	1bf6      	subs	r6, r6, r7
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	2e00      	cmp	r6, #0
 80016be:	dd9f      	ble.n	8001600 <__sflush_r+0x18>
 80016c0:	6a21      	ldr	r1, [r4, #32]
 80016c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80016c6:	4633      	mov	r3, r6
 80016c8:	463a      	mov	r2, r7
 80016ca:	4628      	mov	r0, r5
 80016cc:	47e0      	blx	ip
 80016ce:	2800      	cmp	r0, #0
 80016d0:	dc06      	bgt.n	80016e0 <__sflush_r+0xf8>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016de:	e790      	b.n	8001602 <__sflush_r+0x1a>
 80016e0:	4407      	add	r7, r0
 80016e2:	1a36      	subs	r6, r6, r0
 80016e4:	e7ea      	b.n	80016bc <__sflush_r+0xd4>
 80016e6:	bf00      	nop
 80016e8:	20400001 	.word	0x20400001

080016ec <_fflush_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	690b      	ldr	r3, [r1, #16]
 80016f0:	4605      	mov	r5, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	b913      	cbnz	r3, 80016fc <_fflush_r+0x10>
 80016f6:	2500      	movs	r5, #0
 80016f8:	4628      	mov	r0, r5
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
 80016fc:	b118      	cbz	r0, 8001706 <_fflush_r+0x1a>
 80016fe:	6983      	ldr	r3, [r0, #24]
 8001700:	b90b      	cbnz	r3, 8001706 <_fflush_r+0x1a>
 8001702:	f000 f887 	bl	8001814 <__sinit>
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <_fflush_r+0x6c>)
 8001708:	429c      	cmp	r4, r3
 800170a:	d11b      	bne.n	8001744 <_fflush_r+0x58>
 800170c:	686c      	ldr	r4, [r5, #4]
 800170e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ef      	beq.n	80016f6 <_fflush_r+0xa>
 8001716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001718:	07d0      	lsls	r0, r2, #31
 800171a:	d404      	bmi.n	8001726 <_fflush_r+0x3a>
 800171c:	0599      	lsls	r1, r3, #22
 800171e:	d402      	bmi.n	8001726 <_fflush_r+0x3a>
 8001720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001722:	f000 f915 	bl	8001950 <__retarget_lock_acquire_recursive>
 8001726:	4628      	mov	r0, r5
 8001728:	4621      	mov	r1, r4
 800172a:	f7ff ff5d 	bl	80015e8 <__sflush_r>
 800172e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001730:	07da      	lsls	r2, r3, #31
 8001732:	4605      	mov	r5, r0
 8001734:	d4e0      	bmi.n	80016f8 <_fflush_r+0xc>
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	059b      	lsls	r3, r3, #22
 800173a:	d4dd      	bmi.n	80016f8 <_fflush_r+0xc>
 800173c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800173e:	f000 f908 	bl	8001952 <__retarget_lock_release_recursive>
 8001742:	e7d9      	b.n	80016f8 <_fflush_r+0xc>
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <_fflush_r+0x70>)
 8001746:	429c      	cmp	r4, r3
 8001748:	d101      	bne.n	800174e <_fflush_r+0x62>
 800174a:	68ac      	ldr	r4, [r5, #8]
 800174c:	e7df      	b.n	800170e <_fflush_r+0x22>
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <_fflush_r+0x74>)
 8001750:	429c      	cmp	r4, r3
 8001752:	bf08      	it	eq
 8001754:	68ec      	ldreq	r4, [r5, #12]
 8001756:	e7da      	b.n	800170e <_fflush_r+0x22>
 8001758:	08001c20 	.word	0x08001c20
 800175c:	08001c40 	.word	0x08001c40
 8001760:	08001c00 	.word	0x08001c00

08001764 <std>:
 8001764:	2300      	movs	r3, #0
 8001766:	b510      	push	{r4, lr}
 8001768:	4604      	mov	r4, r0
 800176a:	e9c0 3300 	strd	r3, r3, [r0]
 800176e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001772:	6083      	str	r3, [r0, #8]
 8001774:	8181      	strh	r1, [r0, #12]
 8001776:	6643      	str	r3, [r0, #100]	; 0x64
 8001778:	81c2      	strh	r2, [r0, #14]
 800177a:	6183      	str	r3, [r0, #24]
 800177c:	4619      	mov	r1, r3
 800177e:	2208      	movs	r2, #8
 8001780:	305c      	adds	r0, #92	; 0x5c
 8001782:	f7ff fd05 	bl	8001190 <memset>
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <std+0x38>)
 8001788:	6263      	str	r3, [r4, #36]	; 0x24
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <std+0x3c>)
 800178c:	62a3      	str	r3, [r4, #40]	; 0x28
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <std+0x40>)
 8001790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <std+0x44>)
 8001794:	6224      	str	r4, [r4, #32]
 8001796:	6323      	str	r3, [r4, #48]	; 0x30
 8001798:	bd10      	pop	{r4, pc}
 800179a:	bf00      	nop
 800179c:	08001a39 	.word	0x08001a39
 80017a0:	08001a5b 	.word	0x08001a5b
 80017a4:	08001a93 	.word	0x08001a93
 80017a8:	08001ab7 	.word	0x08001ab7

080017ac <_cleanup_r>:
 80017ac:	4901      	ldr	r1, [pc, #4]	; (80017b4 <_cleanup_r+0x8>)
 80017ae:	f000 b8af 	b.w	8001910 <_fwalk_reent>
 80017b2:	bf00      	nop
 80017b4:	080016ed 	.word	0x080016ed

080017b8 <__sfmoreglue>:
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	2268      	movs	r2, #104	; 0x68
 80017bc:	1e4d      	subs	r5, r1, #1
 80017be:	4355      	muls	r5, r2
 80017c0:	460e      	mov	r6, r1
 80017c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017c6:	f7ff fd55 	bl	8001274 <_malloc_r>
 80017ca:	4604      	mov	r4, r0
 80017cc:	b140      	cbz	r0, 80017e0 <__sfmoreglue+0x28>
 80017ce:	2100      	movs	r1, #0
 80017d0:	e9c0 1600 	strd	r1, r6, [r0]
 80017d4:	300c      	adds	r0, #12
 80017d6:	60a0      	str	r0, [r4, #8]
 80017d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017dc:	f7ff fcd8 	bl	8001190 <memset>
 80017e0:	4620      	mov	r0, r4
 80017e2:	bd70      	pop	{r4, r5, r6, pc}

080017e4 <__sfp_lock_acquire>:
 80017e4:	4801      	ldr	r0, [pc, #4]	; (80017ec <__sfp_lock_acquire+0x8>)
 80017e6:	f000 b8b3 	b.w	8001950 <__retarget_lock_acquire_recursive>
 80017ea:	bf00      	nop
 80017ec:	200000c5 	.word	0x200000c5

080017f0 <__sfp_lock_release>:
 80017f0:	4801      	ldr	r0, [pc, #4]	; (80017f8 <__sfp_lock_release+0x8>)
 80017f2:	f000 b8ae 	b.w	8001952 <__retarget_lock_release_recursive>
 80017f6:	bf00      	nop
 80017f8:	200000c5 	.word	0x200000c5

080017fc <__sinit_lock_acquire>:
 80017fc:	4801      	ldr	r0, [pc, #4]	; (8001804 <__sinit_lock_acquire+0x8>)
 80017fe:	f000 b8a7 	b.w	8001950 <__retarget_lock_acquire_recursive>
 8001802:	bf00      	nop
 8001804:	200000c6 	.word	0x200000c6

08001808 <__sinit_lock_release>:
 8001808:	4801      	ldr	r0, [pc, #4]	; (8001810 <__sinit_lock_release+0x8>)
 800180a:	f000 b8a2 	b.w	8001952 <__retarget_lock_release_recursive>
 800180e:	bf00      	nop
 8001810:	200000c6 	.word	0x200000c6

08001814 <__sinit>:
 8001814:	b510      	push	{r4, lr}
 8001816:	4604      	mov	r4, r0
 8001818:	f7ff fff0 	bl	80017fc <__sinit_lock_acquire>
 800181c:	69a3      	ldr	r3, [r4, #24]
 800181e:	b11b      	cbz	r3, 8001828 <__sinit+0x14>
 8001820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001824:	f7ff bff0 	b.w	8001808 <__sinit_lock_release>
 8001828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800182c:	6523      	str	r3, [r4, #80]	; 0x50
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <__sinit+0x68>)
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <__sinit+0x6c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	62a2      	str	r2, [r4, #40]	; 0x28
 8001836:	42a3      	cmp	r3, r4
 8001838:	bf04      	itt	eq
 800183a:	2301      	moveq	r3, #1
 800183c:	61a3      	streq	r3, [r4, #24]
 800183e:	4620      	mov	r0, r4
 8001840:	f000 f820 	bl	8001884 <__sfp>
 8001844:	6060      	str	r0, [r4, #4]
 8001846:	4620      	mov	r0, r4
 8001848:	f000 f81c 	bl	8001884 <__sfp>
 800184c:	60a0      	str	r0, [r4, #8]
 800184e:	4620      	mov	r0, r4
 8001850:	f000 f818 	bl	8001884 <__sfp>
 8001854:	2200      	movs	r2, #0
 8001856:	60e0      	str	r0, [r4, #12]
 8001858:	2104      	movs	r1, #4
 800185a:	6860      	ldr	r0, [r4, #4]
 800185c:	f7ff ff82 	bl	8001764 <std>
 8001860:	68a0      	ldr	r0, [r4, #8]
 8001862:	2201      	movs	r2, #1
 8001864:	2109      	movs	r1, #9
 8001866:	f7ff ff7d 	bl	8001764 <std>
 800186a:	68e0      	ldr	r0, [r4, #12]
 800186c:	2202      	movs	r2, #2
 800186e:	2112      	movs	r1, #18
 8001870:	f7ff ff78 	bl	8001764 <std>
 8001874:	2301      	movs	r3, #1
 8001876:	61a3      	str	r3, [r4, #24]
 8001878:	e7d2      	b.n	8001820 <__sinit+0xc>
 800187a:	bf00      	nop
 800187c:	08001bfc 	.word	0x08001bfc
 8001880:	080017ad 	.word	0x080017ad

08001884 <__sfp>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	4607      	mov	r7, r0
 8001888:	f7ff ffac 	bl	80017e4 <__sfp_lock_acquire>
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <__sfp+0x84>)
 800188e:	681e      	ldr	r6, [r3, #0]
 8001890:	69b3      	ldr	r3, [r6, #24]
 8001892:	b913      	cbnz	r3, 800189a <__sfp+0x16>
 8001894:	4630      	mov	r0, r6
 8001896:	f7ff ffbd 	bl	8001814 <__sinit>
 800189a:	3648      	adds	r6, #72	; 0x48
 800189c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	d503      	bpl.n	80018ac <__sfp+0x28>
 80018a4:	6833      	ldr	r3, [r6, #0]
 80018a6:	b30b      	cbz	r3, 80018ec <__sfp+0x68>
 80018a8:	6836      	ldr	r6, [r6, #0]
 80018aa:	e7f7      	b.n	800189c <__sfp+0x18>
 80018ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018b0:	b9d5      	cbnz	r5, 80018e8 <__sfp+0x64>
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <__sfp+0x88>)
 80018b4:	60e3      	str	r3, [r4, #12]
 80018b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018ba:	6665      	str	r5, [r4, #100]	; 0x64
 80018bc:	f000 f847 	bl	800194e <__retarget_lock_init_recursive>
 80018c0:	f7ff ff96 	bl	80017f0 <__sfp_lock_release>
 80018c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018cc:	6025      	str	r5, [r4, #0]
 80018ce:	61a5      	str	r5, [r4, #24]
 80018d0:	2208      	movs	r2, #8
 80018d2:	4629      	mov	r1, r5
 80018d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018d8:	f7ff fc5a 	bl	8001190 <memset>
 80018dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018e4:	4620      	mov	r0, r4
 80018e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e8:	3468      	adds	r4, #104	; 0x68
 80018ea:	e7d9      	b.n	80018a0 <__sfp+0x1c>
 80018ec:	2104      	movs	r1, #4
 80018ee:	4638      	mov	r0, r7
 80018f0:	f7ff ff62 	bl	80017b8 <__sfmoreglue>
 80018f4:	4604      	mov	r4, r0
 80018f6:	6030      	str	r0, [r6, #0]
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1d5      	bne.n	80018a8 <__sfp+0x24>
 80018fc:	f7ff ff78 	bl	80017f0 <__sfp_lock_release>
 8001900:	230c      	movs	r3, #12
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	e7ee      	b.n	80018e4 <__sfp+0x60>
 8001906:	bf00      	nop
 8001908:	08001bfc 	.word	0x08001bfc
 800190c:	ffff0001 	.word	0xffff0001

08001910 <_fwalk_reent>:
 8001910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001914:	4606      	mov	r6, r0
 8001916:	4688      	mov	r8, r1
 8001918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800191c:	2700      	movs	r7, #0
 800191e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001922:	f1b9 0901 	subs.w	r9, r9, #1
 8001926:	d505      	bpl.n	8001934 <_fwalk_reent+0x24>
 8001928:	6824      	ldr	r4, [r4, #0]
 800192a:	2c00      	cmp	r4, #0
 800192c:	d1f7      	bne.n	800191e <_fwalk_reent+0xe>
 800192e:	4638      	mov	r0, r7
 8001930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001934:	89ab      	ldrh	r3, [r5, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d907      	bls.n	800194a <_fwalk_reent+0x3a>
 800193a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800193e:	3301      	adds	r3, #1
 8001940:	d003      	beq.n	800194a <_fwalk_reent+0x3a>
 8001942:	4629      	mov	r1, r5
 8001944:	4630      	mov	r0, r6
 8001946:	47c0      	blx	r8
 8001948:	4307      	orrs	r7, r0
 800194a:	3568      	adds	r5, #104	; 0x68
 800194c:	e7e9      	b.n	8001922 <_fwalk_reent+0x12>

0800194e <__retarget_lock_init_recursive>:
 800194e:	4770      	bx	lr

08001950 <__retarget_lock_acquire_recursive>:
 8001950:	4770      	bx	lr

08001952 <__retarget_lock_release_recursive>:
 8001952:	4770      	bx	lr

08001954 <__swhatbuf_r>:
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	460e      	mov	r6, r1
 8001958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195c:	2900      	cmp	r1, #0
 800195e:	b096      	sub	sp, #88	; 0x58
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	da08      	bge.n	8001978 <__swhatbuf_r+0x24>
 8001966:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	602a      	str	r2, [r5, #0]
 800196e:	061a      	lsls	r2, r3, #24
 8001970:	d410      	bmi.n	8001994 <__swhatbuf_r+0x40>
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	e00e      	b.n	8001996 <__swhatbuf_r+0x42>
 8001978:	466a      	mov	r2, sp
 800197a:	f000 f8c3 	bl	8001b04 <_fstat_r>
 800197e:	2800      	cmp	r0, #0
 8001980:	dbf1      	blt.n	8001966 <__swhatbuf_r+0x12>
 8001982:	9a01      	ldr	r2, [sp, #4]
 8001984:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001988:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800198c:	425a      	negs	r2, r3
 800198e:	415a      	adcs	r2, r3
 8001990:	602a      	str	r2, [r5, #0]
 8001992:	e7ee      	b.n	8001972 <__swhatbuf_r+0x1e>
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	2000      	movs	r0, #0
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	b016      	add	sp, #88	; 0x58
 800199c:	bd70      	pop	{r4, r5, r6, pc}
	...

080019a0 <__smakebuf_r>:
 80019a0:	898b      	ldrh	r3, [r1, #12]
 80019a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019a4:	079d      	lsls	r5, r3, #30
 80019a6:	4606      	mov	r6, r0
 80019a8:	460c      	mov	r4, r1
 80019aa:	d507      	bpl.n	80019bc <__smakebuf_r+0x1c>
 80019ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	6123      	str	r3, [r4, #16]
 80019b4:	2301      	movs	r3, #1
 80019b6:	6163      	str	r3, [r4, #20]
 80019b8:	b002      	add	sp, #8
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	ab01      	add	r3, sp, #4
 80019be:	466a      	mov	r2, sp
 80019c0:	f7ff ffc8 	bl	8001954 <__swhatbuf_r>
 80019c4:	9900      	ldr	r1, [sp, #0]
 80019c6:	4605      	mov	r5, r0
 80019c8:	4630      	mov	r0, r6
 80019ca:	f7ff fc53 	bl	8001274 <_malloc_r>
 80019ce:	b948      	cbnz	r0, 80019e4 <__smakebuf_r+0x44>
 80019d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019d4:	059a      	lsls	r2, r3, #22
 80019d6:	d4ef      	bmi.n	80019b8 <__smakebuf_r+0x18>
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	81a3      	strh	r3, [r4, #12]
 80019e2:	e7e3      	b.n	80019ac <__smakebuf_r+0xc>
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <__smakebuf_r+0x7c>)
 80019e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	6020      	str	r0, [r4, #0]
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	81a3      	strh	r3, [r4, #12]
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	6163      	str	r3, [r4, #20]
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	6120      	str	r0, [r4, #16]
 80019fa:	b15b      	cbz	r3, 8001a14 <__smakebuf_r+0x74>
 80019fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a00:	4630      	mov	r0, r6
 8001a02:	f000 f891 	bl	8001b28 <_isatty_r>
 8001a06:	b128      	cbz	r0, 8001a14 <__smakebuf_r+0x74>
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	81a3      	strh	r3, [r4, #12]
 8001a14:	89a0      	ldrh	r0, [r4, #12]
 8001a16:	4305      	orrs	r5, r0
 8001a18:	81a5      	strh	r5, [r4, #12]
 8001a1a:	e7cd      	b.n	80019b8 <__smakebuf_r+0x18>
 8001a1c:	080017ad 	.word	0x080017ad

08001a20 <__malloc_lock>:
 8001a20:	4801      	ldr	r0, [pc, #4]	; (8001a28 <__malloc_lock+0x8>)
 8001a22:	f7ff bf95 	b.w	8001950 <__retarget_lock_acquire_recursive>
 8001a26:	bf00      	nop
 8001a28:	200000c4 	.word	0x200000c4

08001a2c <__malloc_unlock>:
 8001a2c:	4801      	ldr	r0, [pc, #4]	; (8001a34 <__malloc_unlock+0x8>)
 8001a2e:	f7ff bf90 	b.w	8001952 <__retarget_lock_release_recursive>
 8001a32:	bf00      	nop
 8001a34:	200000c4 	.word	0x200000c4

08001a38 <__sread>:
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a40:	f000 f894 	bl	8001b6c <_read_r>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	bfab      	itete	ge
 8001a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a4c:	181b      	addge	r3, r3, r0
 8001a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a52:	bfac      	ite	ge
 8001a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a56:	81a3      	strhlt	r3, [r4, #12]
 8001a58:	bd10      	pop	{r4, pc}

08001a5a <__swrite>:
 8001a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5e:	461f      	mov	r7, r3
 8001a60:	898b      	ldrh	r3, [r1, #12]
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	4605      	mov	r5, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	4616      	mov	r6, r2
 8001a6a:	d505      	bpl.n	8001a78 <__swrite+0x1e>
 8001a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a70:	2302      	movs	r3, #2
 8001a72:	2200      	movs	r2, #0
 8001a74:	f000 f868 	bl	8001b48 <_lseek_r>
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	4632      	mov	r2, r6
 8001a86:	463b      	mov	r3, r7
 8001a88:	4628      	mov	r0, r5
 8001a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8e:	f000 b817 	b.w	8001ac0 <_write_r>

08001a92 <__sseek>:
 8001a92:	b510      	push	{r4, lr}
 8001a94:	460c      	mov	r4, r1
 8001a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9a:	f000 f855 	bl	8001b48 <_lseek_r>
 8001a9e:	1c43      	adds	r3, r0, #1
 8001aa0:	89a3      	ldrh	r3, [r4, #12]
 8001aa2:	bf15      	itete	ne
 8001aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aae:	81a3      	strheq	r3, [r4, #12]
 8001ab0:	bf18      	it	ne
 8001ab2:	81a3      	strhne	r3, [r4, #12]
 8001ab4:	bd10      	pop	{r4, pc}

08001ab6 <__sclose>:
 8001ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aba:	f000 b813 	b.w	8001ae4 <_close_r>
	...

08001ac0 <_write_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4d07      	ldr	r5, [pc, #28]	; (8001ae0 <_write_r+0x20>)
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	2200      	movs	r2, #0
 8001acc:	602a      	str	r2, [r5, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7ff fa7f 	bl	8000fd2 <_write>
 8001ad4:	1c43      	adds	r3, r0, #1
 8001ad6:	d102      	bne.n	8001ade <_write_r+0x1e>
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	b103      	cbz	r3, 8001ade <_write_r+0x1e>
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	bd38      	pop	{r3, r4, r5, pc}
 8001ae0:	200000c8 	.word	0x200000c8

08001ae4 <_close_r>:
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	4d06      	ldr	r5, [pc, #24]	; (8001b00 <_close_r+0x1c>)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	602b      	str	r3, [r5, #0]
 8001af0:	f7ff fa8b 	bl	800100a <_close>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d102      	bne.n	8001afe <_close_r+0x1a>
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	b103      	cbz	r3, 8001afe <_close_r+0x1a>
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	bd38      	pop	{r3, r4, r5, pc}
 8001b00:	200000c8 	.word	0x200000c8

08001b04 <_fstat_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	4d07      	ldr	r5, [pc, #28]	; (8001b24 <_fstat_r+0x20>)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	f7ff fa85 	bl	8001020 <_fstat>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	d102      	bne.n	8001b20 <_fstat_r+0x1c>
 8001b1a:	682b      	ldr	r3, [r5, #0]
 8001b1c:	b103      	cbz	r3, 8001b20 <_fstat_r+0x1c>
 8001b1e:	6023      	str	r3, [r4, #0]
 8001b20:	bd38      	pop	{r3, r4, r5, pc}
 8001b22:	bf00      	nop
 8001b24:	200000c8 	.word	0x200000c8

08001b28 <_isatty_r>:
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	4d06      	ldr	r5, [pc, #24]	; (8001b44 <_isatty_r+0x1c>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	f7ff fa83 	bl	800103e <_isatty>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	d102      	bne.n	8001b42 <_isatty_r+0x1a>
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	b103      	cbz	r3, 8001b42 <_isatty_r+0x1a>
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	200000c8 	.word	0x200000c8

08001b48 <_lseek_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	4d07      	ldr	r5, [pc, #28]	; (8001b68 <_lseek_r+0x20>)
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	4608      	mov	r0, r1
 8001b50:	4611      	mov	r1, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	602a      	str	r2, [r5, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f7ff fa7b 	bl	8001052 <_lseek>
 8001b5c:	1c43      	adds	r3, r0, #1
 8001b5e:	d102      	bne.n	8001b66 <_lseek_r+0x1e>
 8001b60:	682b      	ldr	r3, [r5, #0]
 8001b62:	b103      	cbz	r3, 8001b66 <_lseek_r+0x1e>
 8001b64:	6023      	str	r3, [r4, #0]
 8001b66:	bd38      	pop	{r3, r4, r5, pc}
 8001b68:	200000c8 	.word	0x200000c8

08001b6c <_read_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4d07      	ldr	r5, [pc, #28]	; (8001b8c <_read_r+0x20>)
 8001b70:	4604      	mov	r4, r0
 8001b72:	4608      	mov	r0, r1
 8001b74:	4611      	mov	r1, r2
 8001b76:	2200      	movs	r2, #0
 8001b78:	602a      	str	r2, [r5, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fa0c 	bl	8000f98 <_read>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_read_r+0x1e>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_read_r+0x1e>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	200000c8 	.word	0x200000c8

08001b90 <_init>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	bf00      	nop
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr

08001b9c <_fini>:
 8001b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9e:	bf00      	nop
 8001ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba2:	bc08      	pop	{r3}
 8001ba4:	469e      	mov	lr, r3
 8001ba6:	4770      	bx	lr
