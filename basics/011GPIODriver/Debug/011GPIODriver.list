
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000080  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f9f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d33  00000000  00000000  00023041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  00023d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000370  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002727  00000000  00000000  00024500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000527f  00000000  00000000  00026c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e183  00000000  00000000  0002bea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003a029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001724  00000000  00000000  0003a07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002478 	.word	0x08002478

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002478 	.word	0x08002478

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <configure_uart>:
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
	SPIEnable(SPI_DEV);
}

void configure_uart(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8000294:	482a      	ldr	r0, [pc, #168]	; (8000340 <configure_uart+0xb0>)
 8000296:	f000 fbe1 	bl	8000a5c <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 800029a:	2202      	movs	r2, #2
 800029c:	2105      	movs	r1, #5
 800029e:	4828      	ldr	r0, [pc, #160]	; (8000340 <configure_uart+0xb0>)
 80002a0:	f000 f866 	bl	8000370 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80002a4:	2202      	movs	r2, #2
 80002a6:	2106      	movs	r1, #6
 80002a8:	4825      	ldr	r0, [pc, #148]	; (8000340 <configure_uart+0xb0>)
 80002aa:	f000 f861 	bl	8000370 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80002ae:	2207      	movs	r2, #7
 80002b0:	2105      	movs	r1, #5
 80002b2:	4823      	ldr	r0, [pc, #140]	; (8000340 <configure_uart+0xb0>)
 80002b4:	f000 f8a2 	bl	80003fc <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80002b8:	2207      	movs	r2, #7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4820      	ldr	r0, [pc, #128]	; (8000340 <configure_uart+0xb0>)
 80002be:	f000 f89d 	bl	80003fc <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2105      	movs	r1, #5
 80002c6:	481e      	ldr	r0, [pc, #120]	; (8000340 <configure_uart+0xb0>)
 80002c8:	f000 f8d1 	bl	800046e <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2106      	movs	r1, #6
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <configure_uart+0xb0>)
 80002d2:	f000 f8cc 	bl	800046e <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 80002d6:	2202      	movs	r2, #2
 80002d8:	2105      	movs	r1, #5
 80002da:	4819      	ldr	r0, [pc, #100]	; (8000340 <configure_uart+0xb0>)
 80002dc:	f000 f90d 	bl	80004fa <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 80002e0:	2202      	movs	r2, #2
 80002e2:	2106      	movs	r1, #6
 80002e4:	4816      	ldr	r0, [pc, #88]	; (8000340 <configure_uart+0xb0>)
 80002e6:	f000 f908 	bl	80004fa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2105      	movs	r1, #5
 80002ee:	4814      	ldr	r0, [pc, #80]	; (8000340 <configure_uart+0xb0>)
 80002f0:	f000 f8df 	bl	80004b2 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2106      	movs	r1, #6
 80002f8:	4811      	ldr	r0, [pc, #68]	; (8000340 <configure_uart+0xb0>)
 80002fa:	f000 f8da 	bl	80004b2 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <configure_uart+0xb4>)
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <configure_uart+0xb8>)
 8000302:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <configure_uart+0xb4>)
 8000306:	2202      	movs	r2, #2
 8000308:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <configure_uart+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <configure_uart+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <configure_uart+0xb4>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <configure_uart+0xb4>)
 800031e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000322:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <configure_uart+0xb4>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <configure_uart+0xb8>)
 800032c:	f000 fb96 	bl	8000a5c <EnablePeriClk>
	USART_Init(&Test_USART);
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <configure_uart+0xb4>)
 8000332:	f000 fd57 	bl	8000de4 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <configure_uart+0xb4>)
 8000338:	f000 fe54 	bl	8000fe4 <USART_PeripheralEnable>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40020c00 	.word	0x40020c00
 8000344:	20000094 	.word	0x20000094
 8000348:	40004400 	.word	0x40004400

0800034c <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <UART_SendChar+0x20>)
 800035e:	f000 fe67 	bl	8001030 <USART_SendData>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000094 	.word	0x20000094

08000370 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
 800037c:	4613      	mov	r3, r2
 800037e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	0052      	lsls	r2, r2, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	401a      	ands	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	78b9      	ldrb	r1, [r7, #2]
 80003a0:	78fa      	ldrb	r2, [r7, #3]
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	431a      	orrs	r2, r3
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	601a      	str	r2, [r3, #0]

}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
 80003c4:	4613      	mov	r3, r2
 80003c6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	43d2      	mvns	r2, r2
 80003da:	401a      	ands	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	78b9      	ldrb	r1, [r7, #2]
 80003e6:	78fa      	ldrb	r2, [r7, #3]
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	431a      	orrs	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
 8000408:	4613      	mov	r3, r2
 800040a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	f003 0307 	and.w	r3, r3, #7
 800041c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800041e:	7afa      	ldrb	r2, [r7, #11]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3208      	adds	r2, #8
 8000424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000428:	7aba      	ldrb	r2, [r7, #10]
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	210f      	movs	r1, #15
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	7afa      	ldrb	r2, [r7, #11]
 8000438:	4019      	ands	r1, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3208      	adds	r2, #8
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000442:	7afa      	ldrb	r2, [r7, #11]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3208      	adds	r2, #8
 8000448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044c:	78b9      	ldrb	r1, [r7, #2]
 800044e:	7aba      	ldrb	r2, [r7, #10]
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	4611      	mov	r1, r2
 8000458:	7afa      	ldrb	r2, [r7, #11]
 800045a:	4319      	orrs	r1, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	3208      	adds	r2, #8
 8000460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800046e:	b480      	push	{r7}
 8000470:	b085      	sub	sp, #20
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	70fb      	strb	r3, [r7, #3]
 800047a:	4613      	mov	r3, r2
 800047c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	78fa      	ldrb	r2, [r7, #3]
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	43d2      	mvns	r2, r2
 8000490:	401a      	ands	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	78b9      	ldrb	r1, [r7, #2]
 800049c:	78fa      	ldrb	r2, [r7, #3]
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	431a      	orrs	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	605a      	str	r2, [r3, #4]
}
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	460b      	mov	r3, r1
 80004bc:	70fb      	strb	r3, [r7, #3]
 80004be:	4613      	mov	r3, r2
 80004c0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	78fa      	ldrb	r2, [r7, #3]
 80004cc:	0052      	lsls	r2, r2, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	401a      	ands	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	78b9      	ldrb	r1, [r7, #2]
 80004e2:	78fa      	ldrb	r2, [r7, #3]
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	60da      	str	r2, [r3, #12]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
 8000506:	4613      	mov	r3, r2
 8000508:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	78fa      	ldrb	r2, [r7, #3]
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	401a      	ands	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	78b9      	ldrb	r1, [r7, #2]
 800052a:	78fa      	ldrb	r2, [r7, #3]
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	431a      	orrs	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	609a      	str	r2, [r3, #8]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <idletask>:
uint32_t tick_count = 0;
struct TCB *current_task = NULL;
struct TCB *next_task = NULL;

void idletask(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("From Idle Task...\r\n");
 8000548:	4801      	ldr	r0, [pc, #4]	; (8000550 <idletask+0xc>)
 800054a:	f001 f8fd 	bl	8001748 <puts>
 800054e:	e7fb      	b.n	8000548 <idletask+0x4>
 8000550:	08002490 	.word	0x08002490

08000554 <configure_systick_timer>:
	}
}

void configure_systick_timer(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
	uint32_t *pSYT_RVR = (uint32_t *) 0xE000E014U;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <configure_systick_timer+0x2c>)
 800055c:	607b      	str	r3, [r7, #4]
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <configure_systick_timer+0x30>)
 8000560:	603b      	str	r3, [r7, #0]

	*pSYT_RVR = SYT_RELOAD_VALUE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <configure_systick_timer+0x34>)
 8000566:	601a      	str	r2, [r3, #0]
	*pSYT_CFGR |= SYT_CONTROL_VALUE;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f043 0206 	orr.w	r2, r3, #6
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	601a      	str	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000e014 	.word	0xe000e014
 8000584:	e000e010 	.word	0xe000e010
 8000588:	000fffff 	.word	0x000fffff

0800058c <enable_systick_timer>:

void enable_systick_timer(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	uint32_t *pSYT_CFGR = (uint32_t *) 0xE000E010U;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <enable_systick_timer+0x20>)
 8000594:	607b      	str	r3, [r7, #4]

	*pSYT_CFGR |= 0x1;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0201 	orr.w	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	e000e010 	.word	0xe000e010

080005b0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <SysTick_Handler+0x30>)
 80005b8:	607b      	str	r3, [r7, #4]

	tick_count++;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <SysTick_Handler+0x34>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <SysTick_Handler+0x34>)
 80005c2:	6013      	str	r3, [r2, #0]
	update_sleep_status();
 80005c4:	f000 f8e2 	bl	800078c <update_sleep_status>

	update_next_task();
 80005c8:	f000 f8fe 	bl	80007c8 <update_next_task>

	// Enable PendSV Exception
	*pICSR |= 0x10000000U;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	e000ed04 	.word	0xe000ed04
 80005e4:	200000b0 	.word	0x200000b0

080005e8 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler(void)
{
	/* Save Context of Current Task */
	__asm volatile ("MRS R0, PSP");
 80005e8:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("STMDB R0!, {R4-R11}");
 80005ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Save the current SP value */
	__asm volatile ("LDR R1, =current_task");
 80005f0:	4909      	ldr	r1, [pc, #36]	; (8000618 <PendSV_Handler+0x30>)
	__asm volatile ("LDR R1, [R1]");
 80005f2:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("STR R0, [R1]");
 80005f4:	6008      	str	r0, [r1, #0]

	/* Restore Context of Next Task */

	/* Retrieve the PSP of next task */
	__asm volatile ("LDR R1, =next_task");
 80005f6:	4909      	ldr	r1, [pc, #36]	; (800061c <PendSV_Handler+0x34>)
	__asm volatile ("LDR R1, [R1]");
 80005f8:	6809      	ldr	r1, [r1, #0]
	__asm volatile ("LDR R0, [R1]");
 80005fa:	6808      	ldr	r0, [r1, #0]

	/* Restore Context of Next Task */
	__asm volatile ("LDMIA	R0!, {R4-R11}");
 80005fc:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0");
 8000600:	f380 8809 	msr	PSP, r0

	/* Update Current Task */
	current_task = next_task;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <PendSV_Handler+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <PendSV_Handler+0x2c>)
 800060a:	6013      	str	r3, [r2, #0]

	/* Exit PendSV_Handler Handler */
	__asm volatile ("BX LR");
 800060c:	4770      	bx	lr
}
 800060e:	bf00      	nop
 8000610:	200000b8 	.word	0x200000b8
 8000614:	200000b4 	.word	0x200000b4
 8000618:	200000b4 	.word	0x200000b4
 800061c:	200000b8 	.word	0x200000b8

08000620 <os_create_task>:

void os_create_task(void (*task)(void),uint8_t task_priority,uint32_t task_stack_size)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	460b      	mov	r3, r1
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	72fb      	strb	r3, [r7, #11]
	uint32_t *p;
	struct TCB *last_task, *new_task;

	if(current_task == NULL)						//Adding the idle task
 800062e:	4b3f      	ldr	r3, [pc, #252]	; (800072c <os_create_task+0x10c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d135      	bne.n	80006a2 <os_create_task+0x82>
	{
		current_task = (struct TCB *) malloc(sizeof(struct TCB));
 8000636:	2014      	movs	r0, #20
 8000638:	f000 ff0a 	bl	8001450 <malloc>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b3a      	ldr	r3, [pc, #232]	; (800072c <os_create_task+0x10c>)
 8000642:	601a      	str	r2, [r3, #0]

		current_task->priority = IDLE_TASK_PRIORITY;
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <os_create_task+0x10c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	22fe      	movs	r2, #254	; 0xfe
 800064a:	711a      	strb	r2, [r3, #4]
		current_task->sleep_count = 0;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <os_create_task+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]

		current_task->task_stack = (uint32_t *) malloc(IDLE_TASK_STACK_SIZE*4);
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <os_create_task+0x10c>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800065c:	f000 fef8 	bl	8001450 <malloc>
 8000660:	4603      	mov	r3, r0
 8000662:	60e3      	str	r3, [r4, #12]
		current_task->current_sp = ((uint32_t) current_task->task_stack + 4*IDLE_TASK_STACK_SIZE - 4*16);
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <os_create_task+0x10c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	461a      	mov	r2, r3
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <os_create_task+0x10c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f502 627c 	add.w	r2, r2, #4032	; 0xfc0
 8000674:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+14*4);
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <os_create_task+0x10c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3338      	adds	r3, #56	; 0x38
 800067e:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) idletask;
 8000680:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <os_create_task+0x110>)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	601a      	str	r2, [r3, #0]
		p = (uint32_t*) ((uint32_t)current_task->current_sp+15*4);
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <os_create_task+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	333c      	adds	r3, #60	; 0x3c
 800068e:	61bb      	str	r3, [r7, #24]
		*p = (uint32_t) 0x01000000U;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000696:	601a      	str	r2, [r3, #0]

		current_task->next = current_task;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <os_create_task+0x10c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a23      	ldr	r2, [pc, #140]	; (800072c <os_create_task+0x10c>)
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	611a      	str	r2, [r3, #16]
	}

	//Go to end of list
	last_task = current_task;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <os_create_task+0x10c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 80006a8:	e002      	b.n	80006b0 <os_create_task+0x90>
	{
		last_task = last_task->next;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	61fb      	str	r3, [r7, #28]
	while(last_task->next != current_task)
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <os_create_task+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d1f6      	bne.n	80006aa <os_create_task+0x8a>
	}

	//Add new task
	new_task = (struct TCB *) malloc(sizeof(struct TCB));
 80006bc:	2014      	movs	r0, #20
 80006be:	f000 fec7 	bl	8001450 <malloc>
 80006c2:	4603      	mov	r3, r0
 80006c4:	617b      	str	r3, [r7, #20]
	last_task->next = new_task;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	611a      	str	r2, [r3, #16]

	new_task->priority = task_priority;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	711a      	strb	r2, [r3, #4]
	new_task->sleep_count = 0;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]

	new_task->task_stack = (uint32_t *) malloc(task_stack_size*4);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 feb7 	bl	8001450 <malloc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	60da      	str	r2, [r3, #12]
	new_task->current_sp = ((uint32_t) new_task->task_stack + 4*task_stack_size - 4*16);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+14*4);
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3338      	adds	r3, #56	; 0x38
 8000704:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) task;
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	601a      	str	r2, [r3, #0]
	p = (uint32_t*) ((uint32_t) new_task->current_sp+15*4);
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	333c      	adds	r3, #60	; 0x3c
 8000712:	61bb      	str	r3, [r7, #24]
	*p = (uint32_t) 0x01000000U;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800071a:	601a      	str	r2, [r3, #0]

	new_task->next = current_task;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <os_create_task+0x10c>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	611a      	str	r2, [r3, #16]

	return;
 8000724:	bf00      	nop
}
 8000726:	3724      	adds	r7, #36	; 0x24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	200000b4 	.word	0x200000b4
 8000730:	08000545 	.word	0x08000545

08000734 <os_start>:

void os_start(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	configure_systick_timer();
 8000738:	f7ff ff0c 	bl	8000554 <configure_systick_timer>
	enable_systick_timer();
 800073c:	f7ff ff26 	bl	800058c <enable_systick_timer>

	//Initialize PSP
	__asm volatile ("LDR R1, =current_task");
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <os_start+0x30>)
	__asm volatile ("LDR R0, [R1]");
 8000742:	6808      	ldr	r0, [r1, #0]
	__asm volatile ("LDR R0, [R0]");
 8000744:	6800      	ldr	r0, [r0, #0]
	__asm volatile ("MSR PSP, R0");
 8000746:	f380 8809 	msr	PSP, r0

	//Change SP from MSP to PSP
	__asm volatile ("MRS R0, CONTROL");
 800074a:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");
 800074e:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000752:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("ISB");
 8000756:	f3bf 8f6f 	isb	sy

	idletask();
 800075a:	f7ff fef3 	bl	8000544 <idletask>

	return;
 800075e:	bf00      	nop
}
 8000760:	bd80      	pop	{r7, pc}
 8000762:	0000      	.short	0x0000
 8000764:	200000b4 	.word	0x200000b4

08000768 <os_yield>:

	return;
}

void os_yield(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *) 0xE000ED04U;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <os_yield+0x20>)
 8000770:	607b      	str	r3, [r7, #4]

	//Pending the SysTick Exception
	*pICSR |= 0x4000000U;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]

	return;
 800077e:	bf00      	nop
}
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	e000ed04 	.word	0xe000ed04

0800078c <update_sleep_status>:

void update_sleep_status(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	struct TCB *present_task;

	present_task = current_task;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <update_sleep_status+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	607b      	str	r3, [r7, #4]

	do
	{
		if(present_task->sleep_count > 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <update_sleep_status+0x1e>
		{
			present_task->sleep_count--;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	609a      	str	r2, [r3, #8]
		}
		present_task = present_task->next;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	607b      	str	r3, [r7, #4]
	}
	while(present_task != current_task);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <update_sleep_status+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d1ee      	bne.n	8000798 <update_sleep_status+0xc>

	return;
 80007ba:	bf00      	nop
}
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	200000b4 	.word	0x200000b4

080007c8 <update_next_task>:

void update_next_task(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
	uint8_t max_priority = 255;
 80007ce:	23ff      	movs	r3, #255	; 0xff
 80007d0:	71fb      	strb	r3, [r7, #7]
	struct TCB *best_task;

	next_task = current_task;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <update_next_task+0x5c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <update_next_task+0x60>)
 80007d8:	6013      	str	r3, [r2, #0]

	do
	{
		next_task = next_task->next;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <update_next_task+0x60>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <update_next_task+0x60>)
 80007e2:	6013      	str	r3, [r2, #0]

		if(next_task->priority < max_priority && next_task->sleep_count==0)
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <update_next_task+0x60>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d90b      	bls.n	8000808 <update_next_task+0x40>
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <update_next_task+0x60>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d106      	bne.n	8000808 <update_next_task+0x40>
		{
			max_priority = next_task->priority;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <update_next_task+0x60>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	71fb      	strb	r3, [r7, #7]
			best_task = next_task;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <update_next_task+0x60>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	603b      	str	r3, [r7, #0]
		}
	}
	while(next_task != current_task);
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <update_next_task+0x60>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <update_next_task+0x5c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d1e2      	bne.n	80007da <update_next_task+0x12>

	next_task = best_task;
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <update_next_task+0x60>)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	6013      	str	r3, [r2, #0]

	return;
 800081a:	bf00      	nop
}
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	200000b4 	.word	0x200000b4
 8000828:	200000b8 	.word	0x200000b8

0800082c <os_disable_interrupts>:

void os_disable_interrupts(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	__asm volatile ("CPSID I");
 8000830:	b672      	cpsid	i

	return;
 8000832:	bf00      	nop
}
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <os_enable_interrupts>:

void os_enable_interrupts(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
	__asm volatile ("CPSIE I");
 800083e:	b662      	cpsie	i

	return;
 8000840:	bf00      	nop
}
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <os_mutex_init>:

void os_mutex_init(Mutex *m)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	*m = 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]

	return;
 8000856:	bf00      	nop
}
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <os_mutex_wait>:

void os_mutex_wait(Mutex *m)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 8000868:	f7ff ffe0 	bl	800082c <os_disable_interrupts>

	while((*m) == 0)
 800086c:	e005      	b.n	800087a <os_mutex_wait+0x1a>
	{
		os_enable_interrupts();
 800086e:	f7ff ffe4 	bl	800083a <os_enable_interrupts>
		os_yield();
 8000872:	f7ff ff79 	bl	8000768 <os_yield>
		os_disable_interrupts();
 8000876:	f7ff ffd9 	bl	800082c <os_disable_interrupts>
	while((*m) == 0)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f5      	beq.n	800086e <os_mutex_wait+0xe>
	}

	*m = 0;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]

	os_enable_interrupts();
 8000888:	f7ff ffd7 	bl	800083a <os_enable_interrupts>

	return;
 800088c:	bf00      	nop
}
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <os_mutex_signal>:

void os_mutex_signal(Mutex *m)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 800089c:	f7ff ffc6 	bl	800082c <os_disable_interrupts>

	*m = 1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]

	os_enable_interrupts();
 80008a6:	f7ff ffc8 	bl	800083a <os_enable_interrupts>

	return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <os_sem_init>:

void os_sem_init(Semaphore *s,uint32_t init_value,uint32_t maximum_value)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	s->cur_value = init_value;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
	s->max_value = maximum_value;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	605a      	str	r2, [r3, #4]

	return;
 80008ca:	bf00      	nop
}
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <os_sem_wait>:

void os_sem_wait(Semaphore *s)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 80008dc:	f7ff ffa6 	bl	800082c <os_disable_interrupts>

	while((s->cur_value) == 0)
 80008e0:	e005      	b.n	80008ee <os_sem_wait+0x1a>
	{
		os_enable_interrupts();
 80008e2:	f7ff ffaa 	bl	800083a <os_enable_interrupts>
		os_yield();
 80008e6:	f7ff ff3f 	bl	8000768 <os_yield>
		os_disable_interrupts();
 80008ea:	f7ff ff9f 	bl	800082c <os_disable_interrupts>
	while((s->cur_value) == 0)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f5      	beq.n	80008e2 <os_sem_wait+0xe>
	}

	s->cur_value--;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]

	os_enable_interrupts();
 8000900:	f7ff ff9b 	bl	800083a <os_enable_interrupts>

	return;
 8000904:	bf00      	nop
}
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <os_sem_signal>:

void os_sem_signal(Semaphore *s)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	os_disable_interrupts();
 8000914:	f7ff ff8a 	bl	800082c <os_disable_interrupts>

	if(s->cur_value < s->max_value)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d204      	bcs.n	800092e <os_sem_signal+0x22>
	{
		s->cur_value++;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
	}

	os_enable_interrupts();
 800092e:	f7ff ff84 	bl	800083a <os_enable_interrupts>

	return;
 8000932:	bf00      	nop
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <os_queue_init>:
#include <stdio.h>
#include <stdlib.h>
#include "os_utilities.h"

void os_queue_init(struct Queue *q)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	q->length = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
	q->first = NULL;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
	q->last = NULL;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

	return;
 8000954:	bf00      	nop
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <os_enqueue>:

void os_enqueue(struct Queue *q,uint32_t value)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]

	struct QueueNode *p;

	p = (struct QueueNode *) malloc(sizeof(struct QueueNode));
 8000968:	200c      	movs	r0, #12
 800096a:	f000 fd71 	bl	8001450 <malloc>
 800096e:	4603      	mov	r3, r0
 8000970:	60fb      	str	r3, [r7, #12]
	p->member = value;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	601a      	str	r2, [r3, #0]

	if(q->length == 0)					//First member of queue
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <os_enqueue+0x46>
	{
		p->prev = NULL;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
		p->next = NULL;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
		q->first = p;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	605a      	str	r2, [r3, #4]
		q->last = p;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	609a      	str	r2, [r3, #8]
		q->length++;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	601a      	str	r2, [r3, #0]
		q->first->prev = p;
		q->first = p;
		q->length++;
	}

	return;
 80009a2:	e013      	b.n	80009cc <os_enqueue+0x6e>
		p->prev = NULL;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
		p->next = q->first;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	609a      	str	r2, [r3, #8]
		q->first->prev = p;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	605a      	str	r2, [r3, #4]
		q->first = p;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	605a      	str	r2, [r3, #4]
		q->length++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
	return;
 80009ca:	bf00      	nop
}
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <os_dequeue>:

uint32_t os_dequeue(struct Queue *q)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
	struct QueueNode *p;

	if(q->last != NULL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d015      	beq.n	8000a12 <os_dequeue+0x40>
	{
		p = q->last;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	60bb      	str	r3, [r7, #8]
		value = p->member;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
		p->prev->next = NULL;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]

		q->length--;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	601a      	str	r2, [r3, #0]
		q->last = p->prev;
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	609a      	str	r2, [r3, #8]

		free(p);
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	f000 fd27 	bl	8001460 <free>
	}

	return value;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <RTC_Alarm_IRQHandler+0x24>)
 8000a24:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 8000a26:	f000 f80d 	bl	8000a44 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]

	return;
 8000a36:	bf00      	nop
}
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013c14 	.word	0x40013c14

08000a44 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <RTC_Alarm_Interrupt_Callback+0x14>)
 8000a4e:	f7ff fcb3 	bl	80003b8 <GPIOWritePin>

	return;
 8000a52:	bf00      	nop
}
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a88      	ldr	r2, [pc, #544]	; (8000c88 <EnablePeriClk+0x22c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d108      	bne.n	8000a7e <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a6c:	4b87      	ldr	r3, [pc, #540]	; (8000c8c <EnablePeriClk+0x230>)
 8000a6e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f043 0201 	orr.w	r2, r3, #1
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8000a7c:	e19b      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a83      	ldr	r2, [pc, #524]	; (8000c90 <EnablePeriClk+0x234>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d108      	bne.n	8000a98 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000a86:	4b81      	ldr	r3, [pc, #516]	; (8000c8c <EnablePeriClk+0x230>)
 8000a88:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f043 0202 	orr.w	r2, r3, #2
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	e18e      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a7e      	ldr	r2, [pc, #504]	; (8000c94 <EnablePeriClk+0x238>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d108      	bne.n	8000ab2 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000aa0:	4b7a      	ldr	r3, [pc, #488]	; (8000c8c <EnablePeriClk+0x230>)
 8000aa2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f043 0204 	orr.w	r2, r3, #4
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	e181      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <EnablePeriClk+0x23c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d108      	bne.n	8000acc <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000aba:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <EnablePeriClk+0x230>)
 8000abc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f043 0208 	orr.w	r2, r3, #8
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]
}
 8000aca:	e174      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a73      	ldr	r2, [pc, #460]	; (8000c9c <EnablePeriClk+0x240>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d108      	bne.n	8000ae6 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000ad4:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <EnablePeriClk+0x230>)
 8000ad6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f043 0210 	orr.w	r2, r3, #16
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	e167      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a6d      	ldr	r2, [pc, #436]	; (8000ca0 <EnablePeriClk+0x244>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d108      	bne.n	8000b00 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000aee:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <EnablePeriClk+0x230>)
 8000af0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f043 0220 	orr.w	r2, r3, #32
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	e15a      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a68      	ldr	r2, [pc, #416]	; (8000ca4 <EnablePeriClk+0x248>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d108      	bne.n	8000b1a <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b08:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <EnablePeriClk+0x230>)
 8000b0a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	e14d      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a62      	ldr	r2, [pc, #392]	; (8000ca8 <EnablePeriClk+0x24c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d108      	bne.n	8000b34 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b22:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <EnablePeriClk+0x230>)
 8000b24:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	e140      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a5d      	ldr	r2, [pc, #372]	; (8000cac <EnablePeriClk+0x250>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d108      	bne.n	8000b4e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000b3c:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <EnablePeriClk+0x230>)
 8000b3e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	e133      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <EnablePeriClk+0x254>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d108      	bne.n	8000b68 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000b56:	4b57      	ldr	r3, [pc, #348]	; (8000cb4 <EnablePeriClk+0x258>)
 8000b58:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	e126      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a53      	ldr	r2, [pc, #332]	; (8000cb8 <EnablePeriClk+0x25c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d108      	bne.n	8000b82 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b70:	4b52      	ldr	r3, [pc, #328]	; (8000cbc <EnablePeriClk+0x260>)
 8000b72:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	e119      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4e      	ldr	r2, [pc, #312]	; (8000cc0 <EnablePeriClk+0x264>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d108      	bne.n	8000b9c <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <EnablePeriClk+0x260>)
 8000b8c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	e10c      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <EnablePeriClk+0x268>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d108      	bne.n	8000bb6 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <EnablePeriClk+0x260>)
 8000ba6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	e0ff      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <EnablePeriClk+0x26c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d108      	bne.n	8000bd0 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <EnablePeriClk+0x260>)
 8000bc0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	e0f2      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <EnablePeriClk+0x270>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d108      	bne.n	8000bea <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000bd8:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <EnablePeriClk+0x260>)
 8000bda:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	e0e5      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <EnablePeriClk+0x274>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d108      	bne.n	8000c04 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000bf2:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <EnablePeriClk+0x258>)
 8000bf4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f043 0210 	orr.w	r2, r3, #16
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	e0d8      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <EnablePeriClk+0x278>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d108      	bne.n	8000c1e <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <EnablePeriClk+0x260>)
 8000c0e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	e0cb      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <EnablePeriClk+0x27c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d108      	bne.n	8000c38 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <EnablePeriClk+0x260>)
 8000c28:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	e0be      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <EnablePeriClk+0x280>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d108      	bne.n	8000c52 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <EnablePeriClk+0x260>)
 8000c42:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	e0b1      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <EnablePeriClk+0x284>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d108      	bne.n	8000c6c <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <EnablePeriClk+0x260>)
 8000c5c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	e0a4      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <EnablePeriClk+0x288>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d139      	bne.n	8000ce8 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <EnablePeriClk+0x258>)
 8000c76:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f043 0220 	orr.w	r2, r3, #32
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	e097      	b.n	8000db6 <EnablePeriClk+0x35a>
 8000c86:	bf00      	nop
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023830 	.word	0x40023830
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40023844 	.word	0x40023844
 8000cb8:	40003800 	.word	0x40003800
 8000cbc:	40023840 	.word	0x40023840
 8000cc0:	40003c00 	.word	0x40003c00
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40005800 	.word	0x40005800
 8000ccc:	40005c00 	.word	0x40005c00
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	40004c00 	.word	0x40004c00
 8000ce0:	40005000 	.word	0x40005000
 8000ce4:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <EnablePeriClk+0x364>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d108      	bne.n	8000d02 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <EnablePeriClk+0x368>)
 8000cf2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f043 0210 	orr.w	r2, r3, #16
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	e059      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <EnablePeriClk+0x36c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d108      	bne.n	8000d1c <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <EnablePeriClk+0x368>)
 8000d0c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f043 0220 	orr.w	r2, r3, #32
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	e04c      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <EnablePeriClk+0x370>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d108      	bne.n	8000d36 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <EnablePeriClk+0x374>)
 8000d26:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	e03f      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <EnablePeriClk+0x378>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d108      	bne.n	8000d50 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <EnablePeriClk+0x374>)
 8000d40:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	e032      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d56:	d108      	bne.n	8000d6a <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <EnablePeriClk+0x368>)
 8000d5a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f043 0201 	orr.w	r2, r3, #1
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	e025      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <EnablePeriClk+0x37c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d108      	bne.n	8000d84 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <EnablePeriClk+0x368>)
 8000d74:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f043 0202 	orr.w	r2, r3, #2
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	e018      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <EnablePeriClk+0x380>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d108      	bne.n	8000d9e <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <EnablePeriClk+0x368>)
 8000d8e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f043 0204 	orr.w	r2, r3, #4
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	e00b      	b.n	8000db6 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <EnablePeriClk+0x384>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d107      	bne.n	8000db6 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <EnablePeriClk+0x368>)
 8000da8:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f043 0208 	orr.w	r2, r3, #8
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40001000 	.word	0x40001000
 8000dc4:	40023840 	.word	0x40023840
 8000dc8:	40001400 	.word	0x40001400
 8000dcc:	40026000 	.word	0x40026000
 8000dd0:	40023830 	.word	0x40023830
 8000dd4:	40026400 	.word	0x40026400
 8000dd8:	40000400 	.word	0x40000400
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	40000c00 	.word	0x40000c00

08000de4 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d110      	bne.n	8000e16 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0208 	orr.w	r2, r2, #8
 8000e02:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0204 	bic.w	r2, r2, #4
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	e028      	b.n	8000e68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d110      	bne.n	8000e40 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0208 	bic.w	r2, r2, #8
 8000e2c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0204 	orr.w	r2, r2, #4
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	e013      	b.n	8000e68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d10f      	bne.n	8000e68 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0208 	orr.w	r2, r2, #8
 8000e56:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0204 	orr.w	r2, r2, #4
 8000e66:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d108      	bne.n	8000e82 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	e00b      	b.n	8000e9a <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d107      	bne.n	8000e9a <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e98:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ea8:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6919      	ldr	r1, [r3, #16]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	031a      	lsls	r2, r3, #12
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d108      	bne.n	8000ed8 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	e028      	b.n	8000f2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d110      	bne.n	8000f02 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eee:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	e013      	b.n	8000f2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10f      	bne.n	8000f2a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f18:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f28:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f8a7 	bl	8001084 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d110      	bne.n	8000f60 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f4c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f5c:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000f5e:	e03d      	b.n	8000fdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d110      	bne.n	8000f8a <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f76:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f86:	615a      	str	r2, [r3, #20]
}
 8000f88:	e028      	b.n	8000fdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d110      	bne.n	8000fb4 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fa0:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb0:	615a      	str	r2, [r3, #20]
}
 8000fb2:	e013      	b.n	8000fdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d10f      	bne.n	8000fdc <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fda:	615a      	str	r2, [r3, #20]
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800103c:	e012      	b.n	8001064 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 800103e:	bf00      	nop
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff ffdf 	bl	8001006 <USART_GetFlagStatus>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f8      	beq.n	8001040 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	3301      	adds	r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
		Len--;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3b01      	subs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e9      	bne.n	800103e <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 800106a:	bf00      	nop
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff ffc9 	bl	8001006 <USART_GetFlagStatus>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f8      	beq.n	800106c <USART_SendData+0x3c>
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 800108e:	f240 6383 	movw	r3, #1667	; 0x683
 8001092:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	609a      	str	r2, [r3, #8]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <main>:
static void producer(void);
static void consumer(void);
static void delay(uint32_t count);

int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	configure_uart();
 80010ac:	f7ff f8f0 	bl	8000290 <configure_uart>

	os_sem_init(&w,10,10);
 80010b0:	220a      	movs	r2, #10
 80010b2:	210a      	movs	r1, #10
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <main+0x6c>)
 80010b6:	f7ff fbfc 	bl	80008b2 <os_sem_init>
	os_sem_init(&r,0,10);
 80010ba:	220a      	movs	r2, #10
 80010bc:	2100      	movs	r1, #0
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <main+0x70>)
 80010c0:	f7ff fbf7 	bl	80008b2 <os_sem_init>
	os_mutex_init(&m);
 80010c4:	4815      	ldr	r0, [pc, #84]	; (800111c <main+0x74>)
 80010c6:	f7ff fbbf 	bl	8000848 <os_mutex_init>
	os_queue_init(&q);
 80010ca:	4815      	ldr	r0, [pc, #84]	; (8001120 <main+0x78>)
 80010cc:	f7ff fc35 	bl	800093a <os_queue_init>

	os_create_task(producer,0,1024);
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	2100      	movs	r1, #0
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <main+0x7c>)
 80010d8:	f7ff faa2 	bl	8000620 <os_create_task>
	os_create_task(producer,0,1024);
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	2100      	movs	r1, #0
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <main+0x7c>)
 80010e4:	f7ff fa9c 	bl	8000620 <os_create_task>
	os_create_task(consumer,0,1024);
 80010e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ec:	2100      	movs	r1, #0
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0x80>)
 80010f0:	f7ff fa96 	bl	8000620 <os_create_task>
	os_create_task(consumer,0,1024);
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	2100      	movs	r1, #0
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <main+0x80>)
 80010fc:	f7ff fa90 	bl	8000620 <os_create_task>
	os_create_task(consumer,0,1024);
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	2100      	movs	r1, #0
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <main+0x80>)
 8001108:	f7ff fa8a 	bl	8000620 <os_create_task>
	os_start();
 800110c:	f7ff fb12 	bl	8000734 <os_start>

	while(1);
 8001110:	e7fe      	b.n	8001110 <main+0x68>
 8001112:	bf00      	nop
 8001114:	200000c0 	.word	0x200000c0
 8001118:	200000c8 	.word	0x200000c8
 800111c:	200000d0 	.word	0x200000d0
 8001120:	200000d4 	.word	0x200000d4
 8001124:	0800112d 	.word	0x0800112d
 8001128:	080011c1 	.word	0x080011c1

0800112c <producer>:

	return 0;
}

static void producer(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	uint32_t volatile producer_id;

	os_mutex_wait(&m);
 8001132:	481b      	ldr	r0, [pc, #108]	; (80011a0 <producer+0x74>)
 8001134:	f7ff fb94 	bl	8000860 <os_mutex_wait>
	producer_id = ++producer_count;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <producer+0x78>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <producer+0x78>)
 8001144:	4611      	mov	r1, r2
 8001146:	7019      	strb	r1, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	607b      	str	r3, [r7, #4]
	os_mutex_signal(&m);
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <producer+0x74>)
 800114e:	f7ff fba1 	bl	8000894 <os_mutex_signal>

	while(1)
	{
		os_sem_wait(&w);
 8001152:	4815      	ldr	r0, [pc, #84]	; (80011a8 <producer+0x7c>)
 8001154:	f7ff fbbe 	bl	80008d4 <os_sem_wait>
		os_mutex_wait(&m);
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <producer+0x74>)
 800115a:	f7ff fb81 	bl	8000860 <os_mutex_wait>
		glo_val++;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <producer+0x80>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <producer+0x80>)
 8001166:	6013      	str	r3, [r2, #0]
		os_enqueue(&q,glo_val);
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <producer+0x80>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <producer+0x84>)
 8001170:	f7ff fbf5 	bl	800095e <os_enqueue>
		printf("New value enqueued by Producer %ld: %ld\r\n",producer_id, glo_val);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <producer+0x80>)
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <producer+0x88>)
 800117e:	f000 fa5d 	bl	800163c <iprintf>
		os_mutex_signal(&m);
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <producer+0x74>)
 8001184:	f7ff fb86 	bl	8000894 <os_mutex_signal>
		os_sem_signal(&r);
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <producer+0x8c>)
 800118a:	f7ff fbbf 	bl	800090c <os_sem_signal>

		delay(sleep_count_producer[producer_id-1]);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <producer+0x90>)
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f851 	bl	8001240 <delay>
		os_sem_wait(&w);
 800119e:	e7d8      	b.n	8001152 <producer+0x26>
 80011a0:	200000d0 	.word	0x200000d0
 80011a4:	200000e0 	.word	0x200000e0
 80011a8:	200000c0 	.word	0x200000c0
 80011ac:	200000bc 	.word	0x200000bc
 80011b0:	200000d4 	.word	0x200000d4
 80011b4:	080024a4 	.word	0x080024a4
 80011b8:	200000c8 	.word	0x200000c8
 80011bc:	20000000 	.word	0x20000000

080011c0 <consumer>:
	}
}

static void consumer(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	uint32_t volatile consumer_id;
	uint32_t queue_value;

	os_mutex_wait(&m);
 80011c6:	4817      	ldr	r0, [pc, #92]	; (8001224 <consumer+0x64>)
 80011c8:	f7ff fb4a 	bl	8000860 <os_mutex_wait>
	consumer_id = ++consumer_count;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <consumer+0x68>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <consumer+0x68>)
 80011d8:	4611      	mov	r1, r2
 80011da:	7019      	strb	r1, [r3, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	603b      	str	r3, [r7, #0]
	os_mutex_signal(&m);
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <consumer+0x64>)
 80011e2:	f7ff fb57 	bl	8000894 <os_mutex_signal>

	while(1)
	{
		os_sem_wait(&r);
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <consumer+0x6c>)
 80011e8:	f7ff fb74 	bl	80008d4 <os_sem_wait>
		os_mutex_wait(&m);
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <consumer+0x64>)
 80011ee:	f7ff fb37 	bl	8000860 <os_mutex_wait>
		queue_value = os_dequeue(&q);
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <consumer+0x70>)
 80011f4:	f7ff fbed 	bl	80009d2 <os_dequeue>
 80011f8:	6078      	str	r0, [r7, #4]
		printf("New value dequeued by Consumer %ld: %ld\r\n",consumer_id,queue_value);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <consumer+0x74>)
 8001202:	f000 fa1b 	bl	800163c <iprintf>
		os_mutex_signal(&m);
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <consumer+0x64>)
 8001208:	f7ff fb44 	bl	8000894 <os_mutex_signal>
		os_sem_signal(&w);
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <consumer+0x78>)
 800120e:	f7ff fb7d 	bl	800090c <os_sem_signal>

		delay(sleep_count_consumer[consumer_id-1]);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <consumer+0x7c>)
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f80f 	bl	8001240 <delay>
		os_sem_wait(&r);
 8001222:	e7e0      	b.n	80011e6 <consumer+0x26>
 8001224:	200000d0 	.word	0x200000d0
 8001228:	200000e1 	.word	0x200000e1
 800122c:	200000c8 	.word	0x200000c8
 8001230:	200000d4 	.word	0x200000d4
 8001234:	080024d0 	.word	0x080024d0
 8001238:	200000c0 	.word	0x200000c0
 800123c:	20000008 	.word	0x20000008

08001240 <delay>:
	}
}

static void delay(uint32_t count)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	uint32_t j;
	for(j=0;j<count;j++);
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e002      	b.n	8001254 <delay+0x14>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3f8      	bcc.n	800124e <delay+0xe>
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e00a      	b.n	8001290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127a:	f3af 8000 	nop.w
 800127e:	4601      	mov	r1, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	b2ca      	uxtb	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf0      	blt.n	800127a <_read+0x12>
  }

  return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e009      	b.n	80012c8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f845 	bl	800034c <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf1      	blt.n	80012b4 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_close>:

int _close(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001300:	605a      	str	r2, [r3, #4]
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f000 f846 	bl	80013fc <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200000e4 	.word	0x200000e4
 80013a4:	200000f8 	.word	0x200000f8

080013a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d6:	f000 f817 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fe65 	bl	80010a8 <main>

080013de <LoopForever>:

LoopForever:
  b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013ec:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80013f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013f4:	200000f8 	.word	0x200000f8

080013f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <__errno>:
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__errno+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000014 	.word	0x20000014

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4d0d      	ldr	r5, [pc, #52]	; (8001440 <__libc_init_array+0x38>)
 800140c:	4c0d      	ldr	r4, [pc, #52]	; (8001444 <__libc_init_array+0x3c>)
 800140e:	1b64      	subs	r4, r4, r5
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	2600      	movs	r6, #0
 8001414:	42a6      	cmp	r6, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	4d0b      	ldr	r5, [pc, #44]	; (8001448 <__libc_init_array+0x40>)
 800141a:	4c0c      	ldr	r4, [pc, #48]	; (800144c <__libc_init_array+0x44>)
 800141c:	f001 f82c 	bl	8002478 <_init>
 8001420:	1b64      	subs	r4, r4, r5
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	2600      	movs	r6, #0
 8001426:	42a6      	cmp	r6, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001430:	4798      	blx	r3
 8001432:	3601      	adds	r6, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f855 3b04 	ldr.w	r3, [r5], #4
 800143a:	4798      	blx	r3
 800143c:	3601      	adds	r6, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	08002594 	.word	0x08002594
 8001444:	08002594 	.word	0x08002594
 8001448:	08002594 	.word	0x08002594
 800144c:	08002598 	.word	0x08002598

08001450 <malloc>:
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <malloc+0xc>)
 8001452:	4601      	mov	r1, r0
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f000 b87d 	b.w	8001554 <_malloc_r>
 800145a:	bf00      	nop
 800145c:	20000014 	.word	0x20000014

08001460 <free>:
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <free+0xc>)
 8001462:	4601      	mov	r1, r0
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f000 b80b 	b.w	8001480 <_free_r>
 800146a:	bf00      	nop
 800146c:	20000014 	.word	0x20000014

08001470 <memset>:
 8001470:	4402      	add	r2, r0
 8001472:	4603      	mov	r3, r0
 8001474:	4293      	cmp	r3, r2
 8001476:	d100      	bne.n	800147a <memset+0xa>
 8001478:	4770      	bx	lr
 800147a:	f803 1b01 	strb.w	r1, [r3], #1
 800147e:	e7f9      	b.n	8001474 <memset+0x4>

08001480 <_free_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4605      	mov	r5, r0
 8001484:	2900      	cmp	r1, #0
 8001486:	d041      	beq.n	800150c <_free_r+0x8c>
 8001488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800148c:	1f0c      	subs	r4, r1, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	bfb8      	it	lt
 8001492:	18e4      	addlt	r4, r4, r3
 8001494:	f000 fc4c 	bl	8001d30 <__malloc_lock>
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <_free_r+0x90>)
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	b933      	cbnz	r3, 80014ac <_free_r+0x2c>
 800149e:	6063      	str	r3, [r4, #4]
 80014a0:	6014      	str	r4, [r2, #0]
 80014a2:	4628      	mov	r0, r5
 80014a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014a8:	f000 bc48 	b.w	8001d3c <__malloc_unlock>
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d908      	bls.n	80014c2 <_free_r+0x42>
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	1821      	adds	r1, r4, r0
 80014b4:	428b      	cmp	r3, r1
 80014b6:	bf01      	itttt	eq
 80014b8:	6819      	ldreq	r1, [r3, #0]
 80014ba:	685b      	ldreq	r3, [r3, #4]
 80014bc:	1809      	addeq	r1, r1, r0
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	e7ed      	b.n	800149e <_free_r+0x1e>
 80014c2:	461a      	mov	r2, r3
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b10b      	cbz	r3, 80014cc <_free_r+0x4c>
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	d9fa      	bls.n	80014c2 <_free_r+0x42>
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	1850      	adds	r0, r2, r1
 80014d0:	42a0      	cmp	r0, r4
 80014d2:	d10b      	bne.n	80014ec <_free_r+0x6c>
 80014d4:	6820      	ldr	r0, [r4, #0]
 80014d6:	4401      	add	r1, r0
 80014d8:	1850      	adds	r0, r2, r1
 80014da:	4283      	cmp	r3, r0
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	d1e0      	bne.n	80014a2 <_free_r+0x22>
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4401      	add	r1, r0
 80014e8:	6011      	str	r1, [r2, #0]
 80014ea:	e7da      	b.n	80014a2 <_free_r+0x22>
 80014ec:	d902      	bls.n	80014f4 <_free_r+0x74>
 80014ee:	230c      	movs	r3, #12
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	e7d6      	b.n	80014a2 <_free_r+0x22>
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	1821      	adds	r1, r4, r0
 80014f8:	428b      	cmp	r3, r1
 80014fa:	bf04      	itt	eq
 80014fc:	6819      	ldreq	r1, [r3, #0]
 80014fe:	685b      	ldreq	r3, [r3, #4]
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	bf04      	itt	eq
 8001504:	1809      	addeq	r1, r1, r0
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	6054      	str	r4, [r2, #4]
 800150a:	e7ca      	b.n	80014a2 <_free_r+0x22>
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200000e8 	.word	0x200000e8

08001514 <sbrk_aligned>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4e0e      	ldr	r6, [pc, #56]	; (8001550 <sbrk_aligned+0x3c>)
 8001518:	460c      	mov	r4, r1
 800151a:	6831      	ldr	r1, [r6, #0]
 800151c:	4605      	mov	r5, r0
 800151e:	b911      	cbnz	r1, 8001526 <sbrk_aligned+0x12>
 8001520:	f000 f91a 	bl	8001758 <_sbrk_r>
 8001524:	6030      	str	r0, [r6, #0]
 8001526:	4621      	mov	r1, r4
 8001528:	4628      	mov	r0, r5
 800152a:	f000 f915 	bl	8001758 <_sbrk_r>
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	d00a      	beq.n	8001548 <sbrk_aligned+0x34>
 8001532:	1cc4      	adds	r4, r0, #3
 8001534:	f024 0403 	bic.w	r4, r4, #3
 8001538:	42a0      	cmp	r0, r4
 800153a:	d007      	beq.n	800154c <sbrk_aligned+0x38>
 800153c:	1a21      	subs	r1, r4, r0
 800153e:	4628      	mov	r0, r5
 8001540:	f000 f90a 	bl	8001758 <_sbrk_r>
 8001544:	3001      	adds	r0, #1
 8001546:	d101      	bne.n	800154c <sbrk_aligned+0x38>
 8001548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800154c:	4620      	mov	r0, r4
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	200000ec 	.word	0x200000ec

08001554 <_malloc_r>:
 8001554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001558:	1ccd      	adds	r5, r1, #3
 800155a:	f025 0503 	bic.w	r5, r5, #3
 800155e:	3508      	adds	r5, #8
 8001560:	2d0c      	cmp	r5, #12
 8001562:	bf38      	it	cc
 8001564:	250c      	movcc	r5, #12
 8001566:	2d00      	cmp	r5, #0
 8001568:	4607      	mov	r7, r0
 800156a:	db01      	blt.n	8001570 <_malloc_r+0x1c>
 800156c:	42a9      	cmp	r1, r5
 800156e:	d905      	bls.n	800157c <_malloc_r+0x28>
 8001570:	230c      	movs	r3, #12
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	2600      	movs	r6, #0
 8001576:	4630      	mov	r0, r6
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800157c:	4e2e      	ldr	r6, [pc, #184]	; (8001638 <_malloc_r+0xe4>)
 800157e:	f000 fbd7 	bl	8001d30 <__malloc_lock>
 8001582:	6833      	ldr	r3, [r6, #0]
 8001584:	461c      	mov	r4, r3
 8001586:	bb34      	cbnz	r4, 80015d6 <_malloc_r+0x82>
 8001588:	4629      	mov	r1, r5
 800158a:	4638      	mov	r0, r7
 800158c:	f7ff ffc2 	bl	8001514 <sbrk_aligned>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	4604      	mov	r4, r0
 8001594:	d14d      	bne.n	8001632 <_malloc_r+0xde>
 8001596:	6834      	ldr	r4, [r6, #0]
 8001598:	4626      	mov	r6, r4
 800159a:	2e00      	cmp	r6, #0
 800159c:	d140      	bne.n	8001620 <_malloc_r+0xcc>
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	4631      	mov	r1, r6
 80015a2:	4638      	mov	r0, r7
 80015a4:	eb04 0803 	add.w	r8, r4, r3
 80015a8:	f000 f8d6 	bl	8001758 <_sbrk_r>
 80015ac:	4580      	cmp	r8, r0
 80015ae:	d13a      	bne.n	8001626 <_malloc_r+0xd2>
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	3503      	adds	r5, #3
 80015b4:	1a6d      	subs	r5, r5, r1
 80015b6:	f025 0503 	bic.w	r5, r5, #3
 80015ba:	3508      	adds	r5, #8
 80015bc:	2d0c      	cmp	r5, #12
 80015be:	bf38      	it	cc
 80015c0:	250c      	movcc	r5, #12
 80015c2:	4629      	mov	r1, r5
 80015c4:	4638      	mov	r0, r7
 80015c6:	f7ff ffa5 	bl	8001514 <sbrk_aligned>
 80015ca:	3001      	adds	r0, #1
 80015cc:	d02b      	beq.n	8001626 <_malloc_r+0xd2>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	442b      	add	r3, r5
 80015d2:	6023      	str	r3, [r4, #0]
 80015d4:	e00e      	b.n	80015f4 <_malloc_r+0xa0>
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	1b52      	subs	r2, r2, r5
 80015da:	d41e      	bmi.n	800161a <_malloc_r+0xc6>
 80015dc:	2a0b      	cmp	r2, #11
 80015de:	d916      	bls.n	800160e <_malloc_r+0xba>
 80015e0:	1961      	adds	r1, r4, r5
 80015e2:	42a3      	cmp	r3, r4
 80015e4:	6025      	str	r5, [r4, #0]
 80015e6:	bf18      	it	ne
 80015e8:	6059      	strne	r1, [r3, #4]
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	bf08      	it	eq
 80015ee:	6031      	streq	r1, [r6, #0]
 80015f0:	5162      	str	r2, [r4, r5]
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	4638      	mov	r0, r7
 80015f6:	f104 060b 	add.w	r6, r4, #11
 80015fa:	f000 fb9f 	bl	8001d3c <__malloc_unlock>
 80015fe:	f026 0607 	bic.w	r6, r6, #7
 8001602:	1d23      	adds	r3, r4, #4
 8001604:	1af2      	subs	r2, r6, r3
 8001606:	d0b6      	beq.n	8001576 <_malloc_r+0x22>
 8001608:	1b9b      	subs	r3, r3, r6
 800160a:	50a3      	str	r3, [r4, r2]
 800160c:	e7b3      	b.n	8001576 <_malloc_r+0x22>
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	42a3      	cmp	r3, r4
 8001612:	bf0c      	ite	eq
 8001614:	6032      	streq	r2, [r6, #0]
 8001616:	605a      	strne	r2, [r3, #4]
 8001618:	e7ec      	b.n	80015f4 <_malloc_r+0xa0>
 800161a:	4623      	mov	r3, r4
 800161c:	6864      	ldr	r4, [r4, #4]
 800161e:	e7b2      	b.n	8001586 <_malloc_r+0x32>
 8001620:	4634      	mov	r4, r6
 8001622:	6876      	ldr	r6, [r6, #4]
 8001624:	e7b9      	b.n	800159a <_malloc_r+0x46>
 8001626:	230c      	movs	r3, #12
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4638      	mov	r0, r7
 800162c:	f000 fb86 	bl	8001d3c <__malloc_unlock>
 8001630:	e7a1      	b.n	8001576 <_malloc_r+0x22>
 8001632:	6025      	str	r5, [r4, #0]
 8001634:	e7de      	b.n	80015f4 <_malloc_r+0xa0>
 8001636:	bf00      	nop
 8001638:	200000e8 	.word	0x200000e8

0800163c <iprintf>:
 800163c:	b40f      	push	{r0, r1, r2, r3}
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <iprintf+0x2c>)
 8001640:	b513      	push	{r0, r1, r4, lr}
 8001642:	681c      	ldr	r4, [r3, #0]
 8001644:	b124      	cbz	r4, 8001650 <iprintf+0x14>
 8001646:	69a3      	ldr	r3, [r4, #24]
 8001648:	b913      	cbnz	r3, 8001650 <iprintf+0x14>
 800164a:	4620      	mov	r0, r4
 800164c:	f000 fa6a 	bl	8001b24 <__sinit>
 8001650:	ab05      	add	r3, sp, #20
 8001652:	9a04      	ldr	r2, [sp, #16]
 8001654:	68a1      	ldr	r1, [r4, #8]
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	4620      	mov	r0, r4
 800165a:	f000 fb9d 	bl	8001d98 <_vfiprintf_r>
 800165e:	b002      	add	sp, #8
 8001660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001664:	b004      	add	sp, #16
 8001666:	4770      	bx	lr
 8001668:	20000014 	.word	0x20000014

0800166c <_puts_r>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	460e      	mov	r6, r1
 8001670:	4605      	mov	r5, r0
 8001672:	b118      	cbz	r0, 800167c <_puts_r+0x10>
 8001674:	6983      	ldr	r3, [r0, #24]
 8001676:	b90b      	cbnz	r3, 800167c <_puts_r+0x10>
 8001678:	f000 fa54 	bl	8001b24 <__sinit>
 800167c:	69ab      	ldr	r3, [r5, #24]
 800167e:	68ac      	ldr	r4, [r5, #8]
 8001680:	b913      	cbnz	r3, 8001688 <_puts_r+0x1c>
 8001682:	4628      	mov	r0, r5
 8001684:	f000 fa4e 	bl	8001b24 <__sinit>
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <_puts_r+0xd0>)
 800168a:	429c      	cmp	r4, r3
 800168c:	d120      	bne.n	80016d0 <_puts_r+0x64>
 800168e:	686c      	ldr	r4, [r5, #4]
 8001690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001692:	07db      	lsls	r3, r3, #31
 8001694:	d405      	bmi.n	80016a2 <_puts_r+0x36>
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	0598      	lsls	r0, r3, #22
 800169a:	d402      	bmi.n	80016a2 <_puts_r+0x36>
 800169c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800169e:	f000 fadf 	bl	8001c60 <__retarget_lock_acquire_recursive>
 80016a2:	89a3      	ldrh	r3, [r4, #12]
 80016a4:	0719      	lsls	r1, r3, #28
 80016a6:	d51d      	bpl.n	80016e4 <_puts_r+0x78>
 80016a8:	6923      	ldr	r3, [r4, #16]
 80016aa:	b1db      	cbz	r3, 80016e4 <_puts_r+0x78>
 80016ac:	3e01      	subs	r6, #1
 80016ae:	68a3      	ldr	r3, [r4, #8]
 80016b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60a3      	str	r3, [r4, #8]
 80016b8:	bb39      	cbnz	r1, 800170a <_puts_r+0x9e>
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da38      	bge.n	8001730 <_puts_r+0xc4>
 80016be:	4622      	mov	r2, r4
 80016c0:	210a      	movs	r1, #10
 80016c2:	4628      	mov	r0, r5
 80016c4:	f000 f858 	bl	8001778 <__swbuf_r>
 80016c8:	3001      	adds	r0, #1
 80016ca:	d011      	beq.n	80016f0 <_puts_r+0x84>
 80016cc:	250a      	movs	r5, #10
 80016ce:	e011      	b.n	80016f4 <_puts_r+0x88>
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <_puts_r+0xd4>)
 80016d2:	429c      	cmp	r4, r3
 80016d4:	d101      	bne.n	80016da <_puts_r+0x6e>
 80016d6:	68ac      	ldr	r4, [r5, #8]
 80016d8:	e7da      	b.n	8001690 <_puts_r+0x24>
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <_puts_r+0xd8>)
 80016dc:	429c      	cmp	r4, r3
 80016de:	bf08      	it	eq
 80016e0:	68ec      	ldreq	r4, [r5, #12]
 80016e2:	e7d5      	b.n	8001690 <_puts_r+0x24>
 80016e4:	4621      	mov	r1, r4
 80016e6:	4628      	mov	r0, r5
 80016e8:	f000 f898 	bl	800181c <__swsetup_r>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0dd      	beq.n	80016ac <_puts_r+0x40>
 80016f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80016f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f6:	07da      	lsls	r2, r3, #31
 80016f8:	d405      	bmi.n	8001706 <_puts_r+0x9a>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	059b      	lsls	r3, r3, #22
 80016fe:	d402      	bmi.n	8001706 <_puts_r+0x9a>
 8001700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001702:	f000 faae 	bl	8001c62 <__retarget_lock_release_recursive>
 8001706:	4628      	mov	r0, r5
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	2b00      	cmp	r3, #0
 800170c:	da04      	bge.n	8001718 <_puts_r+0xac>
 800170e:	69a2      	ldr	r2, [r4, #24]
 8001710:	429a      	cmp	r2, r3
 8001712:	dc06      	bgt.n	8001722 <_puts_r+0xb6>
 8001714:	290a      	cmp	r1, #10
 8001716:	d004      	beq.n	8001722 <_puts_r+0xb6>
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	6022      	str	r2, [r4, #0]
 800171e:	7019      	strb	r1, [r3, #0]
 8001720:	e7c5      	b.n	80016ae <_puts_r+0x42>
 8001722:	4622      	mov	r2, r4
 8001724:	4628      	mov	r0, r5
 8001726:	f000 f827 	bl	8001778 <__swbuf_r>
 800172a:	3001      	adds	r0, #1
 800172c:	d1bf      	bne.n	80016ae <_puts_r+0x42>
 800172e:	e7df      	b.n	80016f0 <_puts_r+0x84>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	250a      	movs	r5, #10
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	6022      	str	r2, [r4, #0]
 8001738:	701d      	strb	r5, [r3, #0]
 800173a:	e7db      	b.n	80016f4 <_puts_r+0x88>
 800173c:	08002520 	.word	0x08002520
 8001740:	08002540 	.word	0x08002540
 8001744:	08002500 	.word	0x08002500

08001748 <puts>:
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <puts+0xc>)
 800174a:	4601      	mov	r1, r0
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f7ff bf8d 	b.w	800166c <_puts_r>
 8001752:	bf00      	nop
 8001754:	20000014 	.word	0x20000014

08001758 <_sbrk_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4d06      	ldr	r5, [pc, #24]	; (8001774 <_sbrk_r+0x1c>)
 800175c:	2300      	movs	r3, #0
 800175e:	4604      	mov	r4, r0
 8001760:	4608      	mov	r0, r1
 8001762:	602b      	str	r3, [r5, #0]
 8001764:	f7ff fdea 	bl	800133c <_sbrk>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_sbrk_r+0x1a>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	b103      	cbz	r3, 8001772 <_sbrk_r+0x1a>
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	200000f4 	.word	0x200000f4

08001778 <__swbuf_r>:
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	460e      	mov	r6, r1
 800177c:	4614      	mov	r4, r2
 800177e:	4605      	mov	r5, r0
 8001780:	b118      	cbz	r0, 800178a <__swbuf_r+0x12>
 8001782:	6983      	ldr	r3, [r0, #24]
 8001784:	b90b      	cbnz	r3, 800178a <__swbuf_r+0x12>
 8001786:	f000 f9cd 	bl	8001b24 <__sinit>
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <__swbuf_r+0x98>)
 800178c:	429c      	cmp	r4, r3
 800178e:	d12b      	bne.n	80017e8 <__swbuf_r+0x70>
 8001790:	686c      	ldr	r4, [r5, #4]
 8001792:	69a3      	ldr	r3, [r4, #24]
 8001794:	60a3      	str	r3, [r4, #8]
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	071a      	lsls	r2, r3, #28
 800179a:	d52f      	bpl.n	80017fc <__swbuf_r+0x84>
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	b36b      	cbz	r3, 80017fc <__swbuf_r+0x84>
 80017a0:	6923      	ldr	r3, [r4, #16]
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	1ac0      	subs	r0, r0, r3
 80017a6:	6963      	ldr	r3, [r4, #20]
 80017a8:	b2f6      	uxtb	r6, r6
 80017aa:	4283      	cmp	r3, r0
 80017ac:	4637      	mov	r7, r6
 80017ae:	dc04      	bgt.n	80017ba <__swbuf_r+0x42>
 80017b0:	4621      	mov	r1, r4
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 f922 	bl	80019fc <_fflush_r>
 80017b8:	bb30      	cbnz	r0, 8001808 <__swbuf_r+0x90>
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60a3      	str	r3, [r4, #8]
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	6022      	str	r2, [r4, #0]
 80017c6:	701e      	strb	r6, [r3, #0]
 80017c8:	6963      	ldr	r3, [r4, #20]
 80017ca:	3001      	adds	r0, #1
 80017cc:	4283      	cmp	r3, r0
 80017ce:	d004      	beq.n	80017da <__swbuf_r+0x62>
 80017d0:	89a3      	ldrh	r3, [r4, #12]
 80017d2:	07db      	lsls	r3, r3, #31
 80017d4:	d506      	bpl.n	80017e4 <__swbuf_r+0x6c>
 80017d6:	2e0a      	cmp	r6, #10
 80017d8:	d104      	bne.n	80017e4 <__swbuf_r+0x6c>
 80017da:	4621      	mov	r1, r4
 80017dc:	4628      	mov	r0, r5
 80017de:	f000 f90d 	bl	80019fc <_fflush_r>
 80017e2:	b988      	cbnz	r0, 8001808 <__swbuf_r+0x90>
 80017e4:	4638      	mov	r0, r7
 80017e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <__swbuf_r+0x9c>)
 80017ea:	429c      	cmp	r4, r3
 80017ec:	d101      	bne.n	80017f2 <__swbuf_r+0x7a>
 80017ee:	68ac      	ldr	r4, [r5, #8]
 80017f0:	e7cf      	b.n	8001792 <__swbuf_r+0x1a>
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <__swbuf_r+0xa0>)
 80017f4:	429c      	cmp	r4, r3
 80017f6:	bf08      	it	eq
 80017f8:	68ec      	ldreq	r4, [r5, #12]
 80017fa:	e7ca      	b.n	8001792 <__swbuf_r+0x1a>
 80017fc:	4621      	mov	r1, r4
 80017fe:	4628      	mov	r0, r5
 8001800:	f000 f80c 	bl	800181c <__swsetup_r>
 8001804:	2800      	cmp	r0, #0
 8001806:	d0cb      	beq.n	80017a0 <__swbuf_r+0x28>
 8001808:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800180c:	e7ea      	b.n	80017e4 <__swbuf_r+0x6c>
 800180e:	bf00      	nop
 8001810:	08002520 	.word	0x08002520
 8001814:	08002540 	.word	0x08002540
 8001818:	08002500 	.word	0x08002500

0800181c <__swsetup_r>:
 800181c:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <__swsetup_r+0xcc>)
 800181e:	b570      	push	{r4, r5, r6, lr}
 8001820:	681d      	ldr	r5, [r3, #0]
 8001822:	4606      	mov	r6, r0
 8001824:	460c      	mov	r4, r1
 8001826:	b125      	cbz	r5, 8001832 <__swsetup_r+0x16>
 8001828:	69ab      	ldr	r3, [r5, #24]
 800182a:	b913      	cbnz	r3, 8001832 <__swsetup_r+0x16>
 800182c:	4628      	mov	r0, r5
 800182e:	f000 f979 	bl	8001b24 <__sinit>
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <__swsetup_r+0xd0>)
 8001834:	429c      	cmp	r4, r3
 8001836:	d10f      	bne.n	8001858 <__swsetup_r+0x3c>
 8001838:	686c      	ldr	r4, [r5, #4]
 800183a:	89a3      	ldrh	r3, [r4, #12]
 800183c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001840:	0719      	lsls	r1, r3, #28
 8001842:	d42c      	bmi.n	800189e <__swsetup_r+0x82>
 8001844:	06dd      	lsls	r5, r3, #27
 8001846:	d411      	bmi.n	800186c <__swsetup_r+0x50>
 8001848:	2309      	movs	r3, #9
 800184a:	6033      	str	r3, [r6, #0]
 800184c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001850:	81a3      	strh	r3, [r4, #12]
 8001852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001856:	e03e      	b.n	80018d6 <__swsetup_r+0xba>
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <__swsetup_r+0xd4>)
 800185a:	429c      	cmp	r4, r3
 800185c:	d101      	bne.n	8001862 <__swsetup_r+0x46>
 800185e:	68ac      	ldr	r4, [r5, #8]
 8001860:	e7eb      	b.n	800183a <__swsetup_r+0x1e>
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <__swsetup_r+0xd8>)
 8001864:	429c      	cmp	r4, r3
 8001866:	bf08      	it	eq
 8001868:	68ec      	ldreq	r4, [r5, #12]
 800186a:	e7e6      	b.n	800183a <__swsetup_r+0x1e>
 800186c:	0758      	lsls	r0, r3, #29
 800186e:	d512      	bpl.n	8001896 <__swsetup_r+0x7a>
 8001870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001872:	b141      	cbz	r1, 8001886 <__swsetup_r+0x6a>
 8001874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001878:	4299      	cmp	r1, r3
 800187a:	d002      	beq.n	8001882 <__swsetup_r+0x66>
 800187c:	4630      	mov	r0, r6
 800187e:	f7ff fdff 	bl	8001480 <_free_r>
 8001882:	2300      	movs	r3, #0
 8001884:	6363      	str	r3, [r4, #52]	; 0x34
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	6063      	str	r3, [r4, #4]
 8001892:	6923      	ldr	r3, [r4, #16]
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	81a3      	strh	r3, [r4, #12]
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	b94b      	cbnz	r3, 80018b6 <__swsetup_r+0x9a>
 80018a2:	89a3      	ldrh	r3, [r4, #12]
 80018a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ac:	d003      	beq.n	80018b6 <__swsetup_r+0x9a>
 80018ae:	4621      	mov	r1, r4
 80018b0:	4630      	mov	r0, r6
 80018b2:	f000 f9fd 	bl	8001cb0 <__smakebuf_r>
 80018b6:	89a0      	ldrh	r0, [r4, #12]
 80018b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018bc:	f010 0301 	ands.w	r3, r0, #1
 80018c0:	d00a      	beq.n	80018d8 <__swsetup_r+0xbc>
 80018c2:	2300      	movs	r3, #0
 80018c4:	60a3      	str	r3, [r4, #8]
 80018c6:	6963      	ldr	r3, [r4, #20]
 80018c8:	425b      	negs	r3, r3
 80018ca:	61a3      	str	r3, [r4, #24]
 80018cc:	6923      	ldr	r3, [r4, #16]
 80018ce:	b943      	cbnz	r3, 80018e2 <__swsetup_r+0xc6>
 80018d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018d4:	d1ba      	bne.n	800184c <__swsetup_r+0x30>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	0781      	lsls	r1, r0, #30
 80018da:	bf58      	it	pl
 80018dc:	6963      	ldrpl	r3, [r4, #20]
 80018de:	60a3      	str	r3, [r4, #8]
 80018e0:	e7f4      	b.n	80018cc <__swsetup_r+0xb0>
 80018e2:	2000      	movs	r0, #0
 80018e4:	e7f7      	b.n	80018d6 <__swsetup_r+0xba>
 80018e6:	bf00      	nop
 80018e8:	20000014 	.word	0x20000014
 80018ec:	08002520 	.word	0x08002520
 80018f0:	08002540 	.word	0x08002540
 80018f4:	08002500 	.word	0x08002500

080018f8 <__sflush_r>:
 80018f8:	898a      	ldrh	r2, [r1, #12]
 80018fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fc:	4605      	mov	r5, r0
 80018fe:	0710      	lsls	r0, r2, #28
 8001900:	460c      	mov	r4, r1
 8001902:	d457      	bmi.n	80019b4 <__sflush_r+0xbc>
 8001904:	684b      	ldr	r3, [r1, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc04      	bgt.n	8001914 <__sflush_r+0x1c>
 800190a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	dc01      	bgt.n	8001914 <__sflush_r+0x1c>
 8001910:	2000      	movs	r0, #0
 8001912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001916:	2e00      	cmp	r6, #0
 8001918:	d0fa      	beq.n	8001910 <__sflush_r+0x18>
 800191a:	2300      	movs	r3, #0
 800191c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001920:	682f      	ldr	r7, [r5, #0]
 8001922:	602b      	str	r3, [r5, #0]
 8001924:	d032      	beq.n	800198c <__sflush_r+0x94>
 8001926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	075a      	lsls	r2, r3, #29
 800192c:	d505      	bpl.n	800193a <__sflush_r+0x42>
 800192e:	6863      	ldr	r3, [r4, #4]
 8001930:	1ac0      	subs	r0, r0, r3
 8001932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001934:	b10b      	cbz	r3, 800193a <__sflush_r+0x42>
 8001936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001938:	1ac0      	subs	r0, r0, r3
 800193a:	2300      	movs	r3, #0
 800193c:	4602      	mov	r2, r0
 800193e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001940:	6a21      	ldr	r1, [r4, #32]
 8001942:	4628      	mov	r0, r5
 8001944:	47b0      	blx	r6
 8001946:	1c43      	adds	r3, r0, #1
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	d106      	bne.n	800195a <__sflush_r+0x62>
 800194c:	6829      	ldr	r1, [r5, #0]
 800194e:	291d      	cmp	r1, #29
 8001950:	d82c      	bhi.n	80019ac <__sflush_r+0xb4>
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <__sflush_r+0x100>)
 8001954:	40ca      	lsrs	r2, r1
 8001956:	07d6      	lsls	r6, r2, #31
 8001958:	d528      	bpl.n	80019ac <__sflush_r+0xb4>
 800195a:	2200      	movs	r2, #0
 800195c:	6062      	str	r2, [r4, #4]
 800195e:	04d9      	lsls	r1, r3, #19
 8001960:	6922      	ldr	r2, [r4, #16]
 8001962:	6022      	str	r2, [r4, #0]
 8001964:	d504      	bpl.n	8001970 <__sflush_r+0x78>
 8001966:	1c42      	adds	r2, r0, #1
 8001968:	d101      	bne.n	800196e <__sflush_r+0x76>
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	b903      	cbnz	r3, 8001970 <__sflush_r+0x78>
 800196e:	6560      	str	r0, [r4, #84]	; 0x54
 8001970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001972:	602f      	str	r7, [r5, #0]
 8001974:	2900      	cmp	r1, #0
 8001976:	d0cb      	beq.n	8001910 <__sflush_r+0x18>
 8001978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800197c:	4299      	cmp	r1, r3
 800197e:	d002      	beq.n	8001986 <__sflush_r+0x8e>
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff fd7d 	bl	8001480 <_free_r>
 8001986:	2000      	movs	r0, #0
 8001988:	6360      	str	r0, [r4, #52]	; 0x34
 800198a:	e7c2      	b.n	8001912 <__sflush_r+0x1a>
 800198c:	6a21      	ldr	r1, [r4, #32]
 800198e:	2301      	movs	r3, #1
 8001990:	4628      	mov	r0, r5
 8001992:	47b0      	blx	r6
 8001994:	1c41      	adds	r1, r0, #1
 8001996:	d1c7      	bne.n	8001928 <__sflush_r+0x30>
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0c4      	beq.n	8001928 <__sflush_r+0x30>
 800199e:	2b1d      	cmp	r3, #29
 80019a0:	d001      	beq.n	80019a6 <__sflush_r+0xae>
 80019a2:	2b16      	cmp	r3, #22
 80019a4:	d101      	bne.n	80019aa <__sflush_r+0xb2>
 80019a6:	602f      	str	r7, [r5, #0]
 80019a8:	e7b2      	b.n	8001910 <__sflush_r+0x18>
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b0:	81a3      	strh	r3, [r4, #12]
 80019b2:	e7ae      	b.n	8001912 <__sflush_r+0x1a>
 80019b4:	690f      	ldr	r7, [r1, #16]
 80019b6:	2f00      	cmp	r7, #0
 80019b8:	d0aa      	beq.n	8001910 <__sflush_r+0x18>
 80019ba:	0793      	lsls	r3, r2, #30
 80019bc:	680e      	ldr	r6, [r1, #0]
 80019be:	bf08      	it	eq
 80019c0:	694b      	ldreq	r3, [r1, #20]
 80019c2:	600f      	str	r7, [r1, #0]
 80019c4:	bf18      	it	ne
 80019c6:	2300      	movne	r3, #0
 80019c8:	1bf6      	subs	r6, r6, r7
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	2e00      	cmp	r6, #0
 80019ce:	dd9f      	ble.n	8001910 <__sflush_r+0x18>
 80019d0:	6a21      	ldr	r1, [r4, #32]
 80019d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80019d6:	4633      	mov	r3, r6
 80019d8:	463a      	mov	r2, r7
 80019da:	4628      	mov	r0, r5
 80019dc:	47e0      	blx	ip
 80019de:	2800      	cmp	r0, #0
 80019e0:	dc06      	bgt.n	80019f0 <__sflush_r+0xf8>
 80019e2:	89a3      	ldrh	r3, [r4, #12]
 80019e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e8:	81a3      	strh	r3, [r4, #12]
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ee:	e790      	b.n	8001912 <__sflush_r+0x1a>
 80019f0:	4407      	add	r7, r0
 80019f2:	1a36      	subs	r6, r6, r0
 80019f4:	e7ea      	b.n	80019cc <__sflush_r+0xd4>
 80019f6:	bf00      	nop
 80019f8:	20400001 	.word	0x20400001

080019fc <_fflush_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	690b      	ldr	r3, [r1, #16]
 8001a00:	4605      	mov	r5, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	b913      	cbnz	r3, 8001a0c <_fflush_r+0x10>
 8001a06:	2500      	movs	r5, #0
 8001a08:	4628      	mov	r0, r5
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	b118      	cbz	r0, 8001a16 <_fflush_r+0x1a>
 8001a0e:	6983      	ldr	r3, [r0, #24]
 8001a10:	b90b      	cbnz	r3, 8001a16 <_fflush_r+0x1a>
 8001a12:	f000 f887 	bl	8001b24 <__sinit>
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <_fflush_r+0x6c>)
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d11b      	bne.n	8001a54 <_fflush_r+0x58>
 8001a1c:	686c      	ldr	r4, [r5, #4]
 8001a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0ef      	beq.n	8001a06 <_fflush_r+0xa>
 8001a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a28:	07d0      	lsls	r0, r2, #31
 8001a2a:	d404      	bmi.n	8001a36 <_fflush_r+0x3a>
 8001a2c:	0599      	lsls	r1, r3, #22
 8001a2e:	d402      	bmi.n	8001a36 <_fflush_r+0x3a>
 8001a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a32:	f000 f915 	bl	8001c60 <__retarget_lock_acquire_recursive>
 8001a36:	4628      	mov	r0, r5
 8001a38:	4621      	mov	r1, r4
 8001a3a:	f7ff ff5d 	bl	80018f8 <__sflush_r>
 8001a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a40:	07da      	lsls	r2, r3, #31
 8001a42:	4605      	mov	r5, r0
 8001a44:	d4e0      	bmi.n	8001a08 <_fflush_r+0xc>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	059b      	lsls	r3, r3, #22
 8001a4a:	d4dd      	bmi.n	8001a08 <_fflush_r+0xc>
 8001a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a4e:	f000 f908 	bl	8001c62 <__retarget_lock_release_recursive>
 8001a52:	e7d9      	b.n	8001a08 <_fflush_r+0xc>
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <_fflush_r+0x70>)
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d101      	bne.n	8001a5e <_fflush_r+0x62>
 8001a5a:	68ac      	ldr	r4, [r5, #8]
 8001a5c:	e7df      	b.n	8001a1e <_fflush_r+0x22>
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <_fflush_r+0x74>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	bf08      	it	eq
 8001a64:	68ec      	ldreq	r4, [r5, #12]
 8001a66:	e7da      	b.n	8001a1e <_fflush_r+0x22>
 8001a68:	08002520 	.word	0x08002520
 8001a6c:	08002540 	.word	0x08002540
 8001a70:	08002500 	.word	0x08002500

08001a74 <std>:
 8001a74:	2300      	movs	r3, #0
 8001a76:	b510      	push	{r4, lr}
 8001a78:	4604      	mov	r4, r0
 8001a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a82:	6083      	str	r3, [r0, #8]
 8001a84:	8181      	strh	r1, [r0, #12]
 8001a86:	6643      	str	r3, [r0, #100]	; 0x64
 8001a88:	81c2      	strh	r2, [r0, #14]
 8001a8a:	6183      	str	r3, [r0, #24]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2208      	movs	r2, #8
 8001a90:	305c      	adds	r0, #92	; 0x5c
 8001a92:	f7ff fced 	bl	8001470 <memset>
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <std+0x38>)
 8001a98:	6263      	str	r3, [r4, #36]	; 0x24
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <std+0x3c>)
 8001a9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <std+0x40>)
 8001aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <std+0x44>)
 8001aa4:	6224      	str	r4, [r4, #32]
 8001aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa8:	bd10      	pop	{r4, pc}
 8001aaa:	bf00      	nop
 8001aac:	08002321 	.word	0x08002321
 8001ab0:	08002343 	.word	0x08002343
 8001ab4:	0800237b 	.word	0x0800237b
 8001ab8:	0800239f 	.word	0x0800239f

08001abc <_cleanup_r>:
 8001abc:	4901      	ldr	r1, [pc, #4]	; (8001ac4 <_cleanup_r+0x8>)
 8001abe:	f000 b8af 	b.w	8001c20 <_fwalk_reent>
 8001ac2:	bf00      	nop
 8001ac4:	080019fd 	.word	0x080019fd

08001ac8 <__sfmoreglue>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	2268      	movs	r2, #104	; 0x68
 8001acc:	1e4d      	subs	r5, r1, #1
 8001ace:	4355      	muls	r5, r2
 8001ad0:	460e      	mov	r6, r1
 8001ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ad6:	f7ff fd3d 	bl	8001554 <_malloc_r>
 8001ada:	4604      	mov	r4, r0
 8001adc:	b140      	cbz	r0, 8001af0 <__sfmoreglue+0x28>
 8001ade:	2100      	movs	r1, #0
 8001ae0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ae4:	300c      	adds	r0, #12
 8001ae6:	60a0      	str	r0, [r4, #8]
 8001ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001aec:	f7ff fcc0 	bl	8001470 <memset>
 8001af0:	4620      	mov	r0, r4
 8001af2:	bd70      	pop	{r4, r5, r6, pc}

08001af4 <__sfp_lock_acquire>:
 8001af4:	4801      	ldr	r0, [pc, #4]	; (8001afc <__sfp_lock_acquire+0x8>)
 8001af6:	f000 b8b3 	b.w	8001c60 <__retarget_lock_acquire_recursive>
 8001afa:	bf00      	nop
 8001afc:	200000f1 	.word	0x200000f1

08001b00 <__sfp_lock_release>:
 8001b00:	4801      	ldr	r0, [pc, #4]	; (8001b08 <__sfp_lock_release+0x8>)
 8001b02:	f000 b8ae 	b.w	8001c62 <__retarget_lock_release_recursive>
 8001b06:	bf00      	nop
 8001b08:	200000f1 	.word	0x200000f1

08001b0c <__sinit_lock_acquire>:
 8001b0c:	4801      	ldr	r0, [pc, #4]	; (8001b14 <__sinit_lock_acquire+0x8>)
 8001b0e:	f000 b8a7 	b.w	8001c60 <__retarget_lock_acquire_recursive>
 8001b12:	bf00      	nop
 8001b14:	200000f2 	.word	0x200000f2

08001b18 <__sinit_lock_release>:
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <__sinit_lock_release+0x8>)
 8001b1a:	f000 b8a2 	b.w	8001c62 <__retarget_lock_release_recursive>
 8001b1e:	bf00      	nop
 8001b20:	200000f2 	.word	0x200000f2

08001b24 <__sinit>:
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	f7ff fff0 	bl	8001b0c <__sinit_lock_acquire>
 8001b2c:	69a3      	ldr	r3, [r4, #24]
 8001b2e:	b11b      	cbz	r3, 8001b38 <__sinit+0x14>
 8001b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b34:	f7ff bff0 	b.w	8001b18 <__sinit_lock_release>
 8001b38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <__sinit+0x68>)
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <__sinit+0x6c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	bf04      	itt	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	61a3      	streq	r3, [r4, #24]
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f000 f820 	bl	8001b94 <__sfp>
 8001b54:	6060      	str	r0, [r4, #4]
 8001b56:	4620      	mov	r0, r4
 8001b58:	f000 f81c 	bl	8001b94 <__sfp>
 8001b5c:	60a0      	str	r0, [r4, #8]
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f000 f818 	bl	8001b94 <__sfp>
 8001b64:	2200      	movs	r2, #0
 8001b66:	60e0      	str	r0, [r4, #12]
 8001b68:	2104      	movs	r1, #4
 8001b6a:	6860      	ldr	r0, [r4, #4]
 8001b6c:	f7ff ff82 	bl	8001a74 <std>
 8001b70:	68a0      	ldr	r0, [r4, #8]
 8001b72:	2201      	movs	r2, #1
 8001b74:	2109      	movs	r1, #9
 8001b76:	f7ff ff7d 	bl	8001a74 <std>
 8001b7a:	68e0      	ldr	r0, [r4, #12]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	2112      	movs	r1, #18
 8001b80:	f7ff ff78 	bl	8001a74 <std>
 8001b84:	2301      	movs	r3, #1
 8001b86:	61a3      	str	r3, [r4, #24]
 8001b88:	e7d2      	b.n	8001b30 <__sinit+0xc>
 8001b8a:	bf00      	nop
 8001b8c:	080024fc 	.word	0x080024fc
 8001b90:	08001abd 	.word	0x08001abd

08001b94 <__sfp>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	4607      	mov	r7, r0
 8001b98:	f7ff ffac 	bl	8001af4 <__sfp_lock_acquire>
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <__sfp+0x84>)
 8001b9e:	681e      	ldr	r6, [r3, #0]
 8001ba0:	69b3      	ldr	r3, [r6, #24]
 8001ba2:	b913      	cbnz	r3, 8001baa <__sfp+0x16>
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f7ff ffbd 	bl	8001b24 <__sinit>
 8001baa:	3648      	adds	r6, #72	; 0x48
 8001bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	d503      	bpl.n	8001bbc <__sfp+0x28>
 8001bb4:	6833      	ldr	r3, [r6, #0]
 8001bb6:	b30b      	cbz	r3, 8001bfc <__sfp+0x68>
 8001bb8:	6836      	ldr	r6, [r6, #0]
 8001bba:	e7f7      	b.n	8001bac <__sfp+0x18>
 8001bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bc0:	b9d5      	cbnz	r5, 8001bf8 <__sfp+0x64>
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <__sfp+0x88>)
 8001bc4:	60e3      	str	r3, [r4, #12]
 8001bc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001bca:	6665      	str	r5, [r4, #100]	; 0x64
 8001bcc:	f000 f847 	bl	8001c5e <__retarget_lock_init_recursive>
 8001bd0:	f7ff ff96 	bl	8001b00 <__sfp_lock_release>
 8001bd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001bd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001bdc:	6025      	str	r5, [r4, #0]
 8001bde:	61a5      	str	r5, [r4, #24]
 8001be0:	2208      	movs	r2, #8
 8001be2:	4629      	mov	r1, r5
 8001be4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001be8:	f7ff fc42 	bl	8001470 <memset>
 8001bec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001bf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf8:	3468      	adds	r4, #104	; 0x68
 8001bfa:	e7d9      	b.n	8001bb0 <__sfp+0x1c>
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4638      	mov	r0, r7
 8001c00:	f7ff ff62 	bl	8001ac8 <__sfmoreglue>
 8001c04:	4604      	mov	r4, r0
 8001c06:	6030      	str	r0, [r6, #0]
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1d5      	bne.n	8001bb8 <__sfp+0x24>
 8001c0c:	f7ff ff78 	bl	8001b00 <__sfp_lock_release>
 8001c10:	230c      	movs	r3, #12
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	e7ee      	b.n	8001bf4 <__sfp+0x60>
 8001c16:	bf00      	nop
 8001c18:	080024fc 	.word	0x080024fc
 8001c1c:	ffff0001 	.word	0xffff0001

08001c20 <_fwalk_reent>:
 8001c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c24:	4606      	mov	r6, r0
 8001c26:	4688      	mov	r8, r1
 8001c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c2c:	2700      	movs	r7, #0
 8001c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c32:	f1b9 0901 	subs.w	r9, r9, #1
 8001c36:	d505      	bpl.n	8001c44 <_fwalk_reent+0x24>
 8001c38:	6824      	ldr	r4, [r4, #0]
 8001c3a:	2c00      	cmp	r4, #0
 8001c3c:	d1f7      	bne.n	8001c2e <_fwalk_reent+0xe>
 8001c3e:	4638      	mov	r0, r7
 8001c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c44:	89ab      	ldrh	r3, [r5, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d907      	bls.n	8001c5a <_fwalk_reent+0x3a>
 8001c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	d003      	beq.n	8001c5a <_fwalk_reent+0x3a>
 8001c52:	4629      	mov	r1, r5
 8001c54:	4630      	mov	r0, r6
 8001c56:	47c0      	blx	r8
 8001c58:	4307      	orrs	r7, r0
 8001c5a:	3568      	adds	r5, #104	; 0x68
 8001c5c:	e7e9      	b.n	8001c32 <_fwalk_reent+0x12>

08001c5e <__retarget_lock_init_recursive>:
 8001c5e:	4770      	bx	lr

08001c60 <__retarget_lock_acquire_recursive>:
 8001c60:	4770      	bx	lr

08001c62 <__retarget_lock_release_recursive>:
 8001c62:	4770      	bx	lr

08001c64 <__swhatbuf_r>:
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	460e      	mov	r6, r1
 8001c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	da08      	bge.n	8001c88 <__swhatbuf_r+0x24>
 8001c76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	602a      	str	r2, [r5, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	d410      	bmi.n	8001ca4 <__swhatbuf_r+0x40>
 8001c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c86:	e00e      	b.n	8001ca6 <__swhatbuf_r+0x42>
 8001c88:	466a      	mov	r2, sp
 8001c8a:	f000 fbaf 	bl	80023ec <_fstat_r>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	dbf1      	blt.n	8001c76 <__swhatbuf_r+0x12>
 8001c92:	9a01      	ldr	r2, [sp, #4]
 8001c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c9c:	425a      	negs	r2, r3
 8001c9e:	415a      	adcs	r2, r3
 8001ca0:	602a      	str	r2, [r5, #0]
 8001ca2:	e7ee      	b.n	8001c82 <__swhatbuf_r+0x1e>
 8001ca4:	2340      	movs	r3, #64	; 0x40
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	b016      	add	sp, #88	; 0x58
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08001cb0 <__smakebuf_r>:
 8001cb0:	898b      	ldrh	r3, [r1, #12]
 8001cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cb4:	079d      	lsls	r5, r3, #30
 8001cb6:	4606      	mov	r6, r0
 8001cb8:	460c      	mov	r4, r1
 8001cba:	d507      	bpl.n	8001ccc <__smakebuf_r+0x1c>
 8001cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	6123      	str	r3, [r4, #16]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	6163      	str	r3, [r4, #20]
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	ab01      	add	r3, sp, #4
 8001cce:	466a      	mov	r2, sp
 8001cd0:	f7ff ffc8 	bl	8001c64 <__swhatbuf_r>
 8001cd4:	9900      	ldr	r1, [sp, #0]
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f7ff fc3b 	bl	8001554 <_malloc_r>
 8001cde:	b948      	cbnz	r0, 8001cf4 <__smakebuf_r+0x44>
 8001ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ce4:	059a      	lsls	r2, r3, #22
 8001ce6:	d4ef      	bmi.n	8001cc8 <__smakebuf_r+0x18>
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	81a3      	strh	r3, [r4, #12]
 8001cf2:	e7e3      	b.n	8001cbc <__smakebuf_r+0xc>
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <__smakebuf_r+0x7c>)
 8001cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	6020      	str	r0, [r4, #0]
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	81a3      	strh	r3, [r4, #12]
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	6163      	str	r3, [r4, #20]
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	6120      	str	r0, [r4, #16]
 8001d0a:	b15b      	cbz	r3, 8001d24 <__smakebuf_r+0x74>
 8001d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d10:	4630      	mov	r0, r6
 8001d12:	f000 fb7d 	bl	8002410 <_isatty_r>
 8001d16:	b128      	cbz	r0, 8001d24 <__smakebuf_r+0x74>
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	89a0      	ldrh	r0, [r4, #12]
 8001d26:	4305      	orrs	r5, r0
 8001d28:	81a5      	strh	r5, [r4, #12]
 8001d2a:	e7cd      	b.n	8001cc8 <__smakebuf_r+0x18>
 8001d2c:	08001abd 	.word	0x08001abd

08001d30 <__malloc_lock>:
 8001d30:	4801      	ldr	r0, [pc, #4]	; (8001d38 <__malloc_lock+0x8>)
 8001d32:	f7ff bf95 	b.w	8001c60 <__retarget_lock_acquire_recursive>
 8001d36:	bf00      	nop
 8001d38:	200000f0 	.word	0x200000f0

08001d3c <__malloc_unlock>:
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <__malloc_unlock+0x8>)
 8001d3e:	f7ff bf90 	b.w	8001c62 <__retarget_lock_release_recursive>
 8001d42:	bf00      	nop
 8001d44:	200000f0 	.word	0x200000f0

08001d48 <__sfputc_r>:
 8001d48:	6893      	ldr	r3, [r2, #8]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	b410      	push	{r4}
 8001d50:	6093      	str	r3, [r2, #8]
 8001d52:	da07      	bge.n	8001d64 <__sfputc_r+0x1c>
 8001d54:	6994      	ldr	r4, [r2, #24]
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	db01      	blt.n	8001d5e <__sfputc_r+0x16>
 8001d5a:	290a      	cmp	r1, #10
 8001d5c:	d102      	bne.n	8001d64 <__sfputc_r+0x1c>
 8001d5e:	bc10      	pop	{r4}
 8001d60:	f7ff bd0a 	b.w	8001778 <__swbuf_r>
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	1c58      	adds	r0, r3, #1
 8001d68:	6010      	str	r0, [r2, #0]
 8001d6a:	7019      	strb	r1, [r3, #0]
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	bc10      	pop	{r4}
 8001d70:	4770      	bx	lr

08001d72 <__sfputs_r>:
 8001d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d74:	4606      	mov	r6, r0
 8001d76:	460f      	mov	r7, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	18d5      	adds	r5, r2, r3
 8001d7c:	42ac      	cmp	r4, r5
 8001d7e:	d101      	bne.n	8001d84 <__sfputs_r+0x12>
 8001d80:	2000      	movs	r0, #0
 8001d82:	e007      	b.n	8001d94 <__sfputs_r+0x22>
 8001d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d88:	463a      	mov	r2, r7
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff ffdc 	bl	8001d48 <__sfputc_r>
 8001d90:	1c43      	adds	r3, r0, #1
 8001d92:	d1f3      	bne.n	8001d7c <__sfputs_r+0xa>
 8001d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d98 <_vfiprintf_r>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	b09d      	sub	sp, #116	; 0x74
 8001da0:	4614      	mov	r4, r2
 8001da2:	4698      	mov	r8, r3
 8001da4:	4606      	mov	r6, r0
 8001da6:	b118      	cbz	r0, 8001db0 <_vfiprintf_r+0x18>
 8001da8:	6983      	ldr	r3, [r0, #24]
 8001daa:	b90b      	cbnz	r3, 8001db0 <_vfiprintf_r+0x18>
 8001dac:	f7ff feba 	bl	8001b24 <__sinit>
 8001db0:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <_vfiprintf_r+0x240>)
 8001db2:	429d      	cmp	r5, r3
 8001db4:	d11b      	bne.n	8001dee <_vfiprintf_r+0x56>
 8001db6:	6875      	ldr	r5, [r6, #4]
 8001db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dba:	07d9      	lsls	r1, r3, #31
 8001dbc:	d405      	bmi.n	8001dca <_vfiprintf_r+0x32>
 8001dbe:	89ab      	ldrh	r3, [r5, #12]
 8001dc0:	059a      	lsls	r2, r3, #22
 8001dc2:	d402      	bmi.n	8001dca <_vfiprintf_r+0x32>
 8001dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dc6:	f7ff ff4b 	bl	8001c60 <__retarget_lock_acquire_recursive>
 8001dca:	89ab      	ldrh	r3, [r5, #12]
 8001dcc:	071b      	lsls	r3, r3, #28
 8001dce:	d501      	bpl.n	8001dd4 <_vfiprintf_r+0x3c>
 8001dd0:	692b      	ldr	r3, [r5, #16]
 8001dd2:	b9eb      	cbnz	r3, 8001e10 <_vfiprintf_r+0x78>
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fd20 	bl	800181c <__swsetup_r>
 8001ddc:	b1c0      	cbz	r0, 8001e10 <_vfiprintf_r+0x78>
 8001dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001de0:	07dc      	lsls	r4, r3, #31
 8001de2:	d50e      	bpl.n	8001e02 <_vfiprintf_r+0x6a>
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	b01d      	add	sp, #116	; 0x74
 8001dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <_vfiprintf_r+0x244>)
 8001df0:	429d      	cmp	r5, r3
 8001df2:	d101      	bne.n	8001df8 <_vfiprintf_r+0x60>
 8001df4:	68b5      	ldr	r5, [r6, #8]
 8001df6:	e7df      	b.n	8001db8 <_vfiprintf_r+0x20>
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <_vfiprintf_r+0x248>)
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	bf08      	it	eq
 8001dfe:	68f5      	ldreq	r5, [r6, #12]
 8001e00:	e7da      	b.n	8001db8 <_vfiprintf_r+0x20>
 8001e02:	89ab      	ldrh	r3, [r5, #12]
 8001e04:	0598      	lsls	r0, r3, #22
 8001e06:	d4ed      	bmi.n	8001de4 <_vfiprintf_r+0x4c>
 8001e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e0a:	f7ff ff2a 	bl	8001c62 <__retarget_lock_release_recursive>
 8001e0e:	e7e9      	b.n	8001de4 <_vfiprintf_r+0x4c>
 8001e10:	2300      	movs	r3, #0
 8001e12:	9309      	str	r3, [sp, #36]	; 0x24
 8001e14:	2320      	movs	r3, #32
 8001e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e1e:	2330      	movs	r3, #48	; 0x30
 8001e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001fe4 <_vfiprintf_r+0x24c>
 8001e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e28:	f04f 0901 	mov.w	r9, #1
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	469a      	mov	sl, r3
 8001e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e34:	b10a      	cbz	r2, 8001e3a <_vfiprintf_r+0xa2>
 8001e36:	2a25      	cmp	r2, #37	; 0x25
 8001e38:	d1f9      	bne.n	8001e2e <_vfiprintf_r+0x96>
 8001e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8001e3e:	d00b      	beq.n	8001e58 <_vfiprintf_r+0xc0>
 8001e40:	465b      	mov	r3, fp
 8001e42:	4622      	mov	r2, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	4630      	mov	r0, r6
 8001e48:	f7ff ff93 	bl	8001d72 <__sfputs_r>
 8001e4c:	3001      	adds	r0, #1
 8001e4e:	f000 80aa 	beq.w	8001fa6 <_vfiprintf_r+0x20e>
 8001e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e54:	445a      	add	r2, fp
 8001e56:	9209      	str	r2, [sp, #36]	; 0x24
 8001e58:	f89a 3000 	ldrb.w	r3, [sl]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a2 	beq.w	8001fa6 <_vfiprintf_r+0x20e>
 8001e62:	2300      	movs	r3, #0
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e6c:	f10a 0a01 	add.w	sl, sl, #1
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	9307      	str	r3, [sp, #28]
 8001e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e78:	931a      	str	r3, [sp, #104]	; 0x68
 8001e7a:	4654      	mov	r4, sl
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e82:	4858      	ldr	r0, [pc, #352]	; (8001fe4 <_vfiprintf_r+0x24c>)
 8001e84:	f7fe f9b4 	bl	80001f0 <memchr>
 8001e88:	9a04      	ldr	r2, [sp, #16]
 8001e8a:	b9d8      	cbnz	r0, 8001ec4 <_vfiprintf_r+0x12c>
 8001e8c:	06d1      	lsls	r1, r2, #27
 8001e8e:	bf44      	itt	mi
 8001e90:	2320      	movmi	r3, #32
 8001e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e96:	0713      	lsls	r3, r2, #28
 8001e98:	bf44      	itt	mi
 8001e9a:	232b      	movmi	r3, #43	; 0x2b
 8001e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea6:	d015      	beq.n	8001ed4 <_vfiprintf_r+0x13c>
 8001ea8:	9a07      	ldr	r2, [sp, #28]
 8001eaa:	4654      	mov	r4, sl
 8001eac:	2000      	movs	r0, #0
 8001eae:	f04f 0c0a 	mov.w	ip, #10
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001eb8:	3b30      	subs	r3, #48	; 0x30
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d94e      	bls.n	8001f5c <_vfiprintf_r+0x1c4>
 8001ebe:	b1b0      	cbz	r0, 8001eee <_vfiprintf_r+0x156>
 8001ec0:	9207      	str	r2, [sp, #28]
 8001ec2:	e014      	b.n	8001eee <_vfiprintf_r+0x156>
 8001ec4:	eba0 0308 	sub.w	r3, r0, r8
 8001ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	9304      	str	r3, [sp, #16]
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	e7d2      	b.n	8001e7a <_vfiprintf_r+0xe2>
 8001ed4:	9b03      	ldr	r3, [sp, #12]
 8001ed6:	1d19      	adds	r1, r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	9103      	str	r1, [sp, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bfbb      	ittet	lt
 8001ee0:	425b      	neglt	r3, r3
 8001ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8001ee6:	9307      	strge	r3, [sp, #28]
 8001ee8:	9307      	strlt	r3, [sp, #28]
 8001eea:	bfb8      	it	lt
 8001eec:	9204      	strlt	r2, [sp, #16]
 8001eee:	7823      	ldrb	r3, [r4, #0]
 8001ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef2:	d10c      	bne.n	8001f0e <_vfiprintf_r+0x176>
 8001ef4:	7863      	ldrb	r3, [r4, #1]
 8001ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ef8:	d135      	bne.n	8001f66 <_vfiprintf_r+0x1ce>
 8001efa:	9b03      	ldr	r3, [sp, #12]
 8001efc:	1d1a      	adds	r2, r3, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	9203      	str	r2, [sp, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bfb8      	it	lt
 8001f06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001f0a:	3402      	adds	r4, #2
 8001f0c:	9305      	str	r3, [sp, #20]
 8001f0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001fe8 <_vfiprintf_r+0x250>
 8001f12:	7821      	ldrb	r1, [r4, #0]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4650      	mov	r0, sl
 8001f18:	f7fe f96a 	bl	80001f0 <memchr>
 8001f1c:	b140      	cbz	r0, 8001f30 <_vfiprintf_r+0x198>
 8001f1e:	2340      	movs	r3, #64	; 0x40
 8001f20:	eba0 000a 	sub.w	r0, r0, sl
 8001f24:	fa03 f000 	lsl.w	r0, r3, r0
 8001f28:	9b04      	ldr	r3, [sp, #16]
 8001f2a:	4303      	orrs	r3, r0
 8001f2c:	3401      	adds	r4, #1
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f34:	482d      	ldr	r0, [pc, #180]	; (8001fec <_vfiprintf_r+0x254>)
 8001f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f3a:	2206      	movs	r2, #6
 8001f3c:	f7fe f958 	bl	80001f0 <memchr>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d03f      	beq.n	8001fc4 <_vfiprintf_r+0x22c>
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <_vfiprintf_r+0x258>)
 8001f46:	bb1b      	cbnz	r3, 8001f90 <_vfiprintf_r+0x1f8>
 8001f48:	9b03      	ldr	r3, [sp, #12]
 8001f4a:	3307      	adds	r3, #7
 8001f4c:	f023 0307 	bic.w	r3, r3, #7
 8001f50:	3308      	adds	r3, #8
 8001f52:	9303      	str	r3, [sp, #12]
 8001f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f56:	443b      	add	r3, r7
 8001f58:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5a:	e767      	b.n	8001e2c <_vfiprintf_r+0x94>
 8001f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f60:	460c      	mov	r4, r1
 8001f62:	2001      	movs	r0, #1
 8001f64:	e7a5      	b.n	8001eb2 <_vfiprintf_r+0x11a>
 8001f66:	2300      	movs	r3, #0
 8001f68:	3401      	adds	r4, #1
 8001f6a:	9305      	str	r3, [sp, #20]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 0c0a 	mov.w	ip, #10
 8001f72:	4620      	mov	r0, r4
 8001f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f78:	3a30      	subs	r2, #48	; 0x30
 8001f7a:	2a09      	cmp	r2, #9
 8001f7c:	d903      	bls.n	8001f86 <_vfiprintf_r+0x1ee>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0c5      	beq.n	8001f0e <_vfiprintf_r+0x176>
 8001f82:	9105      	str	r1, [sp, #20]
 8001f84:	e7c3      	b.n	8001f0e <_vfiprintf_r+0x176>
 8001f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e7f0      	b.n	8001f72 <_vfiprintf_r+0x1da>
 8001f90:	ab03      	add	r3, sp, #12
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	462a      	mov	r2, r5
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <_vfiprintf_r+0x25c>)
 8001f98:	a904      	add	r1, sp, #16
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	4607      	mov	r7, r0
 8001fa2:	1c78      	adds	r0, r7, #1
 8001fa4:	d1d6      	bne.n	8001f54 <_vfiprintf_r+0x1bc>
 8001fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fa8:	07d9      	lsls	r1, r3, #31
 8001faa:	d405      	bmi.n	8001fb8 <_vfiprintf_r+0x220>
 8001fac:	89ab      	ldrh	r3, [r5, #12]
 8001fae:	059a      	lsls	r2, r3, #22
 8001fb0:	d402      	bmi.n	8001fb8 <_vfiprintf_r+0x220>
 8001fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fb4:	f7ff fe55 	bl	8001c62 <__retarget_lock_release_recursive>
 8001fb8:	89ab      	ldrh	r3, [r5, #12]
 8001fba:	065b      	lsls	r3, r3, #25
 8001fbc:	f53f af12 	bmi.w	8001de4 <_vfiprintf_r+0x4c>
 8001fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fc2:	e711      	b.n	8001de8 <_vfiprintf_r+0x50>
 8001fc4:	ab03      	add	r3, sp, #12
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	462a      	mov	r2, r5
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <_vfiprintf_r+0x25c>)
 8001fcc:	a904      	add	r1, sp, #16
 8001fce:	4630      	mov	r0, r6
 8001fd0:	f000 f880 	bl	80020d4 <_printf_i>
 8001fd4:	e7e4      	b.n	8001fa0 <_vfiprintf_r+0x208>
 8001fd6:	bf00      	nop
 8001fd8:	08002520 	.word	0x08002520
 8001fdc:	08002540 	.word	0x08002540
 8001fe0:	08002500 	.word	0x08002500
 8001fe4:	08002560 	.word	0x08002560
 8001fe8:	08002566 	.word	0x08002566
 8001fec:	0800256a 	.word	0x0800256a
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	08001d73 	.word	0x08001d73

08001ff8 <_printf_common>:
 8001ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ffc:	4616      	mov	r6, r2
 8001ffe:	4699      	mov	r9, r3
 8002000:	688a      	ldr	r2, [r1, #8]
 8002002:	690b      	ldr	r3, [r1, #16]
 8002004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002008:	4293      	cmp	r3, r2
 800200a:	bfb8      	it	lt
 800200c:	4613      	movlt	r3, r2
 800200e:	6033      	str	r3, [r6, #0]
 8002010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002014:	4607      	mov	r7, r0
 8002016:	460c      	mov	r4, r1
 8002018:	b10a      	cbz	r2, 800201e <_printf_common+0x26>
 800201a:	3301      	adds	r3, #1
 800201c:	6033      	str	r3, [r6, #0]
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	0699      	lsls	r1, r3, #26
 8002022:	bf42      	ittt	mi
 8002024:	6833      	ldrmi	r3, [r6, #0]
 8002026:	3302      	addmi	r3, #2
 8002028:	6033      	strmi	r3, [r6, #0]
 800202a:	6825      	ldr	r5, [r4, #0]
 800202c:	f015 0506 	ands.w	r5, r5, #6
 8002030:	d106      	bne.n	8002040 <_printf_common+0x48>
 8002032:	f104 0a19 	add.w	sl, r4, #25
 8002036:	68e3      	ldr	r3, [r4, #12]
 8002038:	6832      	ldr	r2, [r6, #0]
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	42ab      	cmp	r3, r5
 800203e:	dc26      	bgt.n	800208e <_printf_common+0x96>
 8002040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002044:	1e13      	subs	r3, r2, #0
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	bf18      	it	ne
 800204a:	2301      	movne	r3, #1
 800204c:	0692      	lsls	r2, r2, #26
 800204e:	d42b      	bmi.n	80020a8 <_printf_common+0xb0>
 8002050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002054:	4649      	mov	r1, r9
 8002056:	4638      	mov	r0, r7
 8002058:	47c0      	blx	r8
 800205a:	3001      	adds	r0, #1
 800205c:	d01e      	beq.n	800209c <_printf_common+0xa4>
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	68e5      	ldr	r5, [r4, #12]
 8002062:	6832      	ldr	r2, [r6, #0]
 8002064:	f003 0306 	and.w	r3, r3, #6
 8002068:	2b04      	cmp	r3, #4
 800206a:	bf08      	it	eq
 800206c:	1aad      	subeq	r5, r5, r2
 800206e:	68a3      	ldr	r3, [r4, #8]
 8002070:	6922      	ldr	r2, [r4, #16]
 8002072:	bf0c      	ite	eq
 8002074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002078:	2500      	movne	r5, #0
 800207a:	4293      	cmp	r3, r2
 800207c:	bfc4      	itt	gt
 800207e:	1a9b      	subgt	r3, r3, r2
 8002080:	18ed      	addgt	r5, r5, r3
 8002082:	2600      	movs	r6, #0
 8002084:	341a      	adds	r4, #26
 8002086:	42b5      	cmp	r5, r6
 8002088:	d11a      	bne.n	80020c0 <_printf_common+0xc8>
 800208a:	2000      	movs	r0, #0
 800208c:	e008      	b.n	80020a0 <_printf_common+0xa8>
 800208e:	2301      	movs	r3, #1
 8002090:	4652      	mov	r2, sl
 8002092:	4649      	mov	r1, r9
 8002094:	4638      	mov	r0, r7
 8002096:	47c0      	blx	r8
 8002098:	3001      	adds	r0, #1
 800209a:	d103      	bne.n	80020a4 <_printf_common+0xac>
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020a4:	3501      	adds	r5, #1
 80020a6:	e7c6      	b.n	8002036 <_printf_common+0x3e>
 80020a8:	18e1      	adds	r1, r4, r3
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	2030      	movs	r0, #48	; 0x30
 80020ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020b2:	4422      	add	r2, r4
 80020b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020bc:	3302      	adds	r3, #2
 80020be:	e7c7      	b.n	8002050 <_printf_common+0x58>
 80020c0:	2301      	movs	r3, #1
 80020c2:	4622      	mov	r2, r4
 80020c4:	4649      	mov	r1, r9
 80020c6:	4638      	mov	r0, r7
 80020c8:	47c0      	blx	r8
 80020ca:	3001      	adds	r0, #1
 80020cc:	d0e6      	beq.n	800209c <_printf_common+0xa4>
 80020ce:	3601      	adds	r6, #1
 80020d0:	e7d9      	b.n	8002086 <_printf_common+0x8e>
	...

080020d4 <_printf_i>:
 80020d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020d8:	7e0f      	ldrb	r7, [r1, #24]
 80020da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020dc:	2f78      	cmp	r7, #120	; 0x78
 80020de:	4691      	mov	r9, r2
 80020e0:	4680      	mov	r8, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	469a      	mov	sl, r3
 80020e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80020ea:	d807      	bhi.n	80020fc <_printf_i+0x28>
 80020ec:	2f62      	cmp	r7, #98	; 0x62
 80020ee:	d80a      	bhi.n	8002106 <_printf_i+0x32>
 80020f0:	2f00      	cmp	r7, #0
 80020f2:	f000 80d8 	beq.w	80022a6 <_printf_i+0x1d2>
 80020f6:	2f58      	cmp	r7, #88	; 0x58
 80020f8:	f000 80a3 	beq.w	8002242 <_printf_i+0x16e>
 80020fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002104:	e03a      	b.n	800217c <_printf_i+0xa8>
 8002106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800210a:	2b15      	cmp	r3, #21
 800210c:	d8f6      	bhi.n	80020fc <_printf_i+0x28>
 800210e:	a101      	add	r1, pc, #4	; (adr r1, 8002114 <_printf_i+0x40>)
 8002110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002114:	0800216d 	.word	0x0800216d
 8002118:	08002181 	.word	0x08002181
 800211c:	080020fd 	.word	0x080020fd
 8002120:	080020fd 	.word	0x080020fd
 8002124:	080020fd 	.word	0x080020fd
 8002128:	080020fd 	.word	0x080020fd
 800212c:	08002181 	.word	0x08002181
 8002130:	080020fd 	.word	0x080020fd
 8002134:	080020fd 	.word	0x080020fd
 8002138:	080020fd 	.word	0x080020fd
 800213c:	080020fd 	.word	0x080020fd
 8002140:	0800228d 	.word	0x0800228d
 8002144:	080021b1 	.word	0x080021b1
 8002148:	0800226f 	.word	0x0800226f
 800214c:	080020fd 	.word	0x080020fd
 8002150:	080020fd 	.word	0x080020fd
 8002154:	080022af 	.word	0x080022af
 8002158:	080020fd 	.word	0x080020fd
 800215c:	080021b1 	.word	0x080021b1
 8002160:	080020fd 	.word	0x080020fd
 8002164:	080020fd 	.word	0x080020fd
 8002168:	08002277 	.word	0x08002277
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	602a      	str	r2, [r5, #0]
 8002174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800217c:	2301      	movs	r3, #1
 800217e:	e0a3      	b.n	80022c8 <_printf_i+0x1f4>
 8002180:	6820      	ldr	r0, [r4, #0]
 8002182:	6829      	ldr	r1, [r5, #0]
 8002184:	0606      	lsls	r6, r0, #24
 8002186:	f101 0304 	add.w	r3, r1, #4
 800218a:	d50a      	bpl.n	80021a2 <_printf_i+0xce>
 800218c:	680e      	ldr	r6, [r1, #0]
 800218e:	602b      	str	r3, [r5, #0]
 8002190:	2e00      	cmp	r6, #0
 8002192:	da03      	bge.n	800219c <_printf_i+0xc8>
 8002194:	232d      	movs	r3, #45	; 0x2d
 8002196:	4276      	negs	r6, r6
 8002198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800219c:	485e      	ldr	r0, [pc, #376]	; (8002318 <_printf_i+0x244>)
 800219e:	230a      	movs	r3, #10
 80021a0:	e019      	b.n	80021d6 <_printf_i+0x102>
 80021a2:	680e      	ldr	r6, [r1, #0]
 80021a4:	602b      	str	r3, [r5, #0]
 80021a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021aa:	bf18      	it	ne
 80021ac:	b236      	sxthne	r6, r6
 80021ae:	e7ef      	b.n	8002190 <_printf_i+0xbc>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	1d19      	adds	r1, r3, #4
 80021b6:	6029      	str	r1, [r5, #0]
 80021b8:	0601      	lsls	r1, r0, #24
 80021ba:	d501      	bpl.n	80021c0 <_printf_i+0xec>
 80021bc:	681e      	ldr	r6, [r3, #0]
 80021be:	e002      	b.n	80021c6 <_printf_i+0xf2>
 80021c0:	0646      	lsls	r6, r0, #25
 80021c2:	d5fb      	bpl.n	80021bc <_printf_i+0xe8>
 80021c4:	881e      	ldrh	r6, [r3, #0]
 80021c6:	4854      	ldr	r0, [pc, #336]	; (8002318 <_printf_i+0x244>)
 80021c8:	2f6f      	cmp	r7, #111	; 0x6f
 80021ca:	bf0c      	ite	eq
 80021cc:	2308      	moveq	r3, #8
 80021ce:	230a      	movne	r3, #10
 80021d0:	2100      	movs	r1, #0
 80021d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021d6:	6865      	ldr	r5, [r4, #4]
 80021d8:	60a5      	str	r5, [r4, #8]
 80021da:	2d00      	cmp	r5, #0
 80021dc:	bfa2      	ittt	ge
 80021de:	6821      	ldrge	r1, [r4, #0]
 80021e0:	f021 0104 	bicge.w	r1, r1, #4
 80021e4:	6021      	strge	r1, [r4, #0]
 80021e6:	b90e      	cbnz	r6, 80021ec <_printf_i+0x118>
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	d04d      	beq.n	8002288 <_printf_i+0x1b4>
 80021ec:	4615      	mov	r5, r2
 80021ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80021f2:	fb03 6711 	mls	r7, r3, r1, r6
 80021f6:	5dc7      	ldrb	r7, [r0, r7]
 80021f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80021fc:	4637      	mov	r7, r6
 80021fe:	42bb      	cmp	r3, r7
 8002200:	460e      	mov	r6, r1
 8002202:	d9f4      	bls.n	80021ee <_printf_i+0x11a>
 8002204:	2b08      	cmp	r3, #8
 8002206:	d10b      	bne.n	8002220 <_printf_i+0x14c>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	07de      	lsls	r6, r3, #31
 800220c:	d508      	bpl.n	8002220 <_printf_i+0x14c>
 800220e:	6923      	ldr	r3, [r4, #16]
 8002210:	6861      	ldr	r1, [r4, #4]
 8002212:	4299      	cmp	r1, r3
 8002214:	bfde      	ittt	le
 8002216:	2330      	movle	r3, #48	; 0x30
 8002218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800221c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002220:	1b52      	subs	r2, r2, r5
 8002222:	6122      	str	r2, [r4, #16]
 8002224:	f8cd a000 	str.w	sl, [sp]
 8002228:	464b      	mov	r3, r9
 800222a:	aa03      	add	r2, sp, #12
 800222c:	4621      	mov	r1, r4
 800222e:	4640      	mov	r0, r8
 8002230:	f7ff fee2 	bl	8001ff8 <_printf_common>
 8002234:	3001      	adds	r0, #1
 8002236:	d14c      	bne.n	80022d2 <_printf_i+0x1fe>
 8002238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800223c:	b004      	add	sp, #16
 800223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002242:	4835      	ldr	r0, [pc, #212]	; (8002318 <_printf_i+0x244>)
 8002244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002248:	6829      	ldr	r1, [r5, #0]
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002250:	6029      	str	r1, [r5, #0]
 8002252:	061d      	lsls	r5, r3, #24
 8002254:	d514      	bpl.n	8002280 <_printf_i+0x1ac>
 8002256:	07df      	lsls	r7, r3, #31
 8002258:	bf44      	itt	mi
 800225a:	f043 0320 	orrmi.w	r3, r3, #32
 800225e:	6023      	strmi	r3, [r4, #0]
 8002260:	b91e      	cbnz	r6, 800226a <_printf_i+0x196>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f023 0320 	bic.w	r3, r3, #32
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	2310      	movs	r3, #16
 800226c:	e7b0      	b.n	80021d0 <_printf_i+0xfc>
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6023      	str	r3, [r4, #0]
 8002276:	2378      	movs	r3, #120	; 0x78
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <_printf_i+0x248>)
 800227a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800227e:	e7e3      	b.n	8002248 <_printf_i+0x174>
 8002280:	0659      	lsls	r1, r3, #25
 8002282:	bf48      	it	mi
 8002284:	b2b6      	uxthmi	r6, r6
 8002286:	e7e6      	b.n	8002256 <_printf_i+0x182>
 8002288:	4615      	mov	r5, r2
 800228a:	e7bb      	b.n	8002204 <_printf_i+0x130>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	6826      	ldr	r6, [r4, #0]
 8002290:	6961      	ldr	r1, [r4, #20]
 8002292:	1d18      	adds	r0, r3, #4
 8002294:	6028      	str	r0, [r5, #0]
 8002296:	0635      	lsls	r5, r6, #24
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	d501      	bpl.n	80022a0 <_printf_i+0x1cc>
 800229c:	6019      	str	r1, [r3, #0]
 800229e:	e002      	b.n	80022a6 <_printf_i+0x1d2>
 80022a0:	0670      	lsls	r0, r6, #25
 80022a2:	d5fb      	bpl.n	800229c <_printf_i+0x1c8>
 80022a4:	8019      	strh	r1, [r3, #0]
 80022a6:	2300      	movs	r3, #0
 80022a8:	6123      	str	r3, [r4, #16]
 80022aa:	4615      	mov	r5, r2
 80022ac:	e7ba      	b.n	8002224 <_printf_i+0x150>
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	1d1a      	adds	r2, r3, #4
 80022b2:	602a      	str	r2, [r5, #0]
 80022b4:	681d      	ldr	r5, [r3, #0]
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4628      	mov	r0, r5
 80022bc:	f7fd ff98 	bl	80001f0 <memchr>
 80022c0:	b108      	cbz	r0, 80022c6 <_printf_i+0x1f2>
 80022c2:	1b40      	subs	r0, r0, r5
 80022c4:	6060      	str	r0, [r4, #4]
 80022c6:	6863      	ldr	r3, [r4, #4]
 80022c8:	6123      	str	r3, [r4, #16]
 80022ca:	2300      	movs	r3, #0
 80022cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d0:	e7a8      	b.n	8002224 <_printf_i+0x150>
 80022d2:	6923      	ldr	r3, [r4, #16]
 80022d4:	462a      	mov	r2, r5
 80022d6:	4649      	mov	r1, r9
 80022d8:	4640      	mov	r0, r8
 80022da:	47d0      	blx	sl
 80022dc:	3001      	adds	r0, #1
 80022de:	d0ab      	beq.n	8002238 <_printf_i+0x164>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	079b      	lsls	r3, r3, #30
 80022e4:	d413      	bmi.n	800230e <_printf_i+0x23a>
 80022e6:	68e0      	ldr	r0, [r4, #12]
 80022e8:	9b03      	ldr	r3, [sp, #12]
 80022ea:	4298      	cmp	r0, r3
 80022ec:	bfb8      	it	lt
 80022ee:	4618      	movlt	r0, r3
 80022f0:	e7a4      	b.n	800223c <_printf_i+0x168>
 80022f2:	2301      	movs	r3, #1
 80022f4:	4632      	mov	r2, r6
 80022f6:	4649      	mov	r1, r9
 80022f8:	4640      	mov	r0, r8
 80022fa:	47d0      	blx	sl
 80022fc:	3001      	adds	r0, #1
 80022fe:	d09b      	beq.n	8002238 <_printf_i+0x164>
 8002300:	3501      	adds	r5, #1
 8002302:	68e3      	ldr	r3, [r4, #12]
 8002304:	9903      	ldr	r1, [sp, #12]
 8002306:	1a5b      	subs	r3, r3, r1
 8002308:	42ab      	cmp	r3, r5
 800230a:	dcf2      	bgt.n	80022f2 <_printf_i+0x21e>
 800230c:	e7eb      	b.n	80022e6 <_printf_i+0x212>
 800230e:	2500      	movs	r5, #0
 8002310:	f104 0619 	add.w	r6, r4, #25
 8002314:	e7f5      	b.n	8002302 <_printf_i+0x22e>
 8002316:	bf00      	nop
 8002318:	08002571 	.word	0x08002571
 800231c:	08002582 	.word	0x08002582

08002320 <__sread>:
 8002320:	b510      	push	{r4, lr}
 8002322:	460c      	mov	r4, r1
 8002324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002328:	f000 f894 	bl	8002454 <_read_r>
 800232c:	2800      	cmp	r0, #0
 800232e:	bfab      	itete	ge
 8002330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002332:	89a3      	ldrhlt	r3, [r4, #12]
 8002334:	181b      	addge	r3, r3, r0
 8002336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800233a:	bfac      	ite	ge
 800233c:	6563      	strge	r3, [r4, #84]	; 0x54
 800233e:	81a3      	strhlt	r3, [r4, #12]
 8002340:	bd10      	pop	{r4, pc}

08002342 <__swrite>:
 8002342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002346:	461f      	mov	r7, r3
 8002348:	898b      	ldrh	r3, [r1, #12]
 800234a:	05db      	lsls	r3, r3, #23
 800234c:	4605      	mov	r5, r0
 800234e:	460c      	mov	r4, r1
 8002350:	4616      	mov	r6, r2
 8002352:	d505      	bpl.n	8002360 <__swrite+0x1e>
 8002354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002358:	2302      	movs	r3, #2
 800235a:	2200      	movs	r2, #0
 800235c:	f000 f868 	bl	8002430 <_lseek_r>
 8002360:	89a3      	ldrh	r3, [r4, #12]
 8002362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800236a:	81a3      	strh	r3, [r4, #12]
 800236c:	4632      	mov	r2, r6
 800236e:	463b      	mov	r3, r7
 8002370:	4628      	mov	r0, r5
 8002372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002376:	f000 b817 	b.w	80023a8 <_write_r>

0800237a <__sseek>:
 800237a:	b510      	push	{r4, lr}
 800237c:	460c      	mov	r4, r1
 800237e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002382:	f000 f855 	bl	8002430 <_lseek_r>
 8002386:	1c43      	adds	r3, r0, #1
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	bf15      	itete	ne
 800238c:	6560      	strne	r0, [r4, #84]	; 0x54
 800238e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002396:	81a3      	strheq	r3, [r4, #12]
 8002398:	bf18      	it	ne
 800239a:	81a3      	strhne	r3, [r4, #12]
 800239c:	bd10      	pop	{r4, pc}

0800239e <__sclose>:
 800239e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a2:	f000 b813 	b.w	80023cc <_close_r>
	...

080023a8 <_write_r>:
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	4d07      	ldr	r5, [pc, #28]	; (80023c8 <_write_r+0x20>)
 80023ac:	4604      	mov	r4, r0
 80023ae:	4608      	mov	r0, r1
 80023b0:	4611      	mov	r1, r2
 80023b2:	2200      	movs	r2, #0
 80023b4:	602a      	str	r2, [r5, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7fe ff73 	bl	80012a2 <_write>
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d102      	bne.n	80023c6 <_write_r+0x1e>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	b103      	cbz	r3, 80023c6 <_write_r+0x1e>
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	200000f4 	.word	0x200000f4

080023cc <_close_r>:
 80023cc:	b538      	push	{r3, r4, r5, lr}
 80023ce:	4d06      	ldr	r5, [pc, #24]	; (80023e8 <_close_r+0x1c>)
 80023d0:	2300      	movs	r3, #0
 80023d2:	4604      	mov	r4, r0
 80023d4:	4608      	mov	r0, r1
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	f7fe ff7f 	bl	80012da <_close>
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	d102      	bne.n	80023e6 <_close_r+0x1a>
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	b103      	cbz	r3, 80023e6 <_close_r+0x1a>
 80023e4:	6023      	str	r3, [r4, #0]
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
 80023e8:	200000f4 	.word	0x200000f4

080023ec <_fstat_r>:
 80023ec:	b538      	push	{r3, r4, r5, lr}
 80023ee:	4d07      	ldr	r5, [pc, #28]	; (800240c <_fstat_r+0x20>)
 80023f0:	2300      	movs	r3, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	f7fe ff79 	bl	80012f0 <_fstat>
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	d102      	bne.n	8002408 <_fstat_r+0x1c>
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	b103      	cbz	r3, 8002408 <_fstat_r+0x1c>
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	bd38      	pop	{r3, r4, r5, pc}
 800240a:	bf00      	nop
 800240c:	200000f4 	.word	0x200000f4

08002410 <_isatty_r>:
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4d06      	ldr	r5, [pc, #24]	; (800242c <_isatty_r+0x1c>)
 8002414:	2300      	movs	r3, #0
 8002416:	4604      	mov	r4, r0
 8002418:	4608      	mov	r0, r1
 800241a:	602b      	str	r3, [r5, #0]
 800241c:	f7fe ff77 	bl	800130e <_isatty>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d102      	bne.n	800242a <_isatty_r+0x1a>
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	b103      	cbz	r3, 800242a <_isatty_r+0x1a>
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	bd38      	pop	{r3, r4, r5, pc}
 800242c:	200000f4 	.word	0x200000f4

08002430 <_lseek_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	4d07      	ldr	r5, [pc, #28]	; (8002450 <_lseek_r+0x20>)
 8002434:	4604      	mov	r4, r0
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	2200      	movs	r2, #0
 800243c:	602a      	str	r2, [r5, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	f7fe ff6f 	bl	8001322 <_lseek>
 8002444:	1c43      	adds	r3, r0, #1
 8002446:	d102      	bne.n	800244e <_lseek_r+0x1e>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	b103      	cbz	r3, 800244e <_lseek_r+0x1e>
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	bd38      	pop	{r3, r4, r5, pc}
 8002450:	200000f4 	.word	0x200000f4

08002454 <_read_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4d07      	ldr	r5, [pc, #28]	; (8002474 <_read_r+0x20>)
 8002458:	4604      	mov	r4, r0
 800245a:	4608      	mov	r0, r1
 800245c:	4611      	mov	r1, r2
 800245e:	2200      	movs	r2, #0
 8002460:	602a      	str	r2, [r5, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f7fe ff00 	bl	8001268 <_read>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_read_r+0x1e>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_read_r+0x1e>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	200000f4 	.word	0x200000f4

08002478 <_init>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr

08002484 <_fini>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr
