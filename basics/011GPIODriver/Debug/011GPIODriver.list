
011GPIODriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034dc  080034dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080034dc  080034dc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034dc  080034dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080034e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000041f6  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ed4  00000000  00000000  00024294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000470  00000000  00000000  00025168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a8  00000000  00000000  000255d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002da3  00000000  00000000  00025980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f29  00000000  00000000  00028723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e945  00000000  00000000  0002e64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003cf91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001818  00000000  00000000  0003cfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080033ac 	.word	0x080033ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080033ac 	.word	0x080033ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:

uint32_t * I2C_DEVICE_RTC = I2C2;
uint8_t SlaveAddressRTC = 0x68;								//DS3231 I2C Address

void delay_us(uint32_t delay)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <delay_us+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002a0:	bf00      	nop
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <delay_us+0x2c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3f8      	bcc.n	80002a2 <delay_us+0x12>
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000090 	.word	0x20000090

080002c0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <configure_delay_timer+0x3c>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <configure_delay_timer+0x40>)
 80002d2:	f002 f80f 	bl	80022f4 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <configure_delay_timer+0x3c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <configure_delay_timer+0x3c>)
 80002de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002e2:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 80002e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002e8:	f001 fc5c 	bl	8001ba4 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <configure_delay_timer+0x3c>)
 80002ee:	f000 fc19 	bl	8000b24 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <configure_delay_timer+0x3c>)
 80002f4:	f000 fe3e 	bl	8000f74 <General_Purpose_Timer_PeripheralEnable>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000094 	.word	0x20000094

08000304 <configure_i2c>:
	USART_Init(&Test_USART);
	USART_PeripheralEnable(&Test_USART);
}

void configure_i2c(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 800030a:	463b      	mov	r3, r7
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 ffef 	bl	80022f4 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT);
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <configure_i2c+0xc8>)
 8000318:	f001 fc44 	bl	8001ba4 <EnablePeriClk>
	GPIOSetMode(I2C_PORT,I2C1_SDA,GPIO_MODE_ALTFN);
 800031c:	2202      	movs	r2, #2
 800031e:	2107      	movs	r1, #7
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <configure_i2c+0xc8>)
 8000322:	f000 fe38 	bl	8000f96 <GPIOSetMode>
	GPIOSetMode(I2C_PORT,I2C1_SCL,GPIO_MODE_ALTFN);
 8000326:	2202      	movs	r2, #2
 8000328:	2106      	movs	r1, #6
 800032a:	4828      	ldr	r0, [pc, #160]	; (80003cc <configure_i2c+0xc8>)
 800032c:	f000 fe33 	bl	8000f96 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT,I2C1_SDA,GPIO_ALTFN_4);
 8000330:	2204      	movs	r2, #4
 8000332:	2107      	movs	r1, #7
 8000334:	4825      	ldr	r0, [pc, #148]	; (80003cc <configure_i2c+0xc8>)
 8000336:	f000 fe74 	bl	8001022 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT,I2C1_SCL,GPIO_ALTFN_4);
 800033a:	2204      	movs	r2, #4
 800033c:	2106      	movs	r1, #6
 800033e:	4823      	ldr	r0, [pc, #140]	; (80003cc <configure_i2c+0xc8>)
 8000340:	f000 fe6f 	bl	8001022 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT,I2C1_SDA,GPIO_OPTYPE_OD);
 8000344:	2201      	movs	r2, #1
 8000346:	2107      	movs	r1, #7
 8000348:	4820      	ldr	r0, [pc, #128]	; (80003cc <configure_i2c+0xc8>)
 800034a:	f000 fea3 	bl	8001094 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT,I2C1_SCL,GPIO_OPTYPE_OD);
 800034e:	2201      	movs	r2, #1
 8000350:	2106      	movs	r1, #6
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <configure_i2c+0xc8>)
 8000354:	f000 fe9e 	bl	8001094 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SDA,GPIO_OPSPEED_HIGH);
 8000358:	2202      	movs	r2, #2
 800035a:	2107      	movs	r1, #7
 800035c:	481b      	ldr	r0, [pc, #108]	; (80003cc <configure_i2c+0xc8>)
 800035e:	f000 fedf 	bl	8001120 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT,I2C1_SCL,GPIO_OPSPEED_HIGH);
 8000362:	2202      	movs	r2, #2
 8000364:	2106      	movs	r1, #6
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <configure_i2c+0xc8>)
 8000368:	f000 feda 	bl	8001120 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SDA,GPIO_PULL_UP);
 800036c:	2201      	movs	r2, #1
 800036e:	2107      	movs	r1, #7
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <configure_i2c+0xc8>)
 8000372:	f000 feb1 	bl	80010d8 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT,I2C1_SCL,GPIO_PULL_UP);
 8000376:	2201      	movs	r2, #1
 8000378:	2106      	movs	r1, #6
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <configure_i2c+0xc8>)
 800037c:	f000 feac 	bl	80010d8 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000380:	2310      	movs	r3, #16
 8000382:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800038c:	2350      	movs	r3, #80	; 0x50
 800038e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <configure_i2c+0xcc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fc03 	bl	8001ba4 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE,&I2C_Config);
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <configure_i2c+0xcc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	463a      	mov	r2, r7
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fede 	bl	8001168 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE,TRISE_VALUE);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <configure_i2c+0xcc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2111      	movs	r1, #17
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ffef 	bl	8001396 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <configure_i2c+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 ff29 	bl	8001214 <I2CEnable>

	return;
 80003c2:	bf00      	nop
}
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	20000000 	.word	0x20000000

080003d4 <configure_i2c_rtc>:

void configure_i2c_rtc(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	struct I2C_Config_t I2C_Config;

	memset(&I2C_Config,0,sizeof(I2C_Config));
 80003da:	463b      	mov	r3, r7
 80003dc:	2218      	movs	r2, #24
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 ff87 	bl	80022f4 <memset>

	//GPIO Pin Configuration for I2C
	EnablePeriClk(I2C_PORT_RTC);
 80003e6:	482d      	ldr	r0, [pc, #180]	; (800049c <configure_i2c_rtc+0xc8>)
 80003e8:	f001 fbdc 	bl	8001ba4 <EnablePeriClk>
	GPIOSetMode(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_MODE_ALTFN);
 80003ec:	2202      	movs	r2, #2
 80003ee:	210b      	movs	r1, #11
 80003f0:	482a      	ldr	r0, [pc, #168]	; (800049c <configure_i2c_rtc+0xc8>)
 80003f2:	f000 fdd0 	bl	8000f96 <GPIOSetMode>
	GPIOSetMode(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_MODE_ALTFN);
 80003f6:	2202      	movs	r2, #2
 80003f8:	210a      	movs	r1, #10
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <configure_i2c_rtc+0xc8>)
 80003fc:	f000 fdcb 	bl	8000f96 <GPIOSetMode>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_ALTFN_4);
 8000400:	2204      	movs	r2, #4
 8000402:	210b      	movs	r1, #11
 8000404:	4825      	ldr	r0, [pc, #148]	; (800049c <configure_i2c_rtc+0xc8>)
 8000406:	f000 fe0c 	bl	8001022 <GPIOSetAltFn>
	GPIOSetAltFn(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_ALTFN_4);
 800040a:	2204      	movs	r2, #4
 800040c:	210a      	movs	r1, #10
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <configure_i2c_rtc+0xc8>)
 8000410:	f000 fe07 	bl	8001022 <GPIOSetAltFn>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPTYPE_OD);
 8000414:	2201      	movs	r2, #1
 8000416:	210b      	movs	r1, #11
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <configure_i2c_rtc+0xc8>)
 800041a:	f000 fe3b 	bl	8001094 <GPIOSetOutputType>
	GPIOSetOutputType(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPTYPE_OD);
 800041e:	2201      	movs	r2, #1
 8000420:	210a      	movs	r1, #10
 8000422:	481e      	ldr	r0, [pc, #120]	; (800049c <configure_i2c_rtc+0xc8>)
 8000424:	f000 fe36 	bl	8001094 <GPIOSetOutputType>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_OPSPEED_HIGH);
 8000428:	2202      	movs	r2, #2
 800042a:	210b      	movs	r1, #11
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <configure_i2c_rtc+0xc8>)
 800042e:	f000 fe77 	bl	8001120 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_OPSPEED_HIGH);
 8000432:	2202      	movs	r2, #2
 8000434:	210a      	movs	r1, #10
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <configure_i2c_rtc+0xc8>)
 8000438:	f000 fe72 	bl	8001120 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SDA_RTC,GPIO_PULL_UP);
 800043c:	2201      	movs	r2, #1
 800043e:	210b      	movs	r1, #11
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <configure_i2c_rtc+0xc8>)
 8000442:	f000 fe49 	bl	80010d8 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(I2C_PORT_RTC,I2C_SCL_RTC,GPIO_PULL_UP);
 8000446:	2201      	movs	r2, #1
 8000448:	210a      	movs	r1, #10
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <configure_i2c_rtc+0xc8>)
 800044c:	f000 fe44 	bl	80010d8 <GPIOSetPullUpDownConfig>

	//I2C Port Configuration
	I2C_Config.I2C_PeriFreq = I2C_CONFIG_PERI_FREQ;
 8000450:	2310      	movs	r3, #16
 8000452:	603b      	str	r3, [r7, #0]
	I2C_Config.I2C_SpeedMode = I2C_MODE_SM;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
	I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_0;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_CCRValue = I2C_CONFIG_CCR_VALUE;
 800045c:	2350      	movs	r3, #80	; 0x50
 800045e:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]

	EnablePeriClk(I2C_DEVICE_RTC);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fb9b 	bl	8001ba4 <EnablePeriClk>

	I2CPeriConfig(I2C_DEVICE_RTC,&I2C_Config);
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <configure_i2c_rtc+0xcc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	463a      	mov	r2, r7
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fe76 	bl	8001168 <I2CPeriConfig>
	I2CConfigureTrise(I2C_DEVICE_RTC,TRISE_VALUE);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2111      	movs	r1, #17
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff87 	bl	8001396 <I2CConfigureTrise>
	I2CEnable(I2C_DEVICE_RTC);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <configure_i2c_rtc+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fec1 	bl	8001214 <I2CEnable>

	return;
 8000492:	bf00      	nop
}
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020400 	.word	0x40020400
 80004a0:	20000008 	.word	0x20000008

080004a4 <LCD_SendChar>:
{
	USART_SendData(&Test_USART, &ch, 1);
}

void LCD_SendChar(uint8_t ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	lcd_pcf8574_send_data(ch);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 f8dd 	bl	8001670 <lcd_pcf8574_send_data>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <RTC_DS3231_Config_Calendar>:

extern uint32_t *I2C_DEVICE_RTC;
extern uint8_t SlaveAddressRTC;

void RTC_DS3231_Config_Calendar(struct RTC_DS3231_Config_t *pRTCConfig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	struct Time ds3231_time;
	struct Date ds3231_date;

	//Configuring the Time Parameters
	memset(&ds3231_time,0,sizeof(struct Time));
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2204      	movs	r2, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 ff0f 	bl	80022f4 <memset>
	ds3231_time.seconds = (pRTCConfig->RTCClockSecondsUnits << DS3231_RTC_TR_SU) | (pRTCConfig->RTCClockSecondsTens << DS3231_RTC_TR_ST);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	733b      	strb	r3, [r7, #12]
	ds3231_time.minutes = (pRTCConfig->RTCClockMinutesUnits << DS3231_RTC_TR_MNU) | (pRTCConfig->RTCClockMinutesTens << DS3231_RTC_TR_MNT);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	737b      	strb	r3, [r7, #13]

	if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_24)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <RTC_DS3231_Config_Calendar+0x6e>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) | (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
 800052c:	e01a      	b.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	}
	else if(pRTCConfig->RTCClockHourFormat==DS3231_RTC_HOUR_FORMAT_12)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d116      	bne.n	8000564 <RTC_DS3231_Config_Calendar+0xa4>
	{
		ds3231_time.hours = (pRTCConfig->RTCClockHoursUnits << DS3231_RTC_TR_HU) |  (pRTCConfig->RTCClockHoursTens << DS3231_RTC_TR_HT) | (pRTCConfig->RTCClockAMPM << DS3231_RTC_TR_AMPM) | (pRTCConfig->RTCClockHourFormat << DS3231_RTC_TR_HOUR_FORMAT);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25a      	sxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	}

	Tx_Buf[0] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_time.seconds;
 8000568:	7b3b      	ldrb	r3, [r7, #12]
 800056a:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_time.minutes;
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_time.hours;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	74fb      	strb	r3, [r7, #19]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f107 0110 	add.w	r1, r7, #16
 8000580:	2204      	movs	r2, #4
 8000582:	f000 fe58 	bl	8001236 <I2CMasterSendData>
	delay_us(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058a:	f7ff fe81 	bl	8000290 <delay_us>

	//Configuring the Data Parameters in the Device
	memset(&ds3231_date,0,sizeof(struct Date));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2204      	movs	r2, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 feac 	bl	80022f4 <memset>
	ds3231_date.dayofweek = (pRTCConfig->RTCClockDayOfWeek << DS3231_RTC_DR_WDU);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b9b      	ldrb	r3, [r3, #14]
 80005a0:	72fb      	strb	r3, [r7, #11]
	ds3231_date.date = (pRTCConfig->RTCClockDateUnits << DS3231_RTC_DR_DU) | (pRTCConfig->RTCClockDateTens << DS3231_RTC_DR_DT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	723b      	strb	r3, [r7, #8]
	ds3231_date.month = (pRTCConfig->RTCClockMonthUnits << DS3231_RTC_DR_MU) | (pRTCConfig->RTCClockMonthTens << DS3231_RTC_DR_MT);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7a9b      	ldrb	r3, [r3, #10]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7adb      	ldrb	r3, [r3, #11]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	727b      	strb	r3, [r7, #9]
	ds3231_date.year = (pRTCConfig->RTCClockYearUnits << DS3231_RTC_DR_YU) | (pRTCConfig->RTCClockYearTens << DS3231_RTC_DR_YT);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7b1b      	ldrb	r3, [r3, #12]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b5b      	ldrb	r3, [r3, #13]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
	Tx_Buf[0] = 0x03;
 80005e4:	2303      	movs	r3, #3
 80005e6:	743b      	strb	r3, [r7, #16]
	Tx_Buf[1] = ds3231_date.dayofweek;
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	747b      	strb	r3, [r7, #17]
	Tx_Buf[2] = ds3231_date.date;
 80005ec:	7a3b      	ldrb	r3, [r7, #8]
 80005ee:	74bb      	strb	r3, [r7, #18]
	Tx_Buf[3] = ds3231_date.month;
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	74fb      	strb	r3, [r7, #19]
	Tx_Buf[4] = ds3231_date.year;
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	753b      	strb	r3, [r7, #20]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <RTC_DS3231_Config_Calendar+0x154>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <RTC_DS3231_Config_Calendar+0x158>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	2205      	movs	r2, #5
 8000606:	f000 fe16 	bl	8001236 <I2CMasterSendData>

	return;
 800060a:	bf00      	nop
}
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008
 8000618:	2000000c 	.word	0x2000000c

0800061c <RTC_DS3231_Read_Calendar>:

void RTC_DS3231_Read_Calendar(struct Date *date, struct Time *time)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t RxBuf[7];

	//Read the current date and time from the DS3231 RTC Module
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,RxBuf,7,0, SlaveAddressRTC);
 8000626:	4b42      	ldr	r3, [pc, #264]	; (8000730 <RTC_DS3231_Read_Calendar+0x114>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	4b42      	ldr	r3, [pc, #264]	; (8000734 <RTC_DS3231_Read_Calendar+0x118>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2207      	movs	r2, #7
 8000638:	f000 fedf 	bl	80013fa <I2CMaster_DS3231_RTC_Read>

	time->seconds = ((RxBuf[0] >> DS3231_RTC_TR_ST) & 0x7)*10 + ((RxBuf[0] >> DS3231_RTC_TR_SU) & 0xF);
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	701a      	strb	r2, [r3, #0]
	time->minutes = ((RxBuf[1] >> DS3231_RTC_TR_MNT) & 0x7)*10 + ((RxBuf[1] >> DS3231_RTC_TR_MNU) & 0xF);
 8000662:	7a7b      	ldrb	r3, [r7, #9]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4413      	add	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4413      	add	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	705a      	strb	r2, [r3, #1]
	time->hours = ((RxBuf[2] >> DS3231_RTC_TR_HT) & 0x3)*10 + ((RxBuf[2] >> DS3231_RTC_TR_HU) & 0xF);
 8000688:	7abb      	ldrb	r3, [r7, #10]
 800068a:	091b      	lsrs	r3, r3, #4
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	4413      	add	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	7abb      	ldrb	r3, [r7, #10]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4413      	add	r3, r2
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	709a      	strb	r2, [r3, #2]

	date->dayofweek = (RxBuf[3] & 0x7);
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	70da      	strb	r2, [r3, #3]
	date->date = ((RxBuf[4] >> DS3231_RTC_DR_DT) & 0x3)*10 + ((RxBuf[4] >> DS3231_RTC_DR_DU) & 0xF);
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 0303 	and.w	r3, r3, #3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	7b3b      	ldrb	r3, [r7, #12]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	701a      	strb	r2, [r3, #0]
	date->month = ((RxBuf[5] >> DS3231_RTC_DR_MT) & 0x1)*10 + ((RxBuf[5] >> DS3231_RTC_DR_MU) & 0xF);
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	7b7b      	ldrb	r3, [r7, #13]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4413      	add	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	705a      	strb	r2, [r3, #1]
	date->year = ((RxBuf[6] >> DS3231_RTC_DR_YT) & 0xF)*10 + ((RxBuf[6] >> DS3231_RTC_DR_YU) & 0xF);
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	4413      	add	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4413      	add	r3, r2
 8000720:	b2da      	uxtb	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	709a      	strb	r2, [r3, #2]

	return;
 8000726:	bf00      	nop
}
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	2000000c 	.word	0x2000000c

08000738 <RTC_DS3231_Config_Alarm>:

void RTC_DS3231_Config_Alarm(struct RTC_DS3231_AlarmConfig_t *pRTCAlarmConfig)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af02      	add	r7, sp, #8
 800073e:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Buf[5];
	uint8_t seconds, minutes, hours, date, control_register;

	seconds = (pRTCAlarmConfig->RTCAlarmSecondsUnits << DS3231_RTC_ALRMR_SU) | (pRTCAlarmConfig->RTCAlarmSecondsTens << DS3231_RTC_ALRMR_ST) | (pRTCAlarmConfig->RTCAlarmConsiderSeconds << DS3231_RTC_ALRMR_MSK1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	b25a      	sxtb	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25a      	sxtb	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	78db      	ldrb	r3, [r3, #3]
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	757b      	strb	r3, [r7, #21]
	minutes = (pRTCAlarmConfig->RTCAlarmMinutesUnits << DS3231_RTC_ALRMR_MNU) | (pRTCAlarmConfig->RTCAlarmMinutesTens << DS3231_RTC_ALRMR_MNT) | (pRTCAlarmConfig->RTCAlarmConsiderMinutes << DS3231_RTC_ALRMR_MSK2);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	b25a      	sxtb	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	01db      	lsls	r3, r3, #7
 8000778:	b25b      	sxtb	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b25b      	sxtb	r3, r3
 800077e:	753b      	strb	r3, [r7, #20]

	if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_24)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7a5b      	ldrb	r3, [r3, #9]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d116      	bne.n	80007b6 <RTC_DS3231_Config_Alarm+0x7e>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	79db      	ldrb	r3, [r3, #7]
 800078c:	b25a      	sxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	b25b      	sxtb	r3, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	b25a      	sxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7a5b      	ldrb	r3, [r3, #9]
 800079e:	019b      	lsls	r3, r3, #6
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7adb      	ldrb	r3, [r3, #11]
 80007aa:	01db      	lsls	r3, r3, #7
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	75fb      	strb	r3, [r7, #23]
 80007b4:	e01f      	b.n	80007f6 <RTC_DS3231_Config_Alarm+0xbe>
	}
	else if(pRTCAlarmConfig->RTCAlarmHourFormat == DS3231_RTC_HOUR_FORMAT_12)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7a5b      	ldrb	r3, [r3, #9]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11b      	bne.n	80007f6 <RTC_DS3231_Config_Alarm+0xbe>
	{
		hours = (pRTCAlarmConfig->RTCAlarmHoursUnits << DS3231_RTC_ALRMR_HU) |  (pRTCAlarmConfig->RTCAlarmHoursTens << DS3231_RTC_ALRMR_HT) | (pRTCAlarmConfig->RTCAlarmAMPM << DS3231_RTC_ALRMR_AMPM) | (pRTCAlarmConfig->RTCAlarmHourFormat << DS3231_RTC_ALRMR_HOUR_FORMAT) | (pRTCAlarmConfig->RTCAlarmConsiderHours << DS3231_RTC_ALRMR_MSK3);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	79db      	ldrb	r3, [r3, #7]
 80007c2:	b25a      	sxtb	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a9b      	ldrb	r3, [r3, #10]
 80007d4:	015b      	lsls	r3, r3, #5
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b25a      	sxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7adb      	ldrb	r3, [r3, #11]
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	75fb      	strb	r3, [r7, #23]
	}

	if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_NO)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7bdb      	ldrb	r3, [r3, #15]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d110      	bne.n	8000820 <RTC_DS3231_Config_Alarm+0xe8>
	{
		//Configure the Date
		date = (pRTCAlarmConfig->RTCAlarmDateUnits << DS3231_RTC_ALRMR_DU) | (pRTCAlarmConfig->RTCAlarmDateTens << DS3231_RTC_ALRMR_DT) | (0 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7b1b      	ldrb	r3, [r3, #12]
 8000802:	b25a      	sxtb	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7b5b      	ldrb	r3, [r3, #13]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b25a      	sxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7c1b      	ldrb	r3, [r3, #16]
 8000814:	01db      	lsls	r3, r3, #7
 8000816:	b25b      	sxtb	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b25b      	sxtb	r3, r3
 800081c:	75bb      	strb	r3, [r7, #22]
 800081e:	e00e      	b.n	800083e <RTC_DS3231_Config_Alarm+0x106>
	}
	else if(pRTCAlarmConfig->RTCAlarmWeekDaySelection == RTC_ALARM_WDSEL_YES)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7bdb      	ldrb	r3, [r3, #15]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10a      	bne.n	800083e <RTC_DS3231_Config_Alarm+0x106>
	{
		//Configure the WeekDay
		date = (pRTCAlarmConfig->RTCAlarmDayOfWeek << DS3231_RTC_ALRMR_DU) | (1 << DS3231_RTC_ALRMR_WDSEL) | (pRTCAlarmConfig->RTCAlarmConsiderDate << DS3231_RTC_ALRMR_MSK4);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7b9a      	ldrb	r2, [r3, #14]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7c1b      	ldrb	r3, [r3, #16]
 8000830:	01db      	lsls	r3, r3, #7
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	75bb      	strb	r3, [r7, #22]
	}

	//Configure the ALARM Parameters in the Device
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d113      	bne.n	800086e <RTC_DS3231_Config_Alarm+0x136>
	{
		Tx_Buf[0] = 0x07;
 8000846:	2307      	movs	r3, #7
 8000848:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = seconds;
 800084a:	7d7b      	ldrb	r3, [r7, #21]
 800084c:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = minutes;
 800084e:	7d3b      	ldrb	r3, [r7, #20]
 8000850:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = hours;
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	73fb      	strb	r3, [r7, #15]
		Tx_Buf[4] = date;
 8000856:	7dbb      	ldrb	r3, [r7, #22]
 8000858:	743b      	strb	r3, [r7, #16]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,5,SlaveAddressRTC);
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <RTC_DS3231_Config_Alarm+0x1c0>)
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <RTC_DS3231_Config_Alarm+0x1c4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f107 010c 	add.w	r1, r7, #12
 8000866:	2205      	movs	r2, #5
 8000868:	f000 fce5 	bl	8001236 <I2CMasterSendData>
 800086c:	e014      	b.n	8000898 <RTC_DS3231_Config_Alarm+0x160>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d110      	bne.n	8000898 <RTC_DS3231_Config_Alarm+0x160>
	{
		Tx_Buf[0] = 0x0B;
 8000876:	230b      	movs	r3, #11
 8000878:	733b      	strb	r3, [r7, #12]
		Tx_Buf[1] = minutes;
 800087a:	7d3b      	ldrb	r3, [r7, #20]
 800087c:	737b      	strb	r3, [r7, #13]
		Tx_Buf[2] = hours;
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	73bb      	strb	r3, [r7, #14]
		Tx_Buf[3] = date;
 8000882:	7dbb      	ldrb	r3, [r7, #22]
 8000884:	73fb      	strb	r3, [r7, #15]
		I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,4,SlaveAddressRTC);
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <RTC_DS3231_Config_Alarm+0x1c0>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <RTC_DS3231_Config_Alarm+0x1c4>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	2204      	movs	r2, #4
 8000894:	f000 fccf 	bl	8001236 <I2CMasterSendData>
	}

	//Enable the Alarm in the configuration register
	//a. Read the configuration register
	I2CMaster_DS3231_RTC_Read(I2C_DEVICE_RTC,&control_register,1,0x0E, SlaveAddressRTC);
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <RTC_DS3231_Config_Alarm+0x1c0>)
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <RTC_DS3231_Config_Alarm+0x1c4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f107 010b 	add.w	r1, r7, #11
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	230e      	movs	r3, #14
 80008a8:	2201      	movs	r2, #1
 80008aa:	f000 fda6 	bl	80013fa <I2CMaster_DS3231_RTC_Read>

	//b. Modify the Alarm Enable Bits
	if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d105      	bne.n	80008c2 <RTC_DS3231_Config_Alarm+0x18a>
	{
		control_register |= (1 << DS3231_RTC_CR_A1IE);
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	72fb      	strb	r3, [r7, #11]
 80008c0:	e008      	b.n	80008d4 <RTC_DS3231_Config_Alarm+0x19c>
	}
	else if(pRTCAlarmConfig->RTCAlarmSelection == DS3231_RTC_ALARM_2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d104      	bne.n	80008d4 <RTC_DS3231_Config_Alarm+0x19c>
	{
		control_register |= (1 << DS3231_RTC_CR_A2IE);
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	72fb      	strb	r3, [r7, #11]
	}

	//c. Write to the configuration register
	Tx_Buf[0] = 0x0E;
 80008d4:	230e      	movs	r3, #14
 80008d6:	733b      	strb	r3, [r7, #12]
	Tx_Buf[1] = control_register;
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	737b      	strb	r3, [r7, #13]
	I2CMasterSendData(I2C_DEVICE_RTC,Tx_Buf,2,SlaveAddressRTC);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <RTC_DS3231_Config_Alarm+0x1c0>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <RTC_DS3231_Config_Alarm+0x1c4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	f107 010c 	add.w	r1, r7, #12
 80008e8:	2202      	movs	r2, #2
 80008ea:	f000 fca4 	bl	8001236 <I2CMasterSendData>

	return;
 80008ee:	bf00      	nop
}
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	2000000c 	.word	0x2000000c

08000900 <RTC_DS3231_Config_Alarm_Interrupt>:

void RTC_DS3231_Config_Alarm_Interrupt(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(DS3231_RTC_ALARM_INPUT_GPIO_PORT,DS3231_RTC_ALARM_INPUT_GPIO_PIN,EXTI_FALLING_TRIGGER,DS3231_RTC_ALARM_INPUT_IRQ_NUM);
 8000904:	2306      	movs	r3, #6
 8000906:	2201      	movs	r2, #1
 8000908:	2100      	movs	r1, #0
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <RTC_DS3231_Config_Alarm_Interrupt+0x14>)
 800090c:	f000 f824 	bl	8000958 <configure_external_gpio_interrupt>

	return;
 8000910:	bf00      	nop
}
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <RTC_DS3231_Config_Alarm_Output_GPIO>:

void RTC_DS3231_Config_Alarm_Output_GPIO(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	EnablePeriClk(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT);
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 800091e:	f001 f941 	bl	8001ba4 <EnablePeriClk>
	GPIOSetMode(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_MODE_OUTPUT);
 8000922:	2201      	movs	r2, #1
 8000924:	210f      	movs	r1, #15
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 8000928:	f000 fb35 	bl	8000f96 <GPIOSetMode>
	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_LOW);
 800092c:	2200      	movs	r2, #0
 800092e:	210f      	movs	r1, #15
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <RTC_DS3231_Config_Alarm_Output_GPIO+0x24>)
 8000932:	f000 fb54 	bl	8000fde <GPIOWritePin>

	return;
 8000936:	bf00      	nop
}
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <RTC_DS3231_Config_Button_Interrupt>:

void RTC_DS3231_Config_Button_Interrupt(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	configure_external_gpio_interrupt(BTN_INT_GPIO_PORT,BTN_INT_GPIO_PIN,EXTI_FALLING_TRIGGER,BTN_INT_IRQ_NUM);
 8000944:	2308      	movs	r3, #8
 8000946:	2201      	movs	r2, #1
 8000948:	2102      	movs	r1, #2
 800094a:	4802      	ldr	r0, [pc, #8]	; (8000954 <RTC_DS3231_Config_Button_Interrupt+0x14>)
 800094c:	f000 f804 	bl	8000958 <configure_external_gpio_interrupt>

	return;
 8000950:	bf00      	nop
}
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020000 	.word	0x40020000

08000958 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	4608      	mov	r0, r1
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	4603      	mov	r3, r0
 8000968:	70fb      	strb	r3, [r7, #3]
 800096a:	460b      	mov	r3, r1
 800096c:	70bb      	strb	r3, [r7, #2]
 800096e:	4613      	mov	r3, r2
 8000970:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <configure_external_gpio_interrupt+0x104>)
 8000974:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <configure_external_gpio_interrupt+0x108>)
 8000978:	61bb      	str	r3, [r7, #24]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 800097a:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <configure_external_gpio_interrupt+0x10c>)
 800097c:	617b      	str	r3, [r7, #20]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <configure_external_gpio_interrupt+0x110>)
 8000980:	613b      	str	r3, [r7, #16]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <configure_external_gpio_interrupt+0x114>)
 8000984:	60fb      	str	r3, [r7, #12]
	uint32_t OFFSET;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f001 f90c 	bl	8001ba4 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 faff 	bl	8000f96 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2201      	movs	r2, #1
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 fb78 	bl	8001094 <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2202      	movs	r2, #2
 80009a8:	4619      	mov	r1, r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fbb8 	bl	8001120 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 fb8e 	bl	80010d8 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	78fa      	ldrb	r2, [r7, #3]
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	431a      	orrs	r2, r3
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 80009ce:	78bb      	ldrb	r3, [r7, #2]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d108      	bne.n	80009e6 <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	78fa      	ldrb	r2, [r7, #3]
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	431a      	orrs	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 80009e6:	78bb      	ldrb	r3, [r7, #2]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d108      	bne.n	80009fe <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	78fa      	ldrb	r2, [r7, #3]
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	431a      	orrs	r2, r3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	60bb      	str	r3, [r7, #8]
	pSYSCFG_EXTI_CR_ADDR += OFFSET;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	210f      	movs	r1, #15
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	43d2      	mvns	r2, r2
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f81c 	bl	8000a70 <gpio_port_name_to_num>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	409a      	lsls	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	431a      	orrs	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 8000a4c:	787b      	ldrb	r3, [r7, #1]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fa6c 	bl	8001f2c <NVIC_EnableIRQ>
}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023844 	.word	0x40023844
 8000a60:	40013c00 	.word	0x40013c00
 8000a64:	40013c08 	.word	0x40013c08
 8000a68:	40013c0c 	.word	0x40013c0c
 8000a6c:	40013808 	.word	0x40013808

08000a70 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <gpio_port_name_to_num+0x90>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d102      	bne.n	8000a86 <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e036      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <gpio_port_name_to_num+0x94>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d102      	bne.n	8000a94 <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e02f      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <gpio_port_name_to_num+0x98>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d102      	bne.n	8000aa2 <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e028      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <gpio_port_name_to_num+0x9c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d102      	bne.n	8000ab0 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e021      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <gpio_port_name_to_num+0xa0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d102      	bne.n	8000abe <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e01a      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <gpio_port_name_to_num+0xa4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d102      	bne.n	8000acc <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e013      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <gpio_port_name_to_num+0xa8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d102      	bne.n	8000ada <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e00c      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <gpio_port_name_to_num+0xac>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d102      	bne.n	8000ae8 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e005      	b.n	8000af4 <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <gpio_port_name_to_num+0xb0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40021400 	.word	0x40021400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40021c00 	.word	0x40021c00
 8000b20:	40022000 	.word	0x40022000

08000b24 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6852      	ldr	r2, [r2, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	6892      	ldr	r2, [r2, #8]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7b1b      	ldrb	r3, [r3, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d16a      	bne.n	8000c1e <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a1a      	ldr	r2, [r3, #32]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0201 	orr.w	r2, r2, #1
 8000b56:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7b5b      	ldrb	r3, [r3, #13]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d11c      	bne.n	8000b9a <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0203 	bic.w	r2, r2, #3
 8000b6e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6912      	ldr	r2, [r2, #16]
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	699a      	ldr	r2, [r3, #24]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b88:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000b98:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b5b      	ldrb	r3, [r3, #13]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d11c      	bne.n	8000bdc <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0203 	bic.w	r2, r2, #3
 8000bb0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6912      	ldr	r2, [r2, #16]
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000bca:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000bda:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7b5b      	ldrb	r3, [r3, #13]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d11c      	bne.n	8000c1e <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0203 	bic.w	r2, r2, #3
 8000bf2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6912      	ldr	r2, [r2, #16]
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	699a      	ldr	r2, [r3, #24]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c0c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000c1c:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7d1b      	ldrb	r3, [r3, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 80bf 	bne.w	8000da6 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7d5b      	ldrb	r3, [r3, #21]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d124      	bne.n	8000c7a <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	699a      	ldr	r2, [r3, #24]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c3e:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6992      	ldr	r2, [r2, #24]
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000c58:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000c68:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6a1a      	ldr	r2, [r3, #32]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0210 	orr.w	r2, r2, #16
 8000c78:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7d5b      	ldrb	r3, [r3, #21]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d124      	bne.n	8000ccc <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c90:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6992      	ldr	r2, [r2, #24]
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000caa:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	699a      	ldr	r2, [r3, #24]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000cba:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a1a      	ldr	r2, [r3, #32]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0210 	orr.w	r2, r2, #16
 8000cca:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7d5b      	ldrb	r3, [r3, #21]
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d124      	bne.n	8000d1e <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ce2:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6992      	ldr	r2, [r2, #24]
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	699a      	ldr	r2, [r3, #24]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000cfc:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000d0c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a1a      	ldr	r2, [r3, #32]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f042 0210 	orr.w	r2, r2, #16
 8000d1c:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7d5b      	ldrb	r3, [r3, #21]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d13f      	bne.n	8000da6 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d34:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d44:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000d54:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0220 	bic.w	r2, r2, #32
 8000d64:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a1a      	ldr	r2, [r3, #32]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d74:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000d84:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 0204 	orr.w	r2, r2, #4
 8000d94:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 0210 	orr.w	r2, r2, #16
 8000da4:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7f1b      	ldrb	r3, [r3, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d16a      	bne.n	8000e84 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dbc:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f5b      	ldrb	r3, [r3, #29]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d11c      	bne.n	8000e00 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	69da      	ldr	r2, [r3, #28]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0203 	bic.w	r2, r2, #3
 8000dd4:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6a12      	ldr	r2, [r2, #32]
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	69da      	ldr	r2, [r3, #28]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dee:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000dfe:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f5b      	ldrb	r3, [r3, #29]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d11c      	bne.n	8000e42 <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	69da      	ldr	r2, [r3, #28]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0203 	bic.w	r2, r2, #3
 8000e16:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6a12      	ldr	r2, [r2, #32]
 8000e20:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e30:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000e40:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7f5b      	ldrb	r3, [r3, #29]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d11c      	bne.n	8000e84 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0203 	bic.w	r2, r2, #3
 8000e58:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6a12      	ldr	r2, [r2, #32]
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	69da      	ldr	r2, [r3, #28]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e72:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	69da      	ldr	r2, [r3, #28]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000e82:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d16d      	bne.n	8000f6a <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6a1a      	ldr	r2, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e9c:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d11c      	bne.n	8000ee2 <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	69da      	ldr	r2, [r3, #28]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000eb6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ed0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000ee0:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d11c      	bne.n	8000f26 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000efa:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	69da      	ldr	r2, [r3, #28]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000f14:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000f24:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d11c      	bne.n	8000f6a <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	69da      	ldr	r2, [r3, #28]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000f3e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000f58:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000f68:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70fb      	strb	r3, [r7, #3]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	0052      	lsls	r2, r2, #1
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	78b9      	ldrb	r1, [r7, #2]
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	0052      	lsls	r2, r2, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	601a      	str	r2, [r3, #0]

}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	70fb      	strb	r3, [r7, #3]
 8000fea:	4613      	mov	r3, r2
 8000fec:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	78fa      	ldrb	r2, [r7, #3]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	43d2      	mvns	r2, r2
 8001000:	401a      	ands	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	78b9      	ldrb	r1, [r7, #2]
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	431a      	orrs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	615a      	str	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
 800102e:	4613      	mov	r3, r2
 8001030:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8001044:	7afa      	ldrb	r2, [r7, #11]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3208      	adds	r2, #8
 800104a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104e:	7aba      	ldrb	r2, [r7, #10]
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	210f      	movs	r1, #15
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	43d2      	mvns	r2, r2
 800105a:	4611      	mov	r1, r2
 800105c:	7afa      	ldrb	r2, [r7, #11]
 800105e:	4019      	ands	r1, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3208      	adds	r2, #8
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8001068:	7afa      	ldrb	r2, [r7, #11]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3208      	adds	r2, #8
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	78b9      	ldrb	r1, [r7, #2]
 8001074:	7aba      	ldrb	r2, [r7, #10]
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	4611      	mov	r1, r2
 800107e:	7afa      	ldrb	r2, [r7, #11]
 8001080:	4319      	orrs	r1, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3208      	adds	r2, #8
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	4613      	mov	r3, r2
 80010a2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	78fa      	ldrb	r2, [r7, #3]
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	78b9      	ldrb	r1, [r7, #2]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	431a      	orrs	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	605a      	str	r2, [r3, #4]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	4613      	mov	r3, r2
 80010e6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	2103      	movs	r1, #3
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	43d2      	mvns	r2, r2
 80010fc:	401a      	ands	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	78b9      	ldrb	r1, [r7, #2]
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	60da      	str	r2, [r3, #12]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
 800112c:	4613      	mov	r3, r2
 800112e:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	78fa      	ldrb	r2, [r7, #3]
 800113a:	0052      	lsls	r2, r2, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	43d2      	mvns	r2, r2
 8001144:	401a      	ands	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	78b9      	ldrb	r1, [r7, #2]
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	609a      	str	r2, [r3, #8]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <I2CPeriConfig>:
static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress);
static void I2C_ClearSTOPFStatusBit(uint32_t *I2CAddress);
static void I2C_ClearAFStatusBit(uint32_t *I2CAddress);

void I2CPeriConfig(uint32_t *I2CAddress, struct I2C_Config_t *pI2CConfig)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

	//Configuring the I2C Peripheral Frequency
	pI2C->I2C_CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]
	pI2C->I2C_CR2 |= (pI2CConfig->I2C_PeriFreq << I2C_CR2_FREQ);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	431a      	orrs	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	605a      	str	r2, [r3, #4]

	//Configuring the I2C Speed Mode
	pI2C->I2C_CCR &= ~(1 << I2C_CCR_FS);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	61da      	str	r2, [r3, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_SpeedMode << I2C_CCR_FS);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	03db      	lsls	r3, r3, #15
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	61da      	str	r2, [r3, #28]

	//Configuring the I2C FM Duty Cycle
	if(pI2CConfig->I2C_SpeedMode == I2C_MODE_FM)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10d      	bne.n	80011d0 <I2CPeriConfig+0x68>
	{
		pI2C->I2C_CCR &= ~(1 << I2C_CCR_DUTY);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	61da      	str	r2, [r3, #28]
		pI2C->I2C_CCR |= (pI2CConfig->I2C_FMDutyCycle << I2C_CCR_DUTY);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	039b      	lsls	r3, r3, #14
 80011ca:	431a      	orrs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	61da      	str	r2, [r3, #28]
	}

	//Configuring the I2C CCR Value
	pI2C->I2C_CCR &= ~(0x0FFF << I2C_CCR_CCR);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80011d8:	f023 030f 	bic.w	r3, r3, #15
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	61d3      	str	r3, [r2, #28]
	pI2C->I2C_CCR |= (pI2CConfig->I2C_CCRValue << I2C_CCR_CCR);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	61da      	str	r2, [r3, #28]

	//Configuring the ACK Value
	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]
	pI2C->I2C_CR1 |= (pI2CConfig->I2C_AckControl << I2C_CR1_ACK);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	431a      	orrs	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]

}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <I2CEnable>:

void I2CEnable(uint32_t *I2CAddress)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <I2CMasterSendData>:

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}

void I2CMasterSendData(uint32_t *I2CAddress,uint8_t *TxBuf,uint32_t Len, uint8_t SlaveAddress)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	617b      	str	r3, [r7, #20]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f84c 	bl	80012e6 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 800124e:	bf00      	nop
 8001250:	2101      	movs	r1, #1
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f869 	bl	800132a <I2C_GetFlagStatus>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f8      	beq.n	8001250 <I2CMasterSendData+0x1a>

	//3. Send Slave Address Address Along with  Write Bit
	SlaveAddress = SlaveAddress << 1;
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(0x1);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	70fb      	strb	r3, [r7, #3]

	I2C_SendSlaveAddress(I2CAddress,SlaveAddress);
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	4619      	mov	r1, r3
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 f86f 	bl	8001354 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001276:	bf00      	nop
 8001278:	2102      	movs	r1, #2
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f855 	bl	800132a <I2C_GetFlagStatus>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f8      	beq.n	8001278 <I2CMasterSendData+0x42>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f874 	bl	8001374 <I2C_ClearADDRStatusBit>

	//5. Send Data While Len > 0

	while(Len > 0)
 800128c:	e012      	b.n	80012b4 <I2CMasterSendData+0x7e>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 800128e:	bf00      	nop
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f849 	bl	800132a <I2C_GetFlagStatus>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f8      	beq.n	8001290 <I2CMasterSendData+0x5a>
		pI2C->I2C_DR = *TxBuf;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	611a      	str	r2, [r3, #16]
		TxBuf++;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
		Len--;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1e9      	bne.n	800128e <I2CMasterSendData+0x58>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 80012ba:	bf00      	nop
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f833 	bl	800132a <I2C_GetFlagStatus>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1f8      	bne.n	80012bc <I2CMasterSendData+0x86>
 80012ca:	2104      	movs	r1, #4
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f82c 	bl	800132a <I2C_GetFlagStatus>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d1f1      	bne.n	80012bc <I2CMasterSendData+0x86>

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f815 	bl	8001308 <I2C_SendStopBit>

}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <I2C_SendStartBit>:
	printf("\r\n");

}

static void I2C_SendStartBit(uint32_t *I2CAddress)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_START);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <I2C_SendStopBit>:

static void I2C_SendStopBit(uint32_t *I2CAddress)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <I2C_GetFlagStatus>:

static uint8_t I2C_GetFlagStatus(uint32_t *I2CAddress, uint32_t Flag)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]

	if(pI2C->I2C_SR1 & Flag)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <I2C_GetFlagStatus+0x1e>
	{
			return FLAG_SET;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <I2C_GetFlagStatus+0x20>
	}

	return FLAG_RESET;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <I2C_SendSlaveAddress>:

static void I2C_SendSlaveAddress(uint32_t *I2CAddress, uint8_t SlaveAddress)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	//uint32_t status;

	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]

	//status = pI2C->I2C_SR1;

	pI2C->I2C_DR = SlaveAddress;
 8001364:	78fa      	ldrb	r2, [r7, #3]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	611a      	str	r2, [r3, #16]

	//(void)status;
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <I2C_ClearADDRStatusBit>:

static void I2C_ClearADDRStatusBit(uint32_t *I2CAddress)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint32_t status;
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60fb      	str	r3, [r7, #12]

	status = pI2C->I2C_SR1;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	60bb      	str	r3, [r7, #8]
	status = pI2C->I2C_SR2;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	60bb      	str	r3, [r7, #8]

	(void)status;
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <I2CConfigureTrise>:

	pI2C->I2C_SR1 &= ~(1 << I2C_SR1_AF);
}

void I2CConfigureTrise(uint32_t *I2CAddress,uint8_t TriseVal)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_TRISE = TriseVal;
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	621a      	str	r2, [r3, #32]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <I2CEnableAck>:
	pI2C->I2C_OAR1 &= ~(1 << 15);
	pI2C->I2C_OAR1 |= (1 << 14);
}

void I2CEnableAck(uint32_t *I2CAddress)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 |= (1 << I2C_CR1_ACK);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <I2CDisableAck>:

void I2CDisableAck(uint32_t *I2CAddress)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60fb      	str	r3, [r7, #12]

	pI2C->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <I2CMaster_DS3231_RTC_Read>:

	return;
}

void I2CMaster_DS3231_RTC_Read(uint32_t *I2CAddress,uint8_t *RxBuf,uint32_t Len,uint8_t register_address, uint8_t SlaveAddress)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b088      	sub	sp, #32
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	70fb      	strb	r3, [r7, #3]
	uint8_t address_length,i;
	uint8_t data[1];
	uint8_t LocalSlaveAddress;

	address_length = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	77fb      	strb	r3, [r7, #31]
	data[0] = register_address;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	753b      	strb	r3, [r7, #20]

	//Send the Address Bytes to EEPROM
	struct I2C_RegDef_t *pI2C = (struct I2C_RegDef_t *) I2CAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	61bb      	str	r3, [r7, #24]

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff ff66 	bl	80012e6 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 800141a:	bf00      	nop
 800141c:	2101      	movs	r1, #1
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff ff83 	bl	800132a <I2C_GetFlagStatus>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f8      	beq.n	800141c <I2CMaster_DS3231_RTC_Read+0x22>

	//3. Send Slave Address Address Along with  Write Bit
	LocalSlaveAddress = SlaveAddress << 1;
 800142a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress &= ~(0x1);
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	4619      	mov	r1, r3
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ff88 	bl	8001354 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 8001444:	bf00      	nop
 8001446:	2102      	movs	r1, #2
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff ff6e 	bl	800132a <I2C_GetFlagStatus>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f8      	beq.n	8001446 <I2CMaster_DS3231_RTC_Read+0x4c>

	I2C_ClearADDRStatusBit(I2CAddress);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff ff8d 	bl	8001374 <I2C_ClearADDRStatusBit>


	//5. Send EEPROM Address Bytes

	i=0;
 800145a:	2300      	movs	r3, #0
 800145c:	77bb      	strb	r3, [r7, #30]
	while(address_length > 0)
 800145e:	e015      	b.n	800148c <I2CMaster_DS3231_RTC_Read+0x92>
	{
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE));
 8001460:	bf00      	nop
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ff60 	bl	800132a <I2C_GetFlagStatus>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f8      	beq.n	8001462 <I2CMaster_DS3231_RTC_Read+0x68>
		pI2C->I2C_DR = data[i];
 8001470:	7fbb      	ldrb	r3, [r7, #30]
 8001472:	3320      	adds	r3, #32
 8001474:	443b      	add	r3, r7
 8001476:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800147a:	461a      	mov	r2, r3
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	611a      	str	r2, [r3, #16]
		i++;
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	3301      	adds	r3, #1
 8001484:	77bb      	strb	r3, [r7, #30]
		address_length--;
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	3b01      	subs	r3, #1
 800148a:	77fb      	strb	r3, [r7, #31]
	while(address_length > 0)
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e6      	bne.n	8001460 <I2CMaster_DS3231_RTC_Read+0x66>
	}

	//6. Wait for last byte transmission to be completed
	// Check for TXE=1 and BTF=1

	while(I2C_GetFlagStatus(I2CAddress,I2C_FLAG_TXE)!=1 || I2C_GetFlagStatus(I2CAddress,I2C_FLAG_BTF)!=1);
 8001492:	bf00      	nop
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff47 	bl	800132a <I2C_GetFlagStatus>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d1f8      	bne.n	8001494 <I2CMaster_DS3231_RTC_Read+0x9a>
 80014a2:	2104      	movs	r1, #4
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ff40 	bl	800132a <I2C_GetFlagStatus>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d1f1      	bne.n	8001494 <I2CMaster_DS3231_RTC_Read+0x9a>

	//Read from EEPROM

	//1. Generate Start Condition
	I2C_SendStartBit(I2CAddress);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ff18 	bl	80012e6 <I2C_SendStartBit>

	//2. Check for Successful Transmission of Start Condition using SB Flag
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_SB));
 80014b6:	bf00      	nop
 80014b8:	2101      	movs	r1, #1
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff ff35 	bl	800132a <I2C_GetFlagStatus>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f8      	beq.n	80014b8 <I2CMaster_DS3231_RTC_Read+0xbe>

	//3. Send Slave Address Address Along with Read Bit Set
	LocalSlaveAddress = SlaveAddress << 1;
 80014c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
	LocalSlaveAddress |= (0x1);
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]

	I2C_SendSlaveAddress(I2CAddress,LocalSlaveAddress);
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff ff3a 	bl	8001354 <I2C_SendSlaveAddress>

	//4. Check for Successful Completion of Address Phase (ACK received from slave)
	while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_ADDR));
 80014e0:	bf00      	nop
 80014e2:	2102      	movs	r1, #2
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff ff20 	bl	800132a <I2C_GetFlagStatus>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f8      	beq.n	80014e2 <I2CMaster_DS3231_RTC_Read+0xe8>

	I2C_ClearADDRStatusBit(I2CAddress);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff ff3f 	bl	8001374 <I2C_ClearADDRStatusBit>

	//5. Receive Data While Len >=2 with ACK Bit Set
	if(Len >= 2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d919      	bls.n	8001530 <I2CMaster_DS3231_RTC_Read+0x136>
	{
		I2CEnableAck(I2CAddress);
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff ff5a 	bl	80013b6 <I2CEnableAck>
		while(Len >= 2)
 8001502:	e012      	b.n	800152a <I2CMaster_DS3231_RTC_Read+0x130>
		{
			while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 8001504:	bf00      	nop
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff0e 	bl	800132a <I2C_GetFlagStatus>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f8      	beq.n	8001506 <I2CMaster_DS3231_RTC_Read+0x10c>
			*RxBuf = pI2C->I2C_DR;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	701a      	strb	r2, [r3, #0]
			RxBuf++;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
			Len--;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
		while(Len >= 2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d8e9      	bhi.n	8001504 <I2CMaster_DS3231_RTC_Read+0x10a>
		}
	}

	//6. Receive Last Byte with NACK Bit Set
	if(Len == 1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d115      	bne.n	8001562 <I2CMaster_DS3231_RTC_Read+0x168>
	{
		I2CDisableAck(I2CAddress);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff ff4e 	bl	80013d8 <I2CDisableAck>
		while(! I2C_GetFlagStatus(I2CAddress,I2C_FLAG_RXNE));
 800153c:	bf00      	nop
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fef2 	bl	800132a <I2C_GetFlagStatus>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f8      	beq.n	800153e <I2CMaster_DS3231_RTC_Read+0x144>
		*RxBuf = pI2C->I2C_DR;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
		Len--;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
	}

	//7. Send Stop Bit
	I2C_SendStopBit(I2CAddress);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fed0 	bl	8001308 <I2C_SendStopBit>

	return;
 8001568:	bf00      	nop
}
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <lcd_pcf8574_init>:

extern uint32_t * I2C_DEVICE;
extern uint8_t SlaveAddress;

void lcd_pcf8574_init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	//1. Initializing and Configuring the HD44780 display to 4 bit-mode
	delay_us(50000);  			// wait for >40ms
 8001574:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001578:	f7fe fe8a 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800157c:	2030      	movs	r0, #48	; 0x30
 800157e:	f000 f845 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >4.1ms
 8001582:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001586:	f7fe fe83 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 800158a:	2030      	movs	r0, #48	; 0x30
 800158c:	f000 f83e 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(50000);  			// wait for >100us
 8001590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001594:	f7fe fe7c 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x30);
 8001598:	2030      	movs	r0, #48	; 0x30
 800159a:	f000 f837 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(50000);
 800159e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015a2:	f7fe fe75 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x20);  		// 4bit mode
 80015a6:	2020      	movs	r0, #32
 80015a8:	f000 f830 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(5000);
 80015ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80015b0:	f7fe fe6e 	bl	8000290 <delay_us>

	//2. Display Configuration
	lcd_pcf8574_send_cmd(0x28); 	//Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80015b4:	2028      	movs	r0, #40	; 0x28
 80015b6:	f000 f829 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80015ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015be:	f7fe fe67 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80015c2:	2008      	movs	r0, #8
 80015c4:	f000 f822 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80015c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015cc:	f7fe fe60 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x01);  	//Clear display
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 f81b 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80015d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015da:	f7fe fe59 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x02);
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 f814 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80015e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015e8:	f7fe fe52 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80015ec:	2006      	movs	r0, #6
 80015ee:	f000 f80d 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 80015f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015f6:	f7fe fe4b 	bl	8000290 <delay_us>
	lcd_pcf8574_send_cmd(0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80015fa:	200c      	movs	r0, #12
 80015fc:	f000 f806 	bl	800160c <lcd_pcf8574_send_cmd>
	delay_us(3000);
 8001600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001604:	f7fe fe44 	bl	8000290 <delay_us>

	return;
 8001608:	bf00      	nop
}
 800160a:	bd80      	pop	{r7, pc}

0800160c <lcd_pcf8574_send_cmd>:

void lcd_pcf8574_send_cmd(uint8_t cmd)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd & 0xF0);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f023 030f 	bic.w	r3, r3, #15
 800161c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0C);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f043 030c 	orr.w	r3, r3, #12
 800162a:	b2db      	uxtb	r3, r3
 800162c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x08);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	b2db      	uxtb	r3, r3
 8001636:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0C);
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	f043 030c 	orr.w	r3, r3, #12
 800163e:	b2db      	uxtb	r3, r3
 8001640:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x08);
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	b2db      	uxtb	r3, r3
 800164a:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <lcd_pcf8574_send_cmd+0x5c>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <lcd_pcf8574_send_cmd+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	f107 0108 	add.w	r1, r7, #8
 8001658:	2204      	movs	r2, #4
 800165a:	f7ff fdec 	bl	8001236 <I2CMasterSendData>

	return;
 800165e:	bf00      	nop
}
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <lcd_pcf8574_send_data>:

void lcd_pcf8574_send_data(uint8_t data)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	//Assuming the LCD has been set to 4 bit mode during the initialization
	uint8_t data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f023 030f 	bic.w	r3, r3, #15
 8001680:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	73bb      	strb	r3, [r7, #14]

	data_t[0] = (data_u | 0x0D);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f043 030d 	orr.w	r3, r3, #13
 800168e:	b2db      	uxtb	r3, r3
 8001690:	723b      	strb	r3, [r7, #8]
	data_t[1] = (data_u | 0x09);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f043 0309 	orr.w	r3, r3, #9
 8001698:	b2db      	uxtb	r3, r3
 800169a:	727b      	strb	r3, [r7, #9]
	data_t[2] = (data_l | 0x0D);
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	f043 030d 	orr.w	r3, r3, #13
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (data_l | 0x09);
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	f043 0309 	orr.w	r3, r3, #9
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	72fb      	strb	r3, [r7, #11]

	I2CMasterSendData(I2C_DEVICE,data_t,4,SlaveAddress);
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <lcd_pcf8574_send_data+0x5c>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <lcd_pcf8574_send_data+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f107 0108 	add.w	r1, r7, #8
 80016bc:	2204      	movs	r2, #4
 80016be:	f7ff fdba 	bl	8001236 <I2CMasterSendData>

	return;
 80016c2:	bf00      	nop
}
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <lcd_pcf8574_clear_screen>:

void lcd_pcf8574_clear_screen(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x01);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff ff97 	bl	800160c <lcd_pcf8574_send_cmd>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <lcd_pcf8574_return_home>:

void lcd_pcf8574_return_home(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
	lcd_pcf8574_send_cmd(0x02);
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff ff90 	bl	800160c <lcd_pcf8574_send_cmd>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <lcd_pcf8574_set_position>:

void lcd_pcf8574_set_position(uint8_t row, uint8_t col)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]
	uint8_t position, cmd;

	if(row == 0)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d108      	bne.n	8001718 <lcd_pcf8574_set_position+0x28>
	{
		if(col>=0 && col<40)
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	2b27      	cmp	r3, #39	; 0x27
 800170a:	d802      	bhi.n	8001712 <lcd_pcf8574_set_position+0x22>
			position = col;
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e011      	b.n	8001736 <lcd_pcf8574_set_position+0x46>
		else
			position = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e00e      	b.n	8001736 <lcd_pcf8574_set_position+0x46>
	}
	else if(row == 1)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d109      	bne.n	8001732 <lcd_pcf8574_set_position+0x42>
	{
		if(col>=0 && col<40)
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	2b27      	cmp	r3, #39	; 0x27
 8001722:	d803      	bhi.n	800172c <lcd_pcf8574_set_position+0x3c>
			position = 64 + col;
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	3340      	adds	r3, #64	; 0x40
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e004      	b.n	8001736 <lcd_pcf8574_set_position+0x46>
		else
			position = 64;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e001      	b.n	8001736 <lcd_pcf8574_set_position+0x46>
	}
	else
	{
		position = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
	}

	cmd = 0x80 | position;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173c:	73bb      	strb	r3, [r7, #14]
	lcd_pcf8574_send_cmd(cmd);
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff63 	bl	800160c <lcd_pcf8574_send_cmd>

	return;
 8001746:	bf00      	nop
}
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <RTC_Display_Calendar_LCD>:

	return;
}

void RTC_Display_Calendar_LCD(struct Date *date, struct Time *time)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	static uint32_t count = 0;
	char dow[4];
	char mon[4];

	//Ensure that printf is redirected to LCD is "syscalls.c" file
	if(count == 0)
 800175a:	4b91      	ldr	r3, [pc, #580]	; (80019a0 <RTC_Display_Calendar_LCD+0x250>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d165      	bne.n	800182e <RTC_Display_Calendar_LCD+0xde>
	{
		memset(&saved_time,0,sizeof(struct Time));
 8001762:	2204      	movs	r2, #4
 8001764:	2100      	movs	r1, #0
 8001766:	488f      	ldr	r0, [pc, #572]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 8001768:	f000 fdc4 	bl	80022f4 <memset>
		memset(&saved_date,0,sizeof(struct Date));
 800176c:	2204      	movs	r2, #4
 800176e:	2100      	movs	r1, #0
 8001770:	488d      	ldr	r0, [pc, #564]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001772:	f000 fdbf 	bl	80022f4 <memset>

		//Print the Time Information
		lcd_pcf8574_clear_screen();
 8001776:	f7ff ffad 	bl	80016d4 <lcd_pcf8574_clear_screen>
		delay_us(3000);
 800177a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800177e:	f7fe fd87 	bl	8000290 <delay_us>
		lcd_pcf8574_return_home();
 8001782:	f7ff ffae 	bl	80016e2 <lcd_pcf8574_return_home>
		delay_us(3000);
 8001786:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800178a:	f7fe fd81 	bl	8000290 <delay_us>
		printf("    %02d:%02d:%02d",time->hours,time->minutes,time->seconds);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	4619      	mov	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	461a      	mov	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4883      	ldr	r0, [pc, #524]	; (80019ac <RTC_Display_Calendar_LCD+0x25c>)
 80017a0:	f000 fe8e 	bl	80024c0 <iprintf>

		//Saving the time information
		saved_time.seconds = time->seconds;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 80017aa:	701a      	strb	r2, [r3, #0]
		saved_time.minutes = time->minutes;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	785a      	ldrb	r2, [r3, #1]
 80017b0:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 80017b2:	705a      	strb	r2, [r3, #1]
		saved_time.hours = time->hours;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	789a      	ldrb	r2, [r3, #2]
 80017b8:	4b7a      	ldr	r3, [pc, #488]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 80017ba:	709a      	strb	r2, [r3, #2]

		//Print the Date Information
		lcd_pcf8574_set_position(1,0);
 80017bc:	2100      	movs	r1, #0
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff ff96 	bl	80016f0 <lcd_pcf8574_set_position>
		delay_us(3000);
 80017c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017c8:	f7fe fd62 	bl	8000290 <delay_us>
		format_dow(date,dow);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f912 	bl	80019fc <format_dow>
		format_mon(date,mon);
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f960 	bl	8001aa4 <format_mon>
		printf("  %s %02d-%s-%02d",dow,date->date,mon,date->year);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	f107 010c 	add.w	r1, r7, #12
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	4602      	mov	r2, r0
 80017fc:	486c      	ldr	r0, [pc, #432]	; (80019b0 <RTC_Display_Calendar_LCD+0x260>)
 80017fe:	f000 fe5f 	bl	80024c0 <iprintf>

		//Saving the date information
		saved_date.date = date->date;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001808:	701a      	strb	r2, [r3, #0]
		saved_date.month = date->month;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	785a      	ldrb	r2, [r3, #1]
 800180e:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001810:	705a      	strb	r2, [r3, #1]
		saved_date.year = date->year;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	789a      	ldrb	r2, [r3, #2]
 8001816:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001818:	709a      	strb	r2, [r3, #2]
		saved_date.dayofweek = date->dayofweek;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	78da      	ldrb	r2, [r3, #3]
 800181e:	4b62      	ldr	r3, [pc, #392]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001820:	70da      	strb	r2, [r3, #3]

		//Update count value
		count++;
 8001822:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <RTC_Display_Calendar_LCD+0x250>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a5d      	ldr	r2, [pc, #372]	; (80019a0 <RTC_Display_Calendar_LCD+0x250>)
 800182a:	6013      	str	r3, [r2, #0]
			printf("%s",dow);
			saved_date.dayofweek = date->dayofweek;
		}
	}

	return;
 800182c:	e0b4      	b.n	8001998 <RTC_Display_Calendar_LCD+0x248>
		if(saved_time.seconds != time->seconds)
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d011      	beq.n	800185e <RTC_Display_Calendar_LCD+0x10e>
			lcd_pcf8574_set_position(0,10);
 800183a:	210a      	movs	r1, #10
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff ff57 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f7fe fd23 	bl	8000290 <delay_us>
			printf("%02d",time->seconds);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4858      	ldr	r0, [pc, #352]	; (80019b4 <RTC_Display_Calendar_LCD+0x264>)
 8001852:	f000 fe35 	bl	80024c0 <iprintf>
			saved_time.seconds = time->seconds;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 800185c:	701a      	strb	r2, [r3, #0]
		if(saved_time.minutes != time->minutes)
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 8001860:	785a      	ldrb	r2, [r3, #1]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	429a      	cmp	r2, r3
 8001868:	d011      	beq.n	800188e <RTC_Display_Calendar_LCD+0x13e>
			lcd_pcf8574_set_position(0,7);
 800186a:	2107      	movs	r1, #7
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff3f 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f7fe fd0b 	bl	8000290 <delay_us>
			printf("%02d",time->minutes);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	4619      	mov	r1, r3
 8001880:	484c      	ldr	r0, [pc, #304]	; (80019b4 <RTC_Display_Calendar_LCD+0x264>)
 8001882:	f000 fe1d 	bl	80024c0 <iprintf>
			saved_time.minutes = time->minutes;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	785a      	ldrb	r2, [r3, #1]
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 800188c:	705a      	strb	r2, [r3, #1]
		if(saved_time.hours != time->hours)
 800188e:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 8001890:	789a      	ldrb	r2, [r3, #2]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	429a      	cmp	r2, r3
 8001898:	d011      	beq.n	80018be <RTC_Display_Calendar_LCD+0x16e>
			lcd_pcf8574_set_position(0,4);
 800189a:	2104      	movs	r1, #4
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff27 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 80018a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a6:	f7fe fcf3 	bl	8000290 <delay_us>
			printf("%02d",time->hours);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4840      	ldr	r0, [pc, #256]	; (80019b4 <RTC_Display_Calendar_LCD+0x264>)
 80018b2:	f000 fe05 	bl	80024c0 <iprintf>
			saved_time.hours = time->hours;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	789a      	ldrb	r2, [r3, #2]
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <RTC_Display_Calendar_LCD+0x254>)
 80018bc:	709a      	strb	r2, [r3, #2]
		if(saved_date.date != date->date)
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d011      	beq.n	80018ee <RTC_Display_Calendar_LCD+0x19e>
			lcd_pcf8574_set_position(1,6);
 80018ca:	2106      	movs	r1, #6
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ff0f 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 80018d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d6:	f7fe fcdb 	bl	8000290 <delay_us>
			printf("%02d",date->date);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	4834      	ldr	r0, [pc, #208]	; (80019b4 <RTC_Display_Calendar_LCD+0x264>)
 80018e2:	f000 fded 	bl	80024c0 <iprintf>
			saved_date.date = date->date;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 80018ec:	701a      	strb	r2, [r3, #0]
		if(saved_date.month != date->month)
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 80018f0:	785a      	ldrb	r2, [r3, #1]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785b      	ldrb	r3, [r3, #1]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d017      	beq.n	800192a <RTC_Display_Calendar_LCD+0x1da>
			lcd_pcf8574_set_position(1,9);
 80018fa:	2109      	movs	r1, #9
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff fef7 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 8001902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001906:	f7fe fcc3 	bl	8000290 <delay_us>
			format_mon(date,mon);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8c7 	bl	8001aa4 <format_mon>
			printf("%s",mon);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	4826      	ldr	r0, [pc, #152]	; (80019b8 <RTC_Display_Calendar_LCD+0x268>)
 800191e:	f000 fdcf 	bl	80024c0 <iprintf>
			saved_date.month = date->month;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	785a      	ldrb	r2, [r3, #1]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001928:	705a      	strb	r2, [r3, #1]
		if(saved_date.year != date->year)
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 800192c:	789a      	ldrb	r2, [r3, #2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	429a      	cmp	r2, r3
 8001934:	d011      	beq.n	800195a <RTC_Display_Calendar_LCD+0x20a>
			lcd_pcf8574_set_position(1,13);
 8001936:	210d      	movs	r1, #13
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fed9 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 800193e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001942:	f7fe fca5 	bl	8000290 <delay_us>
			printf("%02d",date->year);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	4619      	mov	r1, r3
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <RTC_Display_Calendar_LCD+0x264>)
 800194e:	f000 fdb7 	bl	80024c0 <iprintf>
			saved_date.year = date->year;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	789a      	ldrb	r2, [r3, #2]
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001958:	709a      	strb	r2, [r3, #2]
		if(saved_date.dayofweek != date->dayofweek)
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 800195c:	78da      	ldrb	r2, [r3, #3]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78db      	ldrb	r3, [r3, #3]
 8001962:	429a      	cmp	r2, r3
 8001964:	d018      	beq.n	8001998 <RTC_Display_Calendar_LCD+0x248>
			lcd_pcf8574_set_position(1,2);
 8001966:	2102      	movs	r1, #2
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fec1 	bl	80016f0 <lcd_pcf8574_set_position>
			delay_us(500);
 800196e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001972:	f7fe fc8d 	bl	8000290 <delay_us>
			format_dow(date,dow);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f83d 	bl	80019fc <format_dow>
			printf("%s",dow);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <RTC_Display_Calendar_LCD+0x268>)
 800198a:	f000 fd99 	bl	80024c0 <iprintf>
			saved_date.dayofweek = date->dayofweek;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	78da      	ldrb	r2, [r3, #3]
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <RTC_Display_Calendar_LCD+0x258>)
 8001994:	70da      	strb	r2, [r3, #3]
	return;
 8001996:	bf00      	nop
 8001998:	bf00      	nop
}
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200000c4 	.word	0x200000c4
 80019a4:	200000c0 	.word	0x200000c0
 80019a8:	200000bc 	.word	0x200000bc
 80019ac:	080033c4 	.word	0x080033c4
 80019b0:	080033d8 	.word	0x080033d8
 80019b4:	080033ec 	.word	0x080033ec
 80019b8:	080033f4 	.word	0x080033f4

080019bc <RTC_Alarm_IRQHandler>:

	return;
}

void RTC_Alarm_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <RTC_Alarm_IRQHandler+0x24>)
 80019c4:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	RTC_Alarm_Interrupt_Callback();
 80019c6:	f000 f80d 	bl	80019e4 <RTC_Alarm_Interrupt_Callback>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << RTC_ALARM_INTERRUPT_EXTI_PIN);		// Clearing the EXTI_PR Register
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]

	return;
 80019d6:	bf00      	nop
}
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40013c14 	.word	0x40013c14

080019e4 <RTC_Alarm_Interrupt_Callback>:

void RTC_Alarm_Interrupt_Callback(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	GPIOWritePin(RTC_ALARM_GPIO_PORT,RTC_ALARM_GPIO_PIN,GPIO_HIGH);
 80019e8:	2201      	movs	r2, #1
 80019ea:	210f      	movs	r1, #15
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <RTC_Alarm_Interrupt_Callback+0x14>)
 80019ee:	f7ff faf6 	bl	8000fde <GPIOWritePin>

	return;
 80019f2:	bf00      	nop
}
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40020c00 	.word	0x40020c00

080019fc <format_dow>:

static void format_dow(struct Date *date,char *dow)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	switch(date->dayofweek)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d834      	bhi.n	8001a7a <format_dow+0x7e>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <format_dow+0x1c>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a35 	.word	0x08001a35
 8001a1c:	08001a3f 	.word	0x08001a3f
 8001a20:	08001a49 	.word	0x08001a49
 8001a24:	08001a53 	.word	0x08001a53
 8001a28:	08001a5d 	.word	0x08001a5d
 8001a2c:	08001a67 	.word	0x08001a67
 8001a30:	08001a71 	.word	0x08001a71
	{
		case 1:
			strcpy(dow,"Mon");
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <format_dow+0x8c>)
 8001a38:	6810      	ldr	r0, [r2, #0]
 8001a3a:	6018      	str	r0, [r3, #0]
			break;
 8001a3c:	e01e      	b.n	8001a7c <format_dow+0x80>
		case 2:
			strcpy(dow,"Tue");
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <format_dow+0x90>)
 8001a42:	6810      	ldr	r0, [r2, #0]
 8001a44:	6018      	str	r0, [r3, #0]
			break;
 8001a46:	e019      	b.n	8001a7c <format_dow+0x80>
		case 3:
			strcpy(dow,"Wed");
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <format_dow+0x94>)
 8001a4c:	6810      	ldr	r0, [r2, #0]
 8001a4e:	6018      	str	r0, [r3, #0]
			break;
 8001a50:	e014      	b.n	8001a7c <format_dow+0x80>
		case 4:
			strcpy(dow,"Thu");
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <format_dow+0x98>)
 8001a56:	6810      	ldr	r0, [r2, #0]
 8001a58:	6018      	str	r0, [r3, #0]
			break;
 8001a5a:	e00f      	b.n	8001a7c <format_dow+0x80>
		case 5:
			strcpy(dow,"Fri");
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <format_dow+0x9c>)
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	6018      	str	r0, [r3, #0]
			break;
 8001a64:	e00a      	b.n	8001a7c <format_dow+0x80>
		case 6:
			strcpy(dow,"Sat");
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <format_dow+0xa0>)
 8001a6a:	6810      	ldr	r0, [r2, #0]
 8001a6c:	6018      	str	r0, [r3, #0]
			break;
 8001a6e:	e005      	b.n	8001a7c <format_dow+0x80>
		case 7:
			strcpy(dow,"Sun");
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <format_dow+0xa4>)
 8001a74:	6810      	ldr	r0, [r2, #0]
 8001a76:	6018      	str	r0, [r3, #0]
			break;
 8001a78:	e000      	b.n	8001a7c <format_dow+0x80>
		default:
			break;
 8001a7a:	bf00      	nop
	}

	return;
 8001a7c:	bf00      	nop
}
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	080033f8 	.word	0x080033f8
 8001a8c:	080033fc 	.word	0x080033fc
 8001a90:	08003400 	.word	0x08003400
 8001a94:	08003404 	.word	0x08003404
 8001a98:	08003408 	.word	0x08003408
 8001a9c:	0800340c 	.word	0x0800340c
 8001aa0:	08003410 	.word	0x08003410

08001aa4 <format_mon>:

static void format_mon(struct Date *date,char *mon)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	switch(date->month)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	2b0b      	cmp	r3, #11
 8001ab6:	d857      	bhi.n	8001b68 <format_mon+0xc4>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <format_mon+0x1c>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001af1 	.word	0x08001af1
 8001ac4:	08001afb 	.word	0x08001afb
 8001ac8:	08001b05 	.word	0x08001b05
 8001acc:	08001b0f 	.word	0x08001b0f
 8001ad0:	08001b19 	.word	0x08001b19
 8001ad4:	08001b23 	.word	0x08001b23
 8001ad8:	08001b2d 	.word	0x08001b2d
 8001adc:	08001b37 	.word	0x08001b37
 8001ae0:	08001b41 	.word	0x08001b41
 8001ae4:	08001b4b 	.word	0x08001b4b
 8001ae8:	08001b55 	.word	0x08001b55
 8001aec:	08001b5f 	.word	0x08001b5f
	{
		case 1:
			strcpy(mon,"Jan");
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <format_mon+0xd0>)
 8001af4:	6810      	ldr	r0, [r2, #0]
 8001af6:	6018      	str	r0, [r3, #0]
			break;
 8001af8:	e037      	b.n	8001b6a <format_mon+0xc6>
		case 2:
			strcpy(mon,"Feb");
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <format_mon+0xd4>)
 8001afe:	6810      	ldr	r0, [r2, #0]
 8001b00:	6018      	str	r0, [r3, #0]
			break;
 8001b02:	e032      	b.n	8001b6a <format_mon+0xc6>
		case 3:
			strcpy(mon,"Mar");
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <format_mon+0xd8>)
 8001b08:	6810      	ldr	r0, [r2, #0]
 8001b0a:	6018      	str	r0, [r3, #0]
			break;
 8001b0c:	e02d      	b.n	8001b6a <format_mon+0xc6>
		case 4:
			strcpy(mon,"Apr");
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <format_mon+0xdc>)
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	6018      	str	r0, [r3, #0]
			break;
 8001b16:	e028      	b.n	8001b6a <format_mon+0xc6>
		case 5:
			strcpy(mon,"May");
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <format_mon+0xe0>)
 8001b1c:	6810      	ldr	r0, [r2, #0]
 8001b1e:	6018      	str	r0, [r3, #0]
			break;
 8001b20:	e023      	b.n	8001b6a <format_mon+0xc6>
		case 6:
			strcpy(mon,"Jun");
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <format_mon+0xe4>)
 8001b26:	6810      	ldr	r0, [r2, #0]
 8001b28:	6018      	str	r0, [r3, #0]
			break;
 8001b2a:	e01e      	b.n	8001b6a <format_mon+0xc6>
		case 7:
			strcpy(mon,"Jul");
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <format_mon+0xe8>)
 8001b30:	6810      	ldr	r0, [r2, #0]
 8001b32:	6018      	str	r0, [r3, #0]
			break;
 8001b34:	e019      	b.n	8001b6a <format_mon+0xc6>
		case 8:
			strcpy(mon,"Aug");
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <format_mon+0xec>)
 8001b3a:	6810      	ldr	r0, [r2, #0]
 8001b3c:	6018      	str	r0, [r3, #0]
			break;
 8001b3e:	e014      	b.n	8001b6a <format_mon+0xc6>
		case 9:
			strcpy(mon,"Sep");
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <format_mon+0xf0>)
 8001b44:	6810      	ldr	r0, [r2, #0]
 8001b46:	6018      	str	r0, [r3, #0]
			break;
 8001b48:	e00f      	b.n	8001b6a <format_mon+0xc6>
		case 10:
			strcpy(mon,"Oct");
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <format_mon+0xf4>)
 8001b4e:	6810      	ldr	r0, [r2, #0]
 8001b50:	6018      	str	r0, [r3, #0]
			break;
 8001b52:	e00a      	b.n	8001b6a <format_mon+0xc6>
		case 11:
			strcpy(mon,"Nov");
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <format_mon+0xf8>)
 8001b58:	6810      	ldr	r0, [r2, #0]
 8001b5a:	6018      	str	r0, [r3, #0]
			break;
 8001b5c:	e005      	b.n	8001b6a <format_mon+0xc6>
		case 12:
			strcpy(mon,"Dec");
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <format_mon+0xfc>)
 8001b62:	6810      	ldr	r0, [r2, #0]
 8001b64:	6018      	str	r0, [r3, #0]
			break;
 8001b66:	e000      	b.n	8001b6a <format_mon+0xc6>
		default:
			break;
 8001b68:	bf00      	nop
	}

	return;
 8001b6a:	bf00      	nop
}
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	08003414 	.word	0x08003414
 8001b78:	08003418 	.word	0x08003418
 8001b7c:	0800341c 	.word	0x0800341c
 8001b80:	08003420 	.word	0x08003420
 8001b84:	08003424 	.word	0x08003424
 8001b88:	08003428 	.word	0x08003428
 8001b8c:	0800342c 	.word	0x0800342c
 8001b90:	08003430 	.word	0x08003430
 8001b94:	08003434 	.word	0x08003434
 8001b98:	08003438 	.word	0x08003438
 8001b9c:	0800343c 	.word	0x0800343c
 8001ba0:	08003440 	.word	0x08003440

08001ba4 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a88      	ldr	r2, [pc, #544]	; (8001dd0 <EnablePeriClk+0x22c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d108      	bne.n	8001bc6 <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001bb4:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <EnablePeriClk+0x230>)
 8001bb6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001bc4:	e19b      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a83      	ldr	r2, [pc, #524]	; (8001dd8 <EnablePeriClk+0x234>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d108      	bne.n	8001be0 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001bce:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <EnablePeriClk+0x230>)
 8001bd0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	e18e      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <EnablePeriClk+0x238>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d108      	bne.n	8001bfa <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001be8:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <EnablePeriClk+0x230>)
 8001bea:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	e181      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a78      	ldr	r2, [pc, #480]	; (8001de0 <EnablePeriClk+0x23c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d108      	bne.n	8001c14 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c02:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c04:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f043 0208 	orr.w	r2, r3, #8
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	e174      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <EnablePeriClk+0x240>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d108      	bne.n	8001c2e <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c1c:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c1e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	e167      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <EnablePeriClk+0x244>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d108      	bne.n	8001c48 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c38:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	e15a      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a68      	ldr	r2, [pc, #416]	; (8001dec <EnablePeriClk+0x248>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c52:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	e14d      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a62      	ldr	r2, [pc, #392]	; (8001df0 <EnablePeriClk+0x24c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d108      	bne.n	8001c7c <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c6c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	e140      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <EnablePeriClk+0x250>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d108      	bne.n	8001c96 <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <EnablePeriClk+0x230>)
 8001c86:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	e133      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <EnablePeriClk+0x254>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d108      	bne.n	8001cb0 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <EnablePeriClk+0x258>)
 8001ca0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	e126      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <EnablePeriClk+0x25c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <EnablePeriClk+0x260>)
 8001cba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	e119      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <EnablePeriClk+0x264>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d108      	bne.n	8001ce4 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <EnablePeriClk+0x260>)
 8001cd4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	e10c      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <EnablePeriClk+0x268>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d108      	bne.n	8001cfe <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <EnablePeriClk+0x260>)
 8001cee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	e0ff      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <EnablePeriClk+0x26c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d108      	bne.n	8001d18 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <EnablePeriClk+0x260>)
 8001d08:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	e0f2      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <EnablePeriClk+0x270>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d20:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <EnablePeriClk+0x260>)
 8001d22:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	e0e5      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <EnablePeriClk+0x274>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <EnablePeriClk+0x258>)
 8001d3c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	e0d8      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <EnablePeriClk+0x278>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <EnablePeriClk+0x260>)
 8001d56:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	e0cb      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <EnablePeriClk+0x27c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <EnablePeriClk+0x260>)
 8001d70:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	e0be      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <EnablePeriClk+0x280>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d108      	bne.n	8001d9a <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <EnablePeriClk+0x260>)
 8001d8a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	e0b1      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <EnablePeriClk+0x284>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <EnablePeriClk+0x260>)
 8001da4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	e0a4      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <EnablePeriClk+0x288>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d139      	bne.n	8001e30 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <EnablePeriClk+0x258>)
 8001dbe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]
}
 8001dcc:	e097      	b.n	8001efe <EnablePeriClk+0x35a>
 8001dce:	bf00      	nop
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40023830 	.word	0x40023830
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40013000 	.word	0x40013000
 8001dfc:	40023844 	.word	0x40023844
 8001e00:	40003800 	.word	0x40003800
 8001e04:	40023840 	.word	0x40023840
 8001e08:	40003c00 	.word	0x40003c00
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40005800 	.word	0x40005800
 8001e14:	40005c00 	.word	0x40005c00
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	40004800 	.word	0x40004800
 8001e24:	40004c00 	.word	0x40004c00
 8001e28:	40005000 	.word	0x40005000
 8001e2c:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <EnablePeriClk+0x364>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d108      	bne.n	8001e4a <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001e38:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <EnablePeriClk+0x368>)
 8001e3a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f043 0210 	orr.w	r2, r3, #16
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	e059      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <EnablePeriClk+0x36c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d108      	bne.n	8001e64 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <EnablePeriClk+0x368>)
 8001e54:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	e04c      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <EnablePeriClk+0x370>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d108      	bne.n	8001e7e <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <EnablePeriClk+0x374>)
 8001e6e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	e03f      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <EnablePeriClk+0x378>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <EnablePeriClk+0x374>)
 8001e88:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	e032      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9e:	d108      	bne.n	8001eb2 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <EnablePeriClk+0x368>)
 8001ea2:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	e025      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <EnablePeriClk+0x37c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <EnablePeriClk+0x368>)
 8001ebc:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	e018      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <EnablePeriClk+0x380>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d108      	bne.n	8001ee6 <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <EnablePeriClk+0x368>)
 8001ed6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f043 0204 	orr.w	r2, r3, #4
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	e00b      	b.n	8001efe <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <EnablePeriClk+0x384>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d107      	bne.n	8001efe <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <EnablePeriClk+0x368>)
 8001ef0:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f043 0208 	orr.w	r2, r3, #8
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40001000 	.word	0x40001000
 8001f0c:	40023840 	.word	0x40023840
 8001f10:	40001400 	.word	0x40001400
 8001f14:	40026000 	.word	0x40026000
 8001f18:	40023830 	.word	0x40023830
 8001f1c:	40026400 	.word	0x40026400
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00

08001f2c <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001f4e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001f52:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <main>:

void EXTI0_IRQHandler(void);
void EXTI1_IRQHandler(void);

int main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
	struct RTC_DS3231_Config_t ds3231_rtc_config;
	struct RTC_DS3231_AlarmConfig_t ds3231_rtc_alarm_config;


	//Configure the Timer
	configure_delay_timer();
 8001f76:	f7fe f9a3 	bl	80002c0 <configure_delay_timer>

	//Configure the LCD Display
	//a. Configure the I2C Peripheral
	configure_i2c();
 8001f7a:	f7fe f9c3 	bl	8000304 <configure_i2c>

	//b. Disable printf() buffering
	setbuf(stdout, NULL);
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <main+0x118>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fac2 	bl	8002510 <setbuf>

	//c. Initialize the LCD Display
	delay_us(1000000);
 8001f8c:	483f      	ldr	r0, [pc, #252]	; (800208c <main+0x11c>)
 8001f8e:	f7fe f97f 	bl	8000290 <delay_us>
	lcd_pcf8574_init();
 8001f92:	f7ff faed 	bl	8001570 <lcd_pcf8574_init>
	delay_us(100000);
 8001f96:	483e      	ldr	r0, [pc, #248]	; (8002090 <main+0x120>)
 8001f98:	f7fe f97a 	bl	8000290 <delay_us>

	//Configure DS3231 RTC Peripheral
	//a. Configure the I2C Port for the RTC
	configure_i2c_rtc();
 8001f9c:	f7fe fa1a 	bl	80003d4 <configure_i2c_rtc>

	//b. Configure the parameters of the RTC
	memset(&ds3231_rtc_config,0,sizeof(ds3231_rtc_config));
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f9a3 	bl	80022f4 <memset>
	ds3231_rtc_config.RTCClockSecondsUnits = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	763b      	strb	r3, [r7, #24]
	ds3231_rtc_config.RTCClockSecondsTens = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	767b      	strb	r3, [r7, #25]
	ds3231_rtc_config.RTCClockMinutesUnits = 3;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	76bb      	strb	r3, [r7, #26]
	ds3231_rtc_config.RTCClockMinutesTens = 4;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	76fb      	strb	r3, [r7, #27]
	ds3231_rtc_config.RTCClockHoursUnits = 4;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	773b      	strb	r3, [r7, #28]
	ds3231_rtc_config.RTCClockHoursTens = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	777b      	strb	r3, [r7, #29]
	ds3231_rtc_config.RTCClockHourFormat = DS3231_RTC_HOUR_FORMAT_24;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	77bb      	strb	r3, [r7, #30]
	ds3231_rtc_config.RTCClockAMPM = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	77fb      	strb	r3, [r7, #31]
	ds3231_rtc_config.RTCClockDateUnits = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3020 	strb.w	r3, [r7, #32]
	ds3231_rtc_config.RTCClockDateTens = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ds3231_rtc_config.RTCClockMonthUnits = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ds3231_rtc_config.RTCClockMonthTens = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ds3231_rtc_config.RTCClockYearUnits = 4;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ds3231_rtc_config.RTCClockYearTens = 2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ds3231_rtc_config.RTCClockDayOfWeek = 3;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	RTC_DS3231_Config_Calendar(&ds3231_rtc_config);
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa5f 	bl	80004c0 <RTC_DS3231_Config_Calendar>
	delay_us(10000);
 8002002:	f242 7010 	movw	r0, #10000	; 0x2710
 8002006:	f7fe f943 	bl	8000290 <delay_us>

	//Configure the DS3231 RTC Alarm
	memset(&ds3231_rtc_alarm_config,0,sizeof(ds3231_rtc_alarm_config));
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2211      	movs	r2, #17
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f96f 	bl	80022f4 <memset>
	ds3231_rtc_alarm_config.RTCAlarmSelection = DS3231_RTC_ALARM_1;
 8002016:	2300      	movs	r3, #0
 8002018:	713b      	strb	r3, [r7, #4]
	ds3231_rtc_alarm_config.RTCAlarmSecondsUnits = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	717b      	strb	r3, [r7, #5]
	ds3231_rtc_alarm_config.RTCAlarmSecondsTens = 3;
 800201e:	2303      	movs	r3, #3
 8002020:	71bb      	strb	r3, [r7, #6]
	ds3231_rtc_alarm_config.RTCAlarmConsiderSeconds = RTC_ALARM_CONSIDER_SECS_YES;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
	ds3231_rtc_alarm_config.RTCAlarmMinutesUnits = 4;
 8002026:	2304      	movs	r3, #4
 8002028:	723b      	strb	r3, [r7, #8]
	ds3231_rtc_alarm_config.RTCAlarmMinutesTens = 4;
 800202a:	2304      	movs	r3, #4
 800202c:	727b      	strb	r3, [r7, #9]
	ds3231_rtc_alarm_config.RTCAlarmConsiderMinutes = RTC_ALARM_CONSIDER_MINS_YES;
 800202e:	2300      	movs	r3, #0
 8002030:	72bb      	strb	r3, [r7, #10]
	ds3231_rtc_alarm_config.RTCAlarmHoursUnits = 4;
 8002032:	2304      	movs	r3, #4
 8002034:	72fb      	strb	r3, [r7, #11]
	ds3231_rtc_alarm_config.RTCAlarmHoursTens = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	733b      	strb	r3, [r7, #12]
	ds3231_rtc_alarm_config.RTCAlarmHourFormat = DS3231_RTC_HOUR_FORMAT_24;
 800203a:	2300      	movs	r3, #0
 800203c:	737b      	strb	r3, [r7, #13]
	ds3231_rtc_alarm_config.RTCAlarmAMPM = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	73bb      	strb	r3, [r7, #14]
	ds3231_rtc_alarm_config.RTCAlarmConsiderHours = RTC_ALARM_CONSIDER_HRS_YES;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
	ds3231_rtc_alarm_config.RTCAlarmDateUnits = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	743b      	strb	r3, [r7, #16]
	ds3231_rtc_alarm_config.RTCAlarmDateTens = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	747b      	strb	r3, [r7, #17]
	ds3231_rtc_alarm_config.RTCAlarmDayOfWeek = RTC_CLK_DOW_WED;
 800204e:	2303      	movs	r3, #3
 8002050:	74bb      	strb	r3, [r7, #18]
	ds3231_rtc_alarm_config.RTCAlarmWeekDaySelection = RTC_ALARM_WDSEL_NO;
 8002052:	2300      	movs	r3, #0
 8002054:	74fb      	strb	r3, [r7, #19]
	ds3231_rtc_alarm_config.RTCAlarmConsiderDate = RTC_ALARM_CONSIDER_DATE_NO;
 8002056:	2301      	movs	r3, #1
 8002058:	753b      	strb	r3, [r7, #20]

	RTC_DS3231_Config_Alarm(&ds3231_rtc_alarm_config);
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fb6b 	bl	8000738 <RTC_DS3231_Config_Alarm>
	RTC_DS3231_Config_Alarm_Interrupt();
 8002062:	f7fe fc4d 	bl	8000900 <RTC_DS3231_Config_Alarm_Interrupt>

	//Configure the Alarm Output GPIO Pin
	RTC_DS3231_Config_Alarm_Output_GPIO();
 8002066:	f7fe fc57 	bl	8000918 <RTC_DS3231_Config_Alarm_Output_GPIO>

	//Configure the Button Interrupt
	RTC_DS3231_Config_Button_Interrupt();
 800206a:	f7fe fc69 	bl	8000940 <RTC_DS3231_Config_Button_Interrupt>

	delay_us(10000);
 800206e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002072:	f7fe f90d 	bl	8000290 <delay_us>

	while(1)
	{
		RTC_DS3231_Read_Calendar(&date,&time);
 8002076:	4907      	ldr	r1, [pc, #28]	; (8002094 <main+0x124>)
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <main+0x128>)
 800207a:	f7fe facf 	bl	800061c <RTC_DS3231_Read_Calendar>
		RTC_Display_Calendar_LCD(&date,&time);
 800207e:	4905      	ldr	r1, [pc, #20]	; (8002094 <main+0x124>)
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <main+0x128>)
 8002082:	f7ff fb65 	bl	8001750 <RTC_Display_Calendar_LCD>
		RTC_DS3231_Read_Calendar(&date,&time);
 8002086:	e7f6      	b.n	8002076 <main+0x106>
 8002088:	20000010 	.word	0x20000010
 800208c:	000f4240 	.word	0x000f4240
 8002090:	000186a0 	.word	0x000186a0
 8002094:	200000cc 	.word	0x200000cc
 8002098:	200000c8 	.word	0x200000c8

0800209c <EXTI0_IRQHandler>:

	return 0;
}

void EXTI0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <EXTI0_IRQHandler+0x28>)
 80020a4:	607b      	str	r3, [r7, #4]

	//Handling the Interrupt
	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_HIGH);
 80020a6:	2201      	movs	r2, #1
 80020a8:	210f      	movs	r1, #15
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <EXTI0_IRQHandler+0x2c>)
 80020ac:	f7fe ff97 	bl	8000fde <GPIOWritePin>

	//Clearing the Button Interrupt
	*pEXTI_PR |= (1 << DS3231_RTC_ALARM_INPUT_GPIO_PIN);		// Clearing the EXTI_PR Register
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]

	return;
 80020bc:	bf00      	nop
}
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40013c14 	.word	0x40013c14
 80020c8:	40020c00 	.word	0x40020c00

080020cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <EXTI2_IRQHandler+0x28>)
 80020d4:	607b      	str	r3, [r7, #4]

	//1. Calling the RTC Alarm Interrupt Callback function
	GPIOWritePin(DS3231_RTC_ALARM_OUTPUT_GPIO_PORT,DS3231_RTC_ALARM_OUTPUT_GPIO_PIN,GPIO_LOW);
 80020d6:	2200      	movs	r2, #0
 80020d8:	210f      	movs	r1, #15
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <EXTI2_IRQHandler+0x2c>)
 80020dc:	f7fe ff7f 	bl	8000fde <GPIOWritePin>

	//2. Clearing the Interrupt
	*pEXTI_PR |= (1 << BTN_INT_GPIO_PIN);		// Clearing the EXTI_PR Register
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	601a      	str	r2, [r3, #0]

	return;
 80020ec:	bf00      	nop
}
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013c14 	.word	0x40013c14
 80020f8:	40020c00 	.word	0x40020c00

080020fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e00a      	b.n	8002124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210e:	f3af 8000 	nop.w
 8002112:	4601      	mov	r1, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	b2ca      	uxtb	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf0      	blt.n	800210e <_read+0x12>
  }

  return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e009      	b.n	800215c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	//UART_SendChar(*ptr++);
    LCD_SendChar(*ptr++);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9a7 	bl	80004a4 <LCD_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf1      	blt.n	8002148 <_write+0x12>
  }
  return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_close>:

int _close(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002194:	605a      	str	r2, [r3, #4]
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <_isatty>:

int _isatty(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f000 f846 	bl	8002290 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20020000 	.word	0x20020000
 8002230:	00000400 	.word	0x00000400
 8002234:	200000d0 	.word	0x200000d0
 8002238:	200000e8 	.word	0x200000e8

0800223c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800223e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800226a:	f000 f817 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800226e:	f7ff fe7f 	bl	8001f70 <main>

08002272 <LoopForever>:

LoopForever:
  b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   r0, =_estack
 8002274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002280:	080034e4 	.word	0x080034e4
  ldr r2, =_sbss
 8002284:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002288:	200000e4 	.word	0x200000e4

0800228c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC_IRQHandler>
	...

08002290 <__errno>:
 8002290:	4b01      	ldr	r3, [pc, #4]	; (8002298 <__errno+0x8>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000010 	.word	0x20000010

0800229c <__libc_init_array>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4d0d      	ldr	r5, [pc, #52]	; (80022d4 <__libc_init_array+0x38>)
 80022a0:	4c0d      	ldr	r4, [pc, #52]	; (80022d8 <__libc_init_array+0x3c>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	2600      	movs	r6, #0
 80022a8:	42a6      	cmp	r6, r4
 80022aa:	d109      	bne.n	80022c0 <__libc_init_array+0x24>
 80022ac:	4d0b      	ldr	r5, [pc, #44]	; (80022dc <__libc_init_array+0x40>)
 80022ae:	4c0c      	ldr	r4, [pc, #48]	; (80022e0 <__libc_init_array+0x44>)
 80022b0:	f001 f87c 	bl	80033ac <_init>
 80022b4:	1b64      	subs	r4, r4, r5
 80022b6:	10a4      	asrs	r4, r4, #2
 80022b8:	2600      	movs	r6, #0
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d105      	bne.n	80022ca <__libc_init_array+0x2e>
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c4:	4798      	blx	r3
 80022c6:	3601      	adds	r6, #1
 80022c8:	e7ee      	b.n	80022a8 <__libc_init_array+0xc>
 80022ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ce:	4798      	blx	r3
 80022d0:	3601      	adds	r6, #1
 80022d2:	e7f2      	b.n	80022ba <__libc_init_array+0x1e>
 80022d4:	080034dc 	.word	0x080034dc
 80022d8:	080034dc 	.word	0x080034dc
 80022dc:	080034dc 	.word	0x080034dc
 80022e0:	080034e0 	.word	0x080034e0

080022e4 <malloc>:
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <malloc+0xc>)
 80022e6:	4601      	mov	r1, r0
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f000 b875 	b.w	80023d8 <_malloc_r>
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010

080022f4 <memset>:
 80022f4:	4402      	add	r2, r0
 80022f6:	4603      	mov	r3, r0
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d100      	bne.n	80022fe <memset+0xa>
 80022fc:	4770      	bx	lr
 80022fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002302:	e7f9      	b.n	80022f8 <memset+0x4>

08002304 <_free_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4605      	mov	r5, r0
 8002308:	2900      	cmp	r1, #0
 800230a:	d041      	beq.n	8002390 <_free_r+0x8c>
 800230c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002310:	1f0c      	subs	r4, r1, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	bfb8      	it	lt
 8002316:	18e4      	addlt	r4, r4, r3
 8002318:	f000 fca4 	bl	8002c64 <__malloc_lock>
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <_free_r+0x90>)
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	b933      	cbnz	r3, 8002330 <_free_r+0x2c>
 8002322:	6063      	str	r3, [r4, #4]
 8002324:	6014      	str	r4, [r2, #0]
 8002326:	4628      	mov	r0, r5
 8002328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800232c:	f000 bca0 	b.w	8002c70 <__malloc_unlock>
 8002330:	42a3      	cmp	r3, r4
 8002332:	d908      	bls.n	8002346 <_free_r+0x42>
 8002334:	6820      	ldr	r0, [r4, #0]
 8002336:	1821      	adds	r1, r4, r0
 8002338:	428b      	cmp	r3, r1
 800233a:	bf01      	itttt	eq
 800233c:	6819      	ldreq	r1, [r3, #0]
 800233e:	685b      	ldreq	r3, [r3, #4]
 8002340:	1809      	addeq	r1, r1, r0
 8002342:	6021      	streq	r1, [r4, #0]
 8002344:	e7ed      	b.n	8002322 <_free_r+0x1e>
 8002346:	461a      	mov	r2, r3
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	b10b      	cbz	r3, 8002350 <_free_r+0x4c>
 800234c:	42a3      	cmp	r3, r4
 800234e:	d9fa      	bls.n	8002346 <_free_r+0x42>
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	1850      	adds	r0, r2, r1
 8002354:	42a0      	cmp	r0, r4
 8002356:	d10b      	bne.n	8002370 <_free_r+0x6c>
 8002358:	6820      	ldr	r0, [r4, #0]
 800235a:	4401      	add	r1, r0
 800235c:	1850      	adds	r0, r2, r1
 800235e:	4283      	cmp	r3, r0
 8002360:	6011      	str	r1, [r2, #0]
 8002362:	d1e0      	bne.n	8002326 <_free_r+0x22>
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	6053      	str	r3, [r2, #4]
 800236a:	4401      	add	r1, r0
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	e7da      	b.n	8002326 <_free_r+0x22>
 8002370:	d902      	bls.n	8002378 <_free_r+0x74>
 8002372:	230c      	movs	r3, #12
 8002374:	602b      	str	r3, [r5, #0]
 8002376:	e7d6      	b.n	8002326 <_free_r+0x22>
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	1821      	adds	r1, r4, r0
 800237c:	428b      	cmp	r3, r1
 800237e:	bf04      	itt	eq
 8002380:	6819      	ldreq	r1, [r3, #0]
 8002382:	685b      	ldreq	r3, [r3, #4]
 8002384:	6063      	str	r3, [r4, #4]
 8002386:	bf04      	itt	eq
 8002388:	1809      	addeq	r1, r1, r0
 800238a:	6021      	streq	r1, [r4, #0]
 800238c:	6054      	str	r4, [r2, #4]
 800238e:	e7ca      	b.n	8002326 <_free_r+0x22>
 8002390:	bd38      	pop	{r3, r4, r5, pc}
 8002392:	bf00      	nop
 8002394:	200000d4 	.word	0x200000d4

08002398 <sbrk_aligned>:
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	4e0e      	ldr	r6, [pc, #56]	; (80023d4 <sbrk_aligned+0x3c>)
 800239c:	460c      	mov	r4, r1
 800239e:	6831      	ldr	r1, [r6, #0]
 80023a0:	4605      	mov	r5, r0
 80023a2:	b911      	cbnz	r1, 80023aa <sbrk_aligned+0x12>
 80023a4:	f000 f8a4 	bl	80024f0 <_sbrk_r>
 80023a8:	6030      	str	r0, [r6, #0]
 80023aa:	4621      	mov	r1, r4
 80023ac:	4628      	mov	r0, r5
 80023ae:	f000 f89f 	bl	80024f0 <_sbrk_r>
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	d00a      	beq.n	80023cc <sbrk_aligned+0x34>
 80023b6:	1cc4      	adds	r4, r0, #3
 80023b8:	f024 0403 	bic.w	r4, r4, #3
 80023bc:	42a0      	cmp	r0, r4
 80023be:	d007      	beq.n	80023d0 <sbrk_aligned+0x38>
 80023c0:	1a21      	subs	r1, r4, r0
 80023c2:	4628      	mov	r0, r5
 80023c4:	f000 f894 	bl	80024f0 <_sbrk_r>
 80023c8:	3001      	adds	r0, #1
 80023ca:	d101      	bne.n	80023d0 <sbrk_aligned+0x38>
 80023cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80023d0:	4620      	mov	r0, r4
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	200000d8 	.word	0x200000d8

080023d8 <_malloc_r>:
 80023d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023dc:	1ccd      	adds	r5, r1, #3
 80023de:	f025 0503 	bic.w	r5, r5, #3
 80023e2:	3508      	adds	r5, #8
 80023e4:	2d0c      	cmp	r5, #12
 80023e6:	bf38      	it	cc
 80023e8:	250c      	movcc	r5, #12
 80023ea:	2d00      	cmp	r5, #0
 80023ec:	4607      	mov	r7, r0
 80023ee:	db01      	blt.n	80023f4 <_malloc_r+0x1c>
 80023f0:	42a9      	cmp	r1, r5
 80023f2:	d905      	bls.n	8002400 <_malloc_r+0x28>
 80023f4:	230c      	movs	r3, #12
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	2600      	movs	r6, #0
 80023fa:	4630      	mov	r0, r6
 80023fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002400:	4e2e      	ldr	r6, [pc, #184]	; (80024bc <_malloc_r+0xe4>)
 8002402:	f000 fc2f 	bl	8002c64 <__malloc_lock>
 8002406:	6833      	ldr	r3, [r6, #0]
 8002408:	461c      	mov	r4, r3
 800240a:	bb34      	cbnz	r4, 800245a <_malloc_r+0x82>
 800240c:	4629      	mov	r1, r5
 800240e:	4638      	mov	r0, r7
 8002410:	f7ff ffc2 	bl	8002398 <sbrk_aligned>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	4604      	mov	r4, r0
 8002418:	d14d      	bne.n	80024b6 <_malloc_r+0xde>
 800241a:	6834      	ldr	r4, [r6, #0]
 800241c:	4626      	mov	r6, r4
 800241e:	2e00      	cmp	r6, #0
 8002420:	d140      	bne.n	80024a4 <_malloc_r+0xcc>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	4631      	mov	r1, r6
 8002426:	4638      	mov	r0, r7
 8002428:	eb04 0803 	add.w	r8, r4, r3
 800242c:	f000 f860 	bl	80024f0 <_sbrk_r>
 8002430:	4580      	cmp	r8, r0
 8002432:	d13a      	bne.n	80024aa <_malloc_r+0xd2>
 8002434:	6821      	ldr	r1, [r4, #0]
 8002436:	3503      	adds	r5, #3
 8002438:	1a6d      	subs	r5, r5, r1
 800243a:	f025 0503 	bic.w	r5, r5, #3
 800243e:	3508      	adds	r5, #8
 8002440:	2d0c      	cmp	r5, #12
 8002442:	bf38      	it	cc
 8002444:	250c      	movcc	r5, #12
 8002446:	4629      	mov	r1, r5
 8002448:	4638      	mov	r0, r7
 800244a:	f7ff ffa5 	bl	8002398 <sbrk_aligned>
 800244e:	3001      	adds	r0, #1
 8002450:	d02b      	beq.n	80024aa <_malloc_r+0xd2>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	442b      	add	r3, r5
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	e00e      	b.n	8002478 <_malloc_r+0xa0>
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	1b52      	subs	r2, r2, r5
 800245e:	d41e      	bmi.n	800249e <_malloc_r+0xc6>
 8002460:	2a0b      	cmp	r2, #11
 8002462:	d916      	bls.n	8002492 <_malloc_r+0xba>
 8002464:	1961      	adds	r1, r4, r5
 8002466:	42a3      	cmp	r3, r4
 8002468:	6025      	str	r5, [r4, #0]
 800246a:	bf18      	it	ne
 800246c:	6059      	strne	r1, [r3, #4]
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	bf08      	it	eq
 8002472:	6031      	streq	r1, [r6, #0]
 8002474:	5162      	str	r2, [r4, r5]
 8002476:	604b      	str	r3, [r1, #4]
 8002478:	4638      	mov	r0, r7
 800247a:	f104 060b 	add.w	r6, r4, #11
 800247e:	f000 fbf7 	bl	8002c70 <__malloc_unlock>
 8002482:	f026 0607 	bic.w	r6, r6, #7
 8002486:	1d23      	adds	r3, r4, #4
 8002488:	1af2      	subs	r2, r6, r3
 800248a:	d0b6      	beq.n	80023fa <_malloc_r+0x22>
 800248c:	1b9b      	subs	r3, r3, r6
 800248e:	50a3      	str	r3, [r4, r2]
 8002490:	e7b3      	b.n	80023fa <_malloc_r+0x22>
 8002492:	6862      	ldr	r2, [r4, #4]
 8002494:	42a3      	cmp	r3, r4
 8002496:	bf0c      	ite	eq
 8002498:	6032      	streq	r2, [r6, #0]
 800249a:	605a      	strne	r2, [r3, #4]
 800249c:	e7ec      	b.n	8002478 <_malloc_r+0xa0>
 800249e:	4623      	mov	r3, r4
 80024a0:	6864      	ldr	r4, [r4, #4]
 80024a2:	e7b2      	b.n	800240a <_malloc_r+0x32>
 80024a4:	4634      	mov	r4, r6
 80024a6:	6876      	ldr	r6, [r6, #4]
 80024a8:	e7b9      	b.n	800241e <_malloc_r+0x46>
 80024aa:	230c      	movs	r3, #12
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4638      	mov	r0, r7
 80024b0:	f000 fbde 	bl	8002c70 <__malloc_unlock>
 80024b4:	e7a1      	b.n	80023fa <_malloc_r+0x22>
 80024b6:	6025      	str	r5, [r4, #0]
 80024b8:	e7de      	b.n	8002478 <_malloc_r+0xa0>
 80024ba:	bf00      	nop
 80024bc:	200000d4 	.word	0x200000d4

080024c0 <iprintf>:
 80024c0:	b40f      	push	{r0, r1, r2, r3}
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <iprintf+0x2c>)
 80024c4:	b513      	push	{r0, r1, r4, lr}
 80024c6:	681c      	ldr	r4, [r3, #0]
 80024c8:	b124      	cbz	r4, 80024d4 <iprintf+0x14>
 80024ca:	69a3      	ldr	r3, [r4, #24]
 80024cc:	b913      	cbnz	r3, 80024d4 <iprintf+0x14>
 80024ce:	4620      	mov	r0, r4
 80024d0:	f000 fac2 	bl	8002a58 <__sinit>
 80024d4:	ab05      	add	r3, sp, #20
 80024d6:	9a04      	ldr	r2, [sp, #16]
 80024d8:	68a1      	ldr	r1, [r4, #8]
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	4620      	mov	r0, r4
 80024de:	f000 fbf5 	bl	8002ccc <_vfiprintf_r>
 80024e2:	b002      	add	sp, #8
 80024e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e8:	b004      	add	sp, #16
 80024ea:	4770      	bx	lr
 80024ec:	20000010 	.word	0x20000010

080024f0 <_sbrk_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4d06      	ldr	r5, [pc, #24]	; (800250c <_sbrk_r+0x1c>)
 80024f4:	2300      	movs	r3, #0
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	602b      	str	r3, [r5, #0]
 80024fc:	f7ff fe68 	bl	80021d0 <_sbrk>
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	d102      	bne.n	800250a <_sbrk_r+0x1a>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	b103      	cbz	r3, 800250a <_sbrk_r+0x1a>
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	200000e0 	.word	0x200000e0

08002510 <setbuf>:
 8002510:	2900      	cmp	r1, #0
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	bf0c      	ite	eq
 8002518:	2202      	moveq	r2, #2
 800251a:	2200      	movne	r2, #0
 800251c:	f000 b800 	b.w	8002520 <setvbuf>

08002520 <setvbuf>:
 8002520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002524:	461d      	mov	r5, r3
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <setvbuf+0x17c>)
 8002528:	681f      	ldr	r7, [r3, #0]
 800252a:	4604      	mov	r4, r0
 800252c:	460e      	mov	r6, r1
 800252e:	4690      	mov	r8, r2
 8002530:	b127      	cbz	r7, 800253c <setvbuf+0x1c>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	b913      	cbnz	r3, 800253c <setvbuf+0x1c>
 8002536:	4638      	mov	r0, r7
 8002538:	f000 fa8e 	bl	8002a58 <__sinit>
 800253c:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <setvbuf+0x180>)
 800253e:	429c      	cmp	r4, r3
 8002540:	d167      	bne.n	8002612 <setvbuf+0xf2>
 8002542:	687c      	ldr	r4, [r7, #4]
 8002544:	f1b8 0f02 	cmp.w	r8, #2
 8002548:	d006      	beq.n	8002558 <setvbuf+0x38>
 800254a:	f1b8 0f01 	cmp.w	r8, #1
 800254e:	f200 809f 	bhi.w	8002690 <setvbuf+0x170>
 8002552:	2d00      	cmp	r5, #0
 8002554:	f2c0 809c 	blt.w	8002690 <setvbuf+0x170>
 8002558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800255a:	07db      	lsls	r3, r3, #31
 800255c:	d405      	bmi.n	800256a <setvbuf+0x4a>
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	0598      	lsls	r0, r3, #22
 8002562:	d402      	bmi.n	800256a <setvbuf+0x4a>
 8002564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002566:	f000 fb15 	bl	8002b94 <__retarget_lock_acquire_recursive>
 800256a:	4621      	mov	r1, r4
 800256c:	4638      	mov	r0, r7
 800256e:	f000 f9df 	bl	8002930 <_fflush_r>
 8002572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002574:	b141      	cbz	r1, 8002588 <setvbuf+0x68>
 8002576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800257a:	4299      	cmp	r1, r3
 800257c:	d002      	beq.n	8002584 <setvbuf+0x64>
 800257e:	4638      	mov	r0, r7
 8002580:	f7ff fec0 	bl	8002304 <_free_r>
 8002584:	2300      	movs	r3, #0
 8002586:	6363      	str	r3, [r4, #52]	; 0x34
 8002588:	2300      	movs	r3, #0
 800258a:	61a3      	str	r3, [r4, #24]
 800258c:	6063      	str	r3, [r4, #4]
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	0619      	lsls	r1, r3, #24
 8002592:	d503      	bpl.n	800259c <setvbuf+0x7c>
 8002594:	6921      	ldr	r1, [r4, #16]
 8002596:	4638      	mov	r0, r7
 8002598:	f7ff feb4 	bl	8002304 <_free_r>
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	f1b8 0f02 	cmp.w	r8, #2
 80025aa:	81a3      	strh	r3, [r4, #12]
 80025ac:	d06c      	beq.n	8002688 <setvbuf+0x168>
 80025ae:	ab01      	add	r3, sp, #4
 80025b0:	466a      	mov	r2, sp
 80025b2:	4621      	mov	r1, r4
 80025b4:	4638      	mov	r0, r7
 80025b6:	f000 faef 	bl	8002b98 <__swhatbuf_r>
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	4318      	orrs	r0, r3
 80025be:	81a0      	strh	r0, [r4, #12]
 80025c0:	2d00      	cmp	r5, #0
 80025c2:	d130      	bne.n	8002626 <setvbuf+0x106>
 80025c4:	9d00      	ldr	r5, [sp, #0]
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff fe8c 	bl	80022e4 <malloc>
 80025cc:	4606      	mov	r6, r0
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d155      	bne.n	800267e <setvbuf+0x15e>
 80025d2:	f8dd 9000 	ldr.w	r9, [sp]
 80025d6:	45a9      	cmp	r9, r5
 80025d8:	d14a      	bne.n	8002670 <setvbuf+0x150>
 80025da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80025de:	2200      	movs	r2, #0
 80025e0:	60a2      	str	r2, [r4, #8]
 80025e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80025e6:	6022      	str	r2, [r4, #0]
 80025e8:	6122      	str	r2, [r4, #16]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025f0:	6162      	str	r2, [r4, #20]
 80025f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	07d2      	lsls	r2, r2, #31
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	d405      	bmi.n	800260a <setvbuf+0xea>
 80025fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002602:	d102      	bne.n	800260a <setvbuf+0xea>
 8002604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002606:	f000 fac6 	bl	8002b96 <__retarget_lock_release_recursive>
 800260a:	4628      	mov	r0, r5
 800260c:	b003      	add	sp, #12
 800260e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <setvbuf+0x184>)
 8002614:	429c      	cmp	r4, r3
 8002616:	d101      	bne.n	800261c <setvbuf+0xfc>
 8002618:	68bc      	ldr	r4, [r7, #8]
 800261a:	e793      	b.n	8002544 <setvbuf+0x24>
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <setvbuf+0x188>)
 800261e:	429c      	cmp	r4, r3
 8002620:	bf08      	it	eq
 8002622:	68fc      	ldreq	r4, [r7, #12]
 8002624:	e78e      	b.n	8002544 <setvbuf+0x24>
 8002626:	2e00      	cmp	r6, #0
 8002628:	d0cd      	beq.n	80025c6 <setvbuf+0xa6>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	b913      	cbnz	r3, 8002634 <setvbuf+0x114>
 800262e:	4638      	mov	r0, r7
 8002630:	f000 fa12 	bl	8002a58 <__sinit>
 8002634:	f1b8 0f01 	cmp.w	r8, #1
 8002638:	bf08      	it	eq
 800263a:	89a3      	ldrheq	r3, [r4, #12]
 800263c:	6026      	str	r6, [r4, #0]
 800263e:	bf04      	itt	eq
 8002640:	f043 0301 	orreq.w	r3, r3, #1
 8002644:	81a3      	strheq	r3, [r4, #12]
 8002646:	89a2      	ldrh	r2, [r4, #12]
 8002648:	f012 0308 	ands.w	r3, r2, #8
 800264c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002650:	d01c      	beq.n	800268c <setvbuf+0x16c>
 8002652:	07d3      	lsls	r3, r2, #31
 8002654:	bf41      	itttt	mi
 8002656:	2300      	movmi	r3, #0
 8002658:	426d      	negmi	r5, r5
 800265a:	60a3      	strmi	r3, [r4, #8]
 800265c:	61a5      	strmi	r5, [r4, #24]
 800265e:	bf58      	it	pl
 8002660:	60a5      	strpl	r5, [r4, #8]
 8002662:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002664:	f015 0501 	ands.w	r5, r5, #1
 8002668:	d115      	bne.n	8002696 <setvbuf+0x176>
 800266a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800266e:	e7c8      	b.n	8002602 <setvbuf+0xe2>
 8002670:	4648      	mov	r0, r9
 8002672:	f7ff fe37 	bl	80022e4 <malloc>
 8002676:	4606      	mov	r6, r0
 8002678:	2800      	cmp	r0, #0
 800267a:	d0ae      	beq.n	80025da <setvbuf+0xba>
 800267c:	464d      	mov	r5, r9
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	81a3      	strh	r3, [r4, #12]
 8002686:	e7d0      	b.n	800262a <setvbuf+0x10a>
 8002688:	2500      	movs	r5, #0
 800268a:	e7a8      	b.n	80025de <setvbuf+0xbe>
 800268c:	60a3      	str	r3, [r4, #8]
 800268e:	e7e8      	b.n	8002662 <setvbuf+0x142>
 8002690:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002694:	e7b9      	b.n	800260a <setvbuf+0xea>
 8002696:	2500      	movs	r5, #0
 8002698:	e7b7      	b.n	800260a <setvbuf+0xea>
 800269a:	bf00      	nop
 800269c:	20000010 	.word	0x20000010
 80026a0:	08003468 	.word	0x08003468
 80026a4:	08003488 	.word	0x08003488
 80026a8:	08003448 	.word	0x08003448

080026ac <__swbuf_r>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	460e      	mov	r6, r1
 80026b0:	4614      	mov	r4, r2
 80026b2:	4605      	mov	r5, r0
 80026b4:	b118      	cbz	r0, 80026be <__swbuf_r+0x12>
 80026b6:	6983      	ldr	r3, [r0, #24]
 80026b8:	b90b      	cbnz	r3, 80026be <__swbuf_r+0x12>
 80026ba:	f000 f9cd 	bl	8002a58 <__sinit>
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <__swbuf_r+0x98>)
 80026c0:	429c      	cmp	r4, r3
 80026c2:	d12b      	bne.n	800271c <__swbuf_r+0x70>
 80026c4:	686c      	ldr	r4, [r5, #4]
 80026c6:	69a3      	ldr	r3, [r4, #24]
 80026c8:	60a3      	str	r3, [r4, #8]
 80026ca:	89a3      	ldrh	r3, [r4, #12]
 80026cc:	071a      	lsls	r2, r3, #28
 80026ce:	d52f      	bpl.n	8002730 <__swbuf_r+0x84>
 80026d0:	6923      	ldr	r3, [r4, #16]
 80026d2:	b36b      	cbz	r3, 8002730 <__swbuf_r+0x84>
 80026d4:	6923      	ldr	r3, [r4, #16]
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	1ac0      	subs	r0, r0, r3
 80026da:	6963      	ldr	r3, [r4, #20]
 80026dc:	b2f6      	uxtb	r6, r6
 80026de:	4283      	cmp	r3, r0
 80026e0:	4637      	mov	r7, r6
 80026e2:	dc04      	bgt.n	80026ee <__swbuf_r+0x42>
 80026e4:	4621      	mov	r1, r4
 80026e6:	4628      	mov	r0, r5
 80026e8:	f000 f922 	bl	8002930 <_fflush_r>
 80026ec:	bb30      	cbnz	r0, 800273c <__swbuf_r+0x90>
 80026ee:	68a3      	ldr	r3, [r4, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60a3      	str	r3, [r4, #8]
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	6022      	str	r2, [r4, #0]
 80026fa:	701e      	strb	r6, [r3, #0]
 80026fc:	6963      	ldr	r3, [r4, #20]
 80026fe:	3001      	adds	r0, #1
 8002700:	4283      	cmp	r3, r0
 8002702:	d004      	beq.n	800270e <__swbuf_r+0x62>
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	07db      	lsls	r3, r3, #31
 8002708:	d506      	bpl.n	8002718 <__swbuf_r+0x6c>
 800270a:	2e0a      	cmp	r6, #10
 800270c:	d104      	bne.n	8002718 <__swbuf_r+0x6c>
 800270e:	4621      	mov	r1, r4
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f90d 	bl	8002930 <_fflush_r>
 8002716:	b988      	cbnz	r0, 800273c <__swbuf_r+0x90>
 8002718:	4638      	mov	r0, r7
 800271a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <__swbuf_r+0x9c>)
 800271e:	429c      	cmp	r4, r3
 8002720:	d101      	bne.n	8002726 <__swbuf_r+0x7a>
 8002722:	68ac      	ldr	r4, [r5, #8]
 8002724:	e7cf      	b.n	80026c6 <__swbuf_r+0x1a>
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <__swbuf_r+0xa0>)
 8002728:	429c      	cmp	r4, r3
 800272a:	bf08      	it	eq
 800272c:	68ec      	ldreq	r4, [r5, #12]
 800272e:	e7ca      	b.n	80026c6 <__swbuf_r+0x1a>
 8002730:	4621      	mov	r1, r4
 8002732:	4628      	mov	r0, r5
 8002734:	f000 f80c 	bl	8002750 <__swsetup_r>
 8002738:	2800      	cmp	r0, #0
 800273a:	d0cb      	beq.n	80026d4 <__swbuf_r+0x28>
 800273c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002740:	e7ea      	b.n	8002718 <__swbuf_r+0x6c>
 8002742:	bf00      	nop
 8002744:	08003468 	.word	0x08003468
 8002748:	08003488 	.word	0x08003488
 800274c:	08003448 	.word	0x08003448

08002750 <__swsetup_r>:
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <__swsetup_r+0xcc>)
 8002752:	b570      	push	{r4, r5, r6, lr}
 8002754:	681d      	ldr	r5, [r3, #0]
 8002756:	4606      	mov	r6, r0
 8002758:	460c      	mov	r4, r1
 800275a:	b125      	cbz	r5, 8002766 <__swsetup_r+0x16>
 800275c:	69ab      	ldr	r3, [r5, #24]
 800275e:	b913      	cbnz	r3, 8002766 <__swsetup_r+0x16>
 8002760:	4628      	mov	r0, r5
 8002762:	f000 f979 	bl	8002a58 <__sinit>
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <__swsetup_r+0xd0>)
 8002768:	429c      	cmp	r4, r3
 800276a:	d10f      	bne.n	800278c <__swsetup_r+0x3c>
 800276c:	686c      	ldr	r4, [r5, #4]
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002774:	0719      	lsls	r1, r3, #28
 8002776:	d42c      	bmi.n	80027d2 <__swsetup_r+0x82>
 8002778:	06dd      	lsls	r5, r3, #27
 800277a:	d411      	bmi.n	80027a0 <__swsetup_r+0x50>
 800277c:	2309      	movs	r3, #9
 800277e:	6033      	str	r3, [r6, #0]
 8002780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002784:	81a3      	strh	r3, [r4, #12]
 8002786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800278a:	e03e      	b.n	800280a <__swsetup_r+0xba>
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <__swsetup_r+0xd4>)
 800278e:	429c      	cmp	r4, r3
 8002790:	d101      	bne.n	8002796 <__swsetup_r+0x46>
 8002792:	68ac      	ldr	r4, [r5, #8]
 8002794:	e7eb      	b.n	800276e <__swsetup_r+0x1e>
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <__swsetup_r+0xd8>)
 8002798:	429c      	cmp	r4, r3
 800279a:	bf08      	it	eq
 800279c:	68ec      	ldreq	r4, [r5, #12]
 800279e:	e7e6      	b.n	800276e <__swsetup_r+0x1e>
 80027a0:	0758      	lsls	r0, r3, #29
 80027a2:	d512      	bpl.n	80027ca <__swsetup_r+0x7a>
 80027a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027a6:	b141      	cbz	r1, 80027ba <__swsetup_r+0x6a>
 80027a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d002      	beq.n	80027b6 <__swsetup_r+0x66>
 80027b0:	4630      	mov	r0, r6
 80027b2:	f7ff fda7 	bl	8002304 <_free_r>
 80027b6:	2300      	movs	r3, #0
 80027b8:	6363      	str	r3, [r4, #52]	; 0x34
 80027ba:	89a3      	ldrh	r3, [r4, #12]
 80027bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027c0:	81a3      	strh	r3, [r4, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	6923      	ldr	r3, [r4, #16]
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	6923      	ldr	r3, [r4, #16]
 80027d4:	b94b      	cbnz	r3, 80027ea <__swsetup_r+0x9a>
 80027d6:	89a3      	ldrh	r3, [r4, #12]
 80027d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e0:	d003      	beq.n	80027ea <__swsetup_r+0x9a>
 80027e2:	4621      	mov	r1, r4
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 f9fd 	bl	8002be4 <__smakebuf_r>
 80027ea:	89a0      	ldrh	r0, [r4, #12]
 80027ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027f0:	f010 0301 	ands.w	r3, r0, #1
 80027f4:	d00a      	beq.n	800280c <__swsetup_r+0xbc>
 80027f6:	2300      	movs	r3, #0
 80027f8:	60a3      	str	r3, [r4, #8]
 80027fa:	6963      	ldr	r3, [r4, #20]
 80027fc:	425b      	negs	r3, r3
 80027fe:	61a3      	str	r3, [r4, #24]
 8002800:	6923      	ldr	r3, [r4, #16]
 8002802:	b943      	cbnz	r3, 8002816 <__swsetup_r+0xc6>
 8002804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002808:	d1ba      	bne.n	8002780 <__swsetup_r+0x30>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	0781      	lsls	r1, r0, #30
 800280e:	bf58      	it	pl
 8002810:	6963      	ldrpl	r3, [r4, #20]
 8002812:	60a3      	str	r3, [r4, #8]
 8002814:	e7f4      	b.n	8002800 <__swsetup_r+0xb0>
 8002816:	2000      	movs	r0, #0
 8002818:	e7f7      	b.n	800280a <__swsetup_r+0xba>
 800281a:	bf00      	nop
 800281c:	20000010 	.word	0x20000010
 8002820:	08003468 	.word	0x08003468
 8002824:	08003488 	.word	0x08003488
 8002828:	08003448 	.word	0x08003448

0800282c <__sflush_r>:
 800282c:	898a      	ldrh	r2, [r1, #12]
 800282e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002830:	4605      	mov	r5, r0
 8002832:	0710      	lsls	r0, r2, #28
 8002834:	460c      	mov	r4, r1
 8002836:	d457      	bmi.n	80028e8 <__sflush_r+0xbc>
 8002838:	684b      	ldr	r3, [r1, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	dc04      	bgt.n	8002848 <__sflush_r+0x1c>
 800283e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	dc01      	bgt.n	8002848 <__sflush_r+0x1c>
 8002844:	2000      	movs	r0, #0
 8002846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800284a:	2e00      	cmp	r6, #0
 800284c:	d0fa      	beq.n	8002844 <__sflush_r+0x18>
 800284e:	2300      	movs	r3, #0
 8002850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002854:	682f      	ldr	r7, [r5, #0]
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	d032      	beq.n	80028c0 <__sflush_r+0x94>
 800285a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	075a      	lsls	r2, r3, #29
 8002860:	d505      	bpl.n	800286e <__sflush_r+0x42>
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	1ac0      	subs	r0, r0, r3
 8002866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002868:	b10b      	cbz	r3, 800286e <__sflush_r+0x42>
 800286a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286c:	1ac0      	subs	r0, r0, r3
 800286e:	2300      	movs	r3, #0
 8002870:	4602      	mov	r2, r0
 8002872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002874:	6a21      	ldr	r1, [r4, #32]
 8002876:	4628      	mov	r0, r5
 8002878:	47b0      	blx	r6
 800287a:	1c43      	adds	r3, r0, #1
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	d106      	bne.n	800288e <__sflush_r+0x62>
 8002880:	6829      	ldr	r1, [r5, #0]
 8002882:	291d      	cmp	r1, #29
 8002884:	d82c      	bhi.n	80028e0 <__sflush_r+0xb4>
 8002886:	4a29      	ldr	r2, [pc, #164]	; (800292c <__sflush_r+0x100>)
 8002888:	40ca      	lsrs	r2, r1
 800288a:	07d6      	lsls	r6, r2, #31
 800288c:	d528      	bpl.n	80028e0 <__sflush_r+0xb4>
 800288e:	2200      	movs	r2, #0
 8002890:	6062      	str	r2, [r4, #4]
 8002892:	04d9      	lsls	r1, r3, #19
 8002894:	6922      	ldr	r2, [r4, #16]
 8002896:	6022      	str	r2, [r4, #0]
 8002898:	d504      	bpl.n	80028a4 <__sflush_r+0x78>
 800289a:	1c42      	adds	r2, r0, #1
 800289c:	d101      	bne.n	80028a2 <__sflush_r+0x76>
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	b903      	cbnz	r3, 80028a4 <__sflush_r+0x78>
 80028a2:	6560      	str	r0, [r4, #84]	; 0x54
 80028a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a6:	602f      	str	r7, [r5, #0]
 80028a8:	2900      	cmp	r1, #0
 80028aa:	d0cb      	beq.n	8002844 <__sflush_r+0x18>
 80028ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028b0:	4299      	cmp	r1, r3
 80028b2:	d002      	beq.n	80028ba <__sflush_r+0x8e>
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7ff fd25 	bl	8002304 <_free_r>
 80028ba:	2000      	movs	r0, #0
 80028bc:	6360      	str	r0, [r4, #52]	; 0x34
 80028be:	e7c2      	b.n	8002846 <__sflush_r+0x1a>
 80028c0:	6a21      	ldr	r1, [r4, #32]
 80028c2:	2301      	movs	r3, #1
 80028c4:	4628      	mov	r0, r5
 80028c6:	47b0      	blx	r6
 80028c8:	1c41      	adds	r1, r0, #1
 80028ca:	d1c7      	bne.n	800285c <__sflush_r+0x30>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0c4      	beq.n	800285c <__sflush_r+0x30>
 80028d2:	2b1d      	cmp	r3, #29
 80028d4:	d001      	beq.n	80028da <__sflush_r+0xae>
 80028d6:	2b16      	cmp	r3, #22
 80028d8:	d101      	bne.n	80028de <__sflush_r+0xb2>
 80028da:	602f      	str	r7, [r5, #0]
 80028dc:	e7b2      	b.n	8002844 <__sflush_r+0x18>
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	e7ae      	b.n	8002846 <__sflush_r+0x1a>
 80028e8:	690f      	ldr	r7, [r1, #16]
 80028ea:	2f00      	cmp	r7, #0
 80028ec:	d0aa      	beq.n	8002844 <__sflush_r+0x18>
 80028ee:	0793      	lsls	r3, r2, #30
 80028f0:	680e      	ldr	r6, [r1, #0]
 80028f2:	bf08      	it	eq
 80028f4:	694b      	ldreq	r3, [r1, #20]
 80028f6:	600f      	str	r7, [r1, #0]
 80028f8:	bf18      	it	ne
 80028fa:	2300      	movne	r3, #0
 80028fc:	1bf6      	subs	r6, r6, r7
 80028fe:	608b      	str	r3, [r1, #8]
 8002900:	2e00      	cmp	r6, #0
 8002902:	dd9f      	ble.n	8002844 <__sflush_r+0x18>
 8002904:	6a21      	ldr	r1, [r4, #32]
 8002906:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800290a:	4633      	mov	r3, r6
 800290c:	463a      	mov	r2, r7
 800290e:	4628      	mov	r0, r5
 8002910:	47e0      	blx	ip
 8002912:	2800      	cmp	r0, #0
 8002914:	dc06      	bgt.n	8002924 <__sflush_r+0xf8>
 8002916:	89a3      	ldrh	r3, [r4, #12]
 8002918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291c:	81a3      	strh	r3, [r4, #12]
 800291e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002922:	e790      	b.n	8002846 <__sflush_r+0x1a>
 8002924:	4407      	add	r7, r0
 8002926:	1a36      	subs	r6, r6, r0
 8002928:	e7ea      	b.n	8002900 <__sflush_r+0xd4>
 800292a:	bf00      	nop
 800292c:	20400001 	.word	0x20400001

08002930 <_fflush_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	690b      	ldr	r3, [r1, #16]
 8002934:	4605      	mov	r5, r0
 8002936:	460c      	mov	r4, r1
 8002938:	b913      	cbnz	r3, 8002940 <_fflush_r+0x10>
 800293a:	2500      	movs	r5, #0
 800293c:	4628      	mov	r0, r5
 800293e:	bd38      	pop	{r3, r4, r5, pc}
 8002940:	b118      	cbz	r0, 800294a <_fflush_r+0x1a>
 8002942:	6983      	ldr	r3, [r0, #24]
 8002944:	b90b      	cbnz	r3, 800294a <_fflush_r+0x1a>
 8002946:	f000 f887 	bl	8002a58 <__sinit>
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <_fflush_r+0x6c>)
 800294c:	429c      	cmp	r4, r3
 800294e:	d11b      	bne.n	8002988 <_fflush_r+0x58>
 8002950:	686c      	ldr	r4, [r5, #4]
 8002952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ef      	beq.n	800293a <_fflush_r+0xa>
 800295a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800295c:	07d0      	lsls	r0, r2, #31
 800295e:	d404      	bmi.n	800296a <_fflush_r+0x3a>
 8002960:	0599      	lsls	r1, r3, #22
 8002962:	d402      	bmi.n	800296a <_fflush_r+0x3a>
 8002964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002966:	f000 f915 	bl	8002b94 <__retarget_lock_acquire_recursive>
 800296a:	4628      	mov	r0, r5
 800296c:	4621      	mov	r1, r4
 800296e:	f7ff ff5d 	bl	800282c <__sflush_r>
 8002972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002974:	07da      	lsls	r2, r3, #31
 8002976:	4605      	mov	r5, r0
 8002978:	d4e0      	bmi.n	800293c <_fflush_r+0xc>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	059b      	lsls	r3, r3, #22
 800297e:	d4dd      	bmi.n	800293c <_fflush_r+0xc>
 8002980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002982:	f000 f908 	bl	8002b96 <__retarget_lock_release_recursive>
 8002986:	e7d9      	b.n	800293c <_fflush_r+0xc>
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <_fflush_r+0x70>)
 800298a:	429c      	cmp	r4, r3
 800298c:	d101      	bne.n	8002992 <_fflush_r+0x62>
 800298e:	68ac      	ldr	r4, [r5, #8]
 8002990:	e7df      	b.n	8002952 <_fflush_r+0x22>
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <_fflush_r+0x74>)
 8002994:	429c      	cmp	r4, r3
 8002996:	bf08      	it	eq
 8002998:	68ec      	ldreq	r4, [r5, #12]
 800299a:	e7da      	b.n	8002952 <_fflush_r+0x22>
 800299c:	08003468 	.word	0x08003468
 80029a0:	08003488 	.word	0x08003488
 80029a4:	08003448 	.word	0x08003448

080029a8 <std>:
 80029a8:	2300      	movs	r3, #0
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
 80029ae:	e9c0 3300 	strd	r3, r3, [r0]
 80029b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029b6:	6083      	str	r3, [r0, #8]
 80029b8:	8181      	strh	r1, [r0, #12]
 80029ba:	6643      	str	r3, [r0, #100]	; 0x64
 80029bc:	81c2      	strh	r2, [r0, #14]
 80029be:	6183      	str	r3, [r0, #24]
 80029c0:	4619      	mov	r1, r3
 80029c2:	2208      	movs	r2, #8
 80029c4:	305c      	adds	r0, #92	; 0x5c
 80029c6:	f7ff fc95 	bl	80022f4 <memset>
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <std+0x38>)
 80029cc:	6263      	str	r3, [r4, #36]	; 0x24
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <std+0x3c>)
 80029d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <std+0x40>)
 80029d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <std+0x44>)
 80029d8:	6224      	str	r4, [r4, #32]
 80029da:	6323      	str	r3, [r4, #48]	; 0x30
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	bf00      	nop
 80029e0:	08003255 	.word	0x08003255
 80029e4:	08003277 	.word	0x08003277
 80029e8:	080032af 	.word	0x080032af
 80029ec:	080032d3 	.word	0x080032d3

080029f0 <_cleanup_r>:
 80029f0:	4901      	ldr	r1, [pc, #4]	; (80029f8 <_cleanup_r+0x8>)
 80029f2:	f000 b8af 	b.w	8002b54 <_fwalk_reent>
 80029f6:	bf00      	nop
 80029f8:	08002931 	.word	0x08002931

080029fc <__sfmoreglue>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2268      	movs	r2, #104	; 0x68
 8002a00:	1e4d      	subs	r5, r1, #1
 8002a02:	4355      	muls	r5, r2
 8002a04:	460e      	mov	r6, r1
 8002a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a0a:	f7ff fce5 	bl	80023d8 <_malloc_r>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	b140      	cbz	r0, 8002a24 <__sfmoreglue+0x28>
 8002a12:	2100      	movs	r1, #0
 8002a14:	e9c0 1600 	strd	r1, r6, [r0]
 8002a18:	300c      	adds	r0, #12
 8002a1a:	60a0      	str	r0, [r4, #8]
 8002a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a20:	f7ff fc68 	bl	80022f4 <memset>
 8002a24:	4620      	mov	r0, r4
 8002a26:	bd70      	pop	{r4, r5, r6, pc}

08002a28 <__sfp_lock_acquire>:
 8002a28:	4801      	ldr	r0, [pc, #4]	; (8002a30 <__sfp_lock_acquire+0x8>)
 8002a2a:	f000 b8b3 	b.w	8002b94 <__retarget_lock_acquire_recursive>
 8002a2e:	bf00      	nop
 8002a30:	200000dd 	.word	0x200000dd

08002a34 <__sfp_lock_release>:
 8002a34:	4801      	ldr	r0, [pc, #4]	; (8002a3c <__sfp_lock_release+0x8>)
 8002a36:	f000 b8ae 	b.w	8002b96 <__retarget_lock_release_recursive>
 8002a3a:	bf00      	nop
 8002a3c:	200000dd 	.word	0x200000dd

08002a40 <__sinit_lock_acquire>:
 8002a40:	4801      	ldr	r0, [pc, #4]	; (8002a48 <__sinit_lock_acquire+0x8>)
 8002a42:	f000 b8a7 	b.w	8002b94 <__retarget_lock_acquire_recursive>
 8002a46:	bf00      	nop
 8002a48:	200000de 	.word	0x200000de

08002a4c <__sinit_lock_release>:
 8002a4c:	4801      	ldr	r0, [pc, #4]	; (8002a54 <__sinit_lock_release+0x8>)
 8002a4e:	f000 b8a2 	b.w	8002b96 <__retarget_lock_release_recursive>
 8002a52:	bf00      	nop
 8002a54:	200000de 	.word	0x200000de

08002a58 <__sinit>:
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	f7ff fff0 	bl	8002a40 <__sinit_lock_acquire>
 8002a60:	69a3      	ldr	r3, [r4, #24]
 8002a62:	b11b      	cbz	r3, 8002a6c <__sinit+0x14>
 8002a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a68:	f7ff bff0 	b.w	8002a4c <__sinit_lock_release>
 8002a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a70:	6523      	str	r3, [r4, #80]	; 0x50
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <__sinit+0x68>)
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <__sinit+0x6c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a7a:	42a3      	cmp	r3, r4
 8002a7c:	bf04      	itt	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	61a3      	streq	r3, [r4, #24]
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 f820 	bl	8002ac8 <__sfp>
 8002a88:	6060      	str	r0, [r4, #4]
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f000 f81c 	bl	8002ac8 <__sfp>
 8002a90:	60a0      	str	r0, [r4, #8]
 8002a92:	4620      	mov	r0, r4
 8002a94:	f000 f818 	bl	8002ac8 <__sfp>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60e0      	str	r0, [r4, #12]
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	6860      	ldr	r0, [r4, #4]
 8002aa0:	f7ff ff82 	bl	80029a8 <std>
 8002aa4:	68a0      	ldr	r0, [r4, #8]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2109      	movs	r1, #9
 8002aaa:	f7ff ff7d 	bl	80029a8 <std>
 8002aae:	68e0      	ldr	r0, [r4, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	2112      	movs	r1, #18
 8002ab4:	f7ff ff78 	bl	80029a8 <std>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	61a3      	str	r3, [r4, #24]
 8002abc:	e7d2      	b.n	8002a64 <__sinit+0xc>
 8002abe:	bf00      	nop
 8002ac0:	08003444 	.word	0x08003444
 8002ac4:	080029f1 	.word	0x080029f1

08002ac8 <__sfp>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	4607      	mov	r7, r0
 8002acc:	f7ff ffac 	bl	8002a28 <__sfp_lock_acquire>
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <__sfp+0x84>)
 8002ad2:	681e      	ldr	r6, [r3, #0]
 8002ad4:	69b3      	ldr	r3, [r6, #24]
 8002ad6:	b913      	cbnz	r3, 8002ade <__sfp+0x16>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f7ff ffbd 	bl	8002a58 <__sinit>
 8002ade:	3648      	adds	r6, #72	; 0x48
 8002ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	d503      	bpl.n	8002af0 <__sfp+0x28>
 8002ae8:	6833      	ldr	r3, [r6, #0]
 8002aea:	b30b      	cbz	r3, 8002b30 <__sfp+0x68>
 8002aec:	6836      	ldr	r6, [r6, #0]
 8002aee:	e7f7      	b.n	8002ae0 <__sfp+0x18>
 8002af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002af4:	b9d5      	cbnz	r5, 8002b2c <__sfp+0x64>
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <__sfp+0x88>)
 8002af8:	60e3      	str	r3, [r4, #12]
 8002afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002afe:	6665      	str	r5, [r4, #100]	; 0x64
 8002b00:	f000 f847 	bl	8002b92 <__retarget_lock_init_recursive>
 8002b04:	f7ff ff96 	bl	8002a34 <__sfp_lock_release>
 8002b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b10:	6025      	str	r5, [r4, #0]
 8002b12:	61a5      	str	r5, [r4, #24]
 8002b14:	2208      	movs	r2, #8
 8002b16:	4629      	mov	r1, r5
 8002b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b1c:	f7ff fbea 	bl	80022f4 <memset>
 8002b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b28:	4620      	mov	r0, r4
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2c:	3468      	adds	r4, #104	; 0x68
 8002b2e:	e7d9      	b.n	8002ae4 <__sfp+0x1c>
 8002b30:	2104      	movs	r1, #4
 8002b32:	4638      	mov	r0, r7
 8002b34:	f7ff ff62 	bl	80029fc <__sfmoreglue>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	6030      	str	r0, [r6, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d1d5      	bne.n	8002aec <__sfp+0x24>
 8002b40:	f7ff ff78 	bl	8002a34 <__sfp_lock_release>
 8002b44:	230c      	movs	r3, #12
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	e7ee      	b.n	8002b28 <__sfp+0x60>
 8002b4a:	bf00      	nop
 8002b4c:	08003444 	.word	0x08003444
 8002b50:	ffff0001 	.word	0xffff0001

08002b54 <_fwalk_reent>:
 8002b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b58:	4606      	mov	r6, r0
 8002b5a:	4688      	mov	r8, r1
 8002b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b60:	2700      	movs	r7, #0
 8002b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b66:	f1b9 0901 	subs.w	r9, r9, #1
 8002b6a:	d505      	bpl.n	8002b78 <_fwalk_reent+0x24>
 8002b6c:	6824      	ldr	r4, [r4, #0]
 8002b6e:	2c00      	cmp	r4, #0
 8002b70:	d1f7      	bne.n	8002b62 <_fwalk_reent+0xe>
 8002b72:	4638      	mov	r0, r7
 8002b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b78:	89ab      	ldrh	r3, [r5, #12]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d907      	bls.n	8002b8e <_fwalk_reent+0x3a>
 8002b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b82:	3301      	adds	r3, #1
 8002b84:	d003      	beq.n	8002b8e <_fwalk_reent+0x3a>
 8002b86:	4629      	mov	r1, r5
 8002b88:	4630      	mov	r0, r6
 8002b8a:	47c0      	blx	r8
 8002b8c:	4307      	orrs	r7, r0
 8002b8e:	3568      	adds	r5, #104	; 0x68
 8002b90:	e7e9      	b.n	8002b66 <_fwalk_reent+0x12>

08002b92 <__retarget_lock_init_recursive>:
 8002b92:	4770      	bx	lr

08002b94 <__retarget_lock_acquire_recursive>:
 8002b94:	4770      	bx	lr

08002b96 <__retarget_lock_release_recursive>:
 8002b96:	4770      	bx	lr

08002b98 <__swhatbuf_r>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	460e      	mov	r6, r1
 8002b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	b096      	sub	sp, #88	; 0x58
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	da08      	bge.n	8002bbc <__swhatbuf_r+0x24>
 8002baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	602a      	str	r2, [r5, #0]
 8002bb2:	061a      	lsls	r2, r3, #24
 8002bb4:	d410      	bmi.n	8002bd8 <__swhatbuf_r+0x40>
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	e00e      	b.n	8002bda <__swhatbuf_r+0x42>
 8002bbc:	466a      	mov	r2, sp
 8002bbe:	f000 fbaf 	bl	8003320 <_fstat_r>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	dbf1      	blt.n	8002baa <__swhatbuf_r+0x12>
 8002bc6:	9a01      	ldr	r2, [sp, #4]
 8002bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bd0:	425a      	negs	r2, r3
 8002bd2:	415a      	adcs	r2, r3
 8002bd4:	602a      	str	r2, [r5, #0]
 8002bd6:	e7ee      	b.n	8002bb6 <__swhatbuf_r+0x1e>
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	2000      	movs	r0, #0
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	b016      	add	sp, #88	; 0x58
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002be4 <__smakebuf_r>:
 8002be4:	898b      	ldrh	r3, [r1, #12]
 8002be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002be8:	079d      	lsls	r5, r3, #30
 8002bea:	4606      	mov	r6, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	d507      	bpl.n	8002c00 <__smakebuf_r+0x1c>
 8002bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	6123      	str	r3, [r4, #16]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	6163      	str	r3, [r4, #20]
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	ab01      	add	r3, sp, #4
 8002c02:	466a      	mov	r2, sp
 8002c04:	f7ff ffc8 	bl	8002b98 <__swhatbuf_r>
 8002c08:	9900      	ldr	r1, [sp, #0]
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f7ff fbe3 	bl	80023d8 <_malloc_r>
 8002c12:	b948      	cbnz	r0, 8002c28 <__smakebuf_r+0x44>
 8002c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c18:	059a      	lsls	r2, r3, #22
 8002c1a:	d4ef      	bmi.n	8002bfc <__smakebuf_r+0x18>
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	e7e3      	b.n	8002bf0 <__smakebuf_r+0xc>
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <__smakebuf_r+0x7c>)
 8002c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	6020      	str	r0, [r4, #0]
 8002c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	9b00      	ldr	r3, [sp, #0]
 8002c38:	6163      	str	r3, [r4, #20]
 8002c3a:	9b01      	ldr	r3, [sp, #4]
 8002c3c:	6120      	str	r0, [r4, #16]
 8002c3e:	b15b      	cbz	r3, 8002c58 <__smakebuf_r+0x74>
 8002c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 fb7d 	bl	8003344 <_isatty_r>
 8002c4a:	b128      	cbz	r0, 8002c58 <__smakebuf_r+0x74>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	89a0      	ldrh	r0, [r4, #12]
 8002c5a:	4305      	orrs	r5, r0
 8002c5c:	81a5      	strh	r5, [r4, #12]
 8002c5e:	e7cd      	b.n	8002bfc <__smakebuf_r+0x18>
 8002c60:	080029f1 	.word	0x080029f1

08002c64 <__malloc_lock>:
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <__malloc_lock+0x8>)
 8002c66:	f7ff bf95 	b.w	8002b94 <__retarget_lock_acquire_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	200000dc 	.word	0x200000dc

08002c70 <__malloc_unlock>:
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <__malloc_unlock+0x8>)
 8002c72:	f7ff bf90 	b.w	8002b96 <__retarget_lock_release_recursive>
 8002c76:	bf00      	nop
 8002c78:	200000dc 	.word	0x200000dc

08002c7c <__sfputc_r>:
 8002c7c:	6893      	ldr	r3, [r2, #8]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	b410      	push	{r4}
 8002c84:	6093      	str	r3, [r2, #8]
 8002c86:	da07      	bge.n	8002c98 <__sfputc_r+0x1c>
 8002c88:	6994      	ldr	r4, [r2, #24]
 8002c8a:	42a3      	cmp	r3, r4
 8002c8c:	db01      	blt.n	8002c92 <__sfputc_r+0x16>
 8002c8e:	290a      	cmp	r1, #10
 8002c90:	d102      	bne.n	8002c98 <__sfputc_r+0x1c>
 8002c92:	bc10      	pop	{r4}
 8002c94:	f7ff bd0a 	b.w	80026ac <__swbuf_r>
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	1c58      	adds	r0, r3, #1
 8002c9c:	6010      	str	r0, [r2, #0]
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	bc10      	pop	{r4}
 8002ca4:	4770      	bx	lr

08002ca6 <__sfputs_r>:
 8002ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca8:	4606      	mov	r6, r0
 8002caa:	460f      	mov	r7, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	18d5      	adds	r5, r2, r3
 8002cb0:	42ac      	cmp	r4, r5
 8002cb2:	d101      	bne.n	8002cb8 <__sfputs_r+0x12>
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e007      	b.n	8002cc8 <__sfputs_r+0x22>
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	463a      	mov	r2, r7
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ffdc 	bl	8002c7c <__sfputc_r>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d1f3      	bne.n	8002cb0 <__sfputs_r+0xa>
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ccc <_vfiprintf_r>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	b09d      	sub	sp, #116	; 0x74
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	4698      	mov	r8, r3
 8002cd8:	4606      	mov	r6, r0
 8002cda:	b118      	cbz	r0, 8002ce4 <_vfiprintf_r+0x18>
 8002cdc:	6983      	ldr	r3, [r0, #24]
 8002cde:	b90b      	cbnz	r3, 8002ce4 <_vfiprintf_r+0x18>
 8002ce0:	f7ff feba 	bl	8002a58 <__sinit>
 8002ce4:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <_vfiprintf_r+0x240>)
 8002ce6:	429d      	cmp	r5, r3
 8002ce8:	d11b      	bne.n	8002d22 <_vfiprintf_r+0x56>
 8002cea:	6875      	ldr	r5, [r6, #4]
 8002cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cee:	07d9      	lsls	r1, r3, #31
 8002cf0:	d405      	bmi.n	8002cfe <_vfiprintf_r+0x32>
 8002cf2:	89ab      	ldrh	r3, [r5, #12]
 8002cf4:	059a      	lsls	r2, r3, #22
 8002cf6:	d402      	bmi.n	8002cfe <_vfiprintf_r+0x32>
 8002cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cfa:	f7ff ff4b 	bl	8002b94 <__retarget_lock_acquire_recursive>
 8002cfe:	89ab      	ldrh	r3, [r5, #12]
 8002d00:	071b      	lsls	r3, r3, #28
 8002d02:	d501      	bpl.n	8002d08 <_vfiprintf_r+0x3c>
 8002d04:	692b      	ldr	r3, [r5, #16]
 8002d06:	b9eb      	cbnz	r3, 8002d44 <_vfiprintf_r+0x78>
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f7ff fd20 	bl	8002750 <__swsetup_r>
 8002d10:	b1c0      	cbz	r0, 8002d44 <_vfiprintf_r+0x78>
 8002d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d14:	07dc      	lsls	r4, r3, #31
 8002d16:	d50e      	bpl.n	8002d36 <_vfiprintf_r+0x6a>
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d1c:	b01d      	add	sp, #116	; 0x74
 8002d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <_vfiprintf_r+0x244>)
 8002d24:	429d      	cmp	r5, r3
 8002d26:	d101      	bne.n	8002d2c <_vfiprintf_r+0x60>
 8002d28:	68b5      	ldr	r5, [r6, #8]
 8002d2a:	e7df      	b.n	8002cec <_vfiprintf_r+0x20>
 8002d2c:	4b79      	ldr	r3, [pc, #484]	; (8002f14 <_vfiprintf_r+0x248>)
 8002d2e:	429d      	cmp	r5, r3
 8002d30:	bf08      	it	eq
 8002d32:	68f5      	ldreq	r5, [r6, #12]
 8002d34:	e7da      	b.n	8002cec <_vfiprintf_r+0x20>
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	0598      	lsls	r0, r3, #22
 8002d3a:	d4ed      	bmi.n	8002d18 <_vfiprintf_r+0x4c>
 8002d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3e:	f7ff ff2a 	bl	8002b96 <__retarget_lock_release_recursive>
 8002d42:	e7e9      	b.n	8002d18 <_vfiprintf_r+0x4c>
 8002d44:	2300      	movs	r3, #0
 8002d46:	9309      	str	r3, [sp, #36]	; 0x24
 8002d48:	2320      	movs	r3, #32
 8002d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d52:	2330      	movs	r3, #48	; 0x30
 8002d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002f18 <_vfiprintf_r+0x24c>
 8002d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5c:	f04f 0901 	mov.w	r9, #1
 8002d60:	4623      	mov	r3, r4
 8002d62:	469a      	mov	sl, r3
 8002d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d68:	b10a      	cbz	r2, 8002d6e <_vfiprintf_r+0xa2>
 8002d6a:	2a25      	cmp	r2, #37	; 0x25
 8002d6c:	d1f9      	bne.n	8002d62 <_vfiprintf_r+0x96>
 8002d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d72:	d00b      	beq.n	8002d8c <_vfiprintf_r+0xc0>
 8002d74:	465b      	mov	r3, fp
 8002d76:	4622      	mov	r2, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7ff ff93 	bl	8002ca6 <__sfputs_r>
 8002d80:	3001      	adds	r0, #1
 8002d82:	f000 80aa 	beq.w	8002eda <_vfiprintf_r+0x20e>
 8002d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d88:	445a      	add	r2, fp
 8002d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a2 	beq.w	8002eda <_vfiprintf_r+0x20e>
 8002d96:	2300      	movs	r3, #0
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da0:	f10a 0a01 	add.w	sl, sl, #1
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dac:	931a      	str	r3, [sp, #104]	; 0x68
 8002dae:	4654      	mov	r4, sl
 8002db0:	2205      	movs	r2, #5
 8002db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db6:	4858      	ldr	r0, [pc, #352]	; (8002f18 <_vfiprintf_r+0x24c>)
 8002db8:	f7fd fa1a 	bl	80001f0 <memchr>
 8002dbc:	9a04      	ldr	r2, [sp, #16]
 8002dbe:	b9d8      	cbnz	r0, 8002df8 <_vfiprintf_r+0x12c>
 8002dc0:	06d1      	lsls	r1, r2, #27
 8002dc2:	bf44      	itt	mi
 8002dc4:	2320      	movmi	r3, #32
 8002dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dca:	0713      	lsls	r3, r2, #28
 8002dcc:	bf44      	itt	mi
 8002dce:	232b      	movmi	r3, #43	; 0x2b
 8002dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dda:	d015      	beq.n	8002e08 <_vfiprintf_r+0x13c>
 8002ddc:	9a07      	ldr	r2, [sp, #28]
 8002dde:	4654      	mov	r4, sl
 8002de0:	2000      	movs	r0, #0
 8002de2:	f04f 0c0a 	mov.w	ip, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dec:	3b30      	subs	r3, #48	; 0x30
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	d94e      	bls.n	8002e90 <_vfiprintf_r+0x1c4>
 8002df2:	b1b0      	cbz	r0, 8002e22 <_vfiprintf_r+0x156>
 8002df4:	9207      	str	r2, [sp, #28]
 8002df6:	e014      	b.n	8002e22 <_vfiprintf_r+0x156>
 8002df8:	eba0 0308 	sub.w	r3, r0, r8
 8002dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	46a2      	mov	sl, r4
 8002e06:	e7d2      	b.n	8002dae <_vfiprintf_r+0xe2>
 8002e08:	9b03      	ldr	r3, [sp, #12]
 8002e0a:	1d19      	adds	r1, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	9103      	str	r1, [sp, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bfbb      	ittet	lt
 8002e14:	425b      	neglt	r3, r3
 8002e16:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1a:	9307      	strge	r3, [sp, #28]
 8002e1c:	9307      	strlt	r3, [sp, #28]
 8002e1e:	bfb8      	it	lt
 8002e20:	9204      	strlt	r2, [sp, #16]
 8002e22:	7823      	ldrb	r3, [r4, #0]
 8002e24:	2b2e      	cmp	r3, #46	; 0x2e
 8002e26:	d10c      	bne.n	8002e42 <_vfiprintf_r+0x176>
 8002e28:	7863      	ldrb	r3, [r4, #1]
 8002e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2c:	d135      	bne.n	8002e9a <_vfiprintf_r+0x1ce>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfb8      	it	lt
 8002e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e3e:	3402      	adds	r4, #2
 8002e40:	9305      	str	r3, [sp, #20]
 8002e42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002f1c <_vfiprintf_r+0x250>
 8002e46:	7821      	ldrb	r1, [r4, #0]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	f7fd f9d0 	bl	80001f0 <memchr>
 8002e50:	b140      	cbz	r0, 8002e64 <_vfiprintf_r+0x198>
 8002e52:	2340      	movs	r3, #64	; 0x40
 8002e54:	eba0 000a 	sub.w	r0, r0, sl
 8002e58:	fa03 f000 	lsl.w	r0, r3, r0
 8002e5c:	9b04      	ldr	r3, [sp, #16]
 8002e5e:	4303      	orrs	r3, r0
 8002e60:	3401      	adds	r4, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e68:	482d      	ldr	r0, [pc, #180]	; (8002f20 <_vfiprintf_r+0x254>)
 8002e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6e:	2206      	movs	r2, #6
 8002e70:	f7fd f9be 	bl	80001f0 <memchr>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d03f      	beq.n	8002ef8 <_vfiprintf_r+0x22c>
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <_vfiprintf_r+0x258>)
 8002e7a:	bb1b      	cbnz	r3, 8002ec4 <_vfiprintf_r+0x1f8>
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	3307      	adds	r3, #7
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	3308      	adds	r3, #8
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8a:	443b      	add	r3, r7
 8002e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8e:	e767      	b.n	8002d60 <_vfiprintf_r+0x94>
 8002e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e94:	460c      	mov	r4, r1
 8002e96:	2001      	movs	r0, #1
 8002e98:	e7a5      	b.n	8002de6 <_vfiprintf_r+0x11a>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	3401      	adds	r4, #1
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 0c0a 	mov.w	ip, #10
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eac:	3a30      	subs	r2, #48	; 0x30
 8002eae:	2a09      	cmp	r2, #9
 8002eb0:	d903      	bls.n	8002eba <_vfiprintf_r+0x1ee>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0c5      	beq.n	8002e42 <_vfiprintf_r+0x176>
 8002eb6:	9105      	str	r1, [sp, #20]
 8002eb8:	e7c3      	b.n	8002e42 <_vfiprintf_r+0x176>
 8002eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e7f0      	b.n	8002ea6 <_vfiprintf_r+0x1da>
 8002ec4:	ab03      	add	r3, sp, #12
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	462a      	mov	r2, r5
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <_vfiprintf_r+0x25c>)
 8002ecc:	a904      	add	r1, sp, #16
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	1c78      	adds	r0, r7, #1
 8002ed8:	d1d6      	bne.n	8002e88 <_vfiprintf_r+0x1bc>
 8002eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002edc:	07d9      	lsls	r1, r3, #31
 8002ede:	d405      	bmi.n	8002eec <_vfiprintf_r+0x220>
 8002ee0:	89ab      	ldrh	r3, [r5, #12]
 8002ee2:	059a      	lsls	r2, r3, #22
 8002ee4:	d402      	bmi.n	8002eec <_vfiprintf_r+0x220>
 8002ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ee8:	f7ff fe55 	bl	8002b96 <__retarget_lock_release_recursive>
 8002eec:	89ab      	ldrh	r3, [r5, #12]
 8002eee:	065b      	lsls	r3, r3, #25
 8002ef0:	f53f af12 	bmi.w	8002d18 <_vfiprintf_r+0x4c>
 8002ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ef6:	e711      	b.n	8002d1c <_vfiprintf_r+0x50>
 8002ef8:	ab03      	add	r3, sp, #12
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	462a      	mov	r2, r5
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <_vfiprintf_r+0x25c>)
 8002f00:	a904      	add	r1, sp, #16
 8002f02:	4630      	mov	r0, r6
 8002f04:	f000 f880 	bl	8003008 <_printf_i>
 8002f08:	e7e4      	b.n	8002ed4 <_vfiprintf_r+0x208>
 8002f0a:	bf00      	nop
 8002f0c:	08003468 	.word	0x08003468
 8002f10:	08003488 	.word	0x08003488
 8002f14:	08003448 	.word	0x08003448
 8002f18:	080034a8 	.word	0x080034a8
 8002f1c:	080034ae 	.word	0x080034ae
 8002f20:	080034b2 	.word	0x080034b2
 8002f24:	00000000 	.word	0x00000000
 8002f28:	08002ca7 	.word	0x08002ca7

08002f2c <_printf_common>:
 8002f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	4616      	mov	r6, r2
 8002f32:	4699      	mov	r9, r3
 8002f34:	688a      	ldr	r2, [r1, #8]
 8002f36:	690b      	ldr	r3, [r1, #16]
 8002f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bfb8      	it	lt
 8002f40:	4613      	movlt	r3, r2
 8002f42:	6033      	str	r3, [r6, #0]
 8002f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f48:	4607      	mov	r7, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	b10a      	cbz	r2, 8002f52 <_printf_common+0x26>
 8002f4e:	3301      	adds	r3, #1
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	0699      	lsls	r1, r3, #26
 8002f56:	bf42      	ittt	mi
 8002f58:	6833      	ldrmi	r3, [r6, #0]
 8002f5a:	3302      	addmi	r3, #2
 8002f5c:	6033      	strmi	r3, [r6, #0]
 8002f5e:	6825      	ldr	r5, [r4, #0]
 8002f60:	f015 0506 	ands.w	r5, r5, #6
 8002f64:	d106      	bne.n	8002f74 <_printf_common+0x48>
 8002f66:	f104 0a19 	add.w	sl, r4, #25
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	6832      	ldr	r2, [r6, #0]
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	42ab      	cmp	r3, r5
 8002f72:	dc26      	bgt.n	8002fc2 <_printf_common+0x96>
 8002f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f78:	1e13      	subs	r3, r2, #0
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	bf18      	it	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	0692      	lsls	r2, r2, #26
 8002f82:	d42b      	bmi.n	8002fdc <_printf_common+0xb0>
 8002f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d01e      	beq.n	8002fd0 <_printf_common+0xa4>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	68e5      	ldr	r5, [r4, #12]
 8002f96:	6832      	ldr	r2, [r6, #0]
 8002f98:	f003 0306 	and.w	r3, r3, #6
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	bf08      	it	eq
 8002fa0:	1aad      	subeq	r5, r5, r2
 8002fa2:	68a3      	ldr	r3, [r4, #8]
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	bf0c      	ite	eq
 8002fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fac:	2500      	movne	r5, #0
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bfc4      	itt	gt
 8002fb2:	1a9b      	subgt	r3, r3, r2
 8002fb4:	18ed      	addgt	r5, r5, r3
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	341a      	adds	r4, #26
 8002fba:	42b5      	cmp	r5, r6
 8002fbc:	d11a      	bne.n	8002ff4 <_printf_common+0xc8>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e008      	b.n	8002fd4 <_printf_common+0xa8>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	4638      	mov	r0, r7
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_printf_common+0xac>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7c6      	b.n	8002f6a <_printf_common+0x3e>
 8002fdc:	18e1      	adds	r1, r4, r3
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	2030      	movs	r0, #48	; 0x30
 8002fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fe6:	4422      	add	r2, r4
 8002fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	e7c7      	b.n	8002f84 <_printf_common+0x58>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xa4>
 8003002:	3601      	adds	r6, #1
 8003004:	e7d9      	b.n	8002fba <_printf_common+0x8e>
	...

08003008 <_printf_i>:
 8003008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	7e0f      	ldrb	r7, [r1, #24]
 800300e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003010:	2f78      	cmp	r7, #120	; 0x78
 8003012:	4691      	mov	r9, r2
 8003014:	4680      	mov	r8, r0
 8003016:	460c      	mov	r4, r1
 8003018:	469a      	mov	sl, r3
 800301a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800301e:	d807      	bhi.n	8003030 <_printf_i+0x28>
 8003020:	2f62      	cmp	r7, #98	; 0x62
 8003022:	d80a      	bhi.n	800303a <_printf_i+0x32>
 8003024:	2f00      	cmp	r7, #0
 8003026:	f000 80d8 	beq.w	80031da <_printf_i+0x1d2>
 800302a:	2f58      	cmp	r7, #88	; 0x58
 800302c:	f000 80a3 	beq.w	8003176 <_printf_i+0x16e>
 8003030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003038:	e03a      	b.n	80030b0 <_printf_i+0xa8>
 800303a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800303e:	2b15      	cmp	r3, #21
 8003040:	d8f6      	bhi.n	8003030 <_printf_i+0x28>
 8003042:	a101      	add	r1, pc, #4	; (adr r1, 8003048 <_printf_i+0x40>)
 8003044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030b5 	.word	0x080030b5
 8003050:	08003031 	.word	0x08003031
 8003054:	08003031 	.word	0x08003031
 8003058:	08003031 	.word	0x08003031
 800305c:	08003031 	.word	0x08003031
 8003060:	080030b5 	.word	0x080030b5
 8003064:	08003031 	.word	0x08003031
 8003068:	08003031 	.word	0x08003031
 800306c:	08003031 	.word	0x08003031
 8003070:	08003031 	.word	0x08003031
 8003074:	080031c1 	.word	0x080031c1
 8003078:	080030e5 	.word	0x080030e5
 800307c:	080031a3 	.word	0x080031a3
 8003080:	08003031 	.word	0x08003031
 8003084:	08003031 	.word	0x08003031
 8003088:	080031e3 	.word	0x080031e3
 800308c:	08003031 	.word	0x08003031
 8003090:	080030e5 	.word	0x080030e5
 8003094:	08003031 	.word	0x08003031
 8003098:	08003031 	.word	0x08003031
 800309c:	080031ab 	.word	0x080031ab
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	1d1a      	adds	r2, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	602a      	str	r2, [r5, #0]
 80030a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0a3      	b.n	80031fc <_printf_i+0x1f4>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	6829      	ldr	r1, [r5, #0]
 80030b8:	0606      	lsls	r6, r0, #24
 80030ba:	f101 0304 	add.w	r3, r1, #4
 80030be:	d50a      	bpl.n	80030d6 <_printf_i+0xce>
 80030c0:	680e      	ldr	r6, [r1, #0]
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	2e00      	cmp	r6, #0
 80030c6:	da03      	bge.n	80030d0 <_printf_i+0xc8>
 80030c8:	232d      	movs	r3, #45	; 0x2d
 80030ca:	4276      	negs	r6, r6
 80030cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d0:	485e      	ldr	r0, [pc, #376]	; (800324c <_printf_i+0x244>)
 80030d2:	230a      	movs	r3, #10
 80030d4:	e019      	b.n	800310a <_printf_i+0x102>
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	602b      	str	r3, [r5, #0]
 80030da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030de:	bf18      	it	ne
 80030e0:	b236      	sxthne	r6, r6
 80030e2:	e7ef      	b.n	80030c4 <_printf_i+0xbc>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	1d19      	adds	r1, r3, #4
 80030ea:	6029      	str	r1, [r5, #0]
 80030ec:	0601      	lsls	r1, r0, #24
 80030ee:	d501      	bpl.n	80030f4 <_printf_i+0xec>
 80030f0:	681e      	ldr	r6, [r3, #0]
 80030f2:	e002      	b.n	80030fa <_printf_i+0xf2>
 80030f4:	0646      	lsls	r6, r0, #25
 80030f6:	d5fb      	bpl.n	80030f0 <_printf_i+0xe8>
 80030f8:	881e      	ldrh	r6, [r3, #0]
 80030fa:	4854      	ldr	r0, [pc, #336]	; (800324c <_printf_i+0x244>)
 80030fc:	2f6f      	cmp	r7, #111	; 0x6f
 80030fe:	bf0c      	ite	eq
 8003100:	2308      	moveq	r3, #8
 8003102:	230a      	movne	r3, #10
 8003104:	2100      	movs	r1, #0
 8003106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800310a:	6865      	ldr	r5, [r4, #4]
 800310c:	60a5      	str	r5, [r4, #8]
 800310e:	2d00      	cmp	r5, #0
 8003110:	bfa2      	ittt	ge
 8003112:	6821      	ldrge	r1, [r4, #0]
 8003114:	f021 0104 	bicge.w	r1, r1, #4
 8003118:	6021      	strge	r1, [r4, #0]
 800311a:	b90e      	cbnz	r6, 8003120 <_printf_i+0x118>
 800311c:	2d00      	cmp	r5, #0
 800311e:	d04d      	beq.n	80031bc <_printf_i+0x1b4>
 8003120:	4615      	mov	r5, r2
 8003122:	fbb6 f1f3 	udiv	r1, r6, r3
 8003126:	fb03 6711 	mls	r7, r3, r1, r6
 800312a:	5dc7      	ldrb	r7, [r0, r7]
 800312c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003130:	4637      	mov	r7, r6
 8003132:	42bb      	cmp	r3, r7
 8003134:	460e      	mov	r6, r1
 8003136:	d9f4      	bls.n	8003122 <_printf_i+0x11a>
 8003138:	2b08      	cmp	r3, #8
 800313a:	d10b      	bne.n	8003154 <_printf_i+0x14c>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	07de      	lsls	r6, r3, #31
 8003140:	d508      	bpl.n	8003154 <_printf_i+0x14c>
 8003142:	6923      	ldr	r3, [r4, #16]
 8003144:	6861      	ldr	r1, [r4, #4]
 8003146:	4299      	cmp	r1, r3
 8003148:	bfde      	ittt	le
 800314a:	2330      	movle	r3, #48	; 0x30
 800314c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003150:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003154:	1b52      	subs	r2, r2, r5
 8003156:	6122      	str	r2, [r4, #16]
 8003158:	f8cd a000 	str.w	sl, [sp]
 800315c:	464b      	mov	r3, r9
 800315e:	aa03      	add	r2, sp, #12
 8003160:	4621      	mov	r1, r4
 8003162:	4640      	mov	r0, r8
 8003164:	f7ff fee2 	bl	8002f2c <_printf_common>
 8003168:	3001      	adds	r0, #1
 800316a:	d14c      	bne.n	8003206 <_printf_i+0x1fe>
 800316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003170:	b004      	add	sp, #16
 8003172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003176:	4835      	ldr	r0, [pc, #212]	; (800324c <_printf_i+0x244>)
 8003178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800317c:	6829      	ldr	r1, [r5, #0]
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f851 6b04 	ldr.w	r6, [r1], #4
 8003184:	6029      	str	r1, [r5, #0]
 8003186:	061d      	lsls	r5, r3, #24
 8003188:	d514      	bpl.n	80031b4 <_printf_i+0x1ac>
 800318a:	07df      	lsls	r7, r3, #31
 800318c:	bf44      	itt	mi
 800318e:	f043 0320 	orrmi.w	r3, r3, #32
 8003192:	6023      	strmi	r3, [r4, #0]
 8003194:	b91e      	cbnz	r6, 800319e <_printf_i+0x196>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f023 0320 	bic.w	r3, r3, #32
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	2310      	movs	r3, #16
 80031a0:	e7b0      	b.n	8003104 <_printf_i+0xfc>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	2378      	movs	r3, #120	; 0x78
 80031ac:	4828      	ldr	r0, [pc, #160]	; (8003250 <_printf_i+0x248>)
 80031ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031b2:	e7e3      	b.n	800317c <_printf_i+0x174>
 80031b4:	0659      	lsls	r1, r3, #25
 80031b6:	bf48      	it	mi
 80031b8:	b2b6      	uxthmi	r6, r6
 80031ba:	e7e6      	b.n	800318a <_printf_i+0x182>
 80031bc:	4615      	mov	r5, r2
 80031be:	e7bb      	b.n	8003138 <_printf_i+0x130>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	6826      	ldr	r6, [r4, #0]
 80031c4:	6961      	ldr	r1, [r4, #20]
 80031c6:	1d18      	adds	r0, r3, #4
 80031c8:	6028      	str	r0, [r5, #0]
 80031ca:	0635      	lsls	r5, r6, #24
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	d501      	bpl.n	80031d4 <_printf_i+0x1cc>
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	e002      	b.n	80031da <_printf_i+0x1d2>
 80031d4:	0670      	lsls	r0, r6, #25
 80031d6:	d5fb      	bpl.n	80031d0 <_printf_i+0x1c8>
 80031d8:	8019      	strh	r1, [r3, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	6123      	str	r3, [r4, #16]
 80031de:	4615      	mov	r5, r2
 80031e0:	e7ba      	b.n	8003158 <_printf_i+0x150>
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	681d      	ldr	r5, [r3, #0]
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7fc fffe 	bl	80001f0 <memchr>
 80031f4:	b108      	cbz	r0, 80031fa <_printf_i+0x1f2>
 80031f6:	1b40      	subs	r0, r0, r5
 80031f8:	6060      	str	r0, [r4, #4]
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	2300      	movs	r3, #0
 8003200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003204:	e7a8      	b.n	8003158 <_printf_i+0x150>
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	462a      	mov	r2, r5
 800320a:	4649      	mov	r1, r9
 800320c:	4640      	mov	r0, r8
 800320e:	47d0      	blx	sl
 8003210:	3001      	adds	r0, #1
 8003212:	d0ab      	beq.n	800316c <_printf_i+0x164>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	079b      	lsls	r3, r3, #30
 8003218:	d413      	bmi.n	8003242 <_printf_i+0x23a>
 800321a:	68e0      	ldr	r0, [r4, #12]
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	4298      	cmp	r0, r3
 8003220:	bfb8      	it	lt
 8003222:	4618      	movlt	r0, r3
 8003224:	e7a4      	b.n	8003170 <_printf_i+0x168>
 8003226:	2301      	movs	r3, #1
 8003228:	4632      	mov	r2, r6
 800322a:	4649      	mov	r1, r9
 800322c:	4640      	mov	r0, r8
 800322e:	47d0      	blx	sl
 8003230:	3001      	adds	r0, #1
 8003232:	d09b      	beq.n	800316c <_printf_i+0x164>
 8003234:	3501      	adds	r5, #1
 8003236:	68e3      	ldr	r3, [r4, #12]
 8003238:	9903      	ldr	r1, [sp, #12]
 800323a:	1a5b      	subs	r3, r3, r1
 800323c:	42ab      	cmp	r3, r5
 800323e:	dcf2      	bgt.n	8003226 <_printf_i+0x21e>
 8003240:	e7eb      	b.n	800321a <_printf_i+0x212>
 8003242:	2500      	movs	r5, #0
 8003244:	f104 0619 	add.w	r6, r4, #25
 8003248:	e7f5      	b.n	8003236 <_printf_i+0x22e>
 800324a:	bf00      	nop
 800324c:	080034b9 	.word	0x080034b9
 8003250:	080034ca 	.word	0x080034ca

08003254 <__sread>:
 8003254:	b510      	push	{r4, lr}
 8003256:	460c      	mov	r4, r1
 8003258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325c:	f000 f894 	bl	8003388 <_read_r>
 8003260:	2800      	cmp	r0, #0
 8003262:	bfab      	itete	ge
 8003264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003266:	89a3      	ldrhlt	r3, [r4, #12]
 8003268:	181b      	addge	r3, r3, r0
 800326a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800326e:	bfac      	ite	ge
 8003270:	6563      	strge	r3, [r4, #84]	; 0x54
 8003272:	81a3      	strhlt	r3, [r4, #12]
 8003274:	bd10      	pop	{r4, pc}

08003276 <__swrite>:
 8003276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327a:	461f      	mov	r7, r3
 800327c:	898b      	ldrh	r3, [r1, #12]
 800327e:	05db      	lsls	r3, r3, #23
 8003280:	4605      	mov	r5, r0
 8003282:	460c      	mov	r4, r1
 8003284:	4616      	mov	r6, r2
 8003286:	d505      	bpl.n	8003294 <__swrite+0x1e>
 8003288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328c:	2302      	movs	r3, #2
 800328e:	2200      	movs	r2, #0
 8003290:	f000 f868 	bl	8003364 <_lseek_r>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800329a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	4632      	mov	r2, r6
 80032a2:	463b      	mov	r3, r7
 80032a4:	4628      	mov	r0, r5
 80032a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032aa:	f000 b817 	b.w	80032dc <_write_r>

080032ae <__sseek>:
 80032ae:	b510      	push	{r4, lr}
 80032b0:	460c      	mov	r4, r1
 80032b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b6:	f000 f855 	bl	8003364 <_lseek_r>
 80032ba:	1c43      	adds	r3, r0, #1
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	bf15      	itete	ne
 80032c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80032c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032ca:	81a3      	strheq	r3, [r4, #12]
 80032cc:	bf18      	it	ne
 80032ce:	81a3      	strhne	r3, [r4, #12]
 80032d0:	bd10      	pop	{r4, pc}

080032d2 <__sclose>:
 80032d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d6:	f000 b813 	b.w	8003300 <_close_r>
	...

080032dc <_write_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4d07      	ldr	r5, [pc, #28]	; (80032fc <_write_r+0x20>)
 80032e0:	4604      	mov	r4, r0
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	2200      	movs	r2, #0
 80032e8:	602a      	str	r2, [r5, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7fe ff23 	bl	8002136 <_write>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_write_r+0x1e>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_write_r+0x1e>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	200000e0 	.word	0x200000e0

08003300 <_close_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4d06      	ldr	r5, [pc, #24]	; (800331c <_close_r+0x1c>)
 8003304:	2300      	movs	r3, #0
 8003306:	4604      	mov	r4, r0
 8003308:	4608      	mov	r0, r1
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	f7fe ff2f 	bl	800216e <_close>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d102      	bne.n	800331a <_close_r+0x1a>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	b103      	cbz	r3, 800331a <_close_r+0x1a>
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	bd38      	pop	{r3, r4, r5, pc}
 800331c:	200000e0 	.word	0x200000e0

08003320 <_fstat_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4d07      	ldr	r5, [pc, #28]	; (8003340 <_fstat_r+0x20>)
 8003324:	2300      	movs	r3, #0
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	f7fe ff29 	bl	8002184 <_fstat>
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	d102      	bne.n	800333c <_fstat_r+0x1c>
 8003336:	682b      	ldr	r3, [r5, #0]
 8003338:	b103      	cbz	r3, 800333c <_fstat_r+0x1c>
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	bd38      	pop	{r3, r4, r5, pc}
 800333e:	bf00      	nop
 8003340:	200000e0 	.word	0x200000e0

08003344 <_isatty_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4d06      	ldr	r5, [pc, #24]	; (8003360 <_isatty_r+0x1c>)
 8003348:	2300      	movs	r3, #0
 800334a:	4604      	mov	r4, r0
 800334c:	4608      	mov	r0, r1
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	f7fe ff27 	bl	80021a2 <_isatty>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_isatty_r+0x1a>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_isatty_r+0x1a>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	200000e0 	.word	0x200000e0

08003364 <_lseek_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d07      	ldr	r5, [pc, #28]	; (8003384 <_lseek_r+0x20>)
 8003368:	4604      	mov	r4, r0
 800336a:	4608      	mov	r0, r1
 800336c:	4611      	mov	r1, r2
 800336e:	2200      	movs	r2, #0
 8003370:	602a      	str	r2, [r5, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f7fe ff1f 	bl	80021b6 <_lseek>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d102      	bne.n	8003382 <_lseek_r+0x1e>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	b103      	cbz	r3, 8003382 <_lseek_r+0x1e>
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	200000e0 	.word	0x200000e0

08003388 <_read_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4d07      	ldr	r5, [pc, #28]	; (80033a8 <_read_r+0x20>)
 800338c:	4604      	mov	r4, r0
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	2200      	movs	r2, #0
 8003394:	602a      	str	r2, [r5, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	f7fe feb0 	bl	80020fc <_read>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d102      	bne.n	80033a6 <_read_r+0x1e>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	b103      	cbz	r3, 80033a6 <_read_r+0x1e>
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	200000e0 	.word	0x200000e0

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
