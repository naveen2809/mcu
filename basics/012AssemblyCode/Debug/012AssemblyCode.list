
012AssemblyCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001035c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000011a  00000000  00000000  00010386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000044  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000024  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000058  00000000  00000000  00010508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000078  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000048  00000000  00000000  000105d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  00010620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800033c 	.word	0x0800033c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000004 	.word	0x20000004
 80001ec:	0800033c 	.word	0x0800033c

080001f0 <main>:

.section .text
.align 4
main:
	/* Save LR */
	PUSH {LR}
 80001f0:	b500      	push	{lr}
	/* 1. Enable peripheral clock for GPIOD */
	LDR R0,=AHB1ENR_ADDR
 80001f2:	480f      	ldr	r0, [pc, #60]	; (8000230 <Return+0x12>)
	LDR R1,=GPIOD_PERI_CLK_ENB_VAL
 80001f4:	f04f 0108 	mov.w	r1, #8
	LDR R2, [R0]
 80001f8:	6802      	ldr	r2, [r0, #0]
	ORR R2, R1
 80001fa:	ea42 0201 	orr.w	r2, r2, r1
	STR R2, [R0]
 80001fe:	6002      	str	r2, [r0, #0]
	/* 2. Set GPIOD Pin 12 as Output */
	LDR R0,=GPIOD_MODE_REG_ADDR
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <Return+0x16>)
	LDR R2, [R0]
 8000202:	6802      	ldr	r2, [r0, #0]
	LDR R1,=GPIOD_MODE_CLR_VAL
 8000204:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	AND R2, R1
 8000208:	ea02 0201 	and.w	r2, r2, r1
	LDR R1,=GPIOD_MODE_SET_VAL
 800020c:	f04f 41aa 	mov.w	r1, #1426063360	; 0x55000000
	ORR R2, R1
 8000210:	ea42 0201 	orr.w	r2, r2, r1
	STR R2, [R0]
 8000214:	6002      	str	r2, [r0, #0]

08000216 <Loop_INF>:
Loop_INF:
	SVC #1
 8000216:	df01      	svc	1
	BL Delay
 8000218:	f000 f83c 	bl	8000294 <Delay>
	B Loop_INF
 800021c:	e7fb      	b.n	8000216 <Loop_INF>

0800021e <Return>:

Return:
	/* Restore LR */
	POP {LR}
 800021e:	f85d eb04 	ldr.w	lr, [sp], #4
	BX LR
 8000222:	4770      	bx	lr
 8000224:	f3af 8000 	nop.w
 8000228:	f3af 8000 	nop.w
 800022c:	f3af 8000 	nop.w
	LDR R0,=AHB1ENR_ADDR
 8000230:	40023830 	.word	0x40023830
	LDR R0,=GPIOD_MODE_REG_ADDR
 8000234:	40020c00 	.word	0x40020c00
	...

08000240 <SVC_Handler>:
.section .text.SVC_Handler
.weak SVC_Handler
.type SVC_Handler, %function
SVC_Handler:
	/* Toggle GPIO */
		LDR R0,=GPIOD_ODR_ADDR
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <Exec_Toggle+0x18>)
		MRS R3, MSP
 8000242:	f3ef 8308 	mrs	r3, MSP
		ADD R3, R3, #24
 8000246:	f103 0318 	add.w	r3, r3, #24
		LDR R4, [R3]
 800024a:	681c      	ldr	r4, [r3, #0]
		SUB R4, R4, #2
 800024c:	f1a4 0402 	sub.w	r4, r4, #2
		EOR R3, R3, R3
 8000250:	ea83 0303 	eor.w	r3, r3, r3
		LDRB R3, [R4]
 8000254:	7823      	ldrb	r3, [r4, #0]

08000256 <Try_1>:
Try_1:
		SUBS R3, #1
 8000256:	3b01      	subs	r3, #1
		BNE Try_2
 8000258:	d102      	bne.n	8000260 <Try_2>
		LDR R1,=GPIOD_ODR_TOG_VAL_1
 800025a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		B Exec_Toggle
 800025e:	e00b      	b.n	8000278 <Exec_Toggle>

08000260 <Try_2>:
Try_2:
		SUBS R3, #1
 8000260:	3b01      	subs	r3, #1
		BNE Try_3
 8000262:	d102      	bne.n	800026a <Try_3>
		LDR R1,=GPIOD_ODR_TOG_VAL_2
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		B Exec_Toggle
 8000268:	e006      	b.n	8000278 <Exec_Toggle>

0800026a <Try_3>:
Try_3:
		SUBS R3, #1
 800026a:	3b01      	subs	r3, #1
		BNE Try_4
 800026c:	d102      	bne.n	8000274 <Try_4>
		LDR R1,=GPIOD_ODR_TOG_VAL_3
 800026e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		B Exec_Toggle
 8000272:	e001      	b.n	8000278 <Exec_Toggle>

08000274 <Try_4>:
Try_4:
		LDR R1,=GPIOD_ODR_TOG_VAL_4
 8000274:	f44f 4100 	mov.w	r1, #32768	; 0x8000

08000278 <Exec_Toggle>:
Exec_Toggle:
		LDR R2, [R0]
 8000278:	6802      	ldr	r2, [r0, #0]
		EOR R2, R1
 800027a:	ea82 0201 	eor.w	r2, r2, r1
		STR R2, [R0]
 800027e:	6002      	str	r2, [r0, #0]
		BX LR
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	f3af 8000 	nop.w
 8000288:	f3af 8000 	nop.w
 800028c:	f3af 8000 	nop.w
		LDR R0,=GPIOD_ODR_ADDR
 8000290:	40020c14 	.word	0x40020c14

08000294 <Delay>:

.align 4
.section .text.Delay_Function
.type Delay, %function
Delay:
	LDR R3,=DELAY_COUNT
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <Delay_Repeat+0x6>)

08000296 <Delay_Repeat>:
Delay_Repeat:
	SUBS R3, R3, #1
 8000296:	3b01      	subs	r3, #1
	BNE Delay_Repeat
 8000298:	d1fd      	bne.n	8000296 <Delay_Repeat>
	BX LR
 800029a:	4770      	bx	lr
	LDR R3,=DELAY_COUNT
 800029c:	000fffff 	.word	0x000fffff

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff8d 	bl	80001f0 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	; (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	; (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	; (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
