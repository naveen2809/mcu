
015FreeRTOSProjects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c64  08005c64  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c64  08005c64  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c64  08005c64  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000138c0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200138dc  200138dc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d222  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0f  00000000  00000000  0002d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b00  00000000  00000000  0002fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004fff  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d10a  00000000  00000000  00035587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002adc0  00000000  00000000  00042691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0006d451  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031b0  00000000  00000000  0006d4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005b20 	.word	0x08005b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08005b20 	.word	0x08005b20

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e64 	.word	0x20012e64

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	70fb      	strb	r3, [r7, #3]
 80002a0:	4613      	mov	r3, r2
 80002a2:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	78fa      	ldrb	r2, [r7, #3]
 80002ae:	0052      	lsls	r2, r2, #1
 80002b0:	2103      	movs	r1, #3
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	401a      	ands	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	78b9      	ldrb	r1, [r7, #2]
 80002c4:	78fa      	ldrb	r2, [r7, #3]
 80002c6:	0052      	lsls	r2, r2, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]

}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80002de:	b480      	push	{r7}
 80002e0:	b085      	sub	sp, #20
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	460b      	mov	r3, r1
 80002e8:	70fb      	strb	r3, [r7, #3]
 80002ea:	4613      	mov	r3, r2
 80002ec:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80002f2:	78fb      	ldrb	r3, [r7, #3]
 80002f4:	08db      	lsrs	r3, r3, #3
 80002f6:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	f003 0307 	and.w	r3, r3, #7
 80002fe:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000300:	7afa      	ldrb	r2, [r7, #11]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	3208      	adds	r2, #8
 8000306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030a:	7aba      	ldrb	r2, [r7, #10]
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	210f      	movs	r1, #15
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	7afa      	ldrb	r2, [r7, #11]
 800031a:	4019      	ands	r1, r3
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3208      	adds	r2, #8
 8000320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000324:	7afa      	ldrb	r2, [r7, #11]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3208      	adds	r2, #8
 800032a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800032e:	78b9      	ldrb	r1, [r7, #2]
 8000330:	7aba      	ldrb	r2, [r7, #10]
 8000332:	0092      	lsls	r2, r2, #2
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4611      	mov	r1, r2
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	4319      	orrs	r1, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3208      	adds	r2, #8
 8000342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000352:	b480      	push	{r7}
 8000354:	b085      	sub	sp, #20
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	460b      	mov	r3, r1
 800035c:	70fb      	strb	r3, [r7, #3]
 800035e:	4613      	mov	r3, r2
 8000360:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	78fa      	ldrb	r2, [r7, #3]
 800036c:	2101      	movs	r1, #1
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	401a      	ands	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	78b9      	ldrb	r1, [r7, #2]
 8000380:	78fa      	ldrb	r2, [r7, #3]
 8000382:	fa01 f202 	lsl.w	r2, r1, r2
 8000386:	431a      	orrs	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	605a      	str	r2, [r3, #4]
}
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
 80003a4:	4613      	mov	r3, r2
 80003a6:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	78fa      	ldrb	r2, [r7, #3]
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2103      	movs	r1, #3
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	43d2      	mvns	r2, r2
 80003bc:	401a      	ands	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	78b9      	ldrb	r1, [r7, #2]
 80003c8:	78fa      	ldrb	r2, [r7, #3]
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	431a      	orrs	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	60da      	str	r2, [r3, #12]
}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	460b      	mov	r3, r1
 80003ec:	70fb      	strb	r3, [r7, #3]
 80003ee:	4613      	mov	r3, r2
 80003f0:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	78fa      	ldrb	r2, [r7, #3]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	43d2      	mvns	r2, r2
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	78b9      	ldrb	r1, [r7, #2]
 8000412:	78fa      	ldrb	r2, [r7, #3]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	431a      	orrs	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	609a      	str	r2, [r3, #8]
}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a88      	ldr	r2, [pc, #544]	; (8000658 <EnablePeriClk+0x22c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d108      	bne.n	800044e <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800043c:	4b87      	ldr	r3, [pc, #540]	; (800065c <EnablePeriClk+0x230>)
 800043e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 800044c:	e19b      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a83      	ldr	r2, [pc, #524]	; (8000660 <EnablePeriClk+0x234>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d108      	bne.n	8000468 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000456:	4b81      	ldr	r3, [pc, #516]	; (800065c <EnablePeriClk+0x230>)
 8000458:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0202 	orr.w	r2, r3, #2
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	e18e      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a7e      	ldr	r2, [pc, #504]	; (8000664 <EnablePeriClk+0x238>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d108      	bne.n	8000482 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000470:	4b7a      	ldr	r3, [pc, #488]	; (800065c <EnablePeriClk+0x230>)
 8000472:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f043 0204 	orr.w	r2, r3, #4
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	601a      	str	r2, [r3, #0]
}
 8000480:	e181      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a78      	ldr	r2, [pc, #480]	; (8000668 <EnablePeriClk+0x23c>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d108      	bne.n	800049c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800048a:	4b74      	ldr	r3, [pc, #464]	; (800065c <EnablePeriClk+0x230>)
 800048c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f043 0208 	orr.w	r2, r3, #8
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	e174      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a73      	ldr	r2, [pc, #460]	; (800066c <EnablePeriClk+0x240>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d108      	bne.n	80004b6 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80004a4:	4b6d      	ldr	r3, [pc, #436]	; (800065c <EnablePeriClk+0x230>)
 80004a6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f043 0210 	orr.w	r2, r3, #16
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	e167      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a6d      	ldr	r2, [pc, #436]	; (8000670 <EnablePeriClk+0x244>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d108      	bne.n	80004d0 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80004be:	4b67      	ldr	r3, [pc, #412]	; (800065c <EnablePeriClk+0x230>)
 80004c0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f043 0220 	orr.w	r2, r3, #32
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	e15a      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a68      	ldr	r2, [pc, #416]	; (8000674 <EnablePeriClk+0x248>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d108      	bne.n	80004ea <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80004d8:	4b60      	ldr	r3, [pc, #384]	; (800065c <EnablePeriClk+0x230>)
 80004da:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	601a      	str	r2, [r3, #0]
}
 80004e8:	e14d      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a62      	ldr	r2, [pc, #392]	; (8000678 <EnablePeriClk+0x24c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d108      	bne.n	8000504 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80004f2:	4b5a      	ldr	r3, [pc, #360]	; (800065c <EnablePeriClk+0x230>)
 80004f4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	e140      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a5d      	ldr	r2, [pc, #372]	; (800067c <EnablePeriClk+0x250>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d108      	bne.n	800051e <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800050c:	4b53      	ldr	r3, [pc, #332]	; (800065c <EnablePeriClk+0x230>)
 800050e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	e133      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a57      	ldr	r2, [pc, #348]	; (8000680 <EnablePeriClk+0x254>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d108      	bne.n	8000538 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000526:	4b57      	ldr	r3, [pc, #348]	; (8000684 <EnablePeriClk+0x258>)
 8000528:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	e126      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a53      	ldr	r2, [pc, #332]	; (8000688 <EnablePeriClk+0x25c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d108      	bne.n	8000552 <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000540:	4b52      	ldr	r3, [pc, #328]	; (800068c <EnablePeriClk+0x260>)
 8000542:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	e119      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a4e      	ldr	r2, [pc, #312]	; (8000690 <EnablePeriClk+0x264>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d108      	bne.n	800056c <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <EnablePeriClk+0x260>)
 800055c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	e10c      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a49      	ldr	r2, [pc, #292]	; (8000694 <EnablePeriClk+0x268>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d108      	bne.n	8000586 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000574:	4b45      	ldr	r3, [pc, #276]	; (800068c <EnablePeriClk+0x260>)
 8000576:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	e0ff      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a43      	ldr	r2, [pc, #268]	; (8000698 <EnablePeriClk+0x26c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d108      	bne.n	80005a0 <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800058e:	4b3f      	ldr	r3, [pc, #252]	; (800068c <EnablePeriClk+0x260>)
 8000590:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	e0f2      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a3e      	ldr	r2, [pc, #248]	; (800069c <EnablePeriClk+0x270>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d108      	bne.n	80005ba <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <EnablePeriClk+0x260>)
 80005aa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	e0e5      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a38      	ldr	r2, [pc, #224]	; (80006a0 <EnablePeriClk+0x274>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d108      	bne.n	80005d4 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <EnablePeriClk+0x258>)
 80005c4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f043 0210 	orr.w	r2, r3, #16
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	e0d8      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <EnablePeriClk+0x278>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d108      	bne.n	80005ee <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <EnablePeriClk+0x260>)
 80005de:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	e0cb      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <EnablePeriClk+0x27c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d108      	bne.n	8000608 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <EnablePeriClk+0x260>)
 80005f8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]
}
 8000606:	e0be      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a28      	ldr	r2, [pc, #160]	; (80006ac <EnablePeriClk+0x280>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d108      	bne.n	8000622 <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <EnablePeriClk+0x260>)
 8000612:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	e0b1      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <EnablePeriClk+0x284>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d108      	bne.n	800063c <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <EnablePeriClk+0x260>)
 800062c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	e0a4      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <EnablePeriClk+0x288>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d139      	bne.n	80006b8 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <EnablePeriClk+0x258>)
 8000646:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f043 0220 	orr.w	r2, r3, #32
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	601a      	str	r2, [r3, #0]
}
 8000654:	e097      	b.n	8000786 <EnablePeriClk+0x35a>
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000
 800065c:	40023830 	.word	0x40023830
 8000660:	40020400 	.word	0x40020400
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00
 800066c:	40021000 	.word	0x40021000
 8000670:	40021400 	.word	0x40021400
 8000674:	40021800 	.word	0x40021800
 8000678:	40021c00 	.word	0x40021c00
 800067c:	40022000 	.word	0x40022000
 8000680:	40013000 	.word	0x40013000
 8000684:	40023844 	.word	0x40023844
 8000688:	40003800 	.word	0x40003800
 800068c:	40023840 	.word	0x40023840
 8000690:	40003c00 	.word	0x40003c00
 8000694:	40005400 	.word	0x40005400
 8000698:	40005800 	.word	0x40005800
 800069c:	40005c00 	.word	0x40005c00
 80006a0:	40011000 	.word	0x40011000
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40004800 	.word	0x40004800
 80006ac:	40004c00 	.word	0x40004c00
 80006b0:	40005000 	.word	0x40005000
 80006b4:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a36      	ldr	r2, [pc, #216]	; (8000794 <EnablePeriClk+0x368>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d108      	bne.n	80006d2 <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80006c0:	4b35      	ldr	r3, [pc, #212]	; (8000798 <EnablePeriClk+0x36c>)
 80006c2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f043 0210 	orr.w	r2, r3, #16
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	e059      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <EnablePeriClk+0x370>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d108      	bne.n	80006ec <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <EnablePeriClk+0x36c>)
 80006dc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f043 0220 	orr.w	r2, r3, #32
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	e04c      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <EnablePeriClk+0x374>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d108      	bne.n	8000706 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <EnablePeriClk+0x378>)
 80006f6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	e03f      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <EnablePeriClk+0x37c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d108      	bne.n	8000720 <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <EnablePeriClk+0x378>)
 8000710:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	e032      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000726:	d108      	bne.n	800073a <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <EnablePeriClk+0x36c>)
 800072a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f043 0201 	orr.w	r2, r3, #1
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	e025      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <EnablePeriClk+0x380>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d108      	bne.n	8000754 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <EnablePeriClk+0x36c>)
 8000744:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f043 0202 	orr.w	r2, r3, #2
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	e018      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <EnablePeriClk+0x384>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d108      	bne.n	800076e <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <EnablePeriClk+0x36c>)
 800075e:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f043 0204 	orr.w	r2, r3, #4
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	e00b      	b.n	8000786 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <EnablePeriClk+0x388>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d107      	bne.n	8000786 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <EnablePeriClk+0x36c>)
 8000778:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f043 0208 	orr.w	r2, r3, #8
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40001000 	.word	0x40001000
 8000798:	40023840 	.word	0x40023840
 800079c:	40001400 	.word	0x40001400
 80007a0:	40026000 	.word	0x40026000
 80007a4:	40023830 	.word	0x40023830
 80007a8:	40026400 	.word	0x40026400
 80007ac:	40000400 	.word	0x40000400
 80007b0:	40000800 	.word	0x40000800
 80007b4:	40000c00 	.word	0x40000c00

080007b8 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	095b      	lsrs	r3, r3, #5
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 031f 	and.w	r3, r3, #31
 80007d0:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007da:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80007de:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	431a      	orrs	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	601a      	str	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	371c      	adds	r7, #28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <NVIC_SetPriority>:

	return;
}

void NVIC_SetPriority(uint32_t *NVICPriorityRegisterBaseAddress, uint8_t IRQNum, uint8_t Priority)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
 800080a:	4613      	mov	r3, r2
 800080c:	70bb      	strb	r3, [r7, #2]
	uint8_t register_index, register_offset;

	register_index = IRQNum / 4;
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	089b      	lsrs	r3, r3, #2
 8000812:	73fb      	strb	r3, [r7, #15]
	register_offset = IRQNum % 4;
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	73bb      	strb	r3, [r7, #14]

	NVICPriorityRegisterBaseAddress[register_index] &= ~(0xFF << (register_offset*8));
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	440b      	add	r3, r1
 800083c:	4002      	ands	r2, r0
 800083e:	601a      	str	r2, [r3, #0]
	NVICPriorityRegisterBaseAddress[register_index] |= (Priority << (register_offset*8));
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4413      	add	r3, r2
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	78b9      	ldrb	r1, [r7, #2]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4618      	mov	r0, r3
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	440b      	add	r3, r1
 800085e:	4302      	orrs	r2, r0
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d110      	bne.n	80008a0 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0208 	orr.w	r2, r2, #8
 800088c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 0204 	bic.w	r2, r2, #4
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	e028      	b.n	80008f2 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d110      	bne.n	80008ca <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 0208 	bic.w	r2, r2, #8
 80008b6:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0204 	orr.w	r2, r2, #4
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	e013      	b.n	80008f2 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d10f      	bne.n	80008f2 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f042 0208 	orr.w	r2, r2, #8
 80008e0:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 0204 	orr.w	r2, r2, #4
 80008f0:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d108      	bne.n	800090c <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	e00b      	b.n	8000924 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000922:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000932:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6919      	ldr	r1, [r3, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	031a      	lsls	r2, r3, #12
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	430a      	orrs	r2, r1
 8000946:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d108      	bne.n	8000962 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	e028      	b.n	80009b4 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d110      	bne.n	800098c <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000978:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	e013      	b.n	80009b4 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d10f      	bne.n	80009b4 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009a2:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009b2:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f869 	bl	8000a92 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d110      	bne.n	80009ea <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	695a      	ldr	r2, [r3, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009d6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009e6:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 80009e8:	e03d      	b.n	8000a66 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d110      	bne.n	8000a14 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a00:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a10:	615a      	str	r2, [r3, #20]
}
 8000a12:	e028      	b.n	8000a66 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d110      	bne.n	8000a3e <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a2a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a3a:	615a      	str	r2, [r3, #20]
}
 8000a3c:	e013      	b.n	8000a66 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d10f      	bne.n	8000a66 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a54:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	695a      	ldr	r2, [r3, #20]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a64:	615a      	str	r2, [r3, #20]
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a84:	60da      	str	r2, [r3, #12]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <USART_SetBaudRate>:

	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000a9c:	f240 6383 	movw	r3, #1667	; 0x683
 8000aa0:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	609a      	str	r2, [r3, #8]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <main>:
static SemaphoreHandle_t xSemaphore;

char message[]="Hello World!!!\r\n";

int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8

	BaseType_t status;

	NVIC_SetPriorityGrouping();
 8000abe:	f000 f8b9 	bl	8000c34 <NVIC_SetPriorityGrouping>

	configure_uart();
 8000ac2:	f000 f8d5 	bl	8000c70 <configure_uart>
	NVIC_SetPriority(NVIC_PRIO_REG_BASE,USART2_IRQ_NO,100);
 8000ac6:	2264      	movs	r2, #100	; 0x64
 8000ac8:	2126      	movs	r1, #38	; 0x26
 8000aca:	481d      	ldr	r0, [pc, #116]	; (8000b40 <main+0x88>)
 8000acc:	f7ff fe97 	bl	80007fe <NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQ_NO);		// Enabling the interrupt
 8000ad0:	2026      	movs	r0, #38	; 0x26
 8000ad2:	f7ff fe71 	bl	80007b8 <NVIC_EnableIRQ>

	traceSTART();
 8000ad6:	f004 feaf 	bl	8005838 <SEGGER_SYSVIEW_Conf>

	status = xTaskCreate(task_uart_interrupt,"Task_UART_INTERRUPT",200,NULL,2,&task_uart_interrupt_handle);
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <main+0x8c>)
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	2302      	movs	r3, #2
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	22c8      	movs	r2, #200	; 0xc8
 8000ae6:	4918      	ldr	r1, [pc, #96]	; (8000b48 <main+0x90>)
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <main+0x94>)
 8000aea:	f001 f886 	bl	8001bfa <xTaskCreate>
 8000aee:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d00a      	beq.n	8000b0c <main+0x54>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	60bb      	str	r3, [r7, #8]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000b08:	bf00      	nop
 8000b0a:	e7fe      	b.n	8000b0a <main+0x52>

  	xSemaphore = xSemaphoreCreateBinary();
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fa63 	bl	8000fdc <xQueueGenericCreate>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <main+0x98>)
 8000b1a:	6013      	str	r3, [r2, #0]
  	configASSERT(xSemaphore != NULL);
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <main+0x98>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <main+0x82>
    __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	607b      	str	r3, [r7, #4]
}
 8000b36:	bf00      	nop
 8000b38:	e7fe      	b.n	8000b38 <main+0x80>

  	vTaskStartScheduler();
 8000b3a:	f001 fa15 	bl	8001f68 <vTaskStartScheduler>

	/* Loop forever */
	while(1)
 8000b3e:	e7fe      	b.n	8000b3e <main+0x86>
 8000b40:	e000e400 	.word	0xe000e400
 8000b44:	20000054 	.word	0x20000054
 8000b48:	08005b38 	.word	0x08005b38
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	20000058 	.word	0x20000058

08000b54 <task_uart_interrupt>:

	return 0;
}

static void task_uart_interrupt(void *params)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	uint32_t len, count;

	while(1)
	{
		len = strlen(message);
 8000b5c:	4821      	ldr	r0, [pc, #132]	; (8000be4 <task_uart_interrupt+0x90>)
 8000b5e:	f7ff fb91 	bl	8000284 <strlen>
 8000b62:	60f8      	str	r0, [r7, #12]
		count = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]

		//Clear and enable TC Interrupt
		Test_USART.pUSART->USART_SR &= ~(1 << 6);
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <task_uart_interrupt+0x94>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <task_uart_interrupt+0x94>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b76:	601a      	str	r2, [r3, #0]
		Test_USART.pUSART->USART_CR1 |= (1 << 6);
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <task_uart_interrupt+0x94>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <task_uart_interrupt+0x94>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b86:	60da      	str	r2, [r3, #12]

		xSemaphoreGive(xSemaphore);
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <task_uart_interrupt+0x98>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	f000 fa9d 	bl	80010d0 <xQueueGenericSend>

		while(len > 0)
 8000b96:	e016      	b.n	8000bc6 <task_uart_interrupt+0x72>
		{
			if(xSemaphoreTake(xSemaphore,portMAX_DELAY) == pdTRUE)
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <task_uart_interrupt+0x98>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fd35 	bl	8001610 <xQueueSemaphoreTake>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d106      	bne.n	8000bba <task_uart_interrupt+0x66>
			{
				Test_USART.pUSART->USART_DR = message[count];
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <task_uart_interrupt+0x90>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <task_uart_interrupt+0x94>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
			}

			len--;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
			count++;
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
		while(len > 0)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e5      	bne.n	8000b98 <task_uart_interrupt+0x44>
		}

		if(len == 0)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1c4      	bne.n	8000b5c <task_uart_interrupt+0x8>
		{
			//Disable TC Interrupt
			Test_USART.pUSART->USART_CR1 &= ~(1 << 6);
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <task_uart_interrupt+0x94>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <task_uart_interrupt+0x94>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000be0:	60da      	str	r2, [r3, #12]
		len = strlen(message);
 8000be2:	e7bb      	b.n	8000b5c <task_uart_interrupt+0x8>
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000038 	.word	0x20000038
 8000bec:	20000058 	.word	0x20000058

08000bf0 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]

	SEGGER_SYSVIEW_Print("Inside USART Interrupt Handler");
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <USART2_IRQHandler+0x38>)
 8000bfc:	f004 fd56 	bl	80056ac <SEGGER_SYSVIEW_Print>

	//Clear the TC Interrupt
	Test_USART.pUSART->USART_SR &= ~(1 << 6);
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <USART2_IRQHandler+0x3c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <USART2_IRQHandler+0x3c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c0e:	601a      	str	r2, [r3, #0]

	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <USART2_IRQHandler+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1d3a      	adds	r2, r7, #4
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fb63 	bl	80012e4 <xQueueGiveFromISR>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08005b4c 	.word	0x08005b4c
 8000c2c:	20000038 	.word	0x20000038
 8000c30:	20000058 	.word	0x20000058

08000c34 <NVIC_SetPriorityGrouping>:

static void NVIC_SetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

	uint32_t *pSCB_AIRCR = (uint32_t *) 0xE000ED0CUL;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <NVIC_SetPriorityGrouping+0x34>)
 8000c3c:	607b      	str	r3, [r7, #4]

	uint32_t value = *pSCB_AIRCR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	603b      	str	r3, [r7, #0]

	value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	603b      	str	r3, [r7, #0]

	value = value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (0x3 << SCB_AIRCR_PRIGROUP_Pos);
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <NVIC_SetPriorityGrouping+0x38>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	603b      	str	r3, [r7, #0]

	*pSCB_AIRCR = value;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	601a      	str	r2, [r3, #0]

}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed0c 	.word	0xe000ed0c
 8000c6c:	05fa0300 	.word	0x05fa0300

08000c70 <configure_uart>:

static void configure_uart(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(GPIOA);
 8000c74:	482a      	ldr	r0, [pc, #168]	; (8000d20 <configure_uart+0xb0>)
 8000c76:	f7ff fbd9 	bl	800042c <EnablePeriClk>
	GPIOSetMode(GPIOA,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4828      	ldr	r0, [pc, #160]	; (8000d20 <configure_uart+0xb0>)
 8000c80:	f7ff fb08 	bl	8000294 <GPIOSetMode>
	GPIOSetMode(GPIOA,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000c84:	2202      	movs	r2, #2
 8000c86:	2103      	movs	r1, #3
 8000c88:	4825      	ldr	r0, [pc, #148]	; (8000d20 <configure_uart+0xb0>)
 8000c8a:	f7ff fb03 	bl	8000294 <GPIOSetMode>
	GPIOSetAltFn(GPIOA,UART_TX_PIN,GPIO_ALTFN_7);
 8000c8e:	2207      	movs	r2, #7
 8000c90:	2102      	movs	r1, #2
 8000c92:	4823      	ldr	r0, [pc, #140]	; (8000d20 <configure_uart+0xb0>)
 8000c94:	f7ff fb23 	bl	80002de <GPIOSetAltFn>
	GPIOSetAltFn(GPIOA,UART_RX_PIN,GPIO_ALTFN_7);
 8000c98:	2207      	movs	r2, #7
 8000c9a:	2103      	movs	r1, #3
 8000c9c:	4820      	ldr	r0, [pc, #128]	; (8000d20 <configure_uart+0xb0>)
 8000c9e:	f7ff fb1e 	bl	80002de <GPIOSetAltFn>
	GPIOSetOutputType(GPIOA,UART_TX_PIN,GPIO_OPTYPE_PP);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <configure_uart+0xb0>)
 8000ca8:	f7ff fb53 	bl	8000352 <GPIOSetOutputType>
	GPIOSetOutputType(GPIOA,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2103      	movs	r1, #3
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <configure_uart+0xb0>)
 8000cb2:	f7ff fb4e 	bl	8000352 <GPIOSetOutputType>
	GPIOSetOutputSpeed(GPIOA,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4819      	ldr	r0, [pc, #100]	; (8000d20 <configure_uart+0xb0>)
 8000cbc:	f7ff fb91 	bl	80003e2 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(GPIOA,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	4816      	ldr	r0, [pc, #88]	; (8000d20 <configure_uart+0xb0>)
 8000cc6:	f7ff fb8c 	bl	80003e2 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(GPIOA,UART_TX_PIN,GPIO_PULL_UP);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <configure_uart+0xb0>)
 8000cd0:	f7ff fb62 	bl	8000398 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(GPIOA,UART_RX_PIN,GPIO_PULL_UP);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <configure_uart+0xb0>)
 8000cda:	f7ff fb5d 	bl	8000398 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <configure_uart+0xb4>)
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <configure_uart+0xb8>)
 8000ce2:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <configure_uart+0xb4>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <configure_uart+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <configure_uart+0xb4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <configure_uart+0xb4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <configure_uart+0xb4>)
 8000cfe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d02:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <configure_uart+0xb4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <configure_uart+0xb8>)
 8000d0c:	f7ff fb8e 	bl	800042c <EnablePeriClk>
	USART_Init(&Test_USART);
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <configure_uart+0xb4>)
 8000d12:	f7ff fdac 	bl	800086e <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <configure_uart+0xb4>)
 8000d18:	f7ff fea9 	bl	8000a6e <USART_PeripheralEnable>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020000 	.word	0x40020000
 8000d24:	20000038 	.word	0x20000038
 8000d28:	40004400 	.word	0x40004400

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f004 fe97 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff feab 	bl	8000ab8 <main>

08000d62 <LoopForever>:

LoopForever:
  b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d70:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 8000d74:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d78:	200138dc 	.word	0x200138dc

08000d7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>

08000d7e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f103 0208 	add.w	r2, r3, #8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d96:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f103 0208 	add.w	r2, r3, #8
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0208 	add.w	r2, r3, #8
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8000db2:	f240 1019 	movw	r0, #281	; 0x119
 8000db6:	f004 f9ad 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8000dd0:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8000dd4:	f004 f99e 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df6:	d103      	bne.n	8000e00 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e00c      	b.n	8000e1a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3308      	adds	r3, #8
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e002      	b.n	8000e0e <vListInsert+0x2e>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d2f6      	bcs.n	8000e08 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8000e46:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8000e4a:	f004 f963 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6892      	ldr	r2, [r2, #8]
 8000e6c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6852      	ldr	r2, [r2, #4]
 8000e76:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d103      	bne.n	8000e8a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f240 101d 	movw	r0, #285	; 0x11d
 8000ea4:	f004 f972 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <xQueueGenericReset+0x2e>
    __asm volatile
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	60fb      	str	r3, [r7, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	e7fe      	b.n	8000ee0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d05d      	beq.n	8000fa4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d059      	beq.n	8000fa4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	fba3 2302 	umull	r2, r3, r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d000      	beq.n	8000f04 <xQueueGenericReset+0x50>
 8000f02:	2101      	movs	r1, #1
 8000f04:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d14c      	bne.n	8000fa4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000f0a:	f002 fce5 	bl	80038d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f16:	6939      	ldr	r1, [r7, #16]
 8000f18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2200      	movs	r2, #0
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	441a      	add	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d114      	bne.n	8000f8a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01a      	beq.n	8000f9e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fba3 	bl	80026b8 <xTaskRemoveFromEventList>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d012      	beq.n	8000f9e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <xQueueGenericReset+0x124>)
 8000f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	f3bf 8f4f 	dsb	sy
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	e009      	b.n	8000f9e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3310      	adds	r3, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fef5 	bl	8000d7e <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3324      	adds	r3, #36	; 0x24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fef0 	bl	8000d7e <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f9e:	f002 fccb 	bl	8003938 <vPortExitCritical>
 8000fa2:	e001      	b.n	8000fa8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10a      	bne.n	8000fc4 <xQueueGenericReset+0x110>
    __asm volatile
 8000fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb2:	f383 8811 	msr	BASEPRI, r3
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	f3bf 8f4f 	dsb	sy
 8000fbe:	60bb      	str	r3, [r7, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	e7fe      	b.n	8000fc2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2096      	movs	r0, #150	; 0x96
 8000fca:	f004 f8df 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8000fce:	697b      	ldr	r3, [r7, #20]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	e000ed04 	.word	0xe000ed04

08000fdc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d02e      	beq.n	8001052 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d000      	beq.n	8001004 <xQueueGenericCreate+0x28>
 8001002:	2101      	movs	r1, #1
 8001004:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d123      	bne.n	8001052 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001012:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001016:	d81c      	bhi.n	8001052 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	3350      	adds	r3, #80	; 0x50
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fd76 	bl	8003b18 <pvPortMalloc>
 800102c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01c      	beq.n	800106e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3350      	adds	r3, #80	; 0x50
 800103c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f81d 	bl	800108a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001050:	e00d      	b.n	800106e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10a      	bne.n	800106e <xQueueGenericCreate+0x92>
    __asm volatile
 8001058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105c:	f383 8811 	msr	BASEPRI, r3
 8001060:	f3bf 8f6f 	isb	sy
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	613b      	str	r3, [r7, #16]
}
 800106a:	bf00      	nop
 800106c:	e7fe      	b.n	800106c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fa25 	bl	80054c0 <SEGGER_SYSVIEW_ShrinkId>
 8001076:	4603      	mov	r3, r0
 8001078:	4619      	mov	r1, r3
 800107a:	2098      	movs	r0, #152	; 0x98
 800107c:	f004 f886 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8001080:	69fb      	ldr	r3, [r7, #28]
    }
 8001082:	4618      	mov	r0, r3
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e002      	b.n	80010ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010b8:	2101      	movs	r1, #1
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f7ff fefa 	bl	8000eb4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <xQueueGenericSend+0x32>
    __asm volatile
 80010ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f0:	f383 8811 	msr	BASEPRI, r3
 80010f4:	f3bf 8f6f 	isb	sy
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80010fe:	bf00      	nop
 8001100:	e7fe      	b.n	8001100 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <xQueueGenericSend+0x40>
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <xQueueGenericSend+0x44>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <xQueueGenericSend+0x46>
 8001114:	2300      	movs	r3, #0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10a      	bne.n	8001130 <xQueueGenericSend+0x60>
    __asm volatile
 800111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111e:	f383 8811 	msr	BASEPRI, r3
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800112c:	bf00      	nop
 800112e:	e7fe      	b.n	800112e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d103      	bne.n	800113e <xQueueGenericSend+0x6e>
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <xQueueGenericSend+0x72>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <xQueueGenericSend+0x74>
 8001142:	2300      	movs	r3, #0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10a      	bne.n	800115e <xQueueGenericSend+0x8e>
    __asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	623b      	str	r3, [r7, #32]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800115e:	f001 fccb 	bl	8002af8 <xTaskGetSchedulerState>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <xQueueGenericSend+0x9e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <xQueueGenericSend+0xa2>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <xQueueGenericSend+0xa4>
 8001172:	2300      	movs	r3, #0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10a      	bne.n	800118e <xQueueGenericSend+0xbe>
    __asm volatile
 8001178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117c:	f383 8811 	msr	BASEPRI, r3
 8001180:	f3bf 8f6f 	isb	sy
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	61fb      	str	r3, [r7, #28]
}
 800118a:	bf00      	nop
 800118c:	e7fe      	b.n	800118c <xQueueGenericSend+0xbc>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800118e:	f002 fba3 	bl	80038d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119a:	429a      	cmp	r2, r3
 800119c:	d302      	bcc.n	80011a4 <xQueueGenericSend+0xd4>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d12d      	bne.n	8001200 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011aa:	f000 fb53 	bl	8001854 <prvCopyDataToQueue>
 80011ae:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d010      	beq.n	80011da <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	3324      	adds	r3, #36	; 0x24
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fa7b 	bl	80026b8 <xTaskRemoveFromEventList>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <xQueueGenericSend+0x210>)
 80011ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	f3bf 8f6f 	isb	sy
 80011d8:	e00a      	b.n	80011f0 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <xQueueGenericSend+0x210>)
 80011e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	f3bf 8f4f 	dsb	sy
 80011ec:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80011f0:	f002 fba2 	bl	8003938 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 80011f4:	2101      	movs	r1, #1
 80011f6:	20a1      	movs	r0, #161	; 0xa1
 80011f8:	f003 ffc8 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e06b      	b.n	80012d8 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <xQueueGenericSend+0x146>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001206:	f002 fb97 	bl	8003938 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800120a:	2100      	movs	r1, #0
 800120c:	20a1      	movs	r0, #161	; 0xa1
 800120e:	f003 ffbd 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8001212:	2300      	movs	r3, #0
 8001214:	e060      	b.n	80012d8 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <xQueueGenericSend+0x15a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fb29 	bl	8002878 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001226:	2301      	movs	r3, #1
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800122a:	f002 fb85 	bl	8003938 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800122e:	f000 fef3 	bl	8002018 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001232:	f002 fb51 	bl	80038d8 <vPortEnterCritical>
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800123c:	b25b      	sxtb	r3, r3
 800123e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001242:	d103      	bne.n	800124c <xQueueGenericSend+0x17c>
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001252:	b25b      	sxtb	r3, r3
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001258:	d103      	bne.n	8001262 <xQueueGenericSend+0x192>
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001262:	f002 fb69 	bl	8003938 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001266:	1d3a      	adds	r2, r7, #4
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fb1a 	bl	80028a8 <xTaskCheckForTimeOut>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d124      	bne.n	80012c4 <xQueueGenericSend+0x1f4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800127a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800127c:	f000 fbe2 	bl	8001a44 <prvIsQueueFull>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d018      	beq.n	80012b8 <xQueueGenericSend+0x1e8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	3310      	adds	r3, #16
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f9a2 	bl	80025d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001296:	f000 fb6d 	bl	8001974 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800129a:	f000 fecb 	bl	8002034 <xTaskResumeAll>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f af74 	bne.w	800118e <xQueueGenericSend+0xbe>
                {
                    taskYIELD_WITHIN_API();
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <xQueueGenericSend+0x210>)
 80012a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	e76a      	b.n	800118e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80012b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ba:	f000 fb5b 	bl	8001974 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012be:	f000 feb9 	bl	8002034 <xTaskResumeAll>
 80012c2:	e764      	b.n	800118e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80012c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012c6:	f000 fb55 	bl	8001974 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012ca:	f000 feb3 	bl	8002034 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 80012ce:	2100      	movs	r1, #0
 80012d0:	20a1      	movs	r0, #161	; 0xa1
 80012d2:	f003 ff5b 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 80012d6:	2300      	movs	r3, #0
        }
    }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3738      	adds	r7, #56	; 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	e000ed04 	.word	0xe000ed04

080012e4 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10a      	bne.n	800130e <xQueueGiveFromISR+0x2a>
    __asm volatile
 80012f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fc:	f383 8811 	msr	BASEPRI, r3
 8001300:	f3bf 8f6f 	isb	sy
 8001304:	f3bf 8f4f 	dsb	sy
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
}
 800130a:	bf00      	nop
 800130c:	e7fe      	b.n	800130c <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800130e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <xQueueGiveFromISR+0x48>
    __asm volatile
 8001316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131a:	f383 8811 	msr	BASEPRI, r3
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f3bf 8f4f 	dsb	sy
 8001326:	623b      	str	r3, [r7, #32]
}
 8001328:	bf00      	nop
 800132a:	e7fe      	b.n	800132a <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <xQueueGiveFromISR+0x58>
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <xQueueGiveFromISR+0x5c>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <xQueueGiveFromISR+0x5e>
 8001340:	2300      	movs	r3, #0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <xQueueGiveFromISR+0x78>
    __asm volatile
 8001346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	61fb      	str	r3, [r7, #28]
}
 8001358:	bf00      	nop
 800135a:	e7fe      	b.n	800135a <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800135c:	f002 fb9c 	bl	8003a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8001360:	f3ef 8211 	mrs	r2, BASEPRI
 8001364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001368:	f383 8811 	msr	BASEPRI, r3
 800136c:	f3bf 8f6f 	isb	sy
 8001370:	f3bf 8f4f 	dsb	sy
 8001374:	61ba      	str	r2, [r7, #24]
 8001376:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8001378:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001380:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001388:	429a      	cmp	r2, r3
 800138a:	d242      	bcs.n	8001412 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800138e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8001396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800139e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013a6:	d112      	bne.n	80013ce <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02d      	beq.n	800140c <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	3324      	adds	r3, #36	; 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f97f 	bl	80026b8 <xTaskRemoveFromEventList>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d025      	beq.n	800140c <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d022      	beq.n	800140c <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e01e      	b.n	800140c <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80013ce:	f000 ff69 	bl	80022a4 <uxTaskGetNumberOfTasks>
 80013d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80013d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013da:	429a      	cmp	r2, r3
 80013dc:	d916      	bls.n	800140c <xQueueGiveFromISR+0x128>
 80013de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d10a      	bne.n	80013fc <xQueueGiveFromISR+0x118>
    __asm volatile
 80013e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ea:	f383 8811 	msr	BASEPRI, r3
 80013ee:	f3bf 8f6f 	isb	sy
 80013f2:	f3bf 8f4f 	dsb	sy
 80013f6:	613b      	str	r3, [r7, #16]
}
 80013f8:	bf00      	nop
 80013fa:	e7fe      	b.n	80013fa <xQueueGiveFromISR+0x116>
 80013fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001400:	3301      	adds	r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	b25a      	sxtb	r2, r3
 8001406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800140c:	2301      	movs	r3, #1
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001410:	e001      	b.n	8001416 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001412:	2300      	movs	r3, #0
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8001420:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );
 8001422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001424:	4619      	mov	r1, r3
 8001426:	20a3      	movs	r0, #163	; 0xa3
 8001428:	f003 feb0 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800142c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800142e:	4618      	mov	r0, r3
 8001430:	3740      	adds	r7, #64	; 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10a      	bne.n	8001468 <xQueueReceive+0x30>
    __asm volatile
 8001452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001456:	f383 8811 	msr	BASEPRI, r3
 800145a:	f3bf 8f6f 	isb	sy
 800145e:	f3bf 8f4f 	dsb	sy
 8001462:	623b      	str	r3, [r7, #32]
}
 8001464:	bf00      	nop
 8001466:	e7fe      	b.n	8001466 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <xQueueReceive+0x3e>
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <xQueueReceive+0x42>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <xQueueReceive+0x44>
 800147a:	2300      	movs	r3, #0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10a      	bne.n	8001496 <xQueueReceive+0x5e>
    __asm volatile
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	61fb      	str	r3, [r7, #28]
}
 8001492:	bf00      	nop
 8001494:	e7fe      	b.n	8001494 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001496:	f001 fb2f 	bl	8002af8 <xTaskGetSchedulerState>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <xQueueReceive+0x6e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <xQueueReceive+0x72>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <xQueueReceive+0x74>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <xQueueReceive+0x8e>
    __asm volatile
 80014b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b4:	f383 8811 	msr	BASEPRI, r3
 80014b8:	f3bf 8f6f 	isb	sy
 80014bc:	f3bf 8f4f 	dsb	sy
 80014c0:	61bb      	str	r3, [r7, #24]
}
 80014c2:	bf00      	nop
 80014c4:	e7fe      	b.n	80014c4 <xQueueReceive+0x8c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014c6:	f002 fa07 	bl	80038d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d023      	beq.n	800151e <xQueueReceive+0xe6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014da:	f000 fa25 	bl	8001928 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	3310      	adds	r3, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f8e0 	bl	80026b8 <xTaskRemoveFromEventList>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <xQueueReceive+0x1d4>)
 8001500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800150e:	f002 fa13 	bl	8003938 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8001512:	2101      	movs	r1, #1
 8001514:	20a4      	movs	r0, #164	; 0xa4
 8001516:	f003 fe39 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800151a:	2301      	movs	r3, #1
 800151c:	e071      	b.n	8001602 <xQueueReceive+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d107      	bne.n	8001534 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001524:	f002 fa08 	bl	8003938 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8001528:	2100      	movs	r1, #0
 800152a:	20a4      	movs	r0, #164	; 0xa4
 800152c:	f003 fe2e 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8001530:	2300      	movs	r3, #0
 8001532:	e066      	b.n	8001602 <xQueueReceive+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4618      	mov	r0, r3
 8001540:	f001 f99a 	bl	8002878 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001544:	2301      	movs	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001548:	f002 f9f6 	bl	8003938 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800154c:	f000 fd64 	bl	8002018 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001550:	f002 f9c2 	bl	80038d8 <vPortEnterCritical>
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800155a:	b25b      	sxtb	r3, r3
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d103      	bne.n	800156a <xQueueReceive+0x132>
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001576:	d103      	bne.n	8001580 <xQueueReceive+0x148>
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001580:	f002 f9da 	bl	8003938 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001584:	1d3a      	adds	r2, r7, #4
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f001 f98b 	bl	80028a8 <xTaskCheckForTimeOut>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d123      	bne.n	80015e0 <xQueueReceive+0x1a8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159a:	f000 fa3d 	bl	8001a18 <prvIsQueueEmpty>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d017      	beq.n	80015d4 <xQueueReceive+0x19c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	3324      	adds	r3, #36	; 0x24
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 f813 	bl	80025d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80015b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b4:	f000 f9de 	bl	8001974 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80015b8:	f000 fd3c 	bl	8002034 <xTaskResumeAll>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d181      	bne.n	80014c6 <xQueueReceive+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <xQueueReceive+0x1d4>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	e778      	b.n	80014c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80015d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d6:	f000 f9cd 	bl	8001974 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015da:	f000 fd2b 	bl	8002034 <xTaskResumeAll>
 80015de:	e772      	b.n	80014c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80015e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015e2:	f000 f9c7 	bl	8001974 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015e6:	f000 fd25 	bl	8002034 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ec:	f000 fa14 	bl	8001a18 <prvIsQueueEmpty>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f43f af67 	beq.w	80014c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80015f8:	2100      	movs	r1, #0
 80015fa:	20a4      	movs	r0, #164	; 0xa4
 80015fc:	f003 fdc6 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8001600:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10a      	bne.n	8001642 <xQueueSemaphoreTake+0x32>
    __asm volatile
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	61bb      	str	r3, [r7, #24]
}
 800163e:	bf00      	nop
 8001640:	e7fe      	b.n	8001640 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <xQueueSemaphoreTake+0x50>
    __asm volatile
 800164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800164e:	f383 8811 	msr	BASEPRI, r3
 8001652:	f3bf 8f6f 	isb	sy
 8001656:	f3bf 8f4f 	dsb	sy
 800165a:	617b      	str	r3, [r7, #20]
}
 800165c:	bf00      	nop
 800165e:	e7fe      	b.n	800165e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001660:	f001 fa4a 	bl	8002af8 <xTaskGetSchedulerState>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <xQueueSemaphoreTake+0x60>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <xQueueSemaphoreTake+0x64>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <xQueueSemaphoreTake+0x66>
 8001674:	2300      	movs	r3, #0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10a      	bne.n	8001690 <xQueueSemaphoreTake+0x80>
    __asm volatile
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	613b      	str	r3, [r7, #16]
}
 800168c:	bf00      	nop
 800168e:	e7fe      	b.n	800168e <xQueueSemaphoreTake+0x7e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001690:	f002 f922 	bl	80038d8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d028      	beq.n	80016f2 <xQueueSemaphoreTake+0xe2>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80016b0:	f001 fc5e 	bl	8002f70 <pvTaskIncrementMutexHeldCount>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00f      	beq.n	80016e2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3310      	adds	r3, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fff6 	bl	80026b8 <xTaskRemoveFromEventList>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <xQueueSemaphoreTake+0x210>)
 80016d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016e2:	f002 f929 	bl	8003938 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );
 80016e6:	2101      	movs	r1, #1
 80016e8:	20a5      	movs	r0, #165	; 0xa5
 80016ea:	f003 fd4f 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e091      	b.n	8001816 <xQueueSemaphoreTake+0x206>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <xQueueSemaphoreTake+0xf8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80016f8:	f002 f91e 	bl	8003938 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 80016fc:	2100      	movs	r1, #0
 80016fe:	20a5      	movs	r0, #165	; 0xa5
 8001700:	f003 fd44 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8001704:	2300      	movs	r3, #0
 8001706:	e086      	b.n	8001816 <xQueueSemaphoreTake+0x206>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8b0 	bl	8002878 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800171c:	f002 f90c 	bl	8003938 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001720:	f000 fc7a 	bl	8002018 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001724:	f002 f8d8 	bl	80038d8 <vPortEnterCritical>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001734:	d103      	bne.n	800173e <xQueueSemaphoreTake+0x12e>
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001744:	b25b      	sxtb	r3, r3
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800174a:	d103      	bne.n	8001754 <xQueueSemaphoreTake+0x144>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001754:	f002 f8f0 	bl	8003938 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001758:	463a      	mov	r2, r7
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f001 f8a1 	bl	80028a8 <xTaskCheckForTimeOut>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d132      	bne.n	80017d2 <xQueueSemaphoreTake+0x1c2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800176c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800176e:	f000 f953 	bl	8001a18 <prvIsQueueEmpty>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d026      	beq.n	80017c6 <xQueueSemaphoreTake+0x1b6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <xQueueSemaphoreTake+0x184>
                    {
                        taskENTER_CRITICAL();
 8001780:	f002 f8aa 	bl	80038d8 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4618      	mov	r0, r3
 800178a:	f001 f9d7 	bl	8002b3c <xTaskPriorityInherit>
 800178e:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8001790:	f002 f8d2 	bl	8003938 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3324      	adds	r3, #36	; 0x24
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 ff1b 	bl	80025d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80017a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017a4:	f000 f8e6 	bl	8001974 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80017a8:	f000 fc44 	bl	8002034 <xTaskResumeAll>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f af6e 	bne.w	8001690 <xQueueSemaphoreTake+0x80>
                {
                    taskYIELD_WITHIN_API();
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <xQueueSemaphoreTake+0x210>)
 80017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	f3bf 8f6f 	isb	sy
 80017c4:	e764      	b.n	8001690 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80017c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017c8:	f000 f8d4 	bl	8001974 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017cc:	f000 fc32 	bl	8002034 <xTaskResumeAll>
 80017d0:	e75e      	b.n	8001690 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80017d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017d4:	f000 f8ce 	bl	8001974 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017d8:	f000 fc2c 	bl	8002034 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017de:	f000 f91b 	bl	8001a18 <prvIsQueueEmpty>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f43f af53 	beq.w	8001690 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <xQueueSemaphoreTake+0x1fc>
                    {
                        taskENTER_CRITICAL();
 80017f0:	f002 f872 	bl	80038d8 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80017f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017f6:	f000 f815 	bl	8001824 <prvGetDisinheritPriorityAfterTimeout>
 80017fa:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	69f9      	ldr	r1, [r7, #28]
 8001802:	4618      	mov	r0, r3
 8001804:	f001 faf2 	bl	8002dec <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001808:	f002 f896 	bl	8003938 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 800180c:	2100      	movs	r1, #0
 800180e:	20a5      	movs	r0, #165	; 0xa5
 8001810:	f003 fcbc 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8001814:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3730      	adds	r7, #48	; 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000ed04 	.word	0xe000ed04

08001824 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1c3 030a 	rsb	r3, r3, #10
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e001      	b.n	8001846 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001846:	68fb      	ldr	r3, [r7, #12]
    }
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001868:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d14d      	bne.n	8001916 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4618      	mov	r0, r3
 8001880:	f001 fa06 	bl	8002c90 <xTaskPriorityDisinherit>
 8001884:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	e043      	b.n	8001916 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d119      	bne.n	80018c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6858      	ldr	r0, [r3, #4]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	461a      	mov	r2, r3
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	f004 f928 	bl	8005af4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	441a      	add	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d32b      	bcc.n	8001916 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	e026      	b.n	8001916 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68d8      	ldr	r0, [r3, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	461a      	mov	r2, r3
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	f004 f90e 	bl	8005af4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	425b      	negs	r3, r3
 80018e2:	441a      	add	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	425b      	negs	r3, r3
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d105      	bne.n	8001916 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3b01      	subs	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800191e:	697b      	ldr	r3, [r7, #20]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d018      	beq.n	800196c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	441a      	add	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	429a      	cmp	r2, r3
 8001952:	d303      	bcc.n	800195c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68d9      	ldr	r1, [r3, #12]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	461a      	mov	r2, r3
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f004 f8c4 	bl	8005af4 <memcpy>
    }
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800197c:	f001 ffac 	bl	80038d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001986:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001988:	e011      	b.n	80019ae <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b00      	cmp	r3, #0
 8001990:	d012      	beq.n	80019b8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3324      	adds	r3, #36	; 0x24
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fe8e 	bl	80026b8 <xTaskRemoveFromEventList>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80019a2:	f000 ffeb 	bl	800297c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dce9      	bgt.n	800198a <prvUnlockQueue+0x16>
 80019b6:	e000      	b.n	80019ba <prvUnlockQueue+0x46>
                    break;
 80019b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80019c2:	f001 ffb9 	bl	8003938 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80019c6:	f001 ff87 	bl	80038d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019d2:	e011      	b.n	80019f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3310      	adds	r3, #16
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fe69 	bl	80026b8 <xTaskRemoveFromEventList>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80019ec:	f000 ffc6 	bl	800297c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dce9      	bgt.n	80019d4 <prvUnlockQueue+0x60>
 8001a00:	e000      	b.n	8001a04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001a02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	22ff      	movs	r2, #255	; 0xff
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001a0c:	f001 ff94 	bl	8003938 <vPortExitCritical>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001a20:	f001 ff5a 	bl	80038d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e001      	b.n	8001a36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001a36:	f001 ff7f 	bl	8003938 <vPortExitCritical>

    return xReturn;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001a4c:	f001 ff44 	bl	80038d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d102      	bne.n	8001a62 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e001      	b.n	8001a66 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001a66:	f001 ff67 	bl	8003938 <vPortExitCritical>

    return xReturn;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <vQueueAddToRegistry+0x2a>
    __asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	60fb      	str	r3, [r7, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	e7fe      	b.n	8001a9c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d024      	beq.n	8001aee <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e01e      	b.n	8001ae8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <vQueueAddToRegistry+0x9c>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d105      	bne.n	8001ac6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <vQueueAddToRegistry+0x9c>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
                    break;
 8001ac4:	e013      	b.n	8001aee <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <vQueueAddToRegistry+0x6e>
 8001acc:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <vQueueAddToRegistry+0x9c>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d104      	bne.n	8001ae2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <vQueueAddToRegistry+0x9c>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d9dd      	bls.n	8001aaa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8001b00:	20b6      	movs	r0, #182	; 0xb6
 8001b02:	f003 fb07 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000005c 	.word	0x2000005c

08001b14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001b24:	f001 fed8 	bl	80038d8 <vPortEnterCritical>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b34:	d103      	bne.n	8001b3e <vQueueWaitForMessageRestricted+0x2a>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b4a:	d103      	bne.n	8001b54 <vQueueWaitForMessageRestricted+0x40>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b54:	f001 fef0 	bl	8003938 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d106      	bne.n	8001b6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3324      	adds	r3, #36	; 0x24
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fd5d 	bl	8002628 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff00 	bl	8001974 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8001b74:	20b9      	movs	r0, #185	; 0xb9
 8001b76:	f003 facd 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08a      	sub	sp, #40	; 0x28
 8001b86:	af04      	add	r7, sp, #16
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 ffbf 	bl	8003b18 <pvPortMalloc>
 8001b9a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d013      	beq.n	8001bca <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001ba2:	2058      	movs	r0, #88	; 0x58
 8001ba4:	f001 ffb8 	bl	8003b18 <pvPortMalloc>
 8001ba8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001bb0:	2258      	movs	r2, #88	; 0x58
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f003 ffab 	bl	8005b10 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	e005      	b.n	8001bce <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001bc2:	6938      	ldr	r0, [r7, #16]
 8001bc4:	f002 f8d4 	bl	8003d70 <vPortFree>
 8001bc8:	e001      	b.n	8001bce <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f82d 	bl	8001c4a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001bf0:	697b      	ldr	r3, [r7, #20]
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af02      	add	r7, sp, #8
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff ffb3 	bl	8001b82 <prvCreateTask>
 8001c1c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001c24:	6938      	ldr	r0, [r7, #16]
 8001c26:	f000 f89f 	bl	8001d68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e002      	b.n	8001c36 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c34:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	20c2      	movs	r0, #194	; 0xc2
 8001c3c:	f003 faa6 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001c40:	697b      	ldr	r3, [r7, #20]
    }
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b088      	sub	sp, #32
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	461a      	mov	r2, r3
 8001c62:	21a5      	movs	r1, #165	; 0xa5
 8001c64:	f003 ff54 	bl	8005b10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c72:	3b01      	subs	r3, #1
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f023 0307 	bic.w	r3, r3, #7
 8001c80:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <prvInitialiseNewTask+0x58>
    __asm volatile
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	617b      	str	r3, [r7, #20]
}
 8001c9e:	bf00      	nop
 8001ca0:	e7fe      	b.n	8001ca0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01e      	beq.n	8001ce6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e012      	b.n	8001cd4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	7819      	ldrb	r1, [r3, #0]
 8001cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3334      	adds	r3, #52	; 0x34
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b09      	cmp	r3, #9
 8001cd8:	d9e9      	bls.n	8001cae <prvInitialiseNewTask+0x64>
 8001cda:	e000      	b.n	8001cde <prvInitialiseNewTask+0x94>
            {
                break;
 8001cdc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	d90a      	bls.n	8001d02 <prvInitialiseNewTask+0xb8>
    __asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	f383 8811 	msr	BASEPRI, r3
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	613b      	str	r3, [r7, #16]
}
 8001cfe:	bf00      	nop
 8001d00:	e7fe      	b.n	8001d00 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d901      	bls.n	8001d0c <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d08:	2309      	movs	r3, #9
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d16:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f850 	bl	8000dc2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	3318      	adds	r3, #24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f84b 	bl	8000dc2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	f1c3 020a 	rsb	r2, r3, #10
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	69b8      	ldr	r0, [r7, #24]
 8001d48:	f001 fc4e 	bl	80035e8 <pxPortInitialiseStack>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001d70:	f001 fdb2 	bl	80038d8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <prvAddNewTaskToReadyList+0x150>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <prvAddNewTaskToReadyList+0x150>)
 8001d7c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <prvAddNewTaskToReadyList+0x154>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001d86:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <prvAddNewTaskToReadyList+0x154>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <prvAddNewTaskToReadyList+0x150>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d110      	bne.n	8001db6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001d94:	f000 fe16 	bl	80029c4 <prvInitialiseTaskLists>
 8001d98:	e00d      	b.n	8001db6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <prvAddNewTaskToReadyList+0x158>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <prvAddNewTaskToReadyList+0x154>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d802      	bhi.n	8001db6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001db0:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <prvAddNewTaskToReadyList+0x154>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <prvAddNewTaskToReadyList+0x15c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a41      	ldr	r2, [pc, #260]	; (8001ec4 <prvAddNewTaskToReadyList+0x15c>)
 8001dbe:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <prvAddNewTaskToReadyList+0x15c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <prvAddNewTaskToReadyList+0x94>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fa4f 	bl	8005274 <SEGGER_SYSVIEW_OnTaskCreate>
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	461d      	mov	r5, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461c      	mov	r4, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	1ae3      	subs	r3, r4, r3
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	462b      	mov	r3, r5
 8001df8:	f003 fdbe 	bl	8005978 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fabc 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <prvAddNewTaskToReadyList+0x160>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <prvAddNewTaskToReadyList+0x160>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1a:	492c      	ldr	r1, [pc, #176]	; (8001ecc <prvAddNewTaskToReadyList+0x164>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	3204      	adds	r2, #4
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1d1a      	adds	r2, r3, #4
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <prvAddNewTaskToReadyList+0x164>)
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	4919      	ldr	r1, [pc, #100]	; (8001ecc <prvAddNewTaskToReadyList+0x164>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	4814      	ldr	r0, [pc, #80]	; (8001ecc <prvAddNewTaskToReadyList+0x164>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4403      	add	r3, r0
 8001e84:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001e86:	f001 fd57 	bl	8003938 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <prvAddNewTaskToReadyList+0x158>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00e      	beq.n	8001eb0 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <prvAddNewTaskToReadyList+0x154>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <prvAddNewTaskToReadyList+0x148>
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <prvAddNewTaskToReadyList+0x168>)
 8001ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	200001d8 	.word	0x200001d8
 8001ebc:	2000009c 	.word	0x2000009c
 8001ec0:	200001e4 	.word	0x200001e4
 8001ec4:	200001f4 	.word	0x200001f4
 8001ec8:	200001e0 	.word	0x200001e0
 8001ecc:	200000a0 	.word	0x200000a0
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e011      	b.n	8001f0c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <prvCreateIdleTasks+0x88>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4413      	add	r3, r2
 8001eee:	7819      	ldrb	r1, [r3, #0]
 8001ef0:	1d3a      	adds	r2, r7, #4
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001efa:	1d3a      	adds	r2, r7, #4
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	ddea      	ble.n	8001ee8 <prvCreateIdleTasks+0x14>
 8001f12:	e000      	b.n	8001f16 <prvCreateIdleTasks+0x42>
        {
            break;
 8001f14:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	e015      	b.n	8001f48 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <prvCreateIdleTasks+0x8c>)
 8001f1e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <prvCreateIdleTasks+0x90>)
 8001f26:	4413      	add	r3, r2
 8001f28:	1d39      	adds	r1, r7, #4
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	2282      	movs	r2, #130	; 0x82
 8001f34:	6938      	ldr	r0, [r7, #16]
 8001f36:	f7ff fe60 	bl	8001bfa <xTaskCreate>
 8001f3a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dde6      	ble.n	8001f1c <prvCreateIdleTasks+0x48>
 8001f4e:	e000      	b.n	8001f52 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001f50:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001f52:	69fb      	ldr	r3, [r7, #28]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	08005b6c 	.word	0x08005b6c
 8001f60:	08002995 	.word	0x08002995
 8001f64:	200001fc 	.word	0x200001fc

08001f68 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001f6e:	f7ff ffb1 	bl	8001ed4 <prvCreateIdleTasks>
 8001f72:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001f7a:	f001 f8a5 	bl	80030c8 <xTimerCreateTimerTask>
 8001f7e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d124      	bne.n	8001fd0 <vTaskStartScheduler+0x68>
    __asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	60bb      	str	r3, [r7, #8]
}
 8001f98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <vTaskStartScheduler+0x98>)
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <vTaskStartScheduler+0x9c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <vTaskStartScheduler+0xa0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <vTaskStartScheduler+0xa4>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <vTaskStartScheduler+0xa8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d102      	bne.n	8001fc0 <vTaskStartScheduler+0x58>
 8001fba:	f003 f93f 	bl	800523c <SEGGER_SYSVIEW_OnIdle>
 8001fbe:	e004      	b.n	8001fca <vTaskStartScheduler+0x62>
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <vTaskStartScheduler+0xa8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f997 	bl	80052f8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001fca:	f001 fb9b 	bl	8003704 <xPortStartScheduler>
 8001fce:	e00e      	b.n	8001fee <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd6:	d10a      	bne.n	8001fee <vTaskStartScheduler+0x86>
    __asm volatile
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	607b      	str	r3, [r7, #4]
}
 8001fea:	bf00      	nop
 8001fec:	e7fe      	b.n	8001fec <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <vTaskStartScheduler+0xac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8001ff2:	20cd      	movs	r0, #205	; 0xcd
 8001ff4:	f003 f88e 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200001f8 	.word	0x200001f8
 8002004:	200001e4 	.word	0x200001e4
 8002008:	200001dc 	.word	0x200001dc
 800200c:	200001fc 	.word	0x200001fc
 8002010:	2000009c 	.word	0x2000009c
 8002014:	20000014 	.word	0x20000014

08002018 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <vTaskSuspendAll+0x18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a03      	ldr	r2, [pc, #12]	; (8002030 <vTaskSuspendAll+0x18>)
 8002024:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002026:	20cf      	movs	r0, #207	; 0xcf
 8002028:	f003 f874 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000200 	.word	0x20000200

08002034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002042:	f001 fc49 	bl	80038d8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800204a:	4b79      	ldr	r3, [pc, #484]	; (8002230 <xTaskResumeAll+0x1fc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <xTaskResumeAll+0x34>
    __asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	603b      	str	r3, [r7, #0]
}
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002068:	4b71      	ldr	r3, [pc, #452]	; (8002230 <xTaskResumeAll+0x1fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	4a70      	ldr	r2, [pc, #448]	; (8002230 <xTaskResumeAll+0x1fc>)
 8002070:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <xTaskResumeAll+0x1fc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 80ce 	bne.w	8002218 <xTaskResumeAll+0x1e4>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <xTaskResumeAll+0x200>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80c9 	beq.w	8002218 <xTaskResumeAll+0x1e4>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002086:	e092      	b.n	80021ae <xTaskResumeAll+0x17a>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <xTaskResumeAll+0x204>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	6a12      	ldr	r2, [r2, #32]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	69d2      	ldr	r2, [r2, #28]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3318      	adds	r3, #24
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d103      	bne.n	80020be <xTaskResumeAll+0x8a>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	68d2      	ldr	r2, [r2, #12]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	6892      	ldr	r2, [r2, #8]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3304      	adds	r3, #4
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d103      	bne.n	80020fc <xTaskResumeAll+0xc8>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f934 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2201      	movs	r2, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <xTaskResumeAll+0x208>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	4a46      	ldr	r2, [pc, #280]	; (800223c <xTaskResumeAll+0x208>)
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	4945      	ldr	r1, [pc, #276]	; (8002240 <xTaskResumeAll+0x20c>)
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3304      	adds	r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	3204      	adds	r2, #4
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4a35      	ldr	r2, [pc, #212]	; (8002240 <xTaskResumeAll+0x20c>)
 800216a:	441a      	add	r2, r3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	4932      	ldr	r1, [pc, #200]	; (8002240 <xTaskResumeAll+0x20c>)
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002186:	1c59      	adds	r1, r3, #1
 8002188:	482d      	ldr	r0, [pc, #180]	; (8002240 <xTaskResumeAll+0x20c>)
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4403      	add	r3, r0
 8002194:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <xTaskResumeAll+0x210>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d904      	bls.n	80021ae <xTaskResumeAll+0x17a>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <xTaskResumeAll+0x214>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2101      	movs	r1, #1
 80021aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <xTaskResumeAll+0x204>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f af68 	bne.w	8002088 <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <xTaskResumeAll+0x18e>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80021be:	f000 fc7f 	bl	8002ac0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <xTaskResumeAll+0x218>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <xTaskResumeAll+0x1c0>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80021ce:	f000 f877 	bl	80022c0 <xTaskIncrementTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <xTaskResumeAll+0x1ae>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <xTaskResumeAll+0x214>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2101      	movs	r1, #1
 80021de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ef      	bne.n	80021ce <xTaskResumeAll+0x19a>

                            xPendedTicks = 0;
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <xTaskResumeAll+0x218>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <xTaskResumeAll+0x214>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <xTaskResumeAll+0x1e4>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <xTaskResumeAll+0x210>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <xTaskResumeAll+0x21c>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002218:	f001 fb8e 	bl	8003938 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4619      	mov	r1, r3
 8002220:	20d0      	movs	r0, #208	; 0xd0
 8002222:	f002 ffb3 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002226:	69bb      	ldr	r3, [r7, #24]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000200 	.word	0x20000200
 8002234:	200001d8 	.word	0x200001d8
 8002238:	20000198 	.word	0x20000198
 800223c:	200001e0 	.word	0x200001e0
 8002240:	200000a0 	.word	0x200000a0
 8002244:	2000009c 	.word	0x2000009c
 8002248:	200001ec 	.word	0x200001ec
 800224c:	200001e8 	.word	0x200001e8
 8002250:	e000ed04 	.word	0xe000ed04

08002254 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <xTaskGetTickCount+0x20>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	20d1      	movs	r0, #209	; 0xd1
 8002264:	f002 ff92 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200001dc 	.word	0x200001dc

08002278 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800227e:	f001 fc0b 	bl	8003a98 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <xTaskGetTickCountFromISR+0x28>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	20d2      	movs	r0, #210	; 0xd2
 8002290:	f002 ff7c 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002294:	683b      	ldr	r3, [r7, #0]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200001dc 	.word	0x200001dc

080022a4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <uxTaskGetNumberOfTasks+0x18>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	20d3      	movs	r0, #211	; 0xd3
 80022b0:	f002 ff6c 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 80022b4:	4b01      	ldr	r3, [pc, #4]	; (80022bc <uxTaskGetNumberOfTasks+0x18>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200001d8 	.word	0x200001d8

080022c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80022ca:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <xTaskIncrementTick+0x218>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80f2 	bne.w	80024b8 <xTaskIncrementTick+0x1f8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <xTaskIncrementTick+0x21c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80022dc:	4a7f      	ldr	r2, [pc, #508]	; (80024dc <xTaskIncrementTick+0x21c>)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d120      	bne.n	800232a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80022e8:	4b7d      	ldr	r3, [pc, #500]	; (80024e0 <xTaskIncrementTick+0x220>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <xTaskIncrementTick+0x48>
    __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	607b      	str	r3, [r7, #4]
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xTaskIncrementTick+0x46>
 8002308:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <xTaskIncrementTick+0x220>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <xTaskIncrementTick+0x224>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a73      	ldr	r2, [pc, #460]	; (80024e0 <xTaskIncrementTick+0x220>)
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <xTaskIncrementTick+0x224>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b72      	ldr	r3, [pc, #456]	; (80024e8 <xTaskIncrementTick+0x228>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <xTaskIncrementTick+0x228>)
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	f000 fbcb 	bl	8002ac0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <xTaskIncrementTick+0x22c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	f0c0 80ac 	bcc.w	800248e <xTaskIncrementTick+0x1ce>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002336:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <xTaskIncrementTick+0x220>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <xTaskIncrementTick+0x22c>)
 8002342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002346:	601a      	str	r2, [r3, #0]
                    break;
 8002348:	e0a1      	b.n	800248e <xTaskIncrementTick+0x1ce>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <xTaskIncrementTick+0x220>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	429a      	cmp	r2, r3
 8002360:	d203      	bcs.n	800236a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002362:	4a62      	ldr	r2, [pc, #392]	; (80024ec <xTaskIncrementTick+0x22c>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	6013      	str	r3, [r2, #0]
                        break;
 8002368:	e091      	b.n	800248e <xTaskIncrementTick+0x1ce>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	68d2      	ldr	r2, [r2, #12]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	6892      	ldr	r2, [r2, #8]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3304      	adds	r3, #4
 800238c:	429a      	cmp	r2, r3
 800238e:	d103      	bne.n	8002398 <xTaskIncrementTick+0xd8>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01e      	beq.n	80023ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	6a12      	ldr	r2, [r2, #32]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	69d2      	ldr	r2, [r2, #28]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3318      	adds	r3, #24
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d103      	bne.n	80023de <xTaskIncrementTick+0x11e>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6a1a      	ldr	r2, [r3, #32]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2200      	movs	r2, #0
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 ffc3 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <xTaskIncrementTick+0x230>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <xTaskIncrementTick+0x230>)
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <xTaskIncrementTick+0x234>)
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3304      	adds	r3, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	3204      	adds	r2, #4
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1d1a      	adds	r2, r3, #4
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4a2a      	ldr	r2, [pc, #168]	; (80024f4 <xTaskIncrementTick+0x234>)
 800244c:	441a      	add	r2, r3
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	615a      	str	r2, [r3, #20]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <xTaskIncrementTick+0x234>)
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	4822      	ldr	r0, [pc, #136]	; (80024f4 <xTaskIncrementTick+0x234>)
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <xTaskIncrementTick+0x238>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	429a      	cmp	r2, r3
 8002484:	f67f af57 	bls.w	8002336 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800248c:	e753      	b.n	8002336 <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <xTaskIncrementTick+0x238>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	4917      	ldr	r1, [pc, #92]	; (80024f4 <xTaskIncrementTick+0x234>)
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d901      	bls.n	80024aa <xTaskIncrementTick+0x1ea>
                {
                    xSwitchRequired = pdTRUE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <xTaskIncrementTick+0x23c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <xTaskIncrementTick+0x202>
                {
                    xSwitchRequired = pdTRUE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
 80024b6:	e004      	b.n	80024c2 <xTaskIncrementTick+0x202>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <xTaskIncrementTick+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <xTaskIncrementTick+0x240>)
 80024c0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	20db      	movs	r0, #219	; 0xdb
 80024c8:	f002 fe60 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000200 	.word	0x20000200
 80024dc:	200001dc 	.word	0x200001dc
 80024e0:	20000190 	.word	0x20000190
 80024e4:	20000194 	.word	0x20000194
 80024e8:	200001f0 	.word	0x200001f0
 80024ec:	200001f8 	.word	0x200001f8
 80024f0:	200001e0 	.word	0x200001e0
 80024f4:	200000a0 	.word	0x200000a0
 80024f8:	2000009c 	.word	0x2000009c
 80024fc:	200001ec 	.word	0x200001ec
 8002500:	200001e8 	.word	0x200001e8

08002504 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <vTaskSwitchContext+0xbc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <vTaskSwitchContext+0xc0>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002518:	e04e      	b.n	80025b8 <vTaskSwitchContext+0xb4>
            xYieldPendings[ 0 ] = pdFALSE;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <vTaskSwitchContext+0xc0>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <vTaskSwitchContext+0xc4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800252e:	7afb      	ldrb	r3, [r7, #11]
 8002530:	f1c3 031f 	rsb	r3, r3, #31
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	4925      	ldr	r1, [pc, #148]	; (80025cc <vTaskSwitchContext+0xc8>)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <vTaskSwitchContext+0x5c>
    __asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	607b      	str	r3, [r7, #4]
}
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <vTaskSwitchContext+0x5a>
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <vTaskSwitchContext+0xc8>)
 800256c:	4413      	add	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	3308      	adds	r3, #8
 8002582:	429a      	cmp	r2, r3
 8002584:	d103      	bne.n	800258e <vTaskSwitchContext+0x8a>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <vTaskSwitchContext+0xcc>)
 8002596:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <vTaskSwitchContext+0xd0>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <vTaskSwitchContext+0xcc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d102      	bne.n	80025aa <vTaskSwitchContext+0xa6>
 80025a4:	f002 fe4a 	bl	800523c <SEGGER_SYSVIEW_OnIdle>
 80025a8:	e004      	b.n	80025b4 <vTaskSwitchContext+0xb0>
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <vTaskSwitchContext+0xcc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fea2 	bl	80052f8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <vTaskSwitchContext+0xcc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
    }
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000200 	.word	0x20000200
 80025c4:	200001ec 	.word	0x200001ec
 80025c8:	200001e0 	.word	0x200001e0
 80025cc:	200000a0 	.word	0x200000a0
 80025d0:	2000009c 	.word	0x2000009c
 80025d4:	200001fc 	.word	0x200001fc

080025d8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <vTaskPlaceOnEventList+0x26>
    __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60fb      	str	r3, [r7, #12]
}
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <vTaskPlaceOnEventList+0x4c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3318      	adds	r3, #24
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fbea 	bl	8000de0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800260c:	2101      	movs	r1, #1
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f000 fccc 	bl	8002fac <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8002614:	20e1      	movs	r0, #225	; 0xe1
 8002616:	f002 fd7d 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000009c 	.word	0x2000009c

08002628 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	613b      	str	r3, [r7, #16]
}
 800264c:	bf00      	nop
 800264e:	e7fe      	b.n	800264e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	621a      	str	r2, [r3, #32]
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	3218      	adds	r2, #24
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f103 0218 	add.w	r2, r3, #24
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	68b8      	ldr	r0, [r7, #8]
 80026a2:	f000 fc83 	bl	8002fac <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80026a6:	20e3      	movs	r0, #227	; 0xe3
 80026a8:	f002 fd34 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000009c 	.word	0x2000009c

080026b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	60fb      	str	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	6a12      	ldr	r2, [r2, #32]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	69d2      	ldr	r2, [r2, #28]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	3318      	adds	r3, #24
 8002706:	429a      	cmp	r2, r3
 8002708:	d103      	bne.n	8002712 <xTaskRemoveFromEventList+0x5a>
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	2200      	movs	r2, #0
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002722:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <xTaskRemoveFromEventList+0x1a8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d164      	bne.n	80027f4 <xTaskRemoveFromEventList+0x13c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	68d2      	ldr	r2, [r2, #12]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	3304      	adds	r3, #4
 800274c:	429a      	cmp	r2, r3
 800274e:	d103      	bne.n	8002758 <xTaskRemoveFromEventList+0xa0>
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fe06 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2201      	movs	r2, #1
 8002776:	409a      	lsls	r2, r3
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <xTaskRemoveFromEventList+0x1ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <xTaskRemoveFromEventList+0x1ac>)
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	4938      	ldr	r1, [pc, #224]	; (8002868 <xTaskRemoveFromEventList+0x1b0>)
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3304      	adds	r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	3204      	adds	r2, #4
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	1d1a      	adds	r2, r3, #4
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <xTaskRemoveFromEventList+0x1b0>)
 80027c6:	441a      	add	r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	4925      	ldr	r1, [pc, #148]	; (8002868 <xTaskRemoveFromEventList+0x1b0>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	4820      	ldr	r0, [pc, #128]	; (8002868 <xTaskRemoveFromEventList+0x1b0>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4403      	add	r3, r0
 80027f0:	6019      	str	r1, [r3, #0]
 80027f2:	e01b      	b.n	800282c <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <xTaskRemoveFromEventList+0x1b4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	61da      	str	r2, [r3, #28]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	621a      	str	r2, [r3, #32]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	3218      	adds	r2, #24
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	f103 0218 	add.w	r2, r3, #24
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <xTaskRemoveFromEventList+0x1b4>)
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <xTaskRemoveFromEventList+0x1b4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <xTaskRemoveFromEventList+0x1b4>)
 800282a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <xTaskRemoveFromEventList+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	429a      	cmp	r2, r3
 8002838:	d905      	bls.n	8002846 <xTaskRemoveFromEventList+0x18e>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <xTaskRemoveFromEventList+0x1bc>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e001      	b.n	800284a <xTaskRemoveFromEventList+0x192>
        }
        else
        {
            xReturn = pdFALSE;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	20e4      	movs	r0, #228	; 0xe4
 8002850:	f002 fc9c 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002856:	4618      	mov	r0, r3
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000200 	.word	0x20000200
 8002864:	200001e0 	.word	0x200001e0
 8002868:	200000a0 	.word	0x200000a0
 800286c:	20000198 	.word	0x20000198
 8002870:	2000009c 	.word	0x2000009c
 8002874:	200001ec 	.word	0x200001ec

08002878 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <vTaskInternalSetTimeOutState+0x28>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <vTaskInternalSetTimeOutState+0x2c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8002890:	20e7      	movs	r0, #231	; 0xe7
 8002892:	f002 fc3f 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200001f0 	.word	0x200001f0
 80028a4:	200001dc 	.word	0x200001dc

080028a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <xTaskCheckForTimeOut+0x26>
    __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	613b      	str	r3, [r7, #16]
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <xTaskCheckForTimeOut+0x42>
    __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	60fb      	str	r3, [r7, #12]
}
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80028ea:	f000 fff5 	bl	80038d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <xTaskCheckForTimeOut+0xcc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002906:	d102      	bne.n	800290e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	e026      	b.n	800295c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <xTaskCheckForTimeOut+0xd0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d00a      	beq.n	8002930 <xTaskCheckForTimeOut+0x88>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d305      	bcc.n	8002930 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e015      	b.n	800295c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	429a      	cmp	r2, r3
 8002938:	d20b      	bcs.n	8002952 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff96 	bl	8002878 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	e004      	b.n	800295c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002958:	2301      	movs	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800295c:	f000 ffec 	bl	8003938 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4619      	mov	r1, r3
 8002964:	20e8      	movs	r0, #232	; 0xe8
 8002966:	f002 fc11 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800296a:	69fb      	ldr	r3, [r7, #28]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200001dc 	.word	0x200001dc
 8002978:	200001f0 	.word	0x200001f0

0800297c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <vTaskMissedYield+0x14>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8002986:	20e9      	movs	r0, #233	; 0xe9
 8002988:	f002 fbc4 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200001ec 	.word	0x200001ec

08002994 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800299c:	f000 f852 	bl	8002a44 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <prvIdleTask+0x28>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d9f9      	bls.n	800299c <prvIdleTask+0x8>
            {
                taskYIELD();
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <prvIdleTask+0x2c>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029b8:	e7f0      	b.n	800299c <prvIdleTask+0x8>
 80029ba:	bf00      	nop
 80029bc:	200000a0 	.word	0x200000a0
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e00c      	b.n	80029ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <prvInitialiseTaskLists+0x60>)
 80029dc:	4413      	add	r3, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f9cd 	bl	8000d7e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d9ef      	bls.n	80029d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <prvInitialiseTaskLists+0x64>)
 80029f2:	f7fe f9c4 	bl	8000d7e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <prvInitialiseTaskLists+0x68>)
 80029f8:	f7fe f9c1 	bl	8000d7e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029fc:	480c      	ldr	r0, [pc, #48]	; (8002a30 <prvInitialiseTaskLists+0x6c>)
 80029fe:	f7fe f9be 	bl	8000d7e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002a02:	480c      	ldr	r0, [pc, #48]	; (8002a34 <prvInitialiseTaskLists+0x70>)
 8002a04:	f7fe f9bb 	bl	8000d7e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002a08:	480b      	ldr	r0, [pc, #44]	; (8002a38 <prvInitialiseTaskLists+0x74>)
 8002a0a:	f7fe f9b8 	bl	8000d7e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <prvInitialiseTaskLists+0x78>)
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <prvInitialiseTaskLists+0x64>)
 8002a12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <prvInitialiseTaskLists+0x7c>)
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <prvInitialiseTaskLists+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200000a0 	.word	0x200000a0
 8002a28:	20000168 	.word	0x20000168
 8002a2c:	2000017c 	.word	0x2000017c
 8002a30:	20000198 	.word	0x20000198
 8002a34:	200001ac 	.word	0x200001ac
 8002a38:	200001c4 	.word	0x200001c4
 8002a3c:	20000190 	.word	0x20000190
 8002a40:	20000194 	.word	0x20000194

08002a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a4a:	e019      	b.n	8002a80 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002a4c:	f000 ff44 	bl	80038d8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <prvCheckTasksWaitingTermination+0x50>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f9fa 	bl	8000e56 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a6a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a74:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002a76:	f000 ff5f 	bl	8003938 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f810 	bl	8002aa0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e1      	bne.n	8002a4c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200001ac 	.word	0x200001ac
 8002a98:	200001d8 	.word	0x200001d8
 8002a9c:	200001c0 	.word	0x200001c0

08002aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f95f 	bl	8003d70 <vPortFree>
            vPortFree( pxTCB );
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 f95c 	bl	8003d70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <prvResetNextTaskUnblockTime+0x30>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <prvResetNextTaskUnblockTime+0x34>)
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ad6:	e005      	b.n	8002ae4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <prvResetNextTaskUnblockTime+0x30>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <prvResetNextTaskUnblockTime+0x34>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000190 	.word	0x20000190
 8002af4:	200001f8 	.word	0x200001f8

08002af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <xTaskGetSchedulerState+0x3c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002b06:	2301      	movs	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	e008      	b.n	8002b1e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <xTaskGetSchedulerState+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002b14:	2302      	movs	r3, #2
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	e001      	b.n	8002b1e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	20f5      	movs	r0, #245	; 0xf5
 8002b24:	f002 fb32 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002b28:	687b      	ldr	r3, [r7, #4]
    }
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001e4 	.word	0x200001e4
 8002b38:	20000200 	.word	0x20000200

08002b3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 808d 	beq.w	8002c6e <xTaskPriorityInherit+0x132>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <xTaskPriorityInherit+0x148>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d27c      	bcs.n	8002c5c <xTaskPriorityInherit+0x120>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db06      	blt.n	8002b78 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8002b6a:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <xTaskPriorityInherit+0x148>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f1c3 020a 	rsb	r2, r3, #10
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6959      	ldr	r1, [r3, #20]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4a3f      	ldr	r2, [pc, #252]	; (8002c88 <xTaskPriorityInherit+0x14c>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4299      	cmp	r1, r3
 8002b8e:	d15d      	bne.n	8002c4c <xTaskPriorityInherit+0x110>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f95e 	bl	8000e56 <uxListRemove>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <xTaskPriorityInherit+0x150>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <xTaskPriorityInherit+0x150>)
 8002bb4:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <xTaskPriorityInherit+0x148>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fbda 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <xTaskPriorityInherit+0x150>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <xTaskPriorityInherit+0x150>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	492a      	ldr	r1, [pc, #168]	; (8002c88 <xTaskPriorityInherit+0x14c>)
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3304      	adds	r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	3204      	adds	r2, #4
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <xTaskPriorityInherit+0x14c>)
 8002c1e:	441a      	add	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	615a      	str	r2, [r3, #20]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	4917      	ldr	r1, [pc, #92]	; (8002c88 <xTaskPriorityInherit+0x14c>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	4812      	ldr	r0, [pc, #72]	; (8002c88 <xTaskPriorityInherit+0x14c>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4403      	add	r3, r0
 8002c48:	6019      	str	r1, [r3, #0]
 8002c4a:	e004      	b.n	8002c56 <xTaskPriorityInherit+0x11a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <xTaskPriorityInherit+0x148>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e008      	b.n	8002c6e <xTaskPriorityInherit+0x132>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <xTaskPriorityInherit+0x148>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d201      	bcs.n	8002c6e <xTaskPriorityInherit+0x132>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4619      	mov	r1, r3
 8002c72:	20f6      	movs	r0, #246	; 0xf6
 8002c74:	f002 fa8a 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002c78:	697b      	ldr	r3, [r7, #20]
    }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000009c 	.word	0x2000009c
 8002c88:	200000a0 	.word	0x200000a0
 8002c8c:	200001e0 	.word	0x200001e0

08002c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8092 	beq.w	8002dcc <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <xTaskPriorityDisinherit+0x150>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d00a      	beq.n	8002cc8 <xTaskPriorityDisinherit+0x38>
    __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	613b      	str	r3, [r7, #16]
}
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xTaskPriorityDisinherit+0x56>
    __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	60fb      	str	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d067      	beq.n	8002dcc <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d163      	bne.n	8002dcc <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe f8a4 	bl	8000e56 <uxListRemove>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2201      	movs	r2, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <xTaskPriorityDisinherit+0x154>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4013      	ands	r3, r2
 8002d26:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <xTaskPriorityDisinherit+0x154>)
 8002d28:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f1c3 020a 	rsb	r2, r3, #10
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 fb1b 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <xTaskPriorityDisinherit+0x154>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <xTaskPriorityDisinherit+0x154>)
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4922      	ldr	r1, [pc, #136]	; (8002de8 <xTaskPriorityDisinherit+0x158>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3304      	adds	r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	3204      	adds	r2, #4
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1d1a      	adds	r2, r3, #4
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <xTaskPriorityDisinherit+0x158>)
 8002d9c:	441a      	add	r2, r3
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	615a      	str	r2, [r3, #20]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	4910      	ldr	r1, [pc, #64]	; (8002de8 <xTaskPriorityDisinherit+0x158>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	480b      	ldr	r0, [pc, #44]	; (8002de8 <xTaskPriorityDisinherit+0x158>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4403      	add	r3, r0
 8002dc6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	20f7      	movs	r0, #247	; 0xf7
 8002dd2:	f002 f9db 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
    }
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000009c 	.word	0x2000009c
 8002de4:	200001e0 	.word	0x200001e0
 8002de8:	200000a0 	.word	0x200000a0

08002dec <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a8 	beq.w	8002f56 <vTaskPriorityDisinheritAfterTimeout+0x16a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <vTaskPriorityDisinheritAfterTimeout+0x38>
    __asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	613b      	str	r3, [r7, #16]
}
 8002e20:	bf00      	nop
 8002e22:	e7fe      	b.n	8002e22 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d902      	bls.n	8002e34 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e002      	b.n	8002e3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f000 8088 	beq.w	8002f56 <vTaskPriorityDisinheritAfterTimeout+0x16a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8082 	bne.w	8002f56 <vTaskPriorityDisinheritAfterTimeout+0x16a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a3a      	ldr	r2, [r7, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d10a      	bne.n	8002e72 <vTaskPriorityDisinheritAfterTimeout+0x86>
    __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	60fb      	str	r3, [r7, #12]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db04      	blt.n	8002e90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f1c3 020a 	rsb	r2, r3, #10
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	6959      	ldr	r1, [r3, #20]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a32      	ldr	r2, [pc, #200]	; (8002f68 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4299      	cmp	r1, r3
 8002ea4:	d157      	bne.n	8002f56 <vTaskPriorityDisinheritAfterTimeout+0x16a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd ffd3 	bl	8000e56 <uxListRemove>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <vTaskPriorityDisinheritAfterTimeout+0xe0>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8002eca:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fa54 	bl	800537c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	491f      	ldr	r1, [pc, #124]	; (8002f68 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	3204      	adds	r2, #4
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8002f2a:	441a      	add	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	615a      	str	r2, [r3, #20]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	490c      	ldr	r1, [pc, #48]	; (8002f68 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	4807      	ldr	r0, [pc, #28]	; (8002f68 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4403      	add	r3, r0
 8002f54:	6019      	str	r1, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
 8002f56:	20f8      	movs	r0, #248	; 0xf8
 8002f58:	f002 f8dc 	bl	8005114 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000009c 	.word	0x2000009c
 8002f68:	200000a0 	.word	0x200000a0
 8002f6c:	200001e0 	.word	0x200001e0

08002f70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <pvTaskIncrementMutexHeldCount+0x38>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 fa96 	bl	80054c0 <SEGGER_SYSVIEW_ShrinkId>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4619      	mov	r1, r3
 8002f98:	20fe      	movs	r0, #254	; 0xfe
 8002f9a:	f002 f8f7 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 8002f9e:	687b      	ldr	r3, [r7, #4]
    }
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000009c 	.word	0x2000009c

08002fac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <prvAddCurrentTaskToDelayedList+0x100>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002fbc:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <prvAddCurrentTaskToDelayedList+0x104>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x108>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff41 	bl	8000e56 <uxListRemove>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	4b34      	ldr	r3, [pc, #208]	; (80030bc <prvAddCurrentTaskToDelayedList+0x110>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4013      	ands	r3, r2
 8002fee:	4a33      	ldr	r2, [pc, #204]	; (80030bc <prvAddCurrentTaskToDelayedList+0x110>)
 8002ff0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff8:	d124      	bne.n	8003044 <prvAddCurrentTaskToDelayedList+0x98>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d021      	beq.n	8003044 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	3204      	adds	r2, #4
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003034:	615a      	str	r2, [r3, #20]
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <prvAddCurrentTaskToDelayedList+0x114>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003042:	e02e      	b.n	80030a2 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	d20d      	bcs.n	8003078 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2104      	movs	r1, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f002 f9cc 	bl	8005400 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3304      	adds	r3, #4
 800306e:	4619      	mov	r1, r3
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7fd feb5 	bl	8000de0 <vListInsert>
}
 8003076:	e014      	b.n	80030a2 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2104      	movs	r1, #4
 800307e:	4618      	mov	r0, r3
 8003080:	f002 f9be 	bl	8005400 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3304      	adds	r3, #4
 800308a:	4619      	mov	r1, r3
 800308c:	69b8      	ldr	r0, [r7, #24]
 800308e:	f7fd fea7 	bl	8000de0 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <prvAddCurrentTaskToDelayedList+0x118>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d202      	bcs.n	80030a2 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <prvAddCurrentTaskToDelayedList+0x118>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200001dc 	.word	0x200001dc
 80030b0:	20000190 	.word	0x20000190
 80030b4:	20000194 	.word	0x20000194
 80030b8:	2000009c 	.word	0x2000009c
 80030bc:	200001e0 	.word	0x200001e0
 80030c0:	200001c4 	.word	0x200001c4
 80030c4:	200001f8 	.word	0x200001f8

080030c8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80030d2:	f000 fa53 	bl	800357c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <xTimerCreateTimerTask+0x60>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <xTimerCreateTimerTask+0x64>)
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2304      	movs	r3, #4
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80030ec:	4910      	ldr	r1, [pc, #64]	; (8003130 <xTimerCreateTimerTask+0x68>)
 80030ee:	4811      	ldr	r0, [pc, #68]	; (8003134 <xTimerCreateTimerTask+0x6c>)
 80030f0:	f7fe fd83 	bl	8001bfa <xTaskCreate>
 80030f4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xTimerCreateTimerTask+0x4a>
    __asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	603b      	str	r3, [r7, #0]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4619      	mov	r1, r3
 8003116:	f44f 7084 	mov.w	r0, #264	; 0x108
 800311a:	f002 f837 	bl	800518c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800311e:	687b      	ldr	r3, [r7, #4]
    }
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000234 	.word	0x20000234
 800312c:	20000238 	.word	0x20000238
 8003130:	08005b74 	.word	0x08005b74
 8003134:	080031dd 	.word	0x080031dd

08003138 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003144:	e008      	b.n	8003158 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	18d1      	adds	r1, r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8dd 	bl	8003324 <prvInsertTimerInActiveList>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <prvReloadTimer+0xe>
        }
    }
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <prvProcessExpiredTimer+0x5c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fe5e 	bl	8000e56 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ffc3 	bl	8003138 <prvReloadTimer>
 80031b2:	e008      	b.n	80031c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	4798      	blx	r3
    }
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000022c 	.word	0x2000022c

080031dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f857 	bl	800329c <prvGetNextExpireTime>
 80031ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f803 	bl	8003200 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80031fa:	f000 f8d5 	bl	80033a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031fe:	e7f1      	b.n	80031e4 <prvTimerTask+0x8>

08003200 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800320a:	f7fe ff05 	bl	8002018 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f866 	bl	80032e4 <prvSampleTimeNow>
 8003218:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d130      	bne.n	8003282 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <prvProcessTimerOrBlockTask+0x3c>
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	429a      	cmp	r2, r3
 800322c:	d806      	bhi.n	800323c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800322e:	f7fe ff01 	bl	8002034 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffa1 	bl	800317c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800323a:	e024      	b.n	8003286 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <prvProcessTimerOrBlockTask+0x90>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <prvProcessTimerOrBlockTask+0x50>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <prvProcessTimerOrBlockTask+0x52>
 8003250:	2300      	movs	r3, #0
 8003252:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <prvProcessTimerOrBlockTask+0x94>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f7fe fc57 	bl	8001b14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003266:	f7fe fee5 	bl	8002034 <xTaskResumeAll>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <prvProcessTimerOrBlockTask+0x98>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
    }
 8003280:	e001      	b.n	8003286 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003282:	f7fe fed7 	bl	8002034 <xTaskResumeAll>
    }
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000230 	.word	0x20000230
 8003294:	20000234 	.word	0x20000234
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <prvGetNextExpireTime+0x44>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <prvGetNextExpireTime+0x16>
 80032ae:	2201      	movs	r2, #1
 80032b0:	e000      	b.n	80032b4 <prvGetNextExpireTime+0x18>
 80032b2:	2200      	movs	r2, #0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <prvGetNextExpireTime+0x44>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e001      	b.n	80032d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80032d0:	68fb      	ldr	r3, [r7, #12]
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	2000022c 	.word	0x2000022c

080032e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80032ec:	f7fe ffb2 	bl	8002254 <xTaskGetTickCount>
 80032f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <prvSampleTimeNow+0x3c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d205      	bcs.n	8003308 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80032fc:	f000 f918 	bl	8003530 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e002      	b.n	800330e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <prvSampleTimeNow+0x3c>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003314:	68fb      	ldr	r3, [r7, #12]
    }
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000023c 	.word	0x2000023c

08003324 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d812      	bhi.n	8003370 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e01b      	b.n	8003396 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <prvInsertTimerInActiveList+0x7c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fd fd39 	bl	8000de0 <vListInsert>
 800336e:	e012      	b.n	8003396 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d206      	bcs.n	8003386 <prvInsertTimerInActiveList+0x62>
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e007      	b.n	8003396 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <prvInsertTimerInActiveList+0x80>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7fd fd25 	bl	8000de0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003396:	697b      	ldr	r3, [r7, #20]
    }
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000230 	.word	0x20000230
 80033a4:	2000022c 	.word	0x2000022c

080033a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80033ba:	e0a6      	b.n	800350a <prvProcessReceivedCommands+0x162>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f2c0 80a2 	blt.w	8003508 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fd3e 	bl	8000e56 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff81 	bl	80032e4 <prvSampleTimeNow>
 80033e2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 808e 	bhi.w	800350a <prvProcessReceivedCommands+0x162>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <prvProcessReceivedCommands+0x4c>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003481 	.word	0x08003481
 8003400:	08003495 	.word	0x08003495
 8003404:	080034df 	.word	0x080034df
 8003408:	08003419 	.word	0x08003419
 800340c:	08003419 	.word	0x08003419
 8003410:	08003481 	.word	0x08003481
 8003414:	08003495 	.word	0x08003495
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	18d1      	adds	r1, r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	69f8      	ldr	r0, [r7, #28]
 8003438:	f7ff ff74 	bl	8003324 <prvInsertTimerInActiveList>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	4413      	add	r3, r2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4619      	mov	r1, r3
 800345c:	69f8      	ldr	r0, [r7, #28]
 800345e:	f7ff fe6b 	bl	8003138 <prvReloadTimer>
 8003462:	e008      	b.n	8003476 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	69f8      	ldr	r0, [r7, #28]
 800347c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800347e:	e044      	b.n	800350a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	b2da      	uxtb	r2, r3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003492:	e03a      	b.n	800350a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <prvProcessReceivedCommands+0x122>
    __asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	617b      	str	r3, [r7, #20]
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	18d1      	adds	r1, r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	69f8      	ldr	r0, [r7, #28]
 80034d8:	f7ff ff24 	bl	8003324 <prvInsertTimerInActiveList>
                        break;
 80034dc:	e015      	b.n	800350a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <prvProcessReceivedCommands+0x14c>
                            {
                                vPortFree( pxTimer );
 80034ec:	69f8      	ldr	r0, [r7, #28]
 80034ee:	f000 fc3f 	bl	8003d70 <vPortFree>
 80034f2:	e00a      	b.n	800350a <prvProcessReceivedCommands+0x162>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003506:	e000      	b.n	800350a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003508:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <prvProcessReceivedCommands+0x184>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f107 0108 	add.w	r1, r7, #8
 8003512:	2200      	movs	r2, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd ff8f 	bl	8001438 <xQueueReceive>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f af4d 	bne.w	80033bc <prvProcessReceivedCommands+0x14>
        }
    }
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000234 	.word	0x20000234

08003530 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003536:	e009      	b.n	800354c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <prvSwitchTimerLists+0x44>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003542:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003546:	6838      	ldr	r0, [r7, #0]
 8003548:	f7ff fe18 	bl	800317c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <prvSwitchTimerLists+0x44>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <prvSwitchTimerLists+0x44>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvSwitchTimerLists+0x48>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <prvSwitchTimerLists+0x44>)
 8003562:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <prvSwitchTimerLists+0x48>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6013      	str	r3, [r2, #0]
    }
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000022c 	.word	0x2000022c
 8003578:	20000230 	.word	0x20000230

0800357c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003580:	f000 f9aa 	bl	80038d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <prvCheckForValidListAndQueue+0x54>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800358c:	4811      	ldr	r0, [pc, #68]	; (80035d4 <prvCheckForValidListAndQueue+0x58>)
 800358e:	f7fd fbf6 	bl	8000d7e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003592:	4811      	ldr	r0, [pc, #68]	; (80035d8 <prvCheckForValidListAndQueue+0x5c>)
 8003594:	f7fd fbf3 	bl	8000d7e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <prvCheckForValidListAndQueue+0x60>)
 800359a:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <prvCheckForValidListAndQueue+0x58>)
 800359c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <prvCheckForValidListAndQueue+0x64>)
 80035a0:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <prvCheckForValidListAndQueue+0x5c>)
 80035a2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80035a4:	2200      	movs	r2, #0
 80035a6:	210c      	movs	r1, #12
 80035a8:	200a      	movs	r0, #10
 80035aa:	f7fd fd17 	bl	8000fdc <xQueueGenericCreate>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <prvCheckForValidListAndQueue+0x54>)
 80035b2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <prvCheckForValidListAndQueue+0x54>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <prvCheckForValidListAndQueue+0x54>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4908      	ldr	r1, [pc, #32]	; (80035e4 <prvCheckForValidListAndQueue+0x68>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fa56 	bl	8001a74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035c8:	f000 f9b6 	bl	8003938 <vPortExitCritical>
    }
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000234 	.word	0x20000234
 80035d4:	20000204 	.word	0x20000204
 80035d8:	20000218 	.word	0x20000218
 80035dc:	2000022c 	.word	0x2000022c
 80035e0:	20000230 	.word	0x20000230
 80035e4:	08005b7c 	.word	0x08005b7c

080035e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003600:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b04      	subs	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3b04      	subs	r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <pxPortInitialiseStack+0x64>)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b14      	subs	r3, #20
 8003622:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b04      	subs	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f06f 0202 	mvn.w	r2, #2
 8003636:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3b20      	subs	r3, #32
 800363c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	08003651 	.word	0x08003651

08003650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <prvTaskExitError+0x54>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003662:	d00a      	beq.n	800367a <prvTaskExitError+0x2a>
    __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60fb      	str	r3, [r7, #12]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <prvTaskExitError+0x28>
    __asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60bb      	str	r3, [r7, #8]
}
 800368c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800368e:	bf00      	nop
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0fc      	beq.n	8003690 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000018 	.word	0x20000018
	...

080036b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <pxCurrentTCBConst2>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	6808      	ldr	r0, [r1, #0]
 80036b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ba:	f380 8809 	msr	PSP, r0
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f380 8811 	msr	BASEPRI, r0
 80036ca:	4770      	bx	lr
 80036cc:	f3af 8000 	nop.w

080036d0 <pxCurrentTCBConst2>:
 80036d0:	2000009c 	.word	0x2000009c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop

080036d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <prvPortStartFirstTask+0x24>)
 80036da:	6800      	ldr	r0, [r0, #0]
 80036dc:	6800      	ldr	r0, [r0, #0]
 80036de:	f380 8808 	msr	MSP, r0
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f380 8814 	msr	CONTROL, r0
 80036ea:	b662      	cpsie	i
 80036ec:	b661      	cpsie	f
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	df00      	svc	0
 80036f8:	bf00      	nop
 80036fa:	0000      	.short	0x0000
 80036fc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop

08003704 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	; 0x30
 8003708:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800370a:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <xPortStartScheduler+0x1a0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a66      	ldr	r2, [pc, #408]	; (80038a8 <xPortStartScheduler+0x1a4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10a      	bne.n	800372a <xPortStartScheduler+0x26>
    __asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <xPortStartScheduler+0x1a0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5f      	ldr	r2, [pc, #380]	; (80038ac <xPortStartScheduler+0x1a8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10a      	bne.n	800374a <xPortStartScheduler+0x46>
    __asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	623b      	str	r3, [r7, #32]
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800374a:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <xPortStartScheduler+0x1ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	332c      	adds	r3, #44	; 0x2c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <xPortStartScheduler+0x1b0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00a      	beq.n	8003772 <xPortStartScheduler+0x6e>
    __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	61fb      	str	r3, [r7, #28]
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	3338      	adds	r3, #56	; 0x38
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <xPortStartScheduler+0x1b4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00a      	beq.n	8003794 <xPortStartScheduler+0x90>
    __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	61bb      	str	r3, [r7, #24]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003798:	4b48      	ldr	r3, [pc, #288]	; (80038bc <xPortStartScheduler+0x1b8>)
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	22ff      	movs	r2, #255	; 0xff
 80037a8:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <xPortStartScheduler+0x1bc>)
 80037be:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80037c0:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <xPortStartScheduler+0x1bc>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xPortStartScheduler+0xda>
    __asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	617b      	str	r3, [r7, #20]
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <xPortStartScheduler+0x10e>
    __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	613b      	str	r3, [r7, #16]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d0f1      	beq.n	8003802 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d103      	bne.n	800382c <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <xPortStartScheduler+0x1c0>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e004      	b.n	8003836 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <xPortStartScheduler+0x1c0>)
 8003834:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <xPortStartScheduler+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <xPortStartScheduler+0x1c0>)
 800383e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <xPortStartScheduler+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <xPortStartScheduler+0x1c0>)
 800384a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <xPortStartScheduler+0x1c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <xPortStartScheduler+0x1c4>)
 800385a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800385e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <xPortStartScheduler+0x1c4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <xPortStartScheduler+0x1c4>)
 8003866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <xPortStartScheduler+0x1c8>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003872:	f000 f8eb 	bl	8003a4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <xPortStartScheduler+0x1cc>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800387c:	f000 f900 	bl	8003a80 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <xPortStartScheduler+0x1d0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <xPortStartScheduler+0x1d0>)
 8003886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800388c:	f7ff ff24 	bl	80036d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003890:	f7fe fe38 	bl	8002504 <vTaskSwitchContext>
    prvTaskExitError();
 8003894:	f7ff fedc 	bl	8003650 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3730      	adds	r7, #48	; 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	410fc271 	.word	0x410fc271
 80038ac:	410fc270 	.word	0x410fc270
 80038b0:	e000ed08 	.word	0xe000ed08
 80038b4:	080036b1 	.word	0x080036b1
 80038b8:	08003991 	.word	0x08003991
 80038bc:	e000e400 	.word	0xe000e400
 80038c0:	20000240 	.word	0x20000240
 80038c4:	20000244 	.word	0x20000244
 80038c8:	e000ed20 	.word	0xe000ed20
 80038cc:	e000ed1c 	.word	0xe000ed1c
 80038d0:	20000018 	.word	0x20000018
 80038d4:	e000ef34 	.word	0xe000ef34

080038d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
    __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
}
 80038f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <vPortEnterCritical+0x58>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <vPortEnterCritical+0x58>)
 80038fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <vPortEnterCritical+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10f      	bne.n	8003924 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <vPortEnterCritical+0x5c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <vPortEnterCritical+0x4c>
    __asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	603b      	str	r3, [r7, #0]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <vPortEnterCritical+0x4a>
    }
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20000018 	.word	0x20000018
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <vPortExitCritical+0x50>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <vPortExitCritical+0x24>
    __asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	607b      	str	r3, [r7, #4]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vPortExitCritical+0x50>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3b01      	subs	r3, #1
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <vPortExitCritical+0x50>)
 8003964:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <vPortExitCritical+0x50>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <vPortExitCritical+0x42>
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f383 8811 	msr	BASEPRI, r3
}
 8003978:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000018 	.word	0x20000018
 800398c:	00000000 	.word	0x00000000

08003990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003990:	f3ef 8009 	mrs	r0, PSP
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <pxCurrentTCBConst>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f01e 0f10 	tst.w	lr, #16
 80039a0:	bf08      	it	eq
 80039a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039aa:	6010      	str	r0, [r2, #0]
 80039ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039b4:	f380 8811 	msr	BASEPRI, r0
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f7fe fda0 	bl	8002504 <vTaskSwitchContext>
 80039c4:	f04f 0000 	mov.w	r0, #0
 80039c8:	f380 8811 	msr	BASEPRI, r0
 80039cc:	bc09      	pop	{r0, r3}
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	6808      	ldr	r0, [r1, #0]
 80039d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d6:	f01e 0f10 	tst.w	lr, #16
 80039da:	bf08      	it	eq
 80039dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039e0:	f380 8809 	msr	PSP, r0
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w

080039f0 <pxCurrentTCBConst>:
 80039f0:	2000009c 	.word	0x2000009c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop

080039f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
    __asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	607b      	str	r3, [r7, #4]
}
 8003a10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003a12:	f001 fb05 	bl	8005020 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a16:	f7fe fc53 	bl	80022c0 <xTaskIncrementTick>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003a20:	f001 fb5c 	bl	80050dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <SysTick_Handler+0x50>)
 8003a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e001      	b.n	8003a32 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8003a2e:	f001 fb39 	bl	80050a4 <SEGGER_SYSVIEW_RecordExitISR>
 8003a32:	2300      	movs	r3, #0
 8003a34:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f383 8811 	msr	BASEPRI, r3
}
 8003a3c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <vPortSetupTimerInterrupt+0x28>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <vPortSetupTimerInterrupt+0x2c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <vPortSetupTimerInterrupt+0x30>)
 8003a5e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003a62:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <vPortSetupTimerInterrupt+0x28>)
 8003a66:	2207      	movs	r2, #7
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e010 	.word	0xe000e010
 8003a78:	e000e018 	.word	0xe000e018
 8003a7c:	e000e014 	.word	0xe000e014

08003a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a90 <vPortEnableVFP+0x10>
 8003a84:	6801      	ldr	r1, [r0, #0]
 8003a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a8a:	6001      	str	r1, [r0, #0]
 8003a8c:	4770      	bx	lr
 8003a8e:	0000      	.short	0x0000
 8003a90:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003a9e:	f3ef 8305 	mrs	r3, IPSR
 8003aa2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	d914      	bls.n	8003ad4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <vPortValidateInterruptPriority+0x70>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <vPortValidateInterruptPriority+0x74>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	7afa      	ldrb	r2, [r7, #11]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20a      	bcs.n	8003ad4 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <vPortValidateInterruptPriority+0x78>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <vPortValidateInterruptPriority+0x7c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d90a      	bls.n	8003afa <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	603b      	str	r3, [r7, #0]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <vPortValidateInterruptPriority+0x60>
    }
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e3f0 	.word	0xe000e3f0
 8003b0c:	20000240 	.word	0x20000240
 8003b10:	e000ed0c 	.word	0xe000ed0c
 8003b14:	20000244 	.word	0x20000244

08003b18 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	; 0x38
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d022      	beq.n	8003b70 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d81b      	bhi.n	8003b6c <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003b34:	2208      	movs	r2, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d014      	beq.n	8003b70 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	f1c3 0308 	rsb	r3, r3, #8
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	43db      	mvns	r3, r3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d804      	bhi.n	8003b66 <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	4413      	add	r3, r2
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	e004      	b.n	8003b70 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e001      	b.n	8003b70 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003b70:	f7fe fa52 	bl	8002018 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003b74:	4b77      	ldr	r3, [pc, #476]	; (8003d54 <pvPortMalloc+0x23c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003b7c:	f000 f970 	bl	8003e60 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f2c0 80ce 	blt.w	8003d24 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80ca 	beq.w	8003d24 <pvPortMalloc+0x20c>
 8003b90:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <pvPortMalloc+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	f200 80c4 	bhi.w	8003d24 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <pvPortMalloc+0x244>)
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003ba0:	4b6e      	ldr	r3, [pc, #440]	; (8003d5c <pvPortMalloc+0x244>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba8:	4a6d      	ldr	r2, [pc, #436]	; (8003d60 <pvPortMalloc+0x248>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d305      	bcc.n	8003bba <pvPortMalloc+0xa2>
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	4a6c      	ldr	r2, [pc, #432]	; (8003d64 <pvPortMalloc+0x24c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d801      	bhi.n	8003bba <pvPortMalloc+0xa2>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <pvPortMalloc+0xa4>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d127      	bne.n	8003c10 <pvPortMalloc+0xf8>
    __asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	4a5f      	ldr	r2, [pc, #380]	; (8003d60 <pvPortMalloc+0x248>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d305      	bcc.n	8003bf4 <pvPortMalloc+0xdc>
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <pvPortMalloc+0x24c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d801      	bhi.n	8003bf4 <pvPortMalloc+0xdc>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <pvPortMalloc+0xde>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <pvPortMalloc+0xf8>
    __asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	61fb      	str	r3, [r7, #28]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d903      	bls.n	8003c22 <pvPortMalloc+0x10a>
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1d9      	bne.n	8003bd6 <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c22:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <pvPortMalloc+0x23c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d07b      	beq.n	8003d24 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	4413      	add	r3, r2
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	4a49      	ldr	r2, [pc, #292]	; (8003d60 <pvPortMalloc+0x248>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d305      	bcc.n	8003c4a <pvPortMalloc+0x132>
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <pvPortMalloc+0x24c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d801      	bhi.n	8003c4a <pvPortMalloc+0x132>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <pvPortMalloc+0x134>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <pvPortMalloc+0x14e>
    __asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61bb      	str	r3, [r7, #24]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d90a      	bls.n	8003c8e <pvPortMalloc+0x176>
    __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	617b      	str	r3, [r7, #20]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	2308      	movs	r3, #8
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d923      	bls.n	8003ce6 <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <pvPortMalloc+0x1ae>
    __asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	613b      	str	r3, [r7, #16]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad2      	subs	r2, r2, r3
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <pvPortMalloc+0x240>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <pvPortMalloc+0x240>)
 8003cf2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <pvPortMalloc+0x240>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <pvPortMalloc+0x250>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d203      	bcs.n	8003d08 <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <pvPortMalloc+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <pvPortMalloc+0x250>)
 8003d06:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <pvPortMalloc+0x254>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <pvPortMalloc+0x254>)
 8003d22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d24:	f7fe f986 	bl	8002034 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <pvPortMalloc+0x230>
    __asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60fb      	str	r3, [r7, #12]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <pvPortMalloc+0x22e>
    return pvReturn;
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3738      	adds	r7, #56	; 0x38
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20012e50 	.word	0x20012e50
 8003d58:	20012e54 	.word	0x20012e54
 8003d5c:	20012e48 	.word	0x20012e48
 8003d60:	20000248 	.word	0x20000248
 8003d64:	20012e47 	.word	0x20012e47
 8003d68:	20012e58 	.word	0x20012e58
 8003d6c:	20012e5c 	.word	0x20012e5c

08003d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d061      	beq.n	8003e46 <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d82:	2308      	movs	r3, #8
 8003d84:	425b      	negs	r3, r3
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <vPortFree+0xe0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d305      	bcc.n	8003da4 <vPortFree+0x34>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4a2e      	ldr	r2, [pc, #184]	; (8003e54 <vPortFree+0xe4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d801      	bhi.n	8003da4 <vPortFree+0x34>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <vPortFree+0x36>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <vPortFree+0x50>
    __asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	617b      	str	r3, [r7, #20]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <vPortFree+0x6e>
    __asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <vPortFree+0x8c>
    __asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60fb      	str	r3, [r7, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0fdb      	lsrs	r3, r3, #31
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01c      	beq.n	8003e46 <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d118      	bne.n	8003e46 <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003e20:	f7fe f8fa 	bl	8002018 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <vPortFree+0xe8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <vPortFree+0xe8>)
 8003e30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e32:	69b8      	ldr	r0, [r7, #24]
 8003e34:	f000 f86e 	bl	8003f14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <vPortFree+0xec>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <vPortFree+0xec>)
 8003e40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003e42:	f7fe f8f7 	bl	8002034 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003e46:	bf00      	nop
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000248 	.word	0x20000248
 8003e54:	20012e47 	.word	0x20012e47
 8003e58:	20012e54 	.word	0x20012e54
 8003e5c:	20012e60 	.word	0x20012e60

08003e60 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <prvHeapInit+0xa0>)
 8003e6e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0307 	bic.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <prvHeapInit+0xa0>)
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <prvHeapInit+0xa4>)
 8003e98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <prvHeapInit+0xa4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f023 0307 	bic.w	r3, r3, #7
 8003eb6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <prvHeapInit+0xa8>)
 8003ebc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <prvHeapInit+0xa8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <prvHeapInit+0xa8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	1ad2      	subs	r2, r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvHeapInit+0xa8>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <prvHeapInit+0xac>)
 8003eea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <prvHeapInit+0xb0>)
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	20000248 	.word	0x20000248
 8003f04:	20012e48 	.word	0x20012e48
 8003f08:	20012e50 	.word	0x20012e50
 8003f0c:	20012e58 	.word	0x20012e58
 8003f10:	20012e54 	.word	0x20012e54

08003f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <prvInsertBlockIntoFreeList+0xe4>)
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e002      	b.n	8003f28 <prvInsertBlockIntoFreeList+0x14>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d8f7      	bhi.n	8003f22 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	4a30      	ldr	r2, [pc, #192]	; (8003ff8 <prvInsertBlockIntoFreeList+0xe4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <prvInsertBlockIntoFreeList+0xe8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d305      	bcc.n	8003f4e <prvInsertBlockIntoFreeList+0x3a>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <prvInsertBlockIntoFreeList+0xec>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d801      	bhi.n	8003f4e <prvInsertBlockIntoFreeList+0x3a>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <prvInsertBlockIntoFreeList+0x3c>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d108      	bne.n	8003f8e <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	441a      	add	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	441a      	add	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d118      	bne.n	8003fd4 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b17      	ldr	r3, [pc, #92]	; (8004004 <prvInsertBlockIntoFreeList+0xf0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d00d      	beq.n	8003fca <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e008      	b.n	8003fdc <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <prvInsertBlockIntoFreeList+0xf0>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e003      	b.n	8003fdc <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d002      	beq.n	8003fea <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20012e48 	.word	0x20012e48
 8003ffc:	20000248 	.word	0x20000248
 8004000:	20012e47 	.word	0x20012e47
 8004004:	20012e50 	.word	0x20012e50

08004008 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <_DoInit+0xa0>)
 8004010:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004012:	22a8      	movs	r2, #168	; 0xa8
 8004014:	2100      	movs	r1, #0
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f001 fd7a 	bl	8005b10 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2203      	movs	r2, #3
 8004020:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2203      	movs	r2, #3
 8004026:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4a20      	ldr	r2, [pc, #128]	; (80040ac <_DoInit+0xa4>)
 800402c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <_DoInit+0xa8>)
 8004032:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2200      	movs	r2, #0
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <_DoInit+0xa4>)
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <_DoInit+0xac>)
 8004058:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2210      	movs	r2, #16
 800405e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004072:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	e00c      	b.n	8004096 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1c3 030f 	rsb	r3, r3, #15
 8004082:	4a0d      	ldr	r2, [pc, #52]	; (80040b8 <_DoInit+0xb0>)
 8004084:	5cd1      	ldrb	r1, [r2, r3]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	460a      	mov	r2, r1
 800408e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3301      	adds	r3, #1
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d9ef      	bls.n	800407c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800409c:	f3bf 8f5f 	dmb	sy
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20012e64 	.word	0x20012e64
 80040ac:	08005b84 	.word	0x08005b84
 80040b0:	20012f0c 	.word	0x20012f0c
 80040b4:	2001330c 	.word	0x2001330c
 80040b8:	08005c3c 	.word	0x08005c3c

080040bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	; 0x30
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80040c8:	4b3e      	ldr	r3, [pc, #248]	; (80041c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b53      	cmp	r3, #83	; 0x53
 80040d4:	d001      	beq.n	80040da <SEGGER_RTT_ReadNoLock+0x1e>
 80040d6:	f7ff ff97 	bl	8004008 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	3360      	adds	r3, #96	; 0x60
 80040e6:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040e8:	4413      	add	r3, r2
 80040ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040fc:	2300      	movs	r3, #0
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d92b      	bls.n	8004160 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4293      	cmp	r3, r2
 8004118:	bf28      	it	cs
 800411a:	4613      	movcs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	4413      	add	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	6939      	ldr	r1, [r7, #16]
 800412c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412e:	f001 fce1 	bl	8005af4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800414a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4413      	add	r3, r2
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004158:	429a      	cmp	r2, r3
 800415a:	d101      	bne.n	8004160 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800415c:	2300      	movs	r3, #0
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4293      	cmp	r3, r2
 800416e:	bf28      	it	cs
 8004170:	4613      	movcs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d019      	beq.n	80041ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	4413      	add	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	6939      	ldr	r1, [r7, #16]
 8004188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418a:	f001 fcb3 	bl	8005af4 <memcpy>
    NumBytesRead += NumBytesRem;
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4413      	add	r3, r2
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3730      	adds	r7, #48	; 0x30
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20012e64 	.word	0x20012e64

080041c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b53      	cmp	r3, #83	; 0x53
 80041e2:	d001      	beq.n	80041e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80041e4:	f7ff ff10 	bl	8004008 <_DoInit>
  SEGGER_RTT_LOCK();
 80041e8:	f3ef 8311 	mrs	r3, BASEPRI
 80041ec:	f04f 0120 	mov.w	r1, #32
 80041f0:	f381 8811 	msr	BASEPRI, r1
 80041f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041f6:	4b35      	ldr	r3, [pc, #212]	; (80042cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	440b      	add	r3, r1
 800420e:	3304      	adds	r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	429a      	cmp	r2, r3
 8004224:	dbeb      	blt.n	80041fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8004226:	e000      	b.n	800422a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004228:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	da3f      	bge.n	80042b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004234:	6939      	ldr	r1, [r7, #16]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	440b      	add	r3, r1
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	3304      	adds	r3, #4
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800425e:	6939      	ldr	r1, [r7, #16]
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	3320      	adds	r3, #32
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004286:	6939      	ldr	r1, [r7, #16]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	332c      	adds	r3, #44	; 0x2c
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042ae:	f3bf 8f5f 	dmb	sy
 80042b2:	e002      	b.n	80042ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80042c0:	69fb      	ldr	r3, [r7, #28]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20012e64 	.word	0x20012e64

080042d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b53      	cmp	r3, #83	; 0x53
 80042ea:	d001      	beq.n	80042f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80042ec:	f7ff fe8c 	bl	8004008 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80042f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d82c      	bhi.n	8004354 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80042fa:	f3ef 8311 	mrs	r3, BASEPRI
 80042fe:	f04f 0120 	mov.w	r1, #32
 8004302:	f381 8811 	msr	BASEPRI, r1
 8004306:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	3360      	adds	r3, #96	; 0x60
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004344:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e002      	b.n	800435a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	; 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20012e64 	.word	0x20012e64

08004368 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	60fa      	str	r2, [r7, #12]
 800437e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d90a      	bls.n	800439c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800438a:	e007      	b.n	800439c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	1c53      	adds	r3, r2, #1
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	60f9      	str	r1, [r7, #12]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <_EncodeStr+0x46>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1ee      	bne.n	800438c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3307      	adds	r3, #7
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043e6:	4b35      	ldr	r3, [pc, #212]	; (80044bc <_HandleIncomingPacket+0xdc>)
 80043e8:	7e1b      	ldrb	r3, [r3, #24]
 80043ea:	4618      	mov	r0, r3
 80043ec:	1cfb      	adds	r3, r7, #3
 80043ee:	2201      	movs	r2, #1
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7ff fe63 	bl	80040bc <SEGGER_RTT_ReadNoLock>
 80043f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d052      	beq.n	80044a4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d031      	beq.n	8004468 <_HandleIncomingPacket+0x88>
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	dc40      	bgt.n	800448a <_HandleIncomingPacket+0xaa>
 8004408:	2b07      	cmp	r3, #7
 800440a:	dc15      	bgt.n	8004438 <_HandleIncomingPacket+0x58>
 800440c:	2b00      	cmp	r3, #0
 800440e:	dd3c      	ble.n	800448a <_HandleIncomingPacket+0xaa>
 8004410:	3b01      	subs	r3, #1
 8004412:	2b06      	cmp	r3, #6
 8004414:	d839      	bhi.n	800448a <_HandleIncomingPacket+0xaa>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <_HandleIncomingPacket+0x3c>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800443f 	.word	0x0800443f
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444b 	.word	0x0800444b
 8004428:	08004451 	.word	0x08004451
 800442c:	08004457 	.word	0x08004457
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004463 	.word	0x08004463
 8004438:	2b7f      	cmp	r3, #127	; 0x7f
 800443a:	d035      	beq.n	80044a8 <_HandleIncomingPacket+0xc8>
 800443c:	e025      	b.n	800448a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800443e:	f000 fb27 	bl	8004a90 <SEGGER_SYSVIEW_Start>
      break;
 8004442:	e036      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004444:	f000 fbde 	bl	8004c04 <SEGGER_SYSVIEW_Stop>
      break;
 8004448:	e033      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800444a:	f000 fdb7 	bl	8004fbc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800444e:	e030      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004450:	f000 fd7c 	bl	8004f4c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004454:	e02d      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004456:	f000 fbfb 	bl	8004c50 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800445a:	e02a      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800445c:	f001 f8e8 	bl	8005630 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004460:	e027      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004462:	f001 f8c7 	bl	80055f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004466:	e024      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <_HandleIncomingPacket+0xdc>)
 800446a:	7e1b      	ldrb	r3, [r3, #24]
 800446c:	4618      	mov	r0, r3
 800446e:	1cfb      	adds	r3, r7, #3
 8004470:	2201      	movs	r2, #1
 8004472:	4619      	mov	r1, r3
 8004474:	f7ff fe22 	bl	80040bc <SEGGER_RTT_ReadNoLock>
 8004478:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d015      	beq.n	80044ac <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f82c 	bl	80054e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004488:	e010      	b.n	80044ac <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	b25b      	sxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	da0e      	bge.n	80044b0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <_HandleIncomingPacket+0xdc>)
 8004494:	7e1b      	ldrb	r3, [r3, #24]
 8004496:	4618      	mov	r0, r3
 8004498:	1cfb      	adds	r3, r7, #3
 800449a:	2201      	movs	r2, #1
 800449c:	4619      	mov	r1, r3
 800449e:	f7ff fe0d 	bl	80040bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044a2:	e005      	b.n	80044b0 <_HandleIncomingPacket+0xd0>
    }
  }
 80044a4:	bf00      	nop
 80044a6:	e004      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
      break;
 80044a8:	bf00      	nop
 80044aa:	e002      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
      break;
 80044ac:	bf00      	nop
 80044ae:	e000      	b.n	80044b2 <_HandleIncomingPacket+0xd2>
      break;
 80044b0:	bf00      	nop
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20013724 	.word	0x20013724

080044c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044c6:	2301      	movs	r3, #1
 80044c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <_TrySendOverflowPacket+0xdc>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044da:	e00b      	b.n	80044f4 <_TrySendOverflowPacket+0x34>
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	2b7f      	cmp	r3, #127	; 0x7f
 80044f8:	d8f0      	bhi.n	80044dc <_TrySendOverflowPacket+0x1c>
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <_TrySendOverflowPacket+0xe0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <_TrySendOverflowPacket+0xdc>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e00b      	b.n	800453c <_TrySendOverflowPacket+0x7c>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6279      	str	r1, [r7, #36]	; 0x24
 800452e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	09db      	lsrs	r3, r3, #7
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b7f      	cmp	r3, #127	; 0x7f
 8004540:	d8f0      	bhi.n	8004524 <_TrySendOverflowPacket+0x64>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	627a      	str	r2, [r7, #36]	; 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <_TrySendOverflowPacket+0xdc>)
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	4618      	mov	r0, r3
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	461a      	mov	r2, r3
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	4619      	mov	r1, r3
 8004564:	f7fb fe44 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004568:	4603      	mov	r3, r0
 800456a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <_TrySendOverflowPacket+0xdc>)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <_TrySendOverflowPacket+0xdc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	3b01      	subs	r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <_TrySendOverflowPacket+0xdc>)
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e004      	b.n	8004590 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <_TrySendOverflowPacket+0xdc>)
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	3301      	adds	r3, #1
 800458c:	4a03      	ldr	r2, [pc, #12]	; (800459c <_TrySendOverflowPacket+0xdc>)
 800458e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004590:	693b      	ldr	r3, [r7, #16]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3730      	adds	r7, #48	; 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20013724 	.word	0x20013724
 80045a0:	e0001004 	.word	0xe0001004

080045a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045b0:	4b98      	ldr	r3, [pc, #608]	; (8004814 <_SendPacket+0x270>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d010      	beq.n	80045da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045b8:	4b96      	ldr	r3, [pc, #600]	; (8004814 <_SendPacket+0x270>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 812d 	beq.w	800481c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045c2:	4b94      	ldr	r3, [pc, #592]	; (8004814 <_SendPacket+0x270>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d109      	bne.n	80045de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045ca:	f7ff ff79 	bl	80044c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80045ce:	4b91      	ldr	r3, [pc, #580]	; (8004814 <_SendPacket+0x270>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 8124 	bne.w	8004820 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80045d8:	e001      	b.n	80045de <_SendPacket+0x3a>
    goto Send;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <_SendPacket+0x3c>
Send:
 80045de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b1f      	cmp	r3, #31
 80045e4:	d809      	bhi.n	80045fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80045e6:	4b8b      	ldr	r3, [pc, #556]	; (8004814 <_SendPacket+0x270>)
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8115 	bne.w	8004824 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b17      	cmp	r3, #23
 80045fe:	d807      	bhi.n	8004610 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b01      	subs	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e0c4      	b.n	800479a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b7f      	cmp	r3, #127	; 0x7f
 800461c:	d912      	bls.n	8004644 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	09da      	lsrs	r2, r3, #7
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b01      	subs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	3a01      	subs	r2, #1
 8004636:	60fa      	str	r2, [r7, #12]
 8004638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e006      	b.n	8004652 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b7e      	cmp	r3, #126	; 0x7e
 8004656:	d807      	bhi.n	8004668 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e098      	b.n	800479a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800466e:	d212      	bcs.n	8004696 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	09da      	lsrs	r2, r3, #7
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	3a01      	subs	r2, #1
 8004688:	60fa      	str	r2, [r7, #12]
 800468a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e081      	b.n	800479a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469c:	d21d      	bcs.n	80046da <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0b9a      	lsrs	r2, r3, #14
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	09db      	lsrs	r3, r3, #7
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	3a01      	subs	r2, #1
 80046b8:	60fa      	str	r2, [r7, #12]
 80046ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	3a01      	subs	r2, #1
 80046cc:	60fa      	str	r2, [r7, #12]
 80046ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e05f      	b.n	800479a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046e0:	d228      	bcs.n	8004734 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0d5a      	lsrs	r2, r3, #21
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0b9b      	lsrs	r3, r3, #14
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	3a01      	subs	r2, #1
 80046fc:	60fa      	str	r2, [r7, #12]
 80046fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	09db      	lsrs	r3, r3, #7
 800470c:	b2db      	uxtb	r3, r3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	3a01      	subs	r2, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	3a01      	subs	r2, #1
 8004726:	60fa      	str	r2, [r7, #12]
 8004728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e032      	b.n	800479a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0f1a      	lsrs	r2, r3, #28
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0d5b      	lsrs	r3, r3, #21
 8004748:	b2db      	uxtb	r3, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	3a01      	subs	r2, #1
 800474e:	60fa      	str	r2, [r7, #12]
 8004750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0b9b      	lsrs	r3, r3, #14
 800475e:	b2db      	uxtb	r3, r3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	3a01      	subs	r2, #1
 8004764:	60fa      	str	r2, [r7, #12]
 8004766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	09db      	lsrs	r3, r3, #7
 8004774:	b2db      	uxtb	r3, r3
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	3a01      	subs	r2, #1
 800477a:	60fa      	str	r2, [r7, #12]
 800477c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	3a01      	subs	r2, #1
 800478e:	60fa      	str	r2, [r7, #12]
 8004790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <_SendPacket+0x274>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <_SendPacket+0x270>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	e00b      	b.n	80047cc <_SendPacket+0x228>
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	6279      	str	r1, [r7, #36]	; 0x24
 80047be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	09db      	lsrs	r3, r3, #7
 80047ca:	623b      	str	r3, [r7, #32]
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2b7f      	cmp	r3, #127	; 0x7f
 80047d0:	d8f0      	bhi.n	80047b4 <_SendPacket+0x210>
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	627a      	str	r2, [r7, #36]	; 0x24
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <_SendPacket+0x270>)
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	4618      	mov	r0, r3
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	f7fb fcfd 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047f6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <_SendPacket+0x270>)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	60d3      	str	r3, [r2, #12]
 8004804:	e00f      	b.n	8004826 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004806:	4b03      	ldr	r3, [pc, #12]	; (8004814 <_SendPacket+0x270>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	b2da      	uxtb	r2, r3
 800480e:	4b01      	ldr	r3, [pc, #4]	; (8004814 <_SendPacket+0x270>)
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e008      	b.n	8004826 <_SendPacket+0x282>
 8004814:	20013724 	.word	0x20013724
 8004818:	e0001004 	.word	0xe0001004
    goto SendDone;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <_SendPacket+0x282>
      goto SendDone;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <_SendPacket+0x282>
      goto SendDone;
 8004824:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <_SendPacket+0x2d4>)
 8004828:	7e1b      	ldrb	r3, [r3, #24]
 800482a:	4619      	mov	r1, r3
 800482c:	4a13      	ldr	r2, [pc, #76]	; (800487c <_SendPacket+0x2d8>)
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4413      	add	r3, r2
 8004838:	336c      	adds	r3, #108	; 0x6c
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <_SendPacket+0x2d4>)
 800483e:	7e1b      	ldrb	r3, [r3, #24]
 8004840:	4618      	mov	r0, r3
 8004842:	490e      	ldr	r1, [pc, #56]	; (800487c <_SendPacket+0x2d8>)
 8004844:	4603      	mov	r3, r0
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4403      	add	r3, r0
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	3370      	adds	r3, #112	; 0x70
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d00b      	beq.n	800486e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <_SendPacket+0x2d4>)
 8004858:	789b      	ldrb	r3, [r3, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <_SendPacket+0x2d4>)
 8004860:	2201      	movs	r2, #1
 8004862:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004864:	f7ff fdbc 	bl	80043e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <_SendPacket+0x2d4>)
 800486a:	2200      	movs	r2, #0
 800486c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800486e:	bf00      	nop
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20013724 	.word	0x20013724
 800487c:	20012e64 	.word	0x20012e64

08004880 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800488e:	2300      	movs	r3, #0
 8004890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004894:	4917      	ldr	r1, [pc, #92]	; (80048f4 <SEGGER_SYSVIEW_Init+0x74>)
 8004896:	4818      	ldr	r0, [pc, #96]	; (80048f8 <SEGGER_SYSVIEW_Init+0x78>)
 8004898:	f7ff fc96 	bl	80041c8 <SEGGER_RTT_AllocUpBuffer>
 800489c:	4603      	mov	r3, r0
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048a6:	785a      	ldrb	r2, [r3, #1]
 80048a8:	4b14      	ldr	r3, [pc, #80]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048ae:	7e1b      	ldrb	r3, [r3, #24]
 80048b0:	4618      	mov	r0, r3
 80048b2:	2300      	movs	r3, #0
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	2308      	movs	r3, #8
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <SEGGER_SYSVIEW_Init+0x80>)
 80048ba:	490f      	ldr	r1, [pc, #60]	; (80048f8 <SEGGER_SYSVIEW_Init+0x78>)
 80048bc:	f7ff fd08 	bl	80042d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80048c0:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <SEGGER_SYSVIEW_Init+0x84>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a0c      	ldr	r2, [pc, #48]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80048ce:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80048d4:	4a09      	ldr	r2, [pc, #36]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <SEGGER_SYSVIEW_Init+0x7c>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	2001331c 	.word	0x2001331c
 80048f8:	08005b98 	.word	0x08005b98
 80048fc:	20013724 	.word	0x20013724
 8004900:	2001371c 	.word	0x2001371c
 8004904:	e0001004 	.word	0xe0001004

08004908 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6113      	str	r3, [r2, #16]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20013724 	.word	0x20013724

08004928 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004930:	f3ef 8311 	mrs	r3, BASEPRI
 8004934:	f04f 0120 	mov.w	r1, #32
 8004938:	f381 8811 	msr	BASEPRI, r1
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4808      	ldr	r0, [pc, #32]	; (8004960 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004940:	f7ff fd42 	bl	80043c8 <_PreparePacket>
 8004944:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f7ff fe2a 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f383 8811 	msr	BASEPRI, r3
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20013754 	.word	0x20013754

08004964 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800496e:	f3ef 8311 	mrs	r3, BASEPRI
 8004972:	f04f 0120 	mov.w	r1, #32
 8004976:	f381 8811 	msr	BASEPRI, r1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	4816      	ldr	r0, [pc, #88]	; (80049d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800497e:	f7ff fd23 	bl	80043c8 <_PreparePacket>
 8004982:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e00b      	b.n	80049aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	1c59      	adds	r1, r3, #1
 800499a:	61f9      	str	r1, [r7, #28]
 800499c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	09db      	lsrs	r3, r3, #7
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b7f      	cmp	r3, #127	; 0x7f
 80049ae:	d8f0      	bhi.n	8004992 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	61fa      	str	r2, [r7, #28]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	6938      	ldr	r0, [r7, #16]
 80049c6:	f7ff fded 	bl	80045a4 <_SendPacket>
  RECORD_END();
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f383 8811 	msr	BASEPRI, r3
}
 80049d0:	bf00      	nop
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20013754 	.word	0x20013754

080049dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	f04f 0120 	mov.w	r1, #32
 80049f0:	f381 8811 	msr	BASEPRI, r1
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	4825      	ldr	r0, [pc, #148]	; (8004a8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80049f8:	f7ff fce6 	bl	80043c8 <_PreparePacket>
 80049fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	e00b      	b.n	8004a5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	09db      	lsrs	r3, r3, #7
 8004a5a:	623b      	str	r3, [r7, #32]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a60:	d8f0      	bhi.n	8004a44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	627a      	str	r2, [r7, #36]	; 0x24
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6979      	ldr	r1, [r7, #20]
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f7ff fd94 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f383 8811 	msr	BASEPRI, r3
}
 8004a82:	bf00      	nop
 8004a84:	3730      	adds	r7, #48	; 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20013754 	.word	0x20013754

08004a90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a96:	4b58      	ldr	r3, [pc, #352]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	f04f 0120 	mov.w	r1, #32
 8004aa4:	f381 8811 	msr	BASEPRI, r1
 8004aa8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004aaa:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	220a      	movs	r2, #10
 8004ab0:	4952      	ldr	r1, [pc, #328]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fb9c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004abe:	200a      	movs	r0, #10
 8004ac0:	f7ff ff32 	bl	8004928 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac8:	f04f 0120 	mov.w	r1, #32
 8004acc:	f381 8811 	msr	BASEPRI, r1
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	484b      	ldr	r0, [pc, #300]	; (8004c00 <SEGGER_SYSVIEW_Start+0x170>)
 8004ad4:	f7ff fc78 	bl	80043c8 <_PreparePacket>
 8004ad8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae2:	4b45      	ldr	r3, [pc, #276]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae8:	e00b      	b.n	8004b02 <SEGGER_SYSVIEW_Start+0x72>
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	09db      	lsrs	r3, r3, #7
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b7f      	cmp	r3, #127	; 0x7f
 8004b06:	d8f0      	bhi.n	8004aea <SEGGER_SYSVIEW_Start+0x5a>
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	e00b      	b.n	8004b3c <SEGGER_SYSVIEW_Start+0xac>
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	09db      	lsrs	r3, r3, #7
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b40:	d8f0      	bhi.n	8004b24 <SEGGER_SYSVIEW_Start+0x94>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	627a      	str	r2, [r7, #36]	; 0x24
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e00b      	b.n	8004b76 <SEGGER_SYSVIEW_Start+0xe6>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	61f9      	str	r1, [r7, #28]
 8004b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7a:	d8f0      	bhi.n	8004b5e <SEGGER_SYSVIEW_Start+0xce>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e00b      	b.n	8004bae <SEGGER_SYSVIEW_Start+0x11e>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	6179      	str	r1, [r7, #20]
 8004ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <SEGGER_SYSVIEW_Start+0x106>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	617a      	str	r2, [r7, #20]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bc4:	2218      	movs	r2, #24
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fceb 	bl	80045a4 <_SendPacket>
      RECORD_END();
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <SEGGER_SYSVIEW_Start+0x168>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004be2:	f000 f9eb 	bl	8004fbc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004be6:	f000 f9b1 	bl	8004f4c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bea:	f000 fd21 	bl	8005630 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bee:	bf00      	nop
 8004bf0:	3730      	adds	r7, #48	; 0x30
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20013724 	.word	0x20013724
 8004bfc:	08005c50 	.word	0x08005c50
 8004c00:	20013754 	.word	0x20013754

08004c04 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0e:	f04f 0120 	mov.w	r1, #32
 8004c12:	f381 8811 	msr	BASEPRI, r1
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	480b      	ldr	r0, [pc, #44]	; (8004c48 <SEGGER_SYSVIEW_Stop+0x44>)
 8004c1a:	f7ff fbd5 	bl	80043c8 <_PreparePacket>
 8004c1e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <SEGGER_SYSVIEW_Stop+0x48>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c28:	220b      	movs	r2, #11
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6838      	ldr	r0, [r7, #0]
 8004c2e:	f7ff fcb9 	bl	80045a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <SEGGER_SYSVIEW_Stop+0x48>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20013754 	.word	0x20013754
 8004c4c:	20013724 	.word	0x20013724

08004c50 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	; 0x30
 8004c54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c56:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5a:	f04f 0120 	mov.w	r1, #32
 8004c5e:	f381 8811 	msr	BASEPRI, r1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	4845      	ldr	r0, [pc, #276]	; (8004d7c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c66:	f7ff fbaf 	bl	80043c8 <_PreparePacket>
 8004c6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c74:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7a:	e00b      	b.n	8004c94 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	09db      	lsrs	r3, r3, #7
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2b7f      	cmp	r3, #127	; 0x7f
 8004c98:	d8f0      	bhi.n	8004c7c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	e00b      	b.n	8004cce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1c59      	adds	r1, r3, #1
 8004cbe:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	09db      	lsrs	r3, r3, #7
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd2:	d8f0      	bhi.n	8004cb6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004cda:	6a3a      	ldr	r2, [r7, #32]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e00b      	b.n	8004d08 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	61f9      	str	r1, [r7, #28]
 8004cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	09db      	lsrs	r3, r3, #7
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	d8f0      	bhi.n	8004cf0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	61fa      	str	r2, [r7, #28]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e00b      	b.n	8004d40 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	6179      	str	r1, [r7, #20]
 8004d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	09db      	lsrs	r3, r3, #7
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b7f      	cmp	r3, #127	; 0x7f
 8004d44:	d8f0      	bhi.n	8004d28 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	617a      	str	r2, [r7, #20]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d56:	2218      	movs	r2, #24
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f7ff fc22 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	4798      	blx	r3
  }
}
 8004d74:	bf00      	nop
 8004d76:	3730      	adds	r7, #48	; 0x30
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20013754 	.word	0x20013754
 8004d80:	20013724 	.word	0x20013724

08004d84 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b092      	sub	sp, #72	; 0x48
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d90:	f04f 0120 	mov.w	r1, #32
 8004d94:	f381 8811 	msr	BASEPRI, r1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	486a      	ldr	r0, [pc, #424]	; (8004f44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004d9c:	f7ff fb14 	bl	80043c8 <_PreparePacket>
 8004da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b66      	ldr	r3, [pc, #408]	; (8004f48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
 8004db6:	e00b      	b.n	8004dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	6479      	str	r1, [r7, #68]	; 0x44
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	647a      	str	r2, [r7, #68]	; 0x44
 8004ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df0:	e00b      	b.n	8004e0a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0e:	d8f0      	bhi.n	8004df2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	4619      	mov	r1, r3
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fa9d 	bl	8004368 <_EncodeStr>
 8004e2e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e30:	2209      	movs	r2, #9
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6938      	ldr	r0, [r7, #16]
 8004e36:	f7ff fbb5 	bl	80045a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e4e:	e00b      	b.n	8004e68 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	6379      	str	r1, [r7, #52]	; 0x34
 8004e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	09db      	lsrs	r3, r3, #7
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6c:	d8f0      	bhi.n	8004e50 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	637a      	str	r2, [r7, #52]	; 0x34
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e88:	e00b      	b.n	8004ea2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	1c59      	adds	r1, r3, #1
 8004e92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	09db      	lsrs	r3, r3, #7
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea6:	d8f0      	bhi.n	8004e8a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	e00b      	b.n	8004edc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	6279      	str	r1, [r7, #36]	; 0x24
 8004ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	09db      	lsrs	r3, r3, #7
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee0:	d8f0      	bhi.n	8004ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e00b      	b.n	8004f14 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	1c59      	adds	r1, r3, #1
 8004f04:	61f9      	str	r1, [r7, #28]
 8004f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	09db      	lsrs	r3, r3, #7
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b7f      	cmp	r3, #127	; 0x7f
 8004f18:	d8f0      	bhi.n	8004efc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f2a:	2215      	movs	r2, #21
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	6938      	ldr	r0, [r7, #16]
 8004f30:	f7ff fb38 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f383 8811 	msr	BASEPRI, r3
}
 8004f3a:	bf00      	nop
 8004f3c:	3748      	adds	r7, #72	; 0x48
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20013754 	.word	0x20013754
 8004f48:	20013724 	.word	0x20013724

08004f4c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f62:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4798      	blx	r3
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20013724 	.word	0x20013724

08004f74 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f04f 0120 	mov.w	r1, #32
 8004f84:	f381 8811 	msr	BASEPRI, r1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	480b      	ldr	r0, [pc, #44]	; (8004fb8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004f8c:	f7ff fa1c 	bl	80043c8 <_PreparePacket>
 8004f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f7ff f9e6 	bl	8004368 <_EncodeStr>
 8004f9c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004f9e:	220e      	movs	r2, #14
 8004fa0:	68f9      	ldr	r1, [r7, #12]
 8004fa2:	6938      	ldr	r0, [r7, #16]
 8004fa4:	f7ff fafe 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20013754 	.word	0x20013754

08004fbc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01a      	beq.n	8005000 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4798      	blx	r3
 8004fdc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fe0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	000a      	movs	r2, r1
 8004ff0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	200d      	movs	r0, #13
 8004ffa:	f7ff fcef 	bl	80049dc <SEGGER_SYSVIEW_RecordU32x2>
 8004ffe:	e006      	b.n	800500e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	200c      	movs	r0, #12
 8005008:	f7ff fcac 	bl	8004964 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	20013724 	.word	0x20013724
 800501c:	e0001004 	.word	0xe0001004

08005020 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005026:	f3ef 8311 	mrs	r3, BASEPRI
 800502a:	f04f 0120 	mov.w	r1, #32
 800502e:	f381 8811 	msr	BASEPRI, r1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4819      	ldr	r0, [pc, #100]	; (800509c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005036:	f7ff f9c7 	bl	80043c8 <_PreparePacket>
 800503a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005048:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e00b      	b.n	800506c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	6179      	str	r1, [r7, #20]
 800505e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	09db      	lsrs	r3, r3, #7
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b7f      	cmp	r3, #127	; 0x7f
 8005070:	d8f0      	bhi.n	8005054 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	617a      	str	r2, [r7, #20]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005082:	2202      	movs	r2, #2
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	68b8      	ldr	r0, [r7, #8]
 8005088:	f7ff fa8c 	bl	80045a4 <_SendPacket>
  RECORD_END();
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f383 8811 	msr	BASEPRI, r3
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20013754 	.word	0x20013754
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050aa:	f3ef 8311 	mrs	r3, BASEPRI
 80050ae:	f04f 0120 	mov.w	r1, #32
 80050b2:	f381 8811 	msr	BASEPRI, r1
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	4807      	ldr	r0, [pc, #28]	; (80050d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80050ba:	f7ff f985 	bl	80043c8 <_PreparePacket>
 80050be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80050c0:	2203      	movs	r2, #3
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6838      	ldr	r0, [r7, #0]
 80050c6:	f7ff fa6d 	bl	80045a4 <_SendPacket>
  RECORD_END();
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f383 8811 	msr	BASEPRI, r3
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20013754 	.word	0x20013754

080050dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	f04f 0120 	mov.w	r1, #32
 80050ea:	f381 8811 	msr	BASEPRI, r1
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	4807      	ldr	r0, [pc, #28]	; (8005110 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80050f2:	f7ff f969 	bl	80043c8 <_PreparePacket>
 80050f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80050f8:	2212      	movs	r2, #18
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f7ff fa51 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f383 8811 	msr	BASEPRI, r3
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20013754 	.word	0x20013754

08005114 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800511c:	f3ef 8311 	mrs	r3, BASEPRI
 8005120:	f04f 0120 	mov.w	r1, #32
 8005124:	f381 8811 	msr	BASEPRI, r1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	4817      	ldr	r0, [pc, #92]	; (8005188 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800512c:	f7ff f94c 	bl	80043c8 <_PreparePacket>
 8005130:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e00b      	b.n	8005158 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	61f9      	str	r1, [r7, #28]
 800514a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	09db      	lsrs	r3, r3, #7
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b7f      	cmp	r3, #127	; 0x7f
 800515c:	d8f0      	bhi.n	8005140 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	61fa      	str	r2, [r7, #28]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800516e:	221c      	movs	r2, #28
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f7ff fa16 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20013754 	.word	0x20013754

0800518c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005196:	f3ef 8311 	mrs	r3, BASEPRI
 800519a:	f04f 0120 	mov.w	r1, #32
 800519e:	f381 8811 	msr	BASEPRI, r1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	4824      	ldr	r0, [pc, #144]	; (8005238 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80051a6:	f7ff f90f 	bl	80043c8 <_PreparePacket>
 80051aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	e00b      	b.n	80051d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	6279      	str	r1, [r7, #36]	; 0x24
 80051c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2b7f      	cmp	r3, #127	; 0x7f
 80051d6:	d8f0      	bhi.n	80051ba <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	627a      	str	r2, [r7, #36]	; 0x24
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e00b      	b.n	800520a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1c59      	adds	r1, r3, #1
 80051fa:	61f9      	str	r1, [r7, #28]
 80051fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b7f      	cmp	r3, #127	; 0x7f
 800520e:	d8f0      	bhi.n	80051f2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005220:	221c      	movs	r2, #28
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6938      	ldr	r0, [r7, #16]
 8005226:	f7ff f9bd 	bl	80045a4 <_SendPacket>
  RECORD_END();
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f383 8811 	msr	BASEPRI, r3
}
 8005230:	bf00      	nop
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20013754 	.word	0x20013754

0800523c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005242:	f3ef 8311 	mrs	r3, BASEPRI
 8005246:	f04f 0120 	mov.w	r1, #32
 800524a:	f381 8811 	msr	BASEPRI, r1
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	4807      	ldr	r0, [pc, #28]	; (8005270 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005252:	f7ff f8b9 	bl	80043c8 <_PreparePacket>
 8005256:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005258:	2211      	movs	r2, #17
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	f7ff f9a1 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f383 8811 	msr	BASEPRI, r3
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20013754 	.word	0x20013754

08005274 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800527c:	f3ef 8311 	mrs	r3, BASEPRI
 8005280:	f04f 0120 	mov.w	r1, #32
 8005284:	f381 8811 	msr	BASEPRI, r1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	4819      	ldr	r0, [pc, #100]	; (80052f0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800528c:	f7ff f89c 	bl	80043c8 <_PreparePacket>
 8005290:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e00b      	b.n	80052c2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	1c59      	adds	r1, r3, #1
 80052b2:	61f9      	str	r1, [r7, #28]
 80052b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	09db      	lsrs	r3, r3, #7
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b7f      	cmp	r3, #127	; 0x7f
 80052c6:	d8f0      	bhi.n	80052aa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80052d8:	2208      	movs	r2, #8
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f7ff f961 	bl	80045a4 <_SendPacket>
  RECORD_END();
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f383 8811 	msr	BASEPRI, r3
}
 80052e8:	bf00      	nop
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20013754 	.word	0x20013754
 80052f4:	20013724 	.word	0x20013724

080052f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005300:	f3ef 8311 	mrs	r3, BASEPRI
 8005304:	f04f 0120 	mov.w	r1, #32
 8005308:	f381 8811 	msr	BASEPRI, r1
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005310:	f7ff f85a 	bl	80043c8 <_PreparePacket>
 8005314:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e00b      	b.n	8005346 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	61f9      	str	r1, [r7, #28]
 8005338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b7f      	cmp	r3, #127	; 0x7f
 800534a:	d8f0      	bhi.n	800532e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	61fa      	str	r2, [r7, #28]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800535c:	2204      	movs	r2, #4
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6938      	ldr	r0, [r7, #16]
 8005362:	f7ff f91f 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f383 8811 	msr	BASEPRI, r3
}
 800536c:	bf00      	nop
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20013754 	.word	0x20013754
 8005378:	20013724 	.word	0x20013724

0800537c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005384:	f3ef 8311 	mrs	r3, BASEPRI
 8005388:	f04f 0120 	mov.w	r1, #32
 800538c:	f381 8811 	msr	BASEPRI, r1
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	4819      	ldr	r0, [pc, #100]	; (80053f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005394:	f7ff f818 	bl	80043c8 <_PreparePacket>
 8005398:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800539e:	4b17      	ldr	r3, [pc, #92]	; (80053fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e00b      	b.n	80053ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	61f9      	str	r1, [r7, #28]
 80053bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	09db      	lsrs	r3, r3, #7
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b7f      	cmp	r3, #127	; 0x7f
 80053ce:	d8f0      	bhi.n	80053b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80053e0:	2206      	movs	r2, #6
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6938      	ldr	r0, [r7, #16]
 80053e6:	f7ff f8dd 	bl	80045a4 <_SendPacket>
  RECORD_END();
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	bf00      	nop
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20013754 	.word	0x20013754
 80053fc:	20013724 	.word	0x20013724

08005400 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800540a:	f3ef 8311 	mrs	r3, BASEPRI
 800540e:	f04f 0120 	mov.w	r1, #32
 8005412:	f381 8811 	msr	BASEPRI, r1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	4827      	ldr	r0, [pc, #156]	; (80054b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800541a:	f7fe ffd5 	bl	80043c8 <_PreparePacket>
 800541e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e00b      	b.n	8005450 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1c59      	adds	r1, r3, #1
 8005440:	6279      	str	r1, [r7, #36]	; 0x24
 8005442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	09db      	lsrs	r3, r3, #7
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2b7f      	cmp	r3, #127	; 0x7f
 8005454:	d8f0      	bhi.n	8005438 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	627a      	str	r2, [r7, #36]	; 0x24
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e00b      	b.n	8005488 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	61f9      	str	r1, [r7, #28]
 800547a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	09db      	lsrs	r3, r3, #7
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b7f      	cmp	r3, #127	; 0x7f
 800548c:	d8f0      	bhi.n	8005470 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	61fa      	str	r2, [r7, #28]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800549e:	2207      	movs	r2, #7
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f7ff f87e 	bl	80045a4 <_SendPacket>
  RECORD_END();
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
 80054b0:	3728      	adds	r7, #40	; 0x28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20013754 	.word	0x20013754
 80054bc:	20013724 	.word	0x20013724

080054c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	1ad3      	subs	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20013724 	.word	0x20013724

080054e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	; 0x30
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d077      	beq.n	80055e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80054f8:	2300      	movs	r3, #0
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fc:	e008      	b.n	8005510 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	3301      	adds	r3, #1
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005514:	429a      	cmp	r2, r3
 8005516:	d3f2      	bcc.n	80054fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8005518:	e000      	b.n	800551c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800551a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d055      	beq.n	80055ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005522:	f3ef 8311 	mrs	r3, BASEPRI
 8005526:	f04f 0120 	mov.w	r1, #32
 800552a:	f381 8811 	msr	BASEPRI, r1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	482f      	ldr	r0, [pc, #188]	; (80055f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005532:	f7fe ff49 	bl	80043c8 <_PreparePacket>
 8005536:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	e00b      	b.n	800555e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	6279      	str	r1, [r7, #36]	; 0x24
 8005550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	d8f0      	bhi.n	8005546 <SEGGER_SYSVIEW_SendModule+0x66>
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	627a      	str	r2, [r7, #36]	; 0x24
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e00b      	b.n	8005598 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	61f9      	str	r1, [r7, #28]
 800558a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	09db      	lsrs	r3, r3, #7
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b7f      	cmp	r3, #127	; 0x7f
 800559c:	d8f0      	bhi.n	8005580 <SEGGER_SYSVIEW_SendModule+0xa0>
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	61fa      	str	r2, [r7, #28]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fe fed6 	bl	8004368 <_EncodeStr>
 80055bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80055be:	2216      	movs	r2, #22
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	6938      	ldr	r0, [r7, #16]
 80055c4:	f7fe ffee 	bl	80045a4 <_SendPacket>
      RECORD_END();
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d006      	beq.n	80055e2 <SEGGER_SYSVIEW_SendModule+0x102>
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4798      	blx	r3
    }
  }
}
 80055e2:	bf00      	nop
 80055e4:	3730      	adds	r7, #48	; 0x30
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2001374c 	.word	0x2001374c
 80055f0:	20013754 	.word	0x20013754

080055f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00f      	beq.n	8005622 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f2      	bne.n	8005608 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2001374c 	.word	0x2001374c

08005630 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005636:	f3ef 8311 	mrs	r3, BASEPRI
 800563a:	f04f 0120 	mov.w	r1, #32
 800563e:	f381 8811 	msr	BASEPRI, r1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	4817      	ldr	r0, [pc, #92]	; (80056a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005646:	f7fe febf 	bl	80043c8 <_PreparePacket>
 800564a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e00b      	b.n	8005674 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	6179      	str	r1, [r7, #20]
 8005666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	09db      	lsrs	r3, r3, #7
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b7f      	cmp	r3, #127	; 0x7f
 8005678:	d8f0      	bhi.n	800565c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	617a      	str	r2, [r7, #20]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800568a:	221b      	movs	r2, #27
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68b8      	ldr	r0, [r7, #8]
 8005690:	f7fe ff88 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f383 8811 	msr	BASEPRI, r3
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20013754 	.word	0x20013754
 80056a8:	20013750 	.word	0x20013750

080056ac <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056b4:	f3ef 8311 	mrs	r3, BASEPRI
 80056b8:	f04f 0120 	mov.w	r1, #32
 80056bc:	f381 8811 	msr	BASEPRI, r1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	4827      	ldr	r0, [pc, #156]	; (8005760 <SEGGER_SYSVIEW_Print+0xb4>)
 80056c4:	f7fe fe80 	bl	80043c8 <_PreparePacket>
 80056c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056ca:	2280      	movs	r2, #128	; 0x80
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	6938      	ldr	r0, [r7, #16]
 80056d0:	f7fe fe4a 	bl	8004368 <_EncodeStr>
 80056d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	2300      	movs	r3, #0
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	e00b      	b.n	80056f8 <SEGGER_SYSVIEW_Print+0x4c>
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	6279      	str	r1, [r7, #36]	; 0x24
 80056ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	09db      	lsrs	r3, r3, #7
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b7f      	cmp	r3, #127	; 0x7f
 80056fc:	d8f0      	bhi.n	80056e0 <SEGGER_SYSVIEW_Print+0x34>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	627a      	str	r2, [r7, #36]	; 0x24
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e00b      	b.n	8005730 <SEGGER_SYSVIEW_Print+0x84>
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	61f9      	str	r1, [r7, #28]
 8005722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	09db      	lsrs	r3, r3, #7
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b7f      	cmp	r3, #127	; 0x7f
 8005734:	d8f0      	bhi.n	8005718 <SEGGER_SYSVIEW_Print+0x6c>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	61fa      	str	r2, [r7, #28]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005746:	221a      	movs	r2, #26
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f7fe ff2a 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f383 8811 	msr	BASEPRI, r3
}
 8005756:	bf00      	nop
 8005758:	3728      	adds	r7, #40	; 0x28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20013754 	.word	0x20013754

08005764 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800576c:	f3ef 8311 	mrs	r3, BASEPRI
 8005770:	f04f 0120 	mov.w	r1, #32
 8005774:	f381 8811 	msr	BASEPRI, r1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	4827      	ldr	r0, [pc, #156]	; (8005818 <SEGGER_SYSVIEW_Warn+0xb4>)
 800577c:	f7fe fe24 	bl	80043c8 <_PreparePacket>
 8005780:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	6938      	ldr	r0, [r7, #16]
 8005788:	f7fe fdee 	bl	8004368 <_EncodeStr>
 800578c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	2301      	movs	r3, #1
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	e00b      	b.n	80057b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	6279      	str	r1, [r7, #36]	; 0x24
 80057a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	09db      	lsrs	r3, r3, #7
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d8f0      	bhi.n	8005798 <SEGGER_SYSVIEW_Warn+0x34>
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	627a      	str	r2, [r7, #36]	; 0x24
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e00b      	b.n	80057e8 <SEGGER_SYSVIEW_Warn+0x84>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	61f9      	str	r1, [r7, #28]
 80057da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	09db      	lsrs	r3, r3, #7
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b7f      	cmp	r3, #127	; 0x7f
 80057ec:	d8f0      	bhi.n	80057d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057fe:	221a      	movs	r2, #26
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	6938      	ldr	r0, [r7, #16]
 8005804:	f7fe fece 	bl	80045a4 <_SendPacket>
  RECORD_END();
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f383 8811 	msr	BASEPRI, r3
}
 800580e:	bf00      	nop
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20013754 	.word	0x20013754

0800581c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005820:	4803      	ldr	r0, [pc, #12]	; (8005830 <_cbSendSystemDesc+0x14>)
 8005822:	f7ff fba7 	bl	8004f74 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005826:	4803      	ldr	r0, [pc, #12]	; (8005834 <_cbSendSystemDesc+0x18>)
 8005828:	f7ff fba4 	bl	8004f74 <SEGGER_SYSVIEW_SendSysDesc>
}
 800582c:	bf00      	nop
 800582e:	bd80      	pop	{r7, pc}
 8005830:	08005ba0 	.word	0x08005ba0
 8005834:	08005bd4 	.word	0x08005bd4

08005838 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <SEGGER_SYSVIEW_Conf+0x1c>)
 800583e:	4a06      	ldr	r2, [pc, #24]	; (8005858 <SEGGER_SYSVIEW_Conf+0x20>)
 8005840:	4906      	ldr	r1, [pc, #24]	; (800585c <SEGGER_SYSVIEW_Conf+0x24>)
 8005842:	4806      	ldr	r0, [pc, #24]	; (800585c <SEGGER_SYSVIEW_Conf+0x24>)
 8005844:	f7ff f81c 	bl	8004880 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005848:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800584c:	f7ff f85c 	bl	8004908 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	0800581d 	.word	0x0800581d
 8005858:	08005c5c 	.word	0x08005c5c
 800585c:	00f42400 	.word	0x00f42400

08005860 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b085      	sub	sp, #20
 8005864:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e033      	b.n	80058d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800586c:	491e      	ldr	r1, [pc, #120]	; (80058e8 <_cbSendTaskList+0x88>)
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	491a      	ldr	r1, [pc, #104]	; (80058e8 <_cbSendTaskList+0x88>)
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	3304      	adds	r3, #4
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	4c16      	ldr	r4, [pc, #88]	; (80058e8 <_cbSendTaskList+0x88>)
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4423      	add	r3, r4
 800589c:	3308      	adds	r3, #8
 800589e:	681c      	ldr	r4, [r3, #0]
 80058a0:	4d11      	ldr	r5, [pc, #68]	; (80058e8 <_cbSendTaskList+0x88>)
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	442b      	add	r3, r5
 80058ae:	330c      	adds	r3, #12
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	4e0d      	ldr	r6, [pc, #52]	; (80058e8 <_cbSendTaskList+0x88>)
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4433      	add	r3, r6
 80058c0:	3310      	adds	r3, #16
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	462b      	mov	r3, r5
 80058c8:	4622      	mov	r2, r4
 80058ca:	f000 f8bd 	bl	8005a48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3301      	adds	r3, #1
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <_cbSendTaskList+0x8c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d3c6      	bcc.n	800586c <_cbSendTaskList+0xc>
  }
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e8:	20013838 	.word	0x20013838
 80058ec:	200138d8 	.word	0x200138d8

080058f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80058f8:	f7fc fcbe 	bl	8002278 <xTaskGetTickCountFromISR>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2200      	movs	r2, #0
 8005900:	469a      	mov	sl, r3
 8005902:	4693      	mov	fp, r2
 8005904:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	f04f 0a00 	mov.w	sl, #0
 8005914:	f04f 0b00 	mov.w	fp, #0
 8005918:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800591c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005920:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005924:	4652      	mov	r2, sl
 8005926:	465b      	mov	r3, fp
 8005928:	1a14      	subs	r4, r2, r0
 800592a:	eb63 0501 	sbc.w	r5, r3, r1
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	00ab      	lsls	r3, r5, #2
 8005938:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800593c:	00a2      	lsls	r2, r4, #2
 800593e:	4614      	mov	r4, r2
 8005940:	461d      	mov	r5, r3
 8005942:	eb14 0800 	adds.w	r8, r4, r0
 8005946:	eb45 0901 	adc.w	r9, r5, r1
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800595a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800595e:	4690      	mov	r8, r2
 8005960:	4699      	mov	r9, r3
 8005962:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005966:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005978 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005986:	2205      	movs	r2, #5
 8005988:	492b      	ldr	r1, [pc, #172]	; (8005a38 <SYSVIEW_AddTask+0xc0>)
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f000 f8a2 	bl	8005ad4 <memcmp>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d04b      	beq.n	8005a2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b07      	cmp	r3, #7
 800599c:	d903      	bls.n	80059a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800599e:	4828      	ldr	r0, [pc, #160]	; (8005a40 <SYSVIEW_AddTask+0xc8>)
 80059a0:	f7ff fee0 	bl	8005764 <SEGGER_SYSVIEW_Warn>
    return;
 80059a4:	e044      	b.n	8005a30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4926      	ldr	r1, [pc, #152]	; (8005a44 <SYSVIEW_AddTask+0xcc>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4921      	ldr	r1, [pc, #132]	; (8005a44 <SYSVIEW_AddTask+0xcc>)
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3304      	adds	r3, #4
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	491b      	ldr	r1, [pc, #108]	; (8005a44 <SYSVIEW_AddTask+0xcc>)
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3308      	adds	r3, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80059e6:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4916      	ldr	r1, [pc, #88]	; (8005a44 <SYSVIEW_AddTask+0xcc>)
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	330c      	adds	r3, #12
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4910      	ldr	r1, [pc, #64]	; (8005a44 <SYSVIEW_AddTask+0xcc>)
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <SYSVIEW_AddTask+0xc4>)
 8005a1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f80e 	bl	8005a48 <SYSVIEW_SendTaskInfo>
 8005a2c:	e000      	b.n	8005a30 <SYSVIEW_AddTask+0xb8>
    return;
 8005a2e:	bf00      	nop

}
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	08005be4 	.word	0x08005be4
 8005a3c:	200138d8 	.word	0x200138d8
 8005a40:	08005bec 	.word	0x08005bec
 8005a44:	20013838 	.word	0x20013838

08005a48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	2214      	movs	r2, #20
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f856 	bl	8005b10 <memset>
  TaskInfo.TaskID     = TaskID;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff f981 	bl	8004d84 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a82:	bf00      	nop
 8005a84:	3728      	adds	r7, #40	; 0x28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ac4 <__libc_init_array+0x38>)
 8005a90:	4c0d      	ldr	r4, [pc, #52]	; (8005ac8 <__libc_init_array+0x3c>)
 8005a92:	1b64      	subs	r4, r4, r5
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	2600      	movs	r6, #0
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	4d0b      	ldr	r5, [pc, #44]	; (8005acc <__libc_init_array+0x40>)
 8005a9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ad0 <__libc_init_array+0x44>)
 8005aa0:	f000 f83e 	bl	8005b20 <_init>
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	08005c64 	.word	0x08005c64
 8005ac8:	08005c64 	.word	0x08005c64
 8005acc:	08005c64 	.word	0x08005c64
 8005ad0:	08005c68 	.word	0x08005c68

08005ad4 <memcmp>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	3901      	subs	r1, #1
 8005ad8:	4402      	add	r2, r0
 8005ada:	4290      	cmp	r0, r2
 8005adc:	d101      	bne.n	8005ae2 <memcmp+0xe>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e005      	b.n	8005aee <memcmp+0x1a>
 8005ae2:	7803      	ldrb	r3, [r0, #0]
 8005ae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d001      	beq.n	8005af0 <memcmp+0x1c>
 8005aec:	1b18      	subs	r0, r3, r4
 8005aee:	bd10      	pop	{r4, pc}
 8005af0:	3001      	adds	r0, #1
 8005af2:	e7f2      	b.n	8005ada <memcmp+0x6>

08005af4 <memcpy>:
 8005af4:	440a      	add	r2, r1
 8005af6:	4291      	cmp	r1, r2
 8005af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005afc:	d100      	bne.n	8005b00 <memcpy+0xc>
 8005afe:	4770      	bx	lr
 8005b00:	b510      	push	{r4, lr}
 8005b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	d1f9      	bne.n	8005b02 <memcpy+0xe>
 8005b0e:	bd10      	pop	{r4, pc}

08005b10 <memset>:
 8005b10:	4402      	add	r2, r0
 8005b12:	4603      	mov	r3, r0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d100      	bne.n	8005b1a <memset+0xa>
 8005b18:	4770      	bx	lr
 8005b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1e:	e7f9      	b.n	8005b14 <memset+0x4>

08005b20 <_init>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr

08005b2c <_fini>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr
