
006MutexBareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08005210  08005210  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005210  08005210  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0001345c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013464  20013464  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfef  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4f  00000000  00000000  0002c027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a20  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ba  00000000  00000000  0002f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c87b  00000000  00000000  0003277a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000191f7  00000000  00000000  0003eff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000581ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e54  00000000  00000000  0005823c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000008 	.word	0x20000008
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005124 	.word	0x08005124

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	08005124 	.word	0x08005124

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e70 	.word	0x20012e70

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f103 0208 	add.w	r2, r3, #8
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f103 0208 	add.w	r2, r3, #8
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f103 0208 	add.w	r2, r3, #8
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80002ee:	b480      	push	{r7}
 80002f0:	b085      	sub	sp, #20
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	689a      	ldr	r2, [r3, #8]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000336:	b480      	push	{r7}
 8000338:	b085      	sub	sp, #20
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800034c:	d103      	bne.n	8000356 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	691b      	ldr	r3, [r3, #16]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00c      	b.n	8000370 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3308      	adds	r3, #8
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e002      	b.n	8000364 <vListInsert+0x2e>
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	429a      	cmp	r2, r3
 800036e:	d2f6      	bcs.n	800035e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	683a      	ldr	r2, [r7, #0]
 800037e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	683a      	ldr	r2, [r7, #0]
 800038a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	601a      	str	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	6892      	ldr	r2, [r2, #8]
 80003be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6852      	ldr	r2, [r2, #4]
 80003c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d103      	bne.n	80003dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	681b      	ldr	r3, [r3, #0]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d10a      	bne.n	8000426 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000414:	f383 8811 	msr	BASEPRI, r3
 8000418:	f3bf 8f6f 	isb	sy
 800041c:	f3bf 8f4f 	dsb	sy
 8000420:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000422:	bf00      	nop
 8000424:	e7fe      	b.n	8000424 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000426:	f002 fadf 	bl	80029e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000432:	68f9      	ldr	r1, [r7, #12]
 8000434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000436:	fb01 f303 	mul.w	r3, r1, r3
 800043a:	441a      	add	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2200      	movs	r2, #0
 8000444:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000456:	3b01      	subs	r3, #1
 8000458:	68f9      	ldr	r1, [r7, #12]
 800045a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	441a      	add	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	22ff      	movs	r2, #255	; 0xff
 800046a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	22ff      	movs	r2, #255	; 0xff
 8000472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d114      	bne.n	80004a6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d01a      	beq.n	80004ba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3310      	adds	r3, #16
 8000488:	4618      	mov	r0, r3
 800048a:	f001 fa93 	bl	80019b4 <xTaskRemoveFromEventList>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d012      	beq.n	80004ba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <xQueueGenericReset+0xcc>)
 8000496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	f3bf 8f6f 	isb	sy
 80004a4:	e009      	b.n	80004ba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3310      	adds	r3, #16
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fef2 	bl	8000294 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3324      	adds	r3, #36	; 0x24
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff feed 	bl	8000294 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80004ba:	f002 fac5 	bl	8002a48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80004be:	2301      	movs	r3, #1
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10a      	bne.n	80004f6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80004e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004e4:	f383 8811 	msr	BASEPRI, r3
 80004e8:	f3bf 8f6f 	isb	sy
 80004ec:	f3bf 8f4f 	dsb	sy
 80004f0:	61bb      	str	r3, [r7, #24]
    }
 80004f2:	bf00      	nop
 80004f4:	e7fe      	b.n	80004f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	fb02 f303 	mul.w	r3, r2, r3
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <xQueueGenericCreate+0x48>
 8000506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <xQueueGenericCreate+0x4c>
 8000514:	2301      	movs	r3, #1
 8000516:	e000      	b.n	800051a <xQueueGenericCreate+0x4e>
 8000518:	2300      	movs	r3, #0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10a      	bne.n	8000534 <xQueueGenericCreate+0x68>
        __asm volatile
 800051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000522:	f383 8811 	msr	BASEPRI, r3
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	f3bf 8f4f 	dsb	sy
 800052e:	617b      	str	r3, [r7, #20]
    }
 8000530:	bf00      	nop
 8000532:	e7fe      	b.n	8000532 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000536:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800053a:	d90a      	bls.n	8000552 <xQueueGenericCreate+0x86>
        __asm volatile
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	613b      	str	r3, [r7, #16]
    }
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	3350      	adds	r3, #80	; 0x50
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fb66 	bl	8002c28 <pvPortMalloc>
 800055c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00d      	beq.n	8000580 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	3350      	adds	r3, #80	; 0x50
 800056c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	6a3b      	ldr	r3, [r7, #32]
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	4613      	mov	r3, r2
 8000576:	69fa      	ldr	r2, [r7, #28]
 8000578:	68b9      	ldr	r1, [r7, #8]
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f000 f805 	bl	800058a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000580:	6a3b      	ldr	r3, [r7, #32]
    }
 8000582:	4618      	mov	r0, r3
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e002      	b.n	80005ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005b8:	2101      	movs	r1, #1
 80005ba:	69b8      	ldr	r0, [r7, #24]
 80005bc:	f7ff ff1e 	bl	80003fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	78fa      	ldrb	r2, [r7, #3]
 80005c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	68f9      	ldr	r1, [r7, #12]
 80005ce:	2073      	movs	r0, #115	; 0x73
 80005d0:	f003 f968 	bl	80038a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00e      	beq.n	8000608 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80005fc:	2300      	movs	r3, #0
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f81c 	bl	8000640 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	461a      	mov	r2, r3
 8000626:	6939      	ldr	r1, [r7, #16]
 8000628:	6978      	ldr	r0, [r7, #20]
 800062a:	f7ff ff4f 	bl	80004cc <xQueueGenericCreate>
 800062e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	f7ff ffd3 	bl	80005dc <prvInitialiseMutex>

        return xNewQueue;
 8000636:	68fb      	ldr	r3, [r7, #12]
    }
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af02      	add	r7, sp, #8
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800064e:	2300      	movs	r3, #0
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10a      	bne.n	8000672 <xQueueGenericSend+0x32>
        __asm volatile
 800065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800066e:	bf00      	nop
 8000670:	e7fe      	b.n	8000670 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <xQueueGenericSend+0x40>
 8000678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <xQueueGenericSend+0x44>
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <xQueueGenericSend+0x46>
 8000684:	2300      	movs	r3, #0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10a      	bne.n	80006a0 <xQueueGenericSend+0x60>
        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d103      	bne.n	80006ae <xQueueGenericSend+0x6e>
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d101      	bne.n	80006b2 <xQueueGenericSend+0x72>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <xQueueGenericSend+0x74>
 80006b2:	2300      	movs	r3, #0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10a      	bne.n	80006ce <xQueueGenericSend+0x8e>
        __asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	623b      	str	r3, [r7, #32]
    }
 80006ca:	bf00      	nop
 80006cc:	e7fe      	b.n	80006cc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006ce:	f001 fb11 	bl	8001cf4 <xTaskGetSchedulerState>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <xQueueGenericSend+0x9e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <xQueueGenericSend+0xa2>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <xQueueGenericSend+0xa4>
 80006e2:	2300      	movs	r3, #0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <xQueueGenericSend+0xbe>
        __asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	61fb      	str	r3, [r7, #28]
    }
 80006fa:	bf00      	nop
 80006fc:	e7fe      	b.n	80006fc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006fe:	f002 f973 	bl	80029e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	429a      	cmp	r2, r3
 800070c:	d302      	bcc.n	8000714 <xQueueGenericSend+0xd4>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d136      	bne.n	8000782 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fe2c 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	460b      	mov	r3, r1
 8000726:	4601      	mov	r1, r0
 8000728:	205a      	movs	r0, #90	; 0x5a
 800072a:	f003 f931 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000734:	f000 fbcc 	bl	8000ed0 <prvCopyDataToQueue>
 8000738:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	d010      	beq.n	8000764 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000744:	3324      	adds	r3, #36	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f934 	bl	80019b4 <xTaskRemoveFromEventList>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d013      	beq.n	800077a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <xQueueGenericSend+0x248>)
 8000754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	f3bf 8f4f 	dsb	sy
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	e00a      	b.n	800077a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <xQueueGenericSend+0x248>)
 800076c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800077a:	f002 f965 	bl	8002a48 <vPortExitCritical>
                return pdPASS;
 800077e:	2301      	movs	r3, #1
 8000780:	e07d      	b.n	800087e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d110      	bne.n	80007aa <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000788:	f002 f95e 	bl	8002a48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fdf0 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	460b      	mov	r3, r1
 800079e:	4601      	mov	r1, r0
 80007a0:	205a      	movs	r0, #90	; 0x5a
 80007a2:	f003 f8f5 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e069      	b.n	800087e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 f963 	bl	8001a80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007be:	f002 f943 	bl	8002a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007c2:	f000 fec1 	bl	8001548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007c6:	f002 f90f 	bl	80029e8 <vPortEnterCritical>
 80007ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007d6:	d103      	bne.n	80007e0 <xQueueGenericSend+0x1a0>
 80007d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80007e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007ec:	d103      	bne.n	80007f6 <xQueueGenericSend+0x1b6>
 80007ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80007f6:	f002 f927 	bl	8002a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f952 	bl	8001aac <xTaskCheckForTimeOut>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d124      	bne.n	8000858 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800080e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000810:	f000 fc56 	bl	80010c0 <prvIsQueueFull>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d018      	beq.n	800084c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081c:	3310      	adds	r3, #16
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 f874 	bl	8001910 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800082a:	f000 fbe1 	bl	8000ff0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800082e:	f000 fe99 	bl	8001564 <xTaskResumeAll>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	f47f af62 	bne.w	80006fe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <xQueueGenericSend+0x248>)
 800083c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	e758      	b.n	80006fe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800084c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800084e:	f000 fbcf 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000852:	f000 fe87 	bl	8001564 <xTaskResumeAll>
 8000856:	e752      	b.n	80006fe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800085a:	f000 fbc9 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800085e:	f000 fe81 	bl	8001564 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fd85 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	4601      	mov	r1, r0
 8000876:	205a      	movs	r0, #90	; 0x5a
 8000878:	f003 f88a 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800087c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800087e:	4618      	mov	r0, r3
 8000880:	3738      	adds	r7, #56	; 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000ed04 	.word	0xe000ed04

0800088c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	; 0x40
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800089e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10a      	bne.n	80008ba <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008b6:	bf00      	nop
 80008b8:	e7fe      	b.n	80008b8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <xQueueGenericSendFromISR+0x3c>
 80008c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <xQueueGenericSendFromISR+0x40>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <xQueueGenericSendFromISR+0x42>
 80008cc:	2300      	movs	r3, #0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80008d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d6:	f383 8811 	msr	BASEPRI, r3
 80008da:	f3bf 8f6f 	isb	sy
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80008e4:	bf00      	nop
 80008e6:	e7fe      	b.n	80008e6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d103      	bne.n	80008f6 <xQueueGenericSendFromISR+0x6a>
 80008ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d101      	bne.n	80008fa <xQueueGenericSendFromISR+0x6e>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <xQueueGenericSendFromISR+0x70>
 80008fa:	2300      	movs	r3, #0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10a      	bne.n	8000916 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	623b      	str	r3, [r7, #32]
    }
 8000912:	bf00      	nop
 8000914:	e7fe      	b.n	8000914 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000916:	f002 f947 	bl	8002ba8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800091a:	f3ef 8211 	mrs	r2, BASEPRI
 800091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	61fa      	str	r2, [r7, #28]
 8000930:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000932:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	429a      	cmp	r2, r3
 8000940:	d302      	bcc.n	8000948 <xQueueGenericSendFromISR+0xbc>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d148      	bne.n	80009da <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800094a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800094e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fd0a 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000960:	4601      	mov	r1, r0
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	461a      	mov	r2, r3
 8000966:	2060      	movs	r0, #96	; 0x60
 8000968:	f002 ff42 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000972:	f000 faad 	bl	8000ed0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000976:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800097a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800097e:	d112      	bne.n	80009a6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	2b00      	cmp	r3, #0
 8000986:	d025      	beq.n	80009d4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098a:	3324      	adds	r3, #36	; 0x24
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f811 	bl	80019b4 <xTaskRemoveFromEventList>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01d      	beq.n	80009d4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d01a      	beq.n	80009d4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e016      	b.n	80009d4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80009a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80009aa:	2b7f      	cmp	r3, #127	; 0x7f
 80009ac:	d10a      	bne.n	80009c4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80009ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	617b      	str	r3, [r7, #20]
    }
 80009c0:	bf00      	nop
 80009c2:	e7fe      	b.n	80009c2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80009d4:	2301      	movs	r3, #1
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80009d8:	e00b      	b.n	80009f2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80009da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fcc9 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 80009e2:	4601      	mov	r1, r0
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	461a      	mov	r2, r3
 80009e8:	2060      	movs	r0, #96	; 0x60
 80009ea:	f002 ff01 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80009fc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80009fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3740      	adds	r7, #64	; 0x40
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b08f      	sub	sp, #60	; 0x3c
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10a      	bne.n	8000a38 <xQueueReceive+0x30>
        __asm volatile
 8000a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a26:	f383 8811 	msr	BASEPRI, r3
 8000a2a:	f3bf 8f6f 	isb	sy
 8000a2e:	f3bf 8f4f 	dsb	sy
 8000a32:	623b      	str	r3, [r7, #32]
    }
 8000a34:	bf00      	nop
 8000a36:	e7fe      	b.n	8000a36 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <xQueueReceive+0x3e>
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <xQueueReceive+0x42>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <xQueueReceive+0x44>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10a      	bne.n	8000a66 <xQueueReceive+0x5e>
        __asm volatile
 8000a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a54:	f383 8811 	msr	BASEPRI, r3
 8000a58:	f3bf 8f6f 	isb	sy
 8000a5c:	f3bf 8f4f 	dsb	sy
 8000a60:	61fb      	str	r3, [r7, #28]
    }
 8000a62:	bf00      	nop
 8000a64:	e7fe      	b.n	8000a64 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a66:	f001 f945 	bl	8001cf4 <xTaskGetSchedulerState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <xQueueReceive+0x6e>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <xQueueReceive+0x72>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <xQueueReceive+0x74>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10a      	bne.n	8000a96 <xQueueReceive+0x8e>
        __asm volatile
 8000a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a84:	f383 8811 	msr	BASEPRI, r3
 8000a88:	f3bf 8f6f 	isb	sy
 8000a8c:	f3bf 8f4f 	dsb	sy
 8000a90:	61bb      	str	r3, [r7, #24]
    }
 8000a92:	bf00      	nop
 8000a94:	e7fe      	b.n	8000a94 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a96:	f001 ffa7 	bl	80029e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d02f      	beq.n	8000b06 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aaa:	f000 fa7b 	bl	8000fa4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fc5f 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f003 fc5b 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	9100      	str	r1, [sp, #0]
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	205c      	movs	r0, #92	; 0x5c
 8000aca:	f002 ff61 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00f      	beq.n	8000afe <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae0:	3310      	adds	r3, #16
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ff66 	bl	80019b4 <xTaskRemoveFromEventList>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <xQueueReceive+0x21c>)
 8000af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	f3bf 8f4f 	dsb	sy
 8000afa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000afe:	f001 ffa3 	bl	8002a48 <vPortExitCritical>
                return pdPASS;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e08a      	b.n	8000c1c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d113      	bne.n	8000b34 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b0c:	f001 ff9c 	bl	8002a48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fc2e 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f003 fc2a 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000b20:	4602      	mov	r2, r0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2101      	movs	r1, #1
 8000b26:	9100      	str	r1, [sp, #0]
 8000b28:	4621      	mov	r1, r4
 8000b2a:	205c      	movs	r0, #92	; 0x5c
 8000b2c:	f002 ff30 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e073      	b.n	8000c1c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ff9e 	bl	8001a80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b48:	f001 ff7e 	bl	8002a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b4c:	f000 fcfc 	bl	8001548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b50:	f001 ff4a 	bl	80029e8 <vPortEnterCritical>
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b60:	d103      	bne.n	8000b6a <xQueueReceive+0x162>
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b76:	d103      	bne.n	8000b80 <xQueueReceive+0x178>
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b80:	f001 ff62 	bl	8002a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b84:	1d3a      	adds	r2, r7, #4
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 ff8d 	bl	8001aac <xTaskCheckForTimeOut>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d124      	bne.n	8000be2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b9a:	f000 fa7b 	bl	8001094 <prvIsQueueEmpty>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d018      	beq.n	8000bd6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba6:	3324      	adds	r3, #36	; 0x24
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 feaf 	bl	8001910 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bb4:	f000 fa1c 	bl	8000ff0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000bb8:	f000 fcd4 	bl	8001564 <xTaskResumeAll>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f47f af69 	bne.w	8000a96 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <xQueueReceive+0x21c>)
 8000bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	f3bf 8f6f 	isb	sy
 8000bd4:	e75f      	b.n	8000a96 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bd8:	f000 fa0a 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000bdc:	f000 fcc2 	bl	8001564 <xTaskResumeAll>
 8000be0:	e759      	b.n	8000a96 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000be4:	f000 fa04 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000be8:	f000 fcbc 	bl	8001564 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bee:	f000 fa51 	bl	8001094 <prvIsQueueEmpty>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f43f af4e 	beq.w	8000a96 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 fbb9 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000c02:	4604      	mov	r4, r0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f003 fbb5 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2101      	movs	r1, #1
 8000c10:	9100      	str	r1, [sp, #0]
 8000c12:	4621      	mov	r1, r4
 8000c14:	205c      	movs	r0, #92	; 0x5c
 8000c16:	f002 febb 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000c1a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3734      	adds	r7, #52	; 0x34
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	e000ed04 	.word	0xe000ed04

08000c28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b091      	sub	sp, #68	; 0x44
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10a      	bne.n	8000c5a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8000c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c48:	f383 8811 	msr	BASEPRI, r3
 8000c4c:	f3bf 8f6f 	isb	sy
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	623b      	str	r3, [r7, #32]
    }
 8000c56:	bf00      	nop
 8000c58:	e7fe      	b.n	8000c58 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00a      	beq.n	8000c78 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8000c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	f3bf 8f4f 	dsb	sy
 8000c72:	61fb      	str	r3, [r7, #28]
    }
 8000c74:	bf00      	nop
 8000c76:	e7fe      	b.n	8000c76 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c78:	f001 f83c 	bl	8001cf4 <xTaskGetSchedulerState>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <xQueueSemaphoreTake+0x60>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <xQueueSemaphoreTake+0x64>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <xQueueSemaphoreTake+0x66>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10a      	bne.n	8000ca8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8000c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c96:	f383 8811 	msr	BASEPRI, r3
 8000c9a:	f3bf 8f6f 	isb	sy
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	61bb      	str	r3, [r7, #24]
    }
 8000ca4:	bf00      	nop
 8000ca6:	e7fe      	b.n	8000ca6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ca8:	f001 fe9e 	bl	80029e8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d034      	beq.n	8000d22 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fb5a 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f003 fb56 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	9100      	str	r1, [sp, #0]
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	205c      	movs	r0, #92	; 0x5c
 8000cd4:	f002 fe5c 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000ce8:	f001 f9b4 	bl	8002054 <pvTaskIncrementMutexHeldCount>
 8000cec:	4602      	mov	r2, r0
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00f      	beq.n	8000d1a <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	3310      	adds	r3, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fe58 	bl	80019b4 <xTaskRemoveFromEventList>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d007      	beq.n	8000d1a <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <xQueueSemaphoreTake+0x274>)
 8000d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	f3bf 8f4f 	dsb	sy
 8000d16:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d1a:	f001 fe95 	bl	8002a48 <vPortExitCritical>
                return pdPASS;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0b7      	b.n	8000e92 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d121      	bne.n	8000d6c <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00a      	beq.n	8000d44 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8000d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d32:	f383 8811 	msr	BASEPRI, r3
 8000d36:	f3bf 8f6f 	isb	sy
 8000d3a:	f3bf 8f4f 	dsb	sy
 8000d3e:	617b      	str	r3, [r7, #20]
    }
 8000d40:	bf00      	nop
 8000d42:	e7fe      	b.n	8000d42 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000d44:	f001 fe80 	bl	8002a48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fb12 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000d50:	4604      	mov	r4, r0
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 fb0e 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	9100      	str	r1, [sp, #0]
 8000d60:	4621      	mov	r1, r4
 8000d62:	205c      	movs	r0, #92	; 0x5c
 8000d64:	f002 fe14 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e092      	b.n	8000e92 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fe82 	bl	8001a80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d80:	f001 fe62 	bl	8002a48 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d84:	f000 fbe0 	bl	8001548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d88:	f001 fe2e 	bl	80029e8 <vPortEnterCritical>
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d98:	d103      	bne.n	8000da2 <xQueueSemaphoreTake+0x17a>
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dae:	d103      	bne.n	8000db8 <xQueueSemaphoreTake+0x190>
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000db8:	f001 fe46 	bl	8002a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dbc:	463a      	mov	r2, r7
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fe71 	bl	8001aac <xTaskCheckForTimeOut>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d132      	bne.n	8000e36 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dd2:	f000 f95f 	bl	8001094 <prvIsQueueEmpty>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d026      	beq.n	8000e2a <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8000de4:	f001 fe00 	bl	80029e8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ff9f 	bl	8001d30 <xTaskPriorityInherit>
 8000df2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8000df4:	f001 fe28 	bl	8002a48 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	3324      	adds	r3, #36	; 0x24
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fd85 	bl	8001910 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e08:	f000 f8f2 	bl	8000ff0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e0c:	f000 fbaa 	bl	8001564 <xTaskResumeAll>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f af48 	bne.w	8000ca8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <xQueueSemaphoreTake+0x274>)
 8000e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	e73e      	b.n	8000ca8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e2c:	f000 f8e0 	bl	8000ff0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e30:	f000 fb98 	bl	8001564 <xTaskResumeAll>
 8000e34:	e738      	b.n	8000ca8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e38:	f000 f8da 	bl	8000ff0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e3c:	f000 fb92 	bl	8001564 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e42:	f000 f927 	bl	8001094 <prvIsQueueEmpty>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f43f af2d 	beq.w	8000ca8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00d      	beq.n	8000e70 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8000e54:	f001 fdc8 	bl	80029e8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e5a:	f000 f821 	bl	8000ea0 <prvGetDisinheritPriorityAfterTimeout>
 8000e5e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f85c 	bl	8001f24 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000e6c:	f001 fdec 	bl	8002a48 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fa7e 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000e78:	4604      	mov	r4, r0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f003 fa7a 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 8000e80:	4602      	mov	r2, r0
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	9100      	str	r1, [sp, #0]
 8000e88:	4621      	mov	r1, r4
 8000e8a:	205c      	movs	r0, #92	; 0x5c
 8000e8c:	f002 fd80 	bl	8003990 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e90:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	373c      	adds	r7, #60	; 0x3c
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd90      	pop	{r4, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f1c3 0305 	rsb	r3, r3, #5
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e001      	b.n	8000ec2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10d      	bne.n	8000f0a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14d      	bne.n	8000f92 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 ff92 	bl	8001e24 <xTaskPriorityDisinherit>
 8000f00:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	e043      	b.n	8000f92 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d119      	bne.n	8000f44 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6858      	ldr	r0, [r3, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	f004 f8ec 	bl	80050f8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	441a      	add	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d32b      	bcc.n	8000f92 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e026      	b.n	8000f92 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68d8      	ldr	r0, [r3, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	f004 f8d2 	bl	80050f8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	441a      	add	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	425b      	negs	r3, r3
 8000f7a:	441a      	add	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d105      	bne.n	8000f92 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f9a:	697b      	ldr	r3, [r7, #20]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d018      	beq.n	8000fe8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	441a      	add	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d303      	bcc.n	8000fd8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68d9      	ldr	r1, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f004 f888 	bl	80050f8 <memcpy>
    }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ff8:	f001 fcf6 	bl	80029e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001002:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001004:	e011      	b.n	800102a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	2b00      	cmp	r3, #0
 800100c:	d012      	beq.n	8001034 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3324      	adds	r3, #36	; 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fcce 	bl	80019b4 <xTaskRemoveFromEventList>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800101e:	f000 fdab 	bl	8001b78 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3b01      	subs	r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	2b00      	cmp	r3, #0
 8001030:	dce9      	bgt.n	8001006 <prvUnlockQueue+0x16>
 8001032:	e000      	b.n	8001036 <prvUnlockQueue+0x46>
                        break;
 8001034:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800103e:	f001 fd03 	bl	8002a48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001042:	f001 fcd1 	bl	80029e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800104e:	e011      	b.n	8001074 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d012      	beq.n	800107e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3310      	adds	r3, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fca9 	bl	80019b4 <xTaskRemoveFromEventList>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001068:	f000 fd86 	bl	8001b78 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	3b01      	subs	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dce9      	bgt.n	8001050 <prvUnlockQueue+0x60>
 800107c:	e000      	b.n	8001080 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800107e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001088:	f001 fcde 	bl	8002a48 <vPortExitCritical>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800109c:	f001 fca4 	bl	80029e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e001      	b.n	80010b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010b2:	f001 fcc9 	bl	8002a48 <vPortExitCritical>

    return xReturn;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010c8:	f001 fc8e 	bl	80029e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d102      	bne.n	80010de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e001      	b.n	80010e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010e2:	f001 fcb1 	bl	8002a48 <vPortExitCritical>

    return xReturn;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e01e      	b.n	800113e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <vQueueAddToRegistry+0x60>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d115      	bne.n	8001138 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800110c:	4910      	ldr	r1, [pc, #64]	; (8001150 <vQueueAddToRegistry+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <vQueueAddToRegistry+0x60>)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f925 	bl	8004374 <SEGGER_SYSVIEW_ShrinkId>
 800112a:	4601      	mov	r1, r0
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	2071      	movs	r0, #113	; 0x71
 8001132:	f002 fb5d 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001136:	e006      	b.n	8001146 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b07      	cmp	r3, #7
 8001142:	d9dd      	bls.n	8001100 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000024 	.word	0x20000024

08001154 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001164:	f001 fc40 	bl	80029e8 <vPortEnterCritical>
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001174:	d103      	bne.n	800117e <vQueueWaitForMessageRestricted+0x2a>
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001184:	b25b      	sxtb	r3, r3
 8001186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800118a:	d103      	bne.n	8001194 <vQueueWaitForMessageRestricted+0x40>
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001194:	f001 fc58 	bl	8002a48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3324      	adds	r3, #36	; 0x24
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fbd5 	bl	8001958 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff1e 	bl	8000ff0 <prvUnlockQueue>
    }
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fd29 	bl	8002c28 <pvPortMalloc>
 80011d6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00e      	beq.n	80011fc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011de:	2058      	movs	r0, #88	; 0x58
 80011e0:	f001 fd22 	bl	8002c28 <pvPortMalloc>
 80011e4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
 80011f2:	e005      	b.n	8001200 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f001 fdf7 	bl	8002de8 <vPortFree>
 80011fa:	e001      	b.n	8001200 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d013      	beq.n	800122e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	2300      	movs	r3, #0
 800120a:	9303      	str	r3, [sp, #12]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f80e 	bl	800123e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001222:	69f8      	ldr	r0, [r7, #28]
 8001224:	f000 f8a2 	bl	800136c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	e002      	b.n	8001234 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001232:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001234:	69bb      	ldr	r3, [r7, #24]
    }
 8001236:	4618      	mov	r0, r3
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	461a      	mov	r2, r3
 8001256:	21a5      	movs	r1, #165	; 0xa5
 8001258:	f003 ff5c 	bl	8005114 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001266:	3b01      	subs	r3, #1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f023 0307 	bic.w	r3, r3, #7
 8001274:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001284:	f383 8811 	msr	BASEPRI, r3
 8001288:	f3bf 8f6f 	isb	sy
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	617b      	str	r3, [r7, #20]
    }
 8001292:	bf00      	nop
 8001294:	e7fe      	b.n	8001294 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01f      	beq.n	80012dc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e012      	b.n	80012c8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	4413      	add	r3, r2
 80012a8:	7819      	ldrb	r1, [r3, #0]
 80012aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	3334      	adds	r3, #52	; 0x34
 80012b2:	460a      	mov	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b09      	cmp	r3, #9
 80012cc:	d9e9      	bls.n	80012a2 <prvInitialiseNewTask+0x64>
 80012ce:	e000      	b.n	80012d2 <prvInitialiseNewTask+0x94>
            {
                break;
 80012d0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012da:	e003      	b.n	80012e4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d901      	bls.n	80012ee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012ea:	2304      	movs	r3, #4
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	2200      	movs	r2, #0
 80012fe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	3304      	adds	r3, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffe5 	bl	80002d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	3318      	adds	r3, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ffe0 	bl	80002d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001318:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	f1c3 0205 	rsb	r2, r3, #5
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	3350      	adds	r3, #80	; 0x50
 800132e:	2204      	movs	r2, #4
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 feee 	bl	8005114 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	3354      	adds	r3, #84	; 0x54
 800133c:	2201      	movs	r2, #1
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fee7 	bl	8005114 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f001 fa20 	bl	8002790 <pxPortInitialiseStack>
 8001350:	4602      	mov	r2, r0
 8001352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001354:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001374:	f001 fb38 	bl	80029e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <prvAddNewTaskToReadyList+0xfc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <prvAddNewTaskToReadyList+0xfc>)
 8001380:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <prvAddNewTaskToReadyList+0x100>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800138a:	4a38      	ldr	r2, [pc, #224]	; (800146c <prvAddNewTaskToReadyList+0x100>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <prvAddNewTaskToReadyList+0xfc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d110      	bne.n	80013ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001398:	f000 fc12 	bl	8001bc0 <prvInitialiseTaskLists>
 800139c:	e00d      	b.n	80013ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <prvAddNewTaskToReadyList+0x104>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <prvAddNewTaskToReadyList+0x100>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d802      	bhi.n	80013ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013b4:	4a2d      	ldr	r2, [pc, #180]	; (800146c <prvAddNewTaskToReadyList+0x100>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <prvAddNewTaskToReadyList+0x108>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a2c      	ldr	r2, [pc, #176]	; (8001474 <prvAddNewTaskToReadyList+0x108>)
 80013c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <prvAddNewTaskToReadyList+0x108>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <prvAddNewTaskToReadyList+0x94>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fea7 	bl	8004128 <SEGGER_SYSVIEW_OnTaskCreate>
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	461d      	mov	r5, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	461c      	mov	r4, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	1ae3      	subs	r3, r4, r3
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	462b      	mov	r3, r5
 80013fc:	f001 fe12 	bl	8003024 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 ff14 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2201      	movs	r2, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <prvAddNewTaskToReadyList+0x10c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <prvAddNewTaskToReadyList+0x10c>)
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <prvAddNewTaskToReadyList+0x110>)
 8001428:	441a      	add	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7fe ff5c 	bl	80002ee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001436:	f001 fb07 	bl	8002a48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <prvAddNewTaskToReadyList+0x104>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <prvAddNewTaskToReadyList+0x100>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <prvAddNewTaskToReadyList+0x114>)
 8001452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	2000013c 	.word	0x2000013c
 800146c:	20000064 	.word	0x20000064
 8001470:	20000148 	.word	0x20000148
 8001474:	20000158 	.word	0x20000158
 8001478:	20000144 	.word	0x20000144
 800147c:	20000068 	.word	0x20000068
 8001480:	e000ed04 	.word	0xe000ed04

08001484 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <vTaskStartScheduler+0xa4>)
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2282      	movs	r2, #130	; 0x82
 8001496:	4925      	ldr	r1, [pc, #148]	; (800152c <vTaskStartScheduler+0xa8>)
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <vTaskStartScheduler+0xac>)
 800149a:	f7ff fe8f 	bl	80011bc <xTaskCreate>
 800149e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80014a6:	f000 fe61 	bl	800216c <xTimerCreateTimerTask>
 80014aa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d124      	bne.n	80014fc <vTaskStartScheduler+0x78>
        __asm volatile
 80014b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	60bb      	str	r3, [r7, #8]
    }
 80014c4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <vTaskStartScheduler+0xb0>)
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <vTaskStartScheduler+0xb4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <vTaskStartScheduler+0xb8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <vTaskStartScheduler+0xbc>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <vTaskStartScheduler+0xa4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d102      	bne.n	80014ec <vTaskStartScheduler+0x68>
 80014e6:	f002 fe03 	bl	80040f0 <SEGGER_SYSVIEW_OnIdle>
 80014ea:	e004      	b.n	80014f6 <vTaskStartScheduler+0x72>
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <vTaskStartScheduler+0xbc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fe5b 	bl	80041ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014f6:	f001 f9d5 	bl	80028a4 <xPortStartScheduler>
 80014fa:	e00e      	b.n	800151a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001502:	d10a      	bne.n	800151a <vTaskStartScheduler+0x96>
        __asm volatile
 8001504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	607b      	str	r3, [r7, #4]
    }
 8001516:	bf00      	nop
 8001518:	e7fe      	b.n	8001518 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <vTaskStartScheduler+0xc0>)
 800151c:	681b      	ldr	r3, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000160 	.word	0x20000160
 800152c:	0800513c 	.word	0x0800513c
 8001530:	08001b91 	.word	0x08001b91
 8001534:	2000015c 	.word	0x2000015c
 8001538:	20000148 	.word	0x20000148
 800153c:	20000140 	.word	0x20000140
 8001540:	20000064 	.word	0x20000064
 8001544:	20000000 	.word	0x20000000

08001548 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <vTaskSuspendAll+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a03      	ldr	r2, [pc, #12]	; (8001560 <vTaskSuspendAll+0x18>)
 8001554:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000164 	.word	0x20000164

08001564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001572:	4b43      	ldr	r3, [pc, #268]	; (8001680 <xTaskResumeAll+0x11c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10a      	bne.n	8001590 <xTaskResumeAll+0x2c>
        __asm volatile
 800157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	603b      	str	r3, [r7, #0]
    }
 800158c:	bf00      	nop
 800158e:	e7fe      	b.n	800158e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001590:	f001 fa2a 	bl	80029e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <xTaskResumeAll+0x11c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	4a39      	ldr	r2, [pc, #228]	; (8001680 <xTaskResumeAll+0x11c>)
 800159c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <xTaskResumeAll+0x11c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d165      	bne.n	8001672 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <xTaskResumeAll+0x120>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d061      	beq.n	8001672 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015ae:	e032      	b.n	8001616 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <xTaskResumeAll+0x124>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3318      	adds	r3, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fef3 	bl	80003a8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe feee 	bl	80003a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fe2e 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <xTaskResumeAll+0x128>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <xTaskResumeAll+0x128>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <xTaskResumeAll+0x12c>)
 80015f4:	441a      	add	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3304      	adds	r3, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f7fe fe76 	bl	80002ee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <xTaskResumeAll+0x130>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d302      	bcc.n	8001616 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <xTaskResumeAll+0x134>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <xTaskResumeAll+0x124>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1c8      	bne.n	80015b0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001624:	f000 fb4a 	bl	8001cbc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <xTaskResumeAll+0x138>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d010      	beq.n	8001656 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001634:	f000 f846 	bl	80016c4 <xTaskIncrementTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <xTaskResumeAll+0x134>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f1      	bne.n	8001634 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <xTaskResumeAll+0x138>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <xTaskResumeAll+0x134>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800165e:	2301      	movs	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <xTaskResumeAll+0x13c>)
 8001664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001672:	f001 f9e9 	bl	8002a48 <vPortExitCritical>

    return xAlreadyYielded;
 8001676:	68bb      	ldr	r3, [r7, #8]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000164 	.word	0x20000164
 8001684:	2000013c 	.word	0x2000013c
 8001688:	200000fc 	.word	0x200000fc
 800168c:	20000144 	.word	0x20000144
 8001690:	20000068 	.word	0x20000068
 8001694:	20000064 	.word	0x20000064
 8001698:	20000150 	.word	0x20000150
 800169c:	2000014c 	.word	0x2000014c
 80016a0:	e000ed04 	.word	0xe000ed04

080016a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <xTaskGetTickCount+0x1c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000140 	.word	0x20000140

080016c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ce:	4b50      	ldr	r3, [pc, #320]	; (8001810 <xTaskIncrementTick+0x14c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8092 	bne.w	80017fc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80016d8:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <xTaskIncrementTick+0x150>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <xTaskIncrementTick+0x150>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d120      	bne.n	800172e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80016ec:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <xTaskIncrementTick+0x154>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <xTaskIncrementTick+0x48>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	603b      	str	r3, [r7, #0]
    }
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <xTaskIncrementTick+0x46>
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <xTaskIncrementTick+0x154>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <xTaskIncrementTick+0x158>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a40      	ldr	r2, [pc, #256]	; (8001818 <xTaskIncrementTick+0x154>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <xTaskIncrementTick+0x158>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <xTaskIncrementTick+0x15c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a3e      	ldr	r2, [pc, #248]	; (8001820 <xTaskIncrementTick+0x15c>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	f000 fac7 	bl	8001cbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <xTaskIncrementTick+0x160>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d34c      	bcc.n	80017d2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <xTaskIncrementTick+0x154>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <xTaskIncrementTick+0x160>)
 8001744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001748:	601a      	str	r2, [r3, #0]
                    break;
 800174a:	e042      	b.n	80017d2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <xTaskIncrementTick+0x154>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d203      	bcs.n	800176c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <xTaskIncrementTick+0x160>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800176a:	e032      	b.n	80017d2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3304      	adds	r3, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe19 	bl	80003a8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3318      	adds	r3, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe10 	bl	80003a8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fd50 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2201      	movs	r2, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <xTaskIncrementTick+0x164>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <xTaskIncrementTick+0x164>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <xTaskIncrementTick+0x168>)
 80017b0:	441a      	add	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3304      	adds	r3, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7fe fd98 	bl	80002ee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <xTaskIncrementTick+0x16c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3b5      	bcc.n	8001738 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d0:	e7b2      	b.n	8001738 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <xTaskIncrementTick+0x16c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	4914      	ldr	r1, [pc, #80]	; (800182c <xTaskIncrementTick+0x168>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d901      	bls.n	80017ee <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <xTaskIncrementTick+0x170>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e004      	b.n	8001806 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <xTaskIncrementTick+0x174>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <xTaskIncrementTick+0x174>)
 8001804:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001806:	697b      	ldr	r3, [r7, #20]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000164 	.word	0x20000164
 8001814:	20000140 	.word	0x20000140
 8001818:	200000f4 	.word	0x200000f4
 800181c:	200000f8 	.word	0x200000f8
 8001820:	20000154 	.word	0x20000154
 8001824:	2000015c 	.word	0x2000015c
 8001828:	20000144 	.word	0x20000144
 800182c:	20000068 	.word	0x20000068
 8001830:	20000064 	.word	0x20000064
 8001834:	20000150 	.word	0x20000150
 8001838:	2000014c 	.word	0x2000014c

0800183c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <vTaskSwitchContext+0xbc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <vTaskSwitchContext+0xc0>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001850:	e04d      	b.n	80018ee <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <vTaskSwitchContext+0xc0>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <vTaskSwitchContext+0xc4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f1c3 031f 	rsb	r3, r3, #31
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	4925      	ldr	r1, [pc, #148]	; (8001904 <vTaskSwitchContext+0xc8>)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	607b      	str	r3, [r7, #4]
    }
 8001894:	bf00      	nop
 8001896:	e7fe      	b.n	8001896 <vTaskSwitchContext+0x5a>
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <vTaskSwitchContext+0xc8>)
 80018a4:	4413      	add	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3308      	adds	r3, #8
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d104      	bne.n	80018c8 <vTaskSwitchContext+0x8c>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <vTaskSwitchContext+0xcc>)
 80018d0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <vTaskSwitchContext+0xcc>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <vTaskSwitchContext+0xd0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d102      	bne.n	80018e4 <vTaskSwitchContext+0xa8>
 80018de:	f002 fc07 	bl	80040f0 <SEGGER_SYSVIEW_OnIdle>
}
 80018e2:	e004      	b.n	80018ee <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <vTaskSwitchContext+0xcc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fc5f 	bl	80041ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000164 	.word	0x20000164
 80018fc:	20000150 	.word	0x20000150
 8001900:	20000144 	.word	0x20000144
 8001904:	20000068 	.word	0x20000068
 8001908:	20000064 	.word	0x20000064
 800190c:	20000160 	.word	0x20000160

08001910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	60fb      	str	r3, [r7, #12]
    }
 8001932:	bf00      	nop
 8001934:	e7fe      	b.n	8001934 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <vTaskPlaceOnEventList+0x44>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3318      	adds	r3, #24
 800193c:	4619      	mov	r1, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fcf9 	bl	8000336 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001944:	2101      	movs	r1, #1
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f000 fb98 	bl	800207c <prvAddCurrentTaskToDelayedList>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000064 	.word	0x20000064

08001958 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800196a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196e:	f383 8811 	msr	BASEPRI, r3
 8001972:	f3bf 8f6f 	isb	sy
 8001976:	f3bf 8f4f 	dsb	sy
 800197a:	617b      	str	r3, [r7, #20]
    }
 800197c:	bf00      	nop
 800197e:	e7fe      	b.n	800197e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3318      	adds	r3, #24
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7fe fcb0 	bl	80002ee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001998:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800199a:	2024      	movs	r0, #36	; 0x24
 800199c:	f001 fece 	bl	800373c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f000 fb6a 	bl	800207c <prvAddCurrentTaskToDelayedList>
    }
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000064 	.word	0x20000064

080019b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80019ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	f3bf 8f6f 	isb	sy
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	60fb      	str	r3, [r7, #12]
    }
 80019dc:	bf00      	nop
 80019de:	e7fe      	b.n	80019de <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3318      	adds	r3, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fcdf 	bl	80003a8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <xTaskRemoveFromEventList+0xb4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d120      	bne.n	8001a34 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	3304      	adds	r3, #4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fcd6 	bl	80003a8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fc16 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2201      	movs	r2, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <xTaskRemoveFromEventList+0xb8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <xTaskRemoveFromEventList+0xb8>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <xTaskRemoveFromEventList+0xbc>)
 8001a24:	441a      	add	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7fe fc5e 	bl	80002ee <vListInsertEnd>
 8001a32:	e005      	b.n	8001a40 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	3318      	adds	r3, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <xTaskRemoveFromEventList+0xc0>)
 8001a3c:	f7fe fc57 	bl	80002ee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <xTaskRemoveFromEventList+0xc4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d905      	bls.n	8001a5a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <xTaskRemoveFromEventList+0xc8>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e001      	b.n	8001a5e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a5e:	697b      	ldr	r3, [r7, #20]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000164 	.word	0x20000164
 8001a6c:	20000144 	.word	0x20000144
 8001a70:	20000068 	.word	0x20000068
 8001a74:	200000fc 	.word	0x200000fc
 8001a78:	20000064 	.word	0x20000064
 8001a7c:	20000150 	.word	0x20000150

08001a80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <vTaskInternalSetTimeOutState+0x24>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <vTaskInternalSetTimeOutState+0x28>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000154 	.word	0x20000154
 8001aa8:	20000140 	.word	0x20000140

08001aac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	613b      	str	r3, [r7, #16]
    }
 8001ace:	bf00      	nop
 8001ad0:	e7fe      	b.n	8001ad0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001adc:	f383 8811 	msr	BASEPRI, r3
 8001ae0:	f3bf 8f6f 	isb	sy
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	60fb      	str	r3, [r7, #12]
    }
 8001aea:	bf00      	nop
 8001aec:	e7fe      	b.n	8001aec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001aee:	f000 ff7b 	bl	80029e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <xTaskCheckForTimeOut+0xc4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b0a:	d102      	bne.n	8001b12 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e026      	b.n	8001b60 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <xTaskCheckForTimeOut+0xc8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d00a      	beq.n	8001b34 <xTaskCheckForTimeOut+0x88>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d305      	bcc.n	8001b34 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e015      	b.n	8001b60 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20b      	bcs.n	8001b56 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff98 	bl	8001a80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	e004      	b.n	8001b60 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b60:	f000 ff72 	bl	8002a48 <vPortExitCritical>

    return xReturn;
 8001b64:	69fb      	ldr	r3, [r7, #28]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000140 	.word	0x20000140
 8001b74:	20000154 	.word	0x20000154

08001b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <vTaskMissedYield+0x14>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000150 	.word	0x20000150

08001b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b98:	f000 f852 	bl	8001c40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <prvIdleTask+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d9f9      	bls.n	8001b98 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <prvIdleTask+0x2c>)
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001bb4:	e7f0      	b.n	8001b98 <prvIdleTask+0x8>
 8001bb6:	bf00      	nop
 8001bb8:	20000068 	.word	0x20000068
 8001bbc:	e000ed04 	.word	0xe000ed04

08001bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e00c      	b.n	8001be6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <prvInitialiseTaskLists+0x60>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb5a 	bl	8000294 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d9ef      	bls.n	8001bcc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <prvInitialiseTaskLists+0x64>)
 8001bee:	f7fe fb51 	bl	8000294 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <prvInitialiseTaskLists+0x68>)
 8001bf4:	f7fe fb4e 	bl	8000294 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <prvInitialiseTaskLists+0x6c>)
 8001bfa:	f7fe fb4b 	bl	8000294 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <prvInitialiseTaskLists+0x70>)
 8001c00:	f7fe fb48 	bl	8000294 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c04:	480b      	ldr	r0, [pc, #44]	; (8001c34 <prvInitialiseTaskLists+0x74>)
 8001c06:	f7fe fb45 	bl	8000294 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <prvInitialiseTaskLists+0x78>)
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <prvInitialiseTaskLists+0x64>)
 8001c0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <prvInitialiseTaskLists+0x7c>)
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <prvInitialiseTaskLists+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000068 	.word	0x20000068
 8001c24:	200000cc 	.word	0x200000cc
 8001c28:	200000e0 	.word	0x200000e0
 8001c2c:	200000fc 	.word	0x200000fc
 8001c30:	20000110 	.word	0x20000110
 8001c34:	20000128 	.word	0x20000128
 8001c38:	200000f4 	.word	0x200000f4
 8001c3c:	200000f8 	.word	0x200000f8

08001c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c46:	e019      	b.n	8001c7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c48:	f000 fece 	bl	80029e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <prvCheckTasksWaitingTermination+0x50>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fba5 	bl	80003a8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <prvCheckTasksWaitingTermination+0x54>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <prvCheckTasksWaitingTermination+0x54>)
 8001c66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <prvCheckTasksWaitingTermination+0x58>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <prvCheckTasksWaitingTermination+0x58>)
 8001c70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c72:	f000 fee9 	bl	8002a48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f810 	bl	8001c9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <prvCheckTasksWaitingTermination+0x58>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e1      	bne.n	8001c48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000110 	.word	0x20000110
 8001c94:	2000013c 	.word	0x2000013c
 8001c98:	20000124 	.word	0x20000124

08001c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 f89d 	bl	8002de8 <vPortFree>
                vPortFree( pxTCB );
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 f89a 	bl	8002de8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <prvResetNextTaskUnblockTime+0x30>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <prvResetNextTaskUnblockTime+0x34>)
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cd2:	e005      	b.n	8001ce0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <prvResetNextTaskUnblockTime+0x30>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <prvResetNextTaskUnblockTime+0x34>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200000f4 	.word	0x200000f4
 8001cf0:	2000015c 	.word	0x2000015c

08001cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <xTaskGetSchedulerState+0x34>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d02:	2301      	movs	r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	e008      	b.n	8001d1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <xTaskGetSchedulerState+0x38>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d10:	2302      	movs	r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	e001      	b.n	8001d1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d1a:	687b      	ldr	r3, [r7, #4]
    }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000148 	.word	0x20000148
 8001d2c:	20000164 	.word	0x20000164

08001d30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <xTaskPriorityInherit+0xe8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d253      	bcs.n	8001dfc <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db06      	blt.n	8001d6a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <xTaskPriorityInherit+0xe8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f1c3 0205 	rsb	r2, r3, #5
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <xTaskPriorityInherit+0xec>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4299      	cmp	r1, r3
 8001d80:	d12f      	bne.n	8001de2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3304      	adds	r3, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb0e 	bl	80003a8 <uxListRemove>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <xTaskPriorityInherit+0xf0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4013      	ands	r3, r2
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <xTaskPriorityInherit+0xf0>)
 8001da6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <xTaskPriorityInherit+0xe8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <xTaskPriorityInherit+0xf0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <xTaskPriorityInherit+0xf0>)
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <xTaskPriorityInherit+0xec>)
 8001dd2:	441a      	add	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe fa87 	bl	80002ee <vListInsertEnd>
 8001de0:	e004      	b.n	8001dec <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <xTaskPriorityInherit+0xe8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4619      	mov	r1, r3
 8001df0:	2049      	movs	r0, #73	; 0x49
 8001df2:	f001 fcc1 	bl	8003778 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e008      	b.n	8001e0e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <xTaskPriorityInherit+0xe8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d201      	bcs.n	8001e0e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000064 	.word	0x20000064
 8001e1c:	20000068 	.word	0x20000068
 8001e20:	20000144 	.word	0x20000144

08001e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d068      	beq.n	8001f0c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <xTaskPriorityDisinherit+0xf4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d00a      	beq.n	8001e5a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	60fb      	str	r3, [r7, #12]
    }
 8001e56:	bf00      	nop
 8001e58:	e7fe      	b.n	8001e58 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	60bb      	str	r3, [r7, #8]
    }
 8001e74:	bf00      	nop
 8001e76:	e7fe      	b.n	8001e76 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d03e      	beq.n	8001f0c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13a      	bne.n	8001f0c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fa84 	bl	80003a8 <uxListRemove>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	2201      	movs	r2, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <xTaskPriorityDisinherit+0xf8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <xTaskPriorityDisinherit+0xf8>)
 8001eba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	204a      	movs	r0, #74	; 0x4a
 8001ec2:	f001 fc59 	bl	8003778 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f1c3 0205 	rsb	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <xTaskPriorityDisinherit+0xf8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <xTaskPriorityDisinherit+0xf8>)
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <xTaskPriorityDisinherit+0xfc>)
 8001efa:	441a      	add	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	3304      	adds	r3, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f7fe f9f3 	bl	80002ee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f0c:	697b      	ldr	r3, [r7, #20]
    }
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000064 	.word	0x20000064
 8001f1c:	20000144 	.word	0x20000144
 8001f20:	20000068 	.word	0x20000068

08001f24 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8081 	beq.w	8002040 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	60fb      	str	r3, [r7, #12]
    }
 8001f58:	bf00      	nop
 8001f5a:	e7fe      	b.n	8001f5a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d902      	bls.n	8001f6c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e002      	b.n	8001f72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d061      	beq.n	8002040 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d15c      	bne.n	8002040 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10a      	bne.n	8001fa6 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	60bb      	str	r3, [r7, #8]
    }
 8001fa2:	bf00      	nop
 8001fa4:	e7fe      	b.n	8001fa4 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	204a      	movs	r0, #74	; 0x4a
 8001fac:	f001 fbe4 	bl	8003778 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db04      	blt.n	8001fce <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0205 	rsb	r2, r3, #5
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6959      	ldr	r1, [r3, #20]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d12d      	bne.n	8002040 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe f9dd 	bl	80003a8 <uxListRemove>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4013      	ands	r3, r2
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002008:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f90f 	bl	8004230 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002032:	441a      	add	r2, r3
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f7fe f957 	bl	80002ee <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000064 	.word	0x20000064
 800204c:	20000068 	.word	0x20000068
 8002050:	20000144 	.word	0x20000144

08002054 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <pvTaskIncrementMutexHeldCount+0x24>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <pvTaskIncrementMutexHeldCount+0x24>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002066:	3201      	adds	r2, #1
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800206a:	4b03      	ldr	r3, [pc, #12]	; (8002078 <pvTaskIncrementMutexHeldCount+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
    }
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000064 	.word	0x20000064

0800207c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3304      	adds	r3, #4
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f988 	bl	80003a8 <uxListRemove>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <prvAddCurrentTaskToDelayedList+0xdc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4013      	ands	r3, r2
 80020b2:	4a29      	ldr	r2, [pc, #164]	; (8002158 <prvAddCurrentTaskToDelayedList+0xdc>)
 80020b4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d110      	bne.n	80020e0 <prvAddCurrentTaskToDelayedList+0x64>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	211b      	movs	r1, #27
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 f8f2 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4820      	ldr	r0, [pc, #128]	; (800215c <prvAddCurrentTaskToDelayedList+0xe0>)
 80020da:	f7fe f908 	bl	80002ee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80020de:	e032      	b.n	8002146 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d20f      	bcs.n	8002118 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2104      	movs	r1, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 f8d8 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7fe f910 	bl	8000336 <vListInsert>
}
 8002116:	e016      	b.n	8002146 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2104      	movs	r1, #4
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f8c8 	bl	80042b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3304      	adds	r3, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f7fe f900 	bl	8000336 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <prvAddCurrentTaskToDelayedList+0xec>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d202      	bcs.n	8002146 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <prvAddCurrentTaskToDelayedList+0xec>)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000140 	.word	0x20000140
 8002154:	20000064 	.word	0x20000064
 8002158:	20000144 	.word	0x20000144
 800215c:	20000128 	.word	0x20000128
 8002160:	200000f8 	.word	0x200000f8
 8002164:	200000f4 	.word	0x200000f4
 8002168:	2000015c 	.word	0x2000015c

0800216c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002176:	f000 fad5 	bl	8002724 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <xTimerCreateTimerTask+0x54>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <xTimerCreateTimerTask+0x58>)
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2303      	movs	r3, #3
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2300      	movs	r3, #0
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	490d      	ldr	r1, [pc, #52]	; (80021c8 <xTimerCreateTimerTask+0x5c>)
 8002192:	480e      	ldr	r0, [pc, #56]	; (80021cc <xTimerCreateTimerTask+0x60>)
 8002194:	f7ff f812 	bl	80011bc <xTaskCreate>
 8002198:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	603b      	str	r3, [r7, #0]
    }
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80021b6:	687b      	ldr	r3, [r7, #4]
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000198 	.word	0x20000198
 80021c4:	2000019c 	.word	0x2000019c
 80021c8:	08005144 	.word	0x08005144
 80021cc:	08002305 	.word	0x08002305

080021d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <xTimerGenericCommand+0x2e>
        __asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	623b      	str	r3, [r7, #32]
    }
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <xTimerGenericCommand+0x98>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02a      	beq.n	800225c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b05      	cmp	r3, #5
 8002216:	dc18      	bgt.n	800224a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002218:	f7ff fd6c 	bl	8001cf4 <xTaskGetSchedulerState>
 800221c:	4603      	mov	r3, r0
 800221e:	2b02      	cmp	r3, #2
 8002220:	d109      	bne.n	8002236 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <xTimerGenericCommand+0x98>)
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	f107 0114 	add.w	r1, r7, #20
 800222a:	2300      	movs	r3, #0
 800222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222e:	f7fe fa07 	bl	8000640 <xQueueGenericSend>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24
 8002234:	e012      	b.n	800225c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <xTimerGenericCommand+0x98>)
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	f107 0114 	add.w	r1, r7, #20
 800223e:	2300      	movs	r3, #0
 8002240:	2200      	movs	r2, #0
 8002242:	f7fe f9fd 	bl	8000640 <xQueueGenericSend>
 8002246:	6278      	str	r0, [r7, #36]	; 0x24
 8002248:	e008      	b.n	800225c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <xTimerGenericCommand+0x98>)
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	f107 0114 	add.w	r1, r7, #20
 8002252:	2300      	movs	r3, #0
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	f7fe fb19 	bl	800088c <xQueueGenericSendFromISR>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800225e:	4618      	mov	r0, r3
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000198 	.word	0x20000198

0800226c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <prvProcessExpiredTimer+0x94>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3304      	adds	r3, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f88f 	bl	80003a8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d022      	beq.n	80022de <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	18d1      	adds	r1, r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f000 f8d1 	bl	800244c <prvInsertTimerInActiveList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01f      	beq.n	80022f0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80022b0:	2300      	movs	r3, #0
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	2100      	movs	r1, #0
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff88 	bl	80021d0 <xTimerGenericCommand>
 80022c0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d113      	bne.n	80022f0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	60fb      	str	r3, [r7, #12]
    }
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	6978      	ldr	r0, [r7, #20]
 80022f6:	4798      	blx	r3
    }
 80022f8:	bf00      	nop
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000190 	.word	0x20000190

08002304 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800230c:	f107 0308 	add.w	r3, r7, #8
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f857 	bl	80023c4 <prvGetNextExpireTime>
 8002316:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4619      	mov	r1, r3
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f803 	bl	8002328 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002322:	f000 f8d5 	bl	80024d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002326:	e7f1      	b.n	800230c <prvTimerTask+0x8>

08002328 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002332:	f7ff f909 	bl	8001548 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f866 	bl	800240c <prvSampleTimeNow>
 8002340:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d130      	bne.n	80023aa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10a      	bne.n	8002364 <prvProcessTimerOrBlockTask+0x3c>
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	429a      	cmp	r2, r3
 8002354:	d806      	bhi.n	8002364 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002356:	f7ff f905 	bl	8001564 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff85 	bl	800226c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002362:	e024      	b.n	80023ae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <prvProcessTimerOrBlockTask+0x90>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <prvProcessTimerOrBlockTask+0x50>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <prvProcessTimerOrBlockTask+0x52>
 8002378:	2300      	movs	r3, #0
 800237a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <prvProcessTimerOrBlockTask+0x94>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fee3 	bl	8001154 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800238e:	f7ff f8e9 	bl	8001564 <xTaskResumeAll>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <prvProcessTimerOrBlockTask+0x98>)
 800239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	f3bf 8f6f 	isb	sy
    }
 80023a8:	e001      	b.n	80023ae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80023aa:	f7ff f8db 	bl	8001564 <xTaskResumeAll>
    }
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000194 	.word	0x20000194
 80023bc:	20000198 	.word	0x20000198
 80023c0:	e000ed04 	.word	0xe000ed04

080023c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <prvGetNextExpireTime+0x44>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <prvGetNextExpireTime+0x16>
 80023d6:	2201      	movs	r2, #1
 80023d8:	e000      	b.n	80023dc <prvGetNextExpireTime+0x18>
 80023da:	2200      	movs	r2, #0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <prvGetNextExpireTime+0x44>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e001      	b.n	80023f8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80023f8:	68fb      	ldr	r3, [r7, #12]
    }
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000190 	.word	0x20000190

0800240c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002414:	f7ff f946 	bl	80016a4 <xTaskGetTickCount>
 8002418:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <prvSampleTimeNow+0x3c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d205      	bcs.n	8002430 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002424:	f000 f91a 	bl	800265c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <prvSampleTimeNow+0x3c>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800243c:	68fb      	ldr	r3, [r7, #12]
    }
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200001a0 	.word	0x200001a0

0800244c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	d812      	bhi.n	8002498 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d302      	bcc.n	8002486 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002480:	2301      	movs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e01b      	b.n	80024be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <prvInsertTimerInActiveList+0x7c>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f7fd ff50 	bl	8000336 <vListInsert>
 8002496:	e012      	b.n	80024be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d206      	bcs.n	80024ae <prvInsertTimerInActiveList+0x62>
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d302      	bcc.n	80024ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e007      	b.n	80024be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <prvInsertTimerInActiveList+0x80>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7fd ff3c 	bl	8000336 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024be:	697b      	ldr	r3, [r7, #20]
    }
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000194 	.word	0x20000194
 80024cc:	20000190 	.word	0x20000190

080024d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024d6:	e0ae      	b.n	8002636 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f2c0 80aa 	blt.w	8002634 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fd ff59 	bl	80003a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff87 	bl	800240c <prvSampleTimeNow>
 80024fe:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b09      	cmp	r3, #9
 8002504:	f200 8097 	bhi.w	8002636 <prvProcessReceivedCommands+0x166>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <prvProcessReceivedCommands+0x40>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002539 	.word	0x08002539
 8002514:	08002539 	.word	0x08002539
 8002518:	08002539 	.word	0x08002539
 800251c:	080025ad 	.word	0x080025ad
 8002520:	080025c1 	.word	0x080025c1
 8002524:	0800260b 	.word	0x0800260b
 8002528:	08002539 	.word	0x08002539
 800252c:	08002539 	.word	0x08002539
 8002530:	080025ad 	.word	0x080025ad
 8002534:	080025c1 	.word	0x080025c1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	18d1      	adds	r1, r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002558:	f7ff ff78 	bl	800244c <prvInsertTimerInActiveList>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d069      	beq.n	8002636 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002568:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05e      	beq.n	8002636 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	441a      	add	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	2100      	movs	r1, #0
 8002588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800258a:	f7ff fe21 	bl	80021d0 <xTimerGenericCommand>
 800258e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d14f      	bne.n	8002636 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	61bb      	str	r3, [r7, #24]
    }
 80025a8:	bf00      	nop
 80025aa:	e7fe      	b.n	80025aa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80025be:	e03a      	b.n	8002636 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	617b      	str	r3, [r7, #20]
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	18d1      	adds	r1, r2, r3
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002604:	f7ff ff22 	bl	800244c <prvInsertTimerInActiveList>
                        break;
 8002608:	e015      	b.n	8002636 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800261a:	f000 fbe5 	bl	8002de8 <vPortFree>
 800261e:	e00a      	b.n	8002636 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002632:	e000      	b.n	8002636 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002634:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <prvProcessReceivedCommands+0x188>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f107 0108 	add.w	r1, r7, #8
 800263e:	2200      	movs	r2, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe f9e1 	bl	8000a08 <xQueueReceive>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f af45 	bne.w	80024d8 <prvProcessReceivedCommands+0x8>
        }
    }
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000198 	.word	0x20000198

0800265c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002662:	e048      	b.n	80026f6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <prvSwitchTimerLists+0xc0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <prvSwitchTimerLists+0xc0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3304      	adds	r3, #4
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fe93 	bl	80003a8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02e      	beq.n	80026f6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d90e      	bls.n	80026c8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <prvSwitchTimerLists+0xc0>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fd fe38 	bl	8000336 <vListInsert>
 80026c6:	e016      	b.n	80026f6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2300      	movs	r3, #0
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	2100      	movs	r1, #0
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fd7c 	bl	80021d0 <xTimerGenericCommand>
 80026d8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	603b      	str	r3, [r7, #0]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <prvSwitchTimerLists+0xc0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1b1      	bne.n	8002664 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <prvSwitchTimerLists+0xc0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <prvSwitchTimerLists+0xc4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <prvSwitchTimerLists+0xc0>)
 800270c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <prvSwitchTimerLists+0xc4>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	6013      	str	r3, [r2, #0]
    }
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000190 	.word	0x20000190
 8002720:	20000194 	.word	0x20000194

08002724 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002728:	f000 f95e 	bl	80029e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <prvCheckForValidListAndQueue+0x54>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002734:	4811      	ldr	r0, [pc, #68]	; (800277c <prvCheckForValidListAndQueue+0x58>)
 8002736:	f7fd fdad 	bl	8000294 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800273a:	4811      	ldr	r0, [pc, #68]	; (8002780 <prvCheckForValidListAndQueue+0x5c>)
 800273c:	f7fd fdaa 	bl	8000294 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <prvCheckForValidListAndQueue+0x60>)
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <prvCheckForValidListAndQueue+0x58>)
 8002744:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <prvCheckForValidListAndQueue+0x64>)
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <prvCheckForValidListAndQueue+0x5c>)
 800274a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800274c:	2200      	movs	r2, #0
 800274e:	210c      	movs	r1, #12
 8002750:	200a      	movs	r0, #10
 8002752:	f7fd febb 	bl	80004cc <xQueueGenericCreate>
 8002756:	4603      	mov	r3, r0
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <prvCheckForValidListAndQueue+0x54>)
 800275a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <prvCheckForValidListAndQueue+0x54>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <prvCheckForValidListAndQueue+0x54>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4908      	ldr	r1, [pc, #32]	; (800278c <prvCheckForValidListAndQueue+0x68>)
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fcc0 	bl	80010f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002770:	f000 f96a 	bl	8002a48 <vPortExitCritical>
    }
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000198 	.word	0x20000198
 800277c:	20000168 	.word	0x20000168
 8002780:	2000017c 	.word	0x2000017c
 8002784:	20000190 	.word	0x20000190
 8002788:	20000194 	.word	0x20000194
 800278c:	0800514c 	.word	0x0800514c

08002790 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3b04      	subs	r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3b04      	subs	r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0201 	bic.w	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b04      	subs	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80027c0:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <pxPortInitialiseStack+0x64>)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3b14      	subs	r3, #20
 80027ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3b04      	subs	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f06f 0202 	mvn.w	r2, #2
 80027de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3b20      	subs	r3, #32
 80027e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	080027f9 	.word	0x080027f9

080027f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <prvTaskExitError+0x54>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280a:	d00a      	beq.n	8002822 <prvTaskExitError+0x2a>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <prvTaskExitError+0x28>
        __asm volatile
 8002822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	60bb      	str	r3, [r7, #8]
    }
 8002834:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002836:	bf00      	nop
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0fc      	beq.n	8002838 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000004 	.word	0x20000004

08002850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <pxCurrentTCBConst2>)
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285a:	f380 8809 	msr	PSP, r0
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f380 8811 	msr	BASEPRI, r0
 800286a:	4770      	bx	lr
 800286c:	f3af 8000 	nop.w

08002870 <pxCurrentTCBConst2>:
 8002870:	20000064 	.word	0x20000064
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop

08002878 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <prvPortStartFirstTask+0x24>)
 800287a:	6800      	ldr	r0, [r0, #0]
 800287c:	6800      	ldr	r0, [r0, #0]
 800287e:	f380 8808 	msr	MSP, r0
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f380 8814 	msr	CONTROL, r0
 800288a:	b662      	cpsie	i
 800288c:	b661      	cpsie	f
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	df00      	svc	0
 8002898:	bf00      	nop
 800289a:	0000      	.short	0x0000
 800289c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop

080028a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028aa:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <xPortStartScheduler+0x120>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <xPortStartScheduler+0x124>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10a      	bne.n	80028ca <xPortStartScheduler+0x26>
        __asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	613b      	str	r3, [r7, #16]
    }
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <xPortStartScheduler+0x120>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	; (80029cc <xPortStartScheduler+0x128>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10a      	bne.n	80028ea <xPortStartScheduler+0x46>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	60fb      	str	r3, [r7, #12]
    }
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <xPortStartScheduler+0x12c>)
 80028ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <xPortStartScheduler+0x130>)
 8002910:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <xPortStartScheduler+0x134>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002918:	e009      	b.n	800292e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <xPortStartScheduler+0x134>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <xPortStartScheduler+0x134>)
 8002922:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d0ef      	beq.n	800291a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <xPortStartScheduler+0x134>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	d00a      	beq.n	800295c <xPortStartScheduler+0xb8>
        __asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	60bb      	str	r3, [r7, #8]
    }
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <xPortStartScheduler+0x134>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <xPortStartScheduler+0x134>)
 8002964:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <xPortStartScheduler+0x134>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <xPortStartScheduler+0x134>)
 8002970:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <xPortStartScheduler+0x138>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <xPortStartScheduler+0x138>)
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002984:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <xPortStartScheduler+0x138>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <xPortStartScheduler+0x138>)
 800298c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002990:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002992:	f000 f8e3 	bl	8002b5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <xPortStartScheduler+0x13c>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800299c:	f000 f8f8 	bl	8002b90 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <xPortStartScheduler+0x140>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <xPortStartScheduler+0x140>)
 80029a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80029aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029ac:	f7ff ff64 	bl	8002878 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029b0:	f7fe ff44 	bl	800183c <vTaskSwitchContext>
    prvTaskExitError();
 80029b4:	f7ff ff20 	bl	80027f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	410fc271 	.word	0x410fc271
 80029cc:	410fc270 	.word	0x410fc270
 80029d0:	e000e400 	.word	0xe000e400
 80029d4:	200001a4 	.word	0x200001a4
 80029d8:	200001a8 	.word	0x200001a8
 80029dc:	e000ed20 	.word	0xe000ed20
 80029e0:	20000004 	.word	0x20000004
 80029e4:	e000ef34 	.word	0xe000ef34

080029e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
        __asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
    }
 8002a00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <vPortEnterCritical+0x58>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <vPortEnterCritical+0x58>)
 8002a0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <vPortEnterCritical+0x58>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10f      	bne.n	8002a34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <vPortEnterCritical+0x5c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <vPortEnterCritical+0x4c>
        __asm volatile
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	603b      	str	r3, [r7, #0]
    }
 8002a30:	bf00      	nop
 8002a32:	e7fe      	b.n	8002a32 <vPortEnterCritical+0x4a>
    }
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	20000004 	.word	0x20000004
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <vPortExitCritical+0x50>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <vPortExitCritical+0x24>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	607b      	str	r3, [r7, #4]
    }
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <vPortExitCritical+0x50>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <vPortExitCritical+0x50>)
 8002a74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <vPortExitCritical+0x50>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <vPortExitCritical+0x42>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f383 8811 	msr	BASEPRI, r3
    }
 8002a88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002aa0:	f3ef 8009 	mrs	r0, PSP
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <pxCurrentTCBConst>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f01e 0f10 	tst.w	lr, #16
 8002ab0:	bf08      	it	eq
 8002ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	6010      	str	r0, [r2, #0]
 8002abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ac4:	f380 8811 	msr	BASEPRI, r0
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f7fe feb4 	bl	800183c <vTaskSwitchContext>
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f380 8811 	msr	BASEPRI, r0
 8002adc:	bc09      	pop	{r0, r3}
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	6808      	ldr	r0, [r1, #0]
 8002ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae6:	f01e 0f10 	tst.w	lr, #16
 8002aea:	bf08      	it	eq
 8002aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002af0:	f380 8809 	msr	PSP, r0
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w

08002b00 <pxCurrentTCBConst>:
 8002b00:	20000064 	.word	0x20000064
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	607b      	str	r3, [r7, #4]
    }
 8002b20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002b22:	f001 fa6b 	bl	8003ffc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b26:	f7fe fdcd 	bl	80016c4 <xTaskIncrementTick>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002b30:	f001 fac2 	bl	80040b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <SysTick_Handler+0x50>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e001      	b.n	8002b42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002b3e:	f001 fa9f 	bl	8004080 <SEGGER_SYSVIEW_RecordExitISR>
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f383 8811 	msr	BASEPRI, r3
    }
 8002b4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <vPortSetupTimerInterrupt+0x28>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <vPortSetupTimerInterrupt+0x2c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <vPortSetupTimerInterrupt+0x30>)
 8002b6e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002b72:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <vPortSetupTimerInterrupt+0x28>)
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e010 	.word	0xe000e010
 8002b88:	e000e018 	.word	0xe000e018
 8002b8c:	e000e014 	.word	0xe000e014

08002b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ba0 <vPortEnableVFP+0x10>
 8002b94:	6801      	ldr	r1, [r0, #0]
 8002b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b9a:	6001      	str	r1, [r0, #0]
 8002b9c:	4770      	bx	lr
 8002b9e:	0000      	.short	0x0000
 8002ba0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop

08002ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002bae:	f3ef 8305 	mrs	r3, IPSR
 8002bb2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d914      	bls.n	8002be4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <vPortValidateInterruptPriority+0x70>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <vPortValidateInterruptPriority+0x74>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	7afa      	ldrb	r2, [r7, #11]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20a      	bcs.n	8002be4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
    }
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <vPortValidateInterruptPriority+0x78>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <vPortValidateInterruptPriority+0x7c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d90a      	bls.n	8002c0a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	603b      	str	r3, [r7, #0]
    }
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <vPortValidateInterruptPriority+0x60>
    }
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e3f0 	.word	0xe000e3f0
 8002c1c:	200001a4 	.word	0x200001a4
 8002c20:	e000ed0c 	.word	0xe000ed0c
 8002c24:	200001a8 	.word	0x200001a8

08002c28 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002c34:	f7fe fc88 	bl	8001548 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c38:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <pvPortMalloc+0x1a8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002c40:	f000 f934 	bl	8002eac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c44:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <pvPortMalloc+0x1ac>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 80a7 	bne.w	8002da0 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02d      	beq.n	8002cb4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002c58:	2208      	movs	r2, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d227      	bcs.n	8002cb4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002c64:	2208      	movs	r2, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d021      	beq.n	8002cba <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f023 0307 	bic.w	r3, r3, #7
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d214      	bcs.n	8002cae <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f023 0307 	bic.w	r3, r3, #7
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <pvPortMalloc+0x92>
        __asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	617b      	str	r3, [r7, #20]
    }
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cb2:	e002      	b.n	8002cba <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	e000      	b.n	8002cbc <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cba:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d06e      	beq.n	8002da0 <pvPortMalloc+0x178>
 8002cc2:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <pvPortMalloc+0x1b0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d869      	bhi.n	8002da0 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <pvPortMalloc+0x1b4>)
 8002cce:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002cd0:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <pvPortMalloc+0x1b4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cd6:	e004      	b.n	8002ce2 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d903      	bls.n	8002cf4 <pvPortMalloc+0xcc>
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f1      	bne.n	8002cd8 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <pvPortMalloc+0x1a8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d050      	beq.n	8002da0 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2208      	movs	r2, #8
 8002d04:	4413      	add	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	2308      	movs	r3, #8
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d91f      	bls.n	8002d60 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <pvPortMalloc+0x120>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	613b      	str	r3, [r7, #16]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d5a:	69b8      	ldr	r0, [r7, #24]
 8002d5c:	f000 f908 	bl	8002f70 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <pvPortMalloc+0x1b0>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <pvPortMalloc+0x1b0>)
 8002d6c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <pvPortMalloc+0x1b0>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <pvPortMalloc+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <pvPortMalloc+0x1b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <pvPortMalloc+0x1b8>)
 8002d80:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <pvPortMalloc+0x1ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <pvPortMalloc+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <pvPortMalloc+0x1bc>)
 8002d9e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002da0:	f7fe fbe0 	bl	8001564 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <pvPortMalloc+0x19c>
        __asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	60fb      	str	r3, [r7, #12]
    }
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <pvPortMalloc+0x19a>
    return pvReturn;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20012db4 	.word	0x20012db4
 8002dd4:	20012dc8 	.word	0x20012dc8
 8002dd8:	20012db8 	.word	0x20012db8
 8002ddc:	20012dac 	.word	0x20012dac
 8002de0:	20012dbc 	.word	0x20012dbc
 8002de4:	20012dc0 	.word	0x20012dc0

08002de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04d      	beq.n	8002e96 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	425b      	negs	r3, r3
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4413      	add	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <vPortFree+0xb8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <vPortFree+0x44>
        __asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	60fb      	str	r3, [r7, #12]
    }
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <vPortFree+0x62>
        __asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60bb      	str	r3, [r7, #8]
    }
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <vPortFree+0xb8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01e      	beq.n	8002e96 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11a      	bne.n	8002e96 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <vPortFree+0xb8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002e70:	f7fe fb6a 	bl	8001548 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <vPortFree+0xbc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <vPortFree+0xbc>)
 8002e80:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e82:	6938      	ldr	r0, [r7, #16]
 8002e84:	f000 f874 	bl	8002f70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <vPortFree+0xc0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <vPortFree+0xc0>)
 8002e90:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002e92:	f7fe fb67 	bl	8001564 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20012dc8 	.word	0x20012dc8
 8002ea4:	20012db8 	.word	0x20012db8
 8002ea8:	20012dc4 	.word	0x20012dc4

08002eac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eb2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002eb6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <prvHeapInit+0xac>)
 8002eba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3307      	adds	r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0307 	bic.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <prvHeapInit+0xac>)
 8002edc:	4413      	add	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <prvHeapInit+0xb0>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002eea:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <prvHeapInit+0xb0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002ef8:	2208      	movs	r2, #8
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <prvHeapInit+0xb4>)
 8002f0c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <prvHeapInit+0xb4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <prvHeapInit+0xb4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <prvHeapInit+0xb4>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <prvHeapInit+0xb8>)
 8002f3a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <prvHeapInit+0xbc>)
 8002f42:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <prvHeapInit+0xc0>)
 8002f46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f4a:	601a      	str	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	200001ac 	.word	0x200001ac
 8002f5c:	20012dac 	.word	0x20012dac
 8002f60:	20012db4 	.word	0x20012db4
 8002f64:	20012dbc 	.word	0x20012dbc
 8002f68:	20012db8 	.word	0x20012db8
 8002f6c:	20012dc8 	.word	0x20012dc8

08002f70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <prvInsertBlockIntoFreeList+0xac>)
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e002      	b.n	8002f84 <prvInsertBlockIntoFreeList+0x14>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d8f7      	bhi.n	8002f7e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d108      	bne.n	8002fb2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d118      	bne.n	8002ff8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <prvInsertBlockIntoFreeList+0xb0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d00d      	beq.n	8002fee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	441a      	add	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e008      	b.n	8003000 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <prvInsertBlockIntoFreeList+0xb0>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e003      	b.n	8003000 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d002      	beq.n	800300e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20012dac 	.word	0x20012dac
 8003020:	20012db4 	.word	0x20012db4

08003024 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003032:	2205      	movs	r2, #5
 8003034:	492b      	ldr	r1, [pc, #172]	; (80030e4 <SYSVIEW_AddTask+0xc0>)
 8003036:	68b8      	ldr	r0, [r7, #8]
 8003038:	f002 f84e 	bl	80050d8 <memcmp>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04b      	beq.n	80030da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b07      	cmp	r3, #7
 8003048:	d903      	bls.n	8003052 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800304a:	4828      	ldr	r0, [pc, #160]	; (80030ec <SYSVIEW_AddTask+0xc8>)
 800304c:	f001 fa7e 	bl	800454c <SEGGER_SYSVIEW_Warn>
    return;
 8003050:	e044      	b.n	80030dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4926      	ldr	r1, [pc, #152]	; (80030f0 <SYSVIEW_AddTask+0xcc>)
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4921      	ldr	r1, [pc, #132]	; (80030f0 <SYSVIEW_AddTask+0xcc>)
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3304      	adds	r3, #4
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	491b      	ldr	r1, [pc, #108]	; (80030f0 <SYSVIEW_AddTask+0xcc>)
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3308      	adds	r3, #8
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4916      	ldr	r1, [pc, #88]	; (80030f0 <SYSVIEW_AddTask+0xcc>)
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	330c      	adds	r3, #12
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4910      	ldr	r1, [pc, #64]	; (80030f0 <SYSVIEW_AddTask+0xcc>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3310      	adds	r3, #16
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <SYSVIEW_AddTask+0xc4>)
 80030c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f80e 	bl	80030f4 <SYSVIEW_SendTaskInfo>
 80030d8:	e000      	b.n	80030dc <SYSVIEW_AddTask+0xb8>
    return;
 80030da:	bf00      	nop

}
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	08005154 	.word	0x08005154
 80030e8:	20012e6c 	.word	0x20012e6c
 80030ec:	0800515c 	.word	0x0800515c
 80030f0:	20012dcc 	.word	0x20012dcc

080030f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	2214      	movs	r2, #20
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f002 f802 	bl	8005114 <memset>
  TaskInfo.TaskID     = TaskID;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fe3d 	bl	8003da8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	; 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <_DoInit+0x98>)
 8003140:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <_DoInit+0x9c>)
 8003152:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <_DoInit+0xa0>)
 8003158:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003160:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <_DoInit+0x9c>)
 8003178:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <_DoInit+0xa4>)
 800317e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2210      	movs	r2, #16
 8003184:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3307      	adds	r3, #7
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <_DoInit+0xa8>)
 800319e:	6810      	ldr	r0, [r2, #0]
 80031a0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80031a2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <_DoInit+0xac>)
 80031aa:	6810      	ldr	r0, [r2, #0]
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	8891      	ldrh	r1, [r2, #4]
 80031b0:	7992      	ldrb	r2, [r2, #6]
 80031b2:	8099      	strh	r1, [r3, #4]
 80031b4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80031b6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80031c0:	f3bf 8f5f 	dmb	sy
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	20012e70 	.word	0x20012e70
 80031d4:	080051ac 	.word	0x080051ac
 80031d8:	20012f18 	.word	0x20012f18
 80031dc:	20013318 	.word	0x20013318
 80031e0:	080051b8 	.word	0x080051b8
 80031e4:	080051bc 	.word	0x080051bc

080031e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <SEGGER_RTT_ReadNoLock+0x108>)
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <SEGGER_RTT_ReadNoLock+0x1e>
 8003202:	f7ff ff99 	bl	8003138 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3360      	adds	r3, #96	; 0x60
 8003212:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	429a      	cmp	r2, r3
 8003232:	d92b      	bls.n	800328c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4293      	cmp	r3, r2
 8003244:	bf28      	it	cs
 8003246:	4613      	movcs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	4413      	add	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6939      	ldr	r1, [r7, #16]
 8003258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800325a:	f001 ff4d 	bl	80050f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800325e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4413      	add	r3, r2
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4413      	add	r3, r2
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	429a      	cmp	r2, r3
 8003286:	d101      	bne.n	800328c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4293      	cmp	r3, r2
 800329a:	bf28      	it	cs
 800329c:	4613      	movcs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	4413      	add	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6939      	ldr	r1, [r7, #16]
 80032b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b6:	f001 ff1f 	bl	80050f8 <memcpy>
    NumBytesRead += NumBytesRem;
 80032ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	4413      	add	r3, r2
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4413      	add	r3, r2
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4413      	add	r3, r2
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3730      	adds	r7, #48	; 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20012e70 	.word	0x20012e70

080032f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003304:	e002      	b.n	800330c <_EncodeStr+0x18>
    Len++;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f6      	bne.n	8003306 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <_EncodeStr+0x30>
    Len = Limit;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2bfe      	cmp	r3, #254	; 0xfe
 8003328:	d806      	bhi.n	8003338 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e011      	b.n	800335c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	60fa      	str	r2, [r7, #12]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	60fa      	str	r2, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	0a19      	lsrs	r1, r3, #8
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	b2ca      	uxtb	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003360:	e00a      	b.n	8003378 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	1c53      	adds	r3, r2, #1
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	60f9      	str	r1, [r7, #12]
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	701a      	strb	r2, [r3, #0]
    n++;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3f0      	bcc.n	8003362 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003380:	68fb      	ldr	r3, [r7, #12]
}
 8003382:	4618      	mov	r0, r3
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033ae:	4b36      	ldr	r3, [pc, #216]	; (8003488 <_HandleIncomingPacket+0xe0>)
 80033b0:	7e1b      	ldrb	r3, [r3, #24]
 80033b2:	4618      	mov	r0, r3
 80033b4:	1cfb      	adds	r3, r7, #3
 80033b6:	2201      	movs	r2, #1
 80033b8:	4619      	mov	r1, r3
 80033ba:	f7ff ff15 	bl	80031e8 <SEGGER_RTT_ReadNoLock>
 80033be:	4603      	mov	r3, r0
 80033c0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dd54      	ble.n	8003472 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d032      	beq.n	8003434 <_HandleIncomingPacket+0x8c>
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	dc42      	bgt.n	8003458 <_HandleIncomingPacket+0xb0>
 80033d2:	2b07      	cmp	r3, #7
 80033d4:	dc16      	bgt.n	8003404 <_HandleIncomingPacket+0x5c>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	dd3e      	ble.n	8003458 <_HandleIncomingPacket+0xb0>
 80033da:	3b01      	subs	r3, #1
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d83b      	bhi.n	8003458 <_HandleIncomingPacket+0xb0>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <_HandleIncomingPacket+0x40>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800340b 	.word	0x0800340b
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003417 	.word	0x08003417
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003423 	.word	0x08003423
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800342f 	.word	0x0800342f
 8003404:	2b7f      	cmp	r3, #127	; 0x7f
 8003406:	d036      	beq.n	8003476 <_HandleIncomingPacket+0xce>
 8003408:	e026      	b.n	8003458 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800340a:	f000 fb53 	bl	8003ab4 <SEGGER_SYSVIEW_Start>
      break;
 800340e:	e037      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003410:	f000 fc0a 	bl	8003c28 <SEGGER_SYSVIEW_Stop>
      break;
 8003414:	e034      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003416:	f000 fdbf 	bl	8003f98 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800341a:	e031      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800341c:	f000 fda8 	bl	8003f70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003420:	e02e      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003422:	f000 fc27 	bl	8003c74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003426:	e02b      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003428:	f001 f852 	bl	80044d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800342c:	e028      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800342e:	f001 f831 	bl	8004494 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003432:	e025      	b.n	8003480 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <_HandleIncomingPacket+0xe0>)
 8003436:	7e1b      	ldrb	r3, [r3, #24]
 8003438:	4618      	mov	r0, r3
 800343a:	1cfb      	adds	r3, r7, #3
 800343c:	2201      	movs	r2, #1
 800343e:	4619      	mov	r1, r3
 8003440:	f7ff fed2 	bl	80031e8 <SEGGER_RTT_ReadNoLock>
 8003444:	4603      	mov	r3, r0
 8003446:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dd15      	ble.n	800347a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 ff9f 	bl	8004394 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003456:	e010      	b.n	800347a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	da0e      	bge.n	800347e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <_HandleIncomingPacket+0xe0>)
 8003462:	7e1b      	ldrb	r3, [r3, #24]
 8003464:	4618      	mov	r0, r3
 8003466:	1cfb      	adds	r3, r7, #3
 8003468:	2201      	movs	r2, #1
 800346a:	4619      	mov	r1, r3
 800346c:	f7ff febc 	bl	80031e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003470:	e005      	b.n	800347e <_HandleIncomingPacket+0xd6>
    }
  }
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <_HandleIncomingPacket+0xd8>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <_HandleIncomingPacket+0xd8>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <_HandleIncomingPacket+0xd8>
      break;
 800347e:	bf00      	nop
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20013328 	.word	0x20013328

0800348c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003492:	2301      	movs	r3, #1
 8003494:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a6:	e00b      	b.n	80034c0 <_TrySendOverflowPacket+0x34>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	09db      	lsrs	r3, r3, #7
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b7f      	cmp	r3, #127	; 0x7f
 80034c4:	d8f0      	bhi.n	80034a8 <_TrySendOverflowPacket+0x1c>
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <_TrySendOverflowPacket+0xe0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	e00b      	b.n	8003508 <_TrySendOverflowPacket+0x7c>
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	6279      	str	r1, [r7, #36]	; 0x24
 80034fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	09db      	lsrs	r3, r3, #7
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b7f      	cmp	r3, #127	; 0x7f
 800350c:	d8f0      	bhi.n	80034f0 <_TrySendOverflowPacket+0x64>
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	627a      	str	r2, [r7, #36]	; 0x24
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	4618      	mov	r0, r3
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	461a      	mov	r2, r3
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	f7fc fe5e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003534:	4603      	mov	r3, r0
 8003536:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3b01      	subs	r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e004      	b.n	800355c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <_TrySendOverflowPacket+0xdc>)
 800355a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800355c:	693b      	ldr	r3, [r7, #16]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20013328 	.word	0x20013328
 800356c:	e0001004 	.word	0xe0001004

08003570 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800357c:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <_SendPacket+0x1c0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d010      	beq.n	80035a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <_SendPacket+0x1c0>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a3 	beq.w	80036d4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800358e:	4b68      	ldr	r3, [pc, #416]	; (8003730 <_SendPacket+0x1c0>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d109      	bne.n	80035aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003596:	f7ff ff79 	bl	800348c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <_SendPacket+0x1c0>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 809a 	bne.w	80036d8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80035a4:	e001      	b.n	80035aa <_SendPacket+0x3a>
    goto Send;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <_SendPacket+0x3c>
Send:
 80035aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b1f      	cmp	r3, #31
 80035b0:	d809      	bhi.n	80035c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <_SendPacket+0x1c0>)
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 808b 	bne.w	80036dc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b17      	cmp	r3, #23
 80035ca:	d807      	bhi.n	80035dc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e03d      	b.n	8003658 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b7f      	cmp	r3, #127	; 0x7f
 80035e8:	d912      	bls.n	8003610 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	09da      	lsrs	r2, r3, #7
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	3a01      	subs	r2, #1
 8003602:	60fa      	str	r2, [r7, #12]
 8003604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e006      	b.n	800361e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b7f      	cmp	r3, #127	; 0x7f
 8003622:	d912      	bls.n	800364a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	09da      	lsrs	r2, r3, #7
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	3a01      	subs	r2, #1
 800363c:	60fa      	str	r2, [r7, #12]
 800363e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e006      	b.n	8003658 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3b01      	subs	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <_SendPacket+0x1c4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <_SendPacket+0x1c0>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	e00b      	b.n	800368a <_SendPacket+0x11a>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	6279      	str	r1, [r7, #36]	; 0x24
 800367c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	09db      	lsrs	r3, r3, #7
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2b7f      	cmp	r3, #127	; 0x7f
 800368e:	d8f0      	bhi.n	8003672 <_SendPacket+0x102>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	627a      	str	r2, [r7, #36]	; 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <_SendPacket+0x1c0>)
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	4618      	mov	r0, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	f7fc fd9e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80036b4:	4603      	mov	r3, r0
 80036b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <_SendPacket+0x1c0>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e00b      	b.n	80036de <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <_SendPacket+0x1c0>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <_SendPacket+0x1c0>)
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e004      	b.n	80036de <_SendPacket+0x16e>
    goto SendDone;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <_SendPacket+0x16e>
      goto SendDone;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <_SendPacket+0x16e>
      goto SendDone;
 80036dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <_SendPacket+0x1c0>)
 80036e0:	7e1b      	ldrb	r3, [r3, #24]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <_SendPacket+0x1c8>)
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	336c      	adds	r3, #108	; 0x6c
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <_SendPacket+0x1c0>)
 80036f6:	7e1b      	ldrb	r3, [r3, #24]
 80036f8:	4618      	mov	r0, r3
 80036fa:	490f      	ldr	r1, [pc, #60]	; (8003738 <_SendPacket+0x1c8>)
 80036fc:	4603      	mov	r3, r0
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4403      	add	r3, r0
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	440b      	add	r3, r1
 8003706:	3370      	adds	r3, #112	; 0x70
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d00b      	beq.n	8003726 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <_SendPacket+0x1c0>)
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <_SendPacket+0x1c0>)
 8003718:	2201      	movs	r2, #1
 800371a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800371c:	f7ff fe44 	bl	80033a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <_SendPacket+0x1c0>)
 8003722:	2200      	movs	r2, #0
 8003724:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20013328 	.word	0x20013328
 8003734:	e0001004 	.word	0xe0001004
 8003738:	20012e70 	.word	0x20012e70

0800373c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003744:	f3ef 8311 	mrs	r3, BASEPRI
 8003748:	f04f 0120 	mov.w	r1, #32
 800374c:	f381 8811 	msr	BASEPRI, r1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4808      	ldr	r0, [pc, #32]	; (8003774 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003754:	f7ff fe1b 	bl	800338e <_PreparePacket>
 8003758:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7ff ff06 	bl	8003570 <_SendPacket>
  RECORD_END();
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f383 8811 	msr	BASEPRI, r3
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20013358 	.word	0x20013358

08003778 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003782:	f3ef 8311 	mrs	r3, BASEPRI
 8003786:	f04f 0120 	mov.w	r1, #32
 800378a:	f381 8811 	msr	BASEPRI, r1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	4816      	ldr	r0, [pc, #88]	; (80037ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003792:	f7ff fdfc 	bl	800338e <_PreparePacket>
 8003796:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e00b      	b.n	80037be <SEGGER_SYSVIEW_RecordU32+0x46>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	61f9      	str	r1, [r7, #28]
 80037b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	09db      	lsrs	r3, r3, #7
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b7f      	cmp	r3, #127	; 0x7f
 80037c2:	d8f0      	bhi.n	80037a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	61fa      	str	r2, [r7, #28]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	6938      	ldr	r0, [r7, #16]
 80037da:	f7ff fec9 	bl	8003570 <_SendPacket>
  RECORD_END();
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f383 8811 	msr	BASEPRI, r3
}
 80037e4:	bf00      	nop
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20013358 	.word	0x20013358

080037f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80037fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003800:	f04f 0120 	mov.w	r1, #32
 8003804:	f381 8811 	msr	BASEPRI, r1
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	4825      	ldr	r0, [pc, #148]	; (80038a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800380c:	f7ff fdbf 	bl	800338e <_PreparePacket>
 8003810:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
 800381e:	e00b      	b.n	8003838 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	62f9      	str	r1, [r7, #44]	; 0x2c
 800382a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	09db      	lsrs	r3, r3, #7
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2b7f      	cmp	r3, #127	; 0x7f
 800383c:	d8f0      	bhi.n	8003820 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	e00b      	b.n	8003870 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	6279      	str	r1, [r7, #36]	; 0x24
 8003862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	09db      	lsrs	r3, r3, #7
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b7f      	cmp	r3, #127	; 0x7f
 8003874:	d8f0      	bhi.n	8003858 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	627a      	str	r2, [r7, #36]	; 0x24
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69b8      	ldr	r0, [r7, #24]
 800388c:	f7ff fe70 	bl	8003570 <_SendPacket>
  RECORD_END();
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f383 8811 	msr	BASEPRI, r3
}
 8003896:	bf00      	nop
 8003898:	3730      	adds	r7, #48	; 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20013358 	.word	0x20013358

080038a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80038b2:	f3ef 8311 	mrs	r3, BASEPRI
 80038b6:	f04f 0120 	mov.w	r1, #32
 80038ba:	f381 8811 	msr	BASEPRI, r1
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	4832      	ldr	r0, [pc, #200]	; (800398c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80038c2:	f7ff fd64 	bl	800338e <_PreparePacket>
 80038c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30
 80038d4:	e00b      	b.n	80038ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	6379      	str	r1, [r7, #52]	; 0x34
 80038e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	09db      	lsrs	r3, r3, #7
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2b7f      	cmp	r3, #127	; 0x7f
 80038f2:	d8f0      	bhi.n	80038d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	637a      	str	r2, [r7, #52]	; 0x34
 80038fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
 800390c:	e00b      	b.n	8003926 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	09db      	lsrs	r3, r3, #7
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	2b7f      	cmp	r3, #127	; 0x7f
 800392a:	d8f0      	bhi.n	800390e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	e00b      	b.n	800395e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1c59      	adds	r1, r3, #1
 800394e:	6279      	str	r1, [r7, #36]	; 0x24
 8003950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2b7f      	cmp	r3, #127	; 0x7f
 8003962:	d8f0      	bhi.n	8003946 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	627a      	str	r2, [r7, #36]	; 0x24
 800396a:	6a3a      	ldr	r2, [r7, #32]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	69b8      	ldr	r0, [r7, #24]
 800397a:	f7ff fdf9 	bl	8003570 <_SendPacket>
  RECORD_END();
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f383 8811 	msr	BASEPRI, r3
}
 8003984:	bf00      	nop
 8003986:	3738      	adds	r7, #56	; 0x38
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20013358 	.word	0x20013358

08003990 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b090      	sub	sp, #64	; 0x40
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800399e:	f3ef 8311 	mrs	r3, BASEPRI
 80039a2:	f04f 0120 	mov.w	r1, #32
 80039a6:	f381 8811 	msr	BASEPRI, r1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	4840      	ldr	r0, [pc, #256]	; (8003ab0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80039ae:	f7ff fcee 	bl	800338e <_PreparePacket>
 80039b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c0:	e00b      	b.n	80039da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	1c59      	adds	r1, r3, #1
 80039ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80039cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	09db      	lsrs	r3, r3, #7
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b7f      	cmp	r3, #127	; 0x7f
 80039de:	d8f0      	bhi.n	80039c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
 80039f8:	e00b      	b.n	8003a12 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	6379      	str	r1, [r7, #52]	; 0x34
 8003a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	09db      	lsrs	r3, r3, #7
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2b7f      	cmp	r3, #127	; 0x7f
 8003a16:	d8f0      	bhi.n	80039fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a30:	e00b      	b.n	8003a4a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4e:	d8f0      	bhi.n	8003a32 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	e00b      	b.n	8003a82 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	1c59      	adds	r1, r3, #1
 8003a72:	6279      	str	r1, [r7, #36]	; 0x24
 8003a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	09db      	lsrs	r3, r3, #7
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b7f      	cmp	r3, #127	; 0x7f
 8003a86:	d8f0      	bhi.n	8003a6a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	69b8      	ldr	r0, [r7, #24]
 8003a9e:	f7ff fd67 	bl	8003570 <_SendPacket>
  RECORD_END();
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f383 8811 	msr	BASEPRI, r3
}
 8003aa8:	bf00      	nop
 8003aaa:	3740      	adds	r7, #64	; 0x40
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20013358 	.word	0x20013358

08003ab4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003aba:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac4:	f04f 0120 	mov.w	r1, #32
 8003ac8:	f381 8811 	msr	BASEPRI, r1
 8003acc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	220a      	movs	r2, #10
 8003ad4:	4952      	ldr	r1, [pc, #328]	; (8003c20 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fb8a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003ae2:	200a      	movs	r0, #10
 8003ae4:	f7ff fe2a 	bl	800373c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8003aec:	f04f 0120 	mov.w	r1, #32
 8003af0:	f381 8811 	msr	BASEPRI, r1
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	484b      	ldr	r0, [pc, #300]	; (8003c24 <SEGGER_SYSVIEW_Start+0x170>)
 8003af8:	f7ff fc49 	bl	800338e <_PreparePacket>
 8003afc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0c:	e00b      	b.n	8003b26 <SEGGER_SYSVIEW_Start+0x72>
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	09db      	lsrs	r3, r3, #7
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2a:	d8f0      	bhi.n	8003b0e <SEGGER_SYSVIEW_Start+0x5a>
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	e00b      	b.n	8003b60 <SEGGER_SYSVIEW_Start+0xac>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	1c59      	adds	r1, r3, #1
 8003b50:	6279      	str	r1, [r7, #36]	; 0x24
 8003b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	09db      	lsrs	r3, r3, #7
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b7f      	cmp	r3, #127	; 0x7f
 8003b64:	d8f0      	bhi.n	8003b48 <SEGGER_SYSVIEW_Start+0x94>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e00b      	b.n	8003b9a <SEGGER_SYSVIEW_Start+0xe6>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	61f9      	str	r1, [r7, #28]
 8003b8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	09db      	lsrs	r3, r3, #7
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9e:	d8f0      	bhi.n	8003b82 <SEGGER_SYSVIEW_Start+0xce>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	61fa      	str	r2, [r7, #28]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e00b      	b.n	8003bd2 <SEGGER_SYSVIEW_Start+0x11e>
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1c59      	adds	r1, r3, #1
 8003bc2:	6179      	str	r1, [r7, #20]
 8003bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	09db      	lsrs	r3, r3, #7
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd6:	d8f0      	bhi.n	8003bba <SEGGER_SYSVIEW_Start+0x106>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	617a      	str	r2, [r7, #20]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003be8:	2218      	movs	r2, #24
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fcbf 	bl	8003570 <_SendPacket>
      RECORD_END();
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <SEGGER_SYSVIEW_Start+0x168>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c06:	f000 f9c7 	bl	8003f98 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c0a:	f000 f9b1 	bl	8003f70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c0e:	f000 fc5f 	bl	80044d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003c12:	bf00      	nop
 8003c14:	3730      	adds	r7, #48	; 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20013328 	.word	0x20013328
 8003c20:	08005204 	.word	0x08005204
 8003c24:	20013358 	.word	0x20013358

08003c28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	f04f 0120 	mov.w	r1, #32
 8003c36:	f381 8811 	msr	BASEPRI, r1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <SEGGER_SYSVIEW_Stop+0x44>)
 8003c3e:	f7ff fba6 	bl	800338e <_PreparePacket>
 8003c42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c4c:	220b      	movs	r2, #11
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	6838      	ldr	r0, [r7, #0]
 8003c52:	f7ff fc8d 	bl	8003570 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f383 8811 	msr	BASEPRI, r3
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20013358 	.word	0x20013358
 8003c70:	20013328 	.word	0x20013328

08003c74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c7e:	f04f 0120 	mov.w	r1, #32
 8003c82:	f381 8811 	msr	BASEPRI, r1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	4845      	ldr	r0, [pc, #276]	; (8003da0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c8a:	f7ff fb80 	bl	800338e <_PreparePacket>
 8003c8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9e:	e00b      	b.n	8003cb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	09db      	lsrs	r3, r3, #7
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	2b7f      	cmp	r3, #127	; 0x7f
 8003cbc:	d8f0      	bhi.n	8003ca0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e00b      	b.n	8003cf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	6279      	str	r1, [r7, #36]	; 0x24
 8003ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	09db      	lsrs	r3, r3, #7
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf6:	d8f0      	bhi.n	8003cda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e00b      	b.n	8003d2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	61f9      	str	r1, [r7, #28]
 8003d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	09db      	lsrs	r3, r3, #7
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d30:	d8f0      	bhi.n	8003d14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	61fa      	str	r2, [r7, #28]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e00b      	b.n	8003d64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	6179      	str	r1, [r7, #20]
 8003d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	09db      	lsrs	r3, r3, #7
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d8f0      	bhi.n	8003d4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	617a      	str	r2, [r7, #20]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d7a:	2218      	movs	r2, #24
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f7ff fbf6 	bl	8003570 <_SendPacket>
  RECORD_END();
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	4798      	blx	r3
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20013358 	.word	0x20013358
 8003da4:	20013328 	.word	0x20013328

08003da8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b092      	sub	sp, #72	; 0x48
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003db0:	f3ef 8311 	mrs	r3, BASEPRI
 8003db4:	f04f 0120 	mov.w	r1, #32
 8003db8:	f381 8811 	msr	BASEPRI, r1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	486a      	ldr	r0, [pc, #424]	; (8003f68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003dc0:	f7ff fae5 	bl	800338e <_PreparePacket>
 8003dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dda:	e00b      	b.n	8003df4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	6479      	str	r1, [r7, #68]	; 0x44
 8003de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	643b      	str	r3, [r7, #64]	; 0x40
 8003df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df6:	2b7f      	cmp	r3, #127	; 0x7f
 8003df8:	d8f0      	bhi.n	8003ddc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8003e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e14:	e00b      	b.n	8003e2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	09db      	lsrs	r3, r3, #7
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b7f      	cmp	r3, #127	; 0x7f
 8003e32:	d8f0      	bhi.n	8003e16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fa51 	bl	80032f4 <_EncodeStr>
 8003e52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e54:	2209      	movs	r2, #9
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	6938      	ldr	r0, [r7, #16]
 8003e5a:	f7ff fb89 	bl	8003570 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	e00b      	b.n	8003e8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	6379      	str	r1, [r7, #52]	; 0x34
 8003e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	09db      	lsrs	r3, r3, #7
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e90:	d8f0      	bhi.n	8003e74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	637a      	str	r2, [r7, #52]	; 0x34
 8003e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eac:	e00b      	b.n	8003ec6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	1c59      	adds	r1, r3, #1
 8003eb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	09db      	lsrs	r3, r3, #7
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eca:	d8f0      	bhi.n	8003eae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	e00b      	b.n	8003f00 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	6279      	str	r1, [r7, #36]	; 0x24
 8003ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2b7f      	cmp	r3, #127	; 0x7f
 8003f04:	d8f0      	bhi.n	8003ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e00b      	b.n	8003f38 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	61f9      	str	r1, [r7, #28]
 8003f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	09db      	lsrs	r3, r3, #7
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f3c:	d8f0      	bhi.n	8003f20 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	61fa      	str	r2, [r7, #28]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f4e:	2215      	movs	r2, #21
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	6938      	ldr	r0, [r7, #16]
 8003f54:	f7ff fb0c 	bl	8003570 <_SendPacket>
  RECORD_END();
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f383 8811 	msr	BASEPRI, r3
}
 8003f5e:	bf00      	nop
 8003f60:	3748      	adds	r7, #72	; 0x48
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20013358 	.word	0x20013358
 8003f6c:	20013328 	.word	0x20013328

08003f70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f86:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4798      	blx	r3
  }
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20013328 	.word	0x20013328

08003f98 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01a      	beq.n	8003fdc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4798      	blx	r3
 8003fb8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fbc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	000a      	movs	r2, r1
 8003fcc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fce:	4613      	mov	r3, r2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	200d      	movs	r0, #13
 8003fd6:	f7ff fc0b 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x2>
 8003fda:	e006      	b.n	8003fea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	200c      	movs	r0, #12
 8003fe4:	f7ff fbc8 	bl	8003778 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20013328 	.word	0x20013328
 8003ff8:	e0001004 	.word	0xe0001004

08003ffc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004002:	f3ef 8311 	mrs	r3, BASEPRI
 8004006:	f04f 0120 	mov.w	r1, #32
 800400a:	f381 8811 	msr	BASEPRI, r1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4819      	ldr	r0, [pc, #100]	; (8004078 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004012:	f7ff f9bc 	bl	800338e <_PreparePacket>
 8004016:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e00b      	b.n	8004048 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	6179      	str	r1, [r7, #20]
 800403a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	09db      	lsrs	r3, r3, #7
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b7f      	cmp	r3, #127	; 0x7f
 800404c:	d8f0      	bhi.n	8004030 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	617a      	str	r2, [r7, #20]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800405e:	2202      	movs	r2, #2
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68b8      	ldr	r0, [r7, #8]
 8004064:	f7ff fa84 	bl	8003570 <_SendPacket>
  RECORD_END();
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f383 8811 	msr	BASEPRI, r3
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20013358 	.word	0x20013358
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004086:	f3ef 8311 	mrs	r3, BASEPRI
 800408a:	f04f 0120 	mov.w	r1, #32
 800408e:	f381 8811 	msr	BASEPRI, r1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	4807      	ldr	r0, [pc, #28]	; (80040b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004096:	f7ff f97a 	bl	800338e <_PreparePacket>
 800409a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800409c:	2203      	movs	r2, #3
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	f7ff fa65 	bl	8003570 <_SendPacket>
  RECORD_END();
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f383 8811 	msr	BASEPRI, r3
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20013358 	.word	0x20013358

080040b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040be:	f3ef 8311 	mrs	r3, BASEPRI
 80040c2:	f04f 0120 	mov.w	r1, #32
 80040c6:	f381 8811 	msr	BASEPRI, r1
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	4807      	ldr	r0, [pc, #28]	; (80040ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80040ce:	f7ff f95e 	bl	800338e <_PreparePacket>
 80040d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80040d4:	2212      	movs	r2, #18
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f7ff fa49 	bl	8003570 <_SendPacket>
  RECORD_END();
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f383 8811 	msr	BASEPRI, r3
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20013358 	.word	0x20013358

080040f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040f6:	f3ef 8311 	mrs	r3, BASEPRI
 80040fa:	f04f 0120 	mov.w	r1, #32
 80040fe:	f381 8811 	msr	BASEPRI, r1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004106:	f7ff f942 	bl	800338e <_PreparePacket>
 800410a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800410c:	2211      	movs	r2, #17
 800410e:	6839      	ldr	r1, [r7, #0]
 8004110:	6838      	ldr	r0, [r7, #0]
 8004112:	f7ff fa2d 	bl	8003570 <_SendPacket>
  RECORD_END();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f383 8811 	msr	BASEPRI, r3
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20013358 	.word	0x20013358

08004128 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004130:	f3ef 8311 	mrs	r3, BASEPRI
 8004134:	f04f 0120 	mov.w	r1, #32
 8004138:	f381 8811 	msr	BASEPRI, r1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	4819      	ldr	r0, [pc, #100]	; (80041a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004140:	f7ff f925 	bl	800338e <_PreparePacket>
 8004144:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e00b      	b.n	8004176 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	1c59      	adds	r1, r3, #1
 8004166:	61f9      	str	r1, [r7, #28]
 8004168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	09db      	lsrs	r3, r3, #7
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b7f      	cmp	r3, #127	; 0x7f
 800417a:	d8f0      	bhi.n	800415e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800418c:	2208      	movs	r2, #8
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	6938      	ldr	r0, [r7, #16]
 8004192:	f7ff f9ed 	bl	8003570 <_SendPacket>
  RECORD_END();
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f383 8811 	msr	BASEPRI, r3
}
 800419c:	bf00      	nop
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20013358 	.word	0x20013358
 80041a8:	20013328 	.word	0x20013328

080041ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041b4:	f3ef 8311 	mrs	r3, BASEPRI
 80041b8:	f04f 0120 	mov.w	r1, #32
 80041bc:	f381 8811 	msr	BASEPRI, r1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4819      	ldr	r0, [pc, #100]	; (8004228 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80041c4:	f7ff f8e3 	bl	800338e <_PreparePacket>
 80041c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e00b      	b.n	80041fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	61f9      	str	r1, [r7, #28]
 80041ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b7f      	cmp	r3, #127	; 0x7f
 80041fe:	d8f0      	bhi.n	80041e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004210:	2204      	movs	r2, #4
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	6938      	ldr	r0, [r7, #16]
 8004216:	f7ff f9ab 	bl	8003570 <_SendPacket>
  RECORD_END();
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f383 8811 	msr	BASEPRI, r3
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20013358 	.word	0x20013358
 800422c:	20013328 	.word	0x20013328

08004230 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004238:	f3ef 8311 	mrs	r3, BASEPRI
 800423c:	f04f 0120 	mov.w	r1, #32
 8004240:	f381 8811 	msr	BASEPRI, r1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	4819      	ldr	r0, [pc, #100]	; (80042ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004248:	f7ff f8a1 	bl	800338e <_PreparePacket>
 800424c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e00b      	b.n	800427e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	61f9      	str	r1, [r7, #28]
 8004270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	09db      	lsrs	r3, r3, #7
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b7f      	cmp	r3, #127	; 0x7f
 8004282:	d8f0      	bhi.n	8004266 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	61fa      	str	r2, [r7, #28]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004294:	2206      	movs	r2, #6
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6938      	ldr	r0, [r7, #16]
 800429a:	f7ff f969 	bl	8003570 <_SendPacket>
  RECORD_END();
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f383 8811 	msr	BASEPRI, r3
}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20013358 	.word	0x20013358
 80042b0:	20013328 	.word	0x20013328

080042b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80042be:	f3ef 8311 	mrs	r3, BASEPRI
 80042c2:	f04f 0120 	mov.w	r1, #32
 80042c6:	f381 8811 	msr	BASEPRI, r1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	4827      	ldr	r0, [pc, #156]	; (800436c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80042ce:	f7ff f85e 	bl	800338e <_PreparePacket>
 80042d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	e00b      	b.n	8004304 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	6279      	str	r1, [r7, #36]	; 0x24
 80042f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	09db      	lsrs	r3, r3, #7
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b7f      	cmp	r3, #127	; 0x7f
 8004308:	d8f0      	bhi.n	80042ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	627a      	str	r2, [r7, #36]	; 0x24
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e00b      	b.n	800433c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	b2da      	uxtb	r2, r3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	61f9      	str	r1, [r7, #28]
 800432e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	09db      	lsrs	r3, r3, #7
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b7f      	cmp	r3, #127	; 0x7f
 8004340:	d8f0      	bhi.n	8004324 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	61fa      	str	r2, [r7, #28]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004352:	2207      	movs	r2, #7
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f7ff f90a 	bl	8003570 <_SendPacket>
  RECORD_END();
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f383 8811 	msr	BASEPRI, r3
}
 8004362:	bf00      	nop
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20013358 	.word	0x20013358
 8004370:	20013328 	.word	0x20013328

08004374 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	1ad3      	subs	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	20013328 	.word	0x20013328

08004394 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d06d      	beq.n	8004482 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80043a6:	4b39      	ldr	r3, [pc, #228]	; (800448c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b0:	e008      	b.n	80043c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	3301      	adds	r3, #1
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3f2      	bcc.n	80043b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80043cc:	e000      	b.n	80043d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80043ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d055      	beq.n	8004482 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043d6:	f3ef 8311 	mrs	r3, BASEPRI
 80043da:	f04f 0120 	mov.w	r1, #32
 80043de:	f381 8811 	msr	BASEPRI, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	482a      	ldr	r0, [pc, #168]	; (8004490 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80043e6:	f7fe ffd2 	bl	800338e <_PreparePacket>
 80043ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	e00b      	b.n	8004412 <SEGGER_SYSVIEW_SendModule+0x7e>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1c59      	adds	r1, r3, #1
 8004402:	6279      	str	r1, [r7, #36]	; 0x24
 8004404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2b7f      	cmp	r3, #127	; 0x7f
 8004416:	d8f0      	bhi.n	80043fa <SEGGER_SYSVIEW_SendModule+0x66>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	627a      	str	r2, [r7, #36]	; 0x24
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e00b      	b.n	800444c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	61f9      	str	r1, [r7, #28]
 800443e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	09db      	lsrs	r3, r3, #7
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b7f      	cmp	r3, #127	; 0x7f
 8004450:	d8f0      	bhi.n	8004434 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	4619      	mov	r1, r3
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7fe ff42 	bl	80032f4 <_EncodeStr>
 8004470:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004472:	2216      	movs	r2, #22
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	6938      	ldr	r0, [r7, #16]
 8004478:	f7ff f87a 	bl	8003570 <_SendPacket>
      RECORD_END();
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004482:	bf00      	nop
 8004484:	3730      	adds	r7, #48	; 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20013350 	.word	0x20013350
 8004490:	20013358 	.word	0x20013358

08004494 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00f      	beq.n	80044c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f2      	bne.n	80044a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20013350 	.word	0x20013350

080044d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80044d6:	f3ef 8311 	mrs	r3, BASEPRI
 80044da:	f04f 0120 	mov.w	r1, #32
 80044de:	f381 8811 	msr	BASEPRI, r1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	4817      	ldr	r0, [pc, #92]	; (8004544 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80044e6:	f7fe ff52 	bl	800338e <_PreparePacket>
 80044ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e00b      	b.n	8004514 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	6179      	str	r1, [r7, #20]
 8004506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	09db      	lsrs	r3, r3, #7
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b7f      	cmp	r3, #127	; 0x7f
 8004518:	d8f0      	bhi.n	80044fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	617a      	str	r2, [r7, #20]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800452a:	221b      	movs	r2, #27
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f7ff f81e 	bl	8003570 <_SendPacket>
  RECORD_END();
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f383 8811 	msr	BASEPRI, r3
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20013358 	.word	0x20013358
 8004548:	20013354 	.word	0x20013354

0800454c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004554:	f3ef 8311 	mrs	r3, BASEPRI
 8004558:	f04f 0120 	mov.w	r1, #32
 800455c:	f381 8811 	msr	BASEPRI, r1
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	4827      	ldr	r0, [pc, #156]	; (8004600 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004564:	f7fe ff13 	bl	800338e <_PreparePacket>
 8004568:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	6938      	ldr	r0, [r7, #16]
 8004570:	f7fe fec0 	bl	80032f4 <_EncodeStr>
 8004574:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	2301      	movs	r3, #1
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	e00b      	b.n	8004598 <SEGGER_SYSVIEW_Warn+0x4c>
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	6279      	str	r1, [r7, #36]	; 0x24
 800458a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	09db      	lsrs	r3, r3, #7
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b7f      	cmp	r3, #127	; 0x7f
 800459c:	d8f0      	bhi.n	8004580 <SEGGER_SYSVIEW_Warn+0x34>
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	627a      	str	r2, [r7, #36]	; 0x24
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e00b      	b.n	80045d0 <SEGGER_SYSVIEW_Warn+0x84>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	61f9      	str	r1, [r7, #28]
 80045c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b7f      	cmp	r3, #127	; 0x7f
 80045d4:	d8f0      	bhi.n	80045b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	61fa      	str	r2, [r7, #28]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045e6:	221a      	movs	r2, #26
 80045e8:	68f9      	ldr	r1, [r7, #12]
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f7fe ffc0 	bl	8003570 <_SendPacket>
  RECORD_END();
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f383 8811 	msr	BASEPRI, r3
}
 80045f6:	bf00      	nop
 80045f8:	3728      	adds	r7, #40	; 0x28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20013358 	.word	0x20013358

08004604 <configure_uart>:
#include "common_utils.h"

struct USART_Handle_t Test_USART;

void configure_uart(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 8004608:	482a      	ldr	r0, [pc, #168]	; (80046b4 <configure_uart+0xb0>)
 800460a:	f000 f925 	bl	8004858 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 800460e:	2202      	movs	r2, #2
 8004610:	2102      	movs	r1, #2
 8004612:	4828      	ldr	r0, [pc, #160]	; (80046b4 <configure_uart+0xb0>)
 8004614:	f000 f854 	bl	80046c0 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 8004618:	2202      	movs	r2, #2
 800461a:	2103      	movs	r1, #3
 800461c:	4825      	ldr	r0, [pc, #148]	; (80046b4 <configure_uart+0xb0>)
 800461e:	f000 f84f 	bl	80046c0 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 8004622:	2207      	movs	r2, #7
 8004624:	2102      	movs	r1, #2
 8004626:	4823      	ldr	r0, [pc, #140]	; (80046b4 <configure_uart+0xb0>)
 8004628:	f000 f86f 	bl	800470a <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 800462c:	2207      	movs	r2, #7
 800462e:	2103      	movs	r1, #3
 8004630:	4820      	ldr	r0, [pc, #128]	; (80046b4 <configure_uart+0xb0>)
 8004632:	f000 f86a 	bl	800470a <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 8004636:	2200      	movs	r2, #0
 8004638:	2102      	movs	r1, #2
 800463a:	481e      	ldr	r0, [pc, #120]	; (80046b4 <configure_uart+0xb0>)
 800463c:	f000 f89f 	bl	800477e <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8004640:	2200      	movs	r2, #0
 8004642:	2103      	movs	r1, #3
 8004644:	481b      	ldr	r0, [pc, #108]	; (80046b4 <configure_uart+0xb0>)
 8004646:	f000 f89a 	bl	800477e <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800464a:	2202      	movs	r2, #2
 800464c:	2102      	movs	r1, #2
 800464e:	4819      	ldr	r0, [pc, #100]	; (80046b4 <configure_uart+0xb0>)
 8004650:	f000 f8dd 	bl	800480e <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8004654:	2202      	movs	r2, #2
 8004656:	2103      	movs	r1, #3
 8004658:	4816      	ldr	r0, [pc, #88]	; (80046b4 <configure_uart+0xb0>)
 800465a:	f000 f8d8 	bl	800480e <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 800465e:	2201      	movs	r2, #1
 8004660:	2102      	movs	r1, #2
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <configure_uart+0xb0>)
 8004664:	f000 f8ae 	bl	80047c4 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 8004668:	2201      	movs	r2, #1
 800466a:	2103      	movs	r1, #3
 800466c:	4811      	ldr	r0, [pc, #68]	; (80046b4 <configure_uart+0xb0>)
 800466e:	f000 f8a9 	bl	80047c4 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART2;
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <configure_uart+0xb4>)
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <configure_uart+0xb8>)
 8004676:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <configure_uart+0xb4>)
 800467a:	2202      	movs	r2, #2
 800467c:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <configure_uart+0xb4>)
 8004680:	2200      	movs	r2, #0
 8004682:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <configure_uart+0xb4>)
 8004686:	2200      	movs	r2, #0
 8004688:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <configure_uart+0xb4>)
 800468c:	2200      	movs	r2, #0
 800468e:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <configure_uart+0xb4>)
 8004692:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004696:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <configure_uart+0xb4>)
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART2);
 800469e:	4807      	ldr	r0, [pc, #28]	; (80046bc <configure_uart+0xb8>)
 80046a0:	f000 f8da 	bl	8004858 <EnablePeriClk>
	USART_Init(&Test_USART);
 80046a4:	4804      	ldr	r0, [pc, #16]	; (80046b8 <configure_uart+0xb4>)
 80046a6:	f000 fa9d 	bl	8004be4 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 80046aa:	4803      	ldr	r0, [pc, #12]	; (80046b8 <configure_uart+0xb4>)
 80046ac:	f000 fb9a 	bl	8004de4 <USART_PeripheralEnable>
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40020000 	.word	0x40020000
 80046b8:	2001343c 	.word	0x2001343c
 80046bc:	40004400 	.word	0x40004400

080046c0 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
 80046cc:	4613      	mov	r3, r2
 80046ce:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	0052      	lsls	r2, r2, #1
 80046dc:	2103      	movs	r1, #3
 80046de:	fa01 f202 	lsl.w	r2, r1, r2
 80046e2:	43d2      	mvns	r2, r2
 80046e4:	401a      	ands	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	78b9      	ldrb	r1, [r7, #2]
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	0052      	lsls	r2, r2, #1
 80046f4:	fa01 f202 	lsl.w	r2, r1, r2
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]

}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	70fb      	strb	r3, [r7, #3]
 8004716:	4613      	mov	r3, r2
 8004718:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 800472c:	7afa      	ldrb	r2, [r7, #11]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3208      	adds	r2, #8
 8004732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004736:	7aba      	ldrb	r2, [r7, #10]
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	210f      	movs	r1, #15
 800473c:	fa01 f202 	lsl.w	r2, r1, r2
 8004740:	43d2      	mvns	r2, r2
 8004742:	4611      	mov	r1, r2
 8004744:	7afa      	ldrb	r2, [r7, #11]
 8004746:	4019      	ands	r1, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3208      	adds	r2, #8
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8004750:	7afa      	ldrb	r2, [r7, #11]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3208      	adds	r2, #8
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	78b9      	ldrb	r1, [r7, #2]
 800475c:	7aba      	ldrb	r2, [r7, #10]
 800475e:	0092      	lsls	r2, r2, #2
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	4611      	mov	r1, r2
 8004766:	7afa      	ldrb	r2, [r7, #11]
 8004768:	4319      	orrs	r1, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3208      	adds	r2, #8
 800476e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
 800478a:	4613      	mov	r3, r2
 800478c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f202 	lsl.w	r2, r1, r2
 800479e:	43d2      	mvns	r2, r2
 80047a0:	401a      	ands	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	78b9      	ldrb	r1, [r7, #2]
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
 80047d0:	4613      	mov	r3, r2
 80047d2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	0052      	lsls	r2, r2, #1
 80047e0:	2103      	movs	r1, #3
 80047e2:	fa01 f202 	lsl.w	r2, r1, r2
 80047e6:	43d2      	mvns	r2, r2
 80047e8:	401a      	ands	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	78b9      	ldrb	r1, [r7, #2]
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	0052      	lsls	r2, r2, #1
 80047f8:	fa01 f202 	lsl.w	r2, r1, r2
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	60da      	str	r2, [r3, #12]
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
 800481a:	4613      	mov	r3, r2
 800481c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	0052      	lsls	r2, r2, #1
 800482a:	2103      	movs	r1, #3
 800482c:	fa01 f202 	lsl.w	r2, r1, r2
 8004830:	43d2      	mvns	r2, r2
 8004832:	401a      	ands	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	78b9      	ldrb	r1, [r7, #2]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	0052      	lsls	r2, r2, #1
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	431a      	orrs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a88      	ldr	r2, [pc, #544]	; (8004a84 <EnablePeriClk+0x22c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004868:	4b87      	ldr	r3, [pc, #540]	; (8004a88 <EnablePeriClk+0x230>)
 800486a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f043 0201 	orr.w	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8004878:	e19b      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a83      	ldr	r2, [pc, #524]	; (8004a8c <EnablePeriClk+0x234>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004882:	4b81      	ldr	r3, [pc, #516]	; (8004a88 <EnablePeriClk+0x230>)
 8004884:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	e18e      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a7e      	ldr	r2, [pc, #504]	; (8004a90 <EnablePeriClk+0x238>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800489c:	4b7a      	ldr	r3, [pc, #488]	; (8004a88 <EnablePeriClk+0x230>)
 800489e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	e181      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a78      	ldr	r2, [pc, #480]	; (8004a94 <EnablePeriClk+0x23c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80048b6:	4b74      	ldr	r3, [pc, #464]	; (8004a88 <EnablePeriClk+0x230>)
 80048b8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	e174      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <EnablePeriClk+0x240>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80048d0:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <EnablePeriClk+0x230>)
 80048d2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f043 0210 	orr.w	r2, r3, #16
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	e167      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a6d      	ldr	r2, [pc, #436]	; (8004a9c <EnablePeriClk+0x244>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80048ea:	4b67      	ldr	r3, [pc, #412]	; (8004a88 <EnablePeriClk+0x230>)
 80048ec:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	e15a      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a68      	ldr	r2, [pc, #416]	; (8004aa0 <EnablePeriClk+0x248>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004904:	4b60      	ldr	r3, [pc, #384]	; (8004a88 <EnablePeriClk+0x230>)
 8004906:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	e14d      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a62      	ldr	r2, [pc, #392]	; (8004aa4 <EnablePeriClk+0x24c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800491e:	4b5a      	ldr	r3, [pc, #360]	; (8004a88 <EnablePeriClk+0x230>)
 8004920:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]
}
 800492e:	e140      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <EnablePeriClk+0x250>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <EnablePeriClk+0x230>)
 800493a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]
}
 8004948:	e133      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a57      	ldr	r2, [pc, #348]	; (8004aac <EnablePeriClk+0x254>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8004952:	4b57      	ldr	r3, [pc, #348]	; (8004ab0 <EnablePeriClk+0x258>)
 8004954:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	e126      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a53      	ldr	r2, [pc, #332]	; (8004ab4 <EnablePeriClk+0x25c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800496c:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <EnablePeriClk+0x260>)
 800496e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	e119      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a4e      	ldr	r2, [pc, #312]	; (8004abc <EnablePeriClk+0x264>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <EnablePeriClk+0x260>)
 8004988:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	e10c      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <EnablePeriClk+0x268>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80049a0:	4b45      	ldr	r3, [pc, #276]	; (8004ab8 <EnablePeriClk+0x260>)
 80049a2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	e0ff      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a43      	ldr	r2, [pc, #268]	; (8004ac4 <EnablePeriClk+0x26c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <EnablePeriClk+0x260>)
 80049bc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	e0f2      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3e      	ldr	r2, [pc, #248]	; (8004ac8 <EnablePeriClk+0x270>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <EnablePeriClk+0x260>)
 80049d6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	e0e5      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a38      	ldr	r2, [pc, #224]	; (8004acc <EnablePeriClk+0x274>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <EnablePeriClk+0x258>)
 80049f0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	e0d8      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a33      	ldr	r2, [pc, #204]	; (8004ad0 <EnablePeriClk+0x278>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <EnablePeriClk+0x260>)
 8004a0a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]
}
 8004a18:	e0cb      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <EnablePeriClk+0x27c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004a22:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <EnablePeriClk+0x260>)
 8004a24:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	e0be      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <EnablePeriClk+0x280>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d108      	bne.n	8004a4e <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <EnablePeriClk+0x260>)
 8004a3e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]
}
 8004a4c:	e0b1      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a22      	ldr	r2, [pc, #136]	; (8004adc <EnablePeriClk+0x284>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <EnablePeriClk+0x260>)
 8004a58:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	e0a4      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <EnablePeriClk+0x288>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d139      	bne.n	8004ae4 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <EnablePeriClk+0x258>)
 8004a72:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	e097      	b.n	8004bb2 <EnablePeriClk+0x35a>
 8004a82:	bf00      	nop
 8004a84:	40020000 	.word	0x40020000
 8004a88:	40023830 	.word	0x40023830
 8004a8c:	40020400 	.word	0x40020400
 8004a90:	40020800 	.word	0x40020800
 8004a94:	40020c00 	.word	0x40020c00
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40021400 	.word	0x40021400
 8004aa0:	40021800 	.word	0x40021800
 8004aa4:	40021c00 	.word	0x40021c00
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40013000 	.word	0x40013000
 8004ab0:	40023844 	.word	0x40023844
 8004ab4:	40003800 	.word	0x40003800
 8004ab8:	40023840 	.word	0x40023840
 8004abc:	40003c00 	.word	0x40003c00
 8004ac0:	40005400 	.word	0x40005400
 8004ac4:	40005800 	.word	0x40005800
 8004ac8:	40005c00 	.word	0x40005c00
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40004400 	.word	0x40004400
 8004ad4:	40004800 	.word	0x40004800
 8004ad8:	40004c00 	.word	0x40004c00
 8004adc:	40005000 	.word	0x40005000
 8004ae0:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <EnablePeriClk+0x368>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004aec:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004aee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f043 0210 	orr.w	r2, r3, #16
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]
}
 8004afc:	e059      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <EnablePeriClk+0x370>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004b08:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]
}
 8004b16:	e04c      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <EnablePeriClk+0x374>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <EnablePeriClk+0x378>)
 8004b22:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	e03f      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <EnablePeriClk+0x37c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d108      	bne.n	8004b4c <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8004b3a:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <EnablePeriClk+0x378>)
 8004b3c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	e032      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d108      	bne.n	8004b66 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004b56:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f043 0201 	orr.w	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	e025      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <EnablePeriClk+0x380>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004b70:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f043 0202 	orr.w	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]
}
 8004b7e:	e018      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <EnablePeriClk+0x384>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004b8a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]
}
 8004b98:	e00b      	b.n	8004bb2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <EnablePeriClk+0x388>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d107      	bne.n	8004bb2 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <EnablePeriClk+0x36c>)
 8004ba4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40001000 	.word	0x40001000
 8004bc4:	40023840 	.word	0x40023840
 8004bc8:	40001400 	.word	0x40001400
 8004bcc:	40026000 	.word	0x40026000
 8004bd0:	40023830 	.word	0x40023830
 8004bd4:	40026400 	.word	0x40026400
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00

08004be4 <USART_Init>:
static volatile uint8_t usart_tx_begin;

static uint8_t usart_available = TRUE;

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d110      	bne.n	8004c16 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	e028      	b.n	8004c68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d110      	bne.n	8004c40 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0208 	bic.w	r2, r2, #8
 8004c2c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0204 	orr.w	r2, r2, #4
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	e013      	b.n	8004c68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d10f      	bne.n	8004c68 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0208 	orr.w	r2, r2, #8
 8004c56:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0204 	orr.w	r2, r2, #4
 8004c66:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e00b      	b.n	8004c9a <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c98:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ca8:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6919      	ldr	r1, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	031a      	lsls	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	e028      	b.n	8004d2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d110      	bne.n	8004d02 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cee:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	e013      	b.n	8004d2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d10f      	bne.n	8004d2a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d18:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f8a9 	bl	8004e88 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d110      	bne.n	8004d60 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d4c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d5c:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8004d5e:	e03d      	b.n	8004ddc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d76:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d86:	615a      	str	r2, [r3, #20]
}
 8004d88:	e028      	b.n	8004ddc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d110      	bne.n	8004db4 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da0:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	e013      	b.n	8004ddc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d10f      	bne.n	8004ddc <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dca:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	615a      	str	r2, [r3, #20]
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8004e40:	e012      	b.n	8004e68 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8004e42:	bf00      	nop
 8004e44:	2180      	movs	r1, #128	; 0x80
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ffde 	bl	8004e08 <USART_GetFlagStatus>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f8      	beq.n	8004e44 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
		Len--;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e9      	bne.n	8004e42 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8004e6e:	bf00      	nop
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ffc8 	bl	8004e08 <USART_GetFlagStatus>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f8      	beq.n	8004e70 <USART_SendData+0x3c>
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <USART_SetBaudRate>:

	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8004e92:	f240 6383 	movw	r3, #1667	; 0x683
 8004e96:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <main>:

static void task_1(void *params);
static void task_2(void *params);

int main(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af02      	add	r7, sp, #8
	BaseType_t status;

	NVIC_SetPriorityGrouping();
 8004eb2:	f000 f8a5 	bl	8005000 <NVIC_SetPriorityGrouping>

	//Configure the UART
	configure_uart();
 8004eb6:	f7ff fba5 	bl	8004604 <configure_uart>

	status = xTaskCreate(task_1,"task_1",1024,NULL,2,&task_1_handle);
 8004eba:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <main+0xa8>)
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec8:	4923      	ldr	r1, [pc, #140]	; (8004f58 <main+0xac>)
 8004eca:	4824      	ldr	r0, [pc, #144]	; (8004f5c <main+0xb0>)
 8004ecc:	f7fc f976 	bl	80011bc <xTaskCreate>
 8004ed0:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d00a      	beq.n	8004eee <main+0x42>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60bb      	str	r3, [r7, #8]
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <main+0x40>

	status = xTaskCreate(task_2,"task_2",1024,NULL,2,&task_2_handle);
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <main+0xb4>)
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efc:	4919      	ldr	r1, [pc, #100]	; (8004f64 <main+0xb8>)
 8004efe:	481a      	ldr	r0, [pc, #104]	; (8004f68 <main+0xbc>)
 8004f00:	f7fc f95c 	bl	80011bc <xTaskCreate>
 8004f04:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d00a      	beq.n	8004f22 <main+0x76>
        __asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	607b      	str	r3, [r7, #4]
    }
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <main+0x74>

	uart_mutex = xSemaphoreCreateMutex();
 8004f22:	2001      	movs	r0, #1
 8004f24:	f7fb fb74 	bl	8000610 <xQueueCreateMutex>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <main+0xc0>)
 8004f2c:	6013      	str	r3, [r2, #0]
	configASSERT(uart_mutex != NULL);
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <main+0xc0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <main+0xa0>
        __asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	603b      	str	r3, [r7, #0]
    }
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <main+0x9e>

	vTaskStartScheduler();
 8004f4c:	f7fc fa9a 	bl	8001484 <vTaskStartScheduler>

    /* Loop forever */
	for(;;);
 8004f50:	e7fe      	b.n	8004f50 <main+0xa4>
 8004f52:	bf00      	nop
 8004f54:	20013458 	.word	0x20013458
 8004f58:	080051c4 	.word	0x080051c4
 8004f5c:	08004f71 	.word	0x08004f71
 8004f60:	2001345c 	.word	0x2001345c
 8004f64:	080051cc 	.word	0x080051cc
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	20013460 	.word	0x20013460

08004f70 <task_1>:
}

static void task_1(void *params)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	char *msg = "Message from TASK-1\r\n";
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <task_1+0x3c>)
 8004f7a:	60fb      	str	r3, [r7, #12]

    while(1)
    {
#if USE_MUTEX == 1
    	xSemaphoreTake(uart_mutex,portMAX_DELAY);
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <task_1+0x40>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb fe4f 	bl	8000c28 <xQueueSemaphoreTake>
#endif

    	USART_SendData(&Test_USART,(uint8_t *)msg,strlen(msg));
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fb f97a 	bl	8000284 <strlen>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <task_1+0x44>)
 8004f98:	f7ff ff4c 	bl	8004e34 <USART_SendData>

#if USE_MUTEX == 1
    	xSemaphoreGive(uart_mutex);
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <task_1+0x40>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f7fb fb4b 	bl	8000640 <xQueueGenericSend>
    	xSemaphoreTake(uart_mutex,portMAX_DELAY);
 8004faa:	e7e7      	b.n	8004f7c <task_1+0xc>
 8004fac:	080051d4 	.word	0x080051d4
 8004fb0:	20013460 	.word	0x20013460
 8004fb4:	2001343c 	.word	0x2001343c

08004fb8 <task_2>:
    }

}

static void task_2(void *params)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	char *msg = "Message from TASK-2\r\n";
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <task_2+0x3c>)
 8004fc2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
#if USE_MUTEX == 1
		xSemaphoreTake(uart_mutex,portMAX_DELAY);
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <task_2+0x40>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fe2b 	bl	8000c28 <xQueueSemaphoreTake>
#endif

		USART_SendData(&Test_USART,(uint8_t *)msg,strlen(msg));
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7fb f956 	bl	8000284 <strlen>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	4807      	ldr	r0, [pc, #28]	; (8004ffc <task_2+0x44>)
 8004fe0:	f7ff ff28 	bl	8004e34 <USART_SendData>

#if USE_MUTEX == 1
		xSemaphoreGive(uart_mutex);
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <task_2+0x40>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2200      	movs	r2, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	f7fb fb27 	bl	8000640 <xQueueGenericSend>
		xSemaphoreTake(uart_mutex,portMAX_DELAY);
 8004ff2:	e7e7      	b.n	8004fc4 <task_2+0xc>
 8004ff4:	080051ec 	.word	0x080051ec
 8004ff8:	20013460 	.word	0x20013460
 8004ffc:	2001343c 	.word	0x2001343c

08005000 <NVIC_SetPriorityGrouping>:
	}

}

static void NVIC_SetPriorityGrouping(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0

	uint32_t *pSCB_AIRCR = (uint32_t *) 0xE000ED0CUL;
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <NVIC_SetPriorityGrouping+0x34>)
 8005008:	607b      	str	r3, [r7, #4]

	uint32_t value = *pSCB_AIRCR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	603b      	str	r3, [r7, #0]

	value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005016:	4013      	ands	r3, r2
 8005018:	603b      	str	r3, [r7, #0]

	value = value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (0x3 << SCB_AIRCR_PRIGROUP_Pos);
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <NVIC_SetPriorityGrouping+0x38>)
 800501e:	4313      	orrs	r3, r2
 8005020:	603b      	str	r3, [r7, #0]

	*pSCB_AIRCR = value;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	601a      	str	r2, [r3, #0]

}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed0c 	.word	0xe000ed0c
 8005038:	05fa0300 	.word	0x05fa0300

0800503c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800503c:	480d      	ldr	r0, [pc, #52]	; (8005074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800503e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005040:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005044:	480c      	ldr	r0, [pc, #48]	; (8005078 <LoopForever+0x6>)
  ldr r1, =_edata
 8005046:	490d      	ldr	r1, [pc, #52]	; (800507c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005048:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <LoopForever+0xe>)
  movs r3, #0
 800504a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800504c:	e002      	b.n	8005054 <LoopCopyDataInit>

0800504e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800504e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005052:	3304      	adds	r3, #4

08005054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005058:	d3f9      	bcc.n	800504e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800505c:	4c0a      	ldr	r4, [pc, #40]	; (8005088 <LoopForever+0x16>)
  movs r3, #0
 800505e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005060:	e001      	b.n	8005066 <LoopFillZerobss>

08005062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005064:	3204      	adds	r2, #4

08005066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005068:	d3fb      	bcc.n	8005062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800506a:	f000 f811 	bl	8005090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800506e:	f7ff ff1d 	bl	8004eac <main>

08005072 <LoopForever>:

LoopForever:
  b LoopForever
 8005072:	e7fe      	b.n	8005072 <LoopForever>
  ldr   r0, =_estack
 8005074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800507c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8005080:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 8005084:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8005088:	20013464 	.word	0x20013464

0800508c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800508c:	e7fe      	b.n	800508c <ADC_IRQHandler>
	...

08005090 <__libc_init_array>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4d0d      	ldr	r5, [pc, #52]	; (80050c8 <__libc_init_array+0x38>)
 8005094:	4c0d      	ldr	r4, [pc, #52]	; (80050cc <__libc_init_array+0x3c>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	2600      	movs	r6, #0
 800509c:	42a6      	cmp	r6, r4
 800509e:	d109      	bne.n	80050b4 <__libc_init_array+0x24>
 80050a0:	4d0b      	ldr	r5, [pc, #44]	; (80050d0 <__libc_init_array+0x40>)
 80050a2:	4c0c      	ldr	r4, [pc, #48]	; (80050d4 <__libc_init_array+0x44>)
 80050a4:	f000 f83e 	bl	8005124 <_init>
 80050a8:	1b64      	subs	r4, r4, r5
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	2600      	movs	r6, #0
 80050ae:	42a6      	cmp	r6, r4
 80050b0:	d105      	bne.n	80050be <__libc_init_array+0x2e>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b8:	4798      	blx	r3
 80050ba:	3601      	adds	r6, #1
 80050bc:	e7ee      	b.n	800509c <__libc_init_array+0xc>
 80050be:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c2:	4798      	blx	r3
 80050c4:	3601      	adds	r6, #1
 80050c6:	e7f2      	b.n	80050ae <__libc_init_array+0x1e>
 80050c8:	08005210 	.word	0x08005210
 80050cc:	08005210 	.word	0x08005210
 80050d0:	08005210 	.word	0x08005210
 80050d4:	08005214 	.word	0x08005214

080050d8 <memcmp>:
 80050d8:	b510      	push	{r4, lr}
 80050da:	3901      	subs	r1, #1
 80050dc:	4402      	add	r2, r0
 80050de:	4290      	cmp	r0, r2
 80050e0:	d101      	bne.n	80050e6 <memcmp+0xe>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e005      	b.n	80050f2 <memcmp+0x1a>
 80050e6:	7803      	ldrb	r3, [r0, #0]
 80050e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d001      	beq.n	80050f4 <memcmp+0x1c>
 80050f0:	1b18      	subs	r0, r3, r4
 80050f2:	bd10      	pop	{r4, pc}
 80050f4:	3001      	adds	r0, #1
 80050f6:	e7f2      	b.n	80050de <memcmp+0x6>

080050f8 <memcpy>:
 80050f8:	440a      	add	r2, r1
 80050fa:	4291      	cmp	r1, r2
 80050fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005100:	d100      	bne.n	8005104 <memcpy+0xc>
 8005102:	4770      	bx	lr
 8005104:	b510      	push	{r4, lr}
 8005106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800510a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800510e:	4291      	cmp	r1, r2
 8005110:	d1f9      	bne.n	8005106 <memcpy+0xe>
 8005112:	bd10      	pop	{r4, pc}

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
