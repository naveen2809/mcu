
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d10  08004d10  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d18  08004d18  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0001440c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014420  20014420  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011858  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d2  00000000  00000000  0003189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f70  00000000  00000000  00035138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002325d  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b18  00000000  00000000  00059305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6346  00000000  00000000  0006be1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142163  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f0  00000000  00000000  001421b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004be4 	.word	0x08004be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004be4 	.word	0x08004be4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e4c 	.word	0x20012e4c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb6b 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f831 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f899 	bl	80006ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  configure_led_gpios();
 800057a:	f000 fa1d 	bl	80009b8 <configure_led_gpios>

  //Configure the Interrupt Priority Grouping
  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <main+0x64>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <main+0x64>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 800058a:	f002 ff5b 	bl	8003444 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058e:	f003 fd83 	bl	8004098 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_green_led,"green_led_task",1024,NULL,0,&task_handle_green_led);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2300      	movs	r3, #0
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a0:	490b      	ldr	r1, [pc, #44]	; (80005d0 <main+0x68>)
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x6c>)
 80005a4:	f001 fe23 	bl	80021ee <xTaskCreate>
 80005a8:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x5c>

  vTaskStartScheduler();
 80005c6:	f001 ff75 	bl	80024b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0x62>
 80005cc:	e0001000 	.word	0xe0001000
 80005d0:	08004bfc 	.word	0x08004bfc
 80005d4:	08000969 	.word	0x08000969

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 faf4 	bl	8004bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800064c:	2332      	movs	r3, #50	; 0x32
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000650:	2304      	movs	r3, #4
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fde7 	bl	8001230 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f9e6 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f848 	bl	8001720 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f9cf 	bl	8000a38 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	4ba2      	ldr	r3, [pc, #648]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4aa1      	ldr	r2, [pc, #644]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b9f      	ldr	r3, [pc, #636]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	4b9b      	ldr	r3, [pc, #620]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a9a      	ldr	r2, [pc, #616]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b98      	ldr	r3, [pc, #608]	; (8000950 <MX_GPIO_Init+0x2a4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b94      	ldr	r3, [pc, #592]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a93      	ldr	r2, [pc, #588]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b91      	ldr	r3, [pc, #580]	; (8000950 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b8d      	ldr	r3, [pc, #564]	; (8000950 <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a8c      	ldr	r2, [pc, #560]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b8a      	ldr	r3, [pc, #552]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b86      	ldr	r3, [pc, #536]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a85      	ldr	r2, [pc, #532]	; (8000950 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b83      	ldr	r3, [pc, #524]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b7f      	ldr	r3, [pc, #508]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a7e      	ldr	r2, [pc, #504]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b7c      	ldr	r3, [pc, #496]	; (8000950 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	4879      	ldr	r0, [pc, #484]	; (8000954 <MX_GPIO_Init+0x2a8>)
 8000770:	f000 fd2a 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	4877      	ldr	r0, [pc, #476]	; (8000958 <MX_GPIO_Init+0x2ac>)
 800077a:	f000 fd25 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800077e:	2200      	movs	r2, #0
 8000780:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000784:	4875      	ldr	r0, [pc, #468]	; (800095c <MX_GPIO_Init+0x2b0>)
 8000786:	f000 fd1f 	bl	80011c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800078a:	2308      	movs	r3, #8
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	486c      	ldr	r0, [pc, #432]	; (8000954 <MX_GPIO_Init+0x2a8>)
 80007a2:	f000 fb75 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4866      	ldr	r0, [pc, #408]	; (8000958 <MX_GPIO_Init+0x2ac>)
 80007be:	f000 fb67 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d2:	2305      	movs	r3, #5
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	485e      	ldr	r0, [pc, #376]	; (8000958 <MX_GPIO_Init+0x2ac>)
 80007de:	f000 fb57 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	485a      	ldr	r0, [pc, #360]	; (8000960 <MX_GPIO_Init+0x2b4>)
 80007f8:	f000 fb4a 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007fc:	2310      	movs	r3, #16
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800080c:	2306      	movs	r3, #6
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4852      	ldr	r0, [pc, #328]	; (8000960 <MX_GPIO_Init+0x2b4>)
 8000818:	f000 fb3a 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800081c:	23e0      	movs	r3, #224	; 0xe0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800082c:	2305      	movs	r3, #5
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <MX_GPIO_Init+0x2b4>)
 8000838:	f000 fb2a 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800083c:	2304      	movs	r3, #4
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4845      	ldr	r0, [pc, #276]	; (8000964 <MX_GPIO_Init+0x2b8>)
 8000850:	f000 fb1e 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	483c      	ldr	r0, [pc, #240]	; (8000964 <MX_GPIO_Init+0x2b8>)
 8000872:	f000 fb0d 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000876:	f24f 0310 	movw	r3, #61456	; 0xf010
 800087a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4833      	ldr	r0, [pc, #204]	; (800095c <MX_GPIO_Init+0x2b0>)
 8000890:	f000 fafe 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000894:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a6:	2306      	movs	r3, #6
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4829      	ldr	r0, [pc, #164]	; (8000958 <MX_GPIO_Init+0x2ac>)
 80008b2:	f000 faed 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4825      	ldr	r0, [pc, #148]	; (8000960 <MX_GPIO_Init+0x2b4>)
 80008cc:	f000 fae0 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e2:	230a      	movs	r3, #10
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	481c      	ldr	r0, [pc, #112]	; (8000960 <MX_GPIO_Init+0x2b4>)
 80008ee:	f000 facf 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4815      	ldr	r0, [pc, #84]	; (800095c <MX_GPIO_Init+0x2b0>)
 8000906:	f000 fac3 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800090a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000910:	2312      	movs	r3, #18
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091c:	2304      	movs	r3, #4
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <MX_GPIO_Init+0x2b8>)
 8000928:	f000 fab2 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x2a8>)
 8000942:	f000 faa5 	bl	8000e90 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400

08000968 <task_green_led>:

/* USER CODE BEGIN 4 */

static void task_green_led(void *params)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    while(1)
    {
    	HAL_GPIO_TogglePin(LED_GPIO_PORT,GPIO_GREEN_LED);
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <task_green_led+0x1c>)
 8000976:	f000 fc40 	bl	80011fa <HAL_GPIO_TogglePin>
        delay(250000);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <task_green_led+0x20>)
 800097c:	f000 f806 	bl	800098c <delay>
    	HAL_GPIO_TogglePin(LED_GPIO_PORT,GPIO_GREEN_LED);
 8000980:	e7f6      	b.n	8000970 <task_green_led+0x8>
 8000982:	bf00      	nop
 8000984:	40020c00 	.word	0x40020c00
 8000988:	0003d090 	.word	0x0003d090

0800098c <delay>:
    }
}

static void delay(uint32_t count)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i=0;i<count;i++)
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e002      	b.n	80009a0 <delay+0x14>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3f8      	bcc.n	800099a <delay+0xe>
    {

    }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <configure_led_gpios>:

static void configure_led_gpios(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <configure_led_gpios+0x54>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <configure_led_gpios+0x54>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <configure_led_gpios+0x54>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_GREEN_LED;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <configure_led_gpios+0x58>)
 8000a00:	f000 fa46 	bl	8000e90 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 f931 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40001000 	.word	0x40001000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x50>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_MspInit+0x50>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_MspInit+0x50>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x50>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <HAL_MspInit+0x50>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_MspInit+0x50>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f9cf 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a88:	f002 f926 	bl	8002cd8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_InitTick+0xe4>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <HAL_InitTick+0xe4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f832 	bl	8001b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f817 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8000ae2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae6:	f001 f813 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <HAL_InitTick+0xe8>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9b      	lsrs	r3, r3, #18
 8000afa:	3b01      	subs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_InitTick+0xec>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <HAL_InitTick+0xf0>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xec>)
 8000b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <HAL_InitTick+0xec>)
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_InitTick+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_InitTick+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <HAL_InitTick+0xec>)
 8000b26:	f001 f839 	bl	8001b9c <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b38:	4812      	ldr	r0, [pc, #72]	; (8000b84 <HAL_InitTick+0xec>)
 8000b3a:	f001 f889 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b4c:	2036      	movs	r0, #54	; 0x36
 8000b4e:	f000 f991 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d808      	bhi.n	8000b6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	; 0x36
 8000b5e:	f000 f96d 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_InitTick+0xf4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e002      	b.n	8000b70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3738      	adds	r7, #56	; 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	20000030 	.word	0x20000030
 8000b88:	40001000 	.word	0x40001000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM6_DAC_IRQHandler+0x10>)
 8000bc2:	f001 f8b5 	bl	8001d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000030 	.word	0x20000030

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f003 ff95 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc9f 	bl	8000568 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c38:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8000c3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c40:	20014420 	.word	0x20014420

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8d8 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff0e 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fee2 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000078 	.word	0x20000078

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000078 	.word	0x20000078

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e16b      	b.n	8001184 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 815a 	bne.w	800117e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d017      	beq.n	8000f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80b4 	beq.w	800117e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b60      	ldr	r3, [pc, #384]	; (800119c <HAL_GPIO_Init+0x30c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a5f      	ldr	r2, [pc, #380]	; (800119c <HAL_GPIO_Init+0x30c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_GPIO_Init+0x30c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a5b      	ldr	r2, [pc, #364]	; (80011a0 <HAL_GPIO_Init+0x310>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x314>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d02b      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <HAL_GPIO_Init+0x318>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x222>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_GPIO_Init+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x21e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x21a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_GPIO_Init+0x324>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x216>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <HAL_GPIO_Init+0x328>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x212>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_GPIO_Init+0x32c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x20e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_GPIO_Init+0x330>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x20a>
 8001096:	2307      	movs	r3, #7
 8001098:	e00e      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 800109a:	2308      	movs	r3, #8
 800109c:	e00c      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 800109e:	2306      	movs	r3, #6
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x310>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_Init+0x334>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_GPIO_Init+0x334>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_GPIO_Init+0x334>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f ae90 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40021c00 	.word	0x40021c00
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43d9      	mvns	r1, r3
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	400b      	ands	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e267      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6f      	ldr	r2, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a68      	ldr	r2, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fce4 	bl	8000cb4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fce0 	bl	8000cb4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e207      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcd0 	bl	8000cb4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fccc 	bl	8000cb4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f3      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc85 	bl	8000cb4 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc81 	bl	8000cb4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a8      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc64 	bl	8000cb4 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc60 	bl	8000cb4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e187      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc44 	bl	8000cb4 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc40 	bl	8000cb4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e167      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc2d 	bl	8000cb4 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fc29 	bl	8000cb4 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e150      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8097 	beq.w	80015c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a7c      	ldr	r2, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbe9 	bl	8000cb4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fbe5 	bl	8000cb4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e10c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x2ea>
 800150c:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x30c>
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fbaa 	bl	8000cb4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fba6 	bl	8000cb4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0cb      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ee      	beq.n	8001564 <HAL_RCC_OscConfig+0x334>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb94 	bl	8000cb4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fb90 	bl	8000cb4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0b5      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a38      	ldr	r2, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a1 	beq.w	8001710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d05c      	beq.n	8001694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d141      	bne.n	8001666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb64 	bl	8000cb4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb60 	bl	8000cb4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e087      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb39 	bl	8000cb4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb35 	bl	8000cb4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e05c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x416>
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb22 	bl	8000cb4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb1e 	bl	8000cb4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x444>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d028      	beq.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11a      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa50 	bl	8000cb4 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa4c 	bl	8000cb4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8e6 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08004ce4 	.word	0x08004ce4
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b094      	sub	sp, #80	; 0x50
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80e1 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e0db      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001924:	e0db      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800192a:	e0d8      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
 800194c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4621      	mov	r1, r4
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	6139      	str	r1, [r7, #16]
 800197c:	4629      	mov	r1, r5
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	ebb2 0801 	subs.w	r8, r2, r1
 80019a4:	4659      	mov	r1, fp
 80019a6:	eb63 0901 	sbc.w	r9, r3, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019be:	4690      	mov	r8, r2
 80019c0:	4699      	mov	r9, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	eb18 0303 	adds.w	r3, r8, r3
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	462b      	mov	r3, r5
 80019cc:	eb49 0303 	adc.w	r3, r9, r3
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019de:	4629      	mov	r1, r5
 80019e0:	024b      	lsls	r3, r1, #9
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e8:	4621      	mov	r1, r4
 80019ea:	024a      	lsls	r2, r1, #9
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	2200      	movs	r2, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019fc:	f7fe fc32 	bl	8000264 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	e058      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	4611      	mov	r1, r2
 8001a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a24:	4642      	mov	r2, r8
 8001a26:	464b      	mov	r3, r9
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0159      	lsls	r1, r3, #5
 8001a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a36:	0150      	lsls	r0, r2, #5
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a42:	4649      	mov	r1, r9
 8001a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a60:	eb63 050b 	sbc.w	r5, r3, fp
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4643      	mov	r3, r8
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	464b      	mov	r3, r9
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab0:	f7fe fbd8 	bl	8000264 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3750      	adds	r7, #80	; 0x50
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08004cf4 	.word	0x08004cf4

08001b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	220f      	movs	r2, #15
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_GetClockConfig+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0207 	and.w	r2, r3, #7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f839 	bl	8001c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f9d8 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04e      	b.n	8001d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d01d      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d010      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	e007      	b.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40010400 	.word	0x40010400
 8001d28:	40014000 	.word	0x40014000
 8001d2c:	40001800 	.word	0x40001800

08001d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ee 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8f1 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0204 	mvn.w	r2, #4
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8c4 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8b6 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c7 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89a 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f88c 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f89d 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0210 	mvn.w	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f870 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f862 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f873 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fdb0 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f902 	bl	80020e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f838 	bl	8001f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8cc 	bl	80020d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d027      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d023      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d017      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <TIM_Base_SetConfig+0x128>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <TIM_Base_SetConfig+0x12c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <TIM_Base_SetConfig+0x130>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <TIM_Base_SetConfig+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <TIM_Base_SetConfig+0x138>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_Base_SetConfig+0x13c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0xf8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	40001800 	.word	0x40001800
 80020c8:	40001c00 	.word	0x40001c00
 80020cc:	40002000 	.word	0x40002000

080020d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002110:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0208 	add.w	r2, r3, #8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6892      	ldr	r2, [r2, #8]
 80021b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6852      	ldr	r2, [r2, #4]
 80021ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d103      	bne.n	80021ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08c      	sub	sp, #48	; 0x30
 80021f2:	af04      	add	r7, sp, #16
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 ff12 	bl	800302c <pvPortMalloc>
 8002208:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002210:	2058      	movs	r0, #88	; 0x58
 8002212:	f000 ff0b 	bl	800302c <pvPortMalloc>
 8002216:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	e005      	b.n	8002232 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f000 ffe0 	bl	80031ec <vPortFree>
 800222c:	e001      	b.n	8002232 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	2300      	movs	r3, #0
 800223c:	9303      	str	r3, [sp, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f80e 	bl	8002270 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002254:	69f8      	ldr	r0, [r7, #28]
 8002256:	f000 f8a1 	bl	800239c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800225a:	2301      	movs	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e002      	b.n	8002266 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002264:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002266:	69bb      	ldr	r3, [r7, #24]
    }
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	21a5      	movs	r1, #165	; 0xa5
 800228a:	f002 fca3 	bl	8004bd4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002298:	3b01      	subs	r3, #1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f023 0307 	bic.w	r3, r3, #7
 80022a6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	617b      	str	r3, [r7, #20]
    }
 80022c4:	bf00      	nop
 80022c6:	e7fe      	b.n	80022c6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01f      	beq.n	800230e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e012      	b.n	80022fa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	7819      	ldrb	r1, [r3, #0]
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	3334      	adds	r3, #52	; 0x34
 80022e4:	460a      	mov	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d9e9      	bls.n	80022d4 <prvInitialiseNewTask+0x64>
 8002300:	e000      	b.n	8002304 <prvInitialiseNewTask+0x94>
            {
                break;
 8002302:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800230c:	e003      	b.n	8002316 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	2b04      	cmp	r3, #4
 800231a:	d901      	bls.n	8002320 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800231c:	2304      	movs	r3, #4
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800232a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2200      	movs	r2, #0
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	3304      	adds	r3, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fefe 	bl	8002138 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	3318      	adds	r3, #24
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fef9 	bl	8002138 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	f1c3 0205 	rsb	r2, r3, #5
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	2204      	movs	r2, #4
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fc35 	bl	8004bd4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	3354      	adds	r3, #84	; 0x54
 800236e:	2201      	movs	r2, #1
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fc2e 	bl	8004bd4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f000 fb7d 	bl	8002a7c <pxPortInitialiseStack>
 8002382:	4602      	mov	r2, r0
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002392:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023a4:	f000 fd16 	bl	8002dd4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023b2:	4b3a      	ldr	r3, [pc, #232]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ba:	4a38      	ldr	r2, [pc, #224]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d110      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023c8:	f000 fabe 	bl	8002948 <prvInitialiseTaskLists>
 80023cc:	e00d      	b.n	80023ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <prvAddNewTaskToReadyList+0x104>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d802      	bhi.n	80023ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023e4:	4a2d      	ldr	r2, [pc, #180]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <prvAddNewTaskToReadyList+0x108>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <prvAddNewTaskToReadyList+0x108>)
 80023f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <prvAddNewTaskToReadyList+0x108>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <prvAddNewTaskToReadyList+0x94>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	f002 f9a5 	bl	8004754 <SEGGER_SYSVIEW_OnTaskCreate>
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	461d      	mov	r5, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461c      	mov	r4, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	1ae3      	subs	r3, r4, r3
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	462b      	mov	r3, r5
 800242c:	f001 f8ac 	bl	8003588 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fa12 	bl	800485c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <prvAddNewTaskToReadyList+0x110>)
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f7ff fe76 	bl	8002152 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002466:	f000 fce5 	bl	8002e34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <prvAddNewTaskToReadyList+0x104>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 8002482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}
 8002498:	20000154 	.word	0x20000154
 800249c:	2000007c 	.word	0x2000007c
 80024a0:	20000160 	.word	0x20000160
 80024a4:	20000170 	.word	0x20000170
 80024a8:	2000015c 	.word	0x2000015c
 80024ac:	20000080 	.word	0x20000080
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <vTaskStartScheduler+0x98>)
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	2282      	movs	r2, #130	; 0x82
 80024c6:	4922      	ldr	r1, [pc, #136]	; (8002550 <vTaskStartScheduler+0x9c>)
 80024c8:	4822      	ldr	r0, [pc, #136]	; (8002554 <vTaskStartScheduler+0xa0>)
 80024ca:	f7ff fe90 	bl	80021ee <xTaskCreate>
 80024ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d124      	bne.n	8002520 <vTaskStartScheduler+0x6c>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	60bb      	str	r3, [r7, #8]
    }
 80024e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <vTaskStartScheduler+0xa4>)
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <vTaskStartScheduler+0xa8>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <vTaskStartScheduler+0xac>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <vTaskStartScheduler+0xb0>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <vTaskStartScheduler+0x98>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d102      	bne.n	8002510 <vTaskStartScheduler+0x5c>
 800250a:	f002 f907 	bl	800471c <SEGGER_SYSVIEW_OnIdle>
 800250e:	e004      	b.n	800251a <vTaskStartScheduler+0x66>
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <vTaskStartScheduler+0xb0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f002 f95f 	bl	80047d8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800251a:	f000 fb3b 	bl	8002b94 <xPortStartScheduler>
 800251e:	e00e      	b.n	800253e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002526:	d10a      	bne.n	800253e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	607b      	str	r3, [r7, #4]
    }
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <vTaskStartScheduler+0xb4>)
 8002540:	681b      	ldr	r3, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000178 	.word	0x20000178
 8002550:	08004c0c 	.word	0x08004c0c
 8002554:	08002939 	.word	0x08002939
 8002558:	20000174 	.word	0x20000174
 800255c:	20000160 	.word	0x20000160
 8002560:	20000158 	.word	0x20000158
 8002564:	2000007c 	.word	0x2000007c
 8002568:	2000000c 	.word	0x2000000c

0800256c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <vTaskSuspendAll+0x18>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <vTaskSuspendAll+0x18>)
 8002578:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	2000017c 	.word	0x2000017c

08002588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <xTaskResumeAll+0x11c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	603b      	str	r3, [r7, #0]
    }
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025b4:	f000 fc0e 	bl	8002dd4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025b8:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <xTaskResumeAll+0x11c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3b01      	subs	r3, #1
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <xTaskResumeAll+0x11c>)
 80025c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <xTaskResumeAll+0x11c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d165      	bne.n	8002696 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <xTaskResumeAll+0x120>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d061      	beq.n	8002696 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025d2:	e032      	b.n	800263a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <xTaskResumeAll+0x124>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3318      	adds	r3, #24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fdda 	bl	800219a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3304      	adds	r3, #4
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fdd5 	bl	800219a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 f932 	bl	800485c <SEGGER_SYSVIEW_OnTaskStartReady>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <xTaskResumeAll+0x128>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <xTaskResumeAll+0x128>)
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <xTaskResumeAll+0x12c>)
 8002618:	441a      	add	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff fd96 	bl	8002152 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <xTaskResumeAll+0x130>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <xTaskResumeAll+0x134>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <xTaskResumeAll+0x124>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1c8      	bne.n	80025d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002648:	f000 f9fc 	bl	8002a44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <xTaskResumeAll+0x138>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002658:	f000 f848 	bl	80026ec <xTaskIncrementTick>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <xTaskResumeAll+0x134>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f1      	bne.n	8002658 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <xTaskResumeAll+0x138>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <xTaskResumeAll+0x134>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002682:	2301      	movs	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <xTaskResumeAll+0x13c>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002696:	f000 fbcd 	bl	8002e34 <vPortExitCritical>

    return xAlreadyYielded;
 800269a:	68bb      	ldr	r3, [r7, #8]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000017c 	.word	0x2000017c
 80026a8:	20000154 	.word	0x20000154
 80026ac:	20000114 	.word	0x20000114
 80026b0:	2000015c 	.word	0x2000015c
 80026b4:	20000080 	.word	0x20000080
 80026b8:	2000007c 	.word	0x2000007c
 80026bc:	20000168 	.word	0x20000168
 80026c0:	20000164 	.word	0x20000164
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ce:	f000 fc6d 	bl	8002fac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <xTaskGetTickCountFromISR+0x20>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026dc:	683b      	ldr	r3, [r7, #0]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000158 	.word	0x20000158

080026ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026f6:	4b50      	ldr	r3, [pc, #320]	; (8002838 <xTaskIncrementTick+0x14c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8092 	bne.w	8002824 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002700:	4b4e      	ldr	r3, [pc, #312]	; (800283c <xTaskIncrementTick+0x150>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002708:	4a4c      	ldr	r2, [pc, #304]	; (800283c <xTaskIncrementTick+0x150>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d120      	bne.n	8002756 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <xTaskIncrementTick+0x154>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <xTaskIncrementTick+0x48>
        __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	603b      	str	r3, [r7, #0]
    }
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xTaskIncrementTick+0x46>
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <xTaskIncrementTick+0x154>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <xTaskIncrementTick+0x158>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <xTaskIncrementTick+0x154>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <xTaskIncrementTick+0x158>)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <xTaskIncrementTick+0x15c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <xTaskIncrementTick+0x15c>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	f000 f977 	bl	8002a44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <xTaskIncrementTick+0x160>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d34c      	bcc.n	80027fa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <xTaskIncrementTick+0x154>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <xTaskIncrementTick+0x160>)
 800276c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002770:	601a      	str	r2, [r3, #0]
                    break;
 8002772:	e042      	b.n	80027fa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <xTaskIncrementTick+0x154>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d203      	bcs.n	8002794 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800278c:	4a2f      	ldr	r2, [pc, #188]	; (800284c <xTaskIncrementTick+0x160>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002792:	e032      	b.n	80027fa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3304      	adds	r3, #4
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fcfe 	bl	800219a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3318      	adds	r3, #24
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fcf5 	bl	800219a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 f852 	bl	800485c <SEGGER_SYSVIEW_OnTaskStartReady>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <xTaskIncrementTick+0x164>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <xTaskIncrementTick+0x164>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <xTaskIncrementTick+0x168>)
 80027d8:	441a      	add	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7ff fcb6 	bl	8002152 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <xTaskIncrementTick+0x16c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3b5      	bcc.n	8002760 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f8:	e7b2      	b.n	8002760 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <xTaskIncrementTick+0x16c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	4914      	ldr	r1, [pc, #80]	; (8002854 <xTaskIncrementTick+0x168>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d901      	bls.n	8002816 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002812:	2301      	movs	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <xTaskIncrementTick+0x170>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800281e:	2301      	movs	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e004      	b.n	800282e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <xTaskIncrementTick+0x174>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <xTaskIncrementTick+0x174>)
 800282c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	2000017c 	.word	0x2000017c
 800283c:	20000158 	.word	0x20000158
 8002840:	2000010c 	.word	0x2000010c
 8002844:	20000110 	.word	0x20000110
 8002848:	2000016c 	.word	0x2000016c
 800284c:	20000174 	.word	0x20000174
 8002850:	2000015c 	.word	0x2000015c
 8002854:	20000080 	.word	0x20000080
 8002858:	2000007c 	.word	0x2000007c
 800285c:	20000168 	.word	0x20000168
 8002860:	20000164 	.word	0x20000164

08002864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <vTaskSwitchContext+0xbc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <vTaskSwitchContext+0xc0>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002878:	e04d      	b.n	8002916 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <vTaskSwitchContext+0xc0>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <vTaskSwitchContext+0xc4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f1c3 031f 	rsb	r3, r3, #31
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	4925      	ldr	r1, [pc, #148]	; (800292c <vTaskSwitchContext+0xc8>)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	607b      	str	r3, [r7, #4]
    }
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <vTaskSwitchContext+0x5a>
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <vTaskSwitchContext+0xc8>)
 80028cc:	4413      	add	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	3308      	adds	r3, #8
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d104      	bne.n	80028f0 <vTaskSwitchContext+0x8c>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <vTaskSwitchContext+0xcc>)
 80028f8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <vTaskSwitchContext+0xcc>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <vTaskSwitchContext+0xd0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d102      	bne.n	800290c <vTaskSwitchContext+0xa8>
 8002906:	f001 ff09 	bl	800471c <SEGGER_SYSVIEW_OnIdle>
}
 800290a:	e004      	b.n	8002916 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <vTaskSwitchContext+0xcc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f001 ff61 	bl	80047d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000017c 	.word	0x2000017c
 8002924:	20000168 	.word	0x20000168
 8002928:	2000015c 	.word	0x2000015c
 800292c:	20000080 	.word	0x20000080
 8002930:	2000007c 	.word	0x2000007c
 8002934:	20000178 	.word	0x20000178

08002938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002940:	f000 f842 	bl	80029c8 <prvCheckTasksWaitingTermination>
 8002944:	e7fc      	b.n	8002940 <prvIdleTask+0x8>
	...

08002948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	e00c      	b.n	800296e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <prvInitialiseTaskLists+0x60>)
 8002960:	4413      	add	r3, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fbc8 	bl	80020f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d9ef      	bls.n	8002954 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <prvInitialiseTaskLists+0x64>)
 8002976:	f7ff fbbf 	bl	80020f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <prvInitialiseTaskLists+0x68>)
 800297c:	f7ff fbbc 	bl	80020f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <prvInitialiseTaskLists+0x6c>)
 8002982:	f7ff fbb9 	bl	80020f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002986:	480c      	ldr	r0, [pc, #48]	; (80029b8 <prvInitialiseTaskLists+0x70>)
 8002988:	f7ff fbb6 	bl	80020f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800298c:	480b      	ldr	r0, [pc, #44]	; (80029bc <prvInitialiseTaskLists+0x74>)
 800298e:	f7ff fbb3 	bl	80020f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <prvInitialiseTaskLists+0x78>)
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <prvInitialiseTaskLists+0x64>)
 8002996:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <prvInitialiseTaskLists+0x7c>)
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <prvInitialiseTaskLists+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000080 	.word	0x20000080
 80029ac:	200000e4 	.word	0x200000e4
 80029b0:	200000f8 	.word	0x200000f8
 80029b4:	20000114 	.word	0x20000114
 80029b8:	20000128 	.word	0x20000128
 80029bc:	20000140 	.word	0x20000140
 80029c0:	2000010c 	.word	0x2000010c
 80029c4:	20000110 	.word	0x20000110

080029c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029ce:	e019      	b.n	8002a04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029d0:	f000 fa00 	bl	8002dd4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <prvCheckTasksWaitingTermination+0x50>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fbda 	bl	800219a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <prvCheckTasksWaitingTermination+0x54>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <prvCheckTasksWaitingTermination+0x54>)
 80029ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <prvCheckTasksWaitingTermination+0x58>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <prvCheckTasksWaitingTermination+0x58>)
 80029f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80029fa:	f000 fa1b 	bl	8002e34 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f810 	bl	8002a24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <prvCheckTasksWaitingTermination+0x58>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e1      	bne.n	80029d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000128 	.word	0x20000128
 8002a1c:	20000154 	.word	0x20000154
 8002a20:	2000013c 	.word	0x2000013c

08002a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fbdb 	bl	80031ec <vPortFree>
                vPortFree( pxTCB );
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fbd8 	bl	80031ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <prvResetNextTaskUnblockTime+0x30>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <prvResetNextTaskUnblockTime+0x34>)
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a5a:	e005      	b.n	8002a68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <prvResetNextTaskUnblockTime+0x30>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <prvResetNextTaskUnblockTime+0x34>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000010c 	.word	0x2000010c
 8002a78:	20000174 	.word	0x20000174

08002a7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f023 0201 	bic.w	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <pxPortInitialiseStack+0x64>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3b14      	subs	r3, #20
 8002ab6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f06f 0202 	mvn.w	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	08002ae5 	.word	0x08002ae5

08002ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <prvTaskExitError+0x54>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d00a      	beq.n	8002b0e <prvTaskExitError+0x2a>
        __asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	60fb      	str	r3, [r7, #12]
    }
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <prvTaskExitError+0x28>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60bb      	str	r3, [r7, #8]
    }
 8002b20:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b22:	bf00      	nop
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0fc      	beq.n	8002b24 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	00000000 	.word	0x00000000

08002b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <pxCurrentTCBConst2>)
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	6808      	ldr	r0, [r1, #0]
 8002b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4a:	f380 8809 	msr	PSP, r0
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8811 	msr	BASEPRI, r0
 8002b5a:	4770      	bx	lr
 8002b5c:	f3af 8000 	nop.w

08002b60 <pxCurrentTCBConst2>:
 8002b60:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop

08002b68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b68:	4808      	ldr	r0, [pc, #32]	; (8002b8c <prvPortStartFirstTask+0x24>)
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	6800      	ldr	r0, [r0, #0]
 8002b6e:	f380 8808 	msr	MSP, r0
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f380 8814 	msr	CONTROL, r0
 8002b7a:	b662      	cpsie	i
 8002b7c:	b661      	cpsie	f
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	df00      	svc	0
 8002b88:	bf00      	nop
 8002b8a:	0000      	.short	0x0000
 8002b8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop

08002b94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b9a:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <xPortStartScheduler+0x120>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <xPortStartScheduler+0x124>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10a      	bne.n	8002bba <xPortStartScheduler+0x26>
        __asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	613b      	str	r3, [r7, #16]
    }
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <xPortStartScheduler+0x120>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <xPortStartScheduler+0x128>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10a      	bne.n	8002bda <xPortStartScheduler+0x46>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	60fb      	str	r3, [r7, #12]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <xPortStartScheduler+0x12c>)
 8002bdc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <xPortStartScheduler+0x130>)
 8002c00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c08:	e009      	b.n	8002c1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d0ef      	beq.n	8002c0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d00a      	beq.n	8002c4c <xPortStartScheduler+0xb8>
        __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	60bb      	str	r3, [r7, #8]
    }
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <xPortStartScheduler+0x134>)
 8002c60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <xPortStartScheduler+0x138>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <xPortStartScheduler+0x138>)
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <xPortStartScheduler+0x138>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <xPortStartScheduler+0x138>)
 8002c7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c82:	f000 f963 	bl	8002f4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <xPortStartScheduler+0x13c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c8c:	f000 f982 	bl	8002f94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <xPortStartScheduler+0x140>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <xPortStartScheduler+0x140>)
 8002c96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c9c:	f7ff ff64 	bl	8002b68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ca0:	f7ff fde0 	bl	8002864 <vTaskSwitchContext>
    prvTaskExitError();
 8002ca4:	f7ff ff1e 	bl	8002ae4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	410fc271 	.word	0x410fc271
 8002cbc:	410fc270 	.word	0x410fc270
 8002cc0:	e000e400 	.word	0xe000e400
 8002cc4:	20000180 	.word	0x20000180
 8002cc8:	20000184 	.word	0x20000184
 8002ccc:	e000ed20 	.word	0xe000ed20
 8002cd0:	20000010 	.word	0x20000010
 8002cd4:	e000ef34 	.word	0xe000ef34

08002cd8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <vInitPrioGroupValue+0xe4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	; (8002dc0 <vInitPrioGroupValue+0xe8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10a      	bne.n	8002cfe <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	613b      	str	r3, [r7, #16]
    }
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <vInitPrioGroupValue+0xe4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <vInitPrioGroupValue+0xec>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10a      	bne.n	8002d1e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	60fb      	str	r3, [r7, #12]
    }
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <vInitPrioGroupValue+0xf0>)
 8002d20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <vInitPrioGroupValue+0xf4>)
 8002d44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d4c:	e009      	b.n	8002d62 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d0ef      	beq.n	8002d4e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00a      	beq.n	8002d90 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60bb      	str	r3, [r7, #8]
    }
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d98:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <vInitPrioGroupValue+0xf8>)
 8002da4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00
 8002dc0:	410fc271 	.word	0x410fc271
 8002dc4:	410fc270 	.word	0x410fc270
 8002dc8:	e000e400 	.word	0xe000e400
 8002dcc:	20000180 	.word	0x20000180
 8002dd0:	20000184 	.word	0x20000184

08002dd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
        __asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	607b      	str	r3, [r7, #4]
    }
 8002dec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <vPortEnterCritical+0x58>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <vPortEnterCritical+0x58>)
 8002df6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <vPortEnterCritical+0x58>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10f      	bne.n	8002e20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <vPortEnterCritical+0x5c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	603b      	str	r3, [r7, #0]
    }
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <vPortEnterCritical+0x4a>
    }
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <vPortExitCritical+0x50>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <vPortExitCritical+0x24>
        __asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	607b      	str	r3, [r7, #4]
    }
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <vPortExitCritical+0x50>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <vPortExitCritical+0x50>)
 8002e60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <vPortExitCritical+0x50>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <vPortExitCritical+0x42>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000010 	.word	0x20000010
	...

08002e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e90:	f3ef 8009 	mrs	r0, PSP
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <pxCurrentTCBConst>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	f01e 0f10 	tst.w	lr, #16
 8002ea0:	bf08      	it	eq
 8002ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eaa:	6010      	str	r0, [r2, #0]
 8002eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002eb4:	f380 8811 	msr	BASEPRI, r0
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f7ff fcd0 	bl	8002864 <vTaskSwitchContext>
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f380 8811 	msr	BASEPRI, r0
 8002ecc:	bc09      	pop	{r0, r3}
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	6808      	ldr	r0, [r1, #0]
 8002ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed6:	f01e 0f10 	tst.w	lr, #16
 8002eda:	bf08      	it	eq
 8002edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ee0:	f380 8809 	msr	PSP, r0
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w

08002ef0 <pxCurrentTCBConst>:
 8002ef0:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop

08002ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
        __asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	607b      	str	r3, [r7, #4]
    }
 8002f10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f12:	f001 fb89 	bl	8004628 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f16:	f7ff fbe9 	bl	80026ec <xTaskIncrementTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f20:	f001 fbe0 	bl	80046e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <SysTick_Handler+0x50>)
 8002f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e001      	b.n	8002f32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f2e:	f001 fbbd 	bl	80046ac <SEGGER_SYSVIEW_RecordExitISR>
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f383 8811 	msr	BASEPRI, r3
    }
 8002f3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <vPortSetupTimerInterrupt+0x34>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <vPortSetupTimerInterrupt+0x38>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <vPortSetupTimerInterrupt+0x3c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <vPortSetupTimerInterrupt+0x40>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	099b      	lsrs	r3, r3, #6
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <vPortSetupTimerInterrupt+0x44>)
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <vPortSetupTimerInterrupt+0x34>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010
 8002f84:	e000e018 	.word	0xe000e018
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	10624dd3 	.word	0x10624dd3
 8002f90:	e000e014 	.word	0xe000e014

08002f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fa4 <vPortEnableVFP+0x10>
 8002f98:	6801      	ldr	r1, [r0, #0]
 8002f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f9e:	6001      	str	r1, [r0, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	0000      	.short	0x0000
 8002fa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop

08002fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002fb2:	f3ef 8305 	mrs	r3, IPSR
 8002fb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d914      	bls.n	8002fe8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <vPortValidateInterruptPriority+0x70>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <vPortValidateInterruptPriority+0x74>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	7afa      	ldrb	r2, [r7, #11]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d20a      	bcs.n	8002fe8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
    }
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <vPortValidateInterruptPriority+0x78>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <vPortValidateInterruptPriority+0x7c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d90a      	bls.n	800300e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	603b      	str	r3, [r7, #0]
    }
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <vPortValidateInterruptPriority+0x60>
    }
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e3f0 	.word	0xe000e3f0
 8003020:	20000180 	.word	0x20000180
 8003024:	e000ed0c 	.word	0xe000ed0c
 8003028:	20000184 	.word	0x20000184

0800302c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003038:	f7ff fa98 	bl	800256c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <pvPortMalloc+0x1a8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003044:	f000 f934 	bl	80032b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003048:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <pvPortMalloc+0x1ac>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 80a7 	bne.w	80031a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02d      	beq.n	80030b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800305c:	2208      	movs	r2, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d227      	bcs.n	80030b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003068:	2208      	movs	r2, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d021      	beq.n	80030be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f023 0307 	bic.w	r3, r3, #7
 8003080:	3308      	adds	r3, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d214      	bcs.n	80030b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	3308      	adds	r3, #8
 8003090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <pvPortMalloc+0x92>
        __asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	617b      	str	r3, [r7, #20]
    }
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b6:	e002      	b.n	80030be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	e000      	b.n	80030c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06e      	beq.n	80031a4 <pvPortMalloc+0x178>
 80030c6:	4b45      	ldr	r3, [pc, #276]	; (80031dc <pvPortMalloc+0x1b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d869      	bhi.n	80031a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <pvPortMalloc+0x1b4>)
 80030d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <pvPortMalloc+0x1b4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030da:	e004      	b.n	80030e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d903      	bls.n	80030f8 <pvPortMalloc+0xcc>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f1      	bne.n	80030dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <pvPortMalloc+0x1a8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	d050      	beq.n	80031a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2208      	movs	r2, #8
 8003108:	4413      	add	r3, r2
 800310a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	2308      	movs	r3, #8
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	429a      	cmp	r2, r3
 8003122:	d91f      	bls.n	8003164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <pvPortMalloc+0x120>
        __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	613b      	str	r3, [r7, #16]
    }
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800315e:	69b8      	ldr	r0, [r7, #24]
 8003160:	f000 f908 	bl	8003374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <pvPortMalloc+0x1b0>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <pvPortMalloc+0x1b0>)
 8003170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <pvPortMalloc+0x1b0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <pvPortMalloc+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d203      	bcs.n	8003186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <pvPortMalloc+0x1b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <pvPortMalloc+0x1b8>)
 8003184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <pvPortMalloc+0x1ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	431a      	orrs	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <pvPortMalloc+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <pvPortMalloc+0x1bc>)
 80031a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031a4:	f7ff f9f0 	bl	8002588 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <pvPortMalloc+0x19c>
        __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
    }
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80031c8:	69fb      	ldr	r3, [r7, #28]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20012d90 	.word	0x20012d90
 80031d8:	20012da4 	.word	0x20012da4
 80031dc:	20012d94 	.word	0x20012d94
 80031e0:	20012d88 	.word	0x20012d88
 80031e4:	20012d98 	.word	0x20012d98
 80031e8:	20012d9c 	.word	0x20012d9c

080031ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04d      	beq.n	800329a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80031fe:	2308      	movs	r3, #8
 8003200:	425b      	negs	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <vPortFree+0xb8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <vPortFree+0x44>
        __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
    }
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <vPortFree+0x62>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	60bb      	str	r3, [r7, #8]
    }
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <vPortFree+0xb8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11a      	bne.n	800329a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <vPortFree+0xb8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003274:	f7ff f97a 	bl	800256c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <vPortFree+0xbc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4413      	add	r3, r2
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <vPortFree+0xbc>)
 8003284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003286:	6938      	ldr	r0, [r7, #16]
 8003288:	f000 f874 	bl	8003374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <vPortFree+0xc0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <vPortFree+0xc0>)
 8003294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003296:	f7ff f977 	bl	8002588 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20012da4 	.word	0x20012da4
 80032a8:	20012d94 	.word	0x20012d94
 80032ac:	20012da0 	.word	0x20012da0

080032b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80032ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <prvHeapInit+0xac>)
 80032be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3307      	adds	r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0307 	bic.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <prvHeapInit+0xac>)
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <prvHeapInit+0xb0>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <prvHeapInit+0xb0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80032fc:	2208      	movs	r2, #8
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <prvHeapInit+0xb4>)
 8003310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <prvHeapInit+0xb4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <prvHeapInit+0xb4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <prvHeapInit+0xb4>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <prvHeapInit+0xb8>)
 800333e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a09      	ldr	r2, [pc, #36]	; (800336c <prvHeapInit+0xbc>)
 8003346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <prvHeapInit+0xc0>)
 800334a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000188 	.word	0x20000188
 8003360:	20012d88 	.word	0x20012d88
 8003364:	20012d90 	.word	0x20012d90
 8003368:	20012d98 	.word	0x20012d98
 800336c:	20012d94 	.word	0x20012d94
 8003370:	20012da4 	.word	0x20012da4

08003374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <prvInsertBlockIntoFreeList+0xac>)
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <prvInsertBlockIntoFreeList+0x14>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d8f7      	bhi.n	8003382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d108      	bne.n	80033b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	441a      	add	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d118      	bne.n	80033fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <prvInsertBlockIntoFreeList+0xb0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d00d      	beq.n	80033f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e008      	b.n	8003404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <prvInsertBlockIntoFreeList+0xb0>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e003      	b.n	8003404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d002      	beq.n	8003412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20012d88 	.word	0x20012d88
 8003424:	20012d90 	.word	0x20012d90

08003428 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800342c:	4803      	ldr	r0, [pc, #12]	; (800343c <_cbSendSystemDesc+0x14>)
 800342e:	f001 f8a5 	bl	800457c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003432:	4803      	ldr	r0, [pc, #12]	; (8003440 <_cbSendSystemDesc+0x18>)
 8003434:	f001 f8a2 	bl	800457c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08004c14 	.word	0x08004c14
 8003440:	08004c5c 	.word	0x08004c5c

08003444 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <SEGGER_SYSVIEW_Conf+0x20>)
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SEGGER_SYSVIEW_Conf+0x20>)
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SEGGER_SYSVIEW_Conf+0x24>)
 8003452:	4a06      	ldr	r2, [pc, #24]	; (800346c <SEGGER_SYSVIEW_Conf+0x28>)
 8003454:	f000 fd18 	bl	8003e88 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003458:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800345c:	f000 fd58 	bl	8003f10 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000000 	.word	0x20000000
 8003468:	08003429 	.word	0x08003429
 800346c:	08004cfc 	.word	0x08004cfc

08003470 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b085      	sub	sp, #20
 8003474:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	e033      	b.n	80034e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800347c:	491e      	ldr	r1, [pc, #120]	; (80034f8 <_cbSendTaskList+0x88>)
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	491a      	ldr	r1, [pc, #104]	; (80034f8 <_cbSendTaskList+0x88>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3304      	adds	r3, #4
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	4c16      	ldr	r4, [pc, #88]	; (80034f8 <_cbSendTaskList+0x88>)
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4423      	add	r3, r4
 80034ac:	3308      	adds	r3, #8
 80034ae:	681c      	ldr	r4, [r3, #0]
 80034b0:	4d11      	ldr	r5, [pc, #68]	; (80034f8 <_cbSendTaskList+0x88>)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	442b      	add	r3, r5
 80034be:	330c      	adds	r3, #12
 80034c0:	681d      	ldr	r5, [r3, #0]
 80034c2:	4e0d      	ldr	r6, [pc, #52]	; (80034f8 <_cbSendTaskList+0x88>)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4433      	add	r3, r6
 80034d0:	3310      	adds	r3, #16
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	462b      	mov	r3, r5
 80034d8:	4622      	mov	r2, r4
 80034da:	f000 f8bd 	bl	8003658 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3301      	adds	r3, #1
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <_cbSendTaskList+0x8c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3c6      	bcc.n	800347c <_cbSendTaskList+0xc>
  }
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f8:	20012da8 	.word	0x20012da8
 80034fc:	20012e48 	.word	0x20012e48

08003500 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003508:	f7ff f8de 	bl	80026c8 <xTaskGetTickCountFromISR>
 800350c:	4603      	mov	r3, r0
 800350e:	2200      	movs	r2, #0
 8003510:	469a      	mov	sl, r3
 8003512:	4693      	mov	fp, r2
 8003514:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	f04f 0a00 	mov.w	sl, #0
 8003524:	f04f 0b00 	mov.w	fp, #0
 8003528:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800352c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003530:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003534:	4652      	mov	r2, sl
 8003536:	465b      	mov	r3, fp
 8003538:	1a14      	subs	r4, r2, r0
 800353a:	eb63 0501 	sbc.w	r5, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	00ab      	lsls	r3, r5, #2
 8003548:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800354c:	00a2      	lsls	r2, r4, #2
 800354e:	4614      	mov	r4, r2
 8003550:	461d      	mov	r5, r3
 8003552:	eb14 0800 	adds.w	r8, r4, r0
 8003556:	eb45 0901 	adc.w	r9, r5, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356e:	4690      	mov	r8, r2
 8003570:	4699      	mov	r9, r3
 8003572:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003576:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003588 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003596:	2205      	movs	r2, #5
 8003598:	492b      	ldr	r1, [pc, #172]	; (8003648 <SYSVIEW_AddTask+0xc0>)
 800359a:	68b8      	ldr	r0, [r7, #8]
 800359c:	f001 fafc 	bl	8004b98 <memcmp>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d04b      	beq.n	800363e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035a6:	4b29      	ldr	r3, [pc, #164]	; (800364c <SYSVIEW_AddTask+0xc4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b07      	cmp	r3, #7
 80035ac:	d903      	bls.n	80035b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035ae:	4828      	ldr	r0, [pc, #160]	; (8003650 <SYSVIEW_AddTask+0xc8>)
 80035b0:	f001 fa72 	bl	8004a98 <SEGGER_SYSVIEW_Warn>
    return;
 80035b4:	e044      	b.n	8003640 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <SYSVIEW_AddTask+0xc4>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4926      	ldr	r1, [pc, #152]	; (8003654 <SYSVIEW_AddTask+0xcc>)
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <SYSVIEW_AddTask+0xc4>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4921      	ldr	r1, [pc, #132]	; (8003654 <SYSVIEW_AddTask+0xcc>)
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3304      	adds	r3, #4
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <SYSVIEW_AddTask+0xc4>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	491b      	ldr	r1, [pc, #108]	; (8003654 <SYSVIEW_AddTask+0xcc>)
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3308      	adds	r3, #8
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <SYSVIEW_AddTask+0xc4>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4916      	ldr	r1, [pc, #88]	; (8003654 <SYSVIEW_AddTask+0xcc>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	330c      	adds	r3, #12
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <SYSVIEW_AddTask+0xc4>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4910      	ldr	r1, [pc, #64]	; (8003654 <SYSVIEW_AddTask+0xcc>)
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3310      	adds	r3, #16
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <SYSVIEW_AddTask+0xc4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a08      	ldr	r2, [pc, #32]	; (800364c <SYSVIEW_AddTask+0xc4>)
 800362a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f80e 	bl	8003658 <SYSVIEW_SendTaskInfo>
 800363c:	e000      	b.n	8003640 <SYSVIEW_AddTask+0xb8>
    return;
 800363e:	bf00      	nop

}
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	08004c6c 	.word	0x08004c6c
 800364c:	20012e48 	.word	0x20012e48
 8003650:	08004c74 	.word	0x08004c74
 8003654:	20012da8 	.word	0x20012da8

08003658 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	2214      	movs	r2, #20
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f001 fab0 	bl	8004bd4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fe7d 	bl	800438c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <_DoInit+0x98>)
 80036a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2203      	movs	r2, #3
 80036aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2203      	movs	r2, #3
 80036b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a20      	ldr	r2, [pc, #128]	; (8003738 <_DoInit+0x9c>)
 80036b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <_DoInit+0xa0>)
 80036bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <_DoInit+0x9c>)
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <_DoInit+0xa4>)
 80036e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2210      	movs	r2, #16
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3307      	adds	r3, #7
 8003700:	4a10      	ldr	r2, [pc, #64]	; (8003744 <_DoInit+0xa8>)
 8003702:	6810      	ldr	r0, [r2, #0]
 8003704:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003706:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <_DoInit+0xac>)
 800370e:	6810      	ldr	r0, [r2, #0]
 8003710:	6018      	str	r0, [r3, #0]
 8003712:	8891      	ldrh	r1, [r2, #4]
 8003714:	7992      	ldrb	r2, [r2, #6]
 8003716:	8099      	strh	r1, [r3, #4]
 8003718:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800371a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003724:	f3bf 8f5f 	dmb	sy
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	20012e4c 	.word	0x20012e4c
 8003738:	08004cc4 	.word	0x08004cc4
 800373c:	20012ef4 	.word	0x20012ef4
 8003740:	200132f4 	.word	0x200132f4
 8003744:	08004cd0 	.word	0x08004cd0
 8003748:	08004cd4 	.word	0x08004cd4

0800374c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003758:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <SEGGER_RTT_ReadNoLock+0x108>)
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <SEGGER_RTT_ReadNoLock+0x1e>
 8003766:	f7ff ff99 	bl	800369c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3360      	adds	r3, #96	; 0x60
 8003776:	4a37      	ldr	r2, [pc, #220]	; (8003854 <SEGGER_RTT_ReadNoLock+0x108>)
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800378c:	2300      	movs	r3, #0
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	429a      	cmp	r2, r3
 8003796:	d92b      	bls.n	80037f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bf28      	it	cs
 80037aa:	4613      	movcs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	4413      	add	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	6939      	ldr	r1, [r7, #16]
 80037bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037be:	f001 f9fb 	bl	8004bb8 <memcpy>
    NumBytesRead += NumBytesRem;
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4413      	add	r3, r2
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	4413      	add	r3, r2
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80037da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4413      	add	r3, r2
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d101      	bne.n	80037f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf28      	it	cs
 8003800:	4613      	movcs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d019      	beq.n	800383e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	4413      	add	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800381a:	f001 f9cd 	bl	8004bb8 <memcpy>
    NumBytesRead += NumBytesRem;
 800381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4413      	add	r3, r2
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4413      	add	r3, r2
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003848:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800384c:	4618      	mov	r0, r3
 800384e:	3730      	adds	r7, #48	; 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20012e4c 	.word	0x20012e4c

08003858 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003866:	4b3d      	ldr	r3, [pc, #244]	; (800395c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003874:	f7ff ff12 	bl	800369c <_DoInit>
  SEGGER_RTT_LOCK();
 8003878:	f3ef 8311 	mrs	r3, BASEPRI
 800387c:	f04f 0120 	mov.w	r1, #32
 8003880:	f381 8811 	msr	BASEPRI, r1
 8003884:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003886:	4b35      	ldr	r3, [pc, #212]	; (800395c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003888:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800388e:	6939      	ldr	r1, [r7, #16]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	440b      	add	r3, r1
 800389e:	3304      	adds	r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	dbeb      	blt.n	800388e <SEGGER_RTT_AllocUpBuffer+0x36>
 80038b6:	e000      	b.n	80038ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80038b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	da3f      	bge.n	8003944 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	440b      	add	r3, r1
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80038d8:	6939      	ldr	r1, [r7, #16]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	3304      	adds	r3, #4
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80038ee:	6939      	ldr	r1, [r7, #16]
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	440b      	add	r3, r1
 80038fc:	3320      	adds	r3, #32
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003902:	6939      	ldr	r1, [r7, #16]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	440b      	add	r3, r1
 8003910:	3328      	adds	r3, #40	; 0x28
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	3324      	adds	r3, #36	; 0x24
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	332c      	adds	r3, #44	; 0x2c
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800393e:	f3bf 8f5f 	dmb	sy
 8003942:	e002      	b.n	800394a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003948:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003950:	69fb      	ldr	r3, [r7, #28]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20012e4c 	.word	0x20012e4c

08003960 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800397c:	f7ff fe8e 	bl	800369c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003980:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003982:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	461a      	mov	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4293      	cmp	r3, r2
 800398e:	d24d      	bcs.n	8003a2c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003990:	f3ef 8311 	mrs	r3, BASEPRI
 8003994:	f04f 0120 	mov.w	r1, #32
 8003998:	f381 8811 	msr	BASEPRI, r1
 800399c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d031      	beq.n	8003a08 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80039a4:	6979      	ldr	r1, [r7, #20]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	3360      	adds	r3, #96	; 0x60
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	3364      	adds	r3, #100	; 0x64
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	3368      	adds	r3, #104	; 0x68
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	3370      	adds	r3, #112	; 0x70
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	336c      	adds	r3, #108	; 0x6c
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	3374      	adds	r3, #116	; 0x74
 8003a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a1c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e002      	b.n	8003a32 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a30:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003a32:	69fb      	ldr	r3, [r7, #28]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20012e4c 	.word	0x20012e4c

08003a40 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a50:	e002      	b.n	8003a58 <_EncodeStr+0x18>
    Len++;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f6      	bne.n	8003a52 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d901      	bls.n	8003a70 <_EncodeStr+0x30>
    Len = Limit;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2bfe      	cmp	r3, #254	; 0xfe
 8003a74:	d806      	bhi.n	8003a84 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	60fa      	str	r2, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e011      	b.n	8003aa8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	60fa      	str	r2, [r7, #12]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	60fa      	str	r2, [r7, #12]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	0a19      	lsrs	r1, r3, #8
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	60fa      	str	r2, [r7, #12]
 8003aa4:	b2ca      	uxtb	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003aac:	e00a      	b.n	8003ac4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	1c53      	adds	r3, r2, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	60f9      	str	r1, [r7, #12]
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
    n++;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3f0      	bcc.n	8003aae <_EncodeStr+0x6e>
  }
  return pPayload;
 8003acc:	68fb      	ldr	r3, [r7, #12]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <_HandleIncomingPacket+0xe0>)
 8003afc:	7e1b      	ldrb	r3, [r3, #24]
 8003afe:	4618      	mov	r0, r3
 8003b00:	1cfb      	adds	r3, r7, #3
 8003b02:	2201      	movs	r2, #1
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7ff fe21 	bl	800374c <SEGGER_RTT_ReadNoLock>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dd54      	ble.n	8003bbe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d032      	beq.n	8003b80 <_HandleIncomingPacket+0x8c>
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	dc42      	bgt.n	8003ba4 <_HandleIncomingPacket+0xb0>
 8003b1e:	2b07      	cmp	r3, #7
 8003b20:	dc16      	bgt.n	8003b50 <_HandleIncomingPacket+0x5c>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	dd3e      	ble.n	8003ba4 <_HandleIncomingPacket+0xb0>
 8003b26:	3b01      	subs	r3, #1
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	d83b      	bhi.n	8003ba4 <_HandleIncomingPacket+0xb0>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <_HandleIncomingPacket+0x40>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b57 	.word	0x08003b57
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b6f 	.word	0x08003b6f
 8003b48:	08003b75 	.word	0x08003b75
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	2b7f      	cmp	r3, #127	; 0x7f
 8003b52:	d036      	beq.n	8003bc2 <_HandleIncomingPacket+0xce>
 8003b54:	e026      	b.n	8003ba4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003b56:	f000 fa9f 	bl	8004098 <SEGGER_SYSVIEW_Start>
      break;
 8003b5a:	e037      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003b5c:	f000 fb56 	bl	800420c <SEGGER_SYSVIEW_Stop>
      break;
 8003b60:	e034      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003b62:	f000 fd2f 	bl	80045c4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003b66:	e031      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003b68:	f000 fcf4 	bl	8004554 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003b6c:	e02e      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003b6e:	f000 fb73 	bl	8004258 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003b72:	e02b      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003b74:	f000 ff52 	bl	8004a1c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003b78:	e028      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003b7a:	f000 ff31 	bl	80049e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003b7e:	e025      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <_HandleIncomingPacket+0xe0>)
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	4618      	mov	r0, r3
 8003b86:	1cfb      	adds	r3, r7, #3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7ff fdde 	bl	800374c <SEGGER_RTT_ReadNoLock>
 8003b90:	4603      	mov	r3, r0
 8003b92:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dd15      	ble.n	8003bc6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fe9f 	bl	80048e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003ba2:	e010      	b.n	8003bc6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0e      	bge.n	8003bca <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <_HandleIncomingPacket+0xe0>)
 8003bae:	7e1b      	ldrb	r3, [r3, #24]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	1cfb      	adds	r3, r7, #3
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7ff fdc8 	bl	800374c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003bbc:	e005      	b.n	8003bca <_HandleIncomingPacket+0xd6>
    }
  }
 8003bbe:	bf00      	nop
 8003bc0:	e004      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <_HandleIncomingPacket+0xd8>
      break;
 8003bca:	bf00      	nop
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2001430c 	.word	0x2001430c

08003bd8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003bde:	2301      	movs	r3, #1
 8003be0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	e00b      	b.n	8003c0c <_TrySendOverflowPacket+0x34>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	09db      	lsrs	r3, r3, #7
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c10:	d8f0      	bhi.n	8003bf4 <_TrySendOverflowPacket+0x1c>
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c22:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <_TrySendOverflowPacket+0xe0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	e00b      	b.n	8003c54 <_TrySendOverflowPacket+0x7c>
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	6279      	str	r1, [r7, #36]	; 0x24
 8003c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	09db      	lsrs	r3, r3, #7
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	2b7f      	cmp	r3, #127	; 0x7f
 8003c58:	d8f0      	bhi.n	8003c3c <_TrySendOverflowPacket+0x64>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003c6a:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fc faa8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003c80:	4603      	mov	r3, r0
 8003c82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e004      	b.n	8003ca8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a03      	ldr	r2, [pc, #12]	; (8003cb4 <_TrySendOverflowPacket+0xdc>)
 8003ca6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003ca8:	693b      	ldr	r3, [r7, #16]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3730      	adds	r7, #48	; 0x30
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2001430c 	.word	0x2001430c
 8003cb8:	e0001004 	.word	0xe0001004

08003cbc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <_SendPacket+0x1c0>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d010      	beq.n	8003cf2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <_SendPacket+0x1c0>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a3 	beq.w	8003e20 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003cda:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <_SendPacket+0x1c0>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d109      	bne.n	8003cf6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003ce2:	f7ff ff79 	bl	8003bd8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <_SendPacket+0x1c0>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	f040 809a 	bne.w	8003e24 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003cf0:	e001      	b.n	8003cf6 <_SendPacket+0x3a>
    goto Send;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <_SendPacket+0x3c>
Send:
 8003cf6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b1f      	cmp	r3, #31
 8003cfc:	d809      	bhi.n	8003d12 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <_SendPacket+0x1c0>)
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 808b 	bne.w	8003e28 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b17      	cmp	r3, #23
 8003d16:	d807      	bhi.n	8003d28 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e03d      	b.n	8003da4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b7f      	cmp	r3, #127	; 0x7f
 8003d34:	d912      	bls.n	8003d5c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	09da      	lsrs	r2, r3, #7
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	60fa      	str	r2, [r7, #12]
 8003d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e006      	b.n	8003d6a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d6e:	d912      	bls.n	8003d96 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	09da      	lsrs	r2, r3, #7
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	3a01      	subs	r2, #1
 8003d88:	60fa      	str	r2, [r7, #12]
 8003d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e006      	b.n	8003da4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <_SendPacket+0x1c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003daa:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <_SendPacket+0x1c0>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	e00b      	b.n	8003dd6 <_SendPacket+0x11a>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	6279      	str	r1, [r7, #36]	; 0x24
 8003dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dda:	d8f0      	bhi.n	8003dbe <_SendPacket+0x102>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	627a      	str	r2, [r7, #36]	; 0x24
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <_SendPacket+0x1c0>)
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	4618      	mov	r0, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f7fc f9e8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003e00:	4603      	mov	r3, r0
 8003e02:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <_SendPacket+0x1c0>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	60d3      	str	r3, [r2, #12]
 8003e10:	e00b      	b.n	8003e2a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <_SendPacket+0x1c0>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <_SendPacket+0x1c0>)
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e004      	b.n	8003e2a <_SendPacket+0x16e>
    goto SendDone;
 8003e20:	bf00      	nop
 8003e22:	e002      	b.n	8003e2a <_SendPacket+0x16e>
      goto SendDone;
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <_SendPacket+0x16e>
      goto SendDone;
 8003e28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <_SendPacket+0x1c0>)
 8003e2c:	7e1b      	ldrb	r3, [r3, #24]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <_SendPacket+0x1c8>)
 8003e32:	460b      	mov	r3, r1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	336c      	adds	r3, #108	; 0x6c
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <_SendPacket+0x1c0>)
 8003e42:	7e1b      	ldrb	r3, [r3, #24]
 8003e44:	4618      	mov	r0, r3
 8003e46:	490f      	ldr	r1, [pc, #60]	; (8003e84 <_SendPacket+0x1c8>)
 8003e48:	4603      	mov	r3, r0
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4403      	add	r3, r0
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	440b      	add	r3, r1
 8003e52:	3370      	adds	r3, #112	; 0x70
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d00b      	beq.n	8003e72 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <_SendPacket+0x1c0>)
 8003e5c:	789b      	ldrb	r3, [r3, #2]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <_SendPacket+0x1c0>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003e68:	f7ff fe44 	bl	8003af4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <_SendPacket+0x1c0>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003e72:	bf00      	nop
 8003e74:	3728      	adds	r7, #40	; 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2001430c 	.word	0x2001430c
 8003e80:	e0001004 	.word	0xe0001004
 8003e84:	20012e4c 	.word	0x20012e4c

08003e88 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003e96:	2300      	movs	r3, #0
 8003e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e9c:	4917      	ldr	r1, [pc, #92]	; (8003efc <SEGGER_SYSVIEW_Init+0x74>)
 8003e9e:	4818      	ldr	r0, [pc, #96]	; (8003f00 <SEGGER_SYSVIEW_Init+0x78>)
 8003ea0:	f7ff fcda 	bl	8003858 <SEGGER_RTT_AllocUpBuffer>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eaa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eae:	785a      	ldrb	r2, [r3, #1]
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eb2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eb6:	7e1b      	ldrb	r3, [r3, #24]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <SEGGER_SYSVIEW_Init+0x80>)
 8003ec2:	490f      	ldr	r1, [pc, #60]	; (8003f00 <SEGGER_SYSVIEW_Init+0x78>)
 8003ec4:	f7ff fd4c 	bl	8003960 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <SEGGER_SYSVIEW_Init+0x84>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ed4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003ed6:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003edc:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20013304 	.word	0x20013304
 8003f00:	08004cdc 	.word	0x08004cdc
 8003f04:	2001430c 	.word	0x2001430c
 8003f08:	20014304 	.word	0x20014304
 8003f0c:	e0001004 	.word	0xe0001004

08003f10 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6113      	str	r3, [r2, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2001430c 	.word	0x2001430c

08003f30 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f38:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3c:	f04f 0120 	mov.w	r1, #32
 8003f40:	f381 8811 	msr	BASEPRI, r1
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	4808      	ldr	r0, [pc, #32]	; (8003f68 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003f48:	f7ff fdc7 	bl	8003ada <_PreparePacket>
 8003f4c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	f7ff feb2 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f383 8811 	msr	BASEPRI, r3
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2001433c 	.word	0x2001433c

08003f6c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f76:	f3ef 8311 	mrs	r3, BASEPRI
 8003f7a:	f04f 0120 	mov.w	r1, #32
 8003f7e:	f381 8811 	msr	BASEPRI, r1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	4816      	ldr	r0, [pc, #88]	; (8003fe0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003f86:	f7ff fda8 	bl	8003ada <_PreparePacket>
 8003f8a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	e00b      	b.n	8003fb2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	1c59      	adds	r1, r3, #1
 8003fa2:	61f9      	str	r1, [r7, #28]
 8003fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	09db      	lsrs	r3, r3, #7
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb6:	d8f0      	bhi.n	8003f9a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	6938      	ldr	r0, [r7, #16]
 8003fce:	f7ff fe75 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f383 8811 	msr	BASEPRI, r3
}
 8003fd8:	bf00      	nop
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2001433c 	.word	0x2001433c

08003fe4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff4:	f04f 0120 	mov.w	r1, #32
 8003ff8:	f381 8811 	msr	BASEPRI, r1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	4825      	ldr	r0, [pc, #148]	; (8004094 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004000:	f7ff fd6b 	bl	8003ada <_PreparePacket>
 8004004:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
 8004012:	e00b      	b.n	800402c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800401e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	09db      	lsrs	r3, r3, #7
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	2b7f      	cmp	r3, #127	; 0x7f
 8004030:	d8f0      	bhi.n	8004014 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	e00b      	b.n	8004064 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	1c59      	adds	r1, r3, #1
 8004054:	6279      	str	r1, [r7, #36]	; 0x24
 8004056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	09db      	lsrs	r3, r3, #7
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2b7f      	cmp	r3, #127	; 0x7f
 8004068:	d8f0      	bhi.n	800404c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	627a      	str	r2, [r7, #36]	; 0x24
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	69b8      	ldr	r0, [r7, #24]
 8004080:	f7ff fe1c 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f383 8811 	msr	BASEPRI, r3
}
 800408a:	bf00      	nop
 800408c:	3730      	adds	r7, #48	; 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2001433c 	.word	0x2001433c

08004098 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800409e:	4b58      	ldr	r3, [pc, #352]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80040a4:	f3ef 8311 	mrs	r3, BASEPRI
 80040a8:	f04f 0120 	mov.w	r1, #32
 80040ac:	f381 8811 	msr	BASEPRI, r1
 80040b0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80040b2:	4b53      	ldr	r3, [pc, #332]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	220a      	movs	r2, #10
 80040b8:	4952      	ldr	r1, [pc, #328]	; (8004204 <SEGGER_SYSVIEW_Start+0x16c>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc f888 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80040c6:	200a      	movs	r0, #10
 80040c8:	f7ff ff32 	bl	8003f30 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80040cc:	f3ef 8311 	mrs	r3, BASEPRI
 80040d0:	f04f 0120 	mov.w	r1, #32
 80040d4:	f381 8811 	msr	BASEPRI, r1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	484b      	ldr	r0, [pc, #300]	; (8004208 <SEGGER_SYSVIEW_Start+0x170>)
 80040dc:	f7ff fcfd 	bl	8003ada <_PreparePacket>
 80040e0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	4b45      	ldr	r3, [pc, #276]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f0:	e00b      	b.n	800410a <SEGGER_SYSVIEW_Start+0x72>
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	1c59      	adds	r1, r3, #1
 80040fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	09db      	lsrs	r3, r3, #7
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b7f      	cmp	r3, #127	; 0x7f
 800410e:	d8f0      	bhi.n	80040f2 <SEGGER_SYSVIEW_Start+0x5a>
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
 8004124:	4b36      	ldr	r3, [pc, #216]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	e00b      	b.n	8004144 <SEGGER_SYSVIEW_Start+0xac>
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	6279      	str	r1, [r7, #36]	; 0x24
 8004136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b7f      	cmp	r3, #127	; 0x7f
 8004148:	d8f0      	bhi.n	800412c <SEGGER_SYSVIEW_Start+0x94>
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	627a      	str	r2, [r7, #36]	; 0x24
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	4b28      	ldr	r3, [pc, #160]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e00b      	b.n	800417e <SEGGER_SYSVIEW_Start+0xe6>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1c59      	adds	r1, r3, #1
 800416e:	61f9      	str	r1, [r7, #28]
 8004170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	09db      	lsrs	r3, r3, #7
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b7f      	cmp	r3, #127	; 0x7f
 8004182:	d8f0      	bhi.n	8004166 <SEGGER_SYSVIEW_Start+0xce>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	e00b      	b.n	80041b6 <SEGGER_SYSVIEW_Start+0x11e>
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	6179      	str	r1, [r7, #20]
 80041a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	09db      	lsrs	r3, r3, #7
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ba:	d8f0      	bhi.n	800419e <SEGGER_SYSVIEW_Start+0x106>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	617a      	str	r2, [r7, #20]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80041cc:	2218      	movs	r2, #24
 80041ce:	6839      	ldr	r1, [r7, #0]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fd73 	bl	8003cbc <_SendPacket>
      RECORD_END();
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <SEGGER_SYSVIEW_Start+0x168>)
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80041ea:	f000 f9eb 	bl	80045c4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80041ee:	f000 f9b1 	bl	8004554 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80041f2:	f000 fc13 	bl	8004a1c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80041f6:	bf00      	nop
 80041f8:	3730      	adds	r7, #48	; 0x30
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2001430c 	.word	0x2001430c
 8004204:	08004d04 	.word	0x08004d04
 8004208:	2001433c 	.word	0x2001433c

0800420c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004212:	f3ef 8311 	mrs	r3, BASEPRI
 8004216:	f04f 0120 	mov.w	r1, #32
 800421a:	f381 8811 	msr	BASEPRI, r1
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	480b      	ldr	r0, [pc, #44]	; (8004250 <SEGGER_SYSVIEW_Stop+0x44>)
 8004222:	f7ff fc5a 	bl	8003ada <_PreparePacket>
 8004226:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <SEGGER_SYSVIEW_Stop+0x48>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004230:	220b      	movs	r2, #11
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	f7ff fd41 	bl	8003cbc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <SEGGER_SYSVIEW_Stop+0x48>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f383 8811 	msr	BASEPRI, r3
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	2001433c 	.word	0x2001433c
 8004254:	2001430c 	.word	0x2001430c

08004258 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	; 0x30
 800425c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800425e:	f3ef 8311 	mrs	r3, BASEPRI
 8004262:	f04f 0120 	mov.w	r1, #32
 8004266:	f381 8811 	msr	BASEPRI, r1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	4845      	ldr	r0, [pc, #276]	; (8004384 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800426e:	f7ff fc34 	bl	8003ada <_PreparePacket>
 8004272:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	e00b      	b.n	800429c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	b2da      	uxtb	r2, r3
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800428e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	2b7f      	cmp	r3, #127	; 0x7f
 80042a0:	d8f0      	bhi.n	8004284 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
 80042b6:	4b34      	ldr	r3, [pc, #208]	; (8004388 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	e00b      	b.n	80042d6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	6279      	str	r1, [r7, #36]	; 0x24
 80042c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	09db      	lsrs	r3, r3, #7
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	d8f0      	bhi.n	80042be <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	627a      	str	r2, [r7, #36]	; 0x24
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e00b      	b.n	8004310 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	1c59      	adds	r1, r3, #1
 8004300:	61f9      	str	r1, [r7, #28]
 8004302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	09db      	lsrs	r3, r3, #7
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b7f      	cmp	r3, #127	; 0x7f
 8004314:	d8f0      	bhi.n	80042f8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	61fa      	str	r2, [r7, #28]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e00b      	b.n	8004348 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	1c59      	adds	r1, r3, #1
 8004338:	6179      	str	r1, [r7, #20]
 800433a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	09db      	lsrs	r3, r3, #7
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b7f      	cmp	r3, #127	; 0x7f
 800434c:	d8f0      	bhi.n	8004330 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	617a      	str	r2, [r7, #20]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800435e:	2218      	movs	r2, #24
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f7ff fcaa 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	4798      	blx	r3
  }
}
 800437c:	bf00      	nop
 800437e:	3730      	adds	r7, #48	; 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	2001433c 	.word	0x2001433c
 8004388:	2001430c 	.word	0x2001430c

0800438c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b092      	sub	sp, #72	; 0x48
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004394:	f3ef 8311 	mrs	r3, BASEPRI
 8004398:	f04f 0120 	mov.w	r1, #32
 800439c:	f381 8811 	msr	BASEPRI, r1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	486a      	ldr	r0, [pc, #424]	; (800454c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80043a4:	f7ff fb99 	bl	8003ada <_PreparePacket>
 80043a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b66      	ldr	r3, [pc, #408]	; (8004550 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
 80043be:	e00b      	b.n	80043d8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c6:	1c59      	adds	r1, r3, #1
 80043c8:	6479      	str	r1, [r7, #68]	; 0x44
 80043ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d4:	09db      	lsrs	r3, r3, #7
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
 80043d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043da:	2b7f      	cmp	r3, #127	; 0x7f
 80043dc:	d8f0      	bhi.n	80043c0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80043de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	647a      	str	r2, [r7, #68]	; 0x44
 80043e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f8:	e00b      	b.n	8004412 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	1c59      	adds	r1, r3, #1
 8004402:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b7f      	cmp	r3, #127	; 0x7f
 8004416:	d8f0      	bhi.n	80043fa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800441e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004426:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fb05 	bl	8003a40 <_EncodeStr>
 8004436:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004438:	2209      	movs	r2, #9
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6938      	ldr	r0, [r7, #16]
 800443e:	f7ff fc3d 	bl	8003cbc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	e00b      	b.n	8004470 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	b2da      	uxtb	r2, r3
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	6379      	str	r1, [r7, #52]	; 0x34
 8004462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	2b7f      	cmp	r3, #127	; 0x7f
 8004474:	d8f0      	bhi.n	8004458 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	637a      	str	r2, [r7, #52]	; 0x34
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004490:	e00b      	b.n	80044aa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800449c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	2b7f      	cmp	r3, #127	; 0x7f
 80044ae:	d8f0      	bhi.n	8004492 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	e00b      	b.n	80044e4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	6279      	str	r1, [r7, #36]	; 0x24
 80044d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	09db      	lsrs	r3, r3, #7
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b7f      	cmp	r3, #127	; 0x7f
 80044e8:	d8f0      	bhi.n	80044cc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	627a      	str	r2, [r7, #36]	; 0x24
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e00b      	b.n	800451c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1c59      	adds	r1, r3, #1
 800450c:	61f9      	str	r1, [r7, #28]
 800450e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b7f      	cmp	r3, #127	; 0x7f
 8004520:	d8f0      	bhi.n	8004504 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	61fa      	str	r2, [r7, #28]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004532:	2215      	movs	r2, #21
 8004534:	68f9      	ldr	r1, [r7, #12]
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f7ff fbc0 	bl	8003cbc <_SendPacket>
  RECORD_END();
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f383 8811 	msr	BASEPRI, r3
}
 8004542:	bf00      	nop
 8004544:	3748      	adds	r7, #72	; 0x48
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2001433c 	.word	0x2001433c
 8004550:	2001430c 	.word	0x2001430c

08004554 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800456a:	4b03      	ldr	r3, [pc, #12]	; (8004578 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4798      	blx	r3
  }
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2001430c 	.word	0x2001430c

0800457c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004584:	f3ef 8311 	mrs	r3, BASEPRI
 8004588:	f04f 0120 	mov.w	r1, #32
 800458c:	f381 8811 	msr	BASEPRI, r1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	480b      	ldr	r0, [pc, #44]	; (80045c0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004594:	f7ff faa1 	bl	8003ada <_PreparePacket>
 8004598:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f7ff fa4e 	bl	8003a40 <_EncodeStr>
 80045a4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80045a6:	220e      	movs	r2, #14
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f7ff fb86 	bl	8003cbc <_SendPacket>
  RECORD_END();
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f383 8811 	msr	BASEPRI, r3
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2001433c 	.word	0x2001433c

080045c4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01a      	beq.n	8004608 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4798      	blx	r3
 80045e4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80045e8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80045ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	000a      	movs	r2, r1
 80045f8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80045fa:	4613      	mov	r3, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4621      	mov	r1, r4
 8004600:	200d      	movs	r0, #13
 8004602:	f7ff fcef 	bl	8003fe4 <SEGGER_SYSVIEW_RecordU32x2>
 8004606:	e006      	b.n	8004616 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4619      	mov	r1, r3
 800460e:	200c      	movs	r0, #12
 8004610:	f7ff fcac 	bl	8003f6c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}
 800461e:	bf00      	nop
 8004620:	2001430c 	.word	0x2001430c
 8004624:	e0001004 	.word	0xe0001004

08004628 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800462e:	f3ef 8311 	mrs	r3, BASEPRI
 8004632:	f04f 0120 	mov.w	r1, #32
 8004636:	f381 8811 	msr	BASEPRI, r1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	4819      	ldr	r0, [pc, #100]	; (80046a4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800463e:	f7ff fa4c 	bl	8003ada <_PreparePacket>
 8004642:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e00b      	b.n	8004674 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	6179      	str	r1, [r7, #20]
 8004666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	09db      	lsrs	r3, r3, #7
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b7f      	cmp	r3, #127	; 0x7f
 8004678:	d8f0      	bhi.n	800465c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	617a      	str	r2, [r7, #20]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800468a:	2202      	movs	r2, #2
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f7ff fb14 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f383 8811 	msr	BASEPRI, r3
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	2001433c 	.word	0x2001433c
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046b2:	f3ef 8311 	mrs	r3, BASEPRI
 80046b6:	f04f 0120 	mov.w	r1, #32
 80046ba:	f381 8811 	msr	BASEPRI, r1
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	4807      	ldr	r0, [pc, #28]	; (80046e0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80046c2:	f7ff fa0a 	bl	8003ada <_PreparePacket>
 80046c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80046c8:	2203      	movs	r2, #3
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f7ff faf5 	bl	8003cbc <_SendPacket>
  RECORD_END();
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f383 8811 	msr	BASEPRI, r3
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2001433c 	.word	0x2001433c

080046e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046ea:	f3ef 8311 	mrs	r3, BASEPRI
 80046ee:	f04f 0120 	mov.w	r1, #32
 80046f2:	f381 8811 	msr	BASEPRI, r1
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	4807      	ldr	r0, [pc, #28]	; (8004718 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80046fa:	f7ff f9ee 	bl	8003ada <_PreparePacket>
 80046fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004700:	2212      	movs	r2, #18
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6838      	ldr	r0, [r7, #0]
 8004706:	f7ff fad9 	bl	8003cbc <_SendPacket>
  RECORD_END();
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f383 8811 	msr	BASEPRI, r3
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2001433c 	.word	0x2001433c

0800471c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004722:	f3ef 8311 	mrs	r3, BASEPRI
 8004726:	f04f 0120 	mov.w	r1, #32
 800472a:	f381 8811 	msr	BASEPRI, r1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	4807      	ldr	r0, [pc, #28]	; (8004750 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004732:	f7ff f9d2 	bl	8003ada <_PreparePacket>
 8004736:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004738:	2211      	movs	r2, #17
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7ff fabd 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f383 8811 	msr	BASEPRI, r3
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2001433c 	.word	0x2001433c

08004754 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800475c:	f3ef 8311 	mrs	r3, BASEPRI
 8004760:	f04f 0120 	mov.w	r1, #32
 8004764:	f381 8811 	msr	BASEPRI, r1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	4819      	ldr	r0, [pc, #100]	; (80047d0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800476c:	f7ff f9b5 	bl	8003ada <_PreparePacket>
 8004770:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e00b      	b.n	80047a2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	61f9      	str	r1, [r7, #28]
 8004794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	09db      	lsrs	r3, r3, #7
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b7f      	cmp	r3, #127	; 0x7f
 80047a6:	d8f0      	bhi.n	800478a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80047b8:	2208      	movs	r2, #8
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6938      	ldr	r0, [r7, #16]
 80047be:	f7ff fa7d 	bl	8003cbc <_SendPacket>
  RECORD_END();
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f383 8811 	msr	BASEPRI, r3
}
 80047c8:	bf00      	nop
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	2001433c 	.word	0x2001433c
 80047d4:	2001430c 	.word	0x2001430c

080047d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047e0:	f3ef 8311 	mrs	r3, BASEPRI
 80047e4:	f04f 0120 	mov.w	r1, #32
 80047e8:	f381 8811 	msr	BASEPRI, r1
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	4819      	ldr	r0, [pc, #100]	; (8004854 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80047f0:	f7ff f973 	bl	8003ada <_PreparePacket>
 80047f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e00b      	b.n	8004826 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	1c59      	adds	r1, r3, #1
 8004816:	61f9      	str	r1, [r7, #28]
 8004818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	09db      	lsrs	r3, r3, #7
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b7f      	cmp	r3, #127	; 0x7f
 800482a:	d8f0      	bhi.n	800480e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	61fa      	str	r2, [r7, #28]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800483c:	2204      	movs	r2, #4
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	6938      	ldr	r0, [r7, #16]
 8004842:	f7ff fa3b 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f383 8811 	msr	BASEPRI, r3
}
 800484c:	bf00      	nop
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	2001433c 	.word	0x2001433c
 8004858:	2001430c 	.word	0x2001430c

0800485c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004864:	f3ef 8311 	mrs	r3, BASEPRI
 8004868:	f04f 0120 	mov.w	r1, #32
 800486c:	f381 8811 	msr	BASEPRI, r1
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	4819      	ldr	r0, [pc, #100]	; (80048d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004874:	f7ff f931 	bl	8003ada <_PreparePacket>
 8004878:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e00b      	b.n	80048aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	61f9      	str	r1, [r7, #28]
 800489c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	09db      	lsrs	r3, r3, #7
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b7f      	cmp	r3, #127	; 0x7f
 80048ae:	d8f0      	bhi.n	8004892 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	61fa      	str	r2, [r7, #28]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80048c0:	2206      	movs	r2, #6
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6938      	ldr	r0, [r7, #16]
 80048c6:	f7ff f9f9 	bl	8003cbc <_SendPacket>
  RECORD_END();
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f383 8811 	msr	BASEPRI, r3
}
 80048d0:	bf00      	nop
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	2001433c 	.word	0x2001433c
 80048dc:	2001430c 	.word	0x2001430c

080048e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80048ea:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d06d      	beq.n	80049ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80048f2:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80048f8:	2300      	movs	r3, #0
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	e008      	b.n	8004910 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	3301      	adds	r3, #1
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	429a      	cmp	r2, r3
 8004916:	d3f2      	bcc.n	80048fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8004918:	e000      	b.n	800491c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800491a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d055      	beq.n	80049ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004922:	f3ef 8311 	mrs	r3, BASEPRI
 8004926:	f04f 0120 	mov.w	r1, #32
 800492a:	f381 8811 	msr	BASEPRI, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	482a      	ldr	r0, [pc, #168]	; (80049dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004932:	f7ff f8d2 	bl	8003ada <_PreparePacket>
 8004936:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	e00b      	b.n	800495e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	6279      	str	r1, [r7, #36]	; 0x24
 8004950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	09db      	lsrs	r3, r3, #7
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b7f      	cmp	r3, #127	; 0x7f
 8004962:	d8f0      	bhi.n	8004946 <SEGGER_SYSVIEW_SendModule+0x66>
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	627a      	str	r2, [r7, #36]	; 0x24
 800496a:	6a3a      	ldr	r2, [r7, #32]
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e00b      	b.n	8004998 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	61f9      	str	r1, [r7, #28]
 800498a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	09db      	lsrs	r3, r3, #7
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b7f      	cmp	r3, #127	; 0x7f
 800499c:	d8f0      	bhi.n	8004980 <SEGGER_SYSVIEW_SendModule+0xa0>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	61fa      	str	r2, [r7, #28]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	4619      	mov	r1, r3
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff f842 	bl	8003a40 <_EncodeStr>
 80049bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80049be:	2216      	movs	r2, #22
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	6938      	ldr	r0, [r7, #16]
 80049c4:	f7ff f97a 	bl	8003cbc <_SendPacket>
      RECORD_END();
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80049ce:	bf00      	nop
 80049d0:	3730      	adds	r7, #48	; 0x30
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20014334 	.word	0x20014334
 80049dc:	2001433c 	.word	0x2001433c

080049e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00f      	beq.n	8004a0e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f2      	bne.n	80049f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20014334 	.word	0x20014334

08004a1c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004a22:	f3ef 8311 	mrs	r3, BASEPRI
 8004a26:	f04f 0120 	mov.w	r1, #32
 8004a2a:	f381 8811 	msr	BASEPRI, r1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	4817      	ldr	r0, [pc, #92]	; (8004a90 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004a32:	f7ff f852 	bl	8003ada <_PreparePacket>
 8004a36:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e00b      	b.n	8004a60 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	6179      	str	r1, [r7, #20]
 8004a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	09db      	lsrs	r3, r3, #7
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b7f      	cmp	r3, #127	; 0x7f
 8004a64:	d8f0      	bhi.n	8004a48 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	617a      	str	r2, [r7, #20]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004a76:	221b      	movs	r2, #27
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f7ff f91e 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f383 8811 	msr	BASEPRI, r3
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	2001433c 	.word	0x2001433c
 8004a94:	20014338 	.word	0x20014338

08004a98 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa4:	f04f 0120 	mov.w	r1, #32
 8004aa8:	f381 8811 	msr	BASEPRI, r1
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	4827      	ldr	r0, [pc, #156]	; (8004b4c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004ab0:	f7ff f813 	bl	8003ada <_PreparePacket>
 8004ab4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6938      	ldr	r0, [r7, #16]
 8004abc:	f7fe ffc0 	bl	8003a40 <_EncodeStr>
 8004ac0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	623b      	str	r3, [r7, #32]
 8004aca:	e00b      	b.n	8004ae4 <SEGGER_SYSVIEW_Warn+0x4c>
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae8:	d8f0      	bhi.n	8004acc <SEGGER_SYSVIEW_Warn+0x34>
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	627a      	str	r2, [r7, #36]	; 0x24
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e00b      	b.n	8004b1c <SEGGER_SYSVIEW_Warn+0x84>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	61f9      	str	r1, [r7, #28]
 8004b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b20:	d8f0      	bhi.n	8004b04 <SEGGER_SYSVIEW_Warn+0x6c>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	61fa      	str	r2, [r7, #28]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b32:	221a      	movs	r2, #26
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	6938      	ldr	r0, [r7, #16]
 8004b38:	f7ff f8c0 	bl	8003cbc <_SendPacket>
  RECORD_END();
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f383 8811 	msr	BASEPRI, r3
}
 8004b42:	bf00      	nop
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2001433c 	.word	0x2001433c

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 f83e 	bl	8004be4 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08004d18 	.word	0x08004d18
 8004b8c:	08004d18 	.word	0x08004d18
 8004b90:	08004d18 	.word	0x08004d18
 8004b94:	08004d1c 	.word	0x08004d1c

08004b98 <memcmp>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	3901      	subs	r1, #1
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4290      	cmp	r0, r2
 8004ba0:	d101      	bne.n	8004ba6 <memcmp+0xe>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e005      	b.n	8004bb2 <memcmp+0x1a>
 8004ba6:	7803      	ldrb	r3, [r0, #0]
 8004ba8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d001      	beq.n	8004bb4 <memcmp+0x1c>
 8004bb0:	1b18      	subs	r0, r3, r4
 8004bb2:	bd10      	pop	{r4, pc}
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	e7f2      	b.n	8004b9e <memcmp+0x6>

08004bb8 <memcpy>:
 8004bb8:	440a      	add	r2, r1
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bc0:	d100      	bne.n	8004bc4 <memcpy+0xc>
 8004bc2:	4770      	bx	lr
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bce:	4291      	cmp	r1, r2
 8004bd0:	d1f9      	bne.n	8004bc6 <memcpy+0xe>
 8004bd2:	bd10      	pop	{r4, pc}

08004bd4 <memset>:
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d100      	bne.n	8004bde <memset+0xa>
 8004bdc:	4770      	bx	lr
 8004bde:	f803 1b01 	strb.w	r1, [r3], #1
 8004be2:	e7f9      	b.n	8004bd8 <memset+0x4>

08004be4 <_init>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr

08004bf0 <_fini>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr
