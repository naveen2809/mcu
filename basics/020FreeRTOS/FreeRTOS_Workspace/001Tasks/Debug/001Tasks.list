
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d5c  08007d5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d64  08007d64  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001449c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014514  20014514  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001511f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310d  00000000  00000000  000351c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  000382d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  00039688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002445e  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160ae  00000000  00000000  0005ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d90b7  00000000  00000000  00074dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014de63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb4  00000000  00000000  0014deb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ad8 	.word	0x08007ad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007ad8 	.word	0x08007ad8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f2c 	.word	0x20012f2c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fbe9 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f831 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f899 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  configure_led_gpios();
 8000626:	f000 fa27 	bl	8000a78 <configure_led_gpios>

  //Configure the Interrupt Priority Grouping
  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <main+0x64>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0x64>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8000636:	f004 fb7d 	bl	8004d34 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800063a:	f005 fbeb 	bl	8005e14 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_green_led,"green_led_task",1024,NULL,2,&task_handle_green_led);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	490b      	ldr	r1, [pc, #44]	; (800067c <main+0x68>)
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x6c>)
 8000650:	f002 fc34 	bl	8002ebc <xTaskCreate>
 8000654:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d00a      	beq.n	8000672 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066e:	bf00      	nop
 8000670:	e7fe      	b.n	8000670 <main+0x5c>

  vTaskStartScheduler();
 8000672:	f002 fe09 	bl	8003288 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x62>
 8000678:	e0001000 	.word	0xe0001000
 800067c:	08007af0 	.word	0x08007af0
 8000680:	08000a15 	.word	0x08000a15

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 f9e4 	bl	8006a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f8:	2332      	movs	r3, #50	; 0x32
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000700:	2307      	movs	r3, #7
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fe65 	bl	80013d8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000714:	f000 f9f0 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8c6 	bl	80018c8 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000742:	f000 f9d9 	bl	8000af8 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4ba2      	ldr	r3, [pc, #648]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4aa1      	ldr	r2, [pc, #644]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b9f      	ldr	r3, [pc, #636]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b9b      	ldr	r3, [pc, #620]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a9a      	ldr	r2, [pc, #616]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b98      	ldr	r3, [pc, #608]	; (80009fc <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b94      	ldr	r3, [pc, #592]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a93      	ldr	r2, [pc, #588]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b91      	ldr	r3, [pc, #580]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a8c      	ldr	r2, [pc, #560]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b86      	ldr	r3, [pc, #536]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a85      	ldr	r2, [pc, #532]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b83      	ldr	r3, [pc, #524]	; (80009fc <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b7f      	ldr	r3, [pc, #508]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a7e      	ldr	r2, [pc, #504]	; (80009fc <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b7c      	ldr	r3, [pc, #496]	; (80009fc <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4879      	ldr	r0, [pc, #484]	; (8000a00 <MX_GPIO_Init+0x2a8>)
 800081c:	f000 fda8 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4877      	ldr	r0, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x2ac>)
 8000826:	f000 fda3 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4875      	ldr	r0, [pc, #468]	; (8000a08 <MX_GPIO_Init+0x2b0>)
 8000832:	f000 fd9d 	bl	8001370 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	486c      	ldr	r0, [pc, #432]	; (8000a00 <MX_GPIO_Init+0x2a8>)
 800084e:	f000 fbf3 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4866      	ldr	r0, [pc, #408]	; (8000a04 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fbe5 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fbd5 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	485a      	ldr	r0, [pc, #360]	; (8000a0c <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fbc8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a8:	2310      	movs	r3, #16
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b8:	2306      	movs	r3, #6
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4852      	ldr	r0, [pc, #328]	; (8000a0c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbb8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c8:	23e0      	movs	r3, #224	; 0xe0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d8:	2305      	movs	r3, #5
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	484a      	ldr	r0, [pc, #296]	; (8000a0c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fba8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4845      	ldr	r0, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x2b8>)
 80008fc:	f000 fb9c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483c      	ldr	r0, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x2b8>)
 800091e:	f000 fb8b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000926:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4833      	ldr	r0, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x2b0>)
 800093c:	f000 fb7c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000940:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000952:	2306      	movs	r3, #6
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4829      	ldr	r0, [pc, #164]	; (8000a04 <MX_GPIO_Init+0x2ac>)
 800095e:	f000 fb6b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4825      	ldr	r0, [pc, #148]	; (8000a0c <MX_GPIO_Init+0x2b4>)
 8000978:	f000 fb5e 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800097c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098e:	230a      	movs	r3, #10
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	481c      	ldr	r0, [pc, #112]	; (8000a0c <MX_GPIO_Init+0x2b4>)
 800099a:	f000 fb4d 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_GPIO_Init+0x2b0>)
 80009b2:	f000 fb41 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x2b8>)
 80009d4:	f000 fb30 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0x2a8>)
 80009ee:	f000 fb23 	bl	8001038 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <task_green_led>:

/* USER CODE BEGIN 4 */

static void task_green_led(void *params)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TASK_PERIOD_TICKS;
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	617b      	str	r3, [r7, #20]
	uint32_t rnum;

	 xLastWakeTime = xTaskGetTickCount();
 8000a20:	f002 fd42 	bl	80034a8 <xTaskGetTickCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	60fb      	str	r3, [r7, #12]

    while(1)
    {
    	rnum = rand() % MAX_RAND_NUM;
 8000a28:	f006 f822 	bl	8006a70 <rand>
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <task_green_led+0x5c>)
 8000a30:	fb83 2301 	smull	r2, r3, r3, r1
 8000a34:	109a      	asrs	r2, r3, #2
 8000a36:	17cb      	asrs	r3, r1, #31
 8000a38:	1ad2      	subs	r2, r2, r3
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	1aca      	subs	r2, r1, r3
 8000a44:	613a      	str	r2, [r7, #16]

    	while(xTaskGetTickCount() < xLastWakeTime + rnum)
 8000a46:	bf00      	nop
 8000a48:	f002 fd2e 	bl	80034a8 <xTaskGetTickCount>
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4413      	add	r3, r2
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d3f7      	bcc.n	8000a48 <task_green_led+0x34>
    	{

    	}

    	HAL_GPIO_TogglePin(LED_GPIO_PORT,GPIO_GREEN_LED);
 8000a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <task_green_led+0x60>)
 8000a5e:	f000 fca0 	bl	80013a2 <HAL_GPIO_TogglePin>
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	6979      	ldr	r1, [r7, #20]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fb8b 	bl	8003184 <xTaskDelayUntil>
    	rnum = rand() % MAX_RAND_NUM;
 8000a6e:	e7db      	b.n	8000a28 <task_green_led+0x14>
 8000a70:	38e38e39 	.word	0x38e38e39
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <configure_led_gpios>:
    }
}

static void configure_led_gpios(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <configure_led_gpios+0x54>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <configure_led_gpios+0x54>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <configure_led_gpios+0x54>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_GREEN_LED;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <configure_led_gpios+0x58>)
 8000ac0:	f000 faba 	bl	8001038 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f9a5 	bl	8000e34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_MspInit+0x50>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_MspInit+0x50>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_MspInit+0x50>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x50>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <HAL_MspInit+0x50>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_MspInit+0x50>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f000 fa43 	bl	8000fce <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b48:	f003 fd3e 	bl	80045c8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f8a6 	bl	8001ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9e:	f001 f88b 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba4:	e004      	b.n	8000bb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ba6:	f001 f887 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000baa:	4603      	mov	r3, r0
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_InitTick+0xe8>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_InitTick+0xec>)
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <HAL_InitTick+0xf0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_InitTick+0xec>)
 8000bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_InitTick+0xec>)
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_InitTick+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_InitTick+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_InitTick+0xec>)
 8000be6:	f001 f8ad 	bl	8001d44 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11b      	bne.n	8000c30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bf8:	4812      	ldr	r0, [pc, #72]	; (8000c44 <HAL_InitTick+0xec>)
 8000bfa:	f001 f8fd 	bl	8001df8 <HAL_TIM_Base_Start_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d111      	bne.n	8000c30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0c:	2036      	movs	r0, #54	; 0x36
 8000c0e:	f000 fa05 	bl	800101c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d808      	bhi.n	8000c2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f000 f9e1 	bl	8000fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_InitTick+0xf4>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e002      	b.n	8000c30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3738      	adds	r7, #56	; 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	20000094 	.word	0x20000094
 8000c48:	40001000 	.word	0x40001000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM6_DAC_IRQHandler+0x10>)
 8000c82:	f001 f929 	bl	8001ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000094 	.word	0x20000094

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000caa:	f005 fe91 	bl	80069d0 <__errno>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2216      	movs	r2, #22
 8000cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_exit>:

void _exit (int status)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffe7 	bl	8000ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd2:	e7fe      	b.n	8000cd2 <_exit+0x12>

08000cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e00a      	b.n	8000cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce6:	f3af 8000 	nop.w
 8000cea:	4601      	mov	r1, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	b2ca      	uxtb	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf0      	blt.n	8000ce6 <_read+0x12>
  }

  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff ffd7 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f005 fe07 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fc21 	bl	8000614 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000de0:	08007d6c 	.word	0x08007d6c
  ldr r2, =_sbss
 8000de4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000de8:	20014514 	.word	0x20014514

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f8d8 	bl	8000fce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fe9a 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fe6e 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200000dc 	.word	0x200000dc

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000dc 	.word	0x200000dc

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff4c 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff6:	f7ff ff61 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8000ffa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6978      	ldr	r0, [r7, #20]
 8001002:	f7ff ffb1 	bl	8000f68 <NVIC_EncodePriority>
 8001006:	4602      	mov	r2, r0
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff80 	bl	8000f14 <__NVIC_SetPriority>
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff54 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e16b      	b.n	800132c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 815a 	bne.w	8001326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	2b02      	cmp	r3, #2
 8001088:	d130      	bne.n	80010ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 0201 	and.w	r2, r3, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d017      	beq.n	8001128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	69b9      	ldr	r1, [r7, #24]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80b4 	beq.w	8001326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <HAL_GPIO_Init+0x310>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x314>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x318>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x31c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x320>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x324>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x328>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x20e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x20a>
 800123e:	2307      	movs	r3, #7
 8001240:	e00e      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001242:	2308      	movs	r3, #8
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001246:	2306      	movs	r3, #6
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x310>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_GPIO_Init+0x334>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_GPIO_Init+0x334>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_GPIO_Init+0x334>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <HAL_GPIO_Init+0x334>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_GPIO_Init+0x334>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_GPIO_Init+0x334>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_GPIO_Init+0x334>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_GPIO_Init+0x334>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae90 	bls.w	8001054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	041a      	lsls	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43d9      	mvns	r1, r3
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	400b      	ands	r3, r1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e267      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d075      	beq.n	80014e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d00c      	beq.n	800141c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b85      	ldr	r3, [pc, #532]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d112      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140e:	4b82      	ldr	r3, [pc, #520]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d05b      	beq.n	80014e0 <HAL_RCC_OscConfig+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d157      	bne.n	80014e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e242      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x74>
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a75      	ldr	r2, [pc, #468]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xb0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x98>
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xb0>
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a68      	ldr	r2, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a65      	ldr	r2, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fce4 	bl	8000e5c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fce0 	bl	8000e5c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e207      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xc0>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fcd0 	bl	8000e5c <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fccc 	bl	8000e5c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1f3      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	4b51      	ldr	r3, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0xe8>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001502:	2b08      	cmp	r3, #8
 8001504:	d11c      	bne.n	8001540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001506:	4b44      	ldr	r3, [pc, #272]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x152>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1c7      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4937      	ldr	r1, [pc, #220]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	e03a      	b.n	80015b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_OscConfig+0x244>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fc85 	bl	8000e5c <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fc81 	bl	8000e5c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1a8      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4925      	ldr	r1, [pc, #148]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_OscConfig+0x244>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc64 	bl	8000e5c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc60 	bl	8000e5c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e187      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d036      	beq.n	8001630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d016      	beq.n	80015f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_RCC_OscConfig+0x248>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc44 	bl	8000e5c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc40 	bl	8000e5c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e167      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x240>)
 80015ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x200>
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x248>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fc2d 	bl	8000e5c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	e00e      	b.n	8001624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fc29 	bl	8000e5c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d907      	bls.n	8001624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e150      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
 8001618:	40023800 	.word	0x40023800
 800161c:	42470000 	.word	0x42470000
 8001620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ea      	bne.n	8001606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8097 	beq.w	800176c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10f      	bne.n	800166e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a7c      	ldr	r2, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b77      	ldr	r3, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x474>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b74      	ldr	r3, [pc, #464]	; (800184c <HAL_RCC_OscConfig+0x474>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a73      	ldr	r2, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x474>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff fbe9 	bl	8000e5c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff fbe5 	bl	8000e5c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e10c      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x474>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2ea>
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	e01c      	b.n	80016fc <HAL_RCC_OscConfig+0x324>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x30c>
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a5e      	ldr	r2, [pc, #376]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0x324>
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a57      	ldr	r2, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
 80016f0:	4b55      	ldr	r3, [pc, #340]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d015      	beq.n	8001730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fbaa 	bl	8000e5c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fba6 	bl	8000e5c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0cb      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0ee      	beq.n	800170c <HAL_RCC_OscConfig+0x334>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fb94 	bl	8000e5c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fb90 	bl	8000e5c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0b5      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ee      	bne.n	8001738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a1 	beq.w	80018b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d05c      	beq.n	800183c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d141      	bne.n	800180e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_RCC_OscConfig+0x478>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fb64 	bl	8000e5c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fb60 	bl	8000e5c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e087      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	491b      	ldr	r1, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x478>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fb39 	bl	8000e5c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fb35 	bl	8000e5c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e05c      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x416>
 800180c:	e054      	b.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_RCC_OscConfig+0x478>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb22 	bl	8000e5c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fb1e 	bl	8000e5c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e045      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_RCC_OscConfig+0x470>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x444>
 800183a:	e03d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e038      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000
 8001850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x4ec>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d028      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d121      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800188a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188c:	4293      	cmp	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	3b01      	subs	r3, #1
 800189e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0cc      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d90c      	bls.n	8001904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b8      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800193e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	494d      	ldr	r1, [pc, #308]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d044      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d119      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d003      	beq.n	8001986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001982:	2b03      	cmp	r3, #3
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e067      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4934      	ldr	r1, [pc, #208]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b8:	f7ff fa50 	bl	8000e5c <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff fa4c 	bl	8000e5c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e04f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d20c      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e032      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4916      	ldr	r1, [pc, #88]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490e      	ldr	r1, [pc, #56]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4e:	f000 f821 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490a      	ldr	r1, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f872 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08007be8 	.word	0x08007be8
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a98:	b094      	sub	sp, #80	; 0x50
 8001a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aac:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f200 80e1 	bhi.w	8001c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x3a>
 8001ac6:	e0db      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001acc:	e0db      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad2:	e0d8      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ade:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
 8001b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b06:	4622      	mov	r2, r4
 8001b08:	462b      	mov	r3, r5
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0159      	lsls	r1, r3, #5
 8001b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b18:	0150      	lsls	r0, r2, #5
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4621      	mov	r1, r4
 8001b20:	1a51      	subs	r1, r2, r1
 8001b22:	6139      	str	r1, [r7, #16]
 8001b24:	4629      	mov	r1, r5
 8001b26:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b38:	4659      	mov	r1, fp
 8001b3a:	018b      	lsls	r3, r1, #6
 8001b3c:	4651      	mov	r1, sl
 8001b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b42:	4651      	mov	r1, sl
 8001b44:	018a      	lsls	r2, r1, #6
 8001b46:	4651      	mov	r1, sl
 8001b48:	ebb2 0801 	subs.w	r8, r2, r1
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b66:	4690      	mov	r8, r2
 8001b68:	4699      	mov	r9, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	eb18 0303 	adds.w	r3, r8, r3
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	462b      	mov	r3, r5
 8001b74:	eb49 0303 	adc.w	r3, r9, r3
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b86:	4629      	mov	r1, r5
 8001b88:	024b      	lsls	r3, r1, #9
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b90:	4621      	mov	r1, r4
 8001b92:	024a      	lsls	r2, r1, #9
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ba4:	f7fe fbb4 	bl	8000310 <__aeabi_uldivmod>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4613      	mov	r3, r2
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb0:	e058      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bcc:	4642      	mov	r2, r8
 8001bce:	464b      	mov	r3, r9
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	0159      	lsls	r1, r3, #5
 8001bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bde:	0150      	lsls	r0, r2, #5
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4641      	mov	r1, r8
 8001be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bea:	4649      	mov	r1, r9
 8001bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c04:	ebb2 040a 	subs.w	r4, r2, sl
 8001c08:	eb63 050b 	sbc.w	r5, r3, fp
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	00eb      	lsls	r3, r5, #3
 8001c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1a:	00e2      	lsls	r2, r4, #3
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4643      	mov	r3, r8
 8001c22:	18e3      	adds	r3, r4, r3
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	464b      	mov	r3, r9
 8001c28:	eb45 0303 	adc.w	r3, r5, r3
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	028b      	lsls	r3, r1, #10
 8001c3e:	4621      	mov	r1, r4
 8001c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c44:	4621      	mov	r1, r4
 8001c46:	028a      	lsls	r2, r1, #10
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	61fa      	str	r2, [r7, #28]
 8001c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c58:	f7fe fb5a 	bl	8000310 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3750      	adds	r7, #80	; 0x50
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	007a1200 	.word	0x007a1200

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a9b      	lsrs	r3, r3, #10
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	08007bf8 	.word	0x08007bf8

08001ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	220f      	movs	r2, #15
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_RCC_GetClockConfig+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0207 	and.w	r2, r3, #7
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e041      	b.n	8001dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f839 	bl	8001de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f9d8 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04e      	b.n	8001eae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d01d      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d010      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	e007      	b.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40010400 	.word	0x40010400
 8001ed0:	40014000 	.word	0x40014000
 8001ed4:	40001800 	.word	0x40001800

08001ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8ee 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8e0 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8f1 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0204 	mvn.w	r2, #4
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8c4 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8b6 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8c7 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0208 	mvn.w	r2, #8
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89a 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f88c 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f89d 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0210 	mvn.w	r2, #16
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2208      	movs	r2, #8
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f870 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f862 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f873 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0201 	mvn.w	r2, #1
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fd3c 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f902 	bl	800228c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f838 	bl	8002124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0220 	mvn.w	r2, #32
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8cc 	bl	8002278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <TIM_Base_SetConfig+0x114>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <TIM_Base_SetConfig+0x118>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <TIM_Base_SetConfig+0x11c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <TIM_Base_SetConfig+0x120>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2f      	ldr	r2, [pc, #188]	; (800224c <TIM_Base_SetConfig+0x114>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d027      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <TIM_Base_SetConfig+0x118>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d023      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <TIM_Base_SetConfig+0x11c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <TIM_Base_SetConfig+0x120>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <TIM_Base_SetConfig+0x124>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d017      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a28      	ldr	r2, [pc, #160]	; (8002260 <TIM_Base_SetConfig+0x128>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <TIM_Base_SetConfig+0x12c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00f      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <TIM_Base_SetConfig+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00b      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a25      	ldr	r2, [pc, #148]	; (800226c <TIM_Base_SetConfig+0x134>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <TIM_Base_SetConfig+0x138>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <TIM_Base_SetConfig+0x13c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <TIM_Base_SetConfig+0x114>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <TIM_Base_SetConfig+0x124>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	40001800 	.word	0x40001800
 8002270:	40001c00 	.word	0x40001c00
 8002274:	40002000 	.word	0x40002000

08002278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0208 	add.w	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 0208 	add.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 0208 	add.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002358:	d103      	bne.n	8002362 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e00c      	b.n	800237c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3308      	adds	r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e002      	b.n	8002370 <vListInsert+0x2e>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d2f6      	bcs.n	800236a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d103      	bne.n	80023e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericReset+0x2a>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	60bb      	str	r3, [r7, #8]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002432:	f002 f947 	bl	80046c4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	3b01      	subs	r3, #1
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d114      	bne.n	80024b2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01a      	beq.n	80024c6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3310      	adds	r3, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f001 f9a1 	bl	80037dc <xTaskRemoveFromEventList>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <xQueueGenericReset+0xcc>)
 80024a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	e009      	b.n	80024c6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3310      	adds	r3, #16
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fef2 	bl	80022a0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3324      	adds	r3, #36	; 0x24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff feed 	bl	80022a0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024c6:	f002 f92d 	bl	8004724 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	e000ed04 	.word	0xe000ed04

080024d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <xQueueGenericCreate+0x2a>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	61bb      	str	r3, [r7, #24]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <xQueueGenericCreate+0x48>
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d101      	bne.n	8002524 <xQueueGenericCreate+0x4c>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <xQueueGenericCreate+0x4e>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <xQueueGenericCreate+0x68>
        __asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	617b      	str	r3, [r7, #20]
    }
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002546:	d90a      	bls.n	800255e <xQueueGenericCreate+0x86>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	613b      	str	r3, [r7, #16]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3350      	adds	r3, #80	; 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f002 f9da 	bl	800491c <pvPortMalloc>
 8002568:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f805 	bl	8002596 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800258c:	6a3b      	ldr	r3, [r7, #32]
    }
 800258e:	4618      	mov	r0, r3
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e002      	b.n	80025b8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c4:	2101      	movs	r1, #1
 80025c6:	69b8      	ldr	r0, [r7, #24]
 80025c8:	f7ff ff1e 	bl	8002408 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	2073      	movs	r0, #115	; 0x73
 80025dc:	f003 fb12 	bl	8005c04 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b090      	sub	sp, #64	; 0x40
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueGenericSend+0x32>
        __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <xQueueGenericSend+0x40>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <xQueueGenericSend+0x44>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <xQueueGenericSend+0x46>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <xQueueGenericSend+0x60>
        __asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d103      	bne.n	8002656 <xQueueGenericSend+0x6e>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <xQueueGenericSend+0x72>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <xQueueGenericSend+0x74>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueGenericSend+0x8e>
        __asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	623b      	str	r3, [r7, #32]
    }
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002676:	f001 fa51 	bl	8003b1c <xTaskGetSchedulerState>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <xQueueGenericSend+0x9e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueGenericSend+0xa2>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueGenericSend+0xa4>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueGenericSend+0xbe>
        __asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	61fb      	str	r3, [r7, #28]
    }
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026a6:	f002 f80d 	bl	80046c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <xQueueGenericSend+0xd4>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d136      	bne.n	800272a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 f82c 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	4601      	mov	r1, r0
 80026d0:	205a      	movs	r0, #90	; 0x5a
 80026d2:	f003 fb0d 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026dc:	f000 fa78 	bl	8002bd0 <prvCopyDataToQueue>
 80026e0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	3324      	adds	r3, #36	; 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f874 	bl	80037dc <xTaskRemoveFromEventList>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <xQueueGenericSend+0x248>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	e00a      	b.n	8002722 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <xQueueGenericSend+0x248>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002722:	f001 ffff 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002726:	2301      	movs	r3, #1
 8002728:	e07d      	b.n	8002826 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d110      	bne.n	8002752 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002730:	f001 fff8 	bl	8004724 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fff0 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	4601      	mov	r1, r0
 8002748:	205a      	movs	r0, #90	; 0x5a
 800274a:	f003 fad1 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800274e:	2300      	movs	r3, #0
 8002750:	e069      	b.n	8002826 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f8a3 	bl	80038a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002762:	2301      	movs	r3, #1
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002766:	f001 ffdd 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800276a:	f000 fdef 	bl	800334c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800276e:	f001 ffa9 	bl	80046c4 <vPortEnterCritical>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277e:	d103      	bne.n	8002788 <xQueueGenericSend+0x1a0>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278e:	b25b      	sxtb	r3, r3
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x1b6>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279e:	f001 ffc1 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a2:	1d3a      	adds	r2, r7, #4
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f892 	bl	80038d4 <xTaskCheckForTimeOut>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d124      	bne.n	8002800 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b8:	f000 fb02 	bl	8002dc0 <prvIsQueueFull>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	3310      	adds	r3, #16
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ffb4 	bl	8003738 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f000 fa8d 	bl	8002cf0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027d6:	f000 fdc7 	bl	8003368 <xTaskResumeAll>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f af62 	bne.w	80026a6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <xQueueGenericSend+0x248>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	e758      	b.n	80026a6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f6:	f000 fa7b 	bl	8002cf0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027fa:	f000 fdb5 	bl	8003368 <xTaskResumeAll>
 80027fe:	e752      	b.n	80026a6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002802:	f000 fa75 	bl	8002cf0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002806:	f000 fdaf 	bl	8003368 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	4618      	mov	r0, r3
 800280e:	f003 ff85 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	460b      	mov	r3, r1
 800281c:	4601      	mov	r1, r0
 800281e:	205a      	movs	r0, #90	; 0x5a
 8002820:	f003 fa66 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002824:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002826:	4618      	mov	r0, r3
 8002828:	3738      	adds	r7, #56	; 0x38
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	e000ed04 	.word	0xe000ed04

08002834 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	; 0x40
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <xQueueGenericSendFromISR+0x3c>
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <xQueueGenericSendFromISR+0x40>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <xQueueGenericSendFromISR+0x42>
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d103      	bne.n	800289e <xQueueGenericSendFromISR+0x6a>
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <xQueueGenericSendFromISR+0x6e>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueGenericSendFromISR+0x70>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	623b      	str	r3, [r7, #32]
    }
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028be:	f001 ffed 	bl	800489c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028c2:	f3ef 8211 	mrs	r2, BASEPRI
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	61fa      	str	r2, [r7, #28]
 80028d8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028da:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <xQueueGenericSendFromISR+0xbc>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d148      	bne.n	8002982 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	4618      	mov	r0, r3
 8002904:	f003 ff0a 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002908:	4601      	mov	r1, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	461a      	mov	r2, r3
 800290e:	2060      	movs	r0, #96	; 0x60
 8002910:	f003 f91e 	bl	8005b50 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800291a:	f000 f959 	bl	8002bd0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800291e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002926:	d112      	bne.n	800294e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d025      	beq.n	800297c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ff51 	bl	80037dc <xTaskRemoveFromEventList>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01d      	beq.n	800297c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01a      	beq.n	800297c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e016      	b.n	800297c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800294e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002952:	2b7f      	cmp	r3, #127	; 0x7f
 8002954:	d10a      	bne.n	800296c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	617b      	str	r3, [r7, #20]
    }
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800296c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002970:	3301      	adds	r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	b25a      	sxtb	r2, r3
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800297c:	2301      	movs	r3, #1
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002980:	e00b      	b.n	800299a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fec9 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 800298a:	4601      	mov	r1, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	2060      	movs	r0, #96	; 0x60
 8002992:	f003 f8dd 	bl	8005b50 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002996:	2300      	movs	r3, #0
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029a4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3740      	adds	r7, #64	; 0x40
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b08f      	sub	sp, #60	; 0x3c
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <xQueueReceive+0x30>
        __asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	623b      	str	r3, [r7, #32]
    }
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <xQueueReceive+0x3e>
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <xQueueReceive+0x42>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <xQueueReceive+0x44>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueReceive+0x5e>
        __asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61fb      	str	r3, [r7, #28]
    }
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a0e:	f001 f885 	bl	8003b1c <xTaskGetSchedulerState>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <xQueueReceive+0x6e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <xQueueReceive+0x72>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <xQueueReceive+0x74>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <xQueueReceive+0x8e>
        __asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	61bb      	str	r3, [r7, #24]
    }
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a3e:	f001 fe41 	bl	80046c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02f      	beq.n	8002aae <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a52:	f000 f927 	bl	8002ca4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fe5f 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	2000      	movs	r0, #0
 8002a62:	f003 fe5b 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	9100      	str	r1, [sp, #0]
 8002a6e:	4621      	mov	r1, r4
 8002a70:	205c      	movs	r0, #92	; 0x5c
 8002a72:	f003 f93d 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00f      	beq.n	8002aa6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	3310      	adds	r3, #16
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fea6 	bl	80037dc <xTaskRemoveFromEventList>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a96:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <xQueueReceive+0x21c>)
 8002a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aa6:	f001 fe3d 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e08a      	b.n	8002bc4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d113      	bne.n	8002adc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ab4:	f001 fe36 	bl	8004724 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fe2e 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f003 fe2a 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2101      	movs	r1, #1
 8002ace:	9100      	str	r1, [sp, #0]
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	205c      	movs	r0, #92	; 0x5c
 8002ad4:	f003 f90c 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e073      	b.n	8002bc4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fede 	bl	80038a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002af0:	f001 fe18 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002af4:	f000 fc2a 	bl	800334c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002af8:	f001 fde4 	bl	80046c4 <vPortEnterCritical>
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b08:	d103      	bne.n	8002b12 <xQueueReceive+0x162>
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1e:	d103      	bne.n	8002b28 <xQueueReceive+0x178>
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b28:	f001 fdfc 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b2c:	1d3a      	adds	r2, r7, #4
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fecd 	bl	80038d4 <xTaskCheckForTimeOut>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d124      	bne.n	8002b8a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b42:	f000 f927 	bl	8002d94 <prvIsQueueEmpty>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fdef 	bl	8003738 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b5c:	f000 f8c8 	bl	8002cf0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b60:	f000 fc02 	bl	8003368 <xTaskResumeAll>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f47f af69 	bne.w	8002a3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <xQueueReceive+0x21c>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	e75f      	b.n	8002a3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 f8b6 	bl	8002cf0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b84:	f000 fbf0 	bl	8003368 <xTaskResumeAll>
 8002b88:	e759      	b.n	8002a3e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8c:	f000 f8b0 	bl	8002cf0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b90:	f000 fbea 	bl	8003368 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b96:	f000 f8fd 	bl	8002d94 <prvIsQueueEmpty>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f43f af4e 	beq.w	8002a3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fdb9 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002baa:	4604      	mov	r4, r0
 8002bac:	2000      	movs	r0, #0
 8002bae:	f003 fdb5 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	9100      	str	r1, [sp, #0]
 8002bba:	4621      	mov	r1, r4
 8002bbc:	205c      	movs	r0, #92	; 0x5c
 8002bbe:	f003 f897 	bl	8005cf0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bc2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3734      	adds	r7, #52	; 0x34
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d14d      	bne.n	8002c92 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 ffac 	bl	8003b58 <xTaskPriorityDisinherit>
 8002c00:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e043      	b.n	8002c92 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d119      	bne.n	8002c44 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6858      	ldr	r0, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	f003 ff12 	bl	8006a44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	441a      	add	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d32b      	bcc.n	8002c92 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e026      	b.n	8002c92 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68d8      	ldr	r0, [r3, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	f003 fef8 	bl	8006a44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	441a      	add	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	425b      	negs	r3, r3
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d105      	bne.n	8002c92 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d303      	bcc.n	8002cd8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f003 feae 	bl	8006a44 <memcpy>
    }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cf8:	f001 fce4 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d02:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d04:	e011      	b.n	8002d2a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3324      	adds	r3, #36	; 0x24
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd62 	bl	80037dc <xTaskRemoveFromEventList>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d1e:	f000 fe3f 	bl	80039a0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dce9      	bgt.n	8002d06 <prvUnlockQueue+0x16>
 8002d32:	e000      	b.n	8002d36 <prvUnlockQueue+0x46>
                        break;
 8002d34:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d3e:	f001 fcf1 	bl	8004724 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d42:	f001 fcbf 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d4c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4e:	e011      	b.n	8002d74 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd3d 	bl	80037dc <xTaskRemoveFromEventList>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d68:	f000 fe1a 	bl	80039a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dce9      	bgt.n	8002d50 <prvUnlockQueue+0x60>
 8002d7c:	e000      	b.n	8002d80 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d7e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d88:	f001 fccc 	bl	8004724 <vPortExitCritical>
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d9c:	f001 fc92 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e001      	b.n	8002db2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002db2:	f001 fcb7 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc8:	f001 fc7c 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d102      	bne.n	8002dde <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e001      	b.n	8002de2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002de2:	f001 fc9f 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e01e      	b.n	8002e3e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d115      	bne.n	8002e38 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e0c:	4910      	ldr	r1, [pc, #64]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fc79 	bl	800671c <SEGGER_SYSVIEW_ShrinkId>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2071      	movs	r0, #113	; 0x71
 8002e32:	f002 fe8d 	bl	8005b50 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e36:	e006      	b.n	8002e46 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b07      	cmp	r3, #7
 8002e42:	d9dd      	bls.n	8002e00 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200000e0 	.word	0x200000e0

08002e54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e64:	f001 fc2e 	bl	80046c4 <vPortEnterCritical>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e74:	d103      	bne.n	8002e7e <vQueueWaitForMessageRestricted+0x2a>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8a:	d103      	bne.n	8002e94 <vQueueWaitForMessageRestricted+0x40>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e94:	f001 fc46 	bl	8004724 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3324      	adds	r3, #36	; 0x24
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc69 	bl	8003780 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff1e 	bl	8002cf0 <prvUnlockQueue>
    }
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fd23 	bl	800491c <pvPortMalloc>
 8002ed6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00e      	beq.n	8002efc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ede:	2058      	movs	r0, #88	; 0x58
 8002ee0:	f001 fd1c 	bl	800491c <pvPortMalloc>
 8002ee4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	e005      	b.n	8002f00 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f001 fdf1 	bl	8004adc <vPortFree>
 8002efa:	e001      	b.n	8002f00 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f80e 	bl	8002f3e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f22:	69f8      	ldr	r0, [r7, #28]
 8002f24:	f000 f8a2 	bl	800306c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e002      	b.n	8002f34 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f32:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f34:	69bb      	ldr	r3, [r7, #24]
    }
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	21a5      	movs	r1, #165	; 0xa5
 8002f58:	f003 fd82 	bl	8006a60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f66:	3b01      	subs	r3, #1
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f023 0307 	bic.w	r3, r3, #7
 8002f74:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	617b      	str	r3, [r7, #20]
    }
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01f      	beq.n	8002fdc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e012      	b.n	8002fc8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	7819      	ldrb	r1, [r3, #0]
 8002faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3334      	adds	r3, #52	; 0x34
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d9e9      	bls.n	8002fa2 <prvInitialiseNewTask+0x64>
 8002fce:	e000      	b.n	8002fd2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002fd0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fda:	e003      	b.n	8002fe4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d901      	bls.n	8002fee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fea:	2304      	movs	r3, #4
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f96b 	bl	80022e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	3318      	adds	r3, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f966 	bl	80022e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003018:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	f1c3 0205 	rsb	r2, r3, #5
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	3350      	adds	r3, #80	; 0x50
 800302e:	2204      	movs	r2, #4
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fd14 	bl	8006a60 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	3354      	adds	r3, #84	; 0x54
 800303c:	2201      	movs	r2, #1
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fd0d 	bl	8006a60 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	69b8      	ldr	r0, [r7, #24]
 800304c:	f001 f98e 	bl	800436c <pxPortInitialiseStack>
 8003050:	4602      	mov	r2, r0
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af02      	add	r7, sp, #8
 8003072:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003074:	f001 fb26 	bl	80046c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <prvAddNewTaskToReadyList+0xfc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <prvAddNewTaskToReadyList+0xfc>)
 8003080:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <prvAddNewTaskToReadyList+0x100>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800308a:	4a38      	ldr	r2, [pc, #224]	; (800316c <prvAddNewTaskToReadyList+0x100>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <prvAddNewTaskToReadyList+0xfc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d110      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003098:	f000 fca6 	bl	80039e8 <prvInitialiseTaskLists>
 800309c:	e00d      	b.n	80030ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <prvAddNewTaskToReadyList+0x104>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <prvAddNewTaskToReadyList+0x100>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d802      	bhi.n	80030ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030b4:	4a2d      	ldr	r2, [pc, #180]	; (800316c <prvAddNewTaskToReadyList+0x100>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <prvAddNewTaskToReadyList+0x108>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <prvAddNewTaskToReadyList+0x108>)
 80030c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <prvAddNewTaskToReadyList+0x108>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <prvAddNewTaskToReadyList+0x94>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 f9fb 	bl	80064d0 <SEGGER_SYSVIEW_OnTaskCreate>
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	461d      	mov	r5, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461c      	mov	r4, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	1ae3      	subs	r3, r4, r3
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	462b      	mov	r3, r5
 80030fc:	f001 febc 	bl	8004e78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fa68 	bl	80065d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <prvAddNewTaskToReadyList+0x10c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <prvAddNewTaskToReadyList+0x10c>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <prvAddNewTaskToReadyList+0x110>)
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7ff f8e2 	bl	80022fa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003136:	f001 faf5 	bl	8004724 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <prvAddNewTaskToReadyList+0x104>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00e      	beq.n	8003160 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <prvAddNewTaskToReadyList+0x100>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d207      	bcs.n	8003160 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <prvAddNewTaskToReadyList+0x114>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bdb0      	pop	{r4, r5, r7, pc}
 8003168:	200001f8 	.word	0x200001f8
 800316c:	20000120 	.word	0x20000120
 8003170:	20000204 	.word	0x20000204
 8003174:	20000214 	.word	0x20000214
 8003178:	20000200 	.word	0x20000200
 800317c:	20000124 	.word	0x20000124
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xTaskDelayUntil+0x2a>
        __asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	617b      	str	r3, [r7, #20]
    }
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xTaskDelayUntil+0x46>
        __asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	613b      	str	r3, [r7, #16]
    }
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <xTaskDelayUntil+0xf8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <xTaskDelayUntil+0x64>
        __asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	60fb      	str	r3, [r7, #12]
    }
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80031e8:	f000 f8b0 	bl	800334c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <xTaskDelayUntil+0xfc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20b      	bcs.n	800321e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d211      	bcs.n	8003234 <xTaskDelayUntil+0xb0>
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	429a      	cmp	r2, r3
 8003216:	d90d      	bls.n	8003234 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e00a      	b.n	8003234 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	429a      	cmp	r2, r3
 8003226:	d303      	bcc.n	8003230 <xTaskDelayUntil+0xac>
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	429a      	cmp	r2, r3
 800322e:	d901      	bls.n	8003234 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003240:	2024      	movs	r0, #36	; 0x24
 8003242:	f002 fc2b 	bl	8005a9c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd02 	bl	8003c58 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003254:	f000 f888 	bl	8003368 <xTaskResumeAll>
 8003258:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <xTaskDelayUntil+0x100>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000220 	.word	0x20000220
 8003280:	200001fc 	.word	0x200001fc
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <vTaskStartScheduler+0xa4>)
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	2282      	movs	r2, #130	; 0x82
 800329a:	4925      	ldr	r1, [pc, #148]	; (8003330 <vTaskStartScheduler+0xa8>)
 800329c:	4825      	ldr	r0, [pc, #148]	; (8003334 <vTaskStartScheduler+0xac>)
 800329e:	f7ff fe0d 	bl	8002ebc <xTaskCreate>
 80032a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032aa:	f000 fd4d 	bl	8003d48 <xTimerCreateTimerTask>
 80032ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d124      	bne.n	8003300 <vTaskStartScheduler+0x78>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60bb      	str	r3, [r7, #8]
    }
 80032c8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <vTaskStartScheduler+0xb0>)
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <vTaskStartScheduler+0xb4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <vTaskStartScheduler+0xb8>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032de:	4b19      	ldr	r3, [pc, #100]	; (8003344 <vTaskStartScheduler+0xbc>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <vTaskStartScheduler+0xa4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d102      	bne.n	80032f0 <vTaskStartScheduler+0x68>
 80032ea:	f003 f8d5 	bl	8006498 <SEGGER_SYSVIEW_OnIdle>
 80032ee:	e004      	b.n	80032fa <vTaskStartScheduler+0x72>
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <vTaskStartScheduler+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 f92d 	bl	8006554 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032fa:	f001 f8c3 	bl	8004484 <xPortStartScheduler>
 80032fe:	e00e      	b.n	800331e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003306:	d10a      	bne.n	800331e <vTaskStartScheduler+0x96>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	607b      	str	r3, [r7, #4]
    }
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vTaskStartScheduler+0xc0>)
 8003320:	681b      	ldr	r3, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000021c 	.word	0x2000021c
 8003330:	08007b00 	.word	0x08007b00
 8003334:	080039b9 	.word	0x080039b9
 8003338:	20000218 	.word	0x20000218
 800333c:	20000204 	.word	0x20000204
 8003340:	200001fc 	.word	0x200001fc
 8003344:	20000120 	.word	0x20000120
 8003348:	2000000c 	.word	0x2000000c

0800334c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <vTaskSuspendAll+0x18>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a03      	ldr	r2, [pc, #12]	; (8003364 <vTaskSuspendAll+0x18>)
 8003358:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000220 	.word	0x20000220

08003368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <xTaskResumeAll+0x11c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <xTaskResumeAll+0x2c>
        __asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	603b      	str	r3, [r7, #0]
    }
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003394:	f001 f996 	bl	80046c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <xTaskResumeAll+0x11c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3b01      	subs	r3, #1
 800339e:	4a39      	ldr	r2, [pc, #228]	; (8003484 <xTaskResumeAll+0x11c>)
 80033a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <xTaskResumeAll+0x11c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d165      	bne.n	8003476 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <xTaskResumeAll+0x120>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d061      	beq.n	8003476 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b2:	e032      	b.n	800341a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <xTaskResumeAll+0x124>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3318      	adds	r3, #24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fff7 	bl	80023b4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fff2 	bl	80023b4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 f900 	bl	80065d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <xTaskResumeAll+0x128>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <xTaskResumeAll+0x128>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <xTaskResumeAll+0x12c>)
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe ff7a 	bl	80022fa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <xTaskResumeAll+0x130>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <xTaskResumeAll+0x134>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <xTaskResumeAll+0x124>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1c8      	bne.n	80033b4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003428:	f000 fb5c 	bl	8003ae4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <xTaskResumeAll+0x138>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003438:	f000 f858 	bl	80034ec <xTaskIncrementTick>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <xTaskResumeAll+0x134>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f1      	bne.n	8003438 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <xTaskResumeAll+0x138>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <xTaskResumeAll+0x134>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003462:	2301      	movs	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <xTaskResumeAll+0x13c>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003476:	f001 f955 	bl	8004724 <vPortExitCritical>

    return xAlreadyYielded;
 800347a:	68bb      	ldr	r3, [r7, #8]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000220 	.word	0x20000220
 8003488:	200001f8 	.word	0x200001f8
 800348c:	200001b8 	.word	0x200001b8
 8003490:	20000200 	.word	0x20000200
 8003494:	20000124 	.word	0x20000124
 8003498:	20000120 	.word	0x20000120
 800349c:	2000020c 	.word	0x2000020c
 80034a0:	20000208 	.word	0x20000208
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <xTaskGetTickCount+0x1c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	200001fc 	.word	0x200001fc

080034c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034ce:	f001 f9e5 	bl	800489c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <xTaskGetTickCountFromISR+0x20>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034dc:	683b      	ldr	r3, [r7, #0]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200001fc 	.word	0x200001fc

080034ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f6:	4b50      	ldr	r3, [pc, #320]	; (8003638 <xTaskIncrementTick+0x14c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 8092 	bne.w	8003624 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003500:	4b4e      	ldr	r3, [pc, #312]	; (800363c <xTaskIncrementTick+0x150>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003508:	4a4c      	ldr	r2, [pc, #304]	; (800363c <xTaskIncrementTick+0x150>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d120      	bne.n	8003556 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <xTaskIncrementTick+0x154>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <xTaskIncrementTick+0x48>
        __asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	603b      	str	r3, [r7, #0]
    }
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <xTaskIncrementTick+0x46>
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <xTaskIncrementTick+0x154>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b42      	ldr	r3, [pc, #264]	; (8003644 <xTaskIncrementTick+0x158>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <xTaskIncrementTick+0x154>)
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <xTaskIncrementTick+0x158>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <xTaskIncrementTick+0x15c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <xTaskIncrementTick+0x15c>)
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	f000 fac7 	bl	8003ae4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <xTaskIncrementTick+0x160>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d34c      	bcc.n	80035fa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003560:	4b37      	ldr	r3, [pc, #220]	; (8003640 <xTaskIncrementTick+0x154>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <xTaskIncrementTick+0x160>)
 800356c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003570:	601a      	str	r2, [r3, #0]
                    break;
 8003572:	e042      	b.n	80035fa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <xTaskIncrementTick+0x154>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d203      	bcs.n	8003594 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800358c:	4a2f      	ldr	r2, [pc, #188]	; (800364c <xTaskIncrementTick+0x160>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003592:	e032      	b.n	80035fa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff0b 	bl	80023b4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3318      	adds	r3, #24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ff02 	bl	80023b4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 f810 	bl	80065d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <xTaskIncrementTick+0x164>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	4a22      	ldr	r2, [pc, #136]	; (8003650 <xTaskIncrementTick+0x164>)
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <xTaskIncrementTick+0x168>)
 80035d8:	441a      	add	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7fe fe8a 	bl	80022fa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <xTaskIncrementTick+0x16c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d3b5      	bcc.n	8003560 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f8:	e7b2      	b.n	8003560 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035fa:	4b17      	ldr	r3, [pc, #92]	; (8003658 <xTaskIncrementTick+0x16c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4914      	ldr	r1, [pc, #80]	; (8003654 <xTaskIncrementTick+0x168>)
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d901      	bls.n	8003616 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <xTaskIncrementTick+0x170>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e004      	b.n	800362e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <xTaskIncrementTick+0x174>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <xTaskIncrementTick+0x174>)
 800362c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800362e:	697b      	ldr	r3, [r7, #20]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000220 	.word	0x20000220
 800363c:	200001fc 	.word	0x200001fc
 8003640:	200001b0 	.word	0x200001b0
 8003644:	200001b4 	.word	0x200001b4
 8003648:	20000210 	.word	0x20000210
 800364c:	20000218 	.word	0x20000218
 8003650:	20000200 	.word	0x20000200
 8003654:	20000124 	.word	0x20000124
 8003658:	20000120 	.word	0x20000120
 800365c:	2000020c 	.word	0x2000020c
 8003660:	20000208 	.word	0x20000208

08003664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <vTaskSwitchContext+0xbc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003672:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <vTaskSwitchContext+0xc0>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003678:	e04d      	b.n	8003716 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <vTaskSwitchContext+0xc0>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <vTaskSwitchContext+0xc4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f1c3 031f 	rsb	r3, r3, #31
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4925      	ldr	r1, [pc, #148]	; (800372c <vTaskSwitchContext+0xc8>)
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	607b      	str	r3, [r7, #4]
    }
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <vTaskSwitchContext+0x5a>
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <vTaskSwitchContext+0xc8>)
 80036cc:	4413      	add	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3308      	adds	r3, #8
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d104      	bne.n	80036f0 <vTaskSwitchContext+0x8c>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <vTaskSwitchContext+0xcc>)
 80036f8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <vTaskSwitchContext+0xcc>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <vTaskSwitchContext+0xd0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d102      	bne.n	800370c <vTaskSwitchContext+0xa8>
 8003706:	f002 fec7 	bl	8006498 <SEGGER_SYSVIEW_OnIdle>
}
 800370a:	e004      	b.n	8003716 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <vTaskSwitchContext+0xcc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f002 ff1f 	bl	8006554 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000220 	.word	0x20000220
 8003724:	2000020c 	.word	0x2000020c
 8003728:	20000200 	.word	0x20000200
 800372c:	20000124 	.word	0x20000124
 8003730:	20000120 	.word	0x20000120
 8003734:	2000021c 	.word	0x2000021c

08003738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	60fb      	str	r3, [r7, #12]
    }
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <vTaskPlaceOnEventList+0x44>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3318      	adds	r3, #24
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe fdeb 	bl	8002342 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800376c:	2101      	movs	r1, #1
 800376e:	6838      	ldr	r0, [r7, #0]
 8003770:	f000 fa72 	bl	8003c58 <prvAddCurrentTaskToDelayedList>
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000120 	.word	0x20000120

08003780 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	617b      	str	r3, [r7, #20]
    }
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <vTaskPlaceOnEventListRestricted+0x58>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3318      	adds	r3, #24
 80037ae:	4619      	mov	r1, r3
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7fe fda2 	bl	80022fa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037c2:	2024      	movs	r0, #36	; 0x24
 80037c4:	f002 f96a 	bl	8005a9c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68b8      	ldr	r0, [r7, #8]
 80037cc:	f000 fa44 	bl	8003c58 <prvAddCurrentTaskToDelayedList>
    }
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000120 	.word	0x20000120

080037dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
    }
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3318      	adds	r3, #24
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fdd1 	bl	80023b4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d120      	bne.n	800385c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fdc8 	bl	80023b4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fed6 	bl	80065d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <xTaskRemoveFromEventList+0xb8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4313      	orrs	r3, r2
 800383a:	4a16      	ldr	r2, [pc, #88]	; (8003894 <xTaskRemoveFromEventList+0xb8>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a13      	ldr	r2, [pc, #76]	; (8003898 <xTaskRemoveFromEventList+0xbc>)
 800384c:	441a      	add	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe fd50 	bl	80022fa <vListInsertEnd>
 800385a:	e005      	b.n	8003868 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	3318      	adds	r3, #24
 8003860:	4619      	mov	r1, r3
 8003862:	480e      	ldr	r0, [pc, #56]	; (800389c <xTaskRemoveFromEventList+0xc0>)
 8003864:	f7fe fd49 	bl	80022fa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <xTaskRemoveFromEventList+0xc4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	429a      	cmp	r2, r3
 8003874:	d905      	bls.n	8003882 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <xTaskRemoveFromEventList+0xc8>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e001      	b.n	8003886 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003886:	697b      	ldr	r3, [r7, #20]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000220 	.word	0x20000220
 8003894:	20000200 	.word	0x20000200
 8003898:	20000124 	.word	0x20000124
 800389c:	200001b8 	.word	0x200001b8
 80038a0:	20000120 	.word	0x20000120
 80038a4:	2000020c 	.word	0x2000020c

080038a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <vTaskInternalSetTimeOutState+0x24>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <vTaskInternalSetTimeOutState+0x28>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	605a      	str	r2, [r3, #4]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	20000210 	.word	0x20000210
 80038d0:	200001fc 	.word	0x200001fc

080038d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	613b      	str	r3, [r7, #16]
    }
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60fb      	str	r3, [r7, #12]
    }
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003916:	f000 fed5 	bl	80046c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800391a:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <xTaskCheckForTimeOut+0xc4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d102      	bne.n	800393a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	e026      	b.n	8003988 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <xTaskCheckForTimeOut+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d00a      	beq.n	800395c <xTaskCheckForTimeOut+0x88>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d305      	bcc.n	800395c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e015      	b.n	8003988 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20b      	bcs.n	800397e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff98 	bl	80038a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e004      	b.n	8003988 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003984:	2301      	movs	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003988:	f000 fecc 	bl	8004724 <vPortExitCritical>

    return xReturn;
 800398c:	69fb      	ldr	r3, [r7, #28]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200001fc 	.word	0x200001fc
 800399c:	20000210 	.word	0x20000210

080039a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <vTaskMissedYield+0x14>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	2000020c 	.word	0x2000020c

080039b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039c0:	f000 f852 	bl	8003a68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <prvIdleTask+0x28>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d9f9      	bls.n	80039c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <prvIdleTask+0x2c>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039dc:	e7f0      	b.n	80039c0 <prvIdleTask+0x8>
 80039de:	bf00      	nop
 80039e0:	20000124 	.word	0x20000124
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	e00c      	b.n	8003a0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <prvInitialiseTaskLists+0x60>)
 8003a00:	4413      	add	r3, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fc4c 	bl	80022a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d9ef      	bls.n	80039f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a14:	480d      	ldr	r0, [pc, #52]	; (8003a4c <prvInitialiseTaskLists+0x64>)
 8003a16:	f7fe fc43 	bl	80022a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a1a:	480d      	ldr	r0, [pc, #52]	; (8003a50 <prvInitialiseTaskLists+0x68>)
 8003a1c:	f7fe fc40 	bl	80022a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <prvInitialiseTaskLists+0x6c>)
 8003a22:	f7fe fc3d 	bl	80022a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a26:	480c      	ldr	r0, [pc, #48]	; (8003a58 <prvInitialiseTaskLists+0x70>)
 8003a28:	f7fe fc3a 	bl	80022a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a2c:	480b      	ldr	r0, [pc, #44]	; (8003a5c <prvInitialiseTaskLists+0x74>)
 8003a2e:	f7fe fc37 	bl	80022a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <prvInitialiseTaskLists+0x78>)
 8003a34:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <prvInitialiseTaskLists+0x64>)
 8003a36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <prvInitialiseTaskLists+0x7c>)
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <prvInitialiseTaskLists+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000124 	.word	0x20000124
 8003a4c:	20000188 	.word	0x20000188
 8003a50:	2000019c 	.word	0x2000019c
 8003a54:	200001b8 	.word	0x200001b8
 8003a58:	200001cc 	.word	0x200001cc
 8003a5c:	200001e4 	.word	0x200001e4
 8003a60:	200001b0 	.word	0x200001b0
 8003a64:	200001b4 	.word	0x200001b4

08003a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a6e:	e019      	b.n	8003aa4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a70:	f000 fe28 	bl	80046c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <prvCheckTasksWaitingTermination+0x50>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fc97 	bl	80023b4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <prvCheckTasksWaitingTermination+0x54>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <prvCheckTasksWaitingTermination+0x54>)
 8003a8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <prvCheckTasksWaitingTermination+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <prvCheckTasksWaitingTermination+0x58>)
 8003a98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a9a:	f000 fe43 	bl	8004724 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f810 	bl	8003ac4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <prvCheckTasksWaitingTermination+0x58>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e1      	bne.n	8003a70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001cc 	.word	0x200001cc
 8003abc:	200001f8 	.word	0x200001f8
 8003ac0:	200001e0 	.word	0x200001e0

08003ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f803 	bl	8004adc <vPortFree>
                vPortFree( pxTCB );
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 f800 	bl	8004adc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <prvResetNextTaskUnblockTime+0x30>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <prvResetNextTaskUnblockTime+0x34>)
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003afa:	e005      	b.n	8003b08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <prvResetNextTaskUnblockTime+0x30>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <prvResetNextTaskUnblockTime+0x34>)
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	200001b0 	.word	0x200001b0
 8003b18:	20000218 	.word	0x20000218

08003b1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <xTaskGetSchedulerState+0x34>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	e008      	b.n	8003b42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <xTaskGetSchedulerState+0x38>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	e001      	b.n	8003b42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b42:	687b      	ldr	r3, [r7, #4]
    }
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	20000204 	.word	0x20000204
 8003b54:	20000220 	.word	0x20000220

08003b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d068      	beq.n	8003c40 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <xTaskPriorityDisinherit+0xf4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d00a      	beq.n	8003b8e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60fb      	str	r3, [r7, #12]
    }
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60bb      	str	r3, [r7, #8]
    }
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d03e      	beq.n	8003c40 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d13a      	bne.n	8003c40 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fbf0 	bl	80023b4 <uxListRemove>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43da      	mvns	r2, r3
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <xTaskPriorityDisinherit+0xf8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4013      	ands	r3, r2
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <xTaskPriorityDisinherit+0xf8>)
 8003bee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	204a      	movs	r0, #74	; 0x4a
 8003bf6:	f001 ff6f 	bl	8005ad8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f1c3 0205 	rsb	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <xTaskPriorityDisinherit+0xf8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <xTaskPriorityDisinherit+0xf8>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <xTaskPriorityDisinherit+0xfc>)
 8003c2e:	441a      	add	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7fe fb5f 	bl	80022fa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c40:	697b      	ldr	r3, [r7, #20]
    }
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000120 	.word	0x20000120
 8003c50:	20000200 	.word	0x20000200
 8003c54:	20000124 	.word	0x20000124

08003c58 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c68:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fba0 	bl	80023b4 <uxListRemove>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	2201      	movs	r2, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43da      	mvns	r2, r3
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c98:	d110      	bne.n	8003cbc <prvAddCurrentTaskToDelayedList+0x64>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	211b      	movs	r1, #27
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fcd8 	bl	800665c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4820      	ldr	r0, [pc, #128]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cb6:	f7fe fb20 	bl	80022fa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cba:	e032      	b.n	8003d22 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d20f      	bcs.n	8003cf4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2104      	movs	r1, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f002 fcbe 	bl	800665c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe fb28 	bl	8002342 <vListInsert>
}
 8003cf2:	e016      	b.n	8003d22 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 fcae 	bl	800665c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fb18 	bl	8002342 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d202      	bcs.n	8003d22 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6013      	str	r3, [r2, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200001fc 	.word	0x200001fc
 8003d30:	20000120 	.word	0x20000120
 8003d34:	20000200 	.word	0x20000200
 8003d38:	200001e4 	.word	0x200001e4
 8003d3c:	200001b4 	.word	0x200001b4
 8003d40:	200001b0 	.word	0x200001b0
 8003d44:	20000218 	.word	0x20000218

08003d48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d52:	f000 fad5 	bl	8004300 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <xTimerCreateTimerTask+0x54>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <xTimerCreateTimerTask+0x58>)
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	2302      	movs	r3, #2
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d6c:	490d      	ldr	r1, [pc, #52]	; (8003da4 <xTimerCreateTimerTask+0x5c>)
 8003d6e:	480e      	ldr	r0, [pc, #56]	; (8003da8 <xTimerCreateTimerTask+0x60>)
 8003d70:	f7ff f8a4 	bl	8002ebc <xTaskCreate>
 8003d74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	603b      	str	r3, [r7, #0]
    }
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d92:	687b      	ldr	r3, [r7, #4]
    }
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000254 	.word	0x20000254
 8003da0:	20000258 	.word	0x20000258
 8003da4:	08007b08 	.word	0x08007b08
 8003da8:	08003ee1 	.word	0x08003ee1

08003dac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <xTimerGenericCommand+0x2e>
        __asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	623b      	str	r3, [r7, #32]
    }
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <xTimerGenericCommand+0x98>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02a      	beq.n	8003e38 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	dc18      	bgt.n	8003e26 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003df4:	f7ff fe92 	bl	8003b1c <xTaskGetSchedulerState>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d109      	bne.n	8003e12 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <xTimerGenericCommand+0x98>)
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f107 0114 	add.w	r1, r7, #20
 8003e06:	2300      	movs	r3, #0
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	f7fe fbed 	bl	80025e8 <xQueueGenericSend>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e10:	e012      	b.n	8003e38 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <xTimerGenericCommand+0x98>)
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	f107 0114 	add.w	r1, r7, #20
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f7fe fbe3 	bl	80025e8 <xQueueGenericSend>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24
 8003e24:	e008      	b.n	8003e38 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <xTimerGenericCommand+0x98>)
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f107 0114 	add.w	r1, r7, #20
 8003e2e:	2300      	movs	r3, #0
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	f7fe fcff 	bl	8002834 <xQueueGenericSendFromISR>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000254 	.word	0x20000254

08003e48 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <prvProcessExpiredTimer+0x94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe faa7 	bl	80023b4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d022      	beq.n	8003eba <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	18d1      	adds	r1, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f000 f8d1 	bl	8004028 <prvInsertTimerInActiveList>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01f      	beq.n	8003ecc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	2100      	movs	r1, #0
 8003e96:	6978      	ldr	r0, [r7, #20]
 8003e98:	f7ff ff88 	bl	8003dac <xTimerGenericCommand>
 8003e9c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d113      	bne.n	8003ecc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
    }
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	4798      	blx	r3
    }
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2000024c 	.word	0x2000024c

08003ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f857 	bl	8003fa0 <prvGetNextExpireTime>
 8003ef2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f803 	bl	8003f04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003efe:	f000 f8d5 	bl	80040ac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f02:	e7f1      	b.n	8003ee8 <prvTimerTask+0x8>

08003f04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f0e:	f7ff fa1d 	bl	800334c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f866 	bl	8003fe8 <prvSampleTimeNow>
 8003f1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d130      	bne.n	8003f86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <prvProcessTimerOrBlockTask+0x3c>
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d806      	bhi.n	8003f40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f32:	f7ff fa19 	bl	8003368 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff85 	bl	8003e48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f3e:	e024      	b.n	8003f8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <prvProcessTimerOrBlockTask+0x90>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <prvProcessTimerOrBlockTask+0x50>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <prvProcessTimerOrBlockTask+0x52>
 8003f54:	2300      	movs	r3, #0
 8003f56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <prvProcessTimerOrBlockTask+0x94>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7fe ff75 	bl	8002e54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f6a:	f7ff f9fd 	bl	8003368 <xTaskResumeAll>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <prvProcessTimerOrBlockTask+0x98>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
    }
 8003f84:	e001      	b.n	8003f8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f86:	f7ff f9ef 	bl	8003368 <xTaskResumeAll>
    }
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000250 	.word	0x20000250
 8003f98:	20000254 	.word	0x20000254
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <prvGetNextExpireTime+0x44>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <prvGetNextExpireTime+0x16>
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	e000      	b.n	8003fb8 <prvGetNextExpireTime+0x18>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <prvGetNextExpireTime+0x44>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e001      	b.n	8003fd4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    }
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000024c 	.word	0x2000024c

08003fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ff0:	f7ff fa5a 	bl	80034a8 <xTaskGetTickCount>
 8003ff4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <prvSampleTimeNow+0x3c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d205      	bcs.n	800400c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004000:	f000 f91a 	bl	8004238 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e002      	b.n	8004012 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004012:	4a04      	ldr	r2, [pc, #16]	; (8004024 <prvSampleTimeNow+0x3c>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004018:	68fb      	ldr	r3, [r7, #12]
    }
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	2000025c 	.word	0x2000025c

08004028 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d812      	bhi.n	8004074 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e01b      	b.n	800409a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <prvInsertTimerInActiveList+0x7c>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe f968 	bl	8002342 <vListInsert>
 8004072:	e012      	b.n	800409a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d206      	bcs.n	800408a <prvInsertTimerInActiveList+0x62>
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e007      	b.n	800409a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <prvInsertTimerInActiveList+0x80>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe f954 	bl	8002342 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800409a:	697b      	ldr	r3, [r7, #20]
    }
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000250 	.word	0x20000250
 80040a8:	2000024c 	.word	0x2000024c

080040ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	; 0x30
 80040b0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b2:	e0ae      	b.n	8004212 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f2c0 80aa 	blt.w	8004210 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe f971 	bl	80023b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff87 	bl	8003fe8 <prvSampleTimeNow>
 80040da:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b09      	cmp	r3, #9
 80040e0:	f200 8097 	bhi.w	8004212 <prvProcessReceivedCommands+0x166>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <prvProcessReceivedCommands+0x40>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004115 	.word	0x08004115
 80040f0:	08004115 	.word	0x08004115
 80040f4:	08004115 	.word	0x08004115
 80040f8:	08004189 	.word	0x08004189
 80040fc:	0800419d 	.word	0x0800419d
 8004100:	080041e7 	.word	0x080041e7
 8004104:	08004115 	.word	0x08004115
 8004108:	08004115 	.word	0x08004115
 800410c:	08004189 	.word	0x08004189
 8004110:	0800419d 	.word	0x0800419d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	18d1      	adds	r1, r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004134:	f7ff ff78 	bl	8004028 <prvInsertTimerInActiveList>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d069      	beq.n	8004212 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004144:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05e      	beq.n	8004212 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	441a      	add	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	2100      	movs	r1, #0
 8004164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004166:	f7ff fe21 	bl	8003dac <xTimerGenericCommand>
 800416a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14f      	bne.n	8004212 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61bb      	str	r3, [r7, #24]
    }
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800419a:	e03a      	b.n	8004212 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	617b      	str	r3, [r7, #20]
    }
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	18d1      	adds	r1, r2, r3
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e0:	f7ff ff22 	bl	8004028 <prvInsertTimerInActiveList>
                        break;
 80041e4:	e015      	b.n	8004212 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80041f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f6:	f000 fc71 	bl	8004adc <vPortFree>
 80041fa:	e00a      	b.n	8004212 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800420e:	e000      	b.n	8004212 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004210:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <prvProcessReceivedCommands+0x188>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f107 0108 	add.w	r1, r7, #8
 800421a:	2200      	movs	r2, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fbc7 	bl	80029b0 <xQueueReceive>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f af45 	bne.w	80040b4 <prvProcessReceivedCommands+0x8>
        }
    }
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000254 	.word	0x20000254

08004238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800423e:	e048      	b.n	80042d2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004240:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424a:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe f8ab 	bl	80023b4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02e      	beq.n	80042d2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d90e      	bls.n	80042a4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe f850 	bl	8002342 <vListInsert>
 80042a2:	e016      	b.n	80042d2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042a4:	2300      	movs	r3, #0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2300      	movs	r3, #0
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	2100      	movs	r1, #0
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff fd7c 	bl	8003dac <xTimerGenericCommand>
 80042b4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	603b      	str	r3, [r7, #0]
    }
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1b1      	bne.n	8004240 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvSwitchTimerLists+0xc4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <prvSwitchTimerLists+0xc0>)
 80042e8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvSwitchTimerLists+0xc4>)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6013      	str	r3, [r2, #0]
    }
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	2000024c 	.word	0x2000024c
 80042fc:	20000250 	.word	0x20000250

08004300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004304:	f000 f9de 	bl	80046c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <prvCheckForValidListAndQueue+0x54>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11d      	bne.n	800434c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004310:	4811      	ldr	r0, [pc, #68]	; (8004358 <prvCheckForValidListAndQueue+0x58>)
 8004312:	f7fd ffc5 	bl	80022a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004316:	4811      	ldr	r0, [pc, #68]	; (800435c <prvCheckForValidListAndQueue+0x5c>)
 8004318:	f7fd ffc2 	bl	80022a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <prvCheckForValidListAndQueue+0x60>)
 800431e:	4a0e      	ldr	r2, [pc, #56]	; (8004358 <prvCheckForValidListAndQueue+0x58>)
 8004320:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <prvCheckForValidListAndQueue+0x64>)
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <prvCheckForValidListAndQueue+0x5c>)
 8004326:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004328:	2200      	movs	r2, #0
 800432a:	210c      	movs	r1, #12
 800432c:	200a      	movs	r0, #10
 800432e:	f7fe f8d3 	bl	80024d8 <xQueueGenericCreate>
 8004332:	4603      	mov	r3, r0
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <prvCheckForValidListAndQueue+0x54>)
 8004336:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <prvCheckForValidListAndQueue+0x54>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <prvCheckForValidListAndQueue+0x54>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4908      	ldr	r1, [pc, #32]	; (8004368 <prvCheckForValidListAndQueue+0x68>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fd52 	bl	8002df0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800434c:	f000 f9ea 	bl	8004724 <vPortExitCritical>
    }
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000254 	.word	0x20000254
 8004358:	20000224 	.word	0x20000224
 800435c:	20000238 	.word	0x20000238
 8004360:	2000024c 	.word	0x2000024c
 8004364:	20000250 	.word	0x20000250
 8004368:	08007b10 	.word	0x08007b10

0800436c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b04      	subs	r3, #4
 800437c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004384:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3b04      	subs	r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800439c:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <pxPortInitialiseStack+0x64>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b14      	subs	r3, #20
 80043a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f06f 0202 	mvn.w	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b20      	subs	r3, #32
 80043c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	080043d5 	.word	0x080043d5

080043d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <prvTaskExitError+0x54>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	d00a      	beq.n	80043fe <prvTaskExitError+0x2a>
        __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
    }
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <prvTaskExitError+0x28>
        __asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60bb      	str	r3, [r7, #8]
    }
 8004410:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004412:	bf00      	nop
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0fc      	beq.n	8004414 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20000010 	.word	0x20000010
 800442c:	00000000 	.word	0x00000000

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
 800447a:	0000      	.short	0x0000
 800447c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop

08004484 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <xPortStartScheduler+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x26>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <xPortStartScheduler+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x46>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ca:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <xPortStartScheduler+0x12c>)
 80044cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x130>)
 80044f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <xPortStartScheduler+0x134>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f8:	e009      	b.n	800450e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <xPortStartScheduler+0x134>)
 8004502:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d0ef      	beq.n	80044fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	d00a      	beq.n	800453c <xPortStartScheduler+0xb8>
        __asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
    }
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <xPortStartScheduler+0x134>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <xPortStartScheduler+0x134>)
 8004544:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <xPortStartScheduler+0x138>)
 8004560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004564:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <xPortStartScheduler+0x138>)
 800456c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004572:	f000 f963 	bl	800483c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <xPortStartScheduler+0x13c>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800457c:	f000 f982 	bl	8004884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <xPortStartScheduler+0x140>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <xPortStartScheduler+0x140>)
 8004586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800458c:	f7ff ff64 	bl	8004458 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004590:	f7ff f868 	bl	8003664 <vTaskSwitchContext>
    prvTaskExitError();
 8004594:	f7ff ff1e 	bl	80043d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	410fc271 	.word	0x410fc271
 80045ac:	410fc270 	.word	0x410fc270
 80045b0:	e000e400 	.word	0xe000e400
 80045b4:	20000260 	.word	0x20000260
 80045b8:	20000264 	.word	0x20000264
 80045bc:	e000ed20 	.word	0xe000ed20
 80045c0:	20000010 	.word	0x20000010
 80045c4:	e000ef34 	.word	0xe000ef34

080045c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <vInitPrioGroupValue+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <vInitPrioGroupValue+0xec>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x46>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <vInitPrioGroupValue+0xf0>)
 8004610:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vInitPrioGroupValue+0xf4>)
 8004634:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463c:	e009      	b.n	8004652 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004646:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d0ef      	beq.n	800463e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00a      	beq.n	8004680 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004688:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004694:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	410fc271 	.word	0x410fc271
 80046b4:	410fc270 	.word	0x410fc270
 80046b8:	e000e400 	.word	0xe000e400
 80046bc:	20000260 	.word	0x20000260
 80046c0:	20000264 	.word	0x20000264

080046c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
    }
 80046dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <vPortEnterCritical+0x58>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <vPortEnterCritical+0x58>)
 80046e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <vPortEnterCritical+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10f      	bne.n	8004710 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortEnterCritical+0x5c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vPortEnterCritical+0x4c>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x4a>
    }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000010 	.word	0x20000010
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vPortExitCritical+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vPortExitCritical+0x24>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x50>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <vPortExitCritical+0x50>)
 8004750:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <vPortExitCritical+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <vPortExitCritical+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f383 8811 	msr	BASEPRI, r3
    }
 8004764:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ff58 	bl	8003664 <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004802:	f001 fdcf 	bl	80063a4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004806:	f7fe fe71 	bl	80034ec <xTaskIncrementTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004810:	f001 fe26 	bl	8006460 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SysTick_Handler+0x50>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800481e:	f001 fe03 	bl	8006428 <SEGGER_SYSVIEW_RecordExitISR>
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f383 8811 	msr	BASEPRI, r3
    }
 800482c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <vPortSetupTimerInterrupt+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vPortSetupTimerInterrupt+0x3c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x40>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vPortSetupTimerInterrupt+0x44>)
 800485a:	3b01      	subs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010
 8004874:	e000e018 	.word	0xe000e018
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	e000e014 	.word	0xe000e014

08004884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004894 <vPortEnableVFP+0x10>
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	4770      	bx	lr
 8004892:	0000      	.short	0x0000
 8004894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop

0800489c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d914      	bls.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <vPortValidateInterruptPriority+0x70>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <vPortValidateInterruptPriority+0x74>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7afa      	ldrb	r2, [r7, #11]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20a      	bcs.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vPortValidateInterruptPriority+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <vPortValidateInterruptPriority+0x7c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d90a      	bls.n	80048fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vPortValidateInterruptPriority+0x60>
    }
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e3f0 	.word	0xe000e3f0
 8004910:	20000260 	.word	0x20000260
 8004914:	e000ed0c 	.word	0xe000ed0c
 8004918:	20000264 	.word	0x20000264

0800491c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004928:	f7fe fd10 	bl	800334c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800492c:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <pvPortMalloc+0x1a8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004934:	f000 f934 	bl	8004ba0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <pvPortMalloc+0x1ac>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 80a7 	bne.w	8004a94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800494c:	2208      	movs	r2, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d227      	bcs.n	80049a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004958:	2208      	movs	r2, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d021      	beq.n	80049ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	3308      	adds	r3, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d214      	bcs.n	80049a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <pvPortMalloc+0x92>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a6:	e002      	b.n	80049ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e000      	b.n	80049b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06e      	beq.n	8004a94 <pvPortMalloc+0x178>
 80049b6:	4b45      	ldr	r3, [pc, #276]	; (8004acc <pvPortMalloc+0x1b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d869      	bhi.n	8004a94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049c4:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ca:	e004      	b.n	80049d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <pvPortMalloc+0xcc>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <pvPortMalloc+0x1a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d050      	beq.n	8004a94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2208      	movs	r2, #8
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d91f      	bls.n	8004a54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <pvPortMalloc+0x120>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	613b      	str	r3, [r7, #16]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f000 f908 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d203      	bcs.n	8004a76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <pvPortMalloc+0x1ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a94:	f7fe fc68 	bl	8003368 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <pvPortMalloc+0x19c>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
    }
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20012e70 	.word	0x20012e70
 8004ac8:	20012e84 	.word	0x20012e84
 8004acc:	20012e74 	.word	0x20012e74
 8004ad0:	20012e68 	.word	0x20012e68
 8004ad4:	20012e78 	.word	0x20012e78
 8004ad8:	20012e7c 	.word	0x20012e7c

08004adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04d      	beq.n	8004b8a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aee:	2308      	movs	r3, #8
 8004af0:	425b      	negs	r3, r3
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <vPortFree+0xb8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vPortFree+0x44>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <vPortFree+0x62>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vPortFree+0xb8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vPortFree+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b64:	f7fe fbf2 	bl	800334c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortFree+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <vPortFree+0xbc>)
 8004b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <vPortFree+0xc0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <vPortFree+0xc0>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b86:	f7fe fbef 	bl	8003368 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20012e84 	.word	0x20012e84
 8004b98:	20012e74 	.word	0x20012e74
 8004b9c:	20012e80 	.word	0x20012e80

08004ba0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000268 	.word	0x20000268
 8004c50:	20012e68 	.word	0x20012e68
 8004c54:	20012e70 	.word	0x20012e70
 8004c58:	20012e78 	.word	0x20012e78
 8004c5c:	20012e74 	.word	0x20012e74
 8004c60:	20012e84 	.word	0x20012e84

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20012e68 	.word	0x20012e68
 8004d14:	20012e70 	.word	0x20012e70

08004d18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d1c:	4803      	ldr	r0, [pc, #12]	; (8004d2c <_cbSendSystemDesc+0x14>)
 8004d1e:	f001 faeb 	bl	80062f8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d22:	4803      	ldr	r0, [pc, #12]	; (8004d30 <_cbSendSystemDesc+0x18>)
 8004d24:	f001 fae8 	bl	80062f8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d28:	bf00      	nop
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	08007b18 	.word	0x08007b18
 8004d30:	08007b60 	.word	0x08007b60

08004d34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d44:	f000 fe56 	bl	80059f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d4c:	f000 fe96 	bl	8005a7c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000000 	.word	0x20000000
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	08007c00 	.word	0x08007c00

08004d60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e033      	b.n	8004dd4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d6c:	491e      	ldr	r1, [pc, #120]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	491a      	ldr	r1, [pc, #104]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	4c16      	ldr	r4, [pc, #88]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4423      	add	r3, r4
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	681c      	ldr	r4, [r3, #0]
 8004da0:	4d11      	ldr	r5, [pc, #68]	; (8004de8 <_cbSendTaskList+0x88>)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	442b      	add	r3, r5
 8004dae:	330c      	adds	r3, #12
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	4e0d      	ldr	r6, [pc, #52]	; (8004de8 <_cbSendTaskList+0x88>)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4433      	add	r3, r6
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	4622      	mov	r2, r4
 8004dca:	f000 f8bd 	bl	8004f48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <_cbSendTaskList+0x8c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3c6      	bcc.n	8004d6c <_cbSendTaskList+0xc>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de8:	20012e88 	.word	0x20012e88
 8004dec:	20012f28 	.word	0x20012f28

08004df0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004df8:	f7fe fb66 	bl	80034c8 <xTaskGetTickCountFromISR>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2200      	movs	r2, #0
 8004e00:	469a      	mov	sl, r3
 8004e02:	4693      	mov	fp, r2
 8004e04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	f04f 0a00 	mov.w	sl, #0
 8004e14:	f04f 0b00 	mov.w	fp, #0
 8004e18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e24:	4652      	mov	r2, sl
 8004e26:	465b      	mov	r3, fp
 8004e28:	1a14      	subs	r4, r2, r0
 8004e2a:	eb63 0501 	sbc.w	r5, r3, r1
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	00ab      	lsls	r3, r5, #2
 8004e38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e3c:	00a2      	lsls	r2, r4, #2
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461d      	mov	r5, r3
 8004e42:	eb14 0800 	adds.w	r8, r4, r0
 8004e46:	eb45 0901 	adc.w	r9, r5, r1
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5e:	4690      	mov	r8, r2
 8004e60:	4699      	mov	r9, r3
 8004e62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e86:	2205      	movs	r2, #5
 8004e88:	492b      	ldr	r1, [pc, #172]	; (8004f38 <SYSVIEW_AddTask+0xc0>)
 8004e8a:	68b8      	ldr	r0, [r7, #8]
 8004e8c:	f001 fdca 	bl	8006a24 <memcmp>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04b      	beq.n	8004f2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d903      	bls.n	8004ea6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e9e:	4828      	ldr	r0, [pc, #160]	; (8004f40 <SYSVIEW_AddTask+0xc8>)
 8004ea0:	f001 fd28 	bl	80068f4 <SEGGER_SYSVIEW_Warn>
    return;
 8004ea4:	e044      	b.n	8004f30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ea6:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4926      	ldr	r1, [pc, #152]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4921      	ldr	r1, [pc, #132]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3304      	adds	r3, #4
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	491b      	ldr	r1, [pc, #108]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4916      	ldr	r1, [pc, #88]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4910      	ldr	r1, [pc, #64]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004f1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f80e 	bl	8004f48 <SYSVIEW_SendTaskInfo>
 8004f2c:	e000      	b.n	8004f30 <SYSVIEW_AddTask+0xb8>
    return;
 8004f2e:	bf00      	nop

}
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08007b70 	.word	0x08007b70
 8004f3c:	20012f28 	.word	0x20012f28
 8004f40:	08007b78 	.word	0x08007b78
 8004f44:	20012e88 	.word	0x20012e88

08004f48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	2214      	movs	r2, #20
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fd7e 	bl	8006a60 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f8c3 	bl	8006108 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f82:	bf00      	nop
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <_DoInit+0x98>)
 8004f94:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a20      	ldr	r2, [pc, #128]	; (8005028 <_DoInit+0x9c>)
 8004fa6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a20      	ldr	r2, [pc, #128]	; (800502c <_DoInit+0xa0>)
 8004fac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <_DoInit+0x9c>)
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <_DoInit+0xa4>)
 8004fd2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3307      	adds	r3, #7
 8004ff0:	4a10      	ldr	r2, [pc, #64]	; (8005034 <_DoInit+0xa8>)
 8004ff2:	6810      	ldr	r0, [r2, #0]
 8004ff4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ff6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <_DoInit+0xac>)
 8004ffe:	6810      	ldr	r0, [r2, #0]
 8005000:	6018      	str	r0, [r3, #0]
 8005002:	8891      	ldrh	r1, [r2, #4]
 8005004:	7992      	ldrb	r2, [r2, #6]
 8005006:	8099      	strh	r1, [r3, #4]
 8005008:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800500a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005014:	f3bf 8f5f 	dmb	sy
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20012f2c 	.word	0x20012f2c
 8005028:	08007bc8 	.word	0x08007bc8
 800502c:	20012fd4 	.word	0x20012fd4
 8005030:	200133d4 	.word	0x200133d4
 8005034:	08007bd4 	.word	0x08007bd4
 8005038:	08007bd8 	.word	0x08007bd8

0800503c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005048:	2300      	movs	r3, #0
 800504a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	429a      	cmp	r2, r3
 800505e:	d905      	bls.n	800506c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e007      	b.n	800507c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1acb      	subs	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	3b01      	subs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	4293      	cmp	r3, r2
 8005088:	bf28      	it	cs
 800508a:	4613      	movcs	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4293      	cmp	r3, r2
 8005094:	bf28      	it	cs
 8005096:	4613      	movcs	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	6978      	ldr	r0, [r7, #20]
 80050aa:	f001 fccb 	bl	8006a44 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	4413      	add	r3, r2
 80050b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	4413      	add	r3, r2
 80050bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	4413      	add	r3, r2
 80050cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d101      	bne.n	80050dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1b2      	bne.n	8005052 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80050ec:	6a3b      	ldr	r3, [r7, #32]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d911      	bls.n	800513e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	6938      	ldr	r0, [r7, #16]
 800512a:	f001 fc8b 	bl	8006a44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800512e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	441a      	add	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800513c:	e01f      	b.n	800517e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6938      	ldr	r0, [r7, #16]
 8005152:	f001 fc77 	bl	8006a44 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4619      	mov	r1, r3
 800516e:	6938      	ldr	r0, [r7, #16]
 8005170:	f001 fc68 	bl	8006a44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005174:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	60da      	str	r2, [r3, #12]
}
 800517e:	bf00      	nop
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005186:	b480      	push	{r7}
 8005188:	b087      	sub	sp, #28
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d808      	bhi.n	80051b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	3b01      	subs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e004      	b.n	80051be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <SEGGER_RTT_ReadNoLock+0x1e>
 80051e6:	f7ff fed1 	bl	8004f8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	3360      	adds	r3, #96	; 0x60
 80051f6:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051f8:	4413      	add	r3, r2
 80051fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	429a      	cmp	r2, r3
 8005216:	d92b      	bls.n	8005270 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4293      	cmp	r3, r2
 8005228:	bf28      	it	cs
 800522a:	4613      	movcs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	4413      	add	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800523e:	f001 fc01 	bl	8006a44 <memcpy>
    NumBytesRead += NumBytesRem;
 8005242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005268:	429a      	cmp	r2, r3
 800526a:	d101      	bne.n	8005270 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4293      	cmp	r3, r2
 800527e:	bf28      	it	cs
 8005280:	4613      	movcs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d019      	beq.n	80052be <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	4413      	add	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800529a:	f001 fbd3 	bl	8006a44 <memcpy>
    NumBytesRead += NumBytesRem;
 800529e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3730      	adds	r7, #48	; 0x30
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20012f2c 	.word	0x20012f2c

080052d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <SEGGER_RTT_WriteNoLock+0x9c>)
 80052f6:	4413      	add	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d029      	beq.n	8005356 <SEGGER_RTT_WriteNoLock+0x7e>
 8005302:	2b02      	cmp	r3, #2
 8005304:	d82e      	bhi.n	8005364 <SEGGER_RTT_WriteNoLock+0x8c>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <SEGGER_RTT_WriteNoLock+0x38>
 800530a:	2b01      	cmp	r3, #1
 800530c:	d013      	beq.n	8005336 <SEGGER_RTT_WriteNoLock+0x5e>
 800530e:	e029      	b.n	8005364 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f7ff ff38 	bl	8005186 <_GetAvailWriteSpace>
 8005316:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d202      	bcs.n	8005326 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005324:	e021      	b.n	800536a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	6978      	ldr	r0, [r7, #20]
 8005330:	f7ff fee1 	bl	80050f6 <_WriteNoCheck>
    break;
 8005334:	e019      	b.n	800536a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f7ff ff25 	bl	8005186 <_GetAvailWriteSpace>
 800533c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4293      	cmp	r3, r2
 8005344:	bf28      	it	cs
 8005346:	4613      	movcs	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff fed1 	bl	80050f6 <_WriteNoCheck>
    break;
 8005354:	e009      	b.n	800536a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f7ff fe6e 	bl	800503c <_WriteBlocking>
 8005360:	61f8      	str	r0, [r7, #28]
    break;
 8005362:	e002      	b.n	800536a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
    break;
 8005368:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800536a:	69fb      	ldr	r3, [r7, #28]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20012f2c 	.word	0x20012f2c

08005378 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <SEGGER_RTT_Write+0x48>)
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <SEGGER_RTT_Write+0x1e>
 8005392:	f7ff fdfb 	bl	8004f8c <_DoInit>
  SEGGER_RTT_LOCK();
 8005396:	f3ef 8311 	mrs	r3, BASEPRI
 800539a:	f04f 0120 	mov.w	r1, #32
 800539e:	f381 8811 	msr	BASEPRI, r1
 80053a2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff ff95 	bl	80052d8 <SEGGER_RTT_WriteNoLock>
 80053ae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20012f2c 	.word	0x20012f2c

080053c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80053e0:	f7ff fdd4 	bl	8004f8c <_DoInit>
  SEGGER_RTT_LOCK();
 80053e4:	f3ef 8311 	mrs	r3, BASEPRI
 80053e8:	f04f 0120 	mov.w	r1, #32
 80053ec:	f381 8811 	msr	BASEPRI, r1
 80053f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053f2:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80053fa:	6939      	ldr	r1, [r7, #16]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	3304      	adds	r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3301      	adds	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	429a      	cmp	r2, r3
 8005420:	dbeb      	blt.n	80053fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005422:	e000      	b.n	8005426 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005424:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	429a      	cmp	r2, r3
 800542e:	da3f      	bge.n	80054b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005430:	6939      	ldr	r1, [r7, #16]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	4613      	mov	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	440b      	add	r3, r1
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005444:	6939      	ldr	r1, [r7, #16]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	3304      	adds	r3, #4
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	3320      	adds	r3, #32
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800546e:	6939      	ldr	r1, [r7, #16]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	440b      	add	r3, r1
 800547c:	3328      	adds	r3, #40	; 0x28
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005482:	6939      	ldr	r1, [r7, #16]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	3324      	adds	r3, #36	; 0x24
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	332c      	adds	r3, #44	; 0x2c
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054aa:	f3bf 8f5f 	dmb	sy
 80054ae:	e002      	b.n	80054b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80054b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80054bc:	69fb      	ldr	r3, [r7, #28]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20012f2c 	.word	0x20012f2c

080054cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80054da:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80054e8:	f7ff fd50 	bl	8004f8c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054ec:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80054ee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	461a      	mov	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d24d      	bcs.n	8005598 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80054fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005500:	f04f 0120 	mov.w	r1, #32
 8005504:	f381 8811 	msr	BASEPRI, r1
 8005508:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d031      	beq.n	8005574 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005510:	6979      	ldr	r1, [r7, #20]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3360      	adds	r3, #96	; 0x60
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005524:	6979      	ldr	r1, [r7, #20]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	3364      	adds	r3, #100	; 0x64
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	3368      	adds	r3, #104	; 0x68
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	3370      	adds	r3, #112	; 0x70
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	336c      	adds	r3, #108	; 0x6c
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3374      	adds	r3, #116	; 0x74
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005588:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e002      	b.n	800559e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800559e:	69fb      	ldr	r3, [r7, #28]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20012f2c 	.word	0x20012f2c

080055ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80055bc:	e002      	b.n	80055c4 <_EncodeStr+0x18>
    Len++;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f6      	bne.n	80055be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d901      	bls.n	80055dc <_EncodeStr+0x30>
    Len = Limit;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2bfe      	cmp	r3, #254	; 0xfe
 80055e0:	d806      	bhi.n	80055f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	60fa      	str	r2, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e011      	b.n	8005614 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	60fa      	str	r2, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	; 0xff
 80055f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	60fa      	str	r2, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	0a19      	lsrs	r1, r3, #8
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	60fa      	str	r2, [r7, #12]
 8005610:	b2ca      	uxtb	r2, r1
 8005612:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005618:	e00a      	b.n	8005630 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	1c53      	adds	r3, r2, #1
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	60f9      	str	r1, [r7, #12]
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	701a      	strb	r2, [r3, #0]
    n++;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	3301      	adds	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3f0      	bcc.n	800561a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <_HandleIncomingPacket+0xe0>)
 8005668:	7e1b      	ldrb	r3, [r3, #24]
 800566a:	4618      	mov	r0, r3
 800566c:	1cfb      	adds	r3, r7, #3
 800566e:	2201      	movs	r2, #1
 8005670:	4619      	mov	r1, r3
 8005672:	f7ff fdab 	bl	80051cc <SEGGER_RTT_ReadNoLock>
 8005676:	4603      	mov	r3, r0
 8005678:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dd54      	ble.n	800572a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d032      	beq.n	80056ec <_HandleIncomingPacket+0x8c>
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	dc42      	bgt.n	8005710 <_HandleIncomingPacket+0xb0>
 800568a:	2b07      	cmp	r3, #7
 800568c:	dc16      	bgt.n	80056bc <_HandleIncomingPacket+0x5c>
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd3e      	ble.n	8005710 <_HandleIncomingPacket+0xb0>
 8005692:	3b01      	subs	r3, #1
 8005694:	2b06      	cmp	r3, #6
 8005696:	d83b      	bhi.n	8005710 <_HandleIncomingPacket+0xb0>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <_HandleIncomingPacket+0x40>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056c3 	.word	0x080056c3
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056cf 	.word	0x080056cf
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056db 	.word	0x080056db
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056e7 	.word	0x080056e7
 80056bc:	2b7f      	cmp	r3, #127	; 0x7f
 80056be:	d036      	beq.n	800572e <_HandleIncomingPacket+0xce>
 80056c0:	e026      	b.n	8005710 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80056c2:	f000 fba7 	bl	8005e14 <SEGGER_SYSVIEW_Start>
      break;
 80056c6:	e037      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80056c8:	f000 fc5e 	bl	8005f88 <SEGGER_SYSVIEW_Stop>
      break;
 80056cc:	e034      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80056ce:	f000 fe37 	bl	8006340 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80056d2:	e031      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80056d4:	f000 fdfc 	bl	80062d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80056d8:	e02e      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80056da:	f000 fc7b 	bl	8005fd4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80056de:	e02b      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80056e0:	f001 f8ca 	bl	8006878 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80056e4:	e028      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80056e6:	f001 f8a9 	bl	800683c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80056ea:	e025      	b.n	8005738 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056ec:	4b14      	ldr	r3, [pc, #80]	; (8005740 <_HandleIncomingPacket+0xe0>)
 80056ee:	7e1b      	ldrb	r3, [r3, #24]
 80056f0:	4618      	mov	r0, r3
 80056f2:	1cfb      	adds	r3, r7, #3
 80056f4:	2201      	movs	r2, #1
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7ff fd68 	bl	80051cc <SEGGER_RTT_ReadNoLock>
 80056fc:	4603      	mov	r3, r0
 80056fe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	dd15      	ble.n	8005732 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f817 	bl	800673c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800570e:	e010      	b.n	8005732 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	b25b      	sxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	da0e      	bge.n	8005736 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <_HandleIncomingPacket+0xe0>)
 800571a:	7e1b      	ldrb	r3, [r3, #24]
 800571c:	4618      	mov	r0, r3
 800571e:	1cfb      	adds	r3, r7, #3
 8005720:	2201      	movs	r2, #1
 8005722:	4619      	mov	r1, r3
 8005724:	f7ff fd52 	bl	80051cc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005728:	e005      	b.n	8005736 <_HandleIncomingPacket+0xd6>
    }
  }
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <_HandleIncomingPacket+0xd8>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <_HandleIncomingPacket+0xd8>
      break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <_HandleIncomingPacket+0xd8>
      break;
 8005736:	bf00      	nop
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	200143ec 	.word	0x200143ec

08005744 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800574a:	2301      	movs	r3, #1
 800574c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	3301      	adds	r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	e00b      	b.n	8005778 <_TrySendOverflowPacket+0x34>
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	62f9      	str	r1, [r7, #44]	; 0x2c
 800576a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d8f0      	bhi.n	8005760 <_TrySendOverflowPacket+0x1c>
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800578e:	4b25      	ldr	r3, [pc, #148]	; (8005824 <_TrySendOverflowPacket+0xe0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005794:	4b22      	ldr	r3, [pc, #136]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	e00b      	b.n	80057c0 <_TrySendOverflowPacket+0x7c>
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	6279      	str	r1, [r7, #36]	; 0x24
 80057b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	09db      	lsrs	r3, r3, #7
 80057be:	623b      	str	r3, [r7, #32]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2b7f      	cmp	r3, #127	; 0x7f
 80057c4:	d8f0      	bhi.n	80057a8 <_TrySendOverflowPacket+0x64>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	627a      	str	r2, [r7, #36]	; 0x24
 80057cc:	6a3a      	ldr	r2, [r7, #32]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	4618      	mov	r0, r3
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	f7fa fcf2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057ec:	4603      	mov	r3, r0
 80057ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	3b01      	subs	r3, #1
 8005802:	b2da      	uxtb	r2, r3
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e004      	b.n	8005814 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	3301      	adds	r3, #1
 8005810:	4a03      	ldr	r2, [pc, #12]	; (8005820 <_TrySendOverflowPacket+0xdc>)
 8005812:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005814:	693b      	ldr	r3, [r7, #16]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3730      	adds	r7, #48	; 0x30
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	200143ec 	.word	0x200143ec
 8005824:	e0001004 	.word	0xe0001004

08005828 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005834:	4b6c      	ldr	r3, [pc, #432]	; (80059e8 <_SendPacket+0x1c0>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d010      	beq.n	800585e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800583c:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <_SendPacket+0x1c0>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a3 	beq.w	800598c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005846:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <_SendPacket+0x1c0>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d109      	bne.n	8005862 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800584e:	f7ff ff79 	bl	8005744 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005852:	4b65      	ldr	r3, [pc, #404]	; (80059e8 <_SendPacket+0x1c0>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	f040 809a 	bne.w	8005990 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800585c:	e001      	b.n	8005862 <_SendPacket+0x3a>
    goto Send;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <_SendPacket+0x3c>
Send:
 8005862:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b1f      	cmp	r3, #31
 8005868:	d809      	bhi.n	800587e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <_SendPacket+0x1c0>)
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 808b 	bne.w	8005994 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b17      	cmp	r3, #23
 8005882:	d807      	bhi.n	8005894 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e03d      	b.n	8005910 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b7f      	cmp	r3, #127	; 0x7f
 80058a0:	d912      	bls.n	80058c8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	09da      	lsrs	r2, r3, #7
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	3a01      	subs	r2, #1
 80058ba:	60fa      	str	r2, [r7, #12]
 80058bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e006      	b.n	80058d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d912      	bls.n	8005902 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	09da      	lsrs	r2, r3, #7
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	3a01      	subs	r2, #1
 80058f4:	60fa      	str	r2, [r7, #12]
 80058f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e006      	b.n	8005910 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <_SendPacket+0x1c4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005916:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <_SendPacket+0x1c0>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	e00b      	b.n	8005942 <_SendPacket+0x11a>
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	6279      	str	r1, [r7, #36]	; 0x24
 8005934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	09db      	lsrs	r3, r3, #7
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2b7f      	cmp	r3, #127	; 0x7f
 8005946:	d8f0      	bhi.n	800592a <_SendPacket+0x102>
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	627a      	str	r2, [r7, #36]	; 0x24
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <_SendPacket+0x1c0>)
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	4618      	mov	r0, r3
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	461a      	mov	r2, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f7fa fc32 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800596c:	4603      	mov	r3, r0
 800596e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005976:	4a1c      	ldr	r2, [pc, #112]	; (80059e8 <_SendPacket+0x1c0>)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	60d3      	str	r3, [r2, #12]
 800597c:	e00b      	b.n	8005996 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <_SendPacket+0x1c0>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	b2da      	uxtb	r2, r3
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <_SendPacket+0x1c0>)
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e004      	b.n	8005996 <_SendPacket+0x16e>
    goto SendDone;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <_SendPacket+0x16e>
      goto SendDone;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <_SendPacket+0x16e>
      goto SendDone;
 8005994:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <_SendPacket+0x1c0>)
 8005998:	7e1b      	ldrb	r3, [r3, #24]
 800599a:	4619      	mov	r1, r3
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <_SendPacket+0x1c8>)
 800599e:	460b      	mov	r3, r1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	440b      	add	r3, r1
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4413      	add	r3, r2
 80059a8:	336c      	adds	r3, #108	; 0x6c
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <_SendPacket+0x1c0>)
 80059ae:	7e1b      	ldrb	r3, [r3, #24]
 80059b0:	4618      	mov	r0, r3
 80059b2:	490f      	ldr	r1, [pc, #60]	; (80059f0 <_SendPacket+0x1c8>)
 80059b4:	4603      	mov	r3, r0
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4403      	add	r3, r0
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	3370      	adds	r3, #112	; 0x70
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d00b      	beq.n	80059de <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <_SendPacket+0x1c0>)
 80059c8:	789b      	ldrb	r3, [r3, #2]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <_SendPacket+0x1c0>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059d4:	f7ff fe44 	bl	8005660 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <_SendPacket+0x1c0>)
 80059da:	2200      	movs	r2, #0
 80059dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80059de:	bf00      	nop
 80059e0:	3728      	adds	r7, #40	; 0x28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200143ec 	.word	0x200143ec
 80059ec:	e0001004 	.word	0xe0001004
 80059f0:	20012f2c 	.word	0x20012f2c

080059f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a02:	2300      	movs	r3, #0
 8005a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a08:	4917      	ldr	r1, [pc, #92]	; (8005a68 <SEGGER_SYSVIEW_Init+0x74>)
 8005a0a:	4818      	ldr	r0, [pc, #96]	; (8005a6c <SEGGER_SYSVIEW_Init+0x78>)
 8005a0c:	f7ff fcda 	bl	80053c4 <SEGGER_RTT_AllocUpBuffer>
 8005a10:	4603      	mov	r3, r0
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a16:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a1a:	785a      	ldrb	r2, [r3, #1]
 8005a1c:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a1e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a22:	7e1b      	ldrb	r3, [r3, #24]
 8005a24:	4618      	mov	r0, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <SEGGER_SYSVIEW_Init+0x80>)
 8005a2e:	490f      	ldr	r1, [pc, #60]	; (8005a6c <SEGGER_SYSVIEW_Init+0x78>)
 8005a30:	f7ff fd4c 	bl	80054cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <SEGGER_SYSVIEW_Init+0x84>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a40:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a42:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a48:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005a54:	4a06      	ldr	r2, [pc, #24]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200133e4 	.word	0x200133e4
 8005a6c:	08007be0 	.word	0x08007be0
 8005a70:	200143ec 	.word	0x200143ec
 8005a74:	200143e4 	.word	0x200143e4
 8005a78:	e0001004 	.word	0xe0001004

08005a7c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6113      	str	r3, [r2, #16]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	200143ec 	.word	0x200143ec

08005a9c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa8:	f04f 0120 	mov.w	r1, #32
 8005aac:	f381 8811 	msr	BASEPRI, r1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	4808      	ldr	r0, [pc, #32]	; (8005ad4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ab4:	f7ff fdc7 	bl	8005646 <_PreparePacket>
 8005ab8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f7ff feb2 	bl	8005828 <_SendPacket>
  RECORD_END();
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f383 8811 	msr	BASEPRI, r3
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	2001441c 	.word	0x2001441c

08005ad8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae6:	f04f 0120 	mov.w	r1, #32
 8005aea:	f381 8811 	msr	BASEPRI, r1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	4816      	ldr	r0, [pc, #88]	; (8005b4c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005af2:	f7ff fda8 	bl	8005646 <_PreparePacket>
 8005af6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	e00b      	b.n	8005b1e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	1c59      	adds	r1, r3, #1
 8005b0e:	61f9      	str	r1, [r7, #28]
 8005b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	09db      	lsrs	r3, r3, #7
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b7f      	cmp	r3, #127	; 0x7f
 8005b22:	d8f0      	bhi.n	8005b06 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6938      	ldr	r0, [r7, #16]
 8005b3a:	f7ff fe75 	bl	8005828 <_SendPacket>
  RECORD_END();
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f383 8811 	msr	BASEPRI, r3
}
 8005b44:	bf00      	nop
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2001441c 	.word	0x2001441c

08005b50 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08c      	sub	sp, #48	; 0x30
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b60:	f04f 0120 	mov.w	r1, #32
 8005b64:	f381 8811 	msr	BASEPRI, r1
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	4825      	ldr	r0, [pc, #148]	; (8005c00 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b6c:	f7ff fd6b 	bl	8005646 <_PreparePacket>
 8005b70:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7e:	e00b      	b.n	8005b98 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9c:	d8f0      	bhi.n	8005b80 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	e00b      	b.n	8005bd0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	6279      	str	r1, [r7, #36]	; 0x24
 8005bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	09db      	lsrs	r3, r3, #7
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd4:	d8f0      	bhi.n	8005bb8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	627a      	str	r2, [r7, #36]	; 0x24
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	69b8      	ldr	r0, [r7, #24]
 8005bec:	f7ff fe1c 	bl	8005828 <_SendPacket>
  RECORD_END();
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f383 8811 	msr	BASEPRI, r3
}
 8005bf6:	bf00      	nop
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2001441c 	.word	0x2001441c

08005c04 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	f04f 0120 	mov.w	r1, #32
 8005c1a:	f381 8811 	msr	BASEPRI, r1
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	4832      	ldr	r0, [pc, #200]	; (8005cec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c22:	f7ff fd10 	bl	8005646 <_PreparePacket>
 8005c26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
 8005c34:	e00b      	b.n	8005c4e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	6379      	str	r1, [r7, #52]	; 0x34
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	637a      	str	r2, [r7, #52]	; 0x34
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6c:	e00b      	b.n	8005c86 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	09db      	lsrs	r3, r3, #7
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8a:	d8f0      	bhi.n	8005c6e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	e00b      	b.n	8005cbe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	6279      	str	r1, [r7, #36]	; 0x24
 8005cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	09db      	lsrs	r3, r3, #7
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc2:	d8f0      	bhi.n	8005ca6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69b8      	ldr	r0, [r7, #24]
 8005cda:	f7ff fda5 	bl	8005828 <_SendPacket>
  RECORD_END();
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f383 8811 	msr	BASEPRI, r3
}
 8005ce4:	bf00      	nop
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2001441c 	.word	0x2001441c

08005cf0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	; 0x40
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8005d02:	f04f 0120 	mov.w	r1, #32
 8005d06:	f381 8811 	msr	BASEPRI, r1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	4840      	ldr	r0, [pc, #256]	; (8005e10 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d0e:	f7ff fc9a 	bl	8005646 <_PreparePacket>
 8005d12:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d20:	e00b      	b.n	8005d3a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	1c59      	adds	r1, r3, #1
 8005d2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	09db      	lsrs	r3, r3, #7
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3e:	d8f0      	bhi.n	8005d22 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
 8005d58:	e00b      	b.n	8005d72 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	1c59      	adds	r1, r3, #1
 8005d62:	6379      	str	r1, [r7, #52]	; 0x34
 8005d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	09db      	lsrs	r3, r3, #7
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b7f      	cmp	r3, #127	; 0x7f
 8005d76:	d8f0      	bhi.n	8005d5a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b7f      	cmp	r3, #127	; 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	e00b      	b.n	8005de2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b7f      	cmp	r3, #127	; 0x7f
 8005de6:	d8f0      	bhi.n	8005dca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	627a      	str	r2, [r7, #36]	; 0x24
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6979      	ldr	r1, [r7, #20]
 8005dfc:	69b8      	ldr	r0, [r7, #24]
 8005dfe:	f7ff fd13 	bl	8005828 <_SendPacket>
  RECORD_END();
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f383 8811 	msr	BASEPRI, r3
}
 8005e08:	bf00      	nop
 8005e0a:	3740      	adds	r7, #64	; 0x40
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2001441c 	.word	0x2001441c

08005e14 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	; 0x30
 8005e18:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005e1a:	4b58      	ldr	r3, [pc, #352]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005e20:	f3ef 8311 	mrs	r3, BASEPRI
 8005e24:	f04f 0120 	mov.w	r1, #32
 8005e28:	f381 8811 	msr	BASEPRI, r1
 8005e2c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005e2e:	4b53      	ldr	r3, [pc, #332]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	220a      	movs	r2, #10
 8005e34:	4952      	ldr	r1, [pc, #328]	; (8005f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa f9ca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e42:	200a      	movs	r0, #10
 8005e44:	f7ff fe2a 	bl	8005a9c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e48:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4c:	f04f 0120 	mov.w	r1, #32
 8005e50:	f381 8811 	msr	BASEPRI, r1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	484b      	ldr	r0, [pc, #300]	; (8005f84 <SEGGER_SYSVIEW_Start+0x170>)
 8005e58:	f7ff fbf5 	bl	8005646 <_PreparePacket>
 8005e5c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e66:	4b45      	ldr	r3, [pc, #276]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6c:	e00b      	b.n	8005e86 <SEGGER_SYSVIEW_Start+0x72>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	09db      	lsrs	r3, r3, #7
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8a:	d8f0      	bhi.n	8005e6e <SEGGER_SYSVIEW_Start+0x5a>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e00b      	b.n	8005ec0 <SEGGER_SYSVIEW_Start+0xac>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	09db      	lsrs	r3, r3, #7
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec4:	d8f0      	bhi.n	8005ea8 <SEGGER_SYSVIEW_Start+0x94>
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	627a      	str	r2, [r7, #36]	; 0x24
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e00b      	b.n	8005efa <SEGGER_SYSVIEW_Start+0xe6>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c59      	adds	r1, r3, #1
 8005eea:	61f9      	str	r1, [r7, #28]
 8005eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	09db      	lsrs	r3, r3, #7
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b7f      	cmp	r3, #127	; 0x7f
 8005efe:	d8f0      	bhi.n	8005ee2 <SEGGER_SYSVIEW_Start+0xce>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e00b      	b.n	8005f32 <SEGGER_SYSVIEW_Start+0x11e>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	1c59      	adds	r1, r3, #1
 8005f22:	6179      	str	r1, [r7, #20]
 8005f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	09db      	lsrs	r3, r3, #7
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b7f      	cmp	r3, #127	; 0x7f
 8005f36:	d8f0      	bhi.n	8005f1a <SEGGER_SYSVIEW_Start+0x106>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	617a      	str	r2, [r7, #20]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f48:	2218      	movs	r2, #24
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fc6b 	bl	8005828 <_SendPacket>
      RECORD_END();
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <SEGGER_SYSVIEW_Start+0x168>)
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005f66:	f000 f9eb 	bl	8006340 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005f6a:	f000 f9b1 	bl	80062d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005f6e:	f000 fc83 	bl	8006878 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005f72:	bf00      	nop
 8005f74:	3730      	adds	r7, #48	; 0x30
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200143ec 	.word	0x200143ec
 8005f80:	08007c08 	.word	0x08007c08
 8005f84:	2001441c 	.word	0x2001441c

08005f88 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f92:	f04f 0120 	mov.w	r1, #32
 8005f96:	f381 8811 	msr	BASEPRI, r1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	480b      	ldr	r0, [pc, #44]	; (8005fcc <SEGGER_SYSVIEW_Stop+0x44>)
 8005f9e:	f7ff fb52 	bl	8005646 <_PreparePacket>
 8005fa2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005fac:	220b      	movs	r2, #11
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6838      	ldr	r0, [r7, #0]
 8005fb2:	f7ff fc39 	bl	8005828 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f383 8811 	msr	BASEPRI, r3
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2001441c 	.word	0x2001441c
 8005fd0:	200143ec 	.word	0x200143ec

08005fd4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	; 0x30
 8005fd8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fda:	f3ef 8311 	mrs	r3, BASEPRI
 8005fde:	f04f 0120 	mov.w	r1, #32
 8005fe2:	f381 8811 	msr	BASEPRI, r1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	4845      	ldr	r0, [pc, #276]	; (8006100 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005fea:	f7ff fb2c 	bl	8005646 <_PreparePacket>
 8005fee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff8:	4b42      	ldr	r3, [pc, #264]	; (8006104 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	e00b      	b.n	8006018 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	b2da      	uxtb	r2, r3
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	62f9      	str	r1, [r7, #44]	; 0x2c
 800600a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	09db      	lsrs	r3, r3, #7
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	2b7f      	cmp	r3, #127	; 0x7f
 800601c:	d8f0      	bhi.n	8006000 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	e00b      	b.n	8006052 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	6279      	str	r1, [r7, #36]	; 0x24
 8006044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b7f      	cmp	r3, #127	; 0x7f
 8006056:	d8f0      	bhi.n	800603a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	627a      	str	r2, [r7, #36]	; 0x24
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e00b      	b.n	800608c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	61f9      	str	r1, [r7, #28]
 800607e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b7f      	cmp	r3, #127	; 0x7f
 8006090:	d8f0      	bhi.n	8006074 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	61fa      	str	r2, [r7, #28]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	6179      	str	r1, [r7, #20]
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	617a      	str	r2, [r7, #20]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060da:	2218      	movs	r2, #24
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68b8      	ldr	r0, [r7, #8]
 80060e0:	f7ff fba2 	bl	8005828 <_SendPacket>
  RECORD_END();
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	4798      	blx	r3
  }
}
 80060f8:	bf00      	nop
 80060fa:	3730      	adds	r7, #48	; 0x30
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	2001441c 	.word	0x2001441c
 8006104:	200143ec 	.word	0x200143ec

08006108 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b092      	sub	sp, #72	; 0x48
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006110:	f3ef 8311 	mrs	r3, BASEPRI
 8006114:	f04f 0120 	mov.w	r1, #32
 8006118:	f381 8811 	msr	BASEPRI, r1
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	486a      	ldr	r0, [pc, #424]	; (80062c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006120:	f7ff fa91 	bl	8005646 <_PreparePacket>
 8006124:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b66      	ldr	r3, [pc, #408]	; (80062cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
 800613a:	e00b      	b.n	8006154 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800613c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	6479      	str	r1, [r7, #68]	; 0x44
 8006146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	09db      	lsrs	r3, r3, #7
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
 8006154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006156:	2b7f      	cmp	r3, #127	; 0x7f
 8006158:	d8f0      	bhi.n	800613c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	647a      	str	r2, [r7, #68]	; 0x44
 8006160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38
 8006174:	e00b      	b.n	800618e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	2b7f      	cmp	r3, #127	; 0x7f
 8006192:	d8f0      	bhi.n	8006176 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800619a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff f9fd 	bl	80055ac <_EncodeStr>
 80061b2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80061b4:	2209      	movs	r2, #9
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7ff fb35 	bl	8005828 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b40      	ldr	r3, [pc, #256]	; (80062cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	633b      	str	r3, [r7, #48]	; 0x30
 80061d2:	e00b      	b.n	80061ec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	6379      	str	r1, [r7, #52]	; 0x34
 80061de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	09db      	lsrs	r3, r3, #7
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	2b7f      	cmp	r3, #127	; 0x7f
 80061f0:	d8f0      	bhi.n	80061d4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	637a      	str	r2, [r7, #52]	; 0x34
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
 800620c:	e00b      	b.n	8006226 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	b2da      	uxtb	r2, r3
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	1c59      	adds	r1, r3, #1
 8006216:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	09db      	lsrs	r3, r3, #7
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	2b7f      	cmp	r3, #127	; 0x7f
 800622a:	d8f0      	bhi.n	800620e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	e00b      	b.n	8006260 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	6279      	str	r1, [r7, #36]	; 0x24
 8006252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b7f      	cmp	r3, #127	; 0x7f
 8006264:	d8f0      	bhi.n	8006248 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	627a      	str	r2, [r7, #36]	; 0x24
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e00b      	b.n	8006298 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	61f9      	str	r1, [r7, #28]
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b7f      	cmp	r3, #127	; 0x7f
 800629c:	d8f0      	bhi.n	8006280 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	61fa      	str	r2, [r7, #28]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80062ae:	2215      	movs	r2, #21
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f7ff fab8 	bl	8005828 <_SendPacket>
  RECORD_END();
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f383 8811 	msr	BASEPRI, r3
}
 80062be:	bf00      	nop
 80062c0:	3748      	adds	r7, #72	; 0x48
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2001441c 	.word	0x2001441c
 80062cc:	200143ec 	.word	0x200143ec

080062d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80062e6:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4798      	blx	r3
  }
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200143ec 	.word	0x200143ec

080062f8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006300:	f3ef 8311 	mrs	r3, BASEPRI
 8006304:	f04f 0120 	mov.w	r1, #32
 8006308:	f381 8811 	msr	BASEPRI, r1
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	480b      	ldr	r0, [pc, #44]	; (800633c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006310:	f7ff f999 	bl	8005646 <_PreparePacket>
 8006314:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	6938      	ldr	r0, [r7, #16]
 800631c:	f7ff f946 	bl	80055ac <_EncodeStr>
 8006320:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006322:	220e      	movs	r2, #14
 8006324:	68f9      	ldr	r1, [r7, #12]
 8006326:	6938      	ldr	r0, [r7, #16]
 8006328:	f7ff fa7e 	bl	8005828 <_SendPacket>
  RECORD_END();
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f383 8811 	msr	BASEPRI, r3
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2001441c 	.word	0x2001441c

08006340 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01a      	beq.n	8006384 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800634e:	4b13      	ldr	r3, [pc, #76]	; (800639c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d015      	beq.n	8006384 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4798      	blx	r3
 8006360:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006364:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	000a      	movs	r2, r1
 8006374:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006376:	4613      	mov	r3, r2
 8006378:	461a      	mov	r2, r3
 800637a:	4621      	mov	r1, r4
 800637c:	200d      	movs	r0, #13
 800637e:	f7ff fbe7 	bl	8005b50 <SEGGER_SYSVIEW_RecordU32x2>
 8006382:	e006      	b.n	8006392 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4619      	mov	r1, r3
 800638a:	200c      	movs	r0, #12
 800638c:	f7ff fba4 	bl	8005ad8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bd90      	pop	{r4, r7, pc}
 800639a:	bf00      	nop
 800639c:	200143ec 	.word	0x200143ec
 80063a0:	e0001004 	.word	0xe0001004

080063a4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063aa:	f3ef 8311 	mrs	r3, BASEPRI
 80063ae:	f04f 0120 	mov.w	r1, #32
 80063b2:	f381 8811 	msr	BASEPRI, r1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	4819      	ldr	r0, [pc, #100]	; (8006420 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80063ba:	f7ff f944 	bl	8005646 <_PreparePacket>
 80063be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80063c4:	4b17      	ldr	r3, [pc, #92]	; (8006424 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	6179      	str	r1, [r7, #20]
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	617a      	str	r2, [r7, #20]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006406:	2202      	movs	r2, #2
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	68b8      	ldr	r0, [r7, #8]
 800640c:	f7ff fa0c 	bl	8005828 <_SendPacket>
  RECORD_END();
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f383 8811 	msr	BASEPRI, r3
}
 8006416:	bf00      	nop
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2001441c 	.word	0x2001441c
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800642e:	f3ef 8311 	mrs	r3, BASEPRI
 8006432:	f04f 0120 	mov.w	r1, #32
 8006436:	f381 8811 	msr	BASEPRI, r1
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	4807      	ldr	r0, [pc, #28]	; (800645c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800643e:	f7ff f902 	bl	8005646 <_PreparePacket>
 8006442:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006444:	2203      	movs	r2, #3
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6838      	ldr	r0, [r7, #0]
 800644a:	f7ff f9ed 	bl	8005828 <_SendPacket>
  RECORD_END();
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f383 8811 	msr	BASEPRI, r3
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	2001441c 	.word	0x2001441c

08006460 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006466:	f3ef 8311 	mrs	r3, BASEPRI
 800646a:	f04f 0120 	mov.w	r1, #32
 800646e:	f381 8811 	msr	BASEPRI, r1
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	4807      	ldr	r0, [pc, #28]	; (8006494 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006476:	f7ff f8e6 	bl	8005646 <_PreparePacket>
 800647a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800647c:	2212      	movs	r2, #18
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6838      	ldr	r0, [r7, #0]
 8006482:	f7ff f9d1 	bl	8005828 <_SendPacket>
  RECORD_END();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f383 8811 	msr	BASEPRI, r3
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2001441c 	.word	0x2001441c

08006498 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	f04f 0120 	mov.w	r1, #32
 80064a6:	f381 8811 	msr	BASEPRI, r1
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	4807      	ldr	r0, [pc, #28]	; (80064cc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80064ae:	f7ff f8ca 	bl	8005646 <_PreparePacket>
 80064b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80064b4:	2211      	movs	r2, #17
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6838      	ldr	r0, [r7, #0]
 80064ba:	f7ff f9b5 	bl	8005828 <_SendPacket>
  RECORD_END();
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f383 8811 	msr	BASEPRI, r3
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	2001441c 	.word	0x2001441c

080064d0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064d8:	f3ef 8311 	mrs	r3, BASEPRI
 80064dc:	f04f 0120 	mov.w	r1, #32
 80064e0:	f381 8811 	msr	BASEPRI, r1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	4819      	ldr	r0, [pc, #100]	; (800654c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80064e8:	f7ff f8ad 	bl	8005646 <_PreparePacket>
 80064ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064f2:	4b17      	ldr	r3, [pc, #92]	; (8006550 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	61f9      	str	r1, [r7, #28]
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006534:	2208      	movs	r2, #8
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6938      	ldr	r0, [r7, #16]
 800653a:	f7ff f975 	bl	8005828 <_SendPacket>
  RECORD_END();
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f383 8811 	msr	BASEPRI, r3
}
 8006544:	bf00      	nop
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	2001441c 	.word	0x2001441c
 8006550:	200143ec 	.word	0x200143ec

08006554 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800655c:	f3ef 8311 	mrs	r3, BASEPRI
 8006560:	f04f 0120 	mov.w	r1, #32
 8006564:	f381 8811 	msr	BASEPRI, r1
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	4819      	ldr	r0, [pc, #100]	; (80065d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800656c:	f7ff f86b 	bl	8005646 <_PreparePacket>
 8006570:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006576:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e00b      	b.n	80065a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	61f9      	str	r1, [r7, #28]
 8006594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	09db      	lsrs	r3, r3, #7
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b7f      	cmp	r3, #127	; 0x7f
 80065a6:	d8f0      	bhi.n	800658a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	61fa      	str	r2, [r7, #28]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80065b8:	2204      	movs	r2, #4
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	6938      	ldr	r0, [r7, #16]
 80065be:	f7ff f933 	bl	8005828 <_SendPacket>
  RECORD_END();
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f383 8811 	msr	BASEPRI, r3
}
 80065c8:	bf00      	nop
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2001441c 	.word	0x2001441c
 80065d4:	200143ec 	.word	0x200143ec

080065d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065e0:	f3ef 8311 	mrs	r3, BASEPRI
 80065e4:	f04f 0120 	mov.w	r1, #32
 80065e8:	f381 8811 	msr	BASEPRI, r1
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	4819      	ldr	r0, [pc, #100]	; (8006654 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80065f0:	f7ff f829 	bl	8005646 <_PreparePacket>
 80065f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065fa:	4b17      	ldr	r3, [pc, #92]	; (8006658 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	61f9      	str	r1, [r7, #28]
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	61fa      	str	r2, [r7, #28]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800663c:	2206      	movs	r2, #6
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	6938      	ldr	r0, [r7, #16]
 8006642:	f7ff f8f1 	bl	8005828 <_SendPacket>
  RECORD_END();
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f383 8811 	msr	BASEPRI, r3
}
 800664c:	bf00      	nop
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	2001441c 	.word	0x2001441c
 8006658:	200143ec 	.word	0x200143ec

0800665c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006666:	f3ef 8311 	mrs	r3, BASEPRI
 800666a:	f04f 0120 	mov.w	r1, #32
 800666e:	f381 8811 	msr	BASEPRI, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	4827      	ldr	r0, [pc, #156]	; (8006714 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006676:	f7fe ffe6 	bl	8005646 <_PreparePacket>
 800667a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006680:	4b25      	ldr	r3, [pc, #148]	; (8006718 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	e00b      	b.n	80066ac <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	6279      	str	r1, [r7, #36]	; 0x24
 800669e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d8f0      	bhi.n	8006694 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	627a      	str	r2, [r7, #36]	; 0x24
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e00b      	b.n	80066e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	61f9      	str	r1, [r7, #28]
 80066d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	09db      	lsrs	r3, r3, #7
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b7f      	cmp	r3, #127	; 0x7f
 80066e8:	d8f0      	bhi.n	80066cc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	61fa      	str	r2, [r7, #28]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80066fa:	2207      	movs	r2, #7
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f7ff f892 	bl	8005828 <_SendPacket>
  RECORD_END();
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f383 8811 	msr	BASEPRI, r3
}
 800670a:	bf00      	nop
 800670c:	3728      	adds	r7, #40	; 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2001441c 	.word	0x2001441c
 8006718:	200143ec 	.word	0x200143ec

0800671c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	200143ec 	.word	0x200143ec

0800673c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b08c      	sub	sp, #48	; 0x30
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006746:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d06d      	beq.n	800682a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800674e:	4b39      	ldr	r3, [pc, #228]	; (8006834 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006754:	2300      	movs	r3, #0
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
 8006758:	e008      	b.n	800676c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d007      	beq.n	8006776 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	3301      	adds	r3, #1
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006770:	429a      	cmp	r2, r3
 8006772:	d3f2      	bcc.n	800675a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006774:	e000      	b.n	8006778 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006776:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d055      	beq.n	800682a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800677e:	f3ef 8311 	mrs	r3, BASEPRI
 8006782:	f04f 0120 	mov.w	r1, #32
 8006786:	f381 8811 	msr	BASEPRI, r1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	482a      	ldr	r0, [pc, #168]	; (8006838 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800678e:	f7fe ff5a 	bl	8005646 <_PreparePacket>
 8006792:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	6279      	str	r1, [r7, #36]	; 0x24
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	627a      	str	r2, [r7, #36]	; 0x24
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e00b      	b.n	80067f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	61f9      	str	r1, [r7, #28]
 80067e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	09db      	lsrs	r3, r3, #7
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b7f      	cmp	r3, #127	; 0x7f
 80067f8:	d8f0      	bhi.n	80067dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	61fa      	str	r2, [r7, #28]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2280      	movs	r2, #128	; 0x80
 8006810:	4619      	mov	r1, r3
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7fe feca 	bl	80055ac <_EncodeStr>
 8006818:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800681a:	2216      	movs	r2, #22
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f7ff f802 	bl	8005828 <_SendPacket>
      RECORD_END();
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800682a:	bf00      	nop
 800682c:	3730      	adds	r7, #48	; 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20014414 	.word	0x20014414
 8006838:	2001441c 	.word	0x2001441c

0800683c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f2      	bne.n	8006850 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20014414 	.word	0x20014414

08006878 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800687e:	f3ef 8311 	mrs	r3, BASEPRI
 8006882:	f04f 0120 	mov.w	r1, #32
 8006886:	f381 8811 	msr	BASEPRI, r1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	4817      	ldr	r0, [pc, #92]	; (80068ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800688e:	f7fe feda 	bl	8005646 <_PreparePacket>
 8006892:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6179      	str	r1, [r7, #20]
 80068ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	617a      	str	r2, [r7, #20]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80068d2:	221b      	movs	r2, #27
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	68b8      	ldr	r0, [r7, #8]
 80068d8:	f7fe ffa6 	bl	8005828 <_SendPacket>
  RECORD_END();
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2001441c 	.word	0x2001441c
 80068f0:	20014418 	.word	0x20014418

080068f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006900:	f04f 0120 	mov.w	r1, #32
 8006904:	f381 8811 	msr	BASEPRI, r1
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	4827      	ldr	r0, [pc, #156]	; (80069a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800690c:	f7fe fe9b 	bl	8005646 <_PreparePacket>
 8006910:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f7fe fe48 	bl	80055ac <_EncodeStr>
 800691c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
 8006922:	2301      	movs	r3, #1
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	e00b      	b.n	8006940 <SEGGER_SYSVIEW_Warn+0x4c>
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	6279      	str	r1, [r7, #36]	; 0x24
 8006932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b7f      	cmp	r3, #127	; 0x7f
 8006944:	d8f0      	bhi.n	8006928 <SEGGER_SYSVIEW_Warn+0x34>
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	627a      	str	r2, [r7, #36]	; 0x24
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_Warn+0x84>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	61f9      	str	r1, [r7, #28]
 800696a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_Warn+0x6c>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	61fa      	str	r2, [r7, #28]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800698e:	221a      	movs	r2, #26
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f7fe ff48 	bl	8005828 <_SendPacket>
  RECORD_END();
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2001441c 	.word	0x2001441c

080069ac <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fe fcda 	bl	8005378 <SEGGER_RTT_Write>
  return len;
 80069c4:	683b      	ldr	r3, [r7, #0]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000014 	.word	0x20000014

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4d0d      	ldr	r5, [pc, #52]	; (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2600      	movs	r6, #0
 80069e8:	42a6      	cmp	r6, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4d0b      	ldr	r5, [pc, #44]	; (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	; (8006a20 <__libc_init_array+0x44>)
 80069f0:	f001 f872 	bl	8007ad8 <_init>
 80069f4:	1b64      	subs	r4, r4, r5
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2600      	movs	r6, #0
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a04:	4798      	blx	r3
 8006a06:	3601      	adds	r6, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0e:	4798      	blx	r3
 8006a10:	3601      	adds	r6, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08007d64 	.word	0x08007d64
 8006a18:	08007d64 	.word	0x08007d64
 8006a1c:	08007d64 	.word	0x08007d64
 8006a20:	08007d68 	.word	0x08007d68

08006a24 <memcmp>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	3901      	subs	r1, #1
 8006a28:	4402      	add	r2, r0
 8006a2a:	4290      	cmp	r0, r2
 8006a2c:	d101      	bne.n	8006a32 <memcmp+0xe>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e005      	b.n	8006a3e <memcmp+0x1a>
 8006a32:	7803      	ldrb	r3, [r0, #0]
 8006a34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d001      	beq.n	8006a40 <memcmp+0x1c>
 8006a3c:	1b18      	subs	r0, r3, r4
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	3001      	adds	r0, #1
 8006a42:	e7f2      	b.n	8006a2a <memcmp+0x6>

08006a44 <memcpy>:
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a4c:	d100      	bne.n	8006a50 <memcpy+0xc>
 8006a4e:	4770      	bx	lr
 8006a50:	b510      	push	{r4, lr}
 8006a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d1f9      	bne.n	8006a52 <memcpy+0xe>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <memset>:
 8006a60:	4402      	add	r2, r0
 8006a62:	4603      	mov	r3, r0
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d100      	bne.n	8006a6a <memset+0xa>
 8006a68:	4770      	bx	lr
 8006a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6e:	e7f9      	b.n	8006a64 <memset+0x4>

08006a70 <rand>:
 8006a70:	4b16      	ldr	r3, [pc, #88]	; (8006acc <rand+0x5c>)
 8006a72:	b510      	push	{r4, lr}
 8006a74:	681c      	ldr	r4, [r3, #0]
 8006a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a78:	b9b3      	cbnz	r3, 8006aa8 <rand+0x38>
 8006a7a:	2018      	movs	r0, #24
 8006a7c:	f000 f866 	bl	8006b4c <malloc>
 8006a80:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a82:	b928      	cbnz	r0, 8006a90 <rand+0x20>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <rand+0x60>)
 8006a88:	4812      	ldr	r0, [pc, #72]	; (8006ad4 <rand+0x64>)
 8006a8a:	214e      	movs	r1, #78	; 0x4e
 8006a8c:	f000 f82e 	bl	8006aec <__assert_func>
 8006a90:	4a11      	ldr	r2, [pc, #68]	; (8006ad8 <rand+0x68>)
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <rand+0x6c>)
 8006a94:	e9c0 2300 	strd	r2, r3, [r0]
 8006a98:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <rand+0x70>)
 8006a9a:	6083      	str	r3, [r0, #8]
 8006a9c:	230b      	movs	r3, #11
 8006a9e:	8183      	strh	r3, [r0, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006aa8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ae4 <rand+0x74>)
 8006aac:	6920      	ldr	r0, [r4, #16]
 8006aae:	6963      	ldr	r3, [r4, #20]
 8006ab0:	490d      	ldr	r1, [pc, #52]	; (8006ae8 <rand+0x78>)
 8006ab2:	4342      	muls	r2, r0
 8006ab4:	fb01 2203 	mla	r2, r1, r3, r2
 8006ab8:	fba0 0101 	umull	r0, r1, r0, r1
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	eb42 0001 	adc.w	r0, r2, r1
 8006ac2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006ac6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006aca:	bd10      	pop	{r4, pc}
 8006acc:	20000014 	.word	0x20000014
 8006ad0:	08007c18 	.word	0x08007c18
 8006ad4:	08007c2f 	.word	0x08007c2f
 8006ad8:	abcd330e 	.word	0xabcd330e
 8006adc:	e66d1234 	.word	0xe66d1234
 8006ae0:	0005deec 	.word	0x0005deec
 8006ae4:	5851f42d 	.word	0x5851f42d
 8006ae8:	4c957f2d 	.word	0x4c957f2d

08006aec <__assert_func>:
 8006aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aee:	4614      	mov	r4, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <__assert_func+0x2c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4605      	mov	r5, r0
 8006af8:	68d8      	ldr	r0, [r3, #12]
 8006afa:	b14c      	cbz	r4, 8006b10 <__assert_func+0x24>
 8006afc:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <__assert_func+0x30>)
 8006afe:	9100      	str	r1, [sp, #0]
 8006b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b04:	4906      	ldr	r1, [pc, #24]	; (8006b20 <__assert_func+0x34>)
 8006b06:	462b      	mov	r3, r5
 8006b08:	f000 f80e 	bl	8006b28 <fiprintf>
 8006b0c:	f000 fcc4 	bl	8007498 <abort>
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <__assert_func+0x38>)
 8006b12:	461c      	mov	r4, r3
 8006b14:	e7f3      	b.n	8006afe <__assert_func+0x12>
 8006b16:	bf00      	nop
 8006b18:	20000014 	.word	0x20000014
 8006b1c:	08007c8a 	.word	0x08007c8a
 8006b20:	08007c97 	.word	0x08007c97
 8006b24:	08007cc5 	.word	0x08007cc5

08006b28 <fiprintf>:
 8006b28:	b40e      	push	{r1, r2, r3}
 8006b2a:	b503      	push	{r0, r1, lr}
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	ab03      	add	r3, sp, #12
 8006b30:	4805      	ldr	r0, [pc, #20]	; (8006b48 <fiprintf+0x20>)
 8006b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f000 f919 	bl	8006d70 <_vfiprintf_r>
 8006b3e:	b002      	add	sp, #8
 8006b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b44:	b003      	add	sp, #12
 8006b46:	4770      	bx	lr
 8006b48:	20000014 	.word	0x20000014

08006b4c <malloc>:
 8006b4c:	4b02      	ldr	r3, [pc, #8]	; (8006b58 <malloc+0xc>)
 8006b4e:	4601      	mov	r1, r0
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	f000 b86f 	b.w	8006c34 <_malloc_r>
 8006b56:	bf00      	nop
 8006b58:	20000014 	.word	0x20000014

08006b5c <_free_r>:
 8006b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	d044      	beq.n	8006bec <_free_r+0x90>
 8006b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b66:	9001      	str	r0, [sp, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b6e:	bfb8      	it	lt
 8006b70:	18e4      	addlt	r4, r4, r3
 8006b72:	f000 feb9 	bl	80078e8 <__malloc_lock>
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <_free_r+0x94>)
 8006b78:	9801      	ldr	r0, [sp, #4]
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	b933      	cbnz	r3, 8006b8c <_free_r+0x30>
 8006b7e:	6063      	str	r3, [r4, #4]
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	b003      	add	sp, #12
 8006b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b88:	f000 beb4 	b.w	80078f4 <__malloc_unlock>
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d908      	bls.n	8006ba2 <_free_r+0x46>
 8006b90:	6825      	ldr	r5, [r4, #0]
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf01      	itttt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	e7ed      	b.n	8006b7e <_free_r+0x22>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b10b      	cbz	r3, 8006bac <_free_r+0x50>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d9fa      	bls.n	8006ba2 <_free_r+0x46>
 8006bac:	6811      	ldr	r1, [r2, #0]
 8006bae:	1855      	adds	r5, r2, r1
 8006bb0:	42a5      	cmp	r5, r4
 8006bb2:	d10b      	bne.n	8006bcc <_free_r+0x70>
 8006bb4:	6824      	ldr	r4, [r4, #0]
 8006bb6:	4421      	add	r1, r4
 8006bb8:	1854      	adds	r4, r2, r1
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	d1e0      	bne.n	8006b82 <_free_r+0x26>
 8006bc0:	681c      	ldr	r4, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	6053      	str	r3, [r2, #4]
 8006bc6:	4421      	add	r1, r4
 8006bc8:	6011      	str	r1, [r2, #0]
 8006bca:	e7da      	b.n	8006b82 <_free_r+0x26>
 8006bcc:	d902      	bls.n	8006bd4 <_free_r+0x78>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	e7d6      	b.n	8006b82 <_free_r+0x26>
 8006bd4:	6825      	ldr	r5, [r4, #0]
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf04      	itt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	bf04      	itt	eq
 8006be4:	1949      	addeq	r1, r1, r5
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	6054      	str	r4, [r2, #4]
 8006bea:	e7ca      	b.n	8006b82 <_free_r+0x26>
 8006bec:	b003      	add	sp, #12
 8006bee:	bd30      	pop	{r4, r5, pc}
 8006bf0:	20014500 	.word	0x20014500

08006bf4 <sbrk_aligned>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4e0e      	ldr	r6, [pc, #56]	; (8006c30 <sbrk_aligned+0x3c>)
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	6831      	ldr	r1, [r6, #0]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	b911      	cbnz	r1, 8006c06 <sbrk_aligned+0x12>
 8006c00:	f000 fb7a 	bl	80072f8 <_sbrk_r>
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 fb75 	bl	80072f8 <_sbrk_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d00a      	beq.n	8006c28 <sbrk_aligned+0x34>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d007      	beq.n	8006c2c <sbrk_aligned+0x38>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fb6a 	bl	80072f8 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d101      	bne.n	8006c2c <sbrk_aligned+0x38>
 8006c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	20014504 	.word	0x20014504

08006c34 <_malloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	1ccd      	adds	r5, r1, #3
 8006c3a:	f025 0503 	bic.w	r5, r5, #3
 8006c3e:	3508      	adds	r5, #8
 8006c40:	2d0c      	cmp	r5, #12
 8006c42:	bf38      	it	cc
 8006c44:	250c      	movcc	r5, #12
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	4607      	mov	r7, r0
 8006c4a:	db01      	blt.n	8006c50 <_malloc_r+0x1c>
 8006c4c:	42a9      	cmp	r1, r5
 8006c4e:	d905      	bls.n	8006c5c <_malloc_r+0x28>
 8006c50:	230c      	movs	r3, #12
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	2600      	movs	r6, #0
 8006c56:	4630      	mov	r0, r6
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5c:	4e2e      	ldr	r6, [pc, #184]	; (8006d18 <_malloc_r+0xe4>)
 8006c5e:	f000 fe43 	bl	80078e8 <__malloc_lock>
 8006c62:	6833      	ldr	r3, [r6, #0]
 8006c64:	461c      	mov	r4, r3
 8006c66:	bb34      	cbnz	r4, 8006cb6 <_malloc_r+0x82>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff ffc2 	bl	8006bf4 <sbrk_aligned>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	4604      	mov	r4, r0
 8006c74:	d14d      	bne.n	8006d12 <_malloc_r+0xde>
 8006c76:	6834      	ldr	r4, [r6, #0]
 8006c78:	4626      	mov	r6, r4
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	d140      	bne.n	8006d00 <_malloc_r+0xcc>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	4631      	mov	r1, r6
 8006c82:	4638      	mov	r0, r7
 8006c84:	eb04 0803 	add.w	r8, r4, r3
 8006c88:	f000 fb36 	bl	80072f8 <_sbrk_r>
 8006c8c:	4580      	cmp	r8, r0
 8006c8e:	d13a      	bne.n	8006d06 <_malloc_r+0xd2>
 8006c90:	6821      	ldr	r1, [r4, #0]
 8006c92:	3503      	adds	r5, #3
 8006c94:	1a6d      	subs	r5, r5, r1
 8006c96:	f025 0503 	bic.w	r5, r5, #3
 8006c9a:	3508      	adds	r5, #8
 8006c9c:	2d0c      	cmp	r5, #12
 8006c9e:	bf38      	it	cc
 8006ca0:	250c      	movcc	r5, #12
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ffa5 	bl	8006bf4 <sbrk_aligned>
 8006caa:	3001      	adds	r0, #1
 8006cac:	d02b      	beq.n	8006d06 <_malloc_r+0xd2>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	442b      	add	r3, r5
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	e00e      	b.n	8006cd4 <_malloc_r+0xa0>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	1b52      	subs	r2, r2, r5
 8006cba:	d41e      	bmi.n	8006cfa <_malloc_r+0xc6>
 8006cbc:	2a0b      	cmp	r2, #11
 8006cbe:	d916      	bls.n	8006cee <_malloc_r+0xba>
 8006cc0:	1961      	adds	r1, r4, r5
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	6025      	str	r5, [r4, #0]
 8006cc6:	bf18      	it	ne
 8006cc8:	6059      	strne	r1, [r3, #4]
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	bf08      	it	eq
 8006cce:	6031      	streq	r1, [r6, #0]
 8006cd0:	5162      	str	r2, [r4, r5]
 8006cd2:	604b      	str	r3, [r1, #4]
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f104 060b 	add.w	r6, r4, #11
 8006cda:	f000 fe0b 	bl	80078f4 <__malloc_unlock>
 8006cde:	f026 0607 	bic.w	r6, r6, #7
 8006ce2:	1d23      	adds	r3, r4, #4
 8006ce4:	1af2      	subs	r2, r6, r3
 8006ce6:	d0b6      	beq.n	8006c56 <_malloc_r+0x22>
 8006ce8:	1b9b      	subs	r3, r3, r6
 8006cea:	50a3      	str	r3, [r4, r2]
 8006cec:	e7b3      	b.n	8006c56 <_malloc_r+0x22>
 8006cee:	6862      	ldr	r2, [r4, #4]
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	bf0c      	ite	eq
 8006cf4:	6032      	streq	r2, [r6, #0]
 8006cf6:	605a      	strne	r2, [r3, #4]
 8006cf8:	e7ec      	b.n	8006cd4 <_malloc_r+0xa0>
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	6864      	ldr	r4, [r4, #4]
 8006cfe:	e7b2      	b.n	8006c66 <_malloc_r+0x32>
 8006d00:	4634      	mov	r4, r6
 8006d02:	6876      	ldr	r6, [r6, #4]
 8006d04:	e7b9      	b.n	8006c7a <_malloc_r+0x46>
 8006d06:	230c      	movs	r3, #12
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	f000 fdf2 	bl	80078f4 <__malloc_unlock>
 8006d10:	e7a1      	b.n	8006c56 <_malloc_r+0x22>
 8006d12:	6025      	str	r5, [r4, #0]
 8006d14:	e7de      	b.n	8006cd4 <_malloc_r+0xa0>
 8006d16:	bf00      	nop
 8006d18:	20014500 	.word	0x20014500

08006d1c <__sfputc_r>:
 8006d1c:	6893      	ldr	r3, [r2, #8]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	b410      	push	{r4}
 8006d24:	6093      	str	r3, [r2, #8]
 8006d26:	da08      	bge.n	8006d3a <__sfputc_r+0x1e>
 8006d28:	6994      	ldr	r4, [r2, #24]
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	db01      	blt.n	8006d32 <__sfputc_r+0x16>
 8006d2e:	290a      	cmp	r1, #10
 8006d30:	d103      	bne.n	8006d3a <__sfputc_r+0x1e>
 8006d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d36:	f000 baef 	b.w	8007318 <__swbuf_r>
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	1c58      	adds	r0, r3, #1
 8006d3e:	6010      	str	r0, [r2, #0]
 8006d40:	7019      	strb	r1, [r3, #0]
 8006d42:	4608      	mov	r0, r1
 8006d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <__sfputs_r>:
 8006d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	460f      	mov	r7, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	18d5      	adds	r5, r2, r3
 8006d54:	42ac      	cmp	r4, r5
 8006d56:	d101      	bne.n	8006d5c <__sfputs_r+0x12>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e007      	b.n	8006d6c <__sfputs_r+0x22>
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	463a      	mov	r2, r7
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff ffda 	bl	8006d1c <__sfputc_r>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d1f3      	bne.n	8006d54 <__sfputs_r+0xa>
 8006d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d70 <_vfiprintf_r>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	460d      	mov	r5, r1
 8006d76:	b09d      	sub	sp, #116	; 0x74
 8006d78:	4614      	mov	r4, r2
 8006d7a:	4698      	mov	r8, r3
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	b118      	cbz	r0, 8006d88 <_vfiprintf_r+0x18>
 8006d80:	6983      	ldr	r3, [r0, #24]
 8006d82:	b90b      	cbnz	r3, 8006d88 <_vfiprintf_r+0x18>
 8006d84:	f000 fcaa 	bl	80076dc <__sinit>
 8006d88:	4b89      	ldr	r3, [pc, #548]	; (8006fb0 <_vfiprintf_r+0x240>)
 8006d8a:	429d      	cmp	r5, r3
 8006d8c:	d11b      	bne.n	8006dc6 <_vfiprintf_r+0x56>
 8006d8e:	6875      	ldr	r5, [r6, #4]
 8006d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d92:	07d9      	lsls	r1, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_vfiprintf_r+0x32>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	059a      	lsls	r2, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_vfiprintf_r+0x32>
 8006d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d9e:	f000 fd3b 	bl	8007818 <__retarget_lock_acquire_recursive>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	071b      	lsls	r3, r3, #28
 8006da6:	d501      	bpl.n	8006dac <_vfiprintf_r+0x3c>
 8006da8:	692b      	ldr	r3, [r5, #16]
 8006daa:	b9eb      	cbnz	r3, 8006de8 <_vfiprintf_r+0x78>
 8006dac:	4629      	mov	r1, r5
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 fb04 	bl	80073bc <__swsetup_r>
 8006db4:	b1c0      	cbz	r0, 8006de8 <_vfiprintf_r+0x78>
 8006db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db8:	07dc      	lsls	r4, r3, #31
 8006dba:	d50e      	bpl.n	8006dda <_vfiprintf_r+0x6a>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc0:	b01d      	add	sp, #116	; 0x74
 8006dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc6:	4b7b      	ldr	r3, [pc, #492]	; (8006fb4 <_vfiprintf_r+0x244>)
 8006dc8:	429d      	cmp	r5, r3
 8006dca:	d101      	bne.n	8006dd0 <_vfiprintf_r+0x60>
 8006dcc:	68b5      	ldr	r5, [r6, #8]
 8006dce:	e7df      	b.n	8006d90 <_vfiprintf_r+0x20>
 8006dd0:	4b79      	ldr	r3, [pc, #484]	; (8006fb8 <_vfiprintf_r+0x248>)
 8006dd2:	429d      	cmp	r5, r3
 8006dd4:	bf08      	it	eq
 8006dd6:	68f5      	ldreq	r5, [r6, #12]
 8006dd8:	e7da      	b.n	8006d90 <_vfiprintf_r+0x20>
 8006dda:	89ab      	ldrh	r3, [r5, #12]
 8006ddc:	0598      	lsls	r0, r3, #22
 8006dde:	d4ed      	bmi.n	8006dbc <_vfiprintf_r+0x4c>
 8006de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de2:	f000 fd1a 	bl	800781a <__retarget_lock_release_recursive>
 8006de6:	e7e9      	b.n	8006dbc <_vfiprintf_r+0x4c>
 8006de8:	2300      	movs	r3, #0
 8006dea:	9309      	str	r3, [sp, #36]	; 0x24
 8006dec:	2320      	movs	r3, #32
 8006dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006df6:	2330      	movs	r3, #48	; 0x30
 8006df8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fbc <_vfiprintf_r+0x24c>
 8006dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e00:	f04f 0901 	mov.w	r9, #1
 8006e04:	4623      	mov	r3, r4
 8006e06:	469a      	mov	sl, r3
 8006e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_vfiprintf_r+0xa2>
 8006e0e:	2a25      	cmp	r2, #37	; 0x25
 8006e10:	d1f9      	bne.n	8006e06 <_vfiprintf_r+0x96>
 8006e12:	ebba 0b04 	subs.w	fp, sl, r4
 8006e16:	d00b      	beq.n	8006e30 <_vfiprintf_r+0xc0>
 8006e18:	465b      	mov	r3, fp
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff ff93 	bl	8006d4a <__sfputs_r>
 8006e24:	3001      	adds	r0, #1
 8006e26:	f000 80aa 	beq.w	8006f7e <_vfiprintf_r+0x20e>
 8006e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e2c:	445a      	add	r2, fp
 8006e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e30:	f89a 3000 	ldrb.w	r3, [sl]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80a2 	beq.w	8006f7e <_vfiprintf_r+0x20e>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e44:	f10a 0a01 	add.w	sl, sl, #1
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	9307      	str	r3, [sp, #28]
 8006e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e50:	931a      	str	r3, [sp, #104]	; 0x68
 8006e52:	4654      	mov	r4, sl
 8006e54:	2205      	movs	r2, #5
 8006e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5a:	4858      	ldr	r0, [pc, #352]	; (8006fbc <_vfiprintf_r+0x24c>)
 8006e5c:	f7f9 fa08 	bl	8000270 <memchr>
 8006e60:	9a04      	ldr	r2, [sp, #16]
 8006e62:	b9d8      	cbnz	r0, 8006e9c <_vfiprintf_r+0x12c>
 8006e64:	06d1      	lsls	r1, r2, #27
 8006e66:	bf44      	itt	mi
 8006e68:	2320      	movmi	r3, #32
 8006e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e6e:	0713      	lsls	r3, r2, #28
 8006e70:	bf44      	itt	mi
 8006e72:	232b      	movmi	r3, #43	; 0x2b
 8006e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e78:	f89a 3000 	ldrb.w	r3, [sl]
 8006e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e7e:	d015      	beq.n	8006eac <_vfiprintf_r+0x13c>
 8006e80:	9a07      	ldr	r2, [sp, #28]
 8006e82:	4654      	mov	r4, sl
 8006e84:	2000      	movs	r0, #0
 8006e86:	f04f 0c0a 	mov.w	ip, #10
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e90:	3b30      	subs	r3, #48	; 0x30
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	d94e      	bls.n	8006f34 <_vfiprintf_r+0x1c4>
 8006e96:	b1b0      	cbz	r0, 8006ec6 <_vfiprintf_r+0x156>
 8006e98:	9207      	str	r2, [sp, #28]
 8006e9a:	e014      	b.n	8006ec6 <_vfiprintf_r+0x156>
 8006e9c:	eba0 0308 	sub.w	r3, r0, r8
 8006ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	9304      	str	r3, [sp, #16]
 8006ea8:	46a2      	mov	sl, r4
 8006eaa:	e7d2      	b.n	8006e52 <_vfiprintf_r+0xe2>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	1d19      	adds	r1, r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	9103      	str	r1, [sp, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfbb      	ittet	lt
 8006eb8:	425b      	neglt	r3, r3
 8006eba:	f042 0202 	orrlt.w	r2, r2, #2
 8006ebe:	9307      	strge	r3, [sp, #28]
 8006ec0:	9307      	strlt	r3, [sp, #28]
 8006ec2:	bfb8      	it	lt
 8006ec4:	9204      	strlt	r2, [sp, #16]
 8006ec6:	7823      	ldrb	r3, [r4, #0]
 8006ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eca:	d10c      	bne.n	8006ee6 <_vfiprintf_r+0x176>
 8006ecc:	7863      	ldrb	r3, [r4, #1]
 8006ece:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed0:	d135      	bne.n	8006f3e <_vfiprintf_r+0x1ce>
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	1d1a      	adds	r2, r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	9203      	str	r2, [sp, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfb8      	it	lt
 8006ede:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ee2:	3402      	adds	r4, #2
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fcc <_vfiprintf_r+0x25c>
 8006eea:	7821      	ldrb	r1, [r4, #0]
 8006eec:	2203      	movs	r2, #3
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f7f9 f9be 	bl	8000270 <memchr>
 8006ef4:	b140      	cbz	r0, 8006f08 <_vfiprintf_r+0x198>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	eba0 000a 	sub.w	r0, r0, sl
 8006efc:	fa03 f000 	lsl.w	r0, r3, r0
 8006f00:	9b04      	ldr	r3, [sp, #16]
 8006f02:	4303      	orrs	r3, r0
 8006f04:	3401      	adds	r4, #1
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	482c      	ldr	r0, [pc, #176]	; (8006fc0 <_vfiprintf_r+0x250>)
 8006f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f12:	2206      	movs	r2, #6
 8006f14:	f7f9 f9ac 	bl	8000270 <memchr>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d03f      	beq.n	8006f9c <_vfiprintf_r+0x22c>
 8006f1c:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <_vfiprintf_r+0x254>)
 8006f1e:	bb1b      	cbnz	r3, 8006f68 <_vfiprintf_r+0x1f8>
 8006f20:	9b03      	ldr	r3, [sp, #12]
 8006f22:	3307      	adds	r3, #7
 8006f24:	f023 0307 	bic.w	r3, r3, #7
 8006f28:	3308      	adds	r3, #8
 8006f2a:	9303      	str	r3, [sp, #12]
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	443b      	add	r3, r7
 8006f30:	9309      	str	r3, [sp, #36]	; 0x24
 8006f32:	e767      	b.n	8006e04 <_vfiprintf_r+0x94>
 8006f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f38:	460c      	mov	r4, r1
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	e7a5      	b.n	8006e8a <_vfiprintf_r+0x11a>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	3401      	adds	r4, #1
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	4619      	mov	r1, r3
 8006f46:	f04f 0c0a 	mov.w	ip, #10
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f50:	3a30      	subs	r2, #48	; 0x30
 8006f52:	2a09      	cmp	r2, #9
 8006f54:	d903      	bls.n	8006f5e <_vfiprintf_r+0x1ee>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0c5      	beq.n	8006ee6 <_vfiprintf_r+0x176>
 8006f5a:	9105      	str	r1, [sp, #20]
 8006f5c:	e7c3      	b.n	8006ee6 <_vfiprintf_r+0x176>
 8006f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f62:	4604      	mov	r4, r0
 8006f64:	2301      	movs	r3, #1
 8006f66:	e7f0      	b.n	8006f4a <_vfiprintf_r+0x1da>
 8006f68:	ab03      	add	r3, sp, #12
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	462a      	mov	r2, r5
 8006f6e:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <_vfiprintf_r+0x258>)
 8006f70:	a904      	add	r1, sp, #16
 8006f72:	4630      	mov	r0, r6
 8006f74:	f3af 8000 	nop.w
 8006f78:	4607      	mov	r7, r0
 8006f7a:	1c78      	adds	r0, r7, #1
 8006f7c:	d1d6      	bne.n	8006f2c <_vfiprintf_r+0x1bc>
 8006f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f80:	07d9      	lsls	r1, r3, #31
 8006f82:	d405      	bmi.n	8006f90 <_vfiprintf_r+0x220>
 8006f84:	89ab      	ldrh	r3, [r5, #12]
 8006f86:	059a      	lsls	r2, r3, #22
 8006f88:	d402      	bmi.n	8006f90 <_vfiprintf_r+0x220>
 8006f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f8c:	f000 fc45 	bl	800781a <__retarget_lock_release_recursive>
 8006f90:	89ab      	ldrh	r3, [r5, #12]
 8006f92:	065b      	lsls	r3, r3, #25
 8006f94:	f53f af12 	bmi.w	8006dbc <_vfiprintf_r+0x4c>
 8006f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9a:	e711      	b.n	8006dc0 <_vfiprintf_r+0x50>
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <_vfiprintf_r+0x258>)
 8006fa4:	a904      	add	r1, sp, #16
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f000 f880 	bl	80070ac <_printf_i>
 8006fac:	e7e4      	b.n	8006f78 <_vfiprintf_r+0x208>
 8006fae:	bf00      	nop
 8006fb0:	08007d1c 	.word	0x08007d1c
 8006fb4:	08007d3c 	.word	0x08007d3c
 8006fb8:	08007cfc 	.word	0x08007cfc
 8006fbc:	08007cc6 	.word	0x08007cc6
 8006fc0:	08007cd0 	.word	0x08007cd0
 8006fc4:	00000000 	.word	0x00000000
 8006fc8:	08006d4b 	.word	0x08006d4b
 8006fcc:	08007ccc 	.word	0x08007ccc

08006fd0 <_printf_common>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	4699      	mov	r9, r3
 8006fd8:	688a      	ldr	r2, [r1, #8]
 8006fda:	690b      	ldr	r3, [r1, #16]
 8006fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bfb8      	it	lt
 8006fe4:	4613      	movlt	r3, r2
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fec:	4607      	mov	r7, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_printf_common+0x26>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	0699      	lsls	r1, r3, #26
 8006ffa:	bf42      	ittt	mi
 8006ffc:	6833      	ldrmi	r3, [r6, #0]
 8006ffe:	3302      	addmi	r3, #2
 8007000:	6033      	strmi	r3, [r6, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	f015 0506 	ands.w	r5, r5, #6
 8007008:	d106      	bne.n	8007018 <_printf_common+0x48>
 800700a:	f104 0a19 	add.w	sl, r4, #25
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	6832      	ldr	r2, [r6, #0]
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	42ab      	cmp	r3, r5
 8007016:	dc26      	bgt.n	8007066 <_printf_common+0x96>
 8007018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800701c:	1e13      	subs	r3, r2, #0
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	bf18      	it	ne
 8007022:	2301      	movne	r3, #1
 8007024:	0692      	lsls	r2, r2, #26
 8007026:	d42b      	bmi.n	8007080 <_printf_common+0xb0>
 8007028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	3001      	adds	r0, #1
 8007034:	d01e      	beq.n	8007074 <_printf_common+0xa4>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	68e5      	ldr	r5, [r4, #12]
 800703a:	6832      	ldr	r2, [r6, #0]
 800703c:	f003 0306 	and.w	r3, r3, #6
 8007040:	2b04      	cmp	r3, #4
 8007042:	bf08      	it	eq
 8007044:	1aad      	subeq	r5, r5, r2
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	bf0c      	ite	eq
 800704c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007050:	2500      	movne	r5, #0
 8007052:	4293      	cmp	r3, r2
 8007054:	bfc4      	itt	gt
 8007056:	1a9b      	subgt	r3, r3, r2
 8007058:	18ed      	addgt	r5, r5, r3
 800705a:	2600      	movs	r6, #0
 800705c:	341a      	adds	r4, #26
 800705e:	42b5      	cmp	r5, r6
 8007060:	d11a      	bne.n	8007098 <_printf_common+0xc8>
 8007062:	2000      	movs	r0, #0
 8007064:	e008      	b.n	8007078 <_printf_common+0xa8>
 8007066:	2301      	movs	r3, #1
 8007068:	4652      	mov	r2, sl
 800706a:	4649      	mov	r1, r9
 800706c:	4638      	mov	r0, r7
 800706e:	47c0      	blx	r8
 8007070:	3001      	adds	r0, #1
 8007072:	d103      	bne.n	800707c <_printf_common+0xac>
 8007074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	3501      	adds	r5, #1
 800707e:	e7c6      	b.n	800700e <_printf_common+0x3e>
 8007080:	18e1      	adds	r1, r4, r3
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	2030      	movs	r0, #48	; 0x30
 8007086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708a:	4422      	add	r2, r4
 800708c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007094:	3302      	adds	r3, #2
 8007096:	e7c7      	b.n	8007028 <_printf_common+0x58>
 8007098:	2301      	movs	r3, #1
 800709a:	4622      	mov	r2, r4
 800709c:	4649      	mov	r1, r9
 800709e:	4638      	mov	r0, r7
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d0e6      	beq.n	8007074 <_printf_common+0xa4>
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7d9      	b.n	800705e <_printf_common+0x8e>
	...

080070ac <_printf_i>:
 80070ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	7e0f      	ldrb	r7, [r1, #24]
 80070b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b4:	2f78      	cmp	r7, #120	; 0x78
 80070b6:	4691      	mov	r9, r2
 80070b8:	4680      	mov	r8, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	469a      	mov	sl, r3
 80070be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c2:	d807      	bhi.n	80070d4 <_printf_i+0x28>
 80070c4:	2f62      	cmp	r7, #98	; 0x62
 80070c6:	d80a      	bhi.n	80070de <_printf_i+0x32>
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	f000 80d8 	beq.w	800727e <_printf_i+0x1d2>
 80070ce:	2f58      	cmp	r7, #88	; 0x58
 80070d0:	f000 80a3 	beq.w	800721a <_printf_i+0x16e>
 80070d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070dc:	e03a      	b.n	8007154 <_printf_i+0xa8>
 80070de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e2:	2b15      	cmp	r3, #21
 80070e4:	d8f6      	bhi.n	80070d4 <_printf_i+0x28>
 80070e6:	a101      	add	r1, pc, #4	; (adr r1, 80070ec <_printf_i+0x40>)
 80070e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007159 	.word	0x08007159
 80070f4:	080070d5 	.word	0x080070d5
 80070f8:	080070d5 	.word	0x080070d5
 80070fc:	080070d5 	.word	0x080070d5
 8007100:	080070d5 	.word	0x080070d5
 8007104:	08007159 	.word	0x08007159
 8007108:	080070d5 	.word	0x080070d5
 800710c:	080070d5 	.word	0x080070d5
 8007110:	080070d5 	.word	0x080070d5
 8007114:	080070d5 	.word	0x080070d5
 8007118:	08007265 	.word	0x08007265
 800711c:	08007189 	.word	0x08007189
 8007120:	08007247 	.word	0x08007247
 8007124:	080070d5 	.word	0x080070d5
 8007128:	080070d5 	.word	0x080070d5
 800712c:	08007287 	.word	0x08007287
 8007130:	080070d5 	.word	0x080070d5
 8007134:	08007189 	.word	0x08007189
 8007138:	080070d5 	.word	0x080070d5
 800713c:	080070d5 	.word	0x080070d5
 8007140:	0800724f 	.word	0x0800724f
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	602a      	str	r2, [r5, #0]
 800714c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007154:	2301      	movs	r3, #1
 8007156:	e0a3      	b.n	80072a0 <_printf_i+0x1f4>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	6829      	ldr	r1, [r5, #0]
 800715c:	0606      	lsls	r6, r0, #24
 800715e:	f101 0304 	add.w	r3, r1, #4
 8007162:	d50a      	bpl.n	800717a <_printf_i+0xce>
 8007164:	680e      	ldr	r6, [r1, #0]
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	2e00      	cmp	r6, #0
 800716a:	da03      	bge.n	8007174 <_printf_i+0xc8>
 800716c:	232d      	movs	r3, #45	; 0x2d
 800716e:	4276      	negs	r6, r6
 8007170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007174:	485e      	ldr	r0, [pc, #376]	; (80072f0 <_printf_i+0x244>)
 8007176:	230a      	movs	r3, #10
 8007178:	e019      	b.n	80071ae <_printf_i+0x102>
 800717a:	680e      	ldr	r6, [r1, #0]
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007182:	bf18      	it	ne
 8007184:	b236      	sxthne	r6, r6
 8007186:	e7ef      	b.n	8007168 <_printf_i+0xbc>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	6029      	str	r1, [r5, #0]
 8007190:	0601      	lsls	r1, r0, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xec>
 8007194:	681e      	ldr	r6, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0xf2>
 8007198:	0646      	lsls	r6, r0, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xe8>
 800719c:	881e      	ldrh	r6, [r3, #0]
 800719e:	4854      	ldr	r0, [pc, #336]	; (80072f0 <_printf_i+0x244>)
 80071a0:	2f6f      	cmp	r7, #111	; 0x6f
 80071a2:	bf0c      	ite	eq
 80071a4:	2308      	moveq	r3, #8
 80071a6:	230a      	movne	r3, #10
 80071a8:	2100      	movs	r1, #0
 80071aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ae:	6865      	ldr	r5, [r4, #4]
 80071b0:	60a5      	str	r5, [r4, #8]
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	bfa2      	ittt	ge
 80071b6:	6821      	ldrge	r1, [r4, #0]
 80071b8:	f021 0104 	bicge.w	r1, r1, #4
 80071bc:	6021      	strge	r1, [r4, #0]
 80071be:	b90e      	cbnz	r6, 80071c4 <_printf_i+0x118>
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	d04d      	beq.n	8007260 <_printf_i+0x1b4>
 80071c4:	4615      	mov	r5, r2
 80071c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ca:	fb03 6711 	mls	r7, r3, r1, r6
 80071ce:	5dc7      	ldrb	r7, [r0, r7]
 80071d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d4:	4637      	mov	r7, r6
 80071d6:	42bb      	cmp	r3, r7
 80071d8:	460e      	mov	r6, r1
 80071da:	d9f4      	bls.n	80071c6 <_printf_i+0x11a>
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d10b      	bne.n	80071f8 <_printf_i+0x14c>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07de      	lsls	r6, r3, #31
 80071e4:	d508      	bpl.n	80071f8 <_printf_i+0x14c>
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6861      	ldr	r1, [r4, #4]
 80071ea:	4299      	cmp	r1, r3
 80071ec:	bfde      	ittt	le
 80071ee:	2330      	movle	r3, #48	; 0x30
 80071f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80071f8:	1b52      	subs	r2, r2, r5
 80071fa:	6122      	str	r2, [r4, #16]
 80071fc:	f8cd a000 	str.w	sl, [sp]
 8007200:	464b      	mov	r3, r9
 8007202:	aa03      	add	r2, sp, #12
 8007204:	4621      	mov	r1, r4
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fee2 	bl	8006fd0 <_printf_common>
 800720c:	3001      	adds	r0, #1
 800720e:	d14c      	bne.n	80072aa <_printf_i+0x1fe>
 8007210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007214:	b004      	add	sp, #16
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	4835      	ldr	r0, [pc, #212]	; (80072f0 <_printf_i+0x244>)
 800721c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007220:	6829      	ldr	r1, [r5, #0]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f851 6b04 	ldr.w	r6, [r1], #4
 8007228:	6029      	str	r1, [r5, #0]
 800722a:	061d      	lsls	r5, r3, #24
 800722c:	d514      	bpl.n	8007258 <_printf_i+0x1ac>
 800722e:	07df      	lsls	r7, r3, #31
 8007230:	bf44      	itt	mi
 8007232:	f043 0320 	orrmi.w	r3, r3, #32
 8007236:	6023      	strmi	r3, [r4, #0]
 8007238:	b91e      	cbnz	r6, 8007242 <_printf_i+0x196>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	f023 0320 	bic.w	r3, r3, #32
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	2310      	movs	r3, #16
 8007244:	e7b0      	b.n	80071a8 <_printf_i+0xfc>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f043 0320 	orr.w	r3, r3, #32
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	2378      	movs	r3, #120	; 0x78
 8007250:	4828      	ldr	r0, [pc, #160]	; (80072f4 <_printf_i+0x248>)
 8007252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007256:	e7e3      	b.n	8007220 <_printf_i+0x174>
 8007258:	0659      	lsls	r1, r3, #25
 800725a:	bf48      	it	mi
 800725c:	b2b6      	uxthmi	r6, r6
 800725e:	e7e6      	b.n	800722e <_printf_i+0x182>
 8007260:	4615      	mov	r5, r2
 8007262:	e7bb      	b.n	80071dc <_printf_i+0x130>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	6826      	ldr	r6, [r4, #0]
 8007268:	6961      	ldr	r1, [r4, #20]
 800726a:	1d18      	adds	r0, r3, #4
 800726c:	6028      	str	r0, [r5, #0]
 800726e:	0635      	lsls	r5, r6, #24
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	d501      	bpl.n	8007278 <_printf_i+0x1cc>
 8007274:	6019      	str	r1, [r3, #0]
 8007276:	e002      	b.n	800727e <_printf_i+0x1d2>
 8007278:	0670      	lsls	r0, r6, #25
 800727a:	d5fb      	bpl.n	8007274 <_printf_i+0x1c8>
 800727c:	8019      	strh	r1, [r3, #0]
 800727e:	2300      	movs	r3, #0
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	4615      	mov	r5, r2
 8007284:	e7ba      	b.n	80071fc <_printf_i+0x150>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	1d1a      	adds	r2, r3, #4
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	681d      	ldr	r5, [r3, #0]
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	2100      	movs	r1, #0
 8007292:	4628      	mov	r0, r5
 8007294:	f7f8 ffec 	bl	8000270 <memchr>
 8007298:	b108      	cbz	r0, 800729e <_printf_i+0x1f2>
 800729a:	1b40      	subs	r0, r0, r5
 800729c:	6060      	str	r0, [r4, #4]
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	2300      	movs	r3, #0
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a8:	e7a8      	b.n	80071fc <_printf_i+0x150>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	462a      	mov	r2, r5
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	47d0      	blx	sl
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0ab      	beq.n	8007210 <_printf_i+0x164>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	079b      	lsls	r3, r3, #30
 80072bc:	d413      	bmi.n	80072e6 <_printf_i+0x23a>
 80072be:	68e0      	ldr	r0, [r4, #12]
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	4298      	cmp	r0, r3
 80072c4:	bfb8      	it	lt
 80072c6:	4618      	movlt	r0, r3
 80072c8:	e7a4      	b.n	8007214 <_printf_i+0x168>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4632      	mov	r2, r6
 80072ce:	4649      	mov	r1, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	47d0      	blx	sl
 80072d4:	3001      	adds	r0, #1
 80072d6:	d09b      	beq.n	8007210 <_printf_i+0x164>
 80072d8:	3501      	adds	r5, #1
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	9903      	ldr	r1, [sp, #12]
 80072de:	1a5b      	subs	r3, r3, r1
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dcf2      	bgt.n	80072ca <_printf_i+0x21e>
 80072e4:	e7eb      	b.n	80072be <_printf_i+0x212>
 80072e6:	2500      	movs	r5, #0
 80072e8:	f104 0619 	add.w	r6, r4, #25
 80072ec:	e7f5      	b.n	80072da <_printf_i+0x22e>
 80072ee:	bf00      	nop
 80072f0:	08007cd7 	.word	0x08007cd7
 80072f4:	08007ce8 	.word	0x08007ce8

080072f8 <_sbrk_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d06      	ldr	r5, [pc, #24]	; (8007314 <_sbrk_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4604      	mov	r4, r0
 8007300:	4608      	mov	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f000 fbda 	bl	8007abc <_sbrk>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_sbrk_r+0x1a>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_sbrk_r+0x1a>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	2001450c 	.word	0x2001450c

08007318 <__swbuf_r>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	460e      	mov	r6, r1
 800731c:	4614      	mov	r4, r2
 800731e:	4605      	mov	r5, r0
 8007320:	b118      	cbz	r0, 800732a <__swbuf_r+0x12>
 8007322:	6983      	ldr	r3, [r0, #24]
 8007324:	b90b      	cbnz	r3, 800732a <__swbuf_r+0x12>
 8007326:	f000 f9d9 	bl	80076dc <__sinit>
 800732a:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <__swbuf_r+0x98>)
 800732c:	429c      	cmp	r4, r3
 800732e:	d12b      	bne.n	8007388 <__swbuf_r+0x70>
 8007330:	686c      	ldr	r4, [r5, #4]
 8007332:	69a3      	ldr	r3, [r4, #24]
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	071a      	lsls	r2, r3, #28
 800733a:	d52f      	bpl.n	800739c <__swbuf_r+0x84>
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	b36b      	cbz	r3, 800739c <__swbuf_r+0x84>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	6820      	ldr	r0, [r4, #0]
 8007344:	1ac0      	subs	r0, r0, r3
 8007346:	6963      	ldr	r3, [r4, #20]
 8007348:	b2f6      	uxtb	r6, r6
 800734a:	4283      	cmp	r3, r0
 800734c:	4637      	mov	r7, r6
 800734e:	dc04      	bgt.n	800735a <__swbuf_r+0x42>
 8007350:	4621      	mov	r1, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f92e 	bl	80075b4 <_fflush_r>
 8007358:	bb30      	cbnz	r0, 80073a8 <__swbuf_r+0x90>
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	3b01      	subs	r3, #1
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	701e      	strb	r6, [r3, #0]
 8007368:	6963      	ldr	r3, [r4, #20]
 800736a:	3001      	adds	r0, #1
 800736c:	4283      	cmp	r3, r0
 800736e:	d004      	beq.n	800737a <__swbuf_r+0x62>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	07db      	lsls	r3, r3, #31
 8007374:	d506      	bpl.n	8007384 <__swbuf_r+0x6c>
 8007376:	2e0a      	cmp	r6, #10
 8007378:	d104      	bne.n	8007384 <__swbuf_r+0x6c>
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f919 	bl	80075b4 <_fflush_r>
 8007382:	b988      	cbnz	r0, 80073a8 <__swbuf_r+0x90>
 8007384:	4638      	mov	r0, r7
 8007386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007388:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <__swbuf_r+0x9c>)
 800738a:	429c      	cmp	r4, r3
 800738c:	d101      	bne.n	8007392 <__swbuf_r+0x7a>
 800738e:	68ac      	ldr	r4, [r5, #8]
 8007390:	e7cf      	b.n	8007332 <__swbuf_r+0x1a>
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <__swbuf_r+0xa0>)
 8007394:	429c      	cmp	r4, r3
 8007396:	bf08      	it	eq
 8007398:	68ec      	ldreq	r4, [r5, #12]
 800739a:	e7ca      	b.n	8007332 <__swbuf_r+0x1a>
 800739c:	4621      	mov	r1, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 f80c 	bl	80073bc <__swsetup_r>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d0cb      	beq.n	8007340 <__swbuf_r+0x28>
 80073a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073ac:	e7ea      	b.n	8007384 <__swbuf_r+0x6c>
 80073ae:	bf00      	nop
 80073b0:	08007d1c 	.word	0x08007d1c
 80073b4:	08007d3c 	.word	0x08007d3c
 80073b8:	08007cfc 	.word	0x08007cfc

080073bc <__swsetup_r>:
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <__swsetup_r+0xcc>)
 80073be:	b570      	push	{r4, r5, r6, lr}
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	4606      	mov	r6, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	b125      	cbz	r5, 80073d2 <__swsetup_r+0x16>
 80073c8:	69ab      	ldr	r3, [r5, #24]
 80073ca:	b913      	cbnz	r3, 80073d2 <__swsetup_r+0x16>
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 f985 	bl	80076dc <__sinit>
 80073d2:	4b2e      	ldr	r3, [pc, #184]	; (800748c <__swsetup_r+0xd0>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	d10f      	bne.n	80073f8 <__swsetup_r+0x3c>
 80073d8:	686c      	ldr	r4, [r5, #4]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e0:	0719      	lsls	r1, r3, #28
 80073e2:	d42c      	bmi.n	800743e <__swsetup_r+0x82>
 80073e4:	06dd      	lsls	r5, r3, #27
 80073e6:	d411      	bmi.n	800740c <__swsetup_r+0x50>
 80073e8:	2309      	movs	r3, #9
 80073ea:	6033      	str	r3, [r6, #0]
 80073ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f6:	e03e      	b.n	8007476 <__swsetup_r+0xba>
 80073f8:	4b25      	ldr	r3, [pc, #148]	; (8007490 <__swsetup_r+0xd4>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <__swsetup_r+0x46>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7eb      	b.n	80073da <__swsetup_r+0x1e>
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <__swsetup_r+0xd8>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7e6      	b.n	80073da <__swsetup_r+0x1e>
 800740c:	0758      	lsls	r0, r3, #29
 800740e:	d512      	bpl.n	8007436 <__swsetup_r+0x7a>
 8007410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007412:	b141      	cbz	r1, 8007426 <__swsetup_r+0x6a>
 8007414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007418:	4299      	cmp	r1, r3
 800741a:	d002      	beq.n	8007422 <__swsetup_r+0x66>
 800741c:	4630      	mov	r0, r6
 800741e:	f7ff fb9d 	bl	8006b5c <_free_r>
 8007422:	2300      	movs	r3, #0
 8007424:	6363      	str	r3, [r4, #52]	; 0x34
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	2300      	movs	r3, #0
 8007430:	6063      	str	r3, [r4, #4]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	b94b      	cbnz	r3, 8007456 <__swsetup_r+0x9a>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744c:	d003      	beq.n	8007456 <__swsetup_r+0x9a>
 800744e:	4621      	mov	r1, r4
 8007450:	4630      	mov	r0, r6
 8007452:	f000 fa09 	bl	8007868 <__smakebuf_r>
 8007456:	89a0      	ldrh	r0, [r4, #12]
 8007458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745c:	f010 0301 	ands.w	r3, r0, #1
 8007460:	d00a      	beq.n	8007478 <__swsetup_r+0xbc>
 8007462:	2300      	movs	r3, #0
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	6963      	ldr	r3, [r4, #20]
 8007468:	425b      	negs	r3, r3
 800746a:	61a3      	str	r3, [r4, #24]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	b943      	cbnz	r3, 8007482 <__swsetup_r+0xc6>
 8007470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007474:	d1ba      	bne.n	80073ec <__swsetup_r+0x30>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	0781      	lsls	r1, r0, #30
 800747a:	bf58      	it	pl
 800747c:	6963      	ldrpl	r3, [r4, #20]
 800747e:	60a3      	str	r3, [r4, #8]
 8007480:	e7f4      	b.n	800746c <__swsetup_r+0xb0>
 8007482:	2000      	movs	r0, #0
 8007484:	e7f7      	b.n	8007476 <__swsetup_r+0xba>
 8007486:	bf00      	nop
 8007488:	20000014 	.word	0x20000014
 800748c:	08007d1c 	.word	0x08007d1c
 8007490:	08007d3c 	.word	0x08007d3c
 8007494:	08007cfc 	.word	0x08007cfc

08007498 <abort>:
 8007498:	b508      	push	{r3, lr}
 800749a:	2006      	movs	r0, #6
 800749c:	f000 fa58 	bl	8007950 <raise>
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7f9 fc0d 	bl	8000cc0 <_exit>
	...

080074a8 <__sflush_r>:
 80074a8:	898a      	ldrh	r2, [r1, #12]
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	4605      	mov	r5, r0
 80074b0:	0710      	lsls	r0, r2, #28
 80074b2:	460c      	mov	r4, r1
 80074b4:	d458      	bmi.n	8007568 <__sflush_r+0xc0>
 80074b6:	684b      	ldr	r3, [r1, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc05      	bgt.n	80074c8 <__sflush_r+0x20>
 80074bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc02      	bgt.n	80074c8 <__sflush_r+0x20>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	d0f9      	beq.n	80074c2 <__sflush_r+0x1a>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d4:	682f      	ldr	r7, [r5, #0]
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	d032      	beq.n	8007540 <__sflush_r+0x98>
 80074da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	075a      	lsls	r2, r3, #29
 80074e0:	d505      	bpl.n	80074ee <__sflush_r+0x46>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	1ac0      	subs	r0, r0, r3
 80074e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e8:	b10b      	cbz	r3, 80074ee <__sflush_r+0x46>
 80074ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ec:	1ac0      	subs	r0, r0, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	4602      	mov	r2, r0
 80074f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b0      	blx	r6
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	d106      	bne.n	800750e <__sflush_r+0x66>
 8007500:	6829      	ldr	r1, [r5, #0]
 8007502:	291d      	cmp	r1, #29
 8007504:	d82c      	bhi.n	8007560 <__sflush_r+0xb8>
 8007506:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <__sflush_r+0x108>)
 8007508:	40ca      	lsrs	r2, r1
 800750a:	07d6      	lsls	r6, r2, #31
 800750c:	d528      	bpl.n	8007560 <__sflush_r+0xb8>
 800750e:	2200      	movs	r2, #0
 8007510:	6062      	str	r2, [r4, #4]
 8007512:	04d9      	lsls	r1, r3, #19
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	d504      	bpl.n	8007524 <__sflush_r+0x7c>
 800751a:	1c42      	adds	r2, r0, #1
 800751c:	d101      	bne.n	8007522 <__sflush_r+0x7a>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	b903      	cbnz	r3, 8007524 <__sflush_r+0x7c>
 8007522:	6560      	str	r0, [r4, #84]	; 0x54
 8007524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007526:	602f      	str	r7, [r5, #0]
 8007528:	2900      	cmp	r1, #0
 800752a:	d0ca      	beq.n	80074c2 <__sflush_r+0x1a>
 800752c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007530:	4299      	cmp	r1, r3
 8007532:	d002      	beq.n	800753a <__sflush_r+0x92>
 8007534:	4628      	mov	r0, r5
 8007536:	f7ff fb11 	bl	8006b5c <_free_r>
 800753a:	2000      	movs	r0, #0
 800753c:	6360      	str	r0, [r4, #52]	; 0x34
 800753e:	e7c1      	b.n	80074c4 <__sflush_r+0x1c>
 8007540:	6a21      	ldr	r1, [r4, #32]
 8007542:	2301      	movs	r3, #1
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	1c41      	adds	r1, r0, #1
 800754a:	d1c7      	bne.n	80074dc <__sflush_r+0x34>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0c4      	beq.n	80074dc <__sflush_r+0x34>
 8007552:	2b1d      	cmp	r3, #29
 8007554:	d001      	beq.n	800755a <__sflush_r+0xb2>
 8007556:	2b16      	cmp	r3, #22
 8007558:	d101      	bne.n	800755e <__sflush_r+0xb6>
 800755a:	602f      	str	r7, [r5, #0]
 800755c:	e7b1      	b.n	80074c2 <__sflush_r+0x1a>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	e7ad      	b.n	80074c4 <__sflush_r+0x1c>
 8007568:	690f      	ldr	r7, [r1, #16]
 800756a:	2f00      	cmp	r7, #0
 800756c:	d0a9      	beq.n	80074c2 <__sflush_r+0x1a>
 800756e:	0793      	lsls	r3, r2, #30
 8007570:	680e      	ldr	r6, [r1, #0]
 8007572:	bf08      	it	eq
 8007574:	694b      	ldreq	r3, [r1, #20]
 8007576:	600f      	str	r7, [r1, #0]
 8007578:	bf18      	it	ne
 800757a:	2300      	movne	r3, #0
 800757c:	eba6 0807 	sub.w	r8, r6, r7
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	f1b8 0f00 	cmp.w	r8, #0
 8007586:	dd9c      	ble.n	80074c2 <__sflush_r+0x1a>
 8007588:	6a21      	ldr	r1, [r4, #32]
 800758a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800758c:	4643      	mov	r3, r8
 800758e:	463a      	mov	r2, r7
 8007590:	4628      	mov	r0, r5
 8007592:	47b0      	blx	r6
 8007594:	2800      	cmp	r0, #0
 8007596:	dc06      	bgt.n	80075a6 <__sflush_r+0xfe>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a4:	e78e      	b.n	80074c4 <__sflush_r+0x1c>
 80075a6:	4407      	add	r7, r0
 80075a8:	eba8 0800 	sub.w	r8, r8, r0
 80075ac:	e7e9      	b.n	8007582 <__sflush_r+0xda>
 80075ae:	bf00      	nop
 80075b0:	20400001 	.word	0x20400001

080075b4 <_fflush_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b913      	cbnz	r3, 80075c4 <_fflush_r+0x10>
 80075be:	2500      	movs	r5, #0
 80075c0:	4628      	mov	r0, r5
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	b118      	cbz	r0, 80075ce <_fflush_r+0x1a>
 80075c6:	6983      	ldr	r3, [r0, #24]
 80075c8:	b90b      	cbnz	r3, 80075ce <_fflush_r+0x1a>
 80075ca:	f000 f887 	bl	80076dc <__sinit>
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <_fflush_r+0x6c>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d11b      	bne.n	800760c <_fflush_r+0x58>
 80075d4:	686c      	ldr	r4, [r5, #4]
 80075d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0ef      	beq.n	80075be <_fflush_r+0xa>
 80075de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e0:	07d0      	lsls	r0, r2, #31
 80075e2:	d404      	bmi.n	80075ee <_fflush_r+0x3a>
 80075e4:	0599      	lsls	r1, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_fflush_r+0x3a>
 80075e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ea:	f000 f915 	bl	8007818 <__retarget_lock_acquire_recursive>
 80075ee:	4628      	mov	r0, r5
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7ff ff59 	bl	80074a8 <__sflush_r>
 80075f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f8:	07da      	lsls	r2, r3, #31
 80075fa:	4605      	mov	r5, r0
 80075fc:	d4e0      	bmi.n	80075c0 <_fflush_r+0xc>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	d4dd      	bmi.n	80075c0 <_fflush_r+0xc>
 8007604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007606:	f000 f908 	bl	800781a <__retarget_lock_release_recursive>
 800760a:	e7d9      	b.n	80075c0 <_fflush_r+0xc>
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_fflush_r+0x70>)
 800760e:	429c      	cmp	r4, r3
 8007610:	d101      	bne.n	8007616 <_fflush_r+0x62>
 8007612:	68ac      	ldr	r4, [r5, #8]
 8007614:	e7df      	b.n	80075d6 <_fflush_r+0x22>
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <_fflush_r+0x74>)
 8007618:	429c      	cmp	r4, r3
 800761a:	bf08      	it	eq
 800761c:	68ec      	ldreq	r4, [r5, #12]
 800761e:	e7da      	b.n	80075d6 <_fflush_r+0x22>
 8007620:	08007d1c 	.word	0x08007d1c
 8007624:	08007d3c 	.word	0x08007d3c
 8007628:	08007cfc 	.word	0x08007cfc

0800762c <std>:
 800762c:	2300      	movs	r3, #0
 800762e:	b510      	push	{r4, lr}
 8007630:	4604      	mov	r4, r0
 8007632:	e9c0 3300 	strd	r3, r3, [r0]
 8007636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763a:	6083      	str	r3, [r0, #8]
 800763c:	8181      	strh	r1, [r0, #12]
 800763e:	6643      	str	r3, [r0, #100]	; 0x64
 8007640:	81c2      	strh	r2, [r0, #14]
 8007642:	6183      	str	r3, [r0, #24]
 8007644:	4619      	mov	r1, r3
 8007646:	2208      	movs	r2, #8
 8007648:	305c      	adds	r0, #92	; 0x5c
 800764a:	f7ff fa09 	bl	8006a60 <memset>
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x38>)
 8007650:	6263      	str	r3, [r4, #36]	; 0x24
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x3c>)
 8007654:	62a3      	str	r3, [r4, #40]	; 0x28
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x40>)
 8007658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x44>)
 800765c:	6224      	str	r4, [r4, #32]
 800765e:	6323      	str	r3, [r4, #48]	; 0x30
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	08007989 	.word	0x08007989
 8007668:	080079ab 	.word	0x080079ab
 800766c:	080079e3 	.word	0x080079e3
 8007670:	08007a07 	.word	0x08007a07

08007674 <_cleanup_r>:
 8007674:	4901      	ldr	r1, [pc, #4]	; (800767c <_cleanup_r+0x8>)
 8007676:	f000 b8af 	b.w	80077d8 <_fwalk_reent>
 800767a:	bf00      	nop
 800767c:	080075b5 	.word	0x080075b5

08007680 <__sfmoreglue>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	2268      	movs	r2, #104	; 0x68
 8007684:	1e4d      	subs	r5, r1, #1
 8007686:	4355      	muls	r5, r2
 8007688:	460e      	mov	r6, r1
 800768a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768e:	f7ff fad1 	bl	8006c34 <_malloc_r>
 8007692:	4604      	mov	r4, r0
 8007694:	b140      	cbz	r0, 80076a8 <__sfmoreglue+0x28>
 8007696:	2100      	movs	r1, #0
 8007698:	e9c0 1600 	strd	r1, r6, [r0]
 800769c:	300c      	adds	r0, #12
 800769e:	60a0      	str	r0, [r4, #8]
 80076a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a4:	f7ff f9dc 	bl	8006a60 <memset>
 80076a8:	4620      	mov	r0, r4
 80076aa:	bd70      	pop	{r4, r5, r6, pc}

080076ac <__sfp_lock_acquire>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__sfp_lock_acquire+0x8>)
 80076ae:	f000 b8b3 	b.w	8007818 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	20014509 	.word	0x20014509

080076b8 <__sfp_lock_release>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__sfp_lock_release+0x8>)
 80076ba:	f000 b8ae 	b.w	800781a <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	20014509 	.word	0x20014509

080076c4 <__sinit_lock_acquire>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__sinit_lock_acquire+0x8>)
 80076c6:	f000 b8a7 	b.w	8007818 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	2001450a 	.word	0x2001450a

080076d0 <__sinit_lock_release>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__sinit_lock_release+0x8>)
 80076d2:	f000 b8a2 	b.w	800781a <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	2001450a 	.word	0x2001450a

080076dc <__sinit>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff0 	bl	80076c4 <__sinit_lock_acquire>
 80076e4:	69a3      	ldr	r3, [r4, #24]
 80076e6:	b11b      	cbz	r3, 80076f0 <__sinit+0x14>
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f7ff bff0 	b.w	80076d0 <__sinit_lock_release>
 80076f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f4:	6523      	str	r3, [r4, #80]	; 0x50
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <__sinit+0x68>)
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <__sinit+0x6c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80076fe:	42a3      	cmp	r3, r4
 8007700:	bf04      	itt	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	61a3      	streq	r3, [r4, #24]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f820 	bl	800774c <__sfp>
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f81c 	bl	800774c <__sfp>
 8007714:	60a0      	str	r0, [r4, #8]
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f818 	bl	800774c <__sfp>
 800771c:	2200      	movs	r2, #0
 800771e:	60e0      	str	r0, [r4, #12]
 8007720:	2104      	movs	r1, #4
 8007722:	6860      	ldr	r0, [r4, #4]
 8007724:	f7ff ff82 	bl	800762c <std>
 8007728:	68a0      	ldr	r0, [r4, #8]
 800772a:	2201      	movs	r2, #1
 800772c:	2109      	movs	r1, #9
 800772e:	f7ff ff7d 	bl	800762c <std>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	2202      	movs	r2, #2
 8007736:	2112      	movs	r1, #18
 8007738:	f7ff ff78 	bl	800762c <std>
 800773c:	2301      	movs	r3, #1
 800773e:	61a3      	str	r3, [r4, #24]
 8007740:	e7d2      	b.n	80076e8 <__sinit+0xc>
 8007742:	bf00      	nop
 8007744:	08007c14 	.word	0x08007c14
 8007748:	08007675 	.word	0x08007675

0800774c <__sfp>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	4607      	mov	r7, r0
 8007750:	f7ff ffac 	bl	80076ac <__sfp_lock_acquire>
 8007754:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <__sfp+0x84>)
 8007756:	681e      	ldr	r6, [r3, #0]
 8007758:	69b3      	ldr	r3, [r6, #24]
 800775a:	b913      	cbnz	r3, 8007762 <__sfp+0x16>
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff ffbd 	bl	80076dc <__sinit>
 8007762:	3648      	adds	r6, #72	; 0x48
 8007764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	d503      	bpl.n	8007774 <__sfp+0x28>
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	b30b      	cbz	r3, 80077b4 <__sfp+0x68>
 8007770:	6836      	ldr	r6, [r6, #0]
 8007772:	e7f7      	b.n	8007764 <__sfp+0x18>
 8007774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007778:	b9d5      	cbnz	r5, 80077b0 <__sfp+0x64>
 800777a:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <__sfp+0x88>)
 800777c:	60e3      	str	r3, [r4, #12]
 800777e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007782:	6665      	str	r5, [r4, #100]	; 0x64
 8007784:	f000 f847 	bl	8007816 <__retarget_lock_init_recursive>
 8007788:	f7ff ff96 	bl	80076b8 <__sfp_lock_release>
 800778c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	61a5      	str	r5, [r4, #24]
 8007798:	2208      	movs	r2, #8
 800779a:	4629      	mov	r1, r5
 800779c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a0:	f7ff f95e 	bl	8006a60 <memset>
 80077a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077ac:	4620      	mov	r0, r4
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	3468      	adds	r4, #104	; 0x68
 80077b2:	e7d9      	b.n	8007768 <__sfp+0x1c>
 80077b4:	2104      	movs	r1, #4
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ff62 	bl	8007680 <__sfmoreglue>
 80077bc:	4604      	mov	r4, r0
 80077be:	6030      	str	r0, [r6, #0]
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d1d5      	bne.n	8007770 <__sfp+0x24>
 80077c4:	f7ff ff78 	bl	80076b8 <__sfp_lock_release>
 80077c8:	230c      	movs	r3, #12
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e7ee      	b.n	80077ac <__sfp+0x60>
 80077ce:	bf00      	nop
 80077d0:	08007c14 	.word	0x08007c14
 80077d4:	ffff0001 	.word	0xffff0001

080077d8 <_fwalk_reent>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4606      	mov	r6, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e4:	2700      	movs	r7, #0
 80077e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ea:	f1b9 0901 	subs.w	r9, r9, #1
 80077ee:	d505      	bpl.n	80077fc <_fwalk_reent+0x24>
 80077f0:	6824      	ldr	r4, [r4, #0]
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	d1f7      	bne.n	80077e6 <_fwalk_reent+0xe>
 80077f6:	4638      	mov	r0, r7
 80077f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d907      	bls.n	8007812 <_fwalk_reent+0x3a>
 8007802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007806:	3301      	adds	r3, #1
 8007808:	d003      	beq.n	8007812 <_fwalk_reent+0x3a>
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	47c0      	blx	r8
 8007810:	4307      	orrs	r7, r0
 8007812:	3568      	adds	r5, #104	; 0x68
 8007814:	e7e9      	b.n	80077ea <_fwalk_reent+0x12>

08007816 <__retarget_lock_init_recursive>:
 8007816:	4770      	bx	lr

08007818 <__retarget_lock_acquire_recursive>:
 8007818:	4770      	bx	lr

0800781a <__retarget_lock_release_recursive>:
 800781a:	4770      	bx	lr

0800781c <__swhatbuf_r>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	460e      	mov	r6, r1
 8007820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007824:	2900      	cmp	r1, #0
 8007826:	b096      	sub	sp, #88	; 0x58
 8007828:	4614      	mov	r4, r2
 800782a:	461d      	mov	r5, r3
 800782c:	da08      	bge.n	8007840 <__swhatbuf_r+0x24>
 800782e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	602a      	str	r2, [r5, #0]
 8007836:	061a      	lsls	r2, r3, #24
 8007838:	d410      	bmi.n	800785c <__swhatbuf_r+0x40>
 800783a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800783e:	e00e      	b.n	800785e <__swhatbuf_r+0x42>
 8007840:	466a      	mov	r2, sp
 8007842:	f000 f8f5 	bl	8007a30 <_fstat_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	dbf1      	blt.n	800782e <__swhatbuf_r+0x12>
 800784a:	9a01      	ldr	r2, [sp, #4]
 800784c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007850:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007854:	425a      	negs	r2, r3
 8007856:	415a      	adcs	r2, r3
 8007858:	602a      	str	r2, [r5, #0]
 800785a:	e7ee      	b.n	800783a <__swhatbuf_r+0x1e>
 800785c:	2340      	movs	r3, #64	; 0x40
 800785e:	2000      	movs	r0, #0
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	b016      	add	sp, #88	; 0x58
 8007864:	bd70      	pop	{r4, r5, r6, pc}
	...

08007868 <__smakebuf_r>:
 8007868:	898b      	ldrh	r3, [r1, #12]
 800786a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800786c:	079d      	lsls	r5, r3, #30
 800786e:	4606      	mov	r6, r0
 8007870:	460c      	mov	r4, r1
 8007872:	d507      	bpl.n	8007884 <__smakebuf_r+0x1c>
 8007874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	2301      	movs	r3, #1
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	b002      	add	sp, #8
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	ab01      	add	r3, sp, #4
 8007886:	466a      	mov	r2, sp
 8007888:	f7ff ffc8 	bl	800781c <__swhatbuf_r>
 800788c:	9900      	ldr	r1, [sp, #0]
 800788e:	4605      	mov	r5, r0
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff f9cf 	bl	8006c34 <_malloc_r>
 8007896:	b948      	cbnz	r0, 80078ac <__smakebuf_r+0x44>
 8007898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d4ef      	bmi.n	8007880 <__smakebuf_r+0x18>
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	f043 0302 	orr.w	r3, r3, #2
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	e7e3      	b.n	8007874 <__smakebuf_r+0xc>
 80078ac:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <__smakebuf_r+0x7c>)
 80078ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	6020      	str	r0, [r4, #0]
 80078b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	9b00      	ldr	r3, [sp, #0]
 80078bc:	6163      	str	r3, [r4, #20]
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	6120      	str	r0, [r4, #16]
 80078c2:	b15b      	cbz	r3, 80078dc <__smakebuf_r+0x74>
 80078c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 f8c3 	bl	8007a54 <_isatty_r>
 80078ce:	b128      	cbz	r0, 80078dc <__smakebuf_r+0x74>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	89a0      	ldrh	r0, [r4, #12]
 80078de:	4305      	orrs	r5, r0
 80078e0:	81a5      	strh	r5, [r4, #12]
 80078e2:	e7cd      	b.n	8007880 <__smakebuf_r+0x18>
 80078e4:	08007675 	.word	0x08007675

080078e8 <__malloc_lock>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__malloc_lock+0x8>)
 80078ea:	f7ff bf95 	b.w	8007818 <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20014508 	.word	0x20014508

080078f4 <__malloc_unlock>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__malloc_unlock+0x8>)
 80078f6:	f7ff bf90 	b.w	800781a <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20014508 	.word	0x20014508

08007900 <_raise_r>:
 8007900:	291f      	cmp	r1, #31
 8007902:	b538      	push	{r3, r4, r5, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	d904      	bls.n	8007914 <_raise_r+0x14>
 800790a:	2316      	movs	r3, #22
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007916:	b112      	cbz	r2, 800791e <_raise_r+0x1e>
 8007918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800791c:	b94b      	cbnz	r3, 8007932 <_raise_r+0x32>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f830 	bl	8007984 <_getpid_r>
 8007924:	462a      	mov	r2, r5
 8007926:	4601      	mov	r1, r0
 8007928:	4620      	mov	r0, r4
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	f000 b817 	b.w	8007960 <_kill_r>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d00a      	beq.n	800794c <_raise_r+0x4c>
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	d103      	bne.n	8007942 <_raise_r+0x42>
 800793a:	2316      	movs	r3, #22
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	2001      	movs	r0, #1
 8007940:	e7e7      	b.n	8007912 <_raise_r+0x12>
 8007942:	2400      	movs	r4, #0
 8007944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007948:	4628      	mov	r0, r5
 800794a:	4798      	blx	r3
 800794c:	2000      	movs	r0, #0
 800794e:	e7e0      	b.n	8007912 <_raise_r+0x12>

08007950 <raise>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <raise+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f7ff bfd3 	b.w	8007900 <_raise_r>
 800795a:	bf00      	nop
 800795c:	20000014 	.word	0x20000014

08007960 <_kill_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	; (8007980 <_kill_r+0x20>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	f7f9 f997 	bl	8000ca0 <_kill>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d102      	bne.n	800797c <_kill_r+0x1c>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	b103      	cbz	r3, 800797c <_kill_r+0x1c>
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	2001450c 	.word	0x2001450c

08007984 <_getpid_r>:
 8007984:	f7f9 b984 	b.w	8000c90 <_getpid>

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f882 	bl	8007a98 <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	05db      	lsls	r3, r3, #23
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f000 f856 	bl	8007a74 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f7fe bfe5 	b.w	80069ac <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f843 	bl	8007a74 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b801 	b.w	8007a10 <_close_r>
	...

08007a10 <_close_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	; (8007a2c <_close_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7f9 f977 	bl	8000d0e <_close>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_close_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_close_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	2001450c 	.word	0x2001450c

08007a30 <_fstat_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_fstat_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7f9 f972 	bl	8000d26 <_fstat>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_fstat_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_fstat_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	2001450c 	.word	0x2001450c

08007a54 <_isatty_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	; (8007a70 <_isatty_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7f9 f971 	bl	8000d46 <_isatty>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_isatty_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_isatty_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	2001450c 	.word	0x2001450c

08007a74 <_lseek_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_lseek_r+0x20>)
 8007a78:	4604      	mov	r4, r0
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	602a      	str	r2, [r5, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7f9 f96a 	bl	8000d5c <_lseek>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_lseek_r+0x1e>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_lseek_r+0x1e>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	2001450c 	.word	0x2001450c

08007a98 <_read_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	; (8007ab8 <_read_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7f9 f914 	bl	8000cd4 <_read>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_read_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_read_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	2001450c 	.word	0x2001450c

08007abc <_sbrk>:
 8007abc:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <_sbrk+0x14>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	b909      	cbnz	r1, 8007ac8 <_sbrk+0xc>
 8007ac4:	4903      	ldr	r1, [pc, #12]	; (8007ad4 <_sbrk+0x18>)
 8007ac6:	6011      	str	r1, [r2, #0]
 8007ac8:	6810      	ldr	r0, [r2, #0]
 8007aca:	4403      	add	r3, r0
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4770      	bx	lr
 8007ad0:	20014510 	.word	0x20014510
 8007ad4:	20014518 	.word	0x20014518

08007ad8 <_init>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_fini>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr
