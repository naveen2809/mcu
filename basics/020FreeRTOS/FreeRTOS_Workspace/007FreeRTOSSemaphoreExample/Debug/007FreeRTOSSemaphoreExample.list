
007FreeRTOSSemaphoreExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c88  08006c88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014498  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014289  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e0f  00000000  00000000  000342cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  000370e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  000383d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c3b  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f48  00000000  00000000  0005a193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72eb  00000000  00000000  0006f0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001463c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f58  00000000  00000000  00146418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b34 	.word	0x08006b34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006b34 	.word	0x08006b34

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e7c 	.word	0x20012e7c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f103 0208 	add.w	r2, r3, #8
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000580:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f103 0208 	add.w	r2, r3, #8
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0208 	add.w	r2, r3, #8
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10a      	bne.n	80006fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f6:	bf00      	nop
 80006f8:	e7fe      	b.n	80006f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80006fa:	f002 fb7b 	bl	8002df4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072a:	3b01      	subs	r3, #1
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d114      	bne.n	800077a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01a      	beq.n	800078e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f001 faab 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <xQueueGenericReset+0xcc>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	e009      	b.n	800078e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3310      	adds	r3, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fef2 	bl	8000568 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3324      	adds	r3, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff feed 	bl	8000568 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800078e:	f002 fb61 	bl	8002e54 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	e000ed04 	.word	0xe000ed04

080007a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80007b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b8:	f383 8811 	msr	BASEPRI, r3
 80007bc:	f3bf 8f6f 	isb	sy
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	61bb      	str	r3, [r7, #24]
    }
 80007c6:	bf00      	nop
 80007c8:	e7fe      	b.n	80007c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	fb02 f303 	mul.w	r3, r2, r3
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <xQueueGenericCreate+0x48>
 80007da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d101      	bne.n	80007ec <xQueueGenericCreate+0x4c>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <xQueueGenericCreate+0x4e>
 80007ec:	2300      	movs	r3, #0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <xQueueGenericCreate+0x68>
        __asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	617b      	str	r3, [r7, #20]
    }
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800080e:	d90a      	bls.n	8000826 <xQueueGenericCreate+0x86>
        __asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	613b      	str	r3, [r7, #16]
    }
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	3350      	adds	r3, #80	; 0x50
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fc0e 	bl	800304c <pvPortMalloc>
 8000830:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00d      	beq.n	8000854 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3350      	adds	r3, #80	; 0x50
 8000840:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4613      	mov	r3, r2
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f805 	bl	800085e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000854:	6a3b      	ldr	r3, [r7, #32]
    }
 8000856:	4618      	mov	r0, r3
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e002      	b.n	8000880 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800088c:	2101      	movs	r1, #1
 800088e:	69b8      	ldr	r0, [r7, #24]
 8000890:	f7ff ff1e 	bl	80006d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	78fa      	ldrb	r2, [r7, #3]
 8000898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	2073      	movs	r0, #115	; 0x73
 80008a4:	f003 fc08 	bl	80040b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	; 0x40
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10a      	bne.n	80008e2 <xQueueGenericSend+0x32>
        __asm volatile
 80008cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d0:	f383 8811 	msr	BASEPRI, r3
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	f3bf 8f4f 	dsb	sy
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008de:	bf00      	nop
 80008e0:	e7fe      	b.n	80008e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d103      	bne.n	80008f0 <xQueueGenericSend+0x40>
 80008e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <xQueueGenericSend+0x44>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <xQueueGenericSend+0x46>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10a      	bne.n	8000910 <xQueueGenericSend+0x60>
        __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d103      	bne.n	800091e <xQueueGenericSend+0x6e>
 8000916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <xQueueGenericSend+0x72>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <xQueueGenericSend+0x74>
 8000922:	2300      	movs	r3, #0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <xQueueGenericSend+0x8e>
        __asm volatile
 8000928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092c:	f383 8811 	msr	BASEPRI, r3
 8000930:	f3bf 8f6f 	isb	sy
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	623b      	str	r3, [r7, #32]
    }
 800093a:	bf00      	nop
 800093c:	e7fe      	b.n	800093c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800093e:	f001 fb5b 	bl	8001ff8 <xTaskGetSchedulerState>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <xQueueGenericSend+0x9e>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <xQueueGenericSend+0xa2>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <xQueueGenericSend+0xa4>
 8000952:	2300      	movs	r3, #0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <xQueueGenericSend+0xbe>
        __asm volatile
 8000958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095c:	f383 8811 	msr	BASEPRI, r3
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	f3bf 8f4f 	dsb	sy
 8000968:	61fb      	str	r3, [r7, #28]
    }
 800096a:	bf00      	nop
 800096c:	e7fe      	b.n	800096c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800096e:	f002 fa41 	bl	8002df4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097a:	429a      	cmp	r2, r3
 800097c:	d302      	bcc.n	8000984 <xQueueGenericSend+0xd4>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d136      	bne.n	80009f2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	4618      	mov	r0, r3
 8000988:	f004 f922 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	460b      	mov	r3, r1
 8000996:	4601      	mov	r1, r0
 8000998:	205a      	movs	r0, #90	; 0x5a
 800099a:	f003 fc03 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009a4:	f000 fbcc 	bl	8001140 <prvCopyDataToQueue>
 80009a8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d010      	beq.n	80009d4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	3324      	adds	r3, #36	; 0x24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f97e 	bl	8001cb8 <xTaskRemoveFromEventList>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d013      	beq.n	80009ea <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009c2:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <xQueueGenericSend+0x248>)
 80009c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	e00a      	b.n	80009ea <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <xQueueGenericSend+0x248>)
 80009dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009ea:	f002 fa33 	bl	8002e54 <vPortExitCritical>
                return pdPASS;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e07d      	b.n	8000aee <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d110      	bne.n	8000a1a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009f8:	f002 fa2c 	bl	8002e54 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f8e6 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4601      	mov	r1, r0
 8000a10:	205a      	movs	r0, #90	; 0x5a
 8000a12:	f003 fbc7 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e069      	b.n	8000aee <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f9ad 	bl	8001d84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2e:	f002 fa11 	bl	8002e54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a32:	f000 fef9 	bl	8001828 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a36:	f002 f9dd 	bl	8002df4 <vPortEnterCritical>
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a46:	d103      	bne.n	8000a50 <xQueueGenericSend+0x1a0>
 8000a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a5c:	d103      	bne.n	8000a66 <xQueueGenericSend+0x1b6>
 8000a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a66:	f002 f9f5 	bl	8002e54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a6a:	1d3a      	adds	r2, r7, #4
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f99c 	bl	8001db0 <xTaskCheckForTimeOut>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d124      	bne.n	8000ac8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a80:	f000 fc56 	bl	8001330 <prvIsQueueFull>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d018      	beq.n	8000abc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f8be 	bl	8001c14 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f000 fbe1 	bl	8001260 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a9e:	f000 fed1 	bl	8001844 <xTaskResumeAll>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f47f af62 	bne.w	800096e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <xQueueGenericSend+0x248>)
 8000aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	f3bf 8f6f 	isb	sy
 8000aba:	e758      	b.n	800096e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000abe:	f000 fbcf 	bl	8001260 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ac2:	f000 febf 	bl	8001844 <xTaskResumeAll>
 8000ac6:	e752      	b.n	800096e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aca:	f000 fbc9 	bl	8001260 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ace:	f000 feb9 	bl	8001844 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f87b 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	205a      	movs	r0, #90	; 0x5a
 8000ae8:	f003 fb5c 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000aec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000ed04 	.word	0xe000ed04

08000afc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b090      	sub	sp, #64	; 0x40
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b26:	bf00      	nop
 8000b28:	e7fe      	b.n	8000b28 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x3c>
 8000b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x40>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x42>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10a      	bne.n	8000b58 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b46:	f383 8811 	msr	BASEPRI, r3
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b54:	bf00      	nop
 8000b56:	e7fe      	b.n	8000b56 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d103      	bne.n	8000b66 <xQueueGenericSendFromISR+0x6a>
 8000b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <xQueueGenericSendFromISR+0x6e>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e000      	b.n	8000b6c <xQueueGenericSendFromISR+0x70>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10a      	bne.n	8000b86 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b74:	f383 8811 	msr	BASEPRI, r3
 8000b78:	f3bf 8f6f 	isb	sy
 8000b7c:	f3bf 8f4f 	dsb	sy
 8000b80:	623b      	str	r3, [r7, #32]
    }
 8000b82:	bf00      	nop
 8000b84:	e7fe      	b.n	8000b84 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b86:	f002 fa21 	bl	8002fcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	61fa      	str	r2, [r7, #28]
 8000ba0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d302      	bcc.n	8000bb8 <xQueueGenericSendFromISR+0xbc>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d148      	bne.n	8000c4a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f800 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2060      	movs	r0, #96	; 0x60
 8000bd8:	f003 fa14 	bl	8004004 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000be2:	f000 faad 	bl	8001140 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bee:	d112      	bne.n	8000c16 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d025      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bfa:	3324      	adds	r3, #36	; 0x24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 f85b 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01d      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01a      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e016      	b.n	8000c44 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	d10a      	bne.n	8000c34 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c22:	f383 8811 	msr	BASEPRI, r3
 8000c26:	f3bf 8f6f 	isb	sy
 8000c2a:	f3bf 8f4f 	dsb	sy
 8000c2e:	617b      	str	r3, [r7, #20]
    }
 8000c30:	bf00      	nop
 8000c32:	e7fe      	b.n	8000c32 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c44:	2301      	movs	r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c48:	e00b      	b.n	8000c62 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 ffbf 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000c52:	4601      	mov	r1, r0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	461a      	mov	r2, r3
 8000c58:	2060      	movs	r0, #96	; 0x60
 8000c5a:	f003 f9d3 	bl	8004004 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c64:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c6c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3740      	adds	r7, #64	; 0x40
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b08f      	sub	sp, #60	; 0x3c
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10a      	bne.n	8000ca8 <xQueueReceive+0x30>
        __asm volatile
 8000c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c96:	f383 8811 	msr	BASEPRI, r3
 8000c9a:	f3bf 8f6f 	isb	sy
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	623b      	str	r3, [r7, #32]
    }
 8000ca4:	bf00      	nop
 8000ca6:	e7fe      	b.n	8000ca6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <xQueueReceive+0x3e>
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <xQueueReceive+0x42>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <xQueueReceive+0x44>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10a      	bne.n	8000cd6 <xQueueReceive+0x5e>
        __asm volatile
 8000cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	61fb      	str	r3, [r7, #28]
    }
 8000cd2:	bf00      	nop
 8000cd4:	e7fe      	b.n	8000cd4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cd6:	f001 f98f 	bl	8001ff8 <xTaskGetSchedulerState>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <xQueueReceive+0x6e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <xQueueReceive+0x72>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <xQueueReceive+0x74>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10a      	bne.n	8000d06 <xQueueReceive+0x8e>
        __asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	61bb      	str	r3, [r7, #24]
    }
 8000d02:	bf00      	nop
 8000d04:	e7fe      	b.n	8000d04 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d06:	f002 f875 	bl	8002df4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d02f      	beq.n	8000d76 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d1a:	f000 fa7b 	bl	8001214 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 ff55 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000d26:	4604      	mov	r4, r0
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f003 ff51 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2101      	movs	r1, #1
 8000d34:	9100      	str	r1, [sp, #0]
 8000d36:	4621      	mov	r1, r4
 8000d38:	205c      	movs	r0, #92	; 0x5c
 8000d3a:	f003 fa33 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00f      	beq.n	8000d6e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	3310      	adds	r3, #16
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 ffb0 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <xQueueReceive+0x21c>)
 8000d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d6e:	f002 f871 	bl	8002e54 <vPortExitCritical>
                return pdPASS;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e08a      	b.n	8000e8c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d113      	bne.n	8000da4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d7c:	f002 f86a 	bl	8002e54 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 ff24 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000d88:	4604      	mov	r4, r0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f003 ff20 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000d90:	4602      	mov	r2, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2101      	movs	r1, #1
 8000d96:	9100      	str	r1, [sp, #0]
 8000d98:	4621      	mov	r1, r4
 8000d9a:	205c      	movs	r0, #92	; 0x5c
 8000d9c:	f003 fa02 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e073      	b.n	8000e8c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d106      	bne.n	8000db8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 ffe8 	bl	8001d84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000db8:	f002 f84c 	bl	8002e54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dbc:	f000 fd34 	bl	8001828 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dc0:	f002 f818 	bl	8002df4 <vPortEnterCritical>
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd0:	d103      	bne.n	8000dda <xQueueReceive+0x162>
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de6:	d103      	bne.n	8000df0 <xQueueReceive+0x178>
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000df0:	f002 f830 	bl	8002e54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000df4:	1d3a      	adds	r2, r7, #4
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ffd7 	bl	8001db0 <xTaskCheckForTimeOut>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d124      	bne.n	8000e52 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e0a:	f000 fa7b 	bl	8001304 <prvIsQueueEmpty>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d018      	beq.n	8000e46 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	3324      	adds	r3, #36	; 0x24
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fef9 	bl	8001c14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f000 fa1c 	bl	8001260 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e28:	f000 fd0c 	bl	8001844 <xTaskResumeAll>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f af69 	bne.w	8000d06 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <xQueueReceive+0x21c>)
 8000e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	e75f      	b.n	8000d06 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e48:	f000 fa0a 	bl	8001260 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e4c:	f000 fcfa 	bl	8001844 <xTaskResumeAll>
 8000e50:	e759      	b.n	8000d06 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e54:	f000 fa04 	bl	8001260 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e58:	f000 fcf4 	bl	8001844 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5e:	f000 fa51 	bl	8001304 <prvIsQueueEmpty>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f43f af4e 	beq.w	8000d06 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 feaf 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000e72:	4604      	mov	r4, r0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f003 feab 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	9100      	str	r1, [sp, #0]
 8000e82:	4621      	mov	r1, r4
 8000e84:	205c      	movs	r0, #92	; 0x5c
 8000e86:	f003 f98d 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e8a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3734      	adds	r7, #52	; 0x34
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	e000ed04 	.word	0xe000ed04

08000e98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b091      	sub	sp, #68	; 0x44
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10a      	bne.n	8000eca <xQueueSemaphoreTake+0x32>
        __asm volatile
 8000eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	623b      	str	r3, [r7, #32]
    }
 8000ec6:	bf00      	nop
 8000ec8:	e7fe      	b.n	8000ec8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8000ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed6:	f383 8811 	msr	BASEPRI, r3
 8000eda:	f3bf 8f6f 	isb	sy
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	61fb      	str	r3, [r7, #28]
    }
 8000ee4:	bf00      	nop
 8000ee6:	e7fe      	b.n	8000ee6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ee8:	f001 f886 	bl	8001ff8 <xTaskGetSchedulerState>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <xQueueSemaphoreTake+0x60>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <xQueueSemaphoreTake+0x64>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <xQueueSemaphoreTake+0x66>
 8000efc:	2300      	movs	r3, #0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10a      	bne.n	8000f18 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8000f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f06:	f383 8811 	msr	BASEPRI, r3
 8000f0a:	f3bf 8f6f 	isb	sy
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	61bb      	str	r3, [r7, #24]
    }
 8000f14:	bf00      	nop
 8000f16:	e7fe      	b.n	8000f16 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f18:	f001 ff6c 	bl	8002df4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d034      	beq.n	8000f92 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fe50 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000f30:	4604      	mov	r4, r0
 8000f32:	2000      	movs	r0, #0
 8000f34:	f003 fe4c 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	9100      	str	r1, [sp, #0]
 8000f40:	4621      	mov	r1, r4
 8000f42:	205c      	movs	r0, #92	; 0x5c
 8000f44:	f003 f92e 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f58:	f001 f9fe 	bl	8002358 <pvTaskIncrementMutexHeldCount>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00f      	beq.n	8000f8a <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fea2 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f7a:	4b64      	ldr	r3, [pc, #400]	; (800110c <xQueueSemaphoreTake+0x274>)
 8000f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f3bf 8f4f 	dsb	sy
 8000f86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f8a:	f001 ff63 	bl	8002e54 <vPortExitCritical>
                return pdPASS;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e0b7      	b.n	8001102 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d121      	bne.n	8000fdc <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00a      	beq.n	8000fb4 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8000f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa2:	f383 8811 	msr	BASEPRI, r3
 8000fa6:	f3bf 8f6f 	isb	sy
 8000faa:	f3bf 8f4f 	dsb	sy
 8000fae:	617b      	str	r3, [r7, #20]
    }
 8000fb0:	bf00      	nop
 8000fb2:	e7fe      	b.n	8000fb2 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000fb4:	f001 ff4e 	bl	8002e54 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fe08 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f003 fe04 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	9100      	str	r1, [sp, #0]
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	205c      	movs	r0, #92	; 0x5c
 8000fd4:	f003 f8e6 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e092      	b.n	8001102 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fecc 	bl	8001d84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ff0:	f001 ff30 	bl	8002e54 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ff4:	f000 fc18 	bl	8001828 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ff8:	f001 fefc 	bl	8002df4 <vPortEnterCritical>
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001002:	b25b      	sxtb	r3, r3
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001008:	d103      	bne.n	8001012 <xQueueSemaphoreTake+0x17a>
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101e:	d103      	bne.n	8001028 <xQueueSemaphoreTake+0x190>
 8001020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001028:	f001 ff14 	bl	8002e54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800102c:	463a      	mov	r2, r7
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f000 febb 	bl	8001db0 <xTaskCheckForTimeOut>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d132      	bne.n	80010a6 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001042:	f000 f95f 	bl	8001304 <prvIsQueueEmpty>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d026      	beq.n	800109a <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8001054:	f001 fece 	bl	8002df4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 ffe9 	bl	8002034 <xTaskPriorityInherit>
 8001062:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8001064:	f001 fef6 	bl	8002e54 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	3324      	adds	r3, #36	; 0x24
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fdcf 	bl	8001c14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001078:	f000 f8f2 	bl	8001260 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800107c:	f000 fbe2 	bl	8001844 <xTaskResumeAll>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	f47f af48 	bne.w	8000f18 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <xQueueSemaphoreTake+0x274>)
 800108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	e73e      	b.n	8000f18 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800109a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800109c:	f000 f8e0 	bl	8001260 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80010a0:	f000 fbd0 	bl	8001844 <xTaskResumeAll>
 80010a4:	e738      	b.n	8000f18 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80010a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010a8:	f000 f8da 	bl	8001260 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80010ac:	f000 fbca 	bl	8001844 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b2:	f000 f927 	bl	8001304 <prvIsQueueEmpty>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f43f af2d 	beq.w	8000f18 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00d      	beq.n	80010e0 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80010c4:	f001 fe96 	bl	8002df4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80010c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010ca:	f000 f821 	bl	8001110 <prvGetDisinheritPriorityAfterTimeout>
 80010ce:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f8a6 	bl	8002228 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80010dc:	f001 feba 	bl	8002e54 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fd74 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 80010e8:	4604      	mov	r4, r0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f003 fd70 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 80010f0:	4602      	mov	r2, r0
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	9100      	str	r1, [sp, #0]
 80010f8:	4621      	mov	r1, r4
 80010fa:	205c      	movs	r0, #92	; 0x5c
 80010fc:	f003 f852 	bl	80041a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001100:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001102:	4618      	mov	r0, r3
 8001104:	373c      	adds	r7, #60	; 0x3c
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	bf00      	nop
 800110c:	e000ed04 	.word	0xe000ed04

08001110 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f1c3 0305 	rsb	r3, r3, #5
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e001      	b.n	8001132 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001132:	68fb      	ldr	r3, [r7, #12]
    }
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001154:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d14d      	bne.n	8001202 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 ffdc 	bl	8002128 <xTaskPriorityDisinherit>
 8001170:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e043      	b.n	8001202 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d119      	bne.n	80011b4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6858      	ldr	r0, [r3, #4]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	461a      	mov	r2, r3
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	f005 fcbc 	bl	8006b08 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	441a      	add	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d32b      	bcc.n	8001202 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	e026      	b.n	8001202 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68d8      	ldr	r0, [r3, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	461a      	mov	r2, r3
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	f005 fca2 	bl	8006b08 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	425b      	negs	r3, r3
 80011ce:	441a      	add	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	425b      	negs	r3, r3
 80011ea:	441a      	add	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d105      	bne.n	8001202 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	3b01      	subs	r3, #1
 8001200:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800120a:	697b      	ldr	r3, [r7, #20]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	2b00      	cmp	r3, #0
 8001224:	d018      	beq.n	8001258 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	441a      	add	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d303      	bcc.n	8001248 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	461a      	mov	r2, r3
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f005 fc58 	bl	8006b08 <memcpy>
    }
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001268:	f001 fdc4 	bl	8002df4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001272:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001274:	e011      	b.n	800129a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2b00      	cmp	r3, #0
 800127c:	d012      	beq.n	80012a4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3324      	adds	r3, #36	; 0x24
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd18 	bl	8001cb8 <xTaskRemoveFromEventList>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800128e:	f000 fdf5 	bl	8001e7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3b01      	subs	r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dce9      	bgt.n	8001276 <prvUnlockQueue+0x16>
 80012a2:	e000      	b.n	80012a6 <prvUnlockQueue+0x46>
                        break;
 80012a4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80012ae:	f001 fdd1 	bl	8002e54 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80012b2:	f001 fd9f 	bl	8002df4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012bc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80012be:	e011      	b.n	80012e4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d012      	beq.n	80012ee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3310      	adds	r3, #16
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fcf3 	bl	8001cb8 <xTaskRemoveFromEventList>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80012d8:	f000 fdd0 	bl	8001e7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	3b01      	subs	r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80012e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dce9      	bgt.n	80012c0 <prvUnlockQueue+0x60>
 80012ec:	e000      	b.n	80012f0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80012ee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80012f8:	f001 fdac 	bl	8002e54 <vPortExitCritical>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800130c:	f001 fd72 	bl	8002df4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e001      	b.n	8001322 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001322:	f001 fd97 	bl	8002e54 <vPortExitCritical>

    return xReturn;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001338:	f001 fd5c 	bl	8002df4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	429a      	cmp	r2, r3
 8001346:	d102      	bne.n	800134e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001348:	2301      	movs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e001      	b.n	8001352 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001352:	f001 fd7f 	bl	8002e54 <vPortExitCritical>

    return xReturn;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e01e      	b.n	80013ae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <vQueueAddToRegistry+0x60>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d115      	bne.n	80013a8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800137c:	4910      	ldr	r1, [pc, #64]	; (80013c0 <vQueueAddToRegistry+0x60>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <vQueueAddToRegistry+0x60>)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fc1b 	bl	8004bd0 <SEGGER_SYSVIEW_ShrinkId>
 800139a:	4601      	mov	r1, r0
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	2071      	movs	r0, #113	; 0x71
 80013a2:	f002 fe2f 	bl	8004004 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80013a6:	e006      	b.n	80013b6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	d9dd      	bls.n	8001370 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000030 	.word	0x20000030

080013c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80013d4:	f001 fd0e 	bl	8002df4 <vPortEnterCritical>
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e4:	d103      	bne.n	80013ee <vQueueWaitForMessageRestricted+0x2a>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013fa:	d103      	bne.n	8001404 <vQueueWaitForMessageRestricted+0x40>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001404:	f001 fd26 	bl	8002e54 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	2b00      	cmp	r3, #0
 800140e:	d106      	bne.n	800141e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3324      	adds	r3, #36	; 0x24
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fc1f 	bl	8001c5c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff1e 	bl	8001260 <prvUnlockQueue>
    }
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af04      	add	r7, sp, #16
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fe03 	bl	800304c <pvPortMalloc>
 8001446:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800144e:	2058      	movs	r0, #88	; 0x58
 8001450:	f001 fdfc 	bl	800304c <pvPortMalloc>
 8001454:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
 8001462:	e005      	b.n	8001470 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f001 fed1 	bl	800320c <vPortFree>
 800146a:	e001      	b.n	8001470 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d013      	beq.n	800149e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	2300      	movs	r3, #0
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f80e 	bl	80014ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001492:	69f8      	ldr	r0, [r7, #28]
 8001494:	f000 f8a2 	bl	80015dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	e002      	b.n	80014a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80014a4:	69bb      	ldr	r3, [r7, #24]
    }
 80014a6:	4618      	mov	r0, r3
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b088      	sub	sp, #32
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	461a      	mov	r2, r3
 80014c6:	21a5      	movs	r1, #165	; 0xa5
 80014c8:	f005 fb2c 	bl	8006b24 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80014cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d6:	3b01      	subs	r3, #1
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	f023 0307 	bic.w	r3, r3, #7
 80014e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <prvInitialiseNewTask+0x58>
        __asm volatile
 80014f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f4:	f383 8811 	msr	BASEPRI, r3
 80014f8:	f3bf 8f6f 	isb	sy
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	617b      	str	r3, [r7, #20]
    }
 8001502:	bf00      	nop
 8001504:	e7fe      	b.n	8001504 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01f      	beq.n	800154c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	e012      	b.n	8001538 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	3334      	adds	r3, #52	; 0x34
 8001522:	460a      	mov	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b09      	cmp	r3, #9
 800153c:	d9e9      	bls.n	8001512 <prvInitialiseNewTask+0x64>
 800153e:	e000      	b.n	8001542 <prvInitialiseNewTask+0x94>
            {
                break;
 8001540:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800154a:	e003      	b.n	8001554 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	2b04      	cmp	r3, #4
 8001558:	d901      	bls.n	800155e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800155a:	2304      	movs	r3, #4
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001568:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156c:	2200      	movs	r2, #0
 800156e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001572:	3304      	adds	r3, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f817 	bl	80005a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157c:	3318      	adds	r3, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f812 	bl	80005a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001588:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	f1c3 0205 	rsb	r2, r3, #5
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159c:	3350      	adds	r3, #80	; 0x50
 800159e:	2204      	movs	r2, #4
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fabe 	bl	8006b24 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	3354      	adds	r3, #84	; 0x54
 80015ac:	2201      	movs	r2, #1
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fab7 	bl	8006b24 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f001 fa6a 	bl	8002a94 <pxPortInitialiseStack>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80015e4:	f001 fc06 	bl	8002df4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <prvAddNewTaskToReadyList+0xfc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a3a      	ldr	r2, [pc, #232]	; (80016d8 <prvAddNewTaskToReadyList+0xfc>)
 80015f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <prvAddNewTaskToReadyList+0x100>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80015fa:	4a38      	ldr	r2, [pc, #224]	; (80016dc <prvAddNewTaskToReadyList+0x100>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <prvAddNewTaskToReadyList+0xfc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d110      	bne.n	800162a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001608:	f000 fc5c 	bl	8001ec4 <prvInitialiseTaskLists>
 800160c:	e00d      	b.n	800162a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <prvAddNewTaskToReadyList+0x104>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <prvAddNewTaskToReadyList+0x100>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	429a      	cmp	r2, r3
 8001622:	d802      	bhi.n	800162a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001624:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <prvAddNewTaskToReadyList+0x100>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <prvAddNewTaskToReadyList+0x108>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <prvAddNewTaskToReadyList+0x108>)
 8001632:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <prvAddNewTaskToReadyList+0x108>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <prvAddNewTaskToReadyList+0x94>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 f99d 	bl	8004984 <SEGGER_SYSVIEW_OnTaskCreate>
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	461d      	mov	r5, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	461c      	mov	r4, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	1ae3      	subs	r3, r4, r3
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	462b      	mov	r3, r5
 800166c:	f001 ff9c 	bl	80035a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fa0a 	bl	8004a8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <prvAddNewTaskToReadyList+0x10c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <prvAddNewTaskToReadyList+0x10c>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <prvAddNewTaskToReadyList+0x110>)
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7fe ff8e 	bl	80005c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80016a6:	f001 fbd5 	bl	8002e54 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <prvAddNewTaskToReadyList+0x104>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <prvAddNewTaskToReadyList+0x100>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <prvAddNewTaskToReadyList+0x114>)
 80016c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	20000148 	.word	0x20000148
 80016dc:	20000070 	.word	0x20000070
 80016e0:	20000154 	.word	0x20000154
 80016e4:	20000164 	.word	0x20000164
 80016e8:	20000150 	.word	0x20000150
 80016ec:	20000074 	.word	0x20000074
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01b      	beq.n	800173e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <vTaskDelay+0x68>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <vTaskDelay+0x30>
        __asm volatile
 800170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	60bb      	str	r3, [r7, #8]
    }
 8001720:	bf00      	nop
 8001722:	e7fe      	b.n	8001722 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001724:	f000 f880 	bl	8001828 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	2023      	movs	r0, #35	; 0x23
 800172c:	f002 fc2e 	bl	8003f8c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fe24 	bl	8002380 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001738:	f000 f884 	bl	8001844 <xTaskResumeAll>
 800173c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d107      	bne.n	8001754 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <vTaskDelay+0x6c>)
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000170 	.word	0x20000170
 8001760:	e000ed04 	.word	0xe000ed04

08001764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <vTaskStartScheduler+0xa4>)
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2282      	movs	r2, #130	; 0x82
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <vTaskStartScheduler+0xa8>)
 8001778:	4825      	ldr	r0, [pc, #148]	; (8001810 <vTaskStartScheduler+0xac>)
 800177a:	f7ff fe57 	bl	800142c <xTaskCreate>
 800177e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001786:	f000 fe73 	bl	8002470 <xTimerCreateTimerTask>
 800178a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d124      	bne.n	80017dc <vTaskStartScheduler+0x78>
        __asm volatile
 8001792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	60bb      	str	r3, [r7, #8]
    }
 80017a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <vTaskStartScheduler+0xb0>)
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <vTaskStartScheduler+0xb4>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <vTaskStartScheduler+0xb8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <vTaskStartScheduler+0xbc>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <vTaskStartScheduler+0xa4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d102      	bne.n	80017cc <vTaskStartScheduler+0x68>
 80017c6:	f003 f8c1 	bl	800494c <SEGGER_SYSVIEW_OnIdle>
 80017ca:	e004      	b.n	80017d6 <vTaskStartScheduler+0x72>
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <vTaskStartScheduler+0xbc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f919 	bl	8004a08 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80017d6:	f001 f9ed 	bl	8002bb4 <xPortStartScheduler>
 80017da:	e00e      	b.n	80017fa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e2:	d10a      	bne.n	80017fa <vTaskStartScheduler+0x96>
        __asm volatile
 80017e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e8:	f383 8811 	msr	BASEPRI, r3
 80017ec:	f3bf 8f6f 	isb	sy
 80017f0:	f3bf 8f4f 	dsb	sy
 80017f4:	607b      	str	r3, [r7, #4]
    }
 80017f6:	bf00      	nop
 80017f8:	e7fe      	b.n	80017f8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <vTaskStartScheduler+0xc0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000016c 	.word	0x2000016c
 800180c:	08006b4c 	.word	0x08006b4c
 8001810:	08001e95 	.word	0x08001e95
 8001814:	20000168 	.word	0x20000168
 8001818:	20000154 	.word	0x20000154
 800181c:	2000014c 	.word	0x2000014c
 8001820:	20000070 	.word	0x20000070
 8001824:	20000000 	.word	0x20000000

08001828 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <vTaskSuspendAll+0x18>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a03      	ldr	r2, [pc, #12]	; (8001840 <vTaskSuspendAll+0x18>)
 8001834:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000170 	.word	0x20000170

08001844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <xTaskResumeAll+0x11c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <xTaskResumeAll+0x2c>
        __asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	603b      	str	r3, [r7, #0]
    }
 800186c:	bf00      	nop
 800186e:	e7fe      	b.n	800186e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001870:	f001 fac0 	bl	8002df4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <xTaskResumeAll+0x11c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3b01      	subs	r3, #1
 800187a:	4a39      	ldr	r2, [pc, #228]	; (8001960 <xTaskResumeAll+0x11c>)
 800187c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <xTaskResumeAll+0x11c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d165      	bne.n	8001952 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <xTaskResumeAll+0x120>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d061      	beq.n	8001952 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800188e:	e032      	b.n	80018f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <xTaskResumeAll+0x124>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3318      	adds	r3, #24
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe feed 	bl	800067c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fee8 	bl	800067c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f8ec 	bl	8004a8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2201      	movs	r2, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <xTaskResumeAll+0x128>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a2a      	ldr	r2, [pc, #168]	; (800196c <xTaskResumeAll+0x128>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <xTaskResumeAll+0x12c>)
 80018d4:	441a      	add	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f7fe fe70 	bl	80005c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <xTaskResumeAll+0x130>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d302      	bcc.n	80018f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <xTaskResumeAll+0x134>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <xTaskResumeAll+0x124>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1c8      	bne.n	8001890 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001904:	f000 fb5c 	bl	8001fc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <xTaskResumeAll+0x138>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001914:	f000 f858 	bl	80019c8 <xTaskIncrementTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <xTaskResumeAll+0x134>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f1      	bne.n	8001914 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <xTaskResumeAll+0x138>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <xTaskResumeAll+0x134>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800193e:	2301      	movs	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <xTaskResumeAll+0x13c>)
 8001944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001952:	f001 fa7f 	bl	8002e54 <vPortExitCritical>

    return xAlreadyYielded;
 8001956:	68bb      	ldr	r3, [r7, #8]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000170 	.word	0x20000170
 8001964:	20000148 	.word	0x20000148
 8001968:	20000108 	.word	0x20000108
 800196c:	20000150 	.word	0x20000150
 8001970:	20000074 	.word	0x20000074
 8001974:	20000070 	.word	0x20000070
 8001978:	2000015c 	.word	0x2000015c
 800197c:	20000158 	.word	0x20000158
 8001980:	e000ed04 	.word	0xe000ed04

08001984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <xTaskGetTickCount+0x1c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	2000014c 	.word	0x2000014c

080019a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019aa:	f001 fb0f 	bl	8002fcc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <xTaskGetTickCountFromISR+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80019b8:	683b      	ldr	r3, [r7, #0]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000014c 	.word	0x2000014c

080019c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <xTaskIncrementTick+0x14c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 8092 	bne.w	8001b00 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019dc:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <xTaskIncrementTick+0x150>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80019e4:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <xTaskIncrementTick+0x150>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d120      	bne.n	8001a32 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <xTaskIncrementTick+0x154>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <xTaskIncrementTick+0x48>
        __asm volatile
 80019fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fe:	f383 8811 	msr	BASEPRI, r3
 8001a02:	f3bf 8f6f 	isb	sy
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	603b      	str	r3, [r7, #0]
    }
 8001a0c:	bf00      	nop
 8001a0e:	e7fe      	b.n	8001a0e <xTaskIncrementTick+0x46>
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <xTaskIncrementTick+0x154>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <xTaskIncrementTick+0x158>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <xTaskIncrementTick+0x154>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4a40      	ldr	r2, [pc, #256]	; (8001b20 <xTaskIncrementTick+0x158>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <xTaskIncrementTick+0x15c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <xTaskIncrementTick+0x15c>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	f000 fac7 	bl	8001fc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <xTaskIncrementTick+0x160>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d34c      	bcc.n	8001ad6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <xTaskIncrementTick+0x154>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <xTaskIncrementTick+0x160>)
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a4c:	601a      	str	r2, [r3, #0]
                    break;
 8001a4e:	e042      	b.n	8001ad6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <xTaskIncrementTick+0x154>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d203      	bcs.n	8001a70 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001a68:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <xTaskIncrementTick+0x160>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a6e:	e032      	b.n	8001ad6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fe01 	bl	800067c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3318      	adds	r3, #24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fdf8 	bl	800067c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fffc 	bl	8004a8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <xTaskIncrementTick+0x164>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <xTaskIncrementTick+0x164>)
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <xTaskIncrementTick+0x168>)
 8001ab4:	441a      	add	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7fe fd80 	bl	80005c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <xTaskIncrementTick+0x16c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3b5      	bcc.n	8001a3c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad4:	e7b2      	b.n	8001a3c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <xTaskIncrementTick+0x16c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	4914      	ldr	r1, [pc, #80]	; (8001b30 <xTaskIncrementTick+0x168>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d901      	bls.n	8001af2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <xTaskIncrementTick+0x170>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e004      	b.n	8001b0a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <xTaskIncrementTick+0x174>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <xTaskIncrementTick+0x174>)
 8001b08:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001b0a:	697b      	ldr	r3, [r7, #20]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000170 	.word	0x20000170
 8001b18:	2000014c 	.word	0x2000014c
 8001b1c:	20000100 	.word	0x20000100
 8001b20:	20000104 	.word	0x20000104
 8001b24:	20000160 	.word	0x20000160
 8001b28:	20000168 	.word	0x20000168
 8001b2c:	20000150 	.word	0x20000150
 8001b30:	20000074 	.word	0x20000074
 8001b34:	20000070 	.word	0x20000070
 8001b38:	2000015c 	.word	0x2000015c
 8001b3c:	20000158 	.word	0x20000158

08001b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <vTaskSwitchContext+0xbc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <vTaskSwitchContext+0xc0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001b54:	e04d      	b.n	8001bf2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <vTaskSwitchContext+0xc0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <vTaskSwitchContext+0xc4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	f1c3 031f 	rsb	r3, r3, #31
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	4925      	ldr	r1, [pc, #148]	; (8001c08 <vTaskSwitchContext+0xc8>)
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	f3bf 8f4f 	dsb	sy
 8001b96:	607b      	str	r3, [r7, #4]
    }
 8001b98:	bf00      	nop
 8001b9a:	e7fe      	b.n	8001b9a <vTaskSwitchContext+0x5a>
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <vTaskSwitchContext+0xc8>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d104      	bne.n	8001bcc <vTaskSwitchContext+0x8c>
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <vTaskSwitchContext+0xcc>)
 8001bd4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <vTaskSwitchContext+0xcc>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <vTaskSwitchContext+0xd0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d102      	bne.n	8001be8 <vTaskSwitchContext+0xa8>
 8001be2:	f002 feb3 	bl	800494c <SEGGER_SYSVIEW_OnIdle>
}
 8001be6:	e004      	b.n	8001bf2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <vTaskSwitchContext+0xcc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 ff0b 	bl	8004a08 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000170 	.word	0x20000170
 8001c00:	2000015c 	.word	0x2000015c
 8001c04:	20000150 	.word	0x20000150
 8001c08:	20000074 	.word	0x20000074
 8001c0c:	20000070 	.word	0x20000070
 8001c10:	2000016c 	.word	0x2000016c

08001c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	60fb      	str	r3, [r7, #12]
    }
 8001c36:	bf00      	nop
 8001c38:	e7fe      	b.n	8001c38 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <vTaskPlaceOnEventList+0x44>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3318      	adds	r3, #24
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fce1 	bl	800060a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c48:	2101      	movs	r1, #1
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f000 fb98 	bl	8002380 <prvAddCurrentTaskToDelayedList>
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000070 	.word	0x20000070

08001c5c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	617b      	str	r3, [r7, #20]
    }
 8001c80:	bf00      	nop
 8001c82:	e7fe      	b.n	8001c82 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <vTaskPlaceOnEventListRestricted+0x58>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7fe fc98 	bl	80005c2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001c9e:	2024      	movs	r0, #36	; 0x24
 8001ca0:	f002 f956 	bl	8003f50 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f000 fb6a 	bl	8002380 <prvAddCurrentTaskToDelayedList>
    }
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000070 	.word	0x20000070

08001cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	60fb      	str	r3, [r7, #12]
    }
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fcc7 	bl	800067c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <xTaskRemoveFromEventList+0xb4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d120      	bne.n	8001d38 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fcbe 	bl	800067c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fec2 	bl	8004a8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <xTaskRemoveFromEventList+0xb8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <xTaskRemoveFromEventList+0xb8>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <xTaskRemoveFromEventList+0xbc>)
 8001d28:	441a      	add	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4610      	mov	r0, r2
 8001d32:	f7fe fc46 	bl	80005c2 <vListInsertEnd>
 8001d36:	e005      	b.n	8001d44 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <xTaskRemoveFromEventList+0xc0>)
 8001d40:	f7fe fc3f 	bl	80005c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <xTaskRemoveFromEventList+0xc4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d905      	bls.n	8001d5e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <xTaskRemoveFromEventList+0xc8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e001      	b.n	8001d62 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001d62:	697b      	ldr	r3, [r7, #20]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000170 	.word	0x20000170
 8001d70:	20000150 	.word	0x20000150
 8001d74:	20000074 	.word	0x20000074
 8001d78:	20000108 	.word	0x20000108
 8001d7c:	20000070 	.word	0x20000070
 8001d80:	2000015c 	.word	0x2000015c

08001d84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <vTaskInternalSetTimeOutState+0x24>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <vTaskInternalSetTimeOutState+0x28>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000160 	.word	0x20000160
 8001dac:	2000014c 	.word	0x2000014c

08001db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc4:	f383 8811 	msr	BASEPRI, r3
 8001dc8:	f3bf 8f6f 	isb	sy
 8001dcc:	f3bf 8f4f 	dsb	sy
 8001dd0:	613b      	str	r3, [r7, #16]
    }
 8001dd2:	bf00      	nop
 8001dd4:	e7fe      	b.n	8001dd4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	60fb      	str	r3, [r7, #12]
    }
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001df2:	f000 ffff 	bl	8002df4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <xTaskCheckForTimeOut+0xc4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0e:	d102      	bne.n	8001e16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e026      	b.n	8001e64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <xTaskCheckForTimeOut+0xc8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d00a      	beq.n	8001e38 <xTaskCheckForTimeOut+0x88>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d305      	bcc.n	8001e38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e015      	b.n	8001e64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20b      	bcs.n	8001e5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff98 	bl	8001d84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e004      	b.n	8001e64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001e64:	f000 fff6 	bl	8002e54 <vPortExitCritical>

    return xReturn;
 8001e68:	69fb      	ldr	r3, [r7, #28]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000014c 	.word	0x2000014c
 8001e78:	20000160 	.word	0x20000160

08001e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <vTaskMissedYield+0x14>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	2000015c 	.word	0x2000015c

08001e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e9c:	f000 f852 	bl	8001f44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <prvIdleTask+0x28>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d9f9      	bls.n	8001e9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <prvIdleTask+0x2c>)
 8001eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001eb8:	e7f0      	b.n	8001e9c <prvIdleTask+0x8>
 8001eba:	bf00      	nop
 8001ebc:	20000074 	.word	0x20000074
 8001ec0:	e000ed04 	.word	0xe000ed04

08001ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	e00c      	b.n	8001eea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <prvInitialiseTaskLists+0x60>)
 8001edc:	4413      	add	r3, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb42 	bl	8000568 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d9ef      	bls.n	8001ed0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <prvInitialiseTaskLists+0x64>)
 8001ef2:	f7fe fb39 	bl	8000568 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <prvInitialiseTaskLists+0x68>)
 8001ef8:	f7fe fb36 	bl	8000568 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <prvInitialiseTaskLists+0x6c>)
 8001efe:	f7fe fb33 	bl	8000568 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <prvInitialiseTaskLists+0x70>)
 8001f04:	f7fe fb30 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001f08:	480b      	ldr	r0, [pc, #44]	; (8001f38 <prvInitialiseTaskLists+0x74>)
 8001f0a:	f7fe fb2d 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <prvInitialiseTaskLists+0x78>)
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <prvInitialiseTaskLists+0x64>)
 8001f12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <prvInitialiseTaskLists+0x7c>)
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <prvInitialiseTaskLists+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000074 	.word	0x20000074
 8001f28:	200000d8 	.word	0x200000d8
 8001f2c:	200000ec 	.word	0x200000ec
 8001f30:	20000108 	.word	0x20000108
 8001f34:	2000011c 	.word	0x2000011c
 8001f38:	20000134 	.word	0x20000134
 8001f3c:	20000100 	.word	0x20000100
 8001f40:	20000104 	.word	0x20000104

08001f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f4a:	e019      	b.n	8001f80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001f4c:	f000 ff52 	bl	8002df4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <prvCheckTasksWaitingTermination+0x50>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fb8d 	bl	800067c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <prvCheckTasksWaitingTermination+0x54>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <prvCheckTasksWaitingTermination+0x54>)
 8001f6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <prvCheckTasksWaitingTermination+0x58>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <prvCheckTasksWaitingTermination+0x58>)
 8001f74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001f76:	f000 ff6d 	bl	8002e54 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f810 	bl	8001fa0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <prvCheckTasksWaitingTermination+0x58>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e1      	bne.n	8001f4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000011c 	.word	0x2000011c
 8001f98:	20000148 	.word	0x20000148
 8001f9c:	20000130 	.word	0x20000130

08001fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 f92d 	bl	800320c <vPortFree>
                vPortFree( pxTCB );
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f001 f92a 	bl	800320c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <prvResetNextTaskUnblockTime+0x30>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <prvResetNextTaskUnblockTime+0x34>)
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001fd6:	e005      	b.n	8001fe4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <prvResetNextTaskUnblockTime+0x30>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <prvResetNextTaskUnblockTime+0x34>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000100 	.word	0x20000100
 8001ff4:	20000168 	.word	0x20000168

08001ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <xTaskGetSchedulerState+0x34>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002006:	2301      	movs	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	e008      	b.n	800201e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <xTaskGetSchedulerState+0x38>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002014:	2302      	movs	r3, #2
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e001      	b.n	800201e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800201e:	687b      	ldr	r3, [r7, #4]
    }
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	20000154 	.word	0x20000154
 8002030:	20000170 	.word	0x20000170

08002034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d063      	beq.n	8002112 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <xTaskPriorityInherit+0xe8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	429a      	cmp	r2, r3
 8002056:	d253      	bcs.n	8002100 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db06      	blt.n	800206e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <xTaskPriorityInherit+0xe8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	f1c3 0205 	rsb	r2, r3, #5
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6959      	ldr	r1, [r3, #20]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <xTaskPriorityInherit+0xec>)
 8002080:	4413      	add	r3, r2
 8002082:	4299      	cmp	r1, r3
 8002084:	d12f      	bne.n	80020e6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3304      	adds	r3, #4
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe faf6 	bl	800067c <uxListRemove>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	2201      	movs	r2, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <xTaskPriorityInherit+0xf0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4013      	ands	r3, r2
 80020a8:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <xTaskPriorityInherit+0xf0>)
 80020aa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <xTaskPriorityInherit+0xe8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <xTaskPriorityInherit+0xf0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <xTaskPriorityInherit+0xf0>)
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <xTaskPriorityInherit+0xec>)
 80020d6:	441a      	add	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7fe fa6f 	bl	80005c2 <vListInsertEnd>
 80020e4:	e004      	b.n	80020f0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <xTaskPriorityInherit+0xe8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4619      	mov	r1, r3
 80020f4:	2049      	movs	r0, #73	; 0x49
 80020f6:	f001 ff49 	bl	8003f8c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e008      	b.n	8002112 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <xTaskPriorityInherit+0xe8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	429a      	cmp	r2, r3
 800210c:	d201      	bcs.n	8002112 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800210e:	2301      	movs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002112:	68fb      	ldr	r3, [r7, #12]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000070 	.word	0x20000070
 8002120:	20000074 	.word	0x20000074
 8002124:	20000150 	.word	0x20000150

08002128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d068      	beq.n	8002210 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <xTaskPriorityDisinherit+0xf4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d00a      	beq.n	800215e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	60fb      	str	r3, [r7, #12]
    }
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	60bb      	str	r3, [r7, #8]
    }
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	429a      	cmp	r2, r3
 8002190:	d03e      	beq.n	8002210 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13a      	bne.n	8002210 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3304      	adds	r3, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fa6c 	bl	800067c <uxListRemove>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4619      	mov	r1, r3
 80021c4:	204a      	movs	r0, #74	; 0x4a
 80021c6:	f001 fee1 	bl	8003f8c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1c3 0205 	rsb	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4a09      	ldr	r2, [pc, #36]	; (8002224 <xTaskPriorityDisinherit+0xfc>)
 80021fe:	441a      	add	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7fe f9db 	bl	80005c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002210:	697b      	ldr	r3, [r7, #20]
    }
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000070 	.word	0x20000070
 8002220:	20000150 	.word	0x20000150
 8002224:	20000074 	.word	0x20000074

08002228 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8081 	beq.w	8002344 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	60fb      	str	r3, [r7, #12]
    }
 800225c:	bf00      	nop
 800225e:	e7fe      	b.n	800225e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d902      	bls.n	8002270 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e002      	b.n	8002276 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	429a      	cmp	r2, r3
 800227e:	d061      	beq.n	8002344 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	429a      	cmp	r2, r3
 8002288:	d15c      	bne.n	8002344 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d10a      	bne.n	80022aa <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60bb      	str	r3, [r7, #8]
    }
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4619      	mov	r1, r3
 80022ae:	204a      	movs	r0, #74	; 0x4a
 80022b0:	f001 fe6c 	bl	8003f8c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db04      	blt.n	80022d2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0205 	rsb	r2, r3, #5
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80022e2:	4413      	add	r3, r2
 80022e4:	4299      	cmp	r1, r3
 80022e6:	d12d      	bne.n	8002344 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f9c5 	bl	800067c <uxListRemove>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4013      	ands	r3, r2
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800230c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fbbb 	bl	8004a8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	2201      	movs	r2, #1
 800231c:	409a      	lsls	r2, r3
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002336:	441a      	add	r2, r3
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f7fe f93f 	bl	80005c2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000070 	.word	0x20000070
 8002350:	20000074 	.word	0x20000074
 8002354:	20000150 	.word	0x20000150

08002358 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <pvTaskIncrementMutexHeldCount+0x24>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <pvTaskIncrementMutexHeldCount+0x24>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800236a:	3201      	adds	r2, #1
 800236c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800236e:	4b03      	ldr	r3, [pc, #12]	; (800237c <pvTaskIncrementMutexHeldCount+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
    }
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000070 	.word	0x20000070

08002380 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <prvAddCurrentTaskToDelayedList+0xd4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f970 	bl	800067c <uxListRemove>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <prvAddCurrentTaskToDelayedList+0xdc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4013      	ands	r3, r2
 80023b6:	4a29      	ldr	r2, [pc, #164]	; (800245c <prvAddCurrentTaskToDelayedList+0xdc>)
 80023b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c0:	d110      	bne.n	80023e4 <prvAddCurrentTaskToDelayedList+0x64>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	211b      	movs	r1, #27
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fb9e 	bl	8004b10 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4820      	ldr	r0, [pc, #128]	; (8002460 <prvAddCurrentTaskToDelayedList+0xe0>)
 80023de:	f7fe f8f0 	bl	80005c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023e2:	e032      	b.n	800244a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d20f      	bcs.n	800241c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2104      	movs	r1, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fb84 	bl	8004b10 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <prvAddCurrentTaskToDelayedList+0xe4>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7fe f8f8 	bl	800060a <vListInsert>
}
 800241a:	e016      	b.n	800244a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2104      	movs	r1, #4
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fb74 	bl	8004b10 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <prvAddCurrentTaskToDelayedList+0xe8>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <prvAddCurrentTaskToDelayedList+0xd8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3304      	adds	r3, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7fe f8e8 	bl	800060a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <prvAddCurrentTaskToDelayedList+0xec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d202      	bcs.n	800244a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <prvAddCurrentTaskToDelayedList+0xec>)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6013      	str	r3, [r2, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000014c 	.word	0x2000014c
 8002458:	20000070 	.word	0x20000070
 800245c:	20000150 	.word	0x20000150
 8002460:	20000134 	.word	0x20000134
 8002464:	20000104 	.word	0x20000104
 8002468:	20000100 	.word	0x20000100
 800246c:	20000168 	.word	0x20000168

08002470 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800247a:	f000 fad5 	bl	8002a28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <xTimerCreateTimerTask+0x54>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <xTimerCreateTimerTask+0x58>)
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2303      	movs	r3, #3
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002494:	490d      	ldr	r1, [pc, #52]	; (80024cc <xTimerCreateTimerTask+0x5c>)
 8002496:	480e      	ldr	r0, [pc, #56]	; (80024d0 <xTimerCreateTimerTask+0x60>)
 8002498:	f7fe ffc8 	bl	800142c <xTaskCreate>
 800249c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	603b      	str	r3, [r7, #0]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80024ba:	687b      	ldr	r3, [r7, #4]
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200001a4 	.word	0x200001a4
 80024c8:	200001a8 	.word	0x200001a8
 80024cc:	08006b54 	.word	0x08006b54
 80024d0:	08002609 	.word	0x08002609

080024d4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <xTimerGenericCommand+0x2e>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	623b      	str	r3, [r7, #32]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <xTimerGenericCommand+0x98>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02a      	beq.n	8002560 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	dc18      	bgt.n	800254e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800251c:	f7ff fd6c 	bl	8001ff8 <xTaskGetSchedulerState>
 8002520:	4603      	mov	r3, r0
 8002522:	2b02      	cmp	r3, #2
 8002524:	d109      	bne.n	800253a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <xTimerGenericCommand+0x98>)
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	f107 0114 	add.w	r1, r7, #20
 800252e:	2300      	movs	r3, #0
 8002530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002532:	f7fe f9bd 	bl	80008b0 <xQueueGenericSend>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24
 8002538:	e012      	b.n	8002560 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <xTimerGenericCommand+0x98>)
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	f107 0114 	add.w	r1, r7, #20
 8002542:	2300      	movs	r3, #0
 8002544:	2200      	movs	r2, #0
 8002546:	f7fe f9b3 	bl	80008b0 <xQueueGenericSend>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24
 800254c:	e008      	b.n	8002560 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <xTimerGenericCommand+0x98>)
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f107 0114 	add.w	r1, r7, #20
 8002556:	2300      	movs	r3, #0
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	f7fe facf 	bl	8000afc <xQueueGenericSendFromISR>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002562:	4618      	mov	r0, r3
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001a4 	.word	0x200001a4

08002570 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <prvProcessExpiredTimer+0x94>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3304      	adds	r3, #4
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe f877 	bl	800067c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d022      	beq.n	80025e2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	18d1      	adds	r1, r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f000 f8d1 	bl	8002750 <prvInsertTimerInActiveList>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01f      	beq.n	80025f4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	2100      	movs	r1, #0
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff88 	bl	80024d4 <xTimerGenericCommand>
 80025c4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d113      	bne.n	80025f4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	60fb      	str	r3, [r7, #12]
    }
 80025de:	bf00      	nop
 80025e0:	e7fe      	b.n	80025e0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	4798      	blx	r3
    }
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000019c 	.word	0x2000019c

08002608 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f857 	bl	80026c8 <prvGetNextExpireTime>
 800261a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f803 	bl	800262c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002626:	f000 f8d5 	bl	80027d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800262a:	e7f1      	b.n	8002610 <prvTimerTask+0x8>

0800262c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002636:	f7ff f8f7 	bl	8001828 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f866 	bl	8002710 <prvSampleTimeNow>
 8002644:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d130      	bne.n	80026ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <prvProcessTimerOrBlockTask+0x3c>
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	429a      	cmp	r2, r3
 8002658:	d806      	bhi.n	8002668 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800265a:	f7ff f8f3 	bl	8001844 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff85 	bl	8002570 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002666:	e024      	b.n	80026b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <prvProcessTimerOrBlockTask+0x90>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <prvProcessTimerOrBlockTask+0x50>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <prvProcessTimerOrBlockTask+0x52>
 800267c:	2300      	movs	r3, #0
 800267e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <prvProcessTimerOrBlockTask+0x94>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fe99 	bl	80013c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002692:	f7ff f8d7 	bl	8001844 <xTaskResumeAll>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <prvProcessTimerOrBlockTask+0x98>)
 800269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
    }
 80026ac:	e001      	b.n	80026b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80026ae:	f7ff f8c9 	bl	8001844 <xTaskResumeAll>
    }
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200001a0 	.word	0x200001a0
 80026c0:	200001a4 	.word	0x200001a4
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <prvGetNextExpireTime+0x44>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <prvGetNextExpireTime+0x16>
 80026da:	2201      	movs	r2, #1
 80026dc:	e000      	b.n	80026e0 <prvGetNextExpireTime+0x18>
 80026de:	2200      	movs	r2, #0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <prvGetNextExpireTime+0x44>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e001      	b.n	80026fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80026fc:	68fb      	ldr	r3, [r7, #12]
    }
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2000019c 	.word	0x2000019c

08002710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002718:	f7ff f934 	bl	8001984 <xTaskGetTickCount>
 800271c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <prvSampleTimeNow+0x3c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	d205      	bcs.n	8002734 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002728:	f000 f91a 	bl	8002960 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e002      	b.n	800273a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <prvSampleTimeNow+0x3c>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002740:	68fb      	ldr	r3, [r7, #12]
    }
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200001ac 	.word	0x200001ac

08002750 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	d812      	bhi.n	800279c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002784:	2301      	movs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e01b      	b.n	80027c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <prvInsertTimerInActiveList+0x7c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3304      	adds	r3, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f7fd ff38 	bl	800060a <vListInsert>
 800279a:	e012      	b.n	80027c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d206      	bcs.n	80027b2 <prvInsertTimerInActiveList+0x62>
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e007      	b.n	80027c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <prvInsertTimerInActiveList+0x80>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7fd ff24 	bl	800060a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80027c2:	697b      	ldr	r3, [r7, #20]
    }
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200001a0 	.word	0x200001a0
 80027d0:	2000019c 	.word	0x2000019c

080027d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027da:	e0ae      	b.n	800293a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f2c0 80aa 	blt.w	8002938 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	3304      	adds	r3, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd ff41 	bl	800067c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff87 	bl	8002710 <prvSampleTimeNow>
 8002802:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b09      	cmp	r3, #9
 8002808:	f200 8097 	bhi.w	800293a <prvProcessReceivedCommands+0x166>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <prvProcessReceivedCommands+0x40>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	0800283d 	.word	0x0800283d
 8002818:	0800283d 	.word	0x0800283d
 800281c:	0800283d 	.word	0x0800283d
 8002820:	080028b1 	.word	0x080028b1
 8002824:	080028c5 	.word	0x080028c5
 8002828:	0800290f 	.word	0x0800290f
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800283d 	.word	0x0800283d
 8002834:	080028b1 	.word	0x080028b1
 8002838:	080028c5 	.word	0x080028c5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	18d1      	adds	r1, r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285c:	f7ff ff78 	bl	8002750 <prvInsertTimerInActiveList>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d069      	beq.n	800293a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05e      	beq.n	800293a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	441a      	add	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	2100      	movs	r1, #0
 800288c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800288e:	f7ff fe21 	bl	80024d4 <xTimerGenericCommand>
 8002892:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14f      	bne.n	800293a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	61bb      	str	r3, [r7, #24]
    }
 80028ac:	bf00      	nop
 80028ae:	e7fe      	b.n	80028ae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80028c2:	e03a      	b.n	800293a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <prvProcessReceivedCommands+0x126>
        __asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	617b      	str	r3, [r7, #20]
    }
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	18d1      	adds	r1, r2, r3
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002908:	f7ff ff22 	bl	8002750 <prvInsertTimerInActiveList>
                        break;
 800290c:	e015      	b.n	800293a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800291c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800291e:	f000 fc75 	bl	800320c <vPortFree>
 8002922:	e00a      	b.n	800293a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002936:	e000      	b.n	800293a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002938:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <prvProcessReceivedCommands+0x188>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f107 0108 	add.w	r1, r7, #8
 8002942:	2200      	movs	r2, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f997 	bl	8000c78 <xQueueReceive>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af45 	bne.w	80027dc <prvProcessReceivedCommands+0x8>
        }
    }
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200001a4 	.word	0x200001a4

08002960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002966:	e048      	b.n	80029fa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3304      	adds	r3, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fe7b 	bl	800067c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02e      	beq.n	80029fa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d90e      	bls.n	80029cc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f7fd fe20 	bl	800060a <vListInsert>
 80029ca:	e016      	b.n	80029fa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029cc:	2300      	movs	r3, #0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	2100      	movs	r1, #0
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fd7c 	bl	80024d4 <xTimerGenericCommand>
 80029dc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <prvSwitchTimerLists+0x9a>
        __asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	603b      	str	r3, [r7, #0]
    }
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1b1      	bne.n	8002968 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <prvSwitchTimerLists+0xc4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <prvSwitchTimerLists+0xc0>)
 8002a10:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <prvSwitchTimerLists+0xc4>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	6013      	str	r3, [r2, #0]
    }
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000019c 	.word	0x2000019c
 8002a24:	200001a0 	.word	0x200001a0

08002a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002a2c:	f000 f9e2 	bl	8002df4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <prvCheckForValidListAndQueue+0x54>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002a38:	4811      	ldr	r0, [pc, #68]	; (8002a80 <prvCheckForValidListAndQueue+0x58>)
 8002a3a:	f7fd fd95 	bl	8000568 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002a3e:	4811      	ldr	r0, [pc, #68]	; (8002a84 <prvCheckForValidListAndQueue+0x5c>)
 8002a40:	f7fd fd92 	bl	8000568 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <prvCheckForValidListAndQueue+0x60>)
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <prvCheckForValidListAndQueue+0x58>)
 8002a48:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <prvCheckForValidListAndQueue+0x64>)
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <prvCheckForValidListAndQueue+0x5c>)
 8002a4e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a50:	2200      	movs	r2, #0
 8002a52:	210c      	movs	r1, #12
 8002a54:	200a      	movs	r0, #10
 8002a56:	f7fd fea3 	bl	80007a0 <xQueueGenericCreate>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <prvCheckForValidListAndQueue+0x54>)
 8002a5e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <prvCheckForValidListAndQueue+0x54>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <prvCheckForValidListAndQueue+0x54>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4908      	ldr	r1, [pc, #32]	; (8002a90 <prvCheckForValidListAndQueue+0x68>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fc76 	bl	8001360 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a74:	f000 f9ee 	bl	8002e54 <vPortExitCritical>
    }
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200001a4 	.word	0x200001a4
 8002a80:	20000174 	.word	0x20000174
 8002a84:	20000188 	.word	0x20000188
 8002a88:	2000019c 	.word	0x2000019c
 8002a8c:	200001a0 	.word	0x200001a0
 8002a90:	08006b5c 	.word	0x08006b5c

08002a94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3b04      	subs	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 0201 	bic.w	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <pxPortInitialiseStack+0x64>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3b14      	subs	r3, #20
 8002ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b20      	subs	r3, #32
 8002ae8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	08002afd 	.word	0x08002afd

08002afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <prvTaskExitError+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0e:	d00a      	beq.n	8002b26 <prvTaskExitError+0x2a>
        __asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	60fb      	str	r3, [r7, #12]
    }
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <prvTaskExitError+0x28>
        __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	60bb      	str	r3, [r7, #8]
    }
 8002b38:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b3a:	bf00      	nop
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0fc      	beq.n	8002b3c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000004 	.word	0x20000004
	...

08002b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <pxCurrentTCBConst2>)
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	6808      	ldr	r0, [r1, #0]
 8002b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	f380 8809 	msr	PSP, r0
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f380 8811 	msr	BASEPRI, r0
 8002b7a:	4770      	bx	lr
 8002b7c:	f3af 8000 	nop.w

08002b80 <pxCurrentTCBConst2>:
 8002b80:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop

08002b88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b88:	4808      	ldr	r0, [pc, #32]	; (8002bac <prvPortStartFirstTask+0x24>)
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	6800      	ldr	r0, [r0, #0]
 8002b8e:	f380 8808 	msr	MSP, r0
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f380 8814 	msr	CONTROL, r0
 8002b9a:	b662      	cpsie	i
 8002b9c:	b661      	cpsie	f
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	df00      	svc	0
 8002ba8:	bf00      	nop
 8002baa:	0000      	.short	0x0000
 8002bac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop

08002bb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bba:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <xPortStartScheduler+0x120>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a46      	ldr	r2, [pc, #280]	; (8002cd8 <xPortStartScheduler+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10a      	bne.n	8002bda <xPortStartScheduler+0x26>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	613b      	str	r3, [r7, #16]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <xPortStartScheduler+0x120>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <xPortStartScheduler+0x128>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10a      	bne.n	8002bfa <xPortStartScheduler+0x46>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <xPortStartScheduler+0x12c>)
 8002bfc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <xPortStartScheduler+0x130>)
 8002c20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c28:	e009      	b.n	8002c3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d0ef      	beq.n	8002c2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00a      	beq.n	8002c6c <xPortStartScheduler+0xb8>
        __asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	60bb      	str	r3, [r7, #8]
    }
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <xPortStartScheduler+0x138>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <xPortStartScheduler+0x138>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <xPortStartScheduler+0x138>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <xPortStartScheduler+0x138>)
 8002c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ca2:	f000 f963 	bl	8002f6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <xPortStartScheduler+0x13c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002cac:	f000 f982 	bl	8002fb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <xPortStartScheduler+0x140>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <xPortStartScheduler+0x140>)
 8002cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002cbc:	f7ff ff64 	bl	8002b88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002cc0:	f7fe ff3e 	bl	8001b40 <vTaskSwitchContext>
    prvTaskExitError();
 8002cc4:	f7ff ff1a 	bl	8002afc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00
 8002cd8:	410fc271 	.word	0x410fc271
 8002cdc:	410fc270 	.word	0x410fc270
 8002ce0:	e000e400 	.word	0xe000e400
 8002ce4:	200001b0 	.word	0x200001b0
 8002ce8:	200001b4 	.word	0x200001b4
 8002cec:	e000ed20 	.word	0xe000ed20
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	e000ef34 	.word	0xe000ef34

08002cf8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <vInitPrioGroupValue+0xe4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <vInitPrioGroupValue+0xe8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10a      	bne.n	8002d1e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	613b      	str	r3, [r7, #16]
    }
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <vInitPrioGroupValue+0xe4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <vInitPrioGroupValue+0xec>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10a      	bne.n	8002d3e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	60fb      	str	r3, [r7, #12]
    }
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <vInitPrioGroupValue+0xf0>)
 8002d40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	22ff      	movs	r2, #255	; 0xff
 8002d4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <vInitPrioGroupValue+0xf4>)
 8002d64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d6c:	e009      	b.n	8002d82 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002d76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d0ef      	beq.n	8002d6e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1c3 0307 	rsb	r3, r3, #7
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00a      	beq.n	8002db0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60bb      	str	r3, [r7, #8]
    }
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002db8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <vInitPrioGroupValue+0xf8>)
 8002dc4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00
 8002de0:	410fc271 	.word	0x410fc271
 8002de4:	410fc270 	.word	0x410fc270
 8002de8:	e000e400 	.word	0xe000e400
 8002dec:	200001b0 	.word	0x200001b0
 8002df0:	200001b4 	.word	0x200001b4

08002df4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
        __asm volatile
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	607b      	str	r3, [r7, #4]
    }
 8002e0c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <vPortEnterCritical+0x58>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <vPortEnterCritical+0x58>)
 8002e16:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <vPortEnterCritical+0x58>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10f      	bne.n	8002e40 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <vPortEnterCritical+0x5c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	603b      	str	r3, [r7, #0]
    }
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vPortEnterCritical+0x4a>
    }
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <vPortExitCritical+0x50>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <vPortExitCritical+0x24>
        __asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	607b      	str	r3, [r7, #4]
    }
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <vPortExitCritical+0x50>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <vPortExitCritical+0x50>)
 8002e80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <vPortExitCritical+0x50>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <vPortExitCritical+0x42>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f383 8811 	msr	BASEPRI, r3
    }
 8002e94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000004 	.word	0x20000004
	...

08002eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002eb0:	f3ef 8009 	mrs	r0, PSP
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <pxCurrentTCBConst>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f01e 0f10 	tst.w	lr, #16
 8002ec0:	bf08      	it	eq
 8002ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ed4:	f380 8811 	msr	BASEPRI, r0
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f7fe fe2e 	bl	8001b40 <vTaskSwitchContext>
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f380 8811 	msr	BASEPRI, r0
 8002eec:	bc09      	pop	{r0, r3}
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	6808      	ldr	r0, [r1, #0]
 8002ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef6:	f01e 0f10 	tst.w	lr, #16
 8002efa:	bf08      	it	eq
 8002efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f00:	f380 8809 	msr	PSP, r0
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	f3af 8000 	nop.w

08002f10 <pxCurrentTCBConst>:
 8002f10:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop

08002f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	607b      	str	r3, [r7, #4]
    }
 8002f30:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f32:	f001 fc91 	bl	8004858 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f36:	f7fe fd47 	bl	80019c8 <xTaskIncrementTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f40:	f001 fce8 	bl	8004914 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <SysTick_Handler+0x50>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e001      	b.n	8002f52 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f4e:	f001 fcc5 	bl	80048dc <SEGGER_SYSVIEW_RecordExitISR>
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f383 8811 	msr	BASEPRI, r3
    }
 8002f5c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <vPortSetupTimerInterrupt+0x34>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <vPortSetupTimerInterrupt+0x38>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <vPortSetupTimerInterrupt+0x3c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <vPortSetupTimerInterrupt+0x40>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <vPortSetupTimerInterrupt+0x44>)
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <vPortSetupTimerInterrupt+0x34>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010
 8002fa4:	e000e018 	.word	0xe000e018
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	10624dd3 	.word	0x10624dd3
 8002fb0:	e000e014 	.word	0xe000e014

08002fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fc4 <vPortEnableVFP+0x10>
 8002fb8:	6801      	ldr	r1, [r0, #0]
 8002fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002fbe:	6001      	str	r1, [r0, #0]
 8002fc0:	4770      	bx	lr
 8002fc2:	0000      	.short	0x0000
 8002fc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop

08002fcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002fd2:	f3ef 8305 	mrs	r3, IPSR
 8002fd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	d914      	bls.n	8003008 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <vPortValidateInterruptPriority+0x70>)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <vPortValidateInterruptPriority+0x74>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	7afa      	ldrb	r2, [r7, #11]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d20a      	bcs.n	8003008 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <vPortValidateInterruptPriority+0x78>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <vPortValidateInterruptPriority+0x7c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d90a      	bls.n	800302e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	603b      	str	r3, [r7, #0]
    }
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <vPortValidateInterruptPriority+0x60>
    }
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e3f0 	.word	0xe000e3f0
 8003040:	200001b0 	.word	0x200001b0
 8003044:	e000ed0c 	.word	0xe000ed0c
 8003048:	200001b4 	.word	0x200001b4

0800304c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003058:	f7fe fbe6 	bl	8001828 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800305c:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <pvPortMalloc+0x1a8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003064:	f000 f934 	bl	80032d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003068:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <pvPortMalloc+0x1ac>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 80a7 	bne.w	80031c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02d      	beq.n	80030d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800307c:	2208      	movs	r2, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d227      	bcs.n	80030d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003088:	2208      	movs	r2, #8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	2b00      	cmp	r3, #0
 8003098:	d021      	beq.n	80030de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	3308      	adds	r3, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d214      	bcs.n	80030d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	3308      	adds	r3, #8
 80030b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <pvPortMalloc+0x92>
        __asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	617b      	str	r3, [r7, #20]
    }
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030d6:	e002      	b.n	80030de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	e000      	b.n	80030e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06e      	beq.n	80031c4 <pvPortMalloc+0x178>
 80030e6:	4b45      	ldr	r3, [pc, #276]	; (80031fc <pvPortMalloc+0x1b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d869      	bhi.n	80031c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <pvPortMalloc+0x1b4>)
 80030f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80030f4:	4b42      	ldr	r3, [pc, #264]	; (8003200 <pvPortMalloc+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030fa:	e004      	b.n	8003106 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d903      	bls.n	8003118 <pvPortMalloc+0xcc>
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f1      	bne.n	80030fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <pvPortMalloc+0x1a8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	429a      	cmp	r2, r3
 8003120:	d050      	beq.n	80031c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	4413      	add	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	2308      	movs	r3, #8
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	429a      	cmp	r2, r3
 8003142:	d91f      	bls.n	8003184 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <pvPortMalloc+0x120>
        __asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	613b      	str	r3, [r7, #16]
    }
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	1ad2      	subs	r2, r2, r3
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800317e:	69b8      	ldr	r0, [r7, #24]
 8003180:	f000 f908 	bl	8003394 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <pvPortMalloc+0x1b0>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <pvPortMalloc+0x1b0>)
 8003190:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <pvPortMalloc+0x1b0>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <pvPortMalloc+0x1b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d203      	bcs.n	80031a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <pvPortMalloc+0x1b0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <pvPortMalloc+0x1b8>)
 80031a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <pvPortMalloc+0x1ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <pvPortMalloc+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <pvPortMalloc+0x1bc>)
 80031c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031c4:	f7fe fb3e 	bl	8001844 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <pvPortMalloc+0x19c>
        __asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	60fb      	str	r3, [r7, #12]
    }
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80031e8:	69fb      	ldr	r3, [r7, #28]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20012dc0 	.word	0x20012dc0
 80031f8:	20012dd4 	.word	0x20012dd4
 80031fc:	20012dc4 	.word	0x20012dc4
 8003200:	20012db8 	.word	0x20012db8
 8003204:	20012dc8 	.word	0x20012dc8
 8003208:	20012dcc 	.word	0x20012dcc

0800320c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04d      	beq.n	80032ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800321e:	2308      	movs	r3, #8
 8003220:	425b      	negs	r3, r3
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4413      	add	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <vPortFree+0xb8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <vPortFree+0x44>
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60fb      	str	r3, [r7, #12]
    }
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <vPortFree+0x62>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60bb      	str	r3, [r7, #8]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <vPortFree+0xb8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01e      	beq.n	80032ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11a      	bne.n	80032ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <vPortFree+0xb8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003294:	f7fe fac8 	bl	8001828 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <vPortFree+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <vPortFree+0xbc>)
 80032a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032a6:	6938      	ldr	r0, [r7, #16]
 80032a8:	f000 f874 	bl	8003394 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <vPortFree+0xc0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a06      	ldr	r2, [pc, #24]	; (80032cc <vPortFree+0xc0>)
 80032b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80032b6:	f7fe fac5 	bl	8001844 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20012dd4 	.word	0x20012dd4
 80032c8:	20012dc4 	.word	0x20012dc4
 80032cc:	20012dd0 	.word	0x20012dd0

080032d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80032da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <prvHeapInit+0xac>)
 80032de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3307      	adds	r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	4a1f      	ldr	r2, [pc, #124]	; (800337c <prvHeapInit+0xac>)
 8003300:	4413      	add	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <prvHeapInit+0xb0>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <prvHeapInit+0xb0>)
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800331c:	2208      	movs	r2, #8
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <prvHeapInit+0xb4>)
 8003330:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <prvHeapInit+0xb4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <prvHeapInit+0xb4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <prvHeapInit+0xb4>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <prvHeapInit+0xb8>)
 800335e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <prvHeapInit+0xbc>)
 8003366:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <prvHeapInit+0xc0>)
 800336a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	200001b8 	.word	0x200001b8
 8003380:	20012db8 	.word	0x20012db8
 8003384:	20012dc0 	.word	0x20012dc0
 8003388:	20012dc8 	.word	0x20012dc8
 800338c:	20012dc4 	.word	0x20012dc4
 8003390:	20012dd4 	.word	0x20012dd4

08003394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <prvInsertBlockIntoFreeList+0xac>)
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e002      	b.n	80033a8 <prvInsertBlockIntoFreeList+0x14>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d8f7      	bhi.n	80033a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d108      	bne.n	80033d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	441a      	add	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	441a      	add	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d118      	bne.n	800341c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <prvInsertBlockIntoFreeList+0xb0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d00d      	beq.n	8003412 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e008      	b.n	8003424 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <prvInsertBlockIntoFreeList+0xb0>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e003      	b.n	8003424 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d002      	beq.n	8003432 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20012db8 	.word	0x20012db8
 8003444:	20012dc0 	.word	0x20012dc0

08003448 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800344c:	4803      	ldr	r0, [pc, #12]	; (800345c <_cbSendSystemDesc+0x14>)
 800344e:	f001 f9ad 	bl	80047ac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003452:	4803      	ldr	r0, [pc, #12]	; (8003460 <_cbSendSystemDesc+0x18>)
 8003454:	f001 f9aa 	bl	80047ac <SEGGER_SYSVIEW_SendSysDesc>
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08006b64 	.word	0x08006b64
 8003460:	08006bac 	.word	0x08006bac

08003464 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <SEGGER_SYSVIEW_Conf+0x20>)
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <SEGGER_SYSVIEW_Conf+0x20>)
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SEGGER_SYSVIEW_Conf+0x24>)
 8003472:	4a06      	ldr	r2, [pc, #24]	; (800348c <SEGGER_SYSVIEW_Conf+0x28>)
 8003474:	f000 fd18 	bl	8003ea8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003478:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800347c:	f000 fd58 	bl	8003f30 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000008 	.word	0x20000008
 8003488:	08003449 	.word	0x08003449
 800348c:	08006c54 	.word	0x08006c54

08003490 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	e033      	b.n	8003504 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800349c:	491e      	ldr	r1, [pc, #120]	; (8003518 <_cbSendTaskList+0x88>)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	491a      	ldr	r1, [pc, #104]	; (8003518 <_cbSendTaskList+0x88>)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	4c16      	ldr	r4, [pc, #88]	; (8003518 <_cbSendTaskList+0x88>)
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4423      	add	r3, r4
 80034cc:	3308      	adds	r3, #8
 80034ce:	681c      	ldr	r4, [r3, #0]
 80034d0:	4d11      	ldr	r5, [pc, #68]	; (8003518 <_cbSendTaskList+0x88>)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	442b      	add	r3, r5
 80034de:	330c      	adds	r3, #12
 80034e0:	681d      	ldr	r5, [r3, #0]
 80034e2:	4e0d      	ldr	r6, [pc, #52]	; (8003518 <_cbSendTaskList+0x88>)
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4433      	add	r3, r6
 80034f0:	3310      	adds	r3, #16
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462b      	mov	r3, r5
 80034f8:	4622      	mov	r2, r4
 80034fa:	f000 f8bd 	bl	8003678 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3301      	adds	r3, #1
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <_cbSendTaskList+0x8c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3c6      	bcc.n	800349c <_cbSendTaskList+0xc>
  }
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	20012dd8 	.word	0x20012dd8
 800351c:	20012e78 	.word	0x20012e78

08003520 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003528:	f7fe fa3c 	bl	80019a4 <xTaskGetTickCountFromISR>
 800352c:	4603      	mov	r3, r0
 800352e:	2200      	movs	r2, #0
 8003530:	469a      	mov	sl, r3
 8003532:	4693      	mov	fp, r2
 8003534:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	f04f 0a00 	mov.w	sl, #0
 8003544:	f04f 0b00 	mov.w	fp, #0
 8003548:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800354c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003550:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003554:	4652      	mov	r2, sl
 8003556:	465b      	mov	r3, fp
 8003558:	1a14      	subs	r4, r2, r0
 800355a:	eb63 0501 	sbc.w	r5, r3, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	00ab      	lsls	r3, r5, #2
 8003568:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800356c:	00a2      	lsls	r2, r4, #2
 800356e:	4614      	mov	r4, r2
 8003570:	461d      	mov	r5, r3
 8003572:	eb14 0800 	adds.w	r8, r4, r0
 8003576:	eb45 0901 	adc.w	r9, r5, r1
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800358e:	4690      	mov	r8, r2
 8003590:	4699      	mov	r9, r3
 8003592:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003596:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080035a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035b6:	2205      	movs	r2, #5
 80035b8:	492b      	ldr	r1, [pc, #172]	; (8003668 <SYSVIEW_AddTask+0xc0>)
 80035ba:	68b8      	ldr	r0, [r7, #8]
 80035bc:	f003 fa94 	bl	8006ae8 <memcmp>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04b      	beq.n	800365e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <SYSVIEW_AddTask+0xc4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d903      	bls.n	80035d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035ce:	4828      	ldr	r0, [pc, #160]	; (8003670 <SYSVIEW_AddTask+0xc8>)
 80035d0:	f001 fbea 	bl	8004da8 <SEGGER_SYSVIEW_Warn>
    return;
 80035d4:	e044      	b.n	8003660 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035d6:	4b25      	ldr	r3, [pc, #148]	; (800366c <SYSVIEW_AddTask+0xc4>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4926      	ldr	r1, [pc, #152]	; (8003674 <SYSVIEW_AddTask+0xcc>)
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <SYSVIEW_AddTask+0xc4>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4921      	ldr	r1, [pc, #132]	; (8003674 <SYSVIEW_AddTask+0xcc>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3304      	adds	r3, #4
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <SYSVIEW_AddTask+0xc4>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	491b      	ldr	r1, [pc, #108]	; (8003674 <SYSVIEW_AddTask+0xcc>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3308      	adds	r3, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <SYSVIEW_AddTask+0xc4>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4916      	ldr	r1, [pc, #88]	; (8003674 <SYSVIEW_AddTask+0xcc>)
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	330c      	adds	r3, #12
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <SYSVIEW_AddTask+0xc4>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4910      	ldr	r1, [pc, #64]	; (8003674 <SYSVIEW_AddTask+0xcc>)
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3310      	adds	r3, #16
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <SYSVIEW_AddTask+0xc4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <SYSVIEW_AddTask+0xc4>)
 800364a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f80e 	bl	8003678 <SYSVIEW_SendTaskInfo>
 800365c:	e000      	b.n	8003660 <SYSVIEW_AddTask+0xb8>
    return;
 800365e:	bf00      	nop

}
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	08006bbc 	.word	0x08006bbc
 800366c:	20012e78 	.word	0x20012e78
 8003670:	08006bc4 	.word	0x08006bc4
 8003674:	20012dd8 	.word	0x20012dd8

08003678 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	2214      	movs	r2, #20
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fa48 	bl	8006b24 <memset>
  TaskInfo.TaskID     = TaskID;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 ff85 	bl	80045bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036b2:	bf00      	nop
 80036b4:	3728      	adds	r7, #40	; 0x28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <_DoInit+0x98>)
 80036c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2203      	movs	r2, #3
 80036d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a20      	ldr	r2, [pc, #128]	; (8003758 <_DoInit+0x9c>)
 80036d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a20      	ldr	r2, [pc, #128]	; (800375c <_DoInit+0xa0>)
 80036dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <_DoInit+0x9c>)
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <_DoInit+0xa4>)
 8003702:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2210      	movs	r2, #16
 8003708:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3307      	adds	r3, #7
 8003720:	4a10      	ldr	r2, [pc, #64]	; (8003764 <_DoInit+0xa8>)
 8003722:	6810      	ldr	r0, [r2, #0]
 8003724:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003726:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <_DoInit+0xac>)
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	6018      	str	r0, [r3, #0]
 8003732:	8891      	ldrh	r1, [r2, #4]
 8003734:	7992      	ldrb	r2, [r2, #6]
 8003736:	8099      	strh	r1, [r3, #4]
 8003738:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800373a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003744:	f3bf 8f5f 	dmb	sy
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20012e7c 	.word	0x20012e7c
 8003758:	08006c14 	.word	0x08006c14
 800375c:	20012f24 	.word	0x20012f24
 8003760:	20013324 	.word	0x20013324
 8003764:	08006c20 	.word	0x08006c20
 8003768:	08006c24 	.word	0x08006c24

0800376c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <SEGGER_RTT_ReadNoLock+0x108>)
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <SEGGER_RTT_ReadNoLock+0x1e>
 8003786:	f7ff ff99 	bl	80036bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <SEGGER_RTT_ReadNoLock+0x108>)
 8003798:	4413      	add	r3, r2
 800379a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80037b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d92b      	bls.n	8003810 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	bf28      	it	cs
 80037ca:	4613      	movcs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	4413      	add	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	6939      	ldr	r1, [r7, #16]
 80037dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037de:	f003 f993 	bl	8006b08 <memcpy>
    NumBytesRead += NumBytesRem;
 80037e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4413      	add	r3, r2
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4413      	add	r3, r2
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80037fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003808:	429a      	cmp	r2, r3
 800380a:	d101      	bne.n	8003810 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4293      	cmp	r3, r2
 800381e:	bf28      	it	cs
 8003820:	4613      	movcs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	4413      	add	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800383a:	f003 f965 	bl	8006b08 <memcpy>
    NumBytesRead += NumBytesRem;
 800383e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4413      	add	r3, r2
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4413      	add	r3, r2
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4413      	add	r3, r2
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003868:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800386c:	4618      	mov	r0, r3
 800386e:	3730      	adds	r7, #48	; 0x30
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20012e7c 	.word	0x20012e7c

08003878 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003894:	f7ff ff12 	bl	80036bc <_DoInit>
  SEGGER_RTT_LOCK();
 8003898:	f3ef 8311 	mrs	r3, BASEPRI
 800389c:	f04f 0120 	mov.w	r1, #32
 80038a0:	f381 8811 	msr	BASEPRI, r1
 80038a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038a6:	4b35      	ldr	r3, [pc, #212]	; (800397c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80038a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80038ae:	6939      	ldr	r1, [r7, #16]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	3304      	adds	r3, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	dbeb      	blt.n	80038ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80038d6:	e000      	b.n	80038da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80038d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	da3f      	bge.n	8003964 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80038e4:	6939      	ldr	r1, [r7, #16]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	3304      	adds	r3, #4
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800390e:	6939      	ldr	r1, [r7, #16]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	440b      	add	r3, r1
 800391c:	3320      	adds	r3, #32
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	3328      	adds	r3, #40	; 0x28
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003936:	6939      	ldr	r1, [r7, #16]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3324      	adds	r3, #36	; 0x24
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800394a:	6939      	ldr	r1, [r7, #16]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	440b      	add	r3, r1
 8003958:	332c      	adds	r3, #44	; 0x2c
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800395e:	f3bf 8f5f 	dmb	sy
 8003962:	e002      	b.n	800396a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003968:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003970:	69fb      	ldr	r3, [r7, #28]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20012e7c 	.word	0x20012e7c

08003980 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800398e:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800399c:	f7ff fe8e 	bl	80036bc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80039a2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	461a      	mov	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d24d      	bcs.n	8003a4c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80039b0:	f3ef 8311 	mrs	r3, BASEPRI
 80039b4:	f04f 0120 	mov.w	r1, #32
 80039b8:	f381 8811 	msr	BASEPRI, r1
 80039bc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d031      	beq.n	8003a28 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	3360      	adds	r3, #96	; 0x60
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3364      	adds	r3, #100	; 0x64
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	3368      	adds	r3, #104	; 0x68
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003a00:	6979      	ldr	r1, [r7, #20]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3370      	adds	r3, #112	; 0x70
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003a14:	6979      	ldr	r1, [r7, #20]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	336c      	adds	r3, #108	; 0x6c
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	3374      	adds	r3, #116	; 0x74
 8003a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a3c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e002      	b.n	8003a52 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a50:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003a52:	69fb      	ldr	r3, [r7, #28]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20012e7c 	.word	0x20012e7c

08003a60 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a70:	e002      	b.n	8003a78 <_EncodeStr+0x18>
    Len++;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3301      	adds	r3, #1
 8003a76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f6      	bne.n	8003a72 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d901      	bls.n	8003a90 <_EncodeStr+0x30>
    Len = Limit;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2bfe      	cmp	r3, #254	; 0xfe
 8003a94:	d806      	bhi.n	8003aa4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e011      	b.n	8003ac8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60fa      	str	r2, [r7, #12]
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	60fa      	str	r2, [r7, #12]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	0a19      	lsrs	r1, r3, #8
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	b2ca      	uxtb	r2, r1
 8003ac6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003acc:	e00a      	b.n	8003ae4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	1c53      	adds	r3, r2, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	60f9      	str	r1, [r7, #12]
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	701a      	strb	r2, [r3, #0]
    n++;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3f0      	bcc.n	8003ace <_EncodeStr+0x6e>
  }
  return pPayload;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <_HandleIncomingPacket+0xe0>)
 8003b1c:	7e1b      	ldrb	r3, [r3, #24]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	1cfb      	adds	r3, r7, #3
 8003b22:	2201      	movs	r2, #1
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7ff fe21 	bl	800376c <SEGGER_RTT_ReadNoLock>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dd54      	ble.n	8003bde <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d032      	beq.n	8003ba0 <_HandleIncomingPacket+0x8c>
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	dc42      	bgt.n	8003bc4 <_HandleIncomingPacket+0xb0>
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	dc16      	bgt.n	8003b70 <_HandleIncomingPacket+0x5c>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dd3e      	ble.n	8003bc4 <_HandleIncomingPacket+0xb0>
 8003b46:	3b01      	subs	r3, #1
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d83b      	bhi.n	8003bc4 <_HandleIncomingPacket+0xb0>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <_HandleIncomingPacket+0x40>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b77 	.word	0x08003b77
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b83 	.word	0x08003b83
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003b9b 	.word	0x08003b9b
 8003b70:	2b7f      	cmp	r3, #127	; 0x7f
 8003b72:	d036      	beq.n	8003be2 <_HandleIncomingPacket+0xce>
 8003b74:	e026      	b.n	8003bc4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003b76:	f000 fba7 	bl	80042c8 <SEGGER_SYSVIEW_Start>
      break;
 8003b7a:	e037      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003b7c:	f000 fc5e 	bl	800443c <SEGGER_SYSVIEW_Stop>
      break;
 8003b80:	e034      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003b82:	f000 fe37 	bl	80047f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003b86:	e031      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003b88:	f000 fdfc 	bl	8004784 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003b8c:	e02e      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003b8e:	f000 fc7b 	bl	8004488 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003b92:	e02b      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003b94:	f001 f8ca 	bl	8004d2c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003b98:	e028      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003b9a:	f001 f8a9 	bl	8004cf0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003b9e:	e025      	b.n	8003bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <_HandleIncomingPacket+0xe0>)
 8003ba2:	7e1b      	ldrb	r3, [r3, #24]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	1cfb      	adds	r3, r7, #3
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7ff fdde 	bl	800376c <SEGGER_RTT_ReadNoLock>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dd15      	ble.n	8003be6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f817 	bl	8004bf0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003bc2:	e010      	b.n	8003be6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da0e      	bge.n	8003bea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <_HandleIncomingPacket+0xe0>)
 8003bce:	7e1b      	ldrb	r3, [r3, #24]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	1cfb      	adds	r3, r7, #3
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f7ff fdc8 	bl	800376c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003bdc:	e005      	b.n	8003bea <_HandleIncomingPacket+0xd6>
    }
  }
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <_HandleIncomingPacket+0xd8>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <_HandleIncomingPacket+0xd8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <_HandleIncomingPacket+0xd8>
      break;
 8003bea:	bf00      	nop
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	2001433c 	.word	0x2001433c

08003bf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	; 0x30
 8003bfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003bfe:	2301      	movs	r3, #1
 8003c00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	3301      	adds	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0c:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c12:	e00b      	b.n	8003c2c <_TrySendOverflowPacket+0x34>
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	09db      	lsrs	r3, r3, #7
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c30:	d8f0      	bhi.n	8003c14 <_TrySendOverflowPacket+0x1c>
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c42:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <_TrySendOverflowPacket+0xe0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	e00b      	b.n	8003c74 <_TrySendOverflowPacket+0x7c>
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6279      	str	r1, [r7, #36]	; 0x24
 8003c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d8f0      	bhi.n	8003c5c <_TrySendOverflowPacket+0x64>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc fa98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e004      	b.n	8003cc8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <_TrySendOverflowPacket+0xdc>)
 8003cc6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003cc8:	693b      	ldr	r3, [r7, #16]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3730      	adds	r7, #48	; 0x30
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2001433c 	.word	0x2001433c
 8003cd8:	e0001004 	.word	0xe0001004

08003cdc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003ce8:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <_SendPacket+0x1c0>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d010      	beq.n	8003d12 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <_SendPacket+0x1c0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a3 	beq.w	8003e40 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003cfa:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <_SendPacket+0x1c0>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d109      	bne.n	8003d16 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003d02:	f7ff ff79 	bl	8003bf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <_SendPacket+0x1c0>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 809a 	bne.w	8003e44 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003d10:	e001      	b.n	8003d16 <_SendPacket+0x3a>
    goto Send;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <_SendPacket+0x3c>
Send:
 8003d16:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b1f      	cmp	r3, #31
 8003d1c:	d809      	bhi.n	8003d32 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <_SendPacket+0x1c0>)
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 808b 	bne.w	8003e48 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b17      	cmp	r3, #23
 8003d36:	d807      	bhi.n	8003d48 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e03d      	b.n	8003dc4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b7f      	cmp	r3, #127	; 0x7f
 8003d54:	d912      	bls.n	8003d7c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	09da      	lsrs	r2, r3, #7
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	60fa      	str	r2, [r7, #12]
 8003d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e006      	b.n	8003d8a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d8e:	d912      	bls.n	8003db6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	09da      	lsrs	r2, r3, #7
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	3a01      	subs	r2, #1
 8003da8:	60fa      	str	r2, [r7, #12]
 8003daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e006      	b.n	8003dc4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <_SendPacket+0x1c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <_SendPacket+0x1c0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	e00b      	b.n	8003df6 <_SendPacket+0x11a>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1c59      	adds	r1, r3, #1
 8003de6:	6279      	str	r1, [r7, #36]	; 0x24
 8003de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfa:	d8f0      	bhi.n	8003dde <_SendPacket+0x102>
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	627a      	str	r2, [r7, #36]	; 0x24
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <_SendPacket+0x1c0>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	4618      	mov	r0, r3
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	f7fc f9d8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003e20:	4603      	mov	r3, r0
 8003e22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <_SendPacket+0x1c0>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	60d3      	str	r3, [r2, #12]
 8003e30:	e00b      	b.n	8003e4a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <_SendPacket+0x1c0>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <_SendPacket+0x1c0>)
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e004      	b.n	8003e4a <_SendPacket+0x16e>
    goto SendDone;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <_SendPacket+0x16e>
      goto SendDone;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <_SendPacket+0x16e>
      goto SendDone;
 8003e48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <_SendPacket+0x1c0>)
 8003e4c:	7e1b      	ldrb	r3, [r3, #24]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <_SendPacket+0x1c8>)
 8003e52:	460b      	mov	r3, r1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	440b      	add	r3, r1
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	336c      	adds	r3, #108	; 0x6c
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <_SendPacket+0x1c0>)
 8003e62:	7e1b      	ldrb	r3, [r3, #24]
 8003e64:	4618      	mov	r0, r3
 8003e66:	490f      	ldr	r1, [pc, #60]	; (8003ea4 <_SendPacket+0x1c8>)
 8003e68:	4603      	mov	r3, r0
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4403      	add	r3, r0
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	440b      	add	r3, r1
 8003e72:	3370      	adds	r3, #112	; 0x70
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d00b      	beq.n	8003e92 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <_SendPacket+0x1c0>)
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <_SendPacket+0x1c0>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003e88:	f7ff fe44 	bl	8003b14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <_SendPacket+0x1c0>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2001433c 	.word	0x2001433c
 8003ea0:	e0001004 	.word	0xe0001004
 8003ea4:	20012e7c 	.word	0x20012e7c

08003ea8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ebc:	4917      	ldr	r1, [pc, #92]	; (8003f1c <SEGGER_SYSVIEW_Init+0x74>)
 8003ebe:	4818      	ldr	r0, [pc, #96]	; (8003f20 <SEGGER_SYSVIEW_Init+0x78>)
 8003ec0:	f7ff fcda 	bl	8003878 <SEGGER_RTT_AllocUpBuffer>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ece:	785a      	ldrb	r2, [r3, #1]
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ed2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2308      	movs	r3, #8
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <SEGGER_SYSVIEW_Init+0x80>)
 8003ee2:	490f      	ldr	r1, [pc, #60]	; (8003f20 <SEGGER_SYSVIEW_Init+0x78>)
 8003ee4:	f7ff fd4c 	bl	8003980 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <SEGGER_SYSVIEW_Init+0x84>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ef4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20013334 	.word	0x20013334
 8003f20:	08006c2c 	.word	0x08006c2c
 8003f24:	2001433c 	.word	0x2001433c
 8003f28:	20014334 	.word	0x20014334
 8003f2c:	e0001004 	.word	0xe0001004

08003f30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6113      	str	r3, [r2, #16]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2001433c 	.word	0x2001433c

08003f50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f58:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5c:	f04f 0120 	mov.w	r1, #32
 8003f60:	f381 8811 	msr	BASEPRI, r1
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4808      	ldr	r0, [pc, #32]	; (8003f88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003f68:	f7ff fdc7 	bl	8003afa <_PreparePacket>
 8003f6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68b8      	ldr	r0, [r7, #8]
 8003f74:	f7ff feb2 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f383 8811 	msr	BASEPRI, r3
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2001436c 	.word	0x2001436c

08003f8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f96:	f3ef 8311 	mrs	r3, BASEPRI
 8003f9a:	f04f 0120 	mov.w	r1, #32
 8003f9e:	f381 8811 	msr	BASEPRI, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	4816      	ldr	r0, [pc, #88]	; (8004000 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003fa6:	f7ff fda8 	bl	8003afa <_PreparePacket>
 8003faa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e00b      	b.n	8003fd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	1c59      	adds	r1, r3, #1
 8003fc2:	61f9      	str	r1, [r7, #28]
 8003fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	09db      	lsrs	r3, r3, #7
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd6:	d8f0      	bhi.n	8003fba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	61fa      	str	r2, [r7, #28]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	6938      	ldr	r0, [r7, #16]
 8003fee:	f7ff fe75 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f383 8811 	msr	BASEPRI, r3
}
 8003ff8:	bf00      	nop
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	2001436c 	.word	0x2001436c

08004004 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004010:	f3ef 8311 	mrs	r3, BASEPRI
 8004014:	f04f 0120 	mov.w	r1, #32
 8004018:	f381 8811 	msr	BASEPRI, r1
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	4825      	ldr	r0, [pc, #148]	; (80040b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004020:	f7ff fd6b 	bl	8003afa <_PreparePacket>
 8004024:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
 8004032:	e00b      	b.n	800404c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	b2da      	uxtb	r2, r3
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800403e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	09db      	lsrs	r3, r3, #7
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	2b7f      	cmp	r3, #127	; 0x7f
 8004050:	d8f0      	bhi.n	8004034 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	e00b      	b.n	8004084 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	6279      	str	r1, [r7, #36]	; 0x24
 8004076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	09db      	lsrs	r3, r3, #7
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b7f      	cmp	r3, #127	; 0x7f
 8004088:	d8f0      	bhi.n	800406c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	627a      	str	r2, [r7, #36]	; 0x24
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f7ff fe1c 	bl	8003cdc <_SendPacket>
  RECORD_END();
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f383 8811 	msr	BASEPRI, r3
}
 80040aa:	bf00      	nop
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2001436c 	.word	0x2001436c

080040b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80040c6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ca:	f04f 0120 	mov.w	r1, #32
 80040ce:	f381 8811 	msr	BASEPRI, r1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	4832      	ldr	r0, [pc, #200]	; (80041a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80040d6:	f7ff fd10 	bl	8003afa <_PreparePacket>
 80040da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
 80040e8:	e00b      	b.n	8004102 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	6379      	str	r1, [r7, #52]	; 0x34
 80040f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	09db      	lsrs	r3, r3, #7
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2b7f      	cmp	r3, #127	; 0x7f
 8004106:	d8f0      	bhi.n	80040ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	637a      	str	r2, [r7, #52]	; 0x34
 800410e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	e00b      	b.n	800413a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	b2da      	uxtb	r2, r3
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	1c59      	adds	r1, r3, #1
 800412a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800412c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	09db      	lsrs	r3, r3, #7
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2b7f      	cmp	r3, #127	; 0x7f
 800413e:	d8f0      	bhi.n	8004122 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	e00b      	b.n	8004172 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1c59      	adds	r1, r3, #1
 8004162:	6279      	str	r1, [r7, #36]	; 0x24
 8004164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	09db      	lsrs	r3, r3, #7
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b7f      	cmp	r3, #127	; 0x7f
 8004176:	d8f0      	bhi.n	800415a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	627a      	str	r2, [r7, #36]	; 0x24
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	6979      	ldr	r1, [r7, #20]
 800418c:	69b8      	ldr	r0, [r7, #24]
 800418e:	f7ff fda5 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f383 8811 	msr	BASEPRI, r3
}
 8004198:	bf00      	nop
 800419a:	3738      	adds	r7, #56	; 0x38
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2001436c 	.word	0x2001436c

080041a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b090      	sub	sp, #64	; 0x40
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80041b2:	f3ef 8311 	mrs	r3, BASEPRI
 80041b6:	f04f 0120 	mov.w	r1, #32
 80041ba:	f381 8811 	msr	BASEPRI, r1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	4840      	ldr	r0, [pc, #256]	; (80042c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80041c2:	f7ff fc9a 	bl	8003afa <_PreparePacket>
 80041c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d4:	e00b      	b.n	80041ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041dc:	1c59      	adds	r1, r3, #1
 80041de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80041e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	09db      	lsrs	r3, r3, #7
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	2b7f      	cmp	r3, #127	; 0x7f
 80041f2:	d8f0      	bhi.n	80041d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
 800420c:	e00b      	b.n	8004226 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	b2da      	uxtb	r2, r3
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	1c59      	adds	r1, r3, #1
 8004216:	6379      	str	r1, [r7, #52]	; 0x34
 8004218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	09db      	lsrs	r3, r3, #7
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2b7f      	cmp	r3, #127	; 0x7f
 800422a:	d8f0      	bhi.n	800420e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800422c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	637a      	str	r2, [r7, #52]	; 0x34
 8004232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
 8004244:	e00b      	b.n	800425e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	b2da      	uxtb	r2, r3
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	1c59      	adds	r1, r3, #1
 800424e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	09db      	lsrs	r3, r3, #7
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	2b7f      	cmp	r3, #127	; 0x7f
 8004262:	d8f0      	bhi.n	8004246 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	e00b      	b.n	8004296 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6279      	str	r1, [r7, #36]	; 0x24
 8004288:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	09db      	lsrs	r3, r3, #7
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b7f      	cmp	r3, #127	; 0x7f
 800429a:	d8f0      	bhi.n	800427e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	627a      	str	r2, [r7, #36]	; 0x24
 80042a2:	6a3a      	ldr	r2, [r7, #32]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	69b8      	ldr	r0, [r7, #24]
 80042b2:	f7ff fd13 	bl	8003cdc <_SendPacket>
  RECORD_END();
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f383 8811 	msr	BASEPRI, r3
}
 80042bc:	bf00      	nop
 80042be:	3740      	adds	r7, #64	; 0x40
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	2001436c 	.word	0x2001436c

080042c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80042ce:	4b58      	ldr	r3, [pc, #352]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80042d4:	f3ef 8311 	mrs	r3, BASEPRI
 80042d8:	f04f 0120 	mov.w	r1, #32
 80042dc:	f381 8811 	msr	BASEPRI, r1
 80042e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80042e2:	4b53      	ldr	r3, [pc, #332]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	220a      	movs	r2, #10
 80042e8:	4952      	ldr	r1, [pc, #328]	; (8004434 <SEGGER_SYSVIEW_Start+0x16c>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fb ff70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80042f6:	200a      	movs	r0, #10
 80042f8:	f7ff fe2a 	bl	8003f50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80042fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004300:	f04f 0120 	mov.w	r1, #32
 8004304:	f381 8811 	msr	BASEPRI, r1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	484b      	ldr	r0, [pc, #300]	; (8004438 <SEGGER_SYSVIEW_Start+0x170>)
 800430c:	f7ff fbf5 	bl	8003afa <_PreparePacket>
 8004310:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	4b45      	ldr	r3, [pc, #276]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004320:	e00b      	b.n	800433a <SEGGER_SYSVIEW_Start+0x72>
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	b2da      	uxtb	r2, r3
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	1c59      	adds	r1, r3, #1
 800432a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800432c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	09db      	lsrs	r3, r3, #7
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2b7f      	cmp	r3, #127	; 0x7f
 800433e:	d8f0      	bhi.n	8004322 <SEGGER_SYSVIEW_Start+0x5a>
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
 8004354:	4b36      	ldr	r3, [pc, #216]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	e00b      	b.n	8004374 <SEGGER_SYSVIEW_Start+0xac>
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1c59      	adds	r1, r3, #1
 8004364:	6279      	str	r1, [r7, #36]	; 0x24
 8004366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	09db      	lsrs	r3, r3, #7
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b7f      	cmp	r3, #127	; 0x7f
 8004378:	d8f0      	bhi.n	800435c <SEGGER_SYSVIEW_Start+0x94>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	627a      	str	r2, [r7, #36]	; 0x24
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	4b28      	ldr	r3, [pc, #160]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e00b      	b.n	80043ae <SEGGER_SYSVIEW_Start+0xe6>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1c59      	adds	r1, r3, #1
 800439e:	61f9      	str	r1, [r7, #28]
 80043a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	09db      	lsrs	r3, r3, #7
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b7f      	cmp	r3, #127	; 0x7f
 80043b2:	d8f0      	bhi.n	8004396 <SEGGER_SYSVIEW_Start+0xce>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	e00b      	b.n	80043e6 <SEGGER_SYSVIEW_Start+0x11e>
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1c59      	adds	r1, r3, #1
 80043d6:	6179      	str	r1, [r7, #20]
 80043d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	09db      	lsrs	r3, r3, #7
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ea:	d8f0      	bhi.n	80043ce <SEGGER_SYSVIEW_Start+0x106>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	617a      	str	r2, [r7, #20]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80043fc:	2218      	movs	r2, #24
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fc6b 	bl	8003cdc <_SendPacket>
      RECORD_END();
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <SEGGER_SYSVIEW_Start+0x168>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800441a:	f000 f9eb 	bl	80047f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800441e:	f000 f9b1 	bl	8004784 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004422:	f000 fc83 	bl	8004d2c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004426:	bf00      	nop
 8004428:	3730      	adds	r7, #48	; 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2001433c 	.word	0x2001433c
 8004434:	08006c5c 	.word	0x08006c5c
 8004438:	2001436c 	.word	0x2001436c

0800443c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004442:	f3ef 8311 	mrs	r3, BASEPRI
 8004446:	f04f 0120 	mov.w	r1, #32
 800444a:	f381 8811 	msr	BASEPRI, r1
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	480b      	ldr	r0, [pc, #44]	; (8004480 <SEGGER_SYSVIEW_Stop+0x44>)
 8004452:	f7ff fb52 	bl	8003afa <_PreparePacket>
 8004456:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <SEGGER_SYSVIEW_Stop+0x48>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004460:	220b      	movs	r2, #11
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	f7ff fc39 	bl	8003cdc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <SEGGER_SYSVIEW_Stop+0x48>)
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f383 8811 	msr	BASEPRI, r3
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2001436c 	.word	0x2001436c
 8004484:	2001433c 	.word	0x2001433c

08004488 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800448e:	f3ef 8311 	mrs	r3, BASEPRI
 8004492:	f04f 0120 	mov.w	r1, #32
 8004496:	f381 8811 	msr	BASEPRI, r1
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	4845      	ldr	r0, [pc, #276]	; (80045b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800449e:	f7ff fb2c 	bl	8003afa <_PreparePacket>
 80044a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ac:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b2:	e00b      	b.n	80044cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	1c59      	adds	r1, r3, #1
 80044bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	09db      	lsrs	r3, r3, #7
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	2b7f      	cmp	r3, #127	; 0x7f
 80044d0:	d8f0      	bhi.n	80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	e00b      	b.n	8004506 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1c59      	adds	r1, r3, #1
 80044f6:	6279      	str	r1, [r7, #36]	; 0x24
 80044f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	09db      	lsrs	r3, r3, #7
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b7f      	cmp	r3, #127	; 0x7f
 800450a:	d8f0      	bhi.n	80044ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	627a      	str	r2, [r7, #36]	; 0x24
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e00b      	b.n	8004540 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	61f9      	str	r1, [r7, #28]
 8004532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b7f      	cmp	r3, #127	; 0x7f
 8004544:	d8f0      	bhi.n	8004528 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	61fa      	str	r2, [r7, #28]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e00b      	b.n	8004578 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1c59      	adds	r1, r3, #1
 8004568:	6179      	str	r1, [r7, #20]
 800456a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	09db      	lsrs	r3, r3, #7
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b7f      	cmp	r3, #127	; 0x7f
 800457c:	d8f0      	bhi.n	8004560 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	617a      	str	r2, [r7, #20]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800458e:	2218      	movs	r2, #24
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f7ff fba2 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	4798      	blx	r3
  }
}
 80045ac:	bf00      	nop
 80045ae:	3730      	adds	r7, #48	; 0x30
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	2001436c 	.word	0x2001436c
 80045b8:	2001433c 	.word	0x2001433c

080045bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b092      	sub	sp, #72	; 0x48
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80045c4:	f3ef 8311 	mrs	r3, BASEPRI
 80045c8:	f04f 0120 	mov.w	r1, #32
 80045cc:	f381 8811 	msr	BASEPRI, r1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	486a      	ldr	r0, [pc, #424]	; (800477c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80045d4:	f7ff fa91 	bl	8003afa <_PreparePacket>
 80045d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b66      	ldr	r3, [pc, #408]	; (8004780 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
 80045ee:	e00b      	b.n	8004608 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	6479      	str	r1, [r7, #68]	; 0x44
 80045fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004604:	09db      	lsrs	r3, r3, #7
 8004606:	643b      	str	r3, [r7, #64]	; 0x40
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	2b7f      	cmp	r3, #127	; 0x7f
 800460c:	d8f0      	bhi.n	80045f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	647a      	str	r2, [r7, #68]	; 0x44
 8004614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
 8004628:	e00b      	b.n	8004642 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	b2da      	uxtb	r2, r3
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	1c59      	adds	r1, r3, #1
 8004632:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004634:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	09db      	lsrs	r3, r3, #7
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b7f      	cmp	r3, #127	; 0x7f
 8004646:	d8f0      	bhi.n	800462a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800464e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	4619      	mov	r1, r3
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff f9fd 	bl	8003a60 <_EncodeStr>
 8004666:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004668:	2209      	movs	r2, #9
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	6938      	ldr	r0, [r7, #16]
 800466e:	f7ff fb35 	bl	8003cdc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b40      	ldr	r3, [pc, #256]	; (8004780 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
 8004686:	e00b      	b.n	80046a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	b2da      	uxtb	r2, r3
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	6379      	str	r1, [r7, #52]	; 0x34
 8004692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	09db      	lsrs	r3, r3, #7
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2b7f      	cmp	r3, #127	; 0x7f
 80046a4:	d8f0      	bhi.n	8004688 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	637a      	str	r2, [r7, #52]	; 0x34
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c0:	e00b      	b.n	80046da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	09db      	lsrs	r3, r3, #7
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	2b7f      	cmp	r3, #127	; 0x7f
 80046de:	d8f0      	bhi.n	80046c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	e00b      	b.n	8004714 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	1c59      	adds	r1, r3, #1
 8004704:	6279      	str	r1, [r7, #36]	; 0x24
 8004706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	09db      	lsrs	r3, r3, #7
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b7f      	cmp	r3, #127	; 0x7f
 8004718:	d8f0      	bhi.n	80046fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	627a      	str	r2, [r7, #36]	; 0x24
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e00b      	b.n	800474c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	61f9      	str	r1, [r7, #28]
 800473e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	09db      	lsrs	r3, r3, #7
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b7f      	cmp	r3, #127	; 0x7f
 8004750:	d8f0      	bhi.n	8004734 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	61fa      	str	r2, [r7, #28]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004762:	2215      	movs	r2, #21
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	6938      	ldr	r0, [r7, #16]
 8004768:	f7ff fab8 	bl	8003cdc <_SendPacket>
  RECORD_END();
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f383 8811 	msr	BASEPRI, r3
}
 8004772:	bf00      	nop
 8004774:	3748      	adds	r7, #72	; 0x48
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	2001436c 	.word	0x2001436c
 8004780:	2001433c 	.word	0x2001433c

08004784 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800479a:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4798      	blx	r3
  }
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2001433c 	.word	0x2001433c

080047ac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047b4:	f3ef 8311 	mrs	r3, BASEPRI
 80047b8:	f04f 0120 	mov.w	r1, #32
 80047bc:	f381 8811 	msr	BASEPRI, r1
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	480b      	ldr	r0, [pc, #44]	; (80047f0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80047c4:	f7ff f999 	bl	8003afa <_PreparePacket>
 80047c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6938      	ldr	r0, [r7, #16]
 80047d0:	f7ff f946 	bl	8003a60 <_EncodeStr>
 80047d4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80047d6:	220e      	movs	r2, #14
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f7ff fa7e 	bl	8003cdc <_SendPacket>
  RECORD_END();
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f383 8811 	msr	BASEPRI, r3
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	2001436c 	.word	0x2001436c

080047f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01a      	beq.n	8004838 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4798      	blx	r3
 8004814:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004818:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800481a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	000a      	movs	r2, r1
 8004828:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800482a:	4613      	mov	r3, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4621      	mov	r1, r4
 8004830:	200d      	movs	r0, #13
 8004832:	f7ff fbe7 	bl	8004004 <SEGGER_SYSVIEW_RecordU32x2>
 8004836:	e006      	b.n	8004846 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	200c      	movs	r0, #12
 8004840:	f7ff fba4 	bl	8003f8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	2001433c 	.word	0x2001433c
 8004854:	e0001004 	.word	0xe0001004

08004858 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800485e:	f3ef 8311 	mrs	r3, BASEPRI
 8004862:	f04f 0120 	mov.w	r1, #32
 8004866:	f381 8811 	msr	BASEPRI, r1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	4819      	ldr	r0, [pc, #100]	; (80048d4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800486e:	f7ff f944 	bl	8003afa <_PreparePacket>
 8004872:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e00b      	b.n	80048a4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	6179      	str	r1, [r7, #20]
 8004896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	09db      	lsrs	r3, r3, #7
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b7f      	cmp	r3, #127	; 0x7f
 80048a8:	d8f0      	bhi.n	800488c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	617a      	str	r2, [r7, #20]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80048ba:	2202      	movs	r2, #2
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f7ff fa0c 	bl	8003cdc <_SendPacket>
  RECORD_END();
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f383 8811 	msr	BASEPRI, r3
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2001436c 	.word	0x2001436c
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048e2:	f3ef 8311 	mrs	r3, BASEPRI
 80048e6:	f04f 0120 	mov.w	r1, #32
 80048ea:	f381 8811 	msr	BASEPRI, r1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	4807      	ldr	r0, [pc, #28]	; (8004910 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80048f2:	f7ff f902 	bl	8003afa <_PreparePacket>
 80048f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80048f8:	2203      	movs	r2, #3
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6838      	ldr	r0, [r7, #0]
 80048fe:	f7ff f9ed 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f383 8811 	msr	BASEPRI, r3
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2001436c 	.word	0x2001436c

08004914 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800491a:	f3ef 8311 	mrs	r3, BASEPRI
 800491e:	f04f 0120 	mov.w	r1, #32
 8004922:	f381 8811 	msr	BASEPRI, r1
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	4807      	ldr	r0, [pc, #28]	; (8004948 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800492a:	f7ff f8e6 	bl	8003afa <_PreparePacket>
 800492e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004930:	2212      	movs	r2, #18
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f7ff f9d1 	bl	8003cdc <_SendPacket>
  RECORD_END();
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f383 8811 	msr	BASEPRI, r3
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	2001436c 	.word	0x2001436c

0800494c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004952:	f3ef 8311 	mrs	r3, BASEPRI
 8004956:	f04f 0120 	mov.w	r1, #32
 800495a:	f381 8811 	msr	BASEPRI, r1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004962:	f7ff f8ca 	bl	8003afa <_PreparePacket>
 8004966:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004968:	2211      	movs	r2, #17
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f7ff f9b5 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f383 8811 	msr	BASEPRI, r3
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2001436c 	.word	0x2001436c

08004984 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800498c:	f3ef 8311 	mrs	r3, BASEPRI
 8004990:	f04f 0120 	mov.w	r1, #32
 8004994:	f381 8811 	msr	BASEPRI, r1
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	4819      	ldr	r0, [pc, #100]	; (8004a00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800499c:	f7ff f8ad 	bl	8003afa <_PreparePacket>
 80049a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049a6:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e00b      	b.n	80049d2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	61f9      	str	r1, [r7, #28]
 80049c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	09db      	lsrs	r3, r3, #7
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b7f      	cmp	r3, #127	; 0x7f
 80049d6:	d8f0      	bhi.n	80049ba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	61fa      	str	r2, [r7, #28]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80049e8:	2208      	movs	r2, #8
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	6938      	ldr	r0, [r7, #16]
 80049ee:	f7ff f975 	bl	8003cdc <_SendPacket>
  RECORD_END();
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f383 8811 	msr	BASEPRI, r3
}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2001436c 	.word	0x2001436c
 8004a04:	2001433c 	.word	0x2001433c

08004a08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a10:	f3ef 8311 	mrs	r3, BASEPRI
 8004a14:	f04f 0120 	mov.w	r1, #32
 8004a18:	f381 8811 	msr	BASEPRI, r1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	4819      	ldr	r0, [pc, #100]	; (8004a84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004a20:	f7ff f86b 	bl	8003afa <_PreparePacket>
 8004a24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e00b      	b.n	8004a56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	1c59      	adds	r1, r3, #1
 8004a46:	61f9      	str	r1, [r7, #28]
 8004a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	09db      	lsrs	r3, r3, #7
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b7f      	cmp	r3, #127	; 0x7f
 8004a5a:	d8f0      	bhi.n	8004a3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	61fa      	str	r2, [r7, #28]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6938      	ldr	r0, [r7, #16]
 8004a72:	f7ff f933 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f383 8811 	msr	BASEPRI, r3
}
 8004a7c:	bf00      	nop
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	2001436c 	.word	0x2001436c
 8004a88:	2001433c 	.word	0x2001433c

08004a8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a94:	f3ef 8311 	mrs	r3, BASEPRI
 8004a98:	f04f 0120 	mov.w	r1, #32
 8004a9c:	f381 8811 	msr	BASEPRI, r1
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	4819      	ldr	r0, [pc, #100]	; (8004b08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004aa4:	f7ff f829 	bl	8003afa <_PreparePacket>
 8004aa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004aae:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e00b      	b.n	8004ada <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	61f9      	str	r1, [r7, #28]
 8004acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d8f0      	bhi.n	8004ac2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	61fa      	str	r2, [r7, #28]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004af0:	2206      	movs	r2, #6
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6938      	ldr	r0, [r7, #16]
 8004af6:	f7ff f8f1 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f383 8811 	msr	BASEPRI, r3
}
 8004b00:	bf00      	nop
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	2001436c 	.word	0x2001436c
 8004b0c:	2001433c 	.word	0x2001433c

08004b10 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1e:	f04f 0120 	mov.w	r1, #32
 8004b22:	f381 8811 	msr	BASEPRI, r1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	4827      	ldr	r0, [pc, #156]	; (8004bc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004b2a:	f7fe ffe6 	bl	8003afa <_PreparePacket>
 8004b2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	e00b      	b.n	8004b60 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	6279      	str	r1, [r7, #36]	; 0x24
 8004b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	09db      	lsrs	r3, r3, #7
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d8f0      	bhi.n	8004b48 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	61f9      	str	r1, [r7, #28]
 8004b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	61fa      	str	r2, [r7, #28]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004bae:	2207      	movs	r2, #7
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	6938      	ldr	r0, [r7, #16]
 8004bb4:	f7ff f892 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	2001436c 	.word	0x2001436c
 8004bcc:	2001433c 	.word	0x2001433c

08004bd0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	2001433c 	.word	0x2001433c

08004bf0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004bfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d06d      	beq.n	8004cde <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0c:	e008      	b.n	8004c20 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3f2      	bcc.n	8004c0e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c28:	e000      	b.n	8004c2c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c2a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d055      	beq.n	8004cde <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c32:	f3ef 8311 	mrs	r3, BASEPRI
 8004c36:	f04f 0120 	mov.w	r1, #32
 8004c3a:	f381 8811 	msr	BASEPRI, r1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	482a      	ldr	r0, [pc, #168]	; (8004cec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004c42:	f7fe ff5a 	bl	8003afa <_PreparePacket>
 8004c46:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	e00b      	b.n	8004c6e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	1c59      	adds	r1, r3, #1
 8004c5e:	6279      	str	r1, [r7, #36]	; 0x24
 8004c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	09db      	lsrs	r3, r3, #7
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2b7f      	cmp	r3, #127	; 0x7f
 8004c72:	d8f0      	bhi.n	8004c56 <SEGGER_SYSVIEW_SendModule+0x66>
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	627a      	str	r2, [r7, #36]	; 0x24
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e00b      	b.n	8004ca8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	61f9      	str	r1, [r7, #28]
 8004c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	09db      	lsrs	r3, r3, #7
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b7f      	cmp	r3, #127	; 0x7f
 8004cac:	d8f0      	bhi.n	8004c90 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	61fa      	str	r2, [r7, #28]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7fe feca 	bl	8003a60 <_EncodeStr>
 8004ccc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004cce:	2216      	movs	r2, #22
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	6938      	ldr	r0, [r7, #16]
 8004cd4:	f7ff f802 	bl	8003cdc <_SendPacket>
      RECORD_END();
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3730      	adds	r7, #48	; 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20014364 	.word	0x20014364
 8004cec:	2001436c 	.word	0x2001436c

08004cf0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f2      	bne.n	8004d04 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20014364 	.word	0x20014364

08004d2c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d32:	f3ef 8311 	mrs	r3, BASEPRI
 8004d36:	f04f 0120 	mov.w	r1, #32
 8004d3a:	f381 8811 	msr	BASEPRI, r1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	4817      	ldr	r0, [pc, #92]	; (8004da0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004d42:	f7fe feda 	bl	8003afa <_PreparePacket>
 8004d46:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e00b      	b.n	8004d70 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1c59      	adds	r1, r3, #1
 8004d60:	6179      	str	r1, [r7, #20]
 8004d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	09db      	lsrs	r3, r3, #7
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b7f      	cmp	r3, #127	; 0x7f
 8004d74:	d8f0      	bhi.n	8004d58 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	617a      	str	r2, [r7, #20]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004d86:	221b      	movs	r2, #27
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	68b8      	ldr	r0, [r7, #8]
 8004d8c:	f7fe ffa6 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f383 8811 	msr	BASEPRI, r3
}
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2001436c 	.word	0x2001436c
 8004da4:	20014368 	.word	0x20014368

08004da8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004db0:	f3ef 8311 	mrs	r3, BASEPRI
 8004db4:	f04f 0120 	mov.w	r1, #32
 8004db8:	f381 8811 	msr	BASEPRI, r1
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	4827      	ldr	r0, [pc, #156]	; (8004e5c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004dc0:	f7fe fe9b 	bl	8003afa <_PreparePacket>
 8004dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f7fe fe48 	bl	8003a60 <_EncodeStr>
 8004dd0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	e00b      	b.n	8004df4 <SEGGER_SYSVIEW_Warn+0x4c>
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	6279      	str	r1, [r7, #36]	; 0x24
 8004de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	09db      	lsrs	r3, r3, #7
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2b7f      	cmp	r3, #127	; 0x7f
 8004df8:	d8f0      	bhi.n	8004ddc <SEGGER_SYSVIEW_Warn+0x34>
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e00b      	b.n	8004e2c <SEGGER_SYSVIEW_Warn+0x84>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	61f9      	str	r1, [r7, #28]
 8004e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	09db      	lsrs	r3, r3, #7
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e30:	d8f0      	bhi.n	8004e14 <SEGGER_SYSVIEW_Warn+0x6c>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	61fa      	str	r2, [r7, #28]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e42:	221a      	movs	r2, #26
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	6938      	ldr	r0, [r7, #16]
 8004e48:	f7fe ff48 	bl	8003cdc <_SendPacket>
  RECORD_END();
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
}
 8004e52:	bf00      	nop
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2001436c 	.word	0x2001436c

08004e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e66:	f000 fbdd 	bl	8005624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e6a:	f000 f86b 	bl	8004f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e6e:	f000 f8d3 	bl	8005018 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 8004e72:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <main+0xc4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <main+0xc4>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8004e7e:	f7fe faf1 	bl	8003464 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8004e82:	f7ff fa21 	bl	80042c8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_green_led,"green_led_task",1024,NULL,2,&task_handle_green_led);
 8004e86:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <main+0xc8>)
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e94:	4925      	ldr	r1, [pc, #148]	; (8004f2c <main+0xcc>)
 8004e96:	4826      	ldr	r0, [pc, #152]	; (8004f30 <main+0xd0>)
 8004e98:	f7fc fac8 	bl	800142c <xTaskCreate>
 8004e9c:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d00a      	beq.n	8004eba <main+0x5a>
        __asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60bb      	str	r3, [r7, #8]
    }
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <main+0x58>

  status = xTaskCreate(task_blue_led,"blue_led_task",1024,NULL,2,&task_handle_blue_led);
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <main+0xd4>)
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec8:	491b      	ldr	r1, [pc, #108]	; (8004f38 <main+0xd8>)
 8004eca:	481c      	ldr	r0, [pc, #112]	; (8004f3c <main+0xdc>)
 8004ecc:	f7fc faae 	bl	800142c <xTaskCreate>
 8004ed0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d00a      	beq.n	8004eee <main+0x8e>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	607b      	str	r3, [r7, #4]
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <main+0x8c>

  LedSemaphore = xSemaphoreCreateBinary();
 8004eee:	2203      	movs	r2, #3
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7fb fc54 	bl	80007a0 <xQueueGenericCreate>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <main+0xe0>)
 8004efc:	6013      	str	r3, [r2, #0]
  configASSERT(LedSemaphore != NULL);
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <main+0xe0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <main+0xbc>
        __asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	603b      	str	r3, [r7, #0]
    }
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <main+0xba>

  vTaskStartScheduler();
 8004f1c:	f7fc fc22 	bl	8001764 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f20:	e7fe      	b.n	8004f20 <main+0xc0>
 8004f22:	bf00      	nop
 8004f24:	e0001000 	.word	0xe0001000
 8004f28:	20014450 	.word	0x20014450
 8004f2c:	08006c34 	.word	0x08006c34
 8004f30:	080052d5 	.word	0x080052d5
 8004f34:	20014454 	.word	0x20014454
 8004f38:	08006c44 	.word	0x08006c44
 8004f3c:	08005311 	.word	0x08005311
 8004f40:	20014458 	.word	0x20014458

08004f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b094      	sub	sp, #80	; 0x50
 8004f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f4a:	f107 0320 	add.w	r3, r7, #32
 8004f4e:	2230      	movs	r2, #48	; 0x30
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fde6 	bl	8006b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	4b28      	ldr	r3, [pc, #160]	; (8005010 <SystemClock_Config+0xcc>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <SystemClock_Config+0xcc>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6413      	str	r3, [r2, #64]	; 0x40
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <SystemClock_Config+0xcc>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <SystemClock_Config+0xd0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a21      	ldr	r2, [pc, #132]	; (8005014 <SystemClock_Config+0xd0>)
 8004f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <SystemClock_Config+0xd0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fa8:	2310      	movs	r3, #16
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fac:	2302      	movs	r3, #2
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004fb8:	2332      	movs	r3, #50	; 0x32
 8004fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004fc0:	2307      	movs	r3, #7
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fc4:	f107 0320 	add.w	r3, r7, #32
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fe05 	bl	8005bd8 <HAL_RCC_OscConfig>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004fd4:	f000 fa1e 	bl	8005414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fd8:	230f      	movs	r3, #15
 8004fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f866 	bl	80060c8 <HAL_RCC_ClockConfig>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005002:	f000 fa07 	bl	8005414 <Error_Handler>
  }
}
 8005006:	bf00      	nop
 8005008:	3750      	adds	r7, #80	; 0x50
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000

08005018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	; 0x30
 800501c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501e:	f107 031c 	add.w	r3, r7, #28
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	4ba2      	ldr	r3, [pc, #648]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4aa1      	ldr	r2, [pc, #644]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005038:	f043 0310 	orr.w	r3, r3, #16
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	4b9b      	ldr	r3, [pc, #620]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	4a9a      	ldr	r2, [pc, #616]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6313      	str	r3, [r2, #48]	; 0x30
 800505a:	4b98      	ldr	r3, [pc, #608]	; (80052bc <MX_GPIO_Init+0x2a4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	4b94      	ldr	r3, [pc, #592]	; (80052bc <MX_GPIO_Init+0x2a4>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	4a93      	ldr	r2, [pc, #588]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	6313      	str	r3, [r2, #48]	; 0x30
 8005076:	4b91      	ldr	r3, [pc, #580]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b8d      	ldr	r3, [pc, #564]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	4a8c      	ldr	r2, [pc, #560]	; (80052bc <MX_GPIO_Init+0x2a4>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6313      	str	r3, [r2, #48]	; 0x30
 8005092:	4b8a      	ldr	r3, [pc, #552]	; (80052bc <MX_GPIO_Init+0x2a4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	4b86      	ldr	r3, [pc, #536]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4a85      	ldr	r2, [pc, #532]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	6313      	str	r3, [r2, #48]	; 0x30
 80050ae:	4b83      	ldr	r3, [pc, #524]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	4b7f      	ldr	r3, [pc, #508]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	4a7e      	ldr	r2, [pc, #504]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ca:	4b7c      	ldr	r3, [pc, #496]	; (80052bc <MX_GPIO_Init+0x2a4>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2108      	movs	r1, #8
 80050da:	4879      	ldr	r0, [pc, #484]	; (80052c0 <MX_GPIO_Init+0x2a8>)
 80050dc:	f000 fd62 	bl	8005ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80050e0:	2201      	movs	r2, #1
 80050e2:	2101      	movs	r1, #1
 80050e4:	4877      	ldr	r0, [pc, #476]	; (80052c4 <MX_GPIO_Init+0x2ac>)
 80050e6:	f000 fd5d 	bl	8005ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80050ea:	2200      	movs	r2, #0
 80050ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80050f0:	4875      	ldr	r0, [pc, #468]	; (80052c8 <MX_GPIO_Init+0x2b0>)
 80050f2:	f000 fd57 	bl	8005ba4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80050f6:	2308      	movs	r3, #8
 80050f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050fa:	2301      	movs	r3, #1
 80050fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005102:	2300      	movs	r3, #0
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005106:	f107 031c 	add.w	r3, r7, #28
 800510a:	4619      	mov	r1, r3
 800510c:	486c      	ldr	r0, [pc, #432]	; (80052c0 <MX_GPIO_Init+0x2a8>)
 800510e:	f000 fbad 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8005112:	2301      	movs	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005116:	2301      	movs	r3, #1
 8005118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511e:	2300      	movs	r3, #0
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005122:	f107 031c 	add.w	r3, r7, #28
 8005126:	4619      	mov	r1, r3
 8005128:	4866      	ldr	r0, [pc, #408]	; (80052c4 <MX_GPIO_Init+0x2ac>)
 800512a:	f000 fb9f 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800512e:	2308      	movs	r3, #8
 8005130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005132:	2302      	movs	r3, #2
 8005134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513a:	2300      	movs	r3, #0
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800513e:	2305      	movs	r3, #5
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005142:	f107 031c 	add.w	r3, r7, #28
 8005146:	4619      	mov	r1, r3
 8005148:	485e      	ldr	r0, [pc, #376]	; (80052c4 <MX_GPIO_Init+0x2ac>)
 800514a:	f000 fb8f 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005152:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800515c:	f107 031c 	add.w	r3, r7, #28
 8005160:	4619      	mov	r1, r3
 8005162:	485a      	ldr	r0, [pc, #360]	; (80052cc <MX_GPIO_Init+0x2b4>)
 8005164:	f000 fb82 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005168:	2310      	movs	r3, #16
 800516a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	2302      	movs	r3, #2
 800516e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005178:	2306      	movs	r3, #6
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800517c:	f107 031c 	add.w	r3, r7, #28
 8005180:	4619      	mov	r1, r3
 8005182:	4852      	ldr	r0, [pc, #328]	; (80052cc <MX_GPIO_Init+0x2b4>)
 8005184:	f000 fb72 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005188:	23e0      	movs	r3, #224	; 0xe0
 800518a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	2300      	movs	r3, #0
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005194:	2300      	movs	r3, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005198:	2305      	movs	r3, #5
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519c:	f107 031c 	add.w	r3, r7, #28
 80051a0:	4619      	mov	r1, r3
 80051a2:	484a      	ldr	r0, [pc, #296]	; (80052cc <MX_GPIO_Init+0x2b4>)
 80051a4:	f000 fb62 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80051a8:	2304      	movs	r3, #4
 80051aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	2300      	movs	r3, #0
 80051ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	4619      	mov	r1, r3
 80051ba:	4845      	ldr	r0, [pc, #276]	; (80052d0 <MX_GPIO_Init+0x2b8>)
 80051bc:	f000 fb56 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80051c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051d2:	2305      	movs	r3, #5
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80051d6:	f107 031c 	add.w	r3, r7, #28
 80051da:	4619      	mov	r1, r3
 80051dc:	483c      	ldr	r0, [pc, #240]	; (80052d0 <MX_GPIO_Init+0x2b8>)
 80051de:	f000 fb45 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80051e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80051e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e8:	2301      	movs	r3, #1
 80051ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051f4:	f107 031c 	add.w	r3, r7, #28
 80051f8:	4619      	mov	r1, r3
 80051fa:	4833      	ldr	r0, [pc, #204]	; (80052c8 <MX_GPIO_Init+0x2b0>)
 80051fc:	f000 fb36 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005200:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	2302      	movs	r3, #2
 8005208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520e:	2300      	movs	r3, #0
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005212:	2306      	movs	r3, #6
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005216:	f107 031c 	add.w	r3, r7, #28
 800521a:	4619      	mov	r1, r3
 800521c:	4829      	ldr	r0, [pc, #164]	; (80052c4 <MX_GPIO_Init+0x2ac>)
 800521e:	f000 fb25 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522c:	2300      	movs	r3, #0
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005230:	f107 031c 	add.w	r3, r7, #28
 8005234:	4619      	mov	r1, r3
 8005236:	4825      	ldr	r0, [pc, #148]	; (80052cc <MX_GPIO_Init+0x2b4>)
 8005238:	f000 fb18 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800523c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005242:	2302      	movs	r3, #2
 8005244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005246:	2300      	movs	r3, #0
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524a:	2300      	movs	r3, #0
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800524e:	230a      	movs	r3, #10
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005252:	f107 031c 	add.w	r3, r7, #28
 8005256:	4619      	mov	r1, r3
 8005258:	481c      	ldr	r0, [pc, #112]	; (80052cc <MX_GPIO_Init+0x2b4>)
 800525a:	f000 fb07 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800525e:	2320      	movs	r3, #32
 8005260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800526a:	f107 031c 	add.w	r3, r7, #28
 800526e:	4619      	mov	r1, r3
 8005270:	4815      	ldr	r0, [pc, #84]	; (80052c8 <MX_GPIO_Init+0x2b0>)
 8005272:	f000 fafb 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005276:	f44f 7310 	mov.w	r3, #576	; 0x240
 800527a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800527c:	2312      	movs	r3, #18
 800527e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005284:	2300      	movs	r3, #0
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005288:	2304      	movs	r3, #4
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800528c:	f107 031c 	add.w	r3, r7, #28
 8005290:	4619      	mov	r1, r3
 8005292:	480f      	ldr	r0, [pc, #60]	; (80052d0 <MX_GPIO_Init+0x2b8>)
 8005294:	f000 faea 	bl	800586c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8005298:	2302      	movs	r3, #2
 800529a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800529c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80052a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80052a6:	f107 031c 	add.w	r3, r7, #28
 80052aa:	4619      	mov	r1, r3
 80052ac:	4804      	ldr	r0, [pc, #16]	; (80052c0 <MX_GPIO_Init+0x2a8>)
 80052ae:	f000 fadd 	bl	800586c <HAL_GPIO_Init>

}
 80052b2:	bf00      	nop
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40020800 	.word	0x40020800
 80052c8:	40020c00 	.word	0x40020c00
 80052cc:	40020000 	.word	0x40020000
 80052d0:	40020400 	.word	0x40020400

080052d4 <task_green_led>:

/* USER CODE BEGIN 4 */

static void task_green_led(void *params)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	while(1)
	{
		count++;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <task_green_led+0x34>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <task_green_led+0x34>)
 80052e4:	6013      	str	r3, [r2, #0]
		if(count >= SEM_GIVE_COUNT)
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <task_green_led+0x34>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d909      	bls.n	8005302 <task_green_led+0x2e>
		{
			count = 0;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <task_green_led+0x34>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(LedSemaphore);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <task_green_led+0x38>)
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	f7fb fad7 	bl	80008b0 <xQueueGenericSend>
		}

		toggle_green_led();
 8005302:	f000 f81d 	bl	8005340 <toggle_green_led>
		count++;
 8005306:	e7e9      	b.n	80052dc <task_green_led+0x8>
 8005308:	2001445c 	.word	0x2001445c
 800530c:	20014458 	.word	0x20014458

08005310 <task_blue_led>:
	}
}

static void task_blue_led(void *params)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(LedSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <task_blue_led+0x2c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2132      	movs	r1, #50	; 0x32
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fdba 	bl	8000e98 <xQueueSemaphoreTake>
 8005324:	4603      	mov	r3, r0
 8005326:	2b01      	cmp	r3, #1
 8005328:	d104      	bne.n	8005334 <task_blue_led+0x24>
		{
			turn_off_red_led();
 800532a:	f000 f855 	bl	80053d8 <turn_off_red_led>
			blink_blue_led();
 800532e:	f000 f821 	bl	8005374 <blink_blue_led>
 8005332:	e7f1      	b.n	8005318 <task_blue_led+0x8>
		}
		else
		{
			turn_on_red_led();
 8005334:	f000 f844 	bl	80053c0 <turn_on_red_led>
		if(xSemaphoreTake(LedSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 8005338:	e7ee      	b.n	8005318 <task_blue_led+0x8>
 800533a:	bf00      	nop
 800533c:	20014458 	.word	0x20014458

08005340 <toggle_green_led>:
		}
	}
}

static void toggle_green_led(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GREEN_LED_PIN,1);
 8005344:	2201      	movs	r2, #1
 8005346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800534a:	4809      	ldr	r0, [pc, #36]	; (8005370 <toggle_green_led+0x30>)
 800534c:	f000 fc2a 	bl	8005ba4 <HAL_GPIO_WritePin>
	vTaskDelay(GREEN_LED_PERIOD);
 8005350:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005354:	f7fc f9ce 	bl	80016f4 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOD,GREEN_LED_PIN,0);
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800535e:	4804      	ldr	r0, [pc, #16]	; (8005370 <toggle_green_led+0x30>)
 8005360:	f000 fc20 	bl	8005ba4 <HAL_GPIO_WritePin>
	vTaskDelay(GREEN_LED_PERIOD);
 8005364:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005368:	f7fc f9c4 	bl	80016f4 <vTaskDelay>
}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40020c00 	.word	0x40020c00

08005374 <blink_blue_led>:

static void blink_blue_led(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0;i<BLUE_LED_BLINK_COUNT;i++)
 800537a:	2300      	movs	r3, #0
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	e014      	b.n	80053aa <blink_blue_led+0x36>
	{
		HAL_GPIO_WritePin(GPIOD,BLUE_LED_PIN,1);
 8005380:	2201      	movs	r2, #1
 8005382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005386:	480d      	ldr	r0, [pc, #52]	; (80053bc <blink_blue_led+0x48>)
 8005388:	f000 fc0c 	bl	8005ba4 <HAL_GPIO_WritePin>
		vTaskDelay(BLUE_LED_PERIOD);
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	f7fc f9b1 	bl	80016f4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD,BLUE_LED_PIN,0);
 8005392:	2200      	movs	r2, #0
 8005394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005398:	4808      	ldr	r0, [pc, #32]	; (80053bc <blink_blue_led+0x48>)
 800539a:	f000 fc03 	bl	8005ba4 <HAL_GPIO_WritePin>
		vTaskDelay(BLUE_LED_PERIOD);
 800539e:	2064      	movs	r0, #100	; 0x64
 80053a0:	f7fc f9a8 	bl	80016f4 <vTaskDelay>
	for(i=0;i<BLUE_LED_BLINK_COUNT;i++)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d9e7      	bls.n	8005380 <blink_blue_led+0xc>
	}
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020c00 	.word	0x40020c00

080053c0 <turn_on_red_led>:

static void turn_on_red_led(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,RED_LED_PIN,1);
 80053c4:	2201      	movs	r2, #1
 80053c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053ca:	4802      	ldr	r0, [pc, #8]	; (80053d4 <turn_on_red_led+0x14>)
 80053cc:	f000 fbea 	bl	8005ba4 <HAL_GPIO_WritePin>
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40020c00 	.word	0x40020c00

080053d8 <turn_off_red_led>:

static void turn_off_red_led(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,RED_LED_PIN,0);
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053e2:	4802      	ldr	r0, [pc, #8]	; (80053ec <turn_off_red_led+0x14>)
 80053e4:	f000 fbde 	bl	8005ba4 <HAL_GPIO_WritePin>
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40020c00 	.word	0x40020c00

080053f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005402:	f000 f931 	bl	8005668 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40001000 	.word	0x40001000

08005414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005418:	b672      	cpsid	i
}
 800541a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800541c:	e7fe      	b.n	800541c <Error_Handler+0x8>
	...

08005420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_MspInit+0x50>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	4a10      	ldr	r2, [pc, #64]	; (8005470 <HAL_MspInit+0x50>)
 8005430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005434:	6453      	str	r3, [r2, #68]	; 0x44
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_MspInit+0x50>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <HAL_MspInit+0x50>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <HAL_MspInit+0x50>)
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6413      	str	r3, [r2, #64]	; 0x40
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_MspInit+0x50>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800545e:	2003      	movs	r0, #3
 8005460:	f000 f9cf 	bl	8005802 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8005464:	f7fd fc48 	bl	8002cf8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800

08005474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	4b33      	ldr	r3, [pc, #204]	; (8005558 <HAL_InitTick+0xe4>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	4a32      	ldr	r2, [pc, #200]	; (8005558 <HAL_InitTick+0xe4>)
 800548e:	f043 0310 	orr.w	r3, r3, #16
 8005492:	6413      	str	r3, [r2, #64]	; 0x40
 8005494:	4b30      	ldr	r3, [pc, #192]	; (8005558 <HAL_InitTick+0xe4>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054a0:	f107 0210 	add.w	r2, r7, #16
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f818 	bl	80064e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80054ba:	f000 fffd 	bl	80064b8 <HAL_RCC_GetPCLK1Freq>
 80054be:	6378      	str	r0, [r7, #52]	; 0x34
 80054c0:	e004      	b.n	80054cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80054c2:	f000 fff9 	bl	80064b8 <HAL_RCC_GetPCLK1Freq>
 80054c6:	4603      	mov	r3, r0
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	4a23      	ldr	r2, [pc, #140]	; (800555c <HAL_InitTick+0xe8>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	0c9b      	lsrs	r3, r3, #18
 80054d6:	3b01      	subs	r3, #1
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80054da:	4b21      	ldr	r3, [pc, #132]	; (8005560 <HAL_InitTick+0xec>)
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <HAL_InitTick+0xf0>)
 80054de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80054e0:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <HAL_InitTick+0xec>)
 80054e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_InitTick+0xec>)
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80054ee:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <HAL_InitTick+0xec>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <HAL_InitTick+0xec>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054fa:	4b19      	ldr	r3, [pc, #100]	; (8005560 <HAL_InitTick+0xec>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005500:	4817      	ldr	r0, [pc, #92]	; (8005560 <HAL_InitTick+0xec>)
 8005502:	f001 f81f 	bl	8006544 <HAL_TIM_Base_Init>
 8005506:	4603      	mov	r3, r0
 8005508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800550c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11b      	bne.n	800554c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005514:	4812      	ldr	r0, [pc, #72]	; (8005560 <HAL_InitTick+0xec>)
 8005516:	f001 f86f 	bl	80065f8 <HAL_TIM_Base_Start_IT>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005524:	2b00      	cmp	r3, #0
 8005526:	d111      	bne.n	800554c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005528:	2036      	movs	r0, #54	; 0x36
 800552a:	f000 f991 	bl	8005850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d808      	bhi.n	8005546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005534:	2200      	movs	r2, #0
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	2036      	movs	r0, #54	; 0x36
 800553a:	f000 f96d 	bl	8005818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <HAL_InitTick+0xf4>)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e002      	b.n	800554c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800554c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005550:	4618      	mov	r0, r3
 8005552:	3738      	adds	r7, #56	; 0x38
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	431bde83 	.word	0x431bde83
 8005560:	20014460 	.word	0x20014460
 8005564:	40001000 	.word	0x40001000
 8005568:	2000000c 	.word	0x2000000c

0800556c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005570:	e7fe      	b.n	8005570 <NMI_Handler+0x4>

08005572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005576:	e7fe      	b.n	8005576 <HardFault_Handler+0x4>

08005578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800557c:	e7fe      	b.n	800557c <MemManage_Handler+0x4>

0800557e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005582:	e7fe      	b.n	8005582 <BusFault_Handler+0x4>

08005584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005588:	e7fe      	b.n	8005588 <UsageFault_Handler+0x4>

0800558a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <TIM6_DAC_IRQHandler+0x10>)
 800559e:	f001 f89b 	bl	80066d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20014460 	.word	0x20014460

080055ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <SystemInit+0x20>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <SystemInit+0x20>)
 80055b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000ed00 	.word	0xe000ed00

080055d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055d4:	480d      	ldr	r0, [pc, #52]	; (800560c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055d6:	490e      	ldr	r1, [pc, #56]	; (8005610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055d8:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055dc:	e002      	b.n	80055e4 <LoopCopyDataInit>

080055de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055e2:	3304      	adds	r3, #4

080055e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e8:	d3f9      	bcc.n	80055de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ea:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055ec:	4c0b      	ldr	r4, [pc, #44]	; (800561c <LoopFillZerobss+0x26>)
  movs r3, #0
 80055ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055f0:	e001      	b.n	80055f6 <LoopFillZerobss>

080055f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055f4:	3204      	adds	r2, #4

080055f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f8:	d3fb      	bcc.n	80055f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055fa:	f7ff ffd7 	bl	80055ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055fe:	f001 fa4f 	bl	8006aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005602:	f7ff fc2d 	bl	8004e60 <main>
  bx  lr    
 8005606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800560c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005610:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8005614:	08006c90 	.word	0x08006c90
  ldr r2, =_sbss
 8005618:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800561c:	200144ac 	.word	0x200144ac

08005620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005620:	e7fe      	b.n	8005620 <ADC_IRQHandler>
	...

08005624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_Init+0x40>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_Init+0x40>)
 800562e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_Init+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <HAL_Init+0x40>)
 800563a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_Init+0x40>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_Init+0x40>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800564c:	2003      	movs	r0, #3
 800564e:	f000 f8d8 	bl	8005802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005652:	2000      	movs	r0, #0
 8005654:	f7ff ff0e 	bl	8005474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005658:	f7ff fee2 	bl	8005420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40023c00 	.word	0x40023c00

08005668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_IncTick+0x20>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_IncTick+0x24>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4413      	add	r3, r2
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_IncTick+0x24>)
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000010 	.word	0x20000010
 800568c:	200144a8 	.word	0x200144a8

08005690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return uwTick;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_GetTick+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	200144a8 	.word	0x200144a8

080056a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	60d3      	str	r3, [r2, #12]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <__NVIC_GetPriorityGrouping+0x18>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 0307 	and.w	r3, r3, #7
}
 80056fe:	4618      	mov	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	db0b      	blt.n	8005736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	4907      	ldr	r1, [pc, #28]	; (8005744 <__NVIC_EnableIRQ+0x38>)
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2001      	movs	r0, #1
 800572e:	fa00 f202 	lsl.w	r2, r0, r2
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	e000e100 	.word	0xe000e100

08005748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db0a      	blt.n	8005772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	490c      	ldr	r1, [pc, #48]	; (8005794 <__NVIC_SetPriority+0x4c>)
 8005762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005766:	0112      	lsls	r2, r2, #4
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	440b      	add	r3, r1
 800576c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005770:	e00a      	b.n	8005788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	4908      	ldr	r1, [pc, #32]	; (8005798 <__NVIC_SetPriority+0x50>)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	3b04      	subs	r3, #4
 8005780:	0112      	lsls	r2, r2, #4
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	440b      	add	r3, r1
 8005786:	761a      	strb	r2, [r3, #24]
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000e100 	.word	0xe000e100
 8005798:	e000ed00 	.word	0xe000ed00

0800579c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f1c3 0307 	rsb	r3, r3, #7
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf28      	it	cs
 80057ba:	2304      	movcs	r3, #4
 80057bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	d902      	bls.n	80057cc <NVIC_EncodePriority+0x30>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3b03      	subs	r3, #3
 80057ca:	e000      	b.n	80057ce <NVIC_EncodePriority+0x32>
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	401a      	ands	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	43d9      	mvns	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	4313      	orrs	r3, r2
         );
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3724      	adds	r7, #36	; 0x24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff ff4c 	bl	80056a8 <__NVIC_SetPriorityGrouping>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800582a:	f7ff ff61 	bl	80056f0 <__NVIC_GetPriorityGrouping>
 800582e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	6978      	ldr	r0, [r7, #20]
 8005836:	f7ff ffb1 	bl	800579c <NVIC_EncodePriority>
 800583a:	4602      	mov	r2, r0
 800583c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff80 	bl	8005748 <__NVIC_SetPriority>
}
 8005848:	bf00      	nop
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ff54 	bl	800570c <__NVIC_EnableIRQ>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e16b      	b.n	8005b60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005888:	2201      	movs	r2, #1
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	f040 815a 	bne.w	8005b5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d005      	beq.n	80058be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d130      	bne.n	8005920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	2203      	movs	r2, #3
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4013      	ands	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058f4:	2201      	movs	r2, #1
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 0201 	and.w	r2, r3, #1
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b03      	cmp	r3, #3
 800592a:	d017      	beq.n	800595c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	2203      	movs	r2, #3
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d123      	bne.n	80059b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	08da      	lsrs	r2, r3, #3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3208      	adds	r2, #8
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	220f      	movs	r2, #15
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	08da      	lsrs	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3208      	adds	r2, #8
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	2203      	movs	r2, #3
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 0203 	and.w	r2, r3, #3
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80b4 	beq.w	8005b5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	4b60      	ldr	r3, [pc, #384]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a5f      	ldr	r2, [pc, #380]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 80059fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <HAL_GPIO_Init+0x30c>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a0e:	4a5b      	ldr	r2, [pc, #364]	; (8005b7c <HAL_GPIO_Init+0x310>)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	3302      	adds	r3, #2
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	220f      	movs	r2, #15
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a52      	ldr	r2, [pc, #328]	; (8005b80 <HAL_GPIO_Init+0x314>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d02b      	beq.n	8005a92 <HAL_GPIO_Init+0x226>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a51      	ldr	r2, [pc, #324]	; (8005b84 <HAL_GPIO_Init+0x318>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d025      	beq.n	8005a8e <HAL_GPIO_Init+0x222>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a50      	ldr	r2, [pc, #320]	; (8005b88 <HAL_GPIO_Init+0x31c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01f      	beq.n	8005a8a <HAL_GPIO_Init+0x21e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a4f      	ldr	r2, [pc, #316]	; (8005b8c <HAL_GPIO_Init+0x320>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d019      	beq.n	8005a86 <HAL_GPIO_Init+0x21a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a4e      	ldr	r2, [pc, #312]	; (8005b90 <HAL_GPIO_Init+0x324>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_GPIO_Init+0x216>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a4d      	ldr	r2, [pc, #308]	; (8005b94 <HAL_GPIO_Init+0x328>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00d      	beq.n	8005a7e <HAL_GPIO_Init+0x212>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a4c      	ldr	r2, [pc, #304]	; (8005b98 <HAL_GPIO_Init+0x32c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <HAL_GPIO_Init+0x20e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a4b      	ldr	r2, [pc, #300]	; (8005b9c <HAL_GPIO_Init+0x330>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d101      	bne.n	8005a76 <HAL_GPIO_Init+0x20a>
 8005a72:	2307      	movs	r3, #7
 8005a74:	e00e      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a76:	2308      	movs	r3, #8
 8005a78:	e00c      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a7a:	2306      	movs	r3, #6
 8005a7c:	e00a      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a7e:	2305      	movs	r3, #5
 8005a80:	e008      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a82:	2304      	movs	r3, #4
 8005a84:	e006      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a86:	2303      	movs	r3, #3
 8005a88:	e004      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e002      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_GPIO_Init+0x228>
 8005a92:	2300      	movs	r3, #0
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	f002 0203 	and.w	r2, r2, #3
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	4093      	lsls	r3, r2
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa4:	4935      	ldr	r1, [pc, #212]	; (8005b7c <HAL_GPIO_Init+0x310>)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	089b      	lsrs	r3, r3, #2
 8005aaa:	3302      	adds	r3, #2
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ad6:	4a32      	ldr	r2, [pc, #200]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005adc:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b00:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b06:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b54:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_GPIO_Init+0x334>)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	f67f ae90 	bls.w	8005888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40021400 	.word	0x40021400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	40021c00 	.word	0x40021c00
 8005ba0:	40013c00 	.word	0x40013c00

08005ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bb4:	787b      	ldrb	r3, [r7, #1]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bba:	887a      	ldrh	r2, [r7, #2]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bc0:	e003      	b.n	8005bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	041a      	lsls	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	619a      	str	r2, [r3, #24]
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e267      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d075      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bf6:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00c      	beq.n	8005c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c02:	4b85      	ldr	r3, [pc, #532]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d112      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0e:	4b82      	ldr	r3, [pc, #520]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1a:	d10b      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	4b7e      	ldr	r3, [pc, #504]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05b      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x108>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d157      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e242      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCC_OscConfig+0x74>
 8005c3e:	4b76      	ldr	r3, [pc, #472]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a75      	ldr	r2, [pc, #468]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e01d      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c54:	d10c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x98>
 8005c56:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6f      	ldr	r2, [pc, #444]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6c      	ldr	r2, [pc, #432]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c70:	4b69      	ldr	r3, [pc, #420]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a68      	ldr	r2, [pc, #416]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b66      	ldr	r3, [pc, #408]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a65      	ldr	r2, [pc, #404]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c90:	f7ff fcfe 	bl	8005690 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c98:	f7ff fcfa 	bl	8005690 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e207      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0xc0>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7ff fcea 	bl	8005690 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7ff fce6 	bl	8005690 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	; 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e1f3      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd2:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0xe8>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d063      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfa:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d11c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d06:	4b44      	ldr	r3, [pc, #272]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d116      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e1c7      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2a:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4937      	ldr	r1, [pc, #220]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3e:	e03a      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d48:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <HAL_RCC_OscConfig+0x244>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4e:	f7ff fc9f 	bl	8005690 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d56:	f7ff fc9b 	bl	8005690 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e1a8      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4925      	ldr	r1, [pc, #148]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
 8005d88:	e015      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <HAL_RCC_OscConfig+0x244>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7ff fc7e 	bl	8005690 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d98:	f7ff fc7a 	bl	8005690 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e187      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d036      	beq.n	8005e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <HAL_RCC_OscConfig+0x248>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7ff fc5e 	bl	8005690 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dd8:	f7ff fc5a 	bl	8005690 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e167      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x200>
 8005df6:	e01b      	b.n	8005e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <HAL_RCC_OscConfig+0x248>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7ff fc47 	bl	8005690 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	e00e      	b.n	8005e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e06:	f7ff fc43 	bl	8005690 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d907      	bls.n	8005e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e150      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	42470000 	.word	0x42470000
 8005e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e24:	4b88      	ldr	r3, [pc, #544]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1ea      	bne.n	8005e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8097 	beq.w	8005f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e42:	4b81      	ldr	r3, [pc, #516]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	4b7d      	ldr	r3, [pc, #500]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	4a7c      	ldr	r2, [pc, #496]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e5e:	4b7a      	ldr	r3, [pc, #488]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6e:	4b77      	ldr	r3, [pc, #476]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d118      	bne.n	8005eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7a:	4b74      	ldr	r3, [pc, #464]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a73      	ldr	r2, [pc, #460]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e86:	f7ff fc03 	bl	8005690 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8e:	f7ff fbff 	bl	8005690 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e10c      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2ea>
 8005eb4:	4b64      	ldr	r3, [pc, #400]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4a63      	ldr	r2, [pc, #396]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec0:	e01c      	b.n	8005efc <HAL_RCC_OscConfig+0x324>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x30c>
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	4a5e      	ldr	r2, [pc, #376]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed6:	4b5c      	ldr	r3, [pc, #368]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	4a5b      	ldr	r2, [pc, #364]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0x324>
 8005ee4:	4b58      	ldr	r3, [pc, #352]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a57      	ldr	r2, [pc, #348]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	4b55      	ldr	r3, [pc, #340]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a54      	ldr	r2, [pc, #336]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	f023 0304 	bic.w	r3, r3, #4
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f04:	f7ff fbc4 	bl	8005690 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0c:	f7ff fbc0 	bl	8005690 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0cb      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f22:	4b49      	ldr	r3, [pc, #292]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0ee      	beq.n	8005f0c <HAL_RCC_OscConfig+0x334>
 8005f2e:	e014      	b.n	8005f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f30:	f7ff fbae 	bl	8005690 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f36:	e00a      	b.n	8005f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7ff fbaa 	bl	8005690 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e0b5      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ee      	bne.n	8005f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	4a38      	ldr	r2, [pc, #224]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80a1 	beq.w	80060b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f76:	4b34      	ldr	r3, [pc, #208]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d05c      	beq.n	800603c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d141      	bne.n	800600e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7ff fb7e 	bl	8005690 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f98:	f7ff fb7a 	bl	8005690 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e087      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	4b27      	ldr	r3, [pc, #156]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69da      	ldr	r2, [r3, #28]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	019b      	lsls	r3, r3, #6
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	491b      	ldr	r1, [pc, #108]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe6:	f7ff fb53 	bl	8005690 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fee:	f7ff fb4f 	bl	8005690 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e05c      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0f0      	beq.n	8005fee <HAL_RCC_OscConfig+0x416>
 800600c:	e054      	b.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7ff fb3c 	bl	8005690 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601c:	f7ff fb38 	bl	8005690 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e045      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x444>
 800603a:	e03d      	b.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d107      	bne.n	8006054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e038      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
 8006048:	40023800 	.word	0x40023800
 800604c:	40007000 	.word	0x40007000
 8006050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006054:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <HAL_RCC_OscConfig+0x4ec>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d028      	beq.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d121      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800607a:	429a      	cmp	r2, r3
 800607c:	d11a      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800608a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800608c:	4293      	cmp	r3, r2
 800608e:	d111      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	3b01      	subs	r3, #1
 800609e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800

080060c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0cc      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060dc:	4b68      	ldr	r3, [pc, #416]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d90c      	bls.n	8006104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b63      	ldr	r3, [pc, #396]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0b8      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800611c:	4b59      	ldr	r3, [pc, #356]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a58      	ldr	r2, [pc, #352]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006134:	4b53      	ldr	r3, [pc, #332]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800613e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006140:	4b50      	ldr	r3, [pc, #320]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	494d      	ldr	r1, [pc, #308]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	4313      	orrs	r3, r2
 8006150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d044      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006166:	4b47      	ldr	r3, [pc, #284]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d119      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d003      	beq.n	8006186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006182:	2b03      	cmp	r3, #3
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006186:	4b3f      	ldr	r3, [pc, #252]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e06f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006196:	4b3b      	ldr	r3, [pc, #236]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e067      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 0203 	bic.w	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4934      	ldr	r1, [pc, #208]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b8:	f7ff fa6a 	bl	8005690 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	e00a      	b.n	80061d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c0:	f7ff fa66 	bl	8005690 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e04f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 020c 	and.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1eb      	bne.n	80061c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d20c      	bcs.n	8006210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fe:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e032      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4916      	ldr	r1, [pc, #88]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800624e:	f000 f821 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 8006252:	4602      	mov	r2, r0
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	490a      	ldr	r1, [pc, #40]	; (8006288 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	5ccb      	ldrb	r3, [r1, r3]
 8006262:	fa22 f303 	lsr.w	r3, r2, r3
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <HAL_RCC_ClockConfig+0x1c4>)
 8006268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <HAL_RCC_ClockConfig+0x1c8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f900 	bl	8005474 <HAL_InitTick>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40023c00 	.word	0x40023c00
 8006284:	40023800 	.word	0x40023800
 8006288:	08006c68 	.word	0x08006c68
 800628c:	20000008 	.word	0x20000008
 8006290:	2000000c 	.word	0x2000000c

08006294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b094      	sub	sp, #80	; 0x50
 800629a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
 80062a0:	2300      	movs	r3, #0
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a4:	2300      	movs	r3, #0
 80062a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d00d      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x40>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	f200 80e1 	bhi.w	8006480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0x34>
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d003      	beq.n	80062ce <HAL_RCC_GetSysClockFreq+0x3a>
 80062c6:	e0db      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b73      	ldr	r3, [pc, #460]	; (8006498 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062cc:	e0db      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ce:	4b73      	ldr	r3, [pc, #460]	; (800649c <HAL_RCC_GetSysClockFreq+0x208>)
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d2:	e0d8      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062d4:	4b6f      	ldr	r3, [pc, #444]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d063      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ea:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	099b      	lsrs	r3, r3, #6
 80062f0:	2200      	movs	r2, #0
 80062f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fc:	633b      	str	r3, [r7, #48]	; 0x30
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
 8006302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	f04f 0000 	mov.w	r0, #0
 800630e:	f04f 0100 	mov.w	r1, #0
 8006312:	0159      	lsls	r1, r3, #5
 8006314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006318:	0150      	lsls	r0, r2, #5
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4621      	mov	r1, r4
 8006320:	1a51      	subs	r1, r2, r1
 8006322:	6139      	str	r1, [r7, #16]
 8006324:	4629      	mov	r1, r5
 8006326:	eb63 0301 	sbc.w	r3, r3, r1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006338:	4659      	mov	r1, fp
 800633a:	018b      	lsls	r3, r1, #6
 800633c:	4651      	mov	r1, sl
 800633e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006342:	4651      	mov	r1, sl
 8006344:	018a      	lsls	r2, r1, #6
 8006346:	4651      	mov	r1, sl
 8006348:	ebb2 0801 	subs.w	r8, r2, r1
 800634c:	4659      	mov	r1, fp
 800634e:	eb63 0901 	sbc.w	r9, r3, r1
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	4623      	mov	r3, r4
 800636c:	eb18 0303 	adds.w	r3, r8, r3
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	462b      	mov	r3, r5
 8006374:	eb49 0303 	adc.w	r3, r9, r3
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006386:	4629      	mov	r1, r5
 8006388:	024b      	lsls	r3, r1, #9
 800638a:	4621      	mov	r1, r4
 800638c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006390:	4621      	mov	r1, r4
 8006392:	024a      	lsls	r2, r1, #9
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639a:	2200      	movs	r2, #0
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063a4:	f7f9 ff5e 	bl	8000264 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4613      	mov	r3, r2
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	e058      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b2:	4b38      	ldr	r3, [pc, #224]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	2200      	movs	r2, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	4611      	mov	r1, r2
 80063be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	0159      	lsls	r1, r3, #5
 80063da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063de:	0150      	lsls	r0, r2, #5
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4641      	mov	r1, r8
 80063e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ea:	4649      	mov	r1, r9
 80063ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006404:	ebb2 040a 	subs.w	r4, r2, sl
 8006408:	eb63 050b 	sbc.w	r5, r3, fp
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	00eb      	lsls	r3, r5, #3
 8006416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800641a:	00e2      	lsls	r2, r4, #3
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	4643      	mov	r3, r8
 8006422:	18e3      	adds	r3, r4, r3
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	464b      	mov	r3, r9
 8006428:	eb45 0303 	adc.w	r3, r5, r3
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800643a:	4629      	mov	r1, r5
 800643c:	028b      	lsls	r3, r1, #10
 800643e:	4621      	mov	r1, r4
 8006440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006444:	4621      	mov	r1, r4
 8006446:	028a      	lsls	r2, r1, #10
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	2200      	movs	r2, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	61fa      	str	r2, [r7, #28]
 8006454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006458:	f7f9 ff04 	bl	8000264 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4613      	mov	r3, r2
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	3301      	adds	r3, #1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800647e:	e002      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_GetSysClockFreq+0x204>)
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006488:	4618      	mov	r0, r3
 800648a:	3750      	adds	r7, #80	; 0x50
 800648c:	46bd      	mov	sp, r7
 800648e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800
 8006498:	00f42400 	.word	0x00f42400
 800649c:	007a1200 	.word	0x007a1200

080064a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a4:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064a6:	681b      	ldr	r3, [r3, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000008 	.word	0x20000008

080064b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064bc:	f7ff fff0 	bl	80064a0 <HAL_RCC_GetHCLKFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	0a9b      	lsrs	r3, r3, #10
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40023800 	.word	0x40023800
 80064dc:	08006c78 	.word	0x08006c78

080064e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	220f      	movs	r2, #15
 80064ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064f0:	4b12      	ldr	r3, [pc, #72]	; (800653c <HAL_RCC_GetClockConfig+0x5c>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0203 	and.w	r2, r3, #3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <HAL_RCC_GetClockConfig+0x5c>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <HAL_RCC_GetClockConfig+0x5c>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <HAL_RCC_GetClockConfig+0x5c>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	08db      	lsrs	r3, r3, #3
 800651a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <HAL_RCC_GetClockConfig+0x60>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0207 	and.w	r2, r3, #7
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
 8006540:	40023c00 	.word	0x40023c00

08006544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e041      	b.n	80065da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f839 	bl	80065e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 f9d8 	bl	8006938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	d001      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e04e      	b.n	80066ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a23      	ldr	r2, [pc, #140]	; (80066bc <HAL_TIM_Base_Start_IT+0xc4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663a:	d01d      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1c      	ldr	r2, [pc, #112]	; (80066c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x80>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d111      	bne.n	800669c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b06      	cmp	r3, #6
 8006688:	d010      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669a:	e007      	b.n	80066ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40010000 	.word	0x40010000
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40000800 	.word	0x40000800
 80066c8:	40000c00 	.word	0x40000c00
 80066cc:	40010400 	.word	0x40010400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40001800 	.word	0x40001800

080066d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d122      	bne.n	8006734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d11b      	bne.n	8006734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0202 	mvn.w	r2, #2
 8006704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8ee 	bl	80068fc <HAL_TIM_IC_CaptureCallback>
 8006720:	e005      	b.n	800672e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8e0 	bl	80068e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8f1 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0204 	mvn.w	r2, #4
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8c4 	bl	80068fc <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8b6 	bl	80068e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8c7 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b08      	cmp	r3, #8
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0208 	mvn.w	r2, #8
 80067ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f89a 	bl	80068fc <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f88c 	bl	80068e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f89d 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0210 	mvn.w	r2, #16
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2208      	movs	r2, #8
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f870 	bl	80068fc <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f862 	bl	80068e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f873 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10e      	bne.n	800685c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d107      	bne.n	800685c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0201 	mvn.w	r2, #1
 8006854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fe fdca 	bl	80053f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d10e      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006874:	2b80      	cmp	r3, #128	; 0x80
 8006876:	d107      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f902 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d10e      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a0:	2b40      	cmp	r3, #64	; 0x40
 80068a2:	d107      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f838 	bl	8006924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d10e      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d107      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0220 	mvn.w	r2, #32
 80068d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f8cc 	bl	8006a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a40      	ldr	r2, [pc, #256]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006956:	d00f      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3d      	ldr	r2, [pc, #244]	; (8006a50 <TIM_Base_SetConfig+0x118>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <TIM_Base_SetConfig+0x11c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3b      	ldr	r2, [pc, #236]	; (8006a58 <TIM_Base_SetConfig+0x120>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3a      	ldr	r2, [pc, #232]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a2f      	ldr	r2, [pc, #188]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d02b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d027      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2c      	ldr	r2, [pc, #176]	; (8006a50 <TIM_Base_SetConfig+0x118>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d023      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <TIM_Base_SetConfig+0x11c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01f      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <TIM_Base_SetConfig+0x120>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d017      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <TIM_Base_SetConfig+0x128>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <TIM_Base_SetConfig+0x12c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <TIM_Base_SetConfig+0x130>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <TIM_Base_SetConfig+0x134>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a24      	ldr	r2, [pc, #144]	; (8006a70 <TIM_Base_SetConfig+0x138>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a23      	ldr	r2, [pc, #140]	; (8006a74 <TIM_Base_SetConfig+0x13c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a0c      	ldr	r2, [pc, #48]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d103      	bne.n	8006a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	615a      	str	r2, [r3, #20]
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800
 8006a6c:	40001800 	.word	0x40001800
 8006a70:	40001c00 	.word	0x40001c00
 8006a74:	40002000 	.word	0x40002000

08006a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <__libc_init_array>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4d0d      	ldr	r5, [pc, #52]	; (8006ad8 <__libc_init_array+0x38>)
 8006aa4:	4c0d      	ldr	r4, [pc, #52]	; (8006adc <__libc_init_array+0x3c>)
 8006aa6:	1b64      	subs	r4, r4, r5
 8006aa8:	10a4      	asrs	r4, r4, #2
 8006aaa:	2600      	movs	r6, #0
 8006aac:	42a6      	cmp	r6, r4
 8006aae:	d109      	bne.n	8006ac4 <__libc_init_array+0x24>
 8006ab0:	4d0b      	ldr	r5, [pc, #44]	; (8006ae0 <__libc_init_array+0x40>)
 8006ab2:	4c0c      	ldr	r4, [pc, #48]	; (8006ae4 <__libc_init_array+0x44>)
 8006ab4:	f000 f83e 	bl	8006b34 <_init>
 8006ab8:	1b64      	subs	r4, r4, r5
 8006aba:	10a4      	asrs	r4, r4, #2
 8006abc:	2600      	movs	r6, #0
 8006abe:	42a6      	cmp	r6, r4
 8006ac0:	d105      	bne.n	8006ace <__libc_init_array+0x2e>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac8:	4798      	blx	r3
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7ee      	b.n	8006aac <__libc_init_array+0xc>
 8006ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad2:	4798      	blx	r3
 8006ad4:	3601      	adds	r6, #1
 8006ad6:	e7f2      	b.n	8006abe <__libc_init_array+0x1e>
 8006ad8:	08006c88 	.word	0x08006c88
 8006adc:	08006c88 	.word	0x08006c88
 8006ae0:	08006c88 	.word	0x08006c88
 8006ae4:	08006c8c 	.word	0x08006c8c

08006ae8 <memcmp>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	3901      	subs	r1, #1
 8006aec:	4402      	add	r2, r0
 8006aee:	4290      	cmp	r0, r2
 8006af0:	d101      	bne.n	8006af6 <memcmp+0xe>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e005      	b.n	8006b02 <memcmp+0x1a>
 8006af6:	7803      	ldrb	r3, [r0, #0]
 8006af8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d001      	beq.n	8006b04 <memcmp+0x1c>
 8006b00:	1b18      	subs	r0, r3, r4
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	3001      	adds	r0, #1
 8006b06:	e7f2      	b.n	8006aee <memcmp+0x6>

08006b08 <memcpy>:
 8006b08:	440a      	add	r2, r1
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b10:	d100      	bne.n	8006b14 <memcpy+0xc>
 8006b12:	4770      	bx	lr
 8006b14:	b510      	push	{r4, lr}
 8006b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b1e:	4291      	cmp	r1, r2
 8006b20:	d1f9      	bne.n	8006b16 <memcpy+0xe>
 8006b22:	bd10      	pop	{r4, pc}

08006b24 <memset>:
 8006b24:	4402      	add	r2, r0
 8006b26:	4603      	mov	r3, r0
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d100      	bne.n	8006b2e <memset+0xa>
 8006b2c:	4770      	bx	lr
 8006b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b32:	e7f9      	b.n	8006b28 <memset+0x4>

08006b34 <_init>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr

08006b40 <_fini>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr
